##
TAG_CHARSET=@€éèç
##
CREATE_PROC_IDX_CONTRAT_HISTO
=SQL=
create or replace PROCEDURE CREATE_PROC_IDX_CONTRAT_HISTO AUTHID CURRENT_USER
AS
TYPE TypeColNameCountTable
IS
  RECORD
  (
    COLUMN_NAME USER_TAB_COLUMNS.COLUMN_NAME%TYPE,
    COUNT_TABLE NUMBER,
    COLUMN_TYPE USER_TAB_COLUMNS.DATA_TYPE%TYPE);
TYPE TYP_COL_NAME
IS
  TABLE OF TypeColNameCountTable;
  TabcolContrat TYP_COL_NAME ;
  TabcolContratHisto TYP_COL_NAME ;
  v_reqCreate CLOB;
  v_reqCreateHistoRuptureContrat CLOB;
  v_reqCreateHistoModifOnly CLOB;
  v_reqProcInsertContrat1 CLOB;
  v_reqProcInsertContrat2 CLOB;
  v_reqProcInsertContrat CLOB;
  v_reqProcUpdateContrat1 CLOB;
  v_reqProcUpdateContrat CLOB;
  v_reqProcDeleteContrat1 CLOB;
  v_reqProcDeleteContrat2 CLOB;
  v_reqProcDeleteContrat CLOB;
  v_reqProcInsertContratHisto1 CLOB;
  v_reqProcInsertContratHisto CLOB;
  v_reqProcUpdateContratHisto1 CLOB;
  v_reqProcUpdateContratHisto CLOB;
  v_reqProcDeleteContratHisto CLOB;
  v_listDonneesContratType CLOB;
  v_listDonneesContrat CLOB;
  v_listNullContrat CLOB;
  v_listDonneesContratHistoType CLOB;
  v_listDonneesContratHisto CLOB;
  v_listNullContratHisto CLOB;
  emptyVal VARCHAR2(7);
BEGIN

  -- On crée les types T_LIG_DAC et T_TAB_DAC dynamiquement, avec toutes les colonnes de DAC
  v_listDonneesContratType := NULL;
  v_listDonneesContrat := NULL;
  v_listNullContrat := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContrat := v_listDonneesContrat||r.COLUMN_NAME;
    v_listDonneesContratType := v_listDonneesContratType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratType := v_listDonneesContratType||'('||r.DATA_LENGTH||')';
    ELSIF (r.DATA_TYPE='NUMBER' AND r.DATA_PRECISION IS NOT NULL AND r.DATA_SCALE IS NOT NULL) THEN
      v_listDonneesContratType := v_listDonneesContratType || '(' || r.DATA_PRECISION || ',' || r.DATA_SCALE || ')';
    END IF;
    v_listDonneesContrat := v_listDonneesContrat||',';
    v_listDonneesContratType := v_listDonneesContratType||',';
    v_listNullContrat := v_listNullContrat||'NULL,';
  END LOOP;
  v_listDonneesContrat := SUBSTR(v_listDonneesContrat, 1, LENGTH(v_listDonneesContrat)-1);
  v_listDonneesContratType := SUBSTR(v_listDonneesContratType, 1, LENGTH(v_listDonneesContratType)-1);
  v_listNullContrat := SUBSTR(v_listNullContrat, 1, LENGTH(v_listNullContrat)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DAC',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DAC IS OBJECT ('||v_listDonneesContratType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DAC IS TABLE OF T_LIG_DAC',0);

  -- On crée la fonction GET_EMPTY_LIG_DAC, qui a besoin du nombre de colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DAC RETURN T_LIG_DAC IS 
BEGIN 
  RETURN T_LIG_DAC('||v_listNullContrat||');
END GET_EMPTY_LIG_DAC;',0);

  -- On crée la fonction GET_DAC_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DAC IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC, PACMAT, NUMCNT FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DAC_MATRIC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DAC IS 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE MATRIC=p_matric ORDER BY DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MATRIC;',0);


  -- On crée les types T_LIG_DACH et T_TAB_DACH dynamiquement, avec toutes les colonnes de DACH
  v_listDonneesContratHistoType := NULL;
  v_listDonneesContratHisto := NULL;
  v_listNullContratHisto := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT_HISTO' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContratHisto := v_listDonneesContratHisto||r.COLUMN_NAME;
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType||'('||r.DATA_LENGTH||')';
    ELSIF (r.DATA_TYPE='NUMBER' AND r.DATA_PRECISION IS NOT NULL AND r.DATA_SCALE IS NOT NULL) THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType || '(' || r.DATA_PRECISION || ',' || r.DATA_SCALE || ')';
    END IF;
    v_listDonneesContratHisto := v_listDonneesContratHisto||',';
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||',';
    v_listNullContratHisto := v_listNullContratHisto||'NULL,';
  END LOOP;
  v_listDonneesContratHisto := SUBSTR(v_listDonneesContratHisto, 1, LENGTH(v_listDonneesContratHisto)-1);
  v_listDonneesContratHistoType := SUBSTR(v_listDonneesContratHistoType, 1, LENGTH(v_listDonneesContratHistoType)-1);
  v_listNullContratHisto := SUBSTR(v_listNullContratHisto, 1, LENGTH(v_listNullContratHisto)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DACH',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DACH IS OBJECT ('||v_listDonneesContratHistoType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DACH IS TABLE OF T_LIG_DACH',0);

  -- On crée la fonction GET_EMPTY_LIG_DACH, qui a besoin du nombre de colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DACH RETURN T_LIG_DACH IS 
BEGIN 
  RETURN T_LIG_DACH('||v_listNullContratHisto||');
END GET_EMPTY_LIG_DACH;',0);

  -- On crée la fonction GET_DACH_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DACH IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE (NUMPAC,PACMAT,NUMCNT,DATE_EFF) IN (SELECT NUMPAC, PACMAT, NUMCNT, DATE_IDX FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DACH_MATRIC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DACH IS 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE MATRIC=p_matric ORDER BY DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MATRIC;',0);


  SELECT COLUMN_NAME,
    0,
    DATA_TYPE BULK COLLECT
  INTO TabcolContrat
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME='DIC_ADM_CONTRAT'
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('IDPACMAT','DATE_EFF_CONTRAT','CURRENT_PAIEZAD','MATRIC','DATE_CREATION','DATE_DERNIERE_MODIF'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  
  SELECT COLUMN_NAME,
    (SELECT COUNT(*)
    FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT
    WHERE NOM_DONNEE=COLUMN_NAME
    ),
    DATA_TYPE BULK COLLECT
  INTO TabcolContratHisto
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME     ='DIC_ADM_CONTRAT_HISTO'
  AND COLUMN_NAME NOT IN
    (SELECT COLUMN_NAME
    FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME='DIC_ADM_CONTRAT'
    )
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('DATE_EFF','DATE_FIN','MATRIC','PAIEZAD','DATE_CREATION','DATE_DERNIERE_MODIF','DATE_FIN_BO','IDPACMAT','DATE_SORTIE_SIT_BO'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  v_reqCreate          := 'CREATE OR REPLACE PROCEDURE ALIM_IDX_CONTRAT_HISTO (p_onlyFlaggedNumpacPacmat NUMBER) AS ';
  IF TabcolContrat.count>0 THEN
    v_reqCreate        := v_reqCreate||'
    cursor curContrat is SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DSDCN, DSFCN';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Dsdcn;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColContrat IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT.NUMCNT%TYPE, DSDCN DIC_ADM_CONTRAT.DSDCN%TYPE, DSFCN DIC_ADM_CONTRAT.DSFCN%TYPE';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME||' DIC_ADM_CONTRAT.'||TabcolContrat(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligContrat TypeColContrat;';
    v_reqCreate := v_reqCreate||'previous_ligContrat TypeColContrat;   ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'
    cursor curHisto is  SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_EFF, DATE_FIN';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT_HISTO WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Date_eff;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColHisto IS RECORD (MATRIC DIC_ADM_CONTRAT_HISTO.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT_HISTO.NUMCNT%TYPE, DATE_EFF DIC_ADM_CONTRAT_HISTO.DATE_EFF%TYPE, DATE_FIN DIC_ADM_CONTRAT_HISTO.DATE_FIN%TYPE';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME||' DIC_ADM_CONTRAT_HISTO.'||TabcolContratHisto(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligHisto TypeColHisto;';
    v_reqCreate := v_reqCreate||'previous_ligHisto TypeColHisto;   ';
  END IF;
  IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
    v_reqCreate        := v_reqCreate||'TYPE TYP_LIG_IDX IS RECORD ( ';
    v_reqCreate        := v_reqCreate||'  NUMPAC DIC_IDX_CONTRAT_HISTO_TMP.NUMPAC%TYPE, ';
    v_reqCreate        := v_reqCreate||'  PACMAT DIC_IDX_CONTRAT_HISTO_TMP.PACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NUMCNT DIC_IDX_CONTRAT_HISTO_TMP.NUMCNT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_EFF DIC_IDX_CONTRAT_HISTO_TMP.DATE_EFF%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NOM_DONNEE DIC_IDX_CONTRAT_HISTO_TMP.NOM_DONNEE%TYPE, ';
    v_reqCreate        := v_reqCreate||'  IDPACMAT DIC_IDX_CONTRAT_HISTO_TMP.IDPACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_FIN DIC_IDX_CONTRAT_HISTO_TMP.DATE_FIN%TYPE, ';
    v_reqCreate        := v_reqCreate||'  RUPTURE_CONTRAT DIC_IDX_CONTRAT_HISTO_TMP.RUPTURE_CONTRAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_DERNIERE_MODIF DIC_IDX_CONTRAT_HISTO_TMP.DATE_DERNIERE_MODIF%TYPE); ';
    v_reqCreate        := v_reqCreate||'TYPE TYP_TAB_IDX IS TABLE OF TYP_LIG_IDX ; ';
    v_reqCreate        := v_reqCreate||'Tabidx TYP_TAB_IDX ; ';
    v_reqCreate        := v_reqCreate||'Ligidx TYP_LIG_IDX ; ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'TYPE TAB_INDICE_IDX_BY_DONNEE IS TABLE OF NUMBER INDEX BY VARCHAR2(20) ; ';
    v_reqCreate             := v_reqCreate||'tabIndice TAB_INDICE_IDX_BY_DONNEE ; ';
    v_reqCreate             := v_reqCreate||'bMATRIC NUMBER ; ';
    v_reqCreate             := v_reqCreate||'bCNT NUMBER ; ';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' NUMBER ; ';
    END LOOP;
  END IF;
  v_reqCreate          := v_reqCreate||'BEGIN ';
  IF TabcolContrat.count=0 AND TabcolContratHisto.count=0 THEN
    v_reqCreate        := v_reqCreate||'NULL; ';
  ELSE
    v_reqCreate          := v_reqCreate||'Tabidx := TYP_TAB_IDX(); ';
    IF TabcolContrat.count>0 THEN
      v_reqCreate        := v_reqCreate||'OPEN curContrat; ';
      v_reqCreate        := v_reqCreate||'  LOOP ';
      v_reqCreate        := v_reqCreate||' FETCH curContrat INTO ligContrat; ';
      v_reqCreate        := v_reqCreate||'   EXIT ';
      v_reqCreate        := v_reqCreate||' WHEN curContrat % NOTFOUND; ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is null OR NOT previous_ligContrat.MATRIC=ligContrat.MATRIC THEN ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is not null THEN ';
      v_reqCreate        := v_reqCreate||'BEGIN ';
      v_reqCreate        := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate        := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate        := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate        := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate        := v_reqCreate||' END IF; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''*''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      v_reqCreate        := v_reqCreate||'ELSE ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''+''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      FOR i IN TabcolContrat.first..TabcolContrat.last
      LOOP
        emptyVal                        := '_EMPTY_';
        IF (TabcolContrat(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                      := '0';
        END IF;
        v_reqCreate             := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
        v_reqCreate             := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_FIN := NVL(ligContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); ';
        v_reqCreate             := v_reqCreate||'Ligidx.NOM_DONNEE := '''||TabcolContrat(i).COLUMN_NAME||'''; ';
        v_reqCreate             := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreate             := v_reqCreate||'Tabidx.extend; ';
        v_reqCreate             := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreate             := v_reqCreate||'END IF; ';
        v_reqProcInsertContrat1 := v_reqProcInsertContrat1||' 
ALIM_IDX.INSERT_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
p_ligne); ';
        v_reqProcUpdateContrat1 := v_reqProcUpdateContrat1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContrat.'||TabcolContrat(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
        v_reqProcDeleteContrat1 := v_reqProcDeleteContrat1||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContrat(i).COLUMN_NAME||'''; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligContrat:=ligContrat;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curContrat;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContratHisto.count       >0 THEN
      v_reqCreate                    := v_reqCreate||'OPEN curHisto; ';
      v_reqCreateHistoRuptureContrat := 'tabIndice.delete(); ';
      v_reqCreateHistoModifOnly      := NULL;
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        IF TabcolContratHisto(i).COUNT_TABLE>0 THEN
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.PACMAT := ligHisto.PACMAT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.RUPTURE_CONTRAT := ''O''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx.extend; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx(Tabidx.last) := Ligidx; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
          v_reqProcInsertContrat2          := v_reqProcInsertContrat2||' 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''') WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')), RUPTURE_CONTRAT=''O'', DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,RUPTURE_CONTRAT,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,'''||TabcolContratHisto(i).COLUMN_NAME||''',NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')),''O'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;';
          v_reqProcDeleteContrat2          := v_reqProcDeleteContrat2||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''' AND RUPTURE_CONTRAT=''O''; ';
        END IF;
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF b'||TabcolContratHisto(i).COLUMN_NAME||'=1 THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') AND Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_EFF = ligHisto.DATE_EFF THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSE ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.PACMAT := ligHisto.PACMAT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx.extend; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSIF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'  LOOP ';
      v_reqCreate := v_reqCreate||' FETCH curHisto INTO ligHisto; ';
      v_reqCreate := v_reqCreate||'   EXIT ';
      v_reqCreate := v_reqCreate||' WHEN curHisto % NOTFOUND; ';
      v_reqCreate := v_reqCreate||' IF previous_ligHisto.PACMAT is null OR NOT previous_ligHisto.MATRIC=ligHisto.MATRIC THEN ';
      v_reqCreate := v_reqCreate||'bMATRIC := 1; ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bMATRIC := 0; ';
      v_reqCreate := v_reqCreate||'IF NOT (previous_ligHisto.NUMPAC=ligHisto.NUMPAC AND previous_ligHisto.PACMAT=ligHisto.PACMAT AND previous_ligHisto.NUMCNT=ligHisto.NUMCNT) THEN ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bCNT := 0; ';
      v_reqCreate := v_reqCreate||'END IF; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        emptyVal                             := '_EMPTY_';
        IF (TabcolContratHisto(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                           := '0';
        END IF;
        v_reqCreate                  := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 1; ';
        v_reqCreate                  := v_reqCreate||'ELSE ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
        v_reqCreate                  := v_reqCreate||'END IF; ';
        v_reqProcInsertContratHisto1 := v_reqProcInsertContratHisto1||' 
ALIM_IDX.INSERT_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_ligne, 
p_ligneSuiv, 
v_dsfcn, 
v_listeDonneesIdx, 
v_listeDonneesRupt); ';
        v_reqProcUpdateContratHisto1 := v_reqProcUpdateContratHisto1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContratHisto.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_dsdcn, 
v_dsfcn, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bCNT=1 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoRuptureContrat;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bMATRIC=0 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoModifOnly;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligHisto:=ligHisto;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curHisto;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
      v_reqCreate        := v_reqCreate||'BEGIN
      MERGE INTO DIC_IDX_CONTRAT_HISTO IDX USING (SELECT * FROM DIC_IDX_CONTRAT_HISTO_TMP) IDX_TMP ON (IDX.NUMPAC=IDX_TMP.NUMPAC AND IDX.PACMAT=IDX_TMP.PACMAT AND IDX.NUMCNT=IDX_TMP.NUMCNT AND IDX.DATE_EFF=IDX_TMP.DATE_EFF AND IDX.NOM_DONNEE=IDX_TMP.NOM_DONNEE) WHEN MATCHED THEN UPDATE SET DATE_FIN=IDX_TMP.DATE_FIN, RUPTURE_CONTRAT=IDX_TMP.RUPTURE_CONTRAT, DATE_DERNIERE_MODIF= (case when (IDX_TMP.DATE_FIN<>IDX.DATE_FIN or NVL(IDX.RUPTURE_CONTRAT,''N'')<>NVL(IDX_TMP.RUPTURE_CONTRAT,''N'') ) then IDX_TMP.DATE_DERNIERE_MODIF else IDX.DATE_DERNIERE_MODIF end) WHEN NOT MATCHED THEN INSERT (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (IDX_TMP.NUMPAC, IDX_TMP.PACMAT, IDX_TMP.NUMCNT, IDX_TMP.DATE_EFF, IDX_TMP.NOM_DONNEE, IDX_TMP.DATE_FIN, IDX_TMP.RUPTURE_CONTRAT, IDX_TMP.DATE_DERNIERE_MODIF); 
      EXCEPTION
	 WHEN DUP_VAL_ON_INDEX THEN NULL;
	 WHEN OTHERS THEN 
	 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
	 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat IDX '');
	 END;';
    END IF;
    v_reqCreate := v_reqCreate||'IF p_onlyFlaggedNumpacPacmat=1 THEN ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE) ';
    v_reqCreate := v_reqCreate||' AND EXISTS (SELECT 1 FROM SECUPACMAT_TMP_CONTRAT WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT); ';
    v_reqCreate := v_reqCreate||'ELSE ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE); ';
    v_reqCreate := v_reqCreate||'END IF; ';
  END IF;
  v_reqCreate := v_reqCreate||'END ALIM_IDX_CONTRAT_HISTO;';
  EXECUTE_IMMEDIATE_STRING(v_reqCreate,0);
  -- Procédure de mise à jour plus fine
  v_reqProcInsertContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC) IS 
BEGIN 
IF p_lignePrec.NUMPAC IS NULL THEN
BEGIN 
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''*'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''*'',SYSDATE);
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END; 
ELSE 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''+'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''+'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;'
  || v_reqProcInsertContrat1||' 
 END IF; '|| v_reqProcInsertContrat2||'
 END ALIM_IDX_INSERT_CONTRAT;';
  v_reqProcUpdateContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC, p_tabDac T_TAB_DAC, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContrat T_LIG_DAC := GET_EMPTY_LIG_DAC(); 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_dateEff DATE; 
v_listeDonneesIdx ALIM_IDX.T_EXISTE_IDX_DONNEE; 
BEGIN 
FOR i in 1..p_tabDac.COUNT LOOP
  IF p_tabDac(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDac(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDac(i).NUMCNT=p_ligne.NUMCNT THEN
    v_oldContrat := p_tabDac(i);
    EXIT WHEN v_oldContrat IS NOT NULL;
  END IF;
END LOOP;
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE ((NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN) 
OR (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN)) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_ligne.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee) := 1; 
ELSIF v_dateEff = p_ligneSuiv.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee||''+1'') := 1; 
END IF; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContrat1||' 
IF NOT NVL(TO_CHAR(v_oldContrat.DSFCN),''_EMPTY_'')=NVL(TO_CHAR(p_ligne.DSFCN),''_EMPTY_'') THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')) WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_FIN=NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
END IF; 
END ALIM_IDX_UPDATE_CONTRAT;';
  v_reqProcDeleteContrat      := ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
BEGIN 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE IN (''*'',''+''); '|| v_reqProcDeleteContrat1|| v_reqProcDeleteContrat2||' 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT;';
  v_reqProcInsertContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH) IS 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
v_dsfcn := NVL(GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT).DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
IF p_lignePrec.NUMPAC IS NOT NULL THEN NULL; '
  || v_reqProcInsertContratHisto1||' 
END IF; 
END ALIM_IDX_INSERT_CONTRAT_HISTO;';
  v_reqProcUpdateContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH, p_tabDach T_TAB_DACH, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContratHisto T_LIG_DACH := GET_EMPTY_LIG_DACH(); 
v_oldContrat DIC_ADM_CONTRAT%ROWTYPE; 
v_dsdcn DATE; 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
BEGIN 
IF NOT NVL(p_ligneSuiv.NUMPAC,''_EMPTY_'')=''_SUPP_'' THEN 
FOR i in 1..p_tabDach.COUNT LOOP
  IF p_tabDach(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDach(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDach(i).NUMCNT=p_ligne.NUMCNT 
      AND p_tabDach(i).DATE_EFF=p_ligne.DATE_EFF THEN
    v_oldContratHisto := p_tabDach(i);
    EXIT WHEN v_oldContratHisto IS NOT NULL;
  END IF;
END LOOP;
END IF; 
v_oldContrat := GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT); 
v_dsdcn := v_oldContrat.DSDCN; 
v_dsfcn := NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContratHisto1||' 
END ALIM_IDX_UPDATE_CONTRAT_HISTO;';
  v_reqProcDeleteContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT_HISTO(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonneePrec VARCHAR2(30); 
v_nomDonnee VARCHAR2(30); 
v_dateEffPrec DATE; 
v_dateEff DATE; 
v_dateFin DATE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF, DATE_FIN 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND (DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX OR DATE_FIN=p_listeClesIdxContrat(i).DATE_IDX-1) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff, v_dateFin; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_listeClesIdxContrat(i).DATE_IDX THEN 
IF v_nomDonnee = v_nomDonneePrec THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_dateFin WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND NOM_DONNEE=v_nomDonnee AND DATE_EFF=v_dateEffPrec; 
END IF; 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE=v_nomDonnee; 
END IF; 
v_nomDonneePrec := v_nomDonnee; 
v_dateEffPrec := v_dateEff; 
END LOOP; 
CLOSE cur; 
ALIM_IDX.COMPARE_CONTRAT_HISTO(p_listeClesIdxContrat, ''D'', NULL, v_listeDonneesRupt); 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT_HISTO;';

  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
END CREATE_PROC_IDX_CONTRAT_HISTO;
##
CREATE_PROC_IDX_CONTRAT_HISTO
==
CALL CREATE_PROC_IDX_CONTRAT_HISTO()
