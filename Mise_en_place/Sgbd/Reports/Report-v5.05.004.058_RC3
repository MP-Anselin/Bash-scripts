##
TAG_IMPORT=5.05.004.R058_RC3
##
TAG_IMPORT=5.05.004.R058
##
ADM_ADD_SCH_APPLICATION
=SQL=
create or replace FUNCTION ADM_ADD_SCH_APPLICATION ( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_description            IN VARCHAR2,
 code_langue              IN VARCHAR2)
 RETURN SCH_ELEMENT
 
 IS
 cnt number;
 p_obj_application        SCH_ELEMENT;
 
 BEGIN
 p_obj_application := sch_element (p_code_schema, 0, p_lib_1, NULL, 0, 0, 1);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT */
 SELECT NVL (code_element, 0) INTO p_obj_application.code_element FROM sys_sch_element
 WHERE (libelle = p_lib_1 AND niveau = 1) AND ROWNUM = 1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_application.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX (code_element) + 1 INTO p_obj_application.code_element FROM (select code_element from sys_sch_element UNION all select 0 from dual);
 
 INSERT INTO sys_sch_element (niveau, code_element, libelle, nom_page, code_role, description, tags, TYPE)
 VALUES (p_obj_application.niveau, p_obj_application.code_element, p_obj_application.libelle, NULL, NULL, p_description, NULL, NULL);
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (C) [code_element] ' || p_obj_application.code_element || ' [libelle] ' || p_obj_application.libelle || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (E) [code_element] ' || p_obj_application.code_element || ' [libelle] ' || p_obj_application.libelle || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_application.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_application.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue, p_obj_application.niveau, p_obj_application.code_element, p_obj_application.libelle);
 END IF;
 
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s1.code_asso INTO p_obj_application.code_asso
 FROM sys_sch_element e1, sys_schemas s1
 WHERE s1.code_schema = p_code_schema
 AND s1.code_elt = e1.code_element
 AND s1.niveau = e1.niveau
 AND s1.niveau = '1'
 AND e1.libelle = p_lib_1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_application.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX (code_asso) + 1 INTO p_obj_application.code_asso FROM (select code_asso from sys_schemas UNION all select 0 from dual);
 p_obj_application.code_asso_pere := 0;
 
 INSERT INTO sys_schemas (code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES (p_obj_application.code_schema, p_obj_application.code_asso, p_obj_application.code_asso_pere, p_obj_application.code_element, p_obj_application.niveau, 0);
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (C) [code_schema] ' || p_obj_application.code_schema || ' [code_asso] ' || p_obj_application.code_asso || ' [code_asso_pere) ' || p_obj_application.code_asso_pere || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (E) [code_schema] ' || p_obj_application.code_schema || ' [code_asso] ' || p_obj_application.code_asso || ' [code_asso_pere] ' || p_obj_application.code_asso_pere || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 RETURN p_obj_application;
 END ADM_ADD_SCH_APPLICATION; 
##
ADM_ADD_SCH_CLASSEUR
=SQL=
create or replace FUNCTION ADM_ADD_SCH_CLASSEUR( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_lib_2                  IN VARCHAR2,
 p_lib_3                  IN VARCHAR2,
 p_lib_4                  IN VARCHAR2,
 p_obj_theme              IN SCH_ELEMENT,
 p_description            IN VARCHAR2,
 code_langue              IN VARCHAR2
 ) RETURN SCH_ELEMENT
 
 IS
 p_obj_classeur              SCH_ELEMENT;
 ordreClasseur     NUMBER;
 cnt NUMBER;
 BEGIN
 p_obj_classeur := sch_element(p_code_schema, 0, p_lib_4, NULL, 0, 0, 4);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT*/
 SELECT NVL(code_element, 0) INTO p_obj_classeur.code_element FROM sys_sch_element
 WHERE (libelle = p_lib_4 AND niveau = 4) AND ROWNUM = 1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_classeur.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX(code_element) + 1 INTO p_obj_classeur.code_element FROM sys_sch_element;
 
 INSERT INTO sys_sch_element(niveau, code_element, libelle, nom_page, code_role, description, tags, type)
 VALUES(p_obj_classeur.niveau, p_obj_classeur.code_element, p_obj_classeur.libelle, NULL, NULL, p_description, NULL, NULL);
 
 --dbms_output.put_line('ADM_ADD_SCH_SUJET: (C) [code_element] ' || p_obj_classeur.code_element || ' [libelle] ' || p_obj_classeur.libelle || ' [niveau] ' || p_obj_classeur.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_SUJET: (E) [code_element] ' || p_obj_classeur.code_element || ' [libelle] ' || p_obj_classeur.libelle || ' [niveau] ' || p_obj_classeur.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 IF (code_langue != 'fr_fr') THEN
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_classeur.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_classeur.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue , p_obj_classeur.niveau, p_obj_classeur.code_element, p_obj_classeur.libelle);
 END IF;
 END IF;
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s4.code_asso, s4.code_asso_pere INTO p_obj_classeur.code_asso, p_obj_classeur.code_asso_pere
 FROM sys_sch_element e1, sys_sch_element e2, sys_sch_element e3, sys_sch_element e4, sys_schemas s1, sys_schemas s2, sys_schemas s3, sys_schemas s4
 WHERE  s1.code_schema = p_code_schema
 AND s4.code_schema = p_code_schema
 AND s3.code_schema = p_code_schema
 AND s2.code_schema = p_code_schema
 AND s1.code_schema = p_code_schema
 AND s4.code_elt = e4.code_element AND s4.niveau = e4.niveau
 AND s3.code_elt = e3.code_element AND s3.niveau = e3.niveau
 AND s2.code_elt = e2.code_element AND s2.niveau = e2.niveau
 AND s1.code_elt = e1.code_element AND s1.niveau = e1.niveau
 AND s4.niveau ='4'
 AND s3.niveau ='3'
 AND s2.niveau ='2'
 AND s1.niveau ='1'
 AND s4.code_asso_pere = s3.code_asso
 AND s3.code_asso_pere = s2.code_asso
 AND s2.code_asso_pere = s1.code_asso
 AND e1.libelle = p_lib_1
 AND e2.libelle = p_lib_2
 AND e3.libelle = p_lib_3
 AND e4.libelle = p_lib_4;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_classeur.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX(code_asso) + 2 INTO p_obj_classeur.code_asso FROM sys_schemas;
 p_obj_classeur.code_asso_pere := p_obj_theme.code_asso;
 
 /* RECUPERATION de L ORDRE*/
 SELECT MAX(NVL(ORDRE,0))+1 INTO ordreClasseur FROM SYS_SCHEMAS WHERE code_schema = p_obj_classeur.code_schema AND code_asso_pere = p_obj_classeur.code_asso_pere ;
 IF ordreClasseur is NULL THEN
 ordreClasseur := 0;
 END IF;
 
 
 
 INSERT INTO sys_schemas(code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES(p_obj_classeur.code_schema, p_obj_classeur.code_asso, p_obj_classeur.code_asso_pere, p_obj_classeur.code_element, p_obj_classeur.niveau, ordreClasseur);
 --dbms_output.put_line('ADM_ADD_SCH_SUJET: (C) [code_schema] ' || p_obj_classeur.code_schema || ' [code_asso] ' || p_obj_classeur.code_asso || ' [code_asso_pere) ' || p_obj_classeur.code_asso_pere || ' [niveau] ' || p_obj_classeur.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_SUJET: (E) [code_schema] ' || p_obj_classeur.code_schema || ' [code_asso] ' || p_obj_classeur.code_asso || ' [code_asso_pere] ' || p_obj_classeur.code_asso_pere || ' [niveau] ' || p_obj_classeur.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 RETURN p_obj_classeur;
 END ADM_ADD_SCH_CLASSEUR; 
##
ADM_ADD_SCH_REGROUPEMENT
=SQL=
create or replace FUNCTION ADM_ADD_SCH_REGROUPEMENT( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_lib_2                  IN VARCHAR2,
 p_obj_application        IN SCH_ELEMENT,
 p_description            IN VARCHAR2,
 p_code_role              IN NUMBER DEFAULT NULL,
 code_langue              IN VARCHAR2
 ) RETURN SCH_ELEMENT
 
 IS
 p_obj_regroup              SCH_ELEMENT;
 ordreRegroup    NUMBER;
 cnt NUMBER;
 BEGIN
 p_obj_regroup := sch_element(p_code_schema, 0, p_lib_2, NULL, 0, 0, 2);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT*/
 SELECT NVL(code_element, 0) INTO p_obj_regroup.code_element
 FROM sys_sch_element
 WHERE (libelle = p_lib_2 AND niveau = 2) AND ROWNUM = 1 ;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_regroup.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX(code_element) + 1 INTO p_obj_regroup.code_element FROM sys_sch_element;
 
 INSERT INTO sys_sch_element(niveau, code_element, libelle, nom_page, code_role, description, tags, type)
 VALUES(p_obj_regroup.niveau, p_obj_regroup.code_element, p_obj_regroup.libelle, NULL, p_code_role, p_description, NULL, NULL);
 
 --dbms_output.put_line('ADM_ADD_SCH_REGROUP: (C) [code_element] ' || p_obj_regroup.code_element || ' [libelle] ' || p_obj_regroup.libelle || ' [niveau] ' || p_obj_regroup.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_REGROUP: (E) [code_element] ' || p_obj_regroup.code_element || ' [libelle] ' || p_obj_regroup.libelle || ' [niveau] ' || p_obj_regroup.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 IF (code_langue != 'fr_fr') THEN
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_regroup.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_regroup.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue , p_obj_regroup.niveau, p_obj_regroup.code_element, p_obj_regroup.libelle);
 END IF;
 END IF;
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s2.code_asso, s2.code_asso_pere INTO p_obj_regroup.code_asso, p_obj_regroup.code_asso_pere
 FROM sys_sch_element e1, sys_sch_element e2, sys_schemas s1, sys_schemas s2
 WHERE s1.code_schema = p_code_schema
 AND s2.code_schema = p_code_schema
 AND s2.code_elt = e2.code_element AND s2.niveau = e2.niveau
 AND s1.code_elt = e1.code_element AND s1.niveau = e1.niveau
 AND s2.niveau ='2'
 AND s1.niveau ='1'
 AND s2.code_asso_pere = s1.code_asso
 AND e1.libelle = p_lib_1
 AND e2.libelle = p_lib_2;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_regroup.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX(code_asso) + 1 INTO p_obj_regroup.code_asso FROM sys_schemas;
 p_obj_regroup.code_asso_pere := p_obj_application.code_asso;
 
 /*RECUPERATION DE L ORDRE pour ajouter à la fin */
 SELECT MAX(NVL(ORDRE,0))+1 INTO ordreRegroup FROM SYS_SCHEMAS WHERE code_schema = p_obj_regroup.code_schema AND code_asso_pere = p_obj_regroup.code_asso_pere ;
 IF ordreRegroup is NULL THEN
 ordreRegroup := 0;
 END IF;
 
 INSERT INTO sys_schemas(code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES(p_obj_regroup.code_schema, p_obj_regroup.code_asso, p_obj_regroup.code_asso_pere, p_obj_regroup.code_element, p_obj_regroup.niveau, ordreRegroup);
 --dbms_output.put_line('ADM_ADD_SCH_REGROUP: (C) [code_schema] ' || p_obj_regroup.code_schema || ' [code_asso] ' || p_obj_regroup.code_asso || ' [code_asso_pere) ' || p_obj_regroup.code_asso_pere || ' [niveau] ' || p_obj_regroup.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_REGROUP: (E) [code_schema] ' || p_obj_regroup.code_schema || ' [code_asso] ' || p_obj_regroup.code_asso || ' [code_asso_pere) ' || p_obj_regroup.code_asso_pere || ' [niveau] ' || p_obj_regroup.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF ;
 
 RETURN p_obj_regroup;
 END ADM_ADD_SCH_REGROUPEMENT; 
##
ADM_ADD_SCH_SUJET
=SQL=
create or replace FUNCTION ADM_ADD_SCH_SUJET( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_lib_2                  IN VARCHAR2,
 p_lib_3                  IN VARCHAR2,
 p_lib_4                  IN VARCHAR2,
 p_lib_99                 IN VARCHAR2,
 p_nom_page               IN VARCHAR2,
 p_obj_classeur           IN SCH_ELEMENT,
 p_description            IN VARCHAR2,
 code_langue              IN VARCHAR2
 ) RETURN SCH_ELEMENT
 
 IS
 p_obj_sujet               SCH_ELEMENT;
 ordrePage NUMBER;
 cnt NUMBER;
 BEGIN
 p_obj_sujet := sch_element(p_code_schema, 0, p_lib_99, p_nom_page, 0, 0, 99);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT */
 SELECT NVL(code_element, 0) INTO p_obj_sujet.code_element FROM sys_sch_element e
 WHERE (nom_page = p_nom_page AND niveau = 99) AND ROWNUM = 1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_sujet.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX(code_element) + 1 INTO p_obj_sujet.code_element FROM sys_sch_element;
 
 INSERT INTO sys_sch_element(niveau, code_element, libelle, nom_page, code_role, description, tags, type)
 VALUES(p_obj_sujet.niveau, p_obj_sujet.code_element, p_obj_sujet.libelle, p_obj_sujet.nom_page, NULL, p_description, NULL, NULL);
 --dbms_output.put_line('ADM_ADD_SCH_PAGE: (C) [code_element] ' || p_obj_sujet.code_element || ' [libelle] ' || p_obj_sujet.libelle || ' [niveau] ' || p_obj_sujet.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_PAGE: (E) [code_element] ' || p_obj_sujet.code_element || ' [libelle] ' || p_obj_sujet.libelle || ' [niveau] ' || p_obj_sujet.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 IF (code_langue != 'fr_fr') THEN
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_sujet.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_sujet.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue , p_obj_sujet.niveau, p_obj_sujet.code_element, p_obj_sujet.libelle);
 END IF;
 END IF;
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s5.code_asso, s5.code_asso_pere INTO p_obj_sujet.code_asso, p_obj_sujet.code_asso_pere
 FROM sys_sch_element e1, sys_sch_element e2, sys_sch_element e3, sys_sch_element e4, sys_sch_element e5, sys_schemas s1, sys_schemas s2, sys_schemas s3, sys_schemas s4, sys_schemas s5
 WHERE  s5.code_schema = p_code_schema
 AND s4.code_schema = p_code_schema
 AND s3.code_schema = p_code_schema
 AND s2.code_schema = p_code_schema
 AND s1.code_schema = p_code_schema
 AND s5.code_elt = e5.code_element AND s5.niveau = e5.niveau
 AND s4.code_elt = e4.code_element AND s4.niveau = e4.niveau
 AND s3.code_elt = e3.code_element AND s3.niveau = e3.niveau
 AND s2.code_elt = e2.code_element AND s2.niveau = e2.niveau
 AND s1.code_elt = e1.code_element AND s1.niveau = e1.niveau
 AND s5.niveau ='99'
 AND s4.niveau ='4'
 AND s3.niveau ='3'
 AND s2.niveau ='2'
 AND s1.niveau ='1'
 AND s5.code_asso_pere = s4.code_asso
 AND s4.code_asso_pere = s3.code_asso
 AND s3.code_asso_pere = s2.code_asso
 AND s2.code_asso_pere = s1.code_asso
 AND e1.libelle = p_lib_1
 AND e2.libelle = p_lib_2
 AND e3.libelle = p_lib_3
 AND e4.libelle = p_lib_4
 AND e5.libelle = p_lib_99;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_sujet.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX(code_asso) + 1 INTO p_obj_sujet.code_asso FROM sys_schemas;
 p_obj_sujet.code_asso_pere := p_obj_classeur.code_asso;
 
 
 SELECT NVL(MAX(ordre),0) + 1 INTO ordrePage FROM sys_schemas
 where code_schema = p_obj_sujet.code_schema
 and code_asso_pere = p_obj_sujet.code_asso_pere ;
 
 INSERT INTO sys_schemas(code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES(p_obj_sujet.code_schema, p_obj_sujet.code_asso, p_obj_sujet.code_asso_pere, p_obj_sujet.code_element, p_obj_sujet.niveau, ordrePage);
 --dbms_output.put_line('ADM_ADD_SCH_PAGE: (C) [code_schema] ' || p_obj_sujet.code_schema || ' [code_asso] ' || p_obj_sujet.code_asso || ' [code_asso_pere) ' || p_obj_sujet.code_asso_pere || ' [niveau] ' || p_obj_sujet.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_PAGE: (E) [code_schema] ' || p_obj_sujet.code_schema || ' [code_asso] ' || p_obj_sujet.code_asso || ' [code_asso_pere) ' || p_obj_sujet.code_asso_pere || ' [niveau] ' || p_obj_sujet.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 RETURN p_obj_sujet;
 END ADM_ADD_SCH_SUJET;
##
ADM_ADD_SCH_THEME
=SQL=
create or replace FUNCTION ADM_ADD_SCH_THEME( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_lib_2                  IN VARCHAR2,
 p_lib_3                  IN VARCHAR2,
 p_obj_regroupement       IN SCH_ELEMENT,
 p_description            IN VARCHAR2,
 code_langue              IN VARCHAR2
 ) RETURN SCH_ELEMENT
 
 IS
 p_obj_theme           SCH_ELEMENT;
 ordretheme NUMBER;
 cnt NUMBER;
 
 BEGIN
 /* INITIALISATION OBJET */
 p_obj_theme := sch_element(p_code_schema, 0, p_lib_3, NULL, 0, 0, 3);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT*/
 SELECT NVL(code_element, 0) INTO p_obj_theme.code_element FROM sys_sch_element
 WHERE (libelle = p_lib_3 AND niveau = 3) AND ROWNUM = 1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_theme.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX(code_element) + 1 INTO p_obj_theme.code_element FROM sys_sch_element;
 
 INSERT INTO sys_sch_element(niveau, code_element, libelle, nom_page, code_role, description, tags, type)
 VALUES(p_obj_theme.niveau, p_obj_theme.code_element, p_obj_theme.libelle, NULL, NULL, p_description, NULL, NULL);
 
 --dbms_output.put_line('ADM_ADD_SCH_THEME: (C) [code_element] ' || p_obj_theme.code_element || ' [libelle] ' || p_obj_theme.libelle || ' [niveau] ' || p_obj_theme.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_THEME: (E) [code_element] ' || p_obj_theme.code_element || ' [libelle] ' || p_obj_theme.libelle || ' [niveau] ' || p_obj_theme.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 IF (code_langue != 'fr_fr') THEN
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_theme.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_theme.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue , p_obj_theme.niveau, p_obj_theme.code_element, p_obj_theme.libelle);
 END IF;
 END IF;
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s3.code_asso, s3.code_asso_pere INTO p_obj_theme.code_asso, p_obj_theme.code_asso_pere
 FROM sys_sch_element e1, sys_sch_element e2, sys_sch_element e3, sys_schemas s1, sys_schemas s2, sys_schemas s3
 WHERE s1.code_schema = p_code_schema
 AND s3.code_schema = p_code_schema
 AND s2.code_schema = p_code_schema
 AND s1.code_schema = p_code_schema
 AND s3.code_elt = e3.code_element and s3.niveau = e3.niveau
 AND s2.code_elt = e2.code_element and s2.niveau = e2.niveau
 AND s1.code_elt = e1.code_element and s1.niveau = e1.niveau
 AND s3.niveau ='3'
 AND s2.niveau ='2'
 AND s1.niveau ='1'
 AND s3.code_asso_pere = s2.code_asso
 AND s2.code_asso_pere = s1.code_asso
 AND e1.libelle = p_lib_1
 AND e2.libelle = p_lib_2
 AND e3.libelle = p_lib_3;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_theme.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX(code_asso) + 1 INTO p_obj_theme.code_asso FROM sys_schemas;
 p_obj_theme.code_asso_pere := p_obj_regroupement.code_asso;
 
 /* RECUPERATION de L ORDRE*/
 SELECT MAX(NVL(ORDRE,0))+1 INTO ordretheme FROM SYS_SCHEMAS WHERE code_schema = p_obj_theme.code_schema AND code_asso_pere = p_obj_theme.code_asso_pere ;
 IF ordretheme is NULL THEN
 ordretheme := 0;
 END IF;
 
 
 INSERT INTO sys_schemas(code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES(p_obj_theme.code_schema, p_obj_theme.code_asso, p_obj_theme.code_asso_pere, p_obj_theme.code_element, p_obj_theme.niveau, ordretheme);
 --dbms_output.put_line('ADM_ADD_SCH_THEME: (C) [code_schema] ' || p_obj_theme.code_schema || ' [code_asso] ' || p_obj_theme.code_asso || ' [code_asso_pere) ' || p_obj_theme.code_asso_pere || ' [niveau] ' || p_obj_theme.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_THEME: (E) [code_schema] ' || p_obj_theme.code_schema || ' [code_asso] ' || p_obj_theme.code_asso || ' [code_asso_pere] ' || p_obj_theme.code_asso_pere || ' [niveau] ' || p_obj_theme.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 RETURN p_obj_theme;
 END ADM_ADD_SCH_THEME;
##
TAG_CHARSET=@éèç
##
BUILD_TABLE_INDEX
=SQL=
create or replace FUNCTION "BUILD_TABLE_INDEX"(p_cid IN std_struc_arbre.cid%TYPE, p_codts IN std_struc_arbre.codts%TYPE ,p_date_eff IN std_struc_arbre.date_eff%TYPE ,p_date_fin IN std_struc_arbre.date_fin%TYPE) RETURN INTEGER IS retour INTEGER; 
req CLOB;

BEGIN
 
 req:=' insert into STD_STRUC_INDEX (CID, CODTS, LAST_ENTITE, DATE_EFF, DATE_FIN, NIV_TECH, IDX_CODE_ENTITE, NIV1, NIV2, NIV3, NIV4, NIV5, NIV6, NIV7, NIV8, NIV9, NIV10,';
 req:=req||'NIV11, NIV12, NIV13, NIV14, NIV15, NIV16, NIV17, NIV18, NIV19, NIV20, NIV21, NIV22, NIV23, NIV24, NIV25, NIV26, NIV27, NIV28, NIV29, NIV30, NIV31, NIV32, NIV33,';
 req:=req||'NIV34, NIV35, NIV36, NIV37, NIV38, NIV39, NIV40)';
 req:=req||' select '''||p_cid||''', '||p_codts||',code_entite,'''||p_date_eff||''','''||p_date_fin||''',niv_tech,chaine_entite,';
 req:=req||'NVL(';
      -- Si un code entité est défini pour le niveau, on le prend
 req:=req||' trim(SUBSTR(CHAINE_ENTITE, 1, 25))';
      -- S'il n'y a pas de code entité défini, mais par contre qu'il y a des codes entités définis après ce niveau, alors on écrit @NON_AFFECTE@
 req:=req||',NVL2( trim(SUBSTR(CHAINE_ENTITE, 26)) ,''@NON_AFFECTE@''';
      -- Sinon on met null
 req:=req||',''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 26, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 51)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 51, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 76)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 76, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 101)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 101, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 126)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 126, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 151)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 151, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 176)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 176, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 201)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 201, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 226)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 226, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 251)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 251, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 276)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 276, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 301)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 301, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 326)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 326, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 351)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 351, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 376)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 376, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 401)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 401, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 426)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 426, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 451)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 451, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 476)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 476, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 501)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 501, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 526)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 526, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 551)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 551, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 576)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 576, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 601)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 601, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 626)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 626, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 651)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 651, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 676)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 676, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 701)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 701, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 726)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 726, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 751)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 751, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 776)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 776, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 801)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 801, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 826)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 826, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 851)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 851, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 876)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 876, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 901)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 901, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 926)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 926, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 951)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 951, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 976)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
      -- Dernier niveau pas besoin de regarder s'il y a des codes entités après
 req:=req||'NVL(trim(SUBSTR(CHAINE_ENTITE, 976, 25)),''@VIDE@'')';
 req:=req||' from ( ';
 req:=req||' with ARBRE(CODE_ENTITE, CID, TYPE_ENTITE, NIVEAU, NB_OCC_MEME_TYPE, CODE_ENT_MERE, TYPE_ENTITE_MERE, NIVEAU_ENTITE_MERE, NB_OCC_ENTITE_MERE, NB_OCC_MEME_TYPE_MERE, CHAINE_ENTITE, NIV_TECH, CODTS) as (';
 req:=req||'  select';
 req:=req||'   A.CODE_ENTITE';
 req:=req||'   , A.CID';
 req:=req||'   , E.TYPE_ENTITE';
 req:=req||'   , N.NIVEAU';
 req:=req||'   , 1 as NB_OCC_MEME_TYPE';
 req:=req||'   , A.CODE_ENT_MERE';
 req:=req||'   , (';
 req:=req||'     select TYPE_ENTITE';
 req:=req||'     from STD_STRUC_ENTITE E1';
 req:=req||'     where E1.CODE_ENTITE = A.CODE_ENT_MERE';
 req:=req||'     and A.DATE_EFF between E1.DATE_EFF and E1.DATE_FIN';
 req:=req||'     and E1.CID = '''||p_cid||'''';
 req:=req||'   ) as TYPE_ENTITE_MERE';
 req:=req||'   , 0 as NIVEAU_ENTITE_MERE';
 req:=req||'   , 0 as NB_OCC_ENTITE_MERE';
 req:=req||'   , 0 as NB_OCC_MEME_TYPE_MERE'; -- Calcule le nombre d'entité de même type qui se suivent (pour les occurrences multiples)
 req:=req||'   , RPAD('' '',(25*(n.niveau-1)))||RPAD(a.code_entite,25)';
 req:=req||'   , N.NIVEAU as NIV_TECH';
 req:=req||'   , a.codts';
 req:=req||'  from';
 req:=req||'   STD_STRUC_ARBRE A';
 req:=req||'   , STD_STRUC_ENTITE E';
 req:=req||'   , STD_STRUC_NIV N';
 req:=req||'  where';
 req:=req||'   A.CID = '''||p_cid||'''';
 req:=req||'   and E.CID = '''||p_cid||'''';
 req:=req||'   and A.CODTS = '||p_codts;
 req:=req||'   and A.CODE_ENT_MERE is null';
 req:=req||'   and '''||p_date_eff||''' between A.DATE_EFF and A.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between E.DATE_EFF and E.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between N.DATE_EFF and N.DATE_FIN';
 req:=req||'   and A.CODE_ENTITE = E.CODE_ENTITE';
 req:=req||'   and E.TYPE_ENTITE = N.TYPE_ENTITE';
 req:=req||'   and A.CODTS = N.CODTS';
 req:=req||'   and A.STATUT = ''1''';
 req:=req||' union all';
 req:=req||'  select';
 req:=req||'   A.CODE_ENTITE';
 req:=req||'   , A.CID';
 req:=req||'   , E.TYPE_ENTITE';
 req:=req||'   , N.NIVEAU';
 req:=req||'   , case';
 req:=req||'      when E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'       then RECUR.NB_OCC_MEME_TYPE + 1';
 req:=req||'      else 1';
 req:=req||'   end as NB_OCC_MEME_TYPE';
 req:=req||'   , A.CODE_ENT_MERE';
 req:=req||'   , (';
 req:=req||'     select TYPE_ENTITE';
 req:=req||'     from STD_STRUC_ENTITE E1';
 req:=req||'     where';
 req:=req||'      E1.CODE_ENTITE = A.CODE_ENT_MERE';
 req:=req||'      and A.DATE_EFF between E1.DATE_EFF and E1.DATE_FIN';
 req:=req||'     and E1.CID = '''||p_cid||'''';
 req:=req||'   ) as TYPE_ENTITE_MERE';
 req:=req||'   , RECUR.NIVEAU as NIVEAU_ENTITE_MERE';
 req:=req||'   , NIM.NB_OCCURRENCES as NB_OCC_ENTITE_MERE';
 req:=req||'   , RECUR.NB_OCC_MEME_TYPE as NB_OCC_MEME_TYPE_MERE';
 req:=req||'   , case';
 -- L'entité mère n'a pas d'occurrences multiples : l'écart entre les entités mère et fille correspond à la différence entre le niveau de l'entité mère et celui de la fille
 req:=req||'      when NIM.NB_OCCURRENCES = 1';
 req:=req||'       then CHAINE_ENTITE||RPAD('' '',(25*((N.NIVEAU - RECUR.NIVEAU)-1)))||RPAD(A.CODE_ENTITE,25)';
 -- L'entité mère a des occurrences multiples et l'entité mère et fille sont de même type : il n'y a pas d'écart entre les codes entité
 req:=req||'      when NIM.NB_OCCURRENCES > 1 and E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'       then CHAINE_ENTITE||RPAD(A.CODE_ENTITE, 25)';
 -- Les autres cas : on calcule l'écart entre l'entité mère et sa fille à partir du nombre d'occurrences de l'entité mère, du nombre d'occurrences de même type de l'entité mère,
 -- du niveau de l'entité fille, du niveau de l'entité mère et du nombre d'occurrences de l'entité mère
 req:=req||'      else CHAINE_ENTITE||RPAD('' '',(25*(NIM.NB_OCCURRENCES - RECUR.NB_OCC_MEME_TYPE + (N.NIVEAU - RECUR.NIVEAU - NIM.NB_OCCURRENCES))))||RPAD(A.CODE_ENTITE, 25)';
 req:=req||'   end';
 req:=req||'   ,case';
 req:=req||'     when E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'      then RECUR.NB_OCC_MEME_TYPE + N.NIVEAU';
 req:=req||'     else N.NIVEAU';
 req:=req||'   end as NIV_TECH';
 req:=req||'   , A.CODTS';
 req:=req||'  from';
 req:=req||'   STD_STRUC_ARBRE A';
 req:=req||'   , STD_STRUC_ENTITE E';
 req:=req||'   , STD_STRUC_NIV N';
 req:=req||'   , STD_STRUC_ENTITE EM';
 req:=req||'   , STD_STRUC_NIV_INFO NIM';
 req:=req||'   ,ARBRE RECUR';
 req:=req||'  where';
 req:=req||'   A.CODTS = RECUR.CODTS';
 req:=req||'   and A.CODE_ENT_MERE = RECUR.CODE_ENTITE';
 req:=req||'   and A.CID = RECUR.CID';
 req:=req||'   and E.CID = RECUR.CID';
 req:=req||'   and '''||p_date_eff||''' between A.DATE_EFF and A.DATE_FIN ';
 req:=req||'   and '''||p_date_eff||''' between E.DATE_EFF and E.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between N.DATE_EFF and N.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between EM.DATE_EFF and EM.DATE_FIN';
 req:=req||'   and A.CODE_ENTITE = E.CODE_ENTITE';
 req:=req||'   and E.TYPE_ENTITE = N.TYPE_ENTITE';
 req:=req||'   and A.CODTS = N.CODTS';
 req:=req||'   and EM.CODE_ENTITE = A.CODE_ENT_MERE';
 req:=req||'   and EM.CID = '''||p_cid||'''';
 req:=req||'   and A.CODTS = NIM.CODTS';
 req:=req||'   and EM.TYPE_ENTITE = NIM.TYPE_ENTITE';
 req:=req||' )';
 req:=req||' select * from arbre )';
 req:=req||' ';
 
 EXECUTE_IMMEDIATE_STRING(req,0) ;
 
 retour := retour +SQL%ROWCOUNT;
 return retour ;
 END BUILD_TABLE_INDEX;
##
TAG_CHARSET=@éèç
##
EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION
=SQL=
CREATE OR REPLACE FUNCTION EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(
  p_LOGIN IN VARCHAR2 DEFAULT NULL,
  p_START_DATE IN VARCHAR2 DEFAULT NULL,
  p_END_DATE IN VARCHAR2 DEFAULT NULL,
  p_TYPE_DOC IN VARCHAR2 DEFAULT NULL,
  p_ONLY_PROC_SIGN IN VARCHAR2 DEFAULT 'N',
  p_SIGNATAIRE IN VARCHAR2 DEFAULT NULL,
  p_EDITEUR IN VARCHAR2 DEFAULT NULL
) RETURN EDI_HISTO_LANCEMENTS_SUIVI_TABLE IS

  v_count NUMBER;
  v_MODE_ADMIN VARCHAR2(10);
  v_EDITEUR VARCHAR2(100);
  v_CODTS_JUR VARCHAR2(4000);
  v_ID_SECU_POP NUMBER;
  v_ID_SECU_STRUCT_JUR NUMBER;
  v_ID_SECU_PAC NUMBER;
  retour EDI_HISTO_LANCEMENTS_SUIVI_TABLE;

BEGIN

  SELECT MIN(VALVAR) INTO v_CODTS_JUR FROM SYS_VARSYS WHERE CODVAR='STRUCTURE_JUR';
  IF v_CODTS_JUR IS NULL THEN
    v_CODTS_JUR := 1;
  END IF;
  v_count := 0;
  v_ID_SECU_POP := -1;
  v_ID_SECU_STRUCT_JUR := -1;
  v_ID_SECU_PAC := -1;
  IF p_LOGIN IS NOT NULL THEN
    SELECT COUNT(*) INTO v_count FROM SYS_SCH_PROFIL_P E, SYS_USR_PROFIL U WHERE E.CODE_PROFIL=U.CODE_PROFIL AND LOGIN = p_LOGIN AND NOM_PAGE = 'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin';
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_POP FROM SYS_SEC_RESOLUE_POP_REQ WHERE LOGIN=p_LOGIN;
    EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_STRUCT_JUR FROM SYS_SEC_RESOLUE_STRUCT_REQ WHERE LOGIN=p_LOGIN AND CODTS=v_CODTS_JUR;
    EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_PAC FROM SYS_SEC_RESOLUE_PAC_REQ WHERE LOGIN=p_LOGIN;
    EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF;
  v_MODE_ADMIN := 'false';
  IF v_count>0 THEN
    v_MODE_ADMIN := 'true';
  END IF;

  v_EDITEUR := p_EDITEUR;
  IF v_MODE_ADMIN='false' THEN
    IF v_EDITEUR='|#ME#|' THEN
      v_EDITEUR := p_LOGIN;
    ELSE
      v_EDITEUR := '';
    END IF;
  END IF;

  SELECT EDI_HISTO_LANCEMENTS_SUIVI_RECORD(
    ID_LANCEMENT, 
    CODEDI, 
    FAMEDI, 
    LOGIN, 
    DATE_LANCEMENT, 
    MATRIC, 
    DATE_EFF, 
    CHEMIN_FICHIER, 
    ID_DOC_CONTAINER, 
    SIGN_LISTE_MANDATAIRES, 
    SIGN_PROCEDURE, 
    SIGN_DATE_FIN, 
    SIGN_MANDATAIRES, 
    SIGN_CONTRACTANT, 
    DATE_STATUTS, 
    IS_BILLED, 
    IS_PAPERLESS, 
    IS_DIGIPOSTE, 
    BENEFICIAIRE, 
    SEXE, 
    EMAIL, 
    TELEPHONE, 
    TRI_BENEFICIAIRE, 
    CONTRAT, 
    TRI_CONTRAT, 
    FILTRE_CONTRAT, 
    ETABLISSEMENT, 
    MAQUETTE, 
    STATUTEDITION, 
    FILTRE_STATUTEDITION, 
    DATECREATION, 
    TRI_DATECREATION, 
    DATEFIN, 
    TRI_DATEFIN, 
    SIGNATURE, 
    FILTRE_SIGNATURE, 
    DATEACTUALISATION, 
    TRI_DATEACTUALISATION, 
    EXTENSIONFICHIER, 
    FILTRE_SOUMISSIGNATURE, 
    FILTRE_SIGN_LISTE_MANDATAIRES, 
    TYPEDOC, 
    DISPLAY_ECRAN_SUIVI, 
    ALLOW_EDIT, 
    IS_AUTORIZED
  ) 

  BULK COLLECT INTO retour

  FROM (
    SELECT 
      ID_LANCEMENT, 
      CODEDI, 
      FAMEDI, 
      LOGIN, 
      DATE_LANCEMENT, 
      MATRIC, 
      DATE_EFF, 
      CHEMIN_FICHIER, 
      ID_DOC_CONTAINER, 
      SIGN_LISTE_MANDATAIRES, 
      SIGN_PROCEDURE, 
      SIGN_DATE_FIN, 
      SIGN_MANDATAIRES, 
      SIGN_CONTRACTANT, 
      DATE_STATUTS, 
      IS_BILLED, 
      IS_PAPERLESS, 
      IS_DIGIPOSTE, 
      BENEFICIAIRE, 
      SEXE, 
      EMAIL, 
      TELEPHONE, 
      TRI_BENEFICIAIRE, 
      CONTRAT, 
      TRI_CONTRAT, 
      FILTRE_CONTRAT, 
      ETABLISSEMENT, 
      MAQUETTE, 
      STATUTEDITION, 
      FILTRE_STATUTEDITION, 
      DATECREATION, 
      TRI_DATECREATION, 
      DATEFIN, 
      TRI_DATEFIN, 
      SIGNATURE, 
      FILTRE_SIGNATURE, 
      DATEACTUALISATION, 
      TRI_DATEACTUALISATION, 
      EXTENSIONFICHIER, 
      FILTRE_SOUMISSIGNATURE, 
      FILTRE_SIGN_LISTE_MANDATAIRES, 
      TYPEDOC, 
      -- DISPLAY_ECRAN_SUIVI
      --   On affiche l'édition sur l'écran de suivi si :
      --   - On n'a pas de login pour faire le test
      --   OU
      --   - Le login a accès à l'écran en mode Admin et le bénéficiaire est autorisé par la sécu
      --   OU
      --   - L'utilisateur connecté a effectué l'édition
      --   OU
      --   - Une procédure de signature est en cours et le login est signataire
      CASE 
        WHEN p_LOGIN IS NULL THEN 'O' 
        WHEN LOGIN=p_LOGIN THEN 'O' 
        WHEN v_MODE_ADMIN = 'true' AND IS_AUTORIZED='O' THEN 'O' 
        WHEN ','||SIGN_LISTE_MANDATAIRES||',' LIKE '%,'||p_LOGIN||',%' AND ID_DOC_CONTAINER IS NOT NULL THEN 'O' 
        ELSE 'N' 
      END AS DISPLAY_ECRAN_SUIVI, 
      -- ALLOW_EDIT
      --   On peut éditer une procédure (annuler, charger un document, modifier les coordonnées des signataires, ou lancer) si :
      --   - On n'a pas de login pour faire le test
      --   OU
      --   - Le login a accès à l'écran en mode Admin et le bénéficiaire est autorisé par la sécu
      --   OU
      --   - L'utilisateur connecté a effectué l'édition
      CASE 
        WHEN p_LOGIN IS NULL THEN 'O' 
        WHEN v_MODE_ADMIN = 'true' AND IS_AUTORIZED='O' THEN 'O' 
        WHEN LOGIN=p_LOGIN THEN 'O' 
        ELSE 'N' 
      END AS ALLOW_EDIT, 
      IS_AUTORIZED
    FROM (
      SELECT H.ID_LANCEMENT, 
        H.CODEDI, 
        H.FAMEDI, 
        H.LOGIN, 
        H.DATE_LANCEMENT, 
        H.MATRIC, 
        H.DATE_EFF, 
        H.CHEMIN_FICHIER, 
        H.ID_DOC_CONTAINER, 
        H.SIGN_LISTE_MANDATAIRES, 
        H.SIGN_PROCEDURE, 
        H.SIGN_DATE_FIN, 
        H.SIGN_MANDATAIRES, 
        H.SIGN_CONTRACTANT, 
        H.DATE_STATUTS, 
        H.IS_BILLED, 
        H.IS_PAPERLESS, 
        H.IS_DIGIPOSTE, 
        -- BENEFICIAIRE
        '('||H.MATRIC||') '||H.NOM||' '||H.PRENOM AS BENEFICIAIRE, 
        H.SEXE, 
        H.EMAIL, 
        H.TELEPHONE, 
        -- TRI_BENEFICIAIRE
        H.MATRIC AS TRI_BENEFICIAIRE, 
        -- CONTRAT
        CASE 
          WHEN H.DATE_DEB_CNT IS NULL THEN NULL 
          WHEN H.DATE_FIN_CNT IS NULL THEN 'A partir du '||TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy') 
          ELSE 'Du '||TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy')||' au '||TO_CHAR(H.DATE_FIN_CNT, 'dd.mm.yyyy') 
        END AS CONTRAT, 
        -- TRI_CONTRAT
        H.DATE_DEB_CNT AS TRI_CONTRAT, 
        -- FILTRE_CONTRAT
        TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy') AS FILTRE_CONTRAT, 
        -- ETABLISSEMENT
        E.LIBELLE_ENTITE AS ETABLISSEMENT, 
        -- MAQUETTE
        CASE 
          WHEN G.LIBELLE IS NULL THEN A.ATTEST_LIBELLE 
          ELSE G.LIBELLE 
        END AS MAQUETTE, 
        -- STATUTEDITION
        --   Pas de statut dans EDI_DS_LANCEMENT --> Edition Jasper
        --   SIGN_PROCEDURE vide --> Edition Jasper non soumis à signature : on retourne
        --   le statut 03 (Document généré)
        --   SIGN_PROCEDURE renseignée --> Edition Jasper soumis à signature : on retourne
        --   le statut 06 (Document soumis à signature)
        CASE 
          WHEN L.STATUT IS NULL AND H.SIGN_PROCEDURE IS NULL THEN 'Document récupéré' 
          WHEN L.STATUT IS NULL THEN 'Document soumis à signature' 
          ELSE DS.LIBELLE_STATUT 
        END AS STATUTEDITION, 
        -- FILTRE_STATUTEDITION
        CASE 
          WHEN L.STATUT IS NULL AND H.SIGN_PROCEDURE IS NULL THEN '03' 
          WHEN L.STATUT IS NULL THEN '06' 
          ELSE L.STATUT 
        END AS FILTRE_STATUTEDITION, 
        -- DATECREATION
        TO_CHAR(H.DATE_LANCEMENT, 'dd.mm.yyyy') AS DATECREATION, 
        -- TRI_DATECREATION
        H.DATE_LANCEMENT AS TRI_DATECREATION, 
        -- DATEFIN
        TO_CHAR(H.SIGN_DATE_FIN, 'dd.mm.yyyy') AS DATEFIN, 
        -- TRI_DATEFIN
        H.SIGN_DATE_FIN AS TRI_DATEFIN, 
        -- SIGNATURE
        --   On ne retourne pas le libellé du statut G (Génération en cours)
        CASE 
          WHEN H.SIGN_PROCEDURE='G' THEN NULL 
          ELSE PS.LIBELLE_STATUT 
        END AS SIGNATURE, 
        -- FILTRE_SIGNATURE
        H.SIGN_PROCEDURE AS FILTRE_SIGNATURE, 
        -- DATEACTUALISATION
        CASE 
          WHEN H.DATE_STATUTS IS NULL THEN NULL 
          ELSE TO_CHAR(H.DATE_STATUTS, 'dd.mm.yyyy')||' à '||TO_CHAR(H.DATE_STATUTS, 'hh24:mi:ss') 
        END AS DATEACTUALISATION, 
        -- TRI_DATEACTUALISATION
        H.DATE_STATUTS AS TRI_DATEACTUALISATION, 
        -- EXTENSIONFICHIER
        UPPER(SUBSTR(CHEMIN_FICHIER, INSTR(CHEMIN_FICHIER, '.', -1)+1)) AS EXTENSIONFICHIER, 
        -- FILTRE_SOUMISSIGNATURE
        CASE 
          WHEN H.SIGN_PROCEDURE IS NULL THEN 'N' 
          ELSE 'O' 
        END AS FILTRE_SOUMISSIGNATURE, 
        -- FILTRE_SIGN_LISTE_MANDATAIRES
        ','||H.SIGN_LISTE_MANDATAIRES||',' AS FILTRE_SIGN_LISTE_MANDATAIRES, 
        -- TYPEDOC
        CASE 
          WHEN G.TYPE IS NOT NULL THEN G.TYPE 
          WHEN A.ATTEST_ID IS NOT NULL THEN 'A' 
          ELSE H.TYPE_DOC
        END AS TYPEDOC, 
        -- IS_AUTORIZED
        --   Application de la sécurité :
        --   - Population PACMAT, si NUMPAC/PACMAT
        --   - Population MATRIC, si pas de NUMPAC/PACMAT mais un MATRIC (seulement MATRIC en écriture pas en lecture)
        --   - Structure juridique, si pas de NUMPAC/PACMAT ni de MATRIC, mais un ETABLISSEMENT
        --   - PAC si pas de NUMPAC/PACMAT ni de MATRIC ni de ETABLISSEMENT, mais un NUMPAC
        CASE 
          WHEN H.NUMPAC IS NOT NULL AND H.PACMAT IS NOT NULL 
            --AND (H.NUMPAC,H.PACMAT) IN (SELECT NUMPAC,PACMAT FROM SYS_SEC_RESOLUE_POP_PAC WHERE ID_SECU=v_ID_SECU_POP) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_POP_PAC WHERE ID_SECU=v_ID_SECU_POP AND NUMPAC=H.NUMPAC AND PACMAT=H.PACMAT) 
          THEN 'O' 
          WHEN (H.NUMPAC IS NULL OR H.PACMAT IS NULL) AND H.MATRIC IS NOT NULL 
            --AND H.MATRIC IN (SELECT MATRIC FROM SYS_SEC_RESOLUE_POP_MAT WHERE ID_SECU=v_ID_SECU_POP) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_POP_MAT WHERE ID_SECU=v_ID_SECU_POP AND MATRIC=H.MATRIC and ACCES_ECR_LEC = 'E') 
          THEN 'O' 
          WHEN (H.NUMPAC IS NULL OR H.PACMAT IS NULL) AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NOT NULL 
            --AND H.ETABLISSEMENT IN (SELECT CODE_ENTITE FROM SYS_SEC_RESOLUE_STRUCT WHERE ID_SECU=v_ID_SECU_STRUCT_JUR AND CODTS=v_CODTS_JUR) 
             AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_STRUCT WHERE ID_SECU=v_ID_SECU_STRUCT_JUR AND CODTS=v_CODTS_JUR AND CODE_ENTITE=H.ETABLISSEMENT) 
          THEN 'O' 
          WHEN H.NUMPAC IS NOT NULL AND H.PACMAT IS NULL AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NULL 
            --AND H.NUMPAC IN (SELECT NUMPAC FROM SYS_SEC_RESOLUE_PAC WHERE ID_SECU=v_ID_SECU_PAC) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_PAC WHERE ID_SECU=v_ID_SECU_PAC AND NUMPAC=H.NUMPAC) 
          THEN 'O' 
          WHEN H.NUMPAC IS NULL AND H.PACMAT IS NULL AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NULL THEN 'O' 
          ELSE 'N' 
        END AS IS_AUTORIZED 
      FROM 
        EDI_HISTO_LANCEMENTS H 
        LEFT OUTER JOIN STD_STRUC_ENTITE_VIEW E ON E.CODE_ENTITE=H.ETABLISSEMENT 
        LEFT OUTER JOIN EDI_DS_LANCEMENT L ON L.ID_HISTO_LANCEMENT=H.ID_LANCEMENT 
        LEFT OUTER JOIN EDI_DS_STATUTS DS ON DS.CODE_STATUT=L.STATUT 
        LEFT OUTER JOIN GA_EDITIONS_GAP G ON G.CODE=L.ID_MAQUETTE 
        LEFT OUTER JOIN GA_ATTESTATION_TYPES A ON A.FAMEDI=H.FAMEDI AND A.CODEDI=H.CODEDI 
        LEFT OUTER JOIN SIGN_PROCEDURE_STATUTS PS ON PS.CODE_STATUT=H.SIGN_PROCEDURE 
    ) 
  )
  WHERE 1=1 
    -- Filtre sur la date de lancement
    AND TRUNC(DATE_LANCEMENT,'dd') BETWEEN TO_DATE(NVL(p_START_DATE,'01.01.1901'),'dd.MM.yyyy') AND TO_DATE(NVL(p_END_DATE,'31.12.2099'),'dd.MM.yyyy') 
    -- Filtre sur le type de document 
    AND NVL(TYPEDOC,'_AUCUN_') = NVL(p_TYPE_DOC,NVL(TYPEDOC,'_AUCUN_')) 
    --  Filtre sur les documents soumis à signature électronique
    AND (NVL(p_ONLY_PROC_SIGN,'N') != 'O' OR FILTRE_SOUMISSIGNATURE = 'O') 
    -- Filtre sur un signataire
    AND (p_SIGNATAIRE is null OR ','||SIGN_LISTE_MANDATAIRES||',' LIKE '%,'||p_SIGNATAIRE||',%') 
    -- Filtre sur un éditeur
    AND LOGIN=NVL(v_EDITEUR,LOGIN);

  RETURN retour;
 
END EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION;
##
TAG_CHARSET=@éèç
##
GET_CID_FOR_LOGIN
=SQL=
CREATE OR REPLACE FUNCTION GET_CID_FOR_LOGIN(p_login IN VARCHAR2) 
	RETURN VARCHAR2 
AS 
	v_retour VARCHAR2(32);
BEGIN
	/**
	 * Dans le cadre du multiclient, la table SYS_USR_CID permet d'associer un LOGIN avec un COMPANY_ID (CID).
	 * Le problème, c'est que cette table n'existe pas dans ADP Link car on est monoclient.
	 * Cette fonction va permettre de récupérer le CID associé à un login sans avoir à s'interroger sur l'existence ou non de la table.
	 * Si la table existe, on utilise les données de SYS_USR_CID, 
	 * sinon on va utiliser la table SYS_USR_CONFIG et la valeur du CID contenue dans la varsys "NS_CLIENT_ID"
	 * ATTENTION, les utilisateurs techniques (SYS_USR_ADMIN_ONLY) sont exclus
	*/
	select COMPANY_ID into v_retour from GET_SYS_USR_CID() where LOGIN = p_login;
	return v_retour;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
    -- Le login n'a pas été trouvé  	
    return NULL;
END GET_CID_FOR_LOGIN;
##
TAG_CHARSET=@éèç
##
GET_SYS_USR_CID
=SQL=
CREATE OR REPLACE FUNCTION GET_SYS_USR_CID 
	RETURN T_SYS_USR_CID 
AS 
	v_retour T_SYS_USR_CID := T_SYS_USR_CID();
	-- Une valeur si la table SYS_USR_CID existe, null sinon
	v_existTable VARCHAR2(40);
	v_clientId_varsys VARCHAR2(32);
BEGIN
	/**
	 * Dans le cadre du multiclient, la table SYS_USR_CID permet d'associer un LOGIN avec un COMPANY_ID (CID).
	 * Le problème, c'est que cette table n'existe pas dans ADP Link car on est monoclient.
	 * Cette fonction va permettre de faire des requêtes sans avoir à s'interroger sur l'existence ou non de la table.
	 * Si la table existe, on retourne les données de SYS_USR_CID, 
	 * sinon on les créé en utilisant la table SYS_USR_CONFIG et la valeur du CID contenue dans la varsys "NS_CLIENT_ID"
	 * MAIS on exclu les utilisateurs techniques (SYS_USR_ADMIN_ONLY)
	*/
	BEGIN
	    select TABLE_NAME into v_existTable from USER_TABLES where TABLE_NAME = 'SYS_USR_CID';
  	EXCEPTION
    WHEN NO_DATA_FOUND THEN
    	-- La table n'exite pas  	
    	v_existTable := NULL;
  	END;
	
	IF v_existTable IS NOT NULL THEN 
		-- Execute immediate car la table peut ne pas existée (pb de statement ignored)
		execute immediate 'select T_SYS_USR_CID_OBJ(LOGIN, COMPANY_ID) from SYS_USR_CID' bulk collect into v_retour;
  	ELSE
  		select VALVAR into v_clientId_varsys from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  		-- On ne veut pas récupérer les utilisateurs techniques
  		select T_SYS_USR_CID_OBJ(LOGIN, v_clientId_varsys) bulk collect into v_retour from SYS_USR_CONFIG C where not exists (select 1 from SYS_USR_ADMIN_ONLY O where C.LOGIN = O.LOGIN);
  	END IF;
  	RETURN v_retour;
END GET_SYS_USR_CID;
##
TAG_CHARSET=@éèç
##
HRO_GET_ENTITE
=SQL=
CREATE OR REPLACE FUNCTION HRO_GET_ENTITE(
    p_codts  IN std_struc_arbre.codts%TYPE,
    p_niv    IN std_struc_niv.niveau%TYPE,
    p_entite IN std_struc_entite.code_entite%TYPE,
    p_date   IN std_struc_entite.date_eff%TYPE,
    p_cid    IN std_struc_entite.cid%TYPE default null)
  RETURN std_struc_entite.code_entite%TYPE
IS
  v_cid std_struc_entite.cid%TYPE;
  v_retour VARCHAR2(25);
BEGIN
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
	
	
	
  SELECT code_entite
  INTO v_retour
  FROM
    ( WITH entitepere ( code_entite, code_ent_mere, codts ) AS
    (SELECT a.code_entite,
      a.code_ent_mere,
      a.codts
    FROM std_struc_arbre a
    WHERE a.code_entite =p_entite
    AND a.cid = v_cid
    AND a.codts         =p_codts
    AND p_date BETWEEN a.date_eff AND a.date_fin
    AND statut = '1'
    UNION ALL
    SELECT a.code_entite,
      a.code_ent_mere,
      a.codts
    FROM std_struc_arbre a,
      entitepere f
    WHERE f.code_ent_mere = a.code_entite
    AND a.cid = v_cid
    AND a.codts           =p_codts
    AND p_date BETWEEN a.date_eff AND a.date_fin
    AND statut = '1'
    )
  SELECT a.code_entite
  FROM entitepere a,
    std_struc_entite e,
  	std_struc_index idx
  WHERE a.code_entite = e.code_entite
  AND e.cid = v_cid
  AND idx.cid = v_cid
  AND a.codts = idx.codts 
  AND a.code_entite = idx.last_entite
  AND p_date BETWEEN e.date_eff AND e.date_fin
  AND p_date BETWEEN idx.date_eff AND idx.date_fin
  AND idx.niv_tech = p_niv
    ) ;
  RETURN v_retour ;
END HRO_GET_ENTITE;
##
TAG_CHARSET=@éèç
##
HRORG_ENTITE
=SQL=
CREATE OR REPLACE FUNCTION "HRORG_ENTITE"(
    p_codts  IN std_struc_arbre.codts%TYPE,
    p_niveau IN std_struc_niv.niveau%TYPE,
    p_entite IN std_struc_entite.code_entite%TYPE,
    p_date   IN std_struc_entite.date_eff%TYPE,
    p_cid    IN std_struc_entite.cid%TYPE default null)
  RETURN std_struc_entite.code_entite%TYPE
IS
  v_entite_mere VARCHAR2(25);
  v_date_fin    VARCHAR2(8);
  v_type_entite VARCHAR2(15);
  v_niv_tech    NUMBER;
  v_cid std_struc_entite.cid%TYPE;
  
BEGIN
  
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
	
  /* lecture du niveau technique de l'entité */
  SELECT niv_tech
  INTO v_niv_tech
  FROM std_struc_index
  WHERE niv_tech >= p_niveau
  AND cid = v_cid
  AND codts       = p_codts
  AND last_entite = p_entite
  AND p_date BETWEEN date_eff AND date_fin ;
  
  IF v_niv_tech IS NULL THEN
    /* échec de la lecture */
    RETURN NULL ;
  ELSE
    /* on vérifie le niveau technique dans la structure */
    IF v_niv_tech > p_niveau THEN
      /* lecture de l'arbre pour trouver l'entite mère un cran au-dessus */
      SELECT code_ent_mere,
        date_fin
      INTO v_entite_mere,
        v_date_fin
      FROM std_struc_arbre
      WHERE codts     = p_codts
      AND cid = v_cid
      AND code_entite = p_entite
      AND p_date BETWEEN date_eff AND date_fin ;
      
      IF v_entite_mere IS NULL THEN
        /* échec de la lecture de l'entité mère */
        RETURN NULL ;
      ELSE
        /* appel récursif à la fonction avec l'entité mère */
        RETURN HRORG_ENTITE(p_codts,p_niveau,v_entite_mere,p_date, v_cid) ;
      END IF ;
    ELSE
      /* c'est bon on a l'entité du bon niveau */
      --DBMS_OUTPUT.PUT_LINE('p_entite ' || p_entite);
      --FIXME utiliser la procédure trace_dbms_output()
      RETURN p_entite ;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL ;
END HRORG_ENTITE ;
##
TAG_CHARSET=@éèç
##
HRORG_GET_GROUPE_VALIDEUR
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_GET_GROUPE_VALIDEUR(
      p_codts  IN STD_STRUC_ARBRE.codts%TYPE,
      p_opnum  IN WKF_OPERATIONS.op_num%TYPE,
      p_date   IN STD_STRUC_ENTITE.date_eff%TYPE,
      p_entite IN STD_STRUC_ENTITE.code_entite%TYPE, 
      p_cid     IN STD_STRUC_ARBRE.cid%TYPE default null
      )
    RETURN SYS_GROUPE_VALIDEURS.GROUPE_VALIDEURS%TYPE
  IS
  TYPE tcur
IS
  REF
  CURSOR;
    curentite1 tcur;
    ventite     VARCHAR2 (100);
    vgroupe_val VARCHAR2 (100);
    vlogin      VARCHAR2 (100);
    vniv        NUMBER;
    vnbhab      NUMBER;
    vcodts      NUMBER;
    vdate       NUMBER;
    vnbfctrole  NUMBER;
    v_cid        STD_STRUC_ARBRE.cid%TYPE;
  BEGIN
    IF (p_opnum IS NULL) THEN
      RETURN NULL;
    END IF;
    IF (p_entite IS NULL) THEN
      RETURN NULL;
    END IF;
    vdate     := p_date;
    IF (vdate IS NULL) THEN
      SELECT TO_CHAR(SYSDATE,'yyyymmdd') INTO vdate FROM DUAL;
  	END IF;
  	
  	v_cid := p_cid;
  	IF (v_cid IS NULL) THEN
  		BEGIN
  			SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  		EXCEPTION
  		WHEN NO_DATA_FOUND THEN
  			v_cid := null;
  		END;
  	END IF;
  	IF (v_cid IS NULL) THEN
  		-- En mode multiclient, la varsys peut être null et le passage du paramètre p_cid est obligatoire
  		RETURN NULL;
  	END IF;
  	
  vcodts     := p_codts;
  IF (vcodts IS NULL) THEN
    SELECT CODTS INTO vcodts FROM STD_STRUC_TYPE WHERE CRITERE_VALIDEURS='1';
  END IF;
  IF (vcodts IS NULL) THEN
    RETURN NULL;
  END IF;
  SELECT COUNT(*)
  INTO vnbfctrole
  FROM WKF_OP_ROLE
  WHERE OP_NUM    =p_opnum
  AND NOT FCT_ROLE='*';
  OPEN curentite1 FOR
WITH entitepere (code_entite, code_ent_mere, groupe_valideurs, login, niveau) AS
  (SELECT std_struc_arbre.code_entite,
    std_struc_arbre.code_ent_mere,
    std_struc_arbre.groupe_valideurs,
    sys_groupe_valideurs.login,
    0 niveau
  FROM std_struc_arbre
  LEFT OUTER JOIN sys_groupe_valideurs
  ON std_struc_arbre.groupe_valideurs=sys_groupe_valideurs.groupe_valideurs
  WHERE
  std_struc_arbre.cid = v_cid
  AND std_struc_arbre.code_entite  =p_entite
  AND vdate BETWEEN std_struc_arbre.date_eff AND std_struc_arbre.date_fin
  AND std_struc_arbre.codts=vcodts
  UNION ALL
  SELECT std_struc_arbre.code_entite,
    std_struc_arbre.code_ent_mere,
    std_struc_arbre.groupe_valideurs,
    sys_groupe_valideurs.login,
    niveau-1
  FROM std_struc_arbre
  LEFT OUTER JOIN sys_groupe_valideurs
  ON std_struc_arbre.groupe_valideurs=sys_groupe_valideurs.groupe_valideurs,
    entitepere
  WHERE 
  std_struc_arbre.cid = v_cid
  AND std_struc_arbre.code_entite=entitepere.code_ent_mere
  AND vdate BETWEEN std_struc_arbre.date_eff AND std_struc_arbre.date_fin
  AND std_struc_arbre.codts=vcodts
  )
SELECT DISTINCT code_entite,
  groupe_valideurs,
  login,
  niveau
FROM entitepere
WHERE groupe_valideurs IS NOT NULL
AND login              IS NOT NULL
AND login              IN
  (SELECT login FROM sys_usr_config
  )
ORDER BY niveau DESC,
  login;
LOOP
  FETCH curentite1 INTO ventite, vgroupe_val, vlogin, vniv;
  EXIT
WHEN curentite1%NOTFOUND;
  IF (vnbfctrole=0) THEN
    RETURN vgroupe_val;
  END IF;
  SELECT COUNT(*)
  INTO vnbhab
  FROM SYS_USR_PROFIL UP,
    WKF_OP_ROLE WOR
  WHERE TO_CHAR(UP.CODE_PROFIL)=WOR.fct_role
  AND UP.LOGIN                 =vlogin
  AND wor.op_num               =p_opnum;
  IF (vnbhab                   >0) THEN
    RETURN vgroupe_val;
  END IF;
END LOOP;
CLOSE curentite1;
RETURN NULL;
END hrorg_get_groupe_valideur;
##
TAG_CHARSET=@éèç
##
HRORG_GET_NUMPAC
=SQL=
CREATE OR REPLACE FUNCTION HRORG_GET_NUMPAC (
  p_codts        IN NUMBER,
  p_code_entite  IN VARCHAR2,
  p_date_eff     IN VARCHAR2,
  type_ent_ste IN VARCHAR2,
  type_ent_etb IN VARCHAR2,
  p_cid   IN std_struc_entite.cid%TYPE default null)
  RETURN VARCHAR2
IS
  numpac    VARCHAR2(700);
  numpacSte VARCHAR2(700);
  numpacEtb VARCHAR2(700);
  v_cid std_struc_entite.cid%TYPE;
BEGIN
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
  
  numpacSte := NULL;
  numpacEtb := NULL;
  for E in (with ENTITES (CODE_ENTITE, CODE_ENT_MERE, LIBELLE, TYPE_ENTITE, NUMPAC) as (
    select e.CODE_ENTITE, a.CODE_ENT_MERE, e.LIBELLE, e.TYPE_ENTITE, e.NUMPAC 
    from STD_STRUC_ENTITE e, STD_STRUC_ARBRE a 
    where
    a.cid = v_cid and e.cid = v_cid
    and e.CODE_ENTITE = p_code_entite and p_date_eff between e.DATE_EFF and e.DATE_FIN and e.CODE_ENTITE=a.CODE_ENTITE and a.CODTS = p_codts and p_date_eff between a.DATE_EFF and a.DATE_FIN and a.STATUT=1 
    union all 
    select e.CODE_ENTITE, a.CODE_ENT_MERE, e.LIBELLE, e.TYPE_ENTITE, e.NUMPAC 
    from STD_STRUC_ENTITE e, STD_STRUC_ARBRE a, ENTITES z 
    where
    a.cid = v_cid and e.cid = v_cid
    and e.CODE_ENTITE=z.CODE_ENT_MERE and p_date_eff between e.DATE_EFF and e.DATE_FIN and e.CODE_ENTITE=a.CODE_ENTITE and a.CODTS = p_codts and p_date_eff between a.DATE_EFF and a.DATE_FIN
  ) select CODE_ENTITE,LIBELLE,TYPE_ENTITE,NUMPAC from ENTITES)
  LOOP
    IF E.TYPE_ENTITE=type_ent_ste THEN
      numpacSte := E.NUMPAC;
    ELSIF E.TYPE_ENTITE=type_ent_etb THEN
      numpacEtb := E.NUMPAC;
    END IF;
  END LOOP;
  IF numpacEtb IS NOT NULL THEN
    numpac := numpacEtb;
  ELSIF numpacSte IS NOT NULL THEN
    numpac := numpacSte;
  ELSE
  	numpac := NULL;
  END IF;
  RETURN numpac;
END HRORG_GET_NUMPAC;
##
TAG_CHARSET=@éèç
##
HRORG_IS_ENTITE_FILLE_HERITEE
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_IS_ENTITE_FILLE_HERITEE(
      p_codts  IN std_struc_arbre.codts%TYPE,
      p_entite IN std_struc_entite.code_entite%TYPE,
      p_date   IN std_struc_entite.date_eff%TYPE,
      p_cid   IN std_struc_entite.cid%TYPE default null)
    RETURN VARCHAR2
  IS
    v_lien_codts std_struc_type.lien_codts%TYPE;
    v_type_entite std_struc_entite.type_entite%TYPE;
    v_niveau std_struc_niv.niveau%TYPE;
    v_type_entite_fille std_struc_entite.type_entite%TYPE;
    v_count NUMBER;
    v_cid std_struc_entite.cid%TYPE;
  BEGIN
	  
	v_cid := p_cid;
  	IF (v_cid IS NULL) THEN
  		BEGIN
  			SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  		EXCEPTION
  		WHEN NO_DATA_FOUND THEN
  			v_cid := null;
  		END;
  	END IF;
  	IF (v_cid IS NULL) THEN
  		-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  		RETURN 0;
  	END IF;
	  
    /* On vérifie que la structure hérite d'une autre structure */
    SELECT lien_codts INTO v_lien_codts FROM std_struc_type WHERE codts=p_codts;
    IF (v_lien_codts IS NULL) THEN
      RETURN '0';
    END IF;
    /* On récupère le type d'entité de l'entité */
    SELECT type_entite
    INTO v_type_entite
    FROM std_struc_entite
    WHERE code_entite=p_entite
   	AND cid = v_cid
    AND p_date BETWEEN date_eff AND date_fin;
    /* On récupère le niveau de l'entité dans la structure */
    SELECT niveau
    INTO v_niveau
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND type_entite=v_type_entite;
    /* On récupère le type d'entité fille de l'entité */
    SELECT type_entite
    INTO v_type_entite_fille
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND niveau=v_niveau+1;
    /* On regarde si le lien type entité <-> type entité fille existe (directement ou indirectement) dans la structure mère */
    SELECT COUNT(*)
    INTO v_count
    FROM std_struc_niv n1,
      std_struc_niv n2
    WHERE n1.codts    =v_lien_codts
    AND n1.type_entite=v_type_entite
    AND n2.codts      =v_lien_codts
    AND n2.type_entite=v_type_entite_fille
    AND n1.niveau     <n2.niveau
    AND p_date BETWEEN n1.date_eff AND n1.date_fin
    AND p_date BETWEEN n2.date_eff AND n2.date_fin;
    IF (v_count=0) THEN
      RETURN '0';
    END IF;
    RETURN '1';
  EXCEPTION
  WHEN OTHERS THEN
    RETURN '0' ;
  END HRORG_IS_ENTITE_FILLE_HERITEE ;
##
TAG_CHARSET=@éèç
##
HRORG_IS_ENTITE_MERE_HERITEE
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_IS_ENTITE_MERE_HERITEE(
      p_codts  IN std_struc_arbre.codts%TYPE,
      p_entite IN std_struc_entite.code_entite%TYPE,
      p_date   IN std_struc_entite.date_eff%TYPE,
      p_cid   IN std_struc_entite.cid%TYPE default null)
    RETURN VARCHAR2
  IS
    v_lien_codts std_struc_type.lien_codts%TYPE;
    v_type_entite std_struc_entite.type_entite%TYPE;
    v_niveau std_struc_niv.niveau%TYPE;
    v_type_entite_mere std_struc_entite.type_entite%TYPE;
    v_count NUMBER;
    v_cid std_struc_entite.cid%TYPE;
  BEGIN
	  
	v_cid := p_cid;
  	IF (v_cid IS NULL) THEN
  		BEGIN
  			SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  		EXCEPTION
  		WHEN NO_DATA_FOUND THEN
  			v_cid := null;
  		END;
  	END IF;
  	IF (v_cid IS NULL) THEN
  		-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  		RETURN 0;
  	END IF;
	
    /* On vérifie que la structure hérite d'une autre structure */
    SELECT lien_codts INTO v_lien_codts FROM std_struc_type WHERE codts=p_codts;
    IF (v_lien_codts IS NULL) THEN
      RETURN '0';
    END IF;
    /* On récupère le type d'entité de l'entité */
    SELECT type_entite
    INTO v_type_entite
    FROM std_struc_entite
    WHERE code_entite=p_entite
    AND cid = v_cid
    AND p_date BETWEEN date_eff AND date_fin;
    /* On récupère le niveau de l'entité dans la structure */
    SELECT niveau
    INTO v_niveau
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND type_entite=v_type_entite;
    IF (v_niveau   =1) THEN
      /* On regarde si le type d'entité existe dans la structure mère */
      SELECT COUNT(*)
      INTO v_count
      FROM std_struc_niv
      WHERE codts    =v_lien_codts
      AND type_entite=v_type_entite
      AND p_date BETWEEN date_eff AND date_fin;
    ELSE
      /* On récupère le type d'entité mère de l'entité */
      SELECT type_entite
      INTO v_type_entite_mere
      FROM std_struc_niv
      WHERE codts=p_codts
      AND p_date BETWEEN date_eff AND date_fin
      AND niveau=v_niveau-1;
      /* On regarde si le lien type entité <-> type entité mère existe (directement ou indirectement) dans la structure mère */
      SELECT COUNT(*)
      INTO v_count
      FROM std_struc_niv n1,
        std_struc_niv n2
      WHERE n1.codts    =v_lien_codts
      AND n1.type_entite=v_type_entite_mere
      AND n2.codts      =v_lien_codts
      AND n2.type_entite=v_type_entite
      AND n1.niveau     <n2.niveau
      AND p_date BETWEEN n1.date_eff AND n1.date_fin
      AND p_date BETWEEN n2.date_eff AND n2.date_fin;
    END IF;
    IF (v_count=0) THEN
      RETURN '0';
    END IF;
    RETURN '1';
  EXCEPTION
  WHEN OTHERS THEN
    RETURN '0' ;
  END HRORG_IS_ENTITE_MERE_HERITEE ;
##
TAG_CHARSET=@éèç
##
HRORG_RESP
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_RESP(
      p_matric IN secumatric.matric%TYPE,
      p_date   IN std_struc_entite.date_eff%TYPE,
      p_cid   IN std_struc_entite.cid%TYPE default null)
    RETURN std_struc_entite.matric_resp%TYPE
  IS
    v_retour std_struc_arbre.matric_resp%TYPE;
    v_cid std_struc_entite.cid%TYPE;
  BEGIN
	  
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
	  
    /* Regarde le codts hierachique */
    SELECT HRORG_RESP_CODTS(codts,p_matric,p_date, v_cid)
    INTO v_retour
    FROM std_struc_type
    WHERE critere_hierarchique =1 ;
    RETURN v_retour ;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
  END HRORG_RESP ; 
##
TAG_CHARSET=@éèç
##
HRORG_RESP_CODTS
=SQL=
CREATE OR REPLACE
FUNCTION HRORG_RESP_CODTS(
  p_codts  IN std_struc_arbre.codts%TYPE,
  p_matric IN VARCHAR2,
  p_date   IN std_struc_entite.date_eff%TYPE,
  p_cid    IN std_struc_entite.cid%TYPE default null)
RETURN std_struc_entite.matric_resp%TYPE
IS
  v_matricPrincipal secumatric.matric%TYPE;
  v_retour std_struc_arbre.matric_resp%TYPE;
  v_nomcolsecumatric std_struc_type.NOMCOL_SECUMATRIC%TYPE ;
  v_nomcoletat_civ std_struc_type.nomcol_etat_civ%TYPE ;
  v_matricdefaut std_struc_type.matric_resp%TYPE ;
  v_entite std_struc_entite.code_entite%TYPE ;
  v_req VARCHAR2(500);
  v_nbParam NUMBER;
  v_cid std_struc_entite.cid%TYPE;
BEGIN
	
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;	

  v_matricPrincipal             := p_matric;
  IF INSTR(v_matricPrincipal,',')>0 THEN
    v_matricPrincipal           := SUBSTR(v_matricPrincipal,1,INSTR(v_matricPrincipal,',')-1);
  END IF;
  SELECT NOMCOL_SECUMATRIC,
    nomcol_etat_civ,
    matric_resp
  INTO v_nomcolsecumatric,
    v_nomcoletat_civ,
    v_matricdefaut
  FROM std_struc_type
  WHERE codts=p_codts ;
  v_nbParam := 1;
  IF (v_nomcolsecumatric IS NOT NULL) THEN
    v_req := 'SELECT '||v_nomcolsecumatric||' FROM SECUMATRIC WHERE MATRIC = :1';
  ELSE
    IF (v_nomcoletat_civ IS NOT NULL) THEN
      v_req := 'SELECT '||v_nomcoletat_civ||' FROM ETAT_CIV WHERE MATRIC = :1';
    ELSE
      -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie utilisé v_cid
      v_req := 'SELECT CODE_ENTITE FROM STD_STRUC_AFFECTATION WHERE MATRIC = :1 AND :2 BETWEEN DATE_EFF AND DATE_FIN AND NOT CODE_ENTITE=''@NON_AFFECTE@'' AND CODTS = :3' ;
      v_nbParam := 3;
    END IF;
  END IF;
  BEGIN
    IF v_nbParam=1 THEN
      EXECUTE IMMEDIATE v_req INTO v_entite USING v_matricPrincipal ;
    ELSE
      EXECUTE IMMEDIATE v_req INTO v_entite USING v_matricPrincipal, p_date, p_codts ;
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    v_entite := NULL;
  END ;
  IF (v_entite IS NOT NULL) THEN
    v_retour   := HRORG_RESP_ENTITE(p_codts, v_entite, p_date, 0, p_matric, v_cid);
  END IF ;
  RETURN v_retour ;
EXCEPTION
  WHEN OTHERS THEN
  IF(v_matricdefaut <> v_matricPrincipal) THEN
    RETURN v_matricdefaut ;
  END IF ;
  RETURN NULL;
END HRORG_RESP_CODTS ; 
##
TAG_CHARSET=@éèç
##
HRORG_RESP_ENTITE
=SQL=
create or replace FUNCTION HRORG_RESP_ENTITE(
    p_codts          IN std_struc_arbre.codts%TYPE,
    p_codeEntite     IN std_struc_arbre.code_entite%TYPE,
    p_date           IN std_struc_entite.date_eff%TYPE,
    p_avecUsrExterne IN INT,                    -- 0 : on ne retourne que les salariés, 1 : on retourne les responsables user externe
    p_matric         IN VARCHAR2, -- peut être null
    p_cid   IN std_struc_arbre.cid%TYPE default null)
  RETURN std_struc_entite.matric_resp%TYPE
IS
  v_matricPrincipal secumatric.matric%TYPE;
  v_retour std_struc_arbre.login_resp%TYPE;
  v_matricResp std_struc_arbre.matric_resp%TYPE;
  v_reqSelectMatricResp VARCHAR2(4000);
  v_matricRespSuppOuRemp VARCHAR2(4000);
  v_matricRespRemp VARCHAR2(4000);
  v_listMatricRespSuppOuRemp VARCHAR2(4000);
  v_loginResp std_struc_arbre.login_resp%TYPE;
  v_req VARCHAR2(4000);
  v_withMatric BOOLEAN;
  v_cid std_struc_arbre.cid%TYPE;
BEGIN
  
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
	
  -- p_matric peut être de la forme :
  -- - 'XXXXXXX'
  -- - 'XXXXXXX,YYYYYYY,ZZZZZZZ'
  -- - 'XXXXXXX,YYYYYYY-->ZZZZZZZ,AAAAAAA-->BBBBBBB'
  -- Le premier matricule (XXXXXXX) est le matricule principal (à ne pas retourner)
  -- Les matricules suivants doivent être considérés comme supprimés (si seul) / remplacés (si '-->')
  v_matricPrincipal             := p_matric;
  IF INSTR(v_matricPrincipal,',')>0 THEN
    v_matricPrincipal           := SUBSTR(v_matricPrincipal,1,INSTR(v_matricPrincipal,',')-1);
  END IF;
  v_withMatric := false;
  v_reqSelectMatricResp := 'matric_resp';
  IF p_matric IS NOT NULL AND NOT v_matricPrincipal = p_matric THEN
    v_listMatricRespSuppOuRemp := SUBSTR(p_matric,INSTR(p_matric,',')+1);
    LOOP
      IF INSTR(v_listMatricRespSuppOuRemp,',')>0 THEN
        v_matricRespSuppOuRemp := SUBSTR(v_listMatricRespSuppOuRemp,1,INSTR(v_listMatricRespSuppOuRemp,',')-1);
        v_listMatricRespSuppOuRemp := SUBSTR(v_listMatricRespSuppOuRemp,INSTR(v_listMatricRespSuppOuRemp,',')+1);
      ELSE
        v_matricRespSuppOuRemp := v_listMatricRespSuppOuRemp;
        v_listMatricRespSuppOuRemp := NULL;
      END IF;
      IF INSTR(v_matricRespSuppOuRemp,'-->')>0 THEN
        v_matricRespRemp := ''''||SUBSTR(v_matricRespSuppOuRemp,INSTR(v_matricRespSuppOuRemp,'-->')+3)||'''';
        v_matricRespSuppOuRemp := SUBSTR(v_matricRespSuppOuRemp,1,INSTR(v_matricRespSuppOuRemp,'-->')-1);
      ELSE
        v_matricRespRemp := 'NULL';
      END IF;
      v_reqSelectMatricResp := 'REPLACE('||v_reqSelectMatricResp||','''||v_matricRespSuppOuRemp||''','||v_matricRespRemp||')';
      EXIT WHEN v_listMatricRespSuppOuRemp IS NULL;
    END LOOP;
  END IF;
  -- Recherche du responsable sur la branche de l'arbre  
  v_req := 'SELECT matric_resp, login_resp';
  v_req := v_req||' FROM (';
  v_req := v_req||'   SELECT code_entite, code_ent_mere, codTs, '||v_reqSelectMatricResp||' as matric_resp, login_resp';  
  v_req := v_req||'   FROM std_struc_arbre';
  v_req := v_req||'   START WITH'; 
  v_req := v_req||'     code_entite = :1'; 
  v_req := v_req||'     AND codTs = :2';
  v_req := v_req||'     AND :3 BETWEEN date_eff AND date_fin';
  v_req := v_req||'     AND cid = :4';
  v_req := v_req||'     AND statut = ''1'''; 
  v_req := v_req||'   CONNECT BY'; 
  v_req := v_req||'   PRIOR code_ent_mere = code_entite';
  v_req := v_req||'   AND PRIOR codTs = codTs';
  v_req := v_req||'   AND PRIOR cid = cid';
  v_req := v_req||'   AND :5 BETWEEN date_eff AND date_fin';
  v_req := v_req||')'; 
  v_req := v_req||' WHERE';
  v_req := v_req||'   1=1';
  IF p_avecUsrExterne = 0 THEN
    v_req := v_req||'    AND matric_resp IS NOT NULL';
  ELSE
    v_req := v_req||'   AND (matric_resp IS NOT NULL';
    v_req := v_req||'   OR';
    v_req := v_req||'   login_resp IS NOT NULL)';
  END IF;
  IF(p_matric IS NOT NULL) THEN
    v_withMatric := true;
    v_req := v_req||' AND NVL(matric_resp,''*'') != :6 ';
  END IF;
  v_req := v_req||'   AND ROWNUM = 1';
  
  BEGIN
    IF v_withMatric THEN
      EXECUTE IMMEDIATE v_req INTO v_matricResp, v_loginResp USING p_codeEntite, p_codts, p_date, v_cid, p_date,  v_matricPrincipal;
    ELSE
      EXECUTE IMMEDIATE v_req INTO v_matricResp, v_loginResp USING p_codeEntite, p_codts, p_date, v_cid, p_date;
    END IF;
    
    IF v_loginResp IS NOT NULL AND p_avecUsrExterne = 1 THEN
      v_retour := v_loginResp;
    ELSE
      v_retour := v_matricResp;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      v_retour := NULL;
  END;
  
-- Recherche du responsable sur l'entité
IF( v_retour  IS NULL ) THEN
  v_req       := 'SELECT matric_resp, login_resp';
  v_req       := v_req||' FROM std_struc_entite';
  v_req       := v_req||' WHERE';
  v_req       := v_req||'   code_entite = '''||p_codeEntite||'''';
  v_req       := v_req||'   and cid = '''||v_cid||'''';
  v_req       := v_req||'   AND '''||p_date||''' BETWEEN date_eff AND date_fin';
  IF(p_matric IS NOT NULL) THEN
    v_req     := v_req||'   AND matric_resp <> '''||v_matricPrincipal||'''';
  END IF;

  BEGIN
    EXECUTE IMMEDIATE v_req INTO v_matricResp, v_loginResp;
    IF v_loginResp IS NOT NULL AND p_avecUsrExterne = 1 THEN
      v_retour     := v_loginResp;
    ELSE
      v_retour := v_matricResp;
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    v_retour := NULL;
  END;
END IF ;

-- Rechercher du responsable sur la structure
IF( v_retour IS NULL) THEN
  SELECT matric_resp,
    login_resp
  INTO v_matricResp,
    v_loginResp
  FROM std_struc_type
  WHERE codts     = p_codts ;
  IF v_loginResp IS NOT NULL AND p_avecUsrExterne = 1 THEN
    v_retour     := v_loginResp;
  ELSE
    v_retour := v_matricResp;
  END IF;
  IF(p_matric IS NOT NULL AND v_matricPrincipal = v_retour ) THEN
    v_retour  := NULL;
  END IF;
END IF;
RETURN v_retour ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.put_line('Exception ' || SQLCODE || ' - ' || SQLERRM);
  RETURN NULL;
END HRORG_RESP_ENTITE ;
##
TAG_CHARSET=@éèç
##
HRORG_SECU 
=SQL=
CREATE OR REPLACE FUNCTION "HRORG_SECU"(
    p_codts       IN std_struc_arbre.codts%TYPE,
    p_type_entite IN std_struc_entite.type_entite%TYPE,
    p_entite      IN std_struc_entite.code_entite%TYPE,
    p_date        IN std_struc_entite.date_eff%TYPE,
    p_cid         IN std_struc_entite.cid%TYPE default null)
  RETURN std_struc_entite.code_entite%TYPE
IS
  v_retour VARCHAR2(25);
  v_typent std_struc_entite.type_entite%TYPE;
  v_cid std_struc_entite.cid%TYPE;
BEGIN
	
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN null;
  END IF;
	
  SELECT TYPE_ENTITE
  INTO v_typent
  FROM STD_STRUC_ENTITE
  WHERE CODE_ENTITE = p_entite
  AND CID = v_cid
  AND p_date BETWEEN date_eff AND date_fin;
  
  IF v_typent = p_type_entite THEN
    RETURN p_entite;
  END IF;
  /* lecture du type d'entité */
  SELECT code_entite
  INTO v_retour
  FROM
    ( WITH entitepere ( code_entite, code_ent_mere ) AS
    (SELECT a.code_entite,
      a.code_ent_mere
    FROM std_struc_arbre a
    WHERE a.code_entite =p_entite
    AND a.cid         = v_cid
    AND a.codts         =p_codts
    AND p_date BETWEEN a.date_eff AND a.date_fin
    AND statut = '1'
    UNION ALL
    SELECT a.code_entite,
      a.code_ent_mere
    FROM std_struc_arbre a,
      entitepere f
    WHERE f.code_ent_mere = a.code_entite
    AND a.cid = v_cid
    AND a.codts           =p_codts
    AND p_date BETWEEN a.date_eff AND a.date_fin
    AND statut = '1'
    )
  SELECT a.code_entite
  FROM entitepere a,
    std_struc_entite e
  WHERE a.code_entite = e.code_entite
  AND e.cid = v_cid
  AND e.type_entite   = p_type_entite
  AND p_date BETWEEN e.date_eff AND e.date_fin
  /* En cas d'occurrences multiples, il est possible d'avoir plusieurs lignes en retour, on retourne alors la première ligne (qui correspond au niveau le plus bas correspondant au type d'entité) */
  AND ROWNUM = 1
    ) ;
  --DBMS_OUTPUT.PUT_LINE('v_retour ' || v_retour);
  --FIXME utiliser la procédure trace_dbms_output()
  RETURN v_retour ;
EXCEPTION
WHEN OTHERS THEN
  --DBMS_OUTPUT.PUT_LINE('v_retour ');
  --FIXME utiliser la procédure trace_dbms_output()
  RETURN NULL ;
END HRORG_SECU ;
##
TAG_CHARSET=@éèç
##
HRORG_SECU_OPTI
=SQL=
CREATE OR REPLACE FUNCTION HRORG_SECU_OPTI(
  p_codts       IN std_struc_arbre.codts%TYPE,
  p_type_entite IN std_struc_entite.type_entite%TYPE,
  p_entite      IN std_struc_entite.code_entite%TYPE,
  p_date        IN std_struc_entite.date_eff%TYPE,
  p_clauseWhere IN VARCHAR2,
  p_cid   IN std_struc_entite.cid%TYPE default null)
RETURN INTEGER
IS
  v_req              VARCHAR2(4000);
  TYPE CODE_ENTITE_ROW IS TABLE OF std_struc_entite.code_entite%TYPE;
  tab_entitesRecherchees CODE_ENTITE_ROW;
  v_tmpEntite std_struc_entite.code_entite%TYPE;
  v_niveauTypeEntite std_struc_niv.niveau%TYPE;
  v_nbOccTypeEntite std_struc_niv_info.nb_occurrences%TYPE;
  v_retour           INTEGER;
  v_cid std_struc_entite.cid%TYPE;
BEGIN
	
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN -1;
  END IF;
	
  IF p_codts IS NULL OR p_type_entite IS NULL OR p_date IS NULL THEN
    RETURN -1;
  END IF;
  IF p_clauseWhere IS NULL THEN
    RETURN 1;
  END IF;
  IF p_entite IS NOT NULL THEN
    v_req := 'SELECT count(*)
      FROM STD_STRUC_ENTITE
      WHERE CODE_ENTITE = :1
      AND :2 BETWEEN date_eff AND date_fin
      AND TYPE_ENTITE = :3
      AND CID = :4
      AND CODE_ENTITE '||p_clauseWhere;
    EXECUTE immediate v_req INTO v_retour USING p_entite,p_date,p_type_entite, v_cid ;
    IF v_retour>0 THEN
      RETURN 1;
    END IF;
    v_req := 'select n.niveau, ni.nb_occurrences from std_struc_niv n, std_struc_niv_info ni where n.codts=ni.codts and n.type_entite=ni.type_entite and :1 between n.date_eff and n.date_fin and n.codts=:2 and n.type_entite=:3';
    EXECUTE immediate v_req INTO v_niveauTypeEntite, v_nbOccTypeEntite USING p_date,p_codts,p_type_entite;
    IF v_niveauTypeEntite IS NOT NULL AND v_niveauTypeEntite>0 THEN
      IF v_nbOccTypeEntite IS NULL THEN
        v_nbOccTypeEntite := 1;
      END IF;
      v_req := '';
      FOR i IN 0..v_nbOccTypeEntite-1 LOOP
        IF i>0 THEN
          v_req := v_req||' union all ';
        END IF;
         v_req := v_req||' select niv'||(v_niveauTypeEntite+i)||' as code_entite from std_struc_index where cid = '||v_cid||' and '''||p_date||''' between date_eff and date_fin and codts='||p_codts||' and last_entite='''||p_entite||''' and niv'||(v_niveauTypeEntite+i)||' is not null ';
      END LOOP;
      --DBMS_OUTPUT.PUT_LINE(v_req);
      --FIXME utiliser la procédure trace_dbms_output()
      EXECUTE immediate v_req bulk collect INTO tab_entitesRecherchees;
    END IF;
  END IF;
  IF NOT tab_entitesRecherchees.exists(1) AND NOT INSTR(p_clauseWhere,' NULL')=0 THEN
    v_req := 'SELECT count(*)
      FROM DUAL
      WHERE '''' '||p_clauseWhere;
    EXECUTE immediate v_req INTO v_retour;
  ELSE
    v_req := 'SELECT count(*)
      FROM DUAL
      WHERE :1 '||p_clauseWhere;
    IF NOT tab_entitesRecherchees.exists(1) THEN
      v_tmpEntite := '@VIDE@';
      EXECUTE immediate v_req INTO v_retour USING v_tmpEntite;
    ELSE
      FOR i IN tab_entitesRecherchees.first..tab_entitesRecherchees.last LOOP 
        EXIT WHEN v_retour>0;
        EXECUTE immediate v_req INTO v_retour USING tab_entitesRecherchees(i);
      END LOOP;
    END IF;
  END IF;
  RETURN v_retour ;
EXCEPTION
  WHEN OTHERS THEN RETURN -99 ;
END HRORG_SECU_OPTI;
##
TAG_CHARSET=@éèç
##
TGE_CREATE_TRIGGER_RECYCLAGE
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  v_typeTable VARCHAR(1);
  date_eff_exists NUMBER;
  nom_col_date_test_recycl VARCHAR2(30);
  condition CLOB;

  CURSOR cur_mapdo IS
    SELECT LISTAGG(numpac,',') WITHIN GROUP (ORDER BY numpac) as numpacs, donneegxp, data_type from (
      with donnees_paie (numpac, donneegxp, tablegxp, data_type) as (
        SELECT numpac, donneegxp, tablegxp, data_type
        FROM TGE_REF_MAPDO_RESOLVED,user_tab_cols
        WHERE 
          column_name=donneegxp and table_name=nom_table and
          TABLEGXP IN (
            SELECT tableparam
            FROM tge_ref_mapta
            WHERE 
              tablephy = nom_table
              --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
              --Ajout du type 'I'
              AND allerretour IN ('A','2','I')
              -- les occurences !! sont désactivés 
              AND tge_ref_mapdo_resolved.occurence != '!!'
          )
        UNION 
        SELECT numpac,donneegxp,(select min(tableparam) from tge_ref_mapta where tablephy = nom_table) as tablegxp,data_type 
        FROM TABLE(GET_GXP_TRT_PARTICULIER_DATAS(nom_table)),user_tab_cols
        WHERE 
          column_name=donneegxp and table_name=nom_table
      )
      SELECT distinct 
        case when not exists (select 1 from tge_ref_pac where numpac not in (select numpac from donnees_paie m where donneegxp=t.donneegxp and TABLEGXP=t.TABLEGXP)) then '*' else numpac end as numpac
        , donneegxp, data_type
      from donnees_paie t
    )
    GROUP BY donneegxp, data_type
    ORDER BY donneegxp;
  lig_mapdo cur_mapdo%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_RECYCLAGE_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  v_retour := NULL;
  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  date_eff_exists := 0;
  nom_col_date_test_recycl := NULL;
  IF nom_table='DIC_ADM_CONTRAT' THEN
    -- Pour DIC_ADM_CONTRAT c'est DSDCN qui fera office de DATE_EFF pour tester s'il faut mettre en recyclage
    nom_col_date_test_recycl := 'DSDCN';
  ELSE
    SELECT COUNT(*)
    INTO date_eff_exists
    FROM user_tab_cols
    WHERE column_name     = 'DATE_EFF'
    AND table_name        = NOM_TABLE;
    IF date_eff_exists>0 THEN
      nom_col_date_test_recycl := 'DATE_EFF';
    END IF;
  END IF;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_RECYCLAGE_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew IN OUT '||NOM_TABLE||'%ROWTYPE, v_numpac IN OUT VARCHAR2, v_pacmat IN OUT VARCHAR2, v_paiezad IN OUT VARCHAR2, tabRefPacByNumpac IN OUT ALIM_IDX.T_REF_PAC_BY_NUMPAC) IS 
 v_matric VARCHAR2(32);
type pacmats IS record (R_numpac VARCHAR2(6), R_pacmat VARCHAR2(8), R_periode_recycl number); 
TYPE TAB_pacmats IS TABLE OF pacmats INDEX BY binary_integer; 
tab TAB_pacmats; 
v_recycl varchar2(1); 
v_periode_recycl number; 
v_error_periode_recycl_3 number; 
v_retro VARCHAR2(1); 
v_nbOccForCnt number;
';

  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
date_test_recycl DATE;
';
  END IF;

    v_retour := v_retour||'
BEGIN
 v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC); ';

  -- Récupération du numpac si besoin
  IF v_typeTable = 'z' THEN
    v_retour := v_retour||' 
SELECT DISTINCT D.numpac as R_numpac, 
D.pacmat as R_pacmat, 
T.PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM DIC_ADM_CONTRAT_SITU D ,SECUPACMAT T 
WHERE D.NUMPAC=v_numpac AND D.PAIEZAD=v_paiezad AND D.NUMPAC=T.NUMPAC AND D.PACMAT=T.PACMAT;';
  elsif v_typeTable = 'm' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE matric=v_matric;';
  elsif v_typeTable = 'p' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat;';
  END IF;

  v_retour := v_retour||'
if not tab.exists(1) then
 return;
end if;

v_retro := ''N'';
 FOR i IN 1..tab.last LOOP
  v_numpac:=tab(i).r_numpac;
   IF NOT v_numpac = ''TMPPAC'' THEN
    v_pacmat:=tab(i).r_pacmat;
    v_periode_recycl:=nvl(tab(i).R_periode_recycl,1);
';

  IF NOT nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- une valeur '3' dans PERIODE_RECYCLAGE retourne une erreur
    -- sauf en cas de réembauche (insertion dans DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO)
    v_retour := v_retour||' IF v_periode_recycl = 3 THEN';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     IF UPDATING OR DELETING THEN';
    END IF;
    v_retour := v_retour||'     RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     END IF;';
    END IF;
    v_retour := v_retour||' END IF;';
  ELSE
    -- on positionne PERIODE_RECYCLAGE à '1' en cas de réembauche d'un salarié ayant une valeur '0' ou '3' dans PERIODE_RECYCLAGE et répondant aux critères suivants :
    -- - DRPAI2 est non-vide et différent de 'B'
    -- - NATCOL vaut 'SAL' ou 'STA'
    -- - DSDCN est antérieure ou égale à la période en cours
    v_retour := v_retour||'
IF v_periode_recycl IN (0,3) THEN
 IF v_periode_recycl = 3 THEN
  -- si PERIODE_RECYCLAGE vaut ''3'', on prévoit qu''il va falloir retourner une erreur (modification d''un contrat existant)
  v_error_periode_recycl_3 := 1;
 ELSE
  v_error_periode_recycl_3 := 0;
 END IF;
 IF INSERTING THEN
  -- insertion d''un historique de contrat : on vérifie s''il s''agit de la première occurrence du contrat (réembauche)
  v_nbOccForCnt := GET_NB_LIGNES(''DIC_ADM_CONTRAT_HISTO'', ''NUMPAC=''''''||v_ligNew.NUMPAC||'''''' AND PACMAT=''''''||v_ligNew.PACMAT||'''''' AND NUMCNT=''||v_ligNew.NUMCNT);
  IF v_nbOccForCnt = 0 THEN
   -- première occurrence du contrat (réembauche) : on ne retourne pas d''erreur, et, si PERIODE_RECYCLAGE = ''3'', on va réactiver le dossier
   IF v_periode_recycl = 3 THEN
    v_error_periode_recycl_3 := 0;
    v_ligNew.ZREACT := TO_DATE(TO_CHAR(v_ligNew.DATE_EFF,''yyyy'')||''0101'',''yyyymmdd'');
   END IF; -- FIN v_periode_recycl = ''3''
   -- vérification des critères pour positionner PERIODE_RECYCLAGE à ''1''
   IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := 1;
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  END IF; -- FIN v_nbOccForCnt = 0
 ELSIF UPDATING THEN
  -- un update : on va vérifier si on doit réactiver le dossier
  IF UPDATING(''DRPAI2'') AND (NVL(v_ligOld.DRPAI2, ''B'') <> NVL(v_ligNew.DRPAI2, ''B'') AND (NVL(v_ligOld.DRPAI2, ''B'') =''B'' OR NVL(v_ligNew.DRPAI2, ''B'')=''B'')) THEN
   -- update de DRPAI2 pour déblocage paie : on ne retourne pas d''erreur, et on va réactiver le dossier
   v_error_periode_recycl_3 := 0;
   IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := 1;
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  ELSIF UPDATING(''ZREACT'') AND v_ligOld.ZREACT IS NULL AND v_ligNew.ZREACT IS NOT NULL THEN
   -- update de ZREACT pour réactivation : si l''année de ZREACT est inférieure ou égale à l''année de la période en cours, on ne retourne pas d''erreur
   BEGIN
    IF NOT tabRefPacByNumpac.exists(v_ligNew.NUMPAC) THEN
     select * into tabRefPacByNumpac(v_ligNew.NUMPAC) from tge_ref_pac where numpac = v_ligNew.NUMPAC;
    END IF;
    IF TO_CHAR(v_ligNew.ZREACT,''yyyy'') <= SUBSTR(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS,1,4) THEN
     v_error_periode_recycl_3 := 0;
     IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS) = 1 THEN
      -- OK pour PERIODE_RECYCLAGE = ''1''
      v_periode_recycl := 1;
     END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
    END IF; -- FIN ZREACT <= PERIODEENCOURS
   EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF; -- FIN UPDATING DRPAI2 ou ZREACT
 END IF; -- FIN INSERTING/UPDATING
 IF v_error_periode_recycl_3 = 1 THEN
  RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');
 END IF;
END IF; -- FIN v_periode_recycl = 0 ou 3
';
  END IF;

  v_retour := v_retour||'
IF v_periode_recycl >= 10 THEN
 RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC01'');
ELSIF v_periode_recycl = 1 THEN
';

  -- on vérifie si des colonnes paies ont été modifié
  v_retour := v_retour||' v_recycl:=''N'';';
  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
IF NOT tabRefPacByNumpac.exists(v_numpac) THEN
 select * into tabRefPacByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
END IF;
IF DELETING THEN
 date_test_recycl := v_ligOld.'||nom_col_date_test_recycl||';
ELSE
 date_test_recycl := v_ligNew.'||nom_col_date_test_recycl||';
END IF;
IF (NVL(TO_CHAR(date_test_recycl,''yyyymm''),''000000'') <= tabRefPacByNumpac(v_numpac).PERIODEENCOURS) THEN
';
  END IF;

  v_retour := v_retour||'
IF (INSERTING and v_ligOld.MATRIC IS NULL) OR (DELETING and v_ligNew.MATRIC IS NULL) THEN 
 -- En insertion, si on n''a pas récupéré de ''OLD'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en recyclage
 -- En suppression, si on n''a pas récupéré de ''NEW'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en recyclage
 v_recycl:=''O'';
ELSE 
  -- Sinon, on compare ''OLD'' et ''NEW''
';
  condition := NULL;
  OPEN cur_mapdo;
  LOOP FETCH cur_mapdo INTO lig_mapdo ;

    IF cur_mapdo%NOTFOUND AND condition IS NOT NULL THEN
      condition := condition||' 
END IF;';
    END IF;

    EXIT WHEN cur_mapdo%NOTFOUND;

    IF lig_mapdo.donneegxp IS NOT NULL THEN
      IF condition IS NOT NULL THEN
        condition := condition||' 
ELSIF ';
      ELSE
        condition := ' IF ';
        IF NOM_TABLE ='DIC_ADM_CONTRAT_HISTO' THEN
          condition := condition||' NVL(v_ligOld.DRPAI2, ''B'') <> NVL(v_ligNew.DRPAI2, ''B'') AND (NVL(v_ligOld.DRPAI2, ''B'') =''B'' OR NVL(v_ligNew.DRPAI2, ''B'')=''B'') THEN 
 v_recycl:=''O'';
ELSIF ';
        END IF;
      END IF;

      IF NOT lig_mapdo.numpacs = '*' THEN
        condition := condition||'INSTR('''||lig_mapdo.numpacs||''',v_numpac)>0 AND ';
      END IF;

      vFunctionCompare := 'IS_EQ';
      vFunctionCompareParam3 := NULL;
      IF lig_mapdo.data_type = 'DATE' THEN
        vFunctionCompare := 'IS_EQ_DATE';
        vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
      END IF;
      condition := condition||' NOT '||vFunctionCompare||'(v_ligNew.'||lig_mapdo.donneegxp||',v_ligOld.'||lig_mapdo.donneegxp||vFunctionCompareParam3||') THEN
 v_recycl:=''O''; ';
    END IF;

  END LOOP;
  CLOSE cur_mapdo;

  IF condition IS NULL THEN
    RETURN NULL;
  END IF;

  v_retour := v_retour||condition;
  
  -- traitement du matricule pour recyclage
  v_retour := v_retour||'
END IF; -- FIN updating
IF v_recycl=''O'' THEN 
 MERGE INTO GAP_RECYCL_MATRIC a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac)
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat) VALUES (b.numpac,b.pacmat);

 MERGE INTO TGE_MODIF_PACMAT_TORESEND a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat, '''||NOM_TABLE||''' as TABLE_TO_SEND FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac and a.TABLE_TO_SEND=b.TABLE_TO_SEND)
  WHEN MATCHED THEN update set a.DATE_MAJ=sysdate 
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat,a.TABLE_TO_SEND,a.DATE_MAJ) VALUES (b.numpac,b.pacmat,b.TABLE_TO_SEND, sysdate);
END IF; -- FIN v_recycl
';

  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||' END IF; -- FIN test date recycl';
  END IF;
  v_retour := v_retour||'
END IF; -- FIN v_periode_recycl IN (''0'',''3'')
'|| TGE_CREATE_TRIGGER_RETRO(NOM_TABLE) ||'
END IF; -- FIN NOT v_numpac = ''TMPPAC''
END LOOP; -- FIN tab
END CHECK_RECYCLAGE_'||NOM_TABLE||';
';

  EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour := '
-- DEBUT TRAITEMENT RECYCLAGE
if v_type_writer<>''N'' AND v_type_writer<>''M'' THEN 
 CHECK_RECYCLAGE_'||NOM_TABLE||'(v_ligOld, v_ligNew, v_numpac, v_pacmat, v_paiezad, tabRefPacByNumpac); ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    v_retour := v_retour || '
 IF INSERTING THEN 
  -- On récupère la valeur de ZREACT potentiellement mise à jour
  :NEW.ZREACT := v_ligNew.ZREACT; 
 END IF; ';
  END IF;
  v_retour := v_retour || '
end if;
-- FIN TRAITEMENT RECYCLAGE';
 
  return v_retour;
END TGE_CREATE_TRIGGER_RECYCLAGE;
##
TAG_CHARSET=@éèç
##
IDX_TGE_GESTIL_MATEVE1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATEVE1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATEVE1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE INDEX IDX_TGE_GESTIL_MATEVE1 ON TGE_GESTIL_MATEVE (NUMPAC , MAT , DAT_AFF , HRE_AFF , RANG) LOCAL NOLOGGING';
END;
##
TAG_CHARSET=@éèç
##
IDX_TGE_GESTIL_MATPRE1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATPRE1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATPRE1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATPRE1 ON TGE_GESTIL_MATPRE (NUMPAC , MAT , DAT_PRE) LOCAL NOLOGGING';
END;
##
TAG_CHARSET=@éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
 MatEcrit          VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --éliminer les doublons même matricule déjà écrit et même valeur
    IF MatEcrit=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
      RETURN;
    END IF;
    --on a détecté au moins une différence
    MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    --éliminer le passé et pour les historiques les doublons déjà écrits
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1
      AND ( coldteffet <> 'a.DATE_EFF' 
      OR MatARenvoyer<>MatEcrit OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') )
    THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=tab.DTEFFET;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
    IF coldteffet = 'a.DATE_EFF' THEN
    --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet.
    MatEcrit:=MatARenvoyer;
    --mémoriser la valeur de cette colonne historique
    oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
    END IF;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
IF p_table ='DIC_ADM_CONTRAT_SITU' THEN 
    v_typeTable :='z';
ELSE

  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
END IF;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t , 
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde sil existe déjà dans GAP_TRT
  --une ligne pour N° déchange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    preclemati     VARCHAR2(20);
    preclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
    w_mpe          varchar2(1);
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --lire le type de MPE (N=rien,M=MPE,C=CSCP)
    select mpe into w_mpe from tge_ref_pac where numpac=p_numpac ;
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
 if w_mpe='C' THEN
 coldteffet:='d.DSDSC';
 ELSE
 coldteffet:='d.DSDCN';
END IF;
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
     if w_mpe='C' THEN
     coldteffet :='d.DSDSC';
      ELSE
      coldteffet :='a.DSDCN';
    END IF;
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --champ "cle" cas particulier de D_A_C_S
    IF p_nomTable ='DIC_ADM_CONTRAT_SITU' THEN
      coldatecle :='DSDSC';
      coldteffet :='a.DSDSC';
      cles       :=cles||'||''#''||to_char(a.DSDSC,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF p_TABLETYPE='H2' AND p_nomTable ='DIC_PERIODES_RECUEIL_HIS' THEN
      clwhereDate :=clwhereDate||' and to_char(a.'||coldatecle||',''yyyymm'')='''||p_periode||'''';
      END IF;
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable in ('DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_SITU') THEN
      --pour D_A_C et D_A_C_S on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
        	IF coldatecle is not null THEN
        		clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,greatest(a.'||coldatecle||','||coldteffet||') as dteffet,'||coldtfin;
        	ELSE
          		clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
          	END IF;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        if w_mpe='C' THEN 
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, PAIEZAD, DATE_EFF) AS ( SELECT DACH2.PACMAT, DACH2.PAIEZAD , MAX(DATE_EFF) ';
        ELSE
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        END IF;
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        if w_mpe='C' THEN 
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') GROUP BY DACH2.NUMPAC, DACH2.PACMAT, DACH2.PAIEZAD ) ';
        ELSE
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        END IF;
        if w_mpe='C' THEN
        clfrom       :=clfrom||'SELECT DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACS.PAIEZAD, MIN(DACS.DSDSC) DSDSC,MIN(C.DSDCN) DSDCN , MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        ELSE
        clfrom       :=clfrom||'SELECT DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACS.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        END IF;
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        if w_mpe='C' THEN
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND DACH.PACMAT = T.PACMAT AND DACH.PAIEZAD = T.PAIEZAD AND DACH.DATE_EFF = T.DATE_EFF AND C.NUMCNT = DACS.NUMCNT AND DACS.PACMAT = T.PACMAT AND DACS.PAIEZAD = T.PAIEZAD AND DACS.PAIEZAD = DACH.PAIEZAD ';
        ELSE
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        END IF;
        if w_mpe='C' and p_nomTable ='DIC_ADM_CONTRAT' THEN
         --jointure forcée entre DAC et DACS pour les situations contractuelles
          clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, DACS.PAIEZAD )) d WHERE d.dsdsc between a.dsdcn AND nvl(a.dsfcn,to_date(''20991231'',''yyyymmdd'')) AND ';
        ELSE
			--SEUNA2-17301 Cas des dictionnaires historisés.
			IF coldteffet='a.DATE_EFF' THEN
			   clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, DACS.PAIEZAD )) d WHERE  a.DATE_EFF < d.date_sortie_sit_bo and 1=1 and nvl(a.DATE_FIN,to_date(''20991231'',''yyyymmdd'')) >= d.dsdcn  and ';    
			ELSE
			   clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, DACS.PAIEZAD )) d WHERE  '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
			END IF;          
        END IF;
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';          
          if w_mpe='C' THEN 
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
          else
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';                   
          end if;

        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          if w_mpe='C' THEN 
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          else
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          end if;
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          if w_mpe='C' THEN 
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';          
          else
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          end if;
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup clause where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        END IF;
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            MatEcrit     :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            preclemati   :='#';
            preclematj   :='#';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                --constitution de la clé "matricule courant" partie GAP

                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab1cle :=chr(255);
              END IF;
              IF j        <= tab2.last THEN
                --constitution de la clé "matricule" courant partie PHOTO

                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab2cle :=chr(255);
              END IF;
              --Tables avec historiques comme D_A_C_H : la clé contient des dates d'effet donc il faut adapter l'appareillage
              IF coldteffet='a.DATE_EFF' THEN
                IF i <= tab1.last AND curclemati=MatARenvoyer THEN
                  --matricule déjà détecté en différence histo, on envoie tous les historiques. Les doublons sont éliminés automatiquement.
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif j <= tab2.last AND curclematj=MatARenvoyer THEN
                  --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle < tab2cle and preclemati<>curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et c'était le 1er histo du matricule : création
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle < tab2cle AND preclemati=curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent.
                  IF difference_col( tab1(i) , tab1(i-1) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent (j) et histo gap courant (i)
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle AND preclemati<>curclematj THEN
                  --ligne gap supprimée et c'était le 1er histo du matricule : il faut forcer les valeurs à blanc sur cette date perdue.
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle > tab2cle AND preclemati=curclematj THEN
                  --ligne gap supprimée et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent avec la photo.
                  i :=i-1;
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent et histo photo courant (date d'effet=photo)
                    tab1(i).DTEFFET :=tab2(j).DTEFFET ;
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité tab1cle=tab2cle (pacmat + paiezad + date d'effet)
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              ELSE
                --Tables sans historiques comme DIC_ENFANTS ou DIC_ADM_PERSO
                IF tab1cle < tab2cle THEN
                  --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i    :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle THEN
                  --ligne supprimée car i épuisé ou clé i plus grande que clé j
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  CLOB;
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Début Rétro id_trt= '||p_id_trt);
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt||', pReq '||pReq);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO-- Erreur partition ID_'||p_id_trt);
    END ;
    
    --Insertion dans DIF_FSED_MODIF_RETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);
    pReq := 'INSERT INTO DIF_FSED_MODIF_RETRO SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') ';
 	pReq := pReq ||' AND  f.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1 )';
 	pReq := pReq ||' UNION  SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') '; 
 	pReq := pReq ||' AND  exists (select 1 from dif_fsed t where t.numpac ='''||p_numpac||''' and t.id_trt ='''||p_id_trt||''' AND t.codeop=''C'' and t.ELEM =''A001'' and f.numpac = t.numpac AND f.id_trt = t.id_trt and f.paiezad=t.paiezad and f.pacmat=t.pacmat ) ';
 	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début remplissage DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt||', pReq '||pReq);
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- FIN insertion DIF_FSED_MODIF_RETRO-- CALCUL DE STATISTIQUES: ID_'||p_id_trt);
	DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED_MODIF_RETRO',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4, partname => 'ID_'||p_id_trt||'');    
    --Insertion dans GAP_TRT_MOIS_RETRO
    pReq := ' insert into GAP_TRT_MOIS_RETRO (id_trt,numpac,pacmat,PERIODE_RETRO)';
    pReq := pReq ||' WITH grm AS (SELECT pacmat,periode_retro FROM gap_retro_matric    g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    pReq := pReq ||'     ,gsr AS (SELECT pacmat,periode_retro FROM gap_selection_retro g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    --                 min_periode_retro : plus vieille rétro par matricule
    pReq := pReq ||' ,min_periode_retro (pacmat,min_periode) AS (';
    pReq := pReq ||' SELECT pacmat,MIN(periode_retro) FROM';
    pReq := pReq ||' (          SELECT pacmat,periode_retro FROM grm';
    pReq := pReq ||'  UNION ALL SELECT pacmat,periode_retro FROM gsr ) GROUP BY pacmat) ';
    --                 histo_retro : historique des mois où on a fait de la rétro *et* sur quels mois
    pReq := pReq ||' ,histo_retro AS (SELECT DISTINCT pacmat,periode,to_char(dteffet,''yyyymm'') as periode_retro FROM dif_fsed_histo h WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = h.numpac AND gtlm.pacmat = h.pacmat) ';
    pReq := pReq ||'       AND periode>='''||w_MIN_RETRO||''' AND to_char(dteffet,''yyyymm'')<periode';
    pReq := pReq ||'       AND  h.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1) )';
    --                 liste_mois_retro_pacmat : liste exhaustive des mois rétro par matricule (mois rétro paie en cours + mois rétro dans l'historique)
    pReq := pReq ||' ,liste_mois_retro_pacmat (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro      FROM grm';
    pReq := pReq ||' UNION ALL SELECT pacmat,periode_retro      FROM gsr';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode_retro FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode_retro>=mpr.min_periode)';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode       FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode      >=mpr.min_periode))';
    --                SELECT principal
    pReq := pReq ||' SELECT DISTINCT '||p_id_trt||','''||p_numpac||''',pacmat,periode_retro FROM liste_mois_retro_pacmat';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => SYS_CONTEXT('USERENV', 'SESSION_SCHEMA'), TABNAME => 'GAP_TRT_MOIS_RETRO', METHOD_OPT => 'FOR ALL COLUMNS SIZE 254', ESTIMATE_PERCENT => 100, CASCADE => TRUE, DEGREE => 4);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt);
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    --Insertion dans DIF_FSED_PARTIERETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion LISTE_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO LISTE_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro) select id_trt,numpac,pacmat,periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro) AS ( ';
	pReq := pReq ||'       SELECT '''||p_id_trt||''',numpac,pacmat,periode_retro FROM gap_trt_mois_retro WHERE numpac = '''||p_numpac||''' AND id_trt = '''||p_id_trt||''') ';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro from liste_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete LISTE_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion TRANCHES_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO TRANCHES_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH tranches_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) AS ( ';
	pReq := pReq ||' SELECT '''||p_id_trt||''',lmr.numpac,lmr.pacmat,lmr.periode_retro,NVL((SELECT to_char(add_months(to_date(MAX(lmr2.periode_retro),''yyyymm''),1),''yyyymm'') FROM liste_mois_retro lmr2 WHERE lmr2.numpac = lmr.numpac and lmr2.pacmat=lmr.pacmat AND lmr2.periode_retro<lmr.periode_retro),'''||w_MIN_RETRO||''') FROM liste_mois_retro lmr where lmr.id_trt = '''||p_id_trt||''')';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from tranches_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete TRANCHES_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO DIF_FSED_PARTIERETRO ';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_envoi_systematique(elem) AS( ';
	pReq := pReq ||' SELECT ELEMENT FROM TGE_REF_MAPDO WHERE ''*''= decode (numpac,'''||p_numpac||''',''*'',numpac) AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O'' )';
	--SELECT1 DIF_FSED_MODIF_RETRO
	pReq := pReq ||' SELECT '''||p_id_trt||''', tmr.periode_retro AS periode, m.numpac, m.cle, m.pacmat, m.paiezad, m.elem, m.occ, m.valeur, m.codeop, m.type_donnee, m.dteffet ';
	pReq := pReq ||' FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' and m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat ';
	pReq := pReq ||' AND  ( ' ;
	pReq := pReq ||' greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||' OR  substr(m.elem,0,1)>''W'' OR Exists (select * from liste_envoi_systematique les  where m.elem=les.elem ) ';
	pReq := pReq ||' ) ' ;
	--SELECT2 DIF_FSED_HISTO sauf les lignes déjà présentes dans DIF_FSED_MODIF_RETRO
	pReq := pReq ||' UNION ALL SELECT '''||p_id_trt||''', h.periode, h.numpac, h.cle, h.pacmat, h.paiezad, h.elem, h.occ, h.valeur, h.codeop, h.type_donnee, h.dteffet ';
	pReq := pReq ||' FROM dif_fsed_histo h, liste_mois_retro lmr ';
	pReq := pReq ||' WHERE h.numpac = '''||p_numpac||''' AND lmr.id_trt = '''||p_id_trt||''' AND h.numpac = lmr.numpac and h.pacmat=lmr.pacmat AND periode>='''||w_MIN_RETRO||''' AND h.periode=lmr.periode_retro  ';
	pReq := pReq ||' AND  substr(h.elem,0,1)<''W'' AND NOT Exists (select * from liste_envoi_systematique les  where h.elem=les.elem ) ';
	pReq := pReq ||' AND NOT EXISTS  (SELECT 1 FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||'   AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') <= h.periode';
	pReq := pReq ||'   AND m.numpac = h.numpac and m.pacmat = h.pacmat AND m.paiezad = h.paiezad AND m.elem = h.elem AND m.occ = h.occ )';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Fin Rétro id_trt= '||p_id_trt);
	END IF;
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
  v_existVRREP number :=0 ;
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    select count(*) into v_existVRREP from TGE_REF_VRREP where TGE_REF_VRREP.NUMERO_DE_PAC=elt_tab_11R.NUMERO_DE_PAC and TGE_REF_VRREP.CODE_TABLE=elt_tab_11R.CODE_TABLE;
	if(v_existVRREP=0) then
	tab_11R.extend;
	tab_11R(tab_11R.last)            :=elt_tab_11R;
	end if ;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;
wLibRUB            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  wLibRUB := REPLACE(pLibRUB,'£','#');
  select ( (LENGTH(wLibRUB) - LENGTH(REPLACE(wLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (wLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(wLibRUB) Loop 
      if substr(wLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(wLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));
  elt_tab_15.CSCP        		 := trim(SUBSTR(lig.donnees,164,1));
   IF LENGTH(lig.donnees)>240 THEN
 elt_tab_15.TEXTE_EXPLICATIF    := trim(SUBSTR(lig.donnees,241,400));
 ELSE elt_tab_15.TEXTE_EXPLICATIF  := '' ;
 END IF ;

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%'  and elt_tab_15.LIBRUB not like '%£%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      elt_tab_17DMF.CSCP    		:= trim(SUBSTR(lig.donnees,137,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' OR w_type_retour='RT' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT ';
  stmtClause :=stmtClause||'/*+  BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$291F8F59" "DACH2"@"SEL$3") LEADING(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550" "T"@"SEL$2" "A"@"SEL$2") INDEX(@"SEL$B29E968D" "A"@"SEL$2" ("DIC_ADM_CONTRAT_HISTO"."NUMPAC" "DIC_ADM_CONTRAT_HISTO"."PAIEZAD" "DIC_ADM_CONTRAT_HISTO"."DATE_EFF")) BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$B29E968D" "T"@"SEL$2") NO_ACCESS(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550") BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$5" "F"@"SEL$5") USE_HASH(@"SEL$4FDF941B" "HISTO"@"SEL$1") LEADING(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4") UNNEST(@"SEL$3") */ ';
  stmtClause :=stmtClause||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT  MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT /*+ LEADING(@"SEL$C19C7BAF" "TGE"@"SEL$3" "A"@"SEL$2" "TGE_FSED_30_TEMPORARY"@"SEL$6" "CONT"@"SEL$2" "D"@"SEL$5")*/'||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null ,
tge.numpac,
tge.pacmat,
tge.PAIEZAD,
tge.MATRICULE,
tge.DATE_EFFET 
FROM TGE_IMPORT_FSED_30 TGE 

WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            reqTrace :=null;
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
            IF w_table = 'DIC_TGE_RESPAIE_UNIQUE' THEN
              R_PRESENT_FICHIER_PAIE( w_numpac , null );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
 IF reqTrace is not null then
    FSED_ERREUR(p_id , 'Trace SYS_TRC_MODIF ',p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
 END IF;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
    W_IS_T1_LIKE_DECIDIUM SYS_VARSYS.VALVAR%TYPE;
    w_DSDSC DIC_ADM_CONTRAT_SITU.DSDSC%TYPE;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  --T1 LIKE DECIDECIDIUM 
  BEGIN 
  SELECT upper(NVL(VALVAR,'FALSE'))
  INTO W_IS_T1_LIKE_DECIDIUM
  FROM SYS_VARSYS 
  WHERE codvar='IS_T1_LIKE_DECIDIUM'
  AND MODULE='GTA';
  Exception 
   WHEN OTHERS THEN 
   W_IS_T1_LIKE_DECIDIUM :='FALSE';
    FSED_AVANCEMENT(p_id,'Warning : la varsys IS_T1_LIKE_DECIDIUM n existe pas ');
  END;
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        END IF; 
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateFin ;
        END IF;

        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric,DSDSC
          INTO w_matric,w_DSDSC
          FROM DIC_ADM_CONTRAT_SITU
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='TRUE' THEN 
        w_dateDed := w_periode ;
        END IF;
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed,w_DSDSC,w_unit);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    ELSE 
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF; 
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
   IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
    ELSE 
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  MERGE CAD_MATRIC_DATEVALID');
    merge INTO
    (SELECT MATRICULE,CODE_COMPTEUR,DATE_EFFET,UNITE_TENUE,DATE_DEB_PER,DATE_FIN_PER ,
    DATE_FIN_ACQUIS,DATE_DEB_ACQUIS,MAJ_CONTRAT,VISUHOUJ FROM CAD_MATRIC_DATEVALID ) a
    USING
    (SELECT distinct i.Matricule , i.Code_Compteur,
    to_char(i.DATE_DEBUT,'YYYYMMDD') as DATE_DEB , i.unite FROM TABLE(tab_DATEVALID) i ) b
    ON (a.Matricule =b.Matricule AND a.Code_Compteur=b.Code_Compteur and a.DATE_EFFET=to_char(w_periode,'YYYYMMDD'))
    WHEN NOT matched THEN
    INSERT
    (a.Matricule,a.Code_Compteur,a.DATE_EFFET ,a.UNITE_TENUE,a.DATE_DEB_PER,a.DATE_FIN_PER ,
    a.DATE_FIN_ACQUIS,a.DATE_DEB_ACQUIS,a.MAJ_CONTRAT,a.VISUHOUJ
    --DATE_DEB_PER ,DATE_DEB_ACQUIS = DACS.DSDSC ,MAJ_CONTRAT =N  ,VISUHOUJ ='H' si unite ='H' sinon 'J'
     ) VALUES
     (b.Matricule,b.Code_Compteur,to_char(w_periode,'YYYYMMDD'),b.unite,b.DATE_DEB,'21991231','21991231',b.DATE_DEB,'N',decode(b.unite, 'H', 'H', 'J')
    )
    when matched then
    UPDATE set a.UNITE_TENUE =b.unite ,a.DATE_DEB_PER =b.DATE_DEB ,a.DATE_FIN_PER='21991231' ,
    a.DATE_FIN_ACQUIS='21991231',a.DATE_DEB_ACQUIS=b.DATE_DEB,a.MAJ_CONTRAT='N',a.VISUHOUJ=decode(b.unite, 'H', 'H', 'J');
  END IF;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
     --DSH : Les VR mises à jour et non encore envoyé à zadig(code_gestionnaire ='G' and temoin_vr_base = O: Valeurs modifiées non envoyées ou K : Echec du dernier envoi des valeurs ou E : en cours d'envoi ) ne doivent pas être supprimés
 	DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac and (code_gestionnaire <>'G' or ( code_gestionnaire ='G' and temoin_vr_base <>'O' and temoin_vr_base <>'K' and temoin_vr_base <>'E') );
    
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 
 OR( carte_00 =false and (tab_11V IS NOT NULL OR tab_11R IS NOT NULL  OR tab_11D IS NOT NULL OR tab_11D1 IS NOT NULL 
 OR tab_15 IS NOT NULL OR tab_15_lib IS NOT NULL OR tab_17CR IS NOT NULL OR tab_17DMF IS NOT NULL))
THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
ADM_ADD_PAGE_IN_SCHEMA
=SQL=
create or replace PROCEDURE ADM_ADD_PAGE_IN_SCHEMA( p_code_schema             IN NUMBER,
 p_lib_1                   IN VARCHAR2,
 p_lib_2                   IN VARCHAR2,
 p_lib_3                   IN VARCHAR2,
 p_lib_4                   IN VARCHAR2,
 p_lib_99                  IN VARCHAR2,
 p_nom_page                IN VARCHAR2,
 p_description             IN VARCHAR2,
 code_langue               IN VARCHAR2,
 p_code_role               IN NUMBER DEFAULT NULL)
 
 IS
 p_obj_application         SCH_ELEMENT;
 p_obj_regroupement        SCH_ELEMENT;
 p_obj_theme               SCH_ELEMENT;
 p_obj_classeur            SCH_ELEMENT;
 p_obj_sujet               SCH_ELEMENT;
 
 
 BEGIN
 IF ((p_lib_1 IS NULL) OR (p_lib_2 IS NULL) OR (p_lib_3 IS NULL) OR (p_lib_4 IS NULL) OR (p_lib_99 IS NULL) OR (p_nom_page IS NULL)) THEN
 RAISE_APPLICATION_ERROR(-20001, 'Paramètre(s) invalide(s)');
 END IF;
 
 IF (ADM_PAGE_EXIST_IN_SCHEMA(p_nom_page, p_code_schema) != 0) THEN
 RAISE_APPLICATION_ERROR(-20001, 'La page est déjà présente dans ce schéma');
 END IF;
 
 p_obj_application := ADM_ADD_SCH_APPLICATION(p_code_schema, p_lib_1,p_description, code_langue);
 p_obj_regroupement := ADM_ADD_SCH_REGROUPEMENT(p_code_schema, p_lib_1, p_lib_2, p_obj_application,p_description, p_code_role, code_langue);
 p_obj_theme := ADM_ADD_SCH_THEME(p_code_schema, p_lib_1, p_lib_2, p_lib_3, p_obj_regroupement,p_description, code_langue);
 p_obj_classeur := ADM_ADD_SCH_CLASSEUR(p_code_schema, p_lib_1, p_lib_2, p_lib_3, p_lib_4, p_obj_theme,p_description, code_langue);
 p_obj_sujet := ADM_ADD_SCH_SUJET(p_code_schema, p_lib_1, p_lib_2, p_lib_3, p_lib_4, p_lib_99, p_nom_page, p_obj_classeur,p_description, code_langue);
 
 END ADM_ADD_PAGE_IN_SCHEMA;
##
TAG_CHARSET=@éèç
##
BUILD_INDEX
=SQL=
create or replace PROCEDURE "BUILD_INDEX"(
    p_codts IN std_struc_arbre.codts%TYPE,
    p_dateEff IN std_struc_arbre.date_eff%TYPE, -- Calcul à partir d'une date précise ou calcul de toutes les dates si null (19010101)
    p_cid IN std_struc_index.cid%TYPE default null) -- Le cid peut être null car la procédure peut être appelé par le service client ADP Link
AS
  /**
   * Procédure de mise à jour des données d'une structure dans la table STD_STRUC_INDEX
   * Si p_dateEff n'est pas vide le calcul se fait à partir de la date d'effet
   * sinon le calcul se fait à partir du début (19010101).
   * Le codTs -99 correspond au lancement d'un traitement de défragmentation sur la table
   */

  v_cid std_struc_index.cid%TYPE;
  
  TYPE tcur IS REF CURSOR;
  tabCodtsDate tcur;

  v_lgnReqCodts std_struc_arbre.codts%TYPE;
  v_lgnReqDateEff std_struc_arbre.date_eff%TYPE;
  v_lgnReqDateFin std_struc_arbre.date_fin%TYPE;
  v_codTs99     INTEGER :=NULL;
  v_codTsLock   INTEGER := NULL;
  v_dateEff     VARCHAR2(8);
  v_dateFinBefore VARCHAR2(8);
  v_dateFinAfter  VARCHAR2(8);
  req           VARCHAR2(200);
  retour        INTEGER;
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
  
  BEGIN
	  
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramêtre pCid est obligatoire
  	RAISE_APPLICATION_ERROR(-20000, 'Le cid n''est pas passé en paramètre et on est en mode multiclient.');
  END IF;
	  
  -- Récupération si un traitement de "défragmentation" a été lancé (codTs = -99)
  BEGIN
    SELECT codTs
    INTO v_codTs99
    FROM build_index_lock
    WHERE codTs = -99 AND codTs_lock > 0;
  EXCEPTION
    -- Pas du tout de ligne pour le codTs -99
    WHEN NO_DATA_FOUND THEN
      v_codTs99 := NULL;
  END;
  
  -- Récupération si une structure est déjà lockée
  BEGIN
    SELECT codTs_lock, date_eff
    INTO v_codTsLock, v_dateEff
    FROM build_index_lock
    WHERE codTs = p_codts;
  EXCEPTION
    -- La structure n'a pas encore été initialisée dans la table
  WHEN NO_DATA_FOUND THEN
    v_codTsLock := NULL;
    v_dateEff := NULL;
  END; 
  
  IF (v_codTsLock IS NOT NULL AND v_codTsLock > 0) OR (v_codTs99 IS NOT NULL) THEN
    -- La structure est lockée ou un traitement de défragmentation a été lancé
    IF p_codTs <> -99 THEN
      -- On met à jour le lock de la structure 
      -- (sauf pour le traitement de défragmentation qui n'a pas besoin d'être relancé plusieurs fois à la suite)
      req := 'UPDATE build_index_lock SET codTs_lock = '||(v_codTsLock + 1);
      IF v_dateEff IS NULL OR v_dateEff > p_dateEff THEN
        -- On met à jour la date que si celle si est plus petite que la précédente
        req := req||', date_eff = '||p_dateEff;
      END IF;
      req := req||' WHERE codTs = '||p_codTs;
    
      EXECUTE_IMMEDIATE_STRING(req,0);
      COMMIT;
    END IF;
  ELSE
    -- La structure n'est pas lockée, on commence par locker la structure et ensuite on lance le build
    IF v_codTsLock IS NULL THEN
      -- Insertion d'un ligne pour locker la structure
      INSERT INTO build_index_lock (codTs, codTs_lock, date_eff)
      VALUES(p_codTs, 1, null);
    ELSE
      -- Modification de la ligne existante pour locker la structure (on laisse à vide la date d'effet)
      UPDATE build_index_lock
      SET codTs_lock = 1
      WHERE codTs = p_codTs;
    END IF;
    COMMIT; -- Commite de l'insert/update du lock

    v_dateFinBefore := NULL;
    v_dateFinAfter := NULL;

    IF p_dateEff IS NOT NULL THEN
      -- On récupère la date de fin de l'historique qu'on va mettre à jour
      BEGIN
        SELECT date_fin
        INTO v_dateFinBefore
        FROM std_struc_index
        WHERE cid = v_cid and codTs = p_codts and date_eff = p_dateEff and rownum = 1;
      EXCEPTION
        -- L'historique n'existe pas
        WHEN NO_DATA_FOUND THEN
          v_dateFinBefore := NULL;
      END;
    END IF; 

    -- Suppression des lignes qui vont être recalculées 
    -- (pour éviter la fragmentation, un traitement périodique lance régulièrement un truncate de la table)
    DELETE FROM std_struc_index WHERE cid = v_cid and codts = p_codts
    AND date_eff >= nvl(p_dateEff, '19010101');
     
    -- Lancement du build dans la table STD_STRUC_INDEX
    OPEN tabCodtsDate 
      FOR SELECT codts,
        date_eff,
        NVL(lead(date_fin, 1) over(partition BY codts order by date_eff),'20991231' ) AS date_fin
      FROM
        ( SELECT DISTINCT codts,
          date_eff ,
          TO_CHAR(to_date(date_eff,'yyyymmdd')-1,'yyyymmdd') date_fin
        FROM std_struc_arbre
        WHERE cid = v_cid  
          AND codts = p_codts
          AND date_eff >= nvl(p_dateEff, '19010101')
        ORDER BY codts, date_eff
        )
      ORDER BY date_eff, date_fin;
    LOOP
      FETCH tabCodtsDate INTO v_lgnReqCodts, v_lgnReqDateEff, v_lgnReqDateFin;
      EXIT
    WHEN tabCodtsDate%NOTFOUND ;
      DBMS_OUTPUT.PUT_LINE(v_cid||' :' ||p_codts||' :' ||v_lgnReqDateEff|| ' : '||v_lgnReqDateFin);
      retour := BUILD_TABLE_INDEX(v_cid, p_codts, v_lgnReqDateEff, v_lgnReqDateFin) ;
    END LOOP;
    CLOSE tabCodtsDate;

    IF p_dateEff IS NOT NULL THEN
      -- On récupère la date de fin de l'historique qu'on a mis à jour
      BEGIN
        SELECT date_fin
        INTO v_dateFinAfter
        FROM std_struc_index
        WHERE cid = v_cid and codTs = p_codts and date_eff = p_dateEff and rownum = 1;
      EXCEPTION
        -- L'historique n'existe plus
        WHEN NO_DATA_FOUND THEN
          v_dateFinAfter := NULL;
      END;
      
      IF v_dateFinBefore IS NULL AND v_dateFinAfter IS NOT NULL THEN
        -- L'historique a été créé : on met à jour la date précédente pour positionner la date de fin à J-1 du nouvel historique
        UPDATE STD_STRUC_INDEX I1 SET DATE_FIN=TO_CHAR(TO_DATE(p_dateEff,'yyyymmdd')-1,'yyyymmdd') WHERE CID = v_cid and CODTS=p_codts AND NOT DATE_EFF=p_dateEff AND DATE_FIN=v_dateFinAfter;
      ELSIF v_dateFinBefore IS NOT NULL AND v_dateFinAfter IS NULL THEN
        -- L'historique a été supprimé : on met à jour la date précédente pour positionner la date de fin à la date de fin de l'historique supprimé
        UPDATE STD_STRUC_INDEX I1 SET DATE_FIN=v_dateFinBefore WHERE CID = v_cid and CODTS=p_codts AND DATE_FIN=TO_CHAR(TO_DATE(p_dateEff,'yyyymmdd')-1,'yyyymmdd');
      END IF;
    END IF; 

    -- Après le build des index, on vérifie que d'autres build n'ont pas voulu être lancé (dte not null)
    SELECT codTs_lock, date_eff
    INTO v_codTsLock, v_dateEff
    FROM build_index_lock
    WHERE codTs = p_codts;
    
    -- On délock la structure    
    UPDATE build_index_lock SET codTs_lock = 0, date_eff = NULL WHERE codTs = p_codTs;     
    
    -- On commite
    COMMIT;
    
     -- Si la structure avait plus que 1 lock alors on relance la procédure
    IF v_codTsLock > 1 THEN
      BUILD_INDEX(p_codTs, v_dateEff, v_cid);
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  -- Tracer l'erreur
   ERR_CODE := SQLCODE;
   ERR_MSG  := SQLERRM;
   INSERT INTO SYS_TRC_ERR VALUES (CURRENT_TIMESTAMP,ERR_CODE||'  MESSAGE='||ERR_MSG,'BUILD_INDEX p_cid='||p_cid||' p_codts='||p_codts||' p_dateEff = '||p_dateEff,'PL_SQL');
  -- Une exception a été lancé, on déclock la structure
  UPDATE build_index_lock 
  SET codTs_lock = 0,
  date_eff = NULL
  WHERE codTs = p_codTs;
  COMMIT;
END BUILD_INDEX;
##
TAG_CHARSET=@éèç
##
HRORG_MAJ_AFFEC_HERITE_ENT
=SQL=
create or replace
PROCEDURE HRORG_MAJ_AFFEC_HERITE_ENT(
 p_codts               NUMBER,
 p_matric              VARCHAR2,
 p_code_entite         VARCHAR2,
 p_date_eff            VARCHAR2,
 p_date_fin            VARCHAR2,
 p_est_affec_principal VARCHAR2,
 p_cid   IN std_struc_entite.cid%TYPE default null)
 AS
 TYPE tcur
 IS
 REF
 CURSOR;
 c_struc_heritees tcur;
 c_entites_mere tcur;
 v_codts               NUMBER;
 v_niv_heritage        NUMBER;
 v_niv_entite          NUMBER;
 v_code_ent_mere       VARCHAR2(25);
 v_date_eff_mere       VARCHAR2(8);
 v_date_fin_mere       VARCHAR2(8);
 v_entite_mere_checked NUMBER;
 v_cid std_struc_entite.cid%TYPE;
 BEGIN
 	v_cid := p_cid;
   	IF (v_cid IS NULL) THEN
  		BEGIN
  			SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  		EXCEPTION
  		WHEN NO_DATA_FOUND THEN
  			v_cid := null;
  		END;
	END IF;
  	IF (v_cid IS NULL) THEN
  		-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  		RETURN;
  	END IF;
	 
	 
 v_entite_mere_checked:=0;
 IF (NOT p_code_entite ='@NON_AFFECTE@') THEN
 SELECT n.niveau
 INTO v_niv_entite
 FROM std_struc_entite e,
 std_struc_niv n
 WHERE
 e.cid = v_cid
 AND e.type_entite=n.type_entite
 AND e.code_entite  =p_code_entite
 AND n.codts        =p_codts
 AND p_date_eff BETWEEN e.date_eff AND e.date_fin
 AND p_date_eff BETWEEN n.date_eff AND n.date_fin;
 ELSE
 v_niv_entite:=NULL;
 END IF;
 OPEN c_struc_heritees FOR SELECT codts,
 hrorg_niv_mere_affec_heritage(codts, p_date_eff)
 AS
 niv_heritage FROM std_struc_type WHERE lien_codts=p_codts ORDER BY codts;
 LOOP
 FETCH c_struc_heritees INTO v_codts, v_niv_heritage;
 EXIT
 WHEN c_struc_heritees % NOTFOUND;
 IF (v_niv_heritage IS NOT NULL AND v_niv_heritage>0) THEN
 IF (p_code_entite ='@NON_AFFECTE@' OR (v_niv_entite IS NOT NULL AND v_niv_entite=v_niv_heritage)) THEN
 INSERT
 INTO STD_STRUC_AFFECTATION VALUES
 (
 p_matric,
 v_codts,
 p_date_eff,
 p_code_entite,
 p_date_fin,
 p_est_affec_principal
 );
 ELSE
 IF (v_entite_mere_checked=0 AND v_niv_entite IS NOT NULL AND v_niv_entite>v_niv_heritage) THEN
 OPEN c_entites_mere FOR SELECT code_ent_mere,
 date_eff,
 date_fin FROM std_struc_arbre WHERE cid = v_cid and codts=p_codts AND code_entite=p_code_entite AND date_eff<=p_date_fin AND date_fin>=p_date_eff AND code_ent_mere IS NOT NULL ORDER BY date_eff;
 LOOP
 FETCH c_entites_mere INTO v_code_ent_mere, v_date_eff_mere, v_date_fin_mere;
 EXIT
 WHEN c_entites_mere % NOTFOUND;
 IF (v_date_eff_mere<p_date_eff) THEN
 v_date_eff_mere :=p_date_eff;
 END IF;
 IF (v_date_fin_mere>p_date_fin) THEN
 v_date_fin_mere :=p_date_fin;
 END IF;
 HRORG_MAJ_AFFEC_HERITE_ENT(p_codts, p_matric, v_code_ent_mere, v_date_eff_mere, v_date_fin_mere, p_est_affec_principal, v_cid);
 v_entite_mere_checked:=1;
 END LOOP;
 CLOSE c_entites_mere;
 END IF;
 END IF;
 END IF;
 END LOOP;
 CLOSE c_struc_heritees;
 END HRORG_MAJ_AFFEC_HERITE_ENT;
##
TAG_CHARSET=@éèç
##
HRORG_MAJ_AFFEC_HERITE_STRUC
=SQL=
create or replace
PROCEDURE HRORG_MAJ_AFFEC_HERITE_STRUC(
 p_codts             NUMBER,
 p_matric            VARCHAR2,
 p_date_eff_heritage VARCHAR2,
 -- TODO VRI : ZEU FE, quand on gèrera il faudra remplacer par la table STD_STRUC_AFFECTATION 
 p_cid   IN std_struc_entite.cid%TYPE default null)
 AS
 TYPE tcur
 IS
 REF
 CURSOR;
 c_struc_heritees tcur;
 c_aff tcur;
 v_codts                 NUMBER;
 v_niv_heritage          NUMBER;
 aff_matric              VARCHAR2 (32);
 aff_code_entite         VARCHAR2 (25);
 aff_date_eff            VARCHAR2 (8);
 aff_date_fin            VARCHAR2 (8);
 aff_est_affec_principal VARCHAR2 (1);
 -- TODO VRI : ZEU FE, quand on gèrera il faudra remplacer par la table STD_STRUC_AFFECTATION
 v_cid std_struc_entite.cid%TYPE;
 exit_function           EXCEPTION;
 BEGIN
  
  v_cid := p_cid;
  IF (v_cid IS NULL) THEN
  	BEGIN
  		SELECT VALVAR INTO v_cid FROM SYS_VARSYS where CODVAR = 'NS_CLIENT_ID';
  	EXCEPTION
  	WHEN NO_DATA_FOUND THEN
  		v_cid := null;
  	END;
  END IF;
  IF (v_cid IS NULL) THEN
  	-- En mode multiclient, la varsys peut être null et le passage du paramètre pCid est obligatoire
  	RETURN;
  END IF;
	 
 OPEN c_struc_heritees FOR SELECT codts, hrorg_niv_mere_affec_heritage(codts, p_date_eff_heritage)
 AS
 niv_heritage FROM std_struc_type WHERE lien_codts=p_codts ORDER BY codts;
 LOOP
 FETCH c_struc_heritees INTO v_codts, v_niv_heritage;
 EXIT
 WHEN c_struc_heritees % NOTFOUND;
 IF (v_niv_heritage IS NOT NULL AND v_niv_heritage>0) THEN
 IF (p_matric     IS NULL) THEN
 DELETE FROM STD_STRUC_AFFECTATION WHERE codts=v_codts;
 ELSE
 DELETE FROM STD_STRUC_AFFECTATION WHERE codts=v_codts AND matric=p_matric;
 END IF;
 END IF;
 END LOOP;
 CLOSE c_struc_heritees;
 IF (p_matric IS NULL) THEN
 OPEN c_aff FOR SELECT matric,
 code_entite,
 date_eff,
 date_fin,
 -- TODO VRI : ZEU FE, ajouter v_cid dans le where
 est_affec_principal FROM std_struc_affectation WHERE codts=p_codts ORDER BY matric,
 date_eff;
 ELSE
 OPEN c_aff FOR SELECT matric,
 code_entite,
 date_eff,
 date_fin,
 -- TODO VRI : ZEU FE, ajouter v_cid dans le where
 est_affec_principal FROM std_struc_affectation WHERE codts=p_codts AND matric=p_matric ORDER BY date_eff;
 END IF;
 LOOP
 FETCH c_aff
 INTO aff_matric,
 aff_code_entite,
 aff_date_eff,
 aff_date_fin,
 aff_est_affec_principal;
 EXIT
 WHEN c_aff % NOTFOUND;
 -- Ici on utilise le CID passé en paramètre et pas celui qu'on pourrait récupérer dans la requête (de toute façon ce serait le même)
 HRORG_MAJ_AFFEC_HERITE_ENT(p_codts, aff_matric, aff_code_entite, aff_date_eff, aff_date_fin, aff_est_affec_principal, v_cid);
 END LOOP;
 CLOSE c_aff;
 OPEN c_struc_heritees FOR SELECT codts,
 hrorg_niv_mere_affec_heritage(codts, p_date_eff_heritage)
 AS
 niv_heritage FROM std_struc_type WHERE lien_codts=p_codts ORDER BY codts;
 LOOP
 FETCH c_struc_heritees INTO v_codts, v_niv_heritage;
 EXIT
 WHEN c_struc_heritees % NOTFOUND;
 IF (v_niv_heritage IS NOT NULL AND v_niv_heritage>0) THEN
 HRORG_MAJ_AFFEC_HERITE_STRUC(v_codts, p_matric, p_date_eff_heritage);
 END IF;
 END LOOP;
 END HRORG_MAJ_AFFEC_HERITE_STRUC;
##
TAG_CHARSET=@éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
  type PERIODE2 IS RECORD
 (
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE,
  NUMCNT DIC_ADM_CONTRAT_SITU.NUMCNT%TYPE,
  DATE_SORTIE_SIT_BO DIC_ADM_CONTRAT_HISTO.DATE_SORTIE_SIT_BO%TYPE,
  DATE_EFF VARCHAR2(10) );
 type PERIODE_TAB2 IS TABLE OF PERIODE2 INDEX BY BINARY_INTEGER;
 tab_retro2 PERIODE_TAB2;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  -- Pour les simulations de départ, on autorise le calcul des périodes de recueil pour un mois dans le futur
  IF( p_periode_paie     <= periode_paie_en_cours OR p_dosNumForSimu IS NOT NULL) THEN
    IF p_dosNumForSimu IS NOT NULL THEN
      periode_recalcul   := p_periode_paie;
    ELSIF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
 		IF w_pacmat IS NOT NULL THEN
 			req              := req||'AND NVL(R.PACMAT, P.PACMAT) = '''||w_pacmat||'''';
 		END IF;
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
		-- Le calcul des périodes de recueil doit lancer le calcul des HP, CALC_HP.principal, lorsqu'une modification est détectée sur la date de début ou de fin de génération HP. 
         TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL CALC_HP.principal');
         req              := 'WITH TPRP2  AS ( select NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS MOIS_PAIE , NVL(R.NUMPAC, P.NUMPAC) AS NUMPAC ,NVL(R.PACMAT, P.PACMAT) AS PACMAT,NVL(R.PAIEZAD, P.PAIEZAD) AS PAIEZAD ';
         req              := req||'from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
         req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P '; 
         req              := req||'ON R.NUMPAC = P.NUMPAC '; 
         req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
         req              := req||'AND R.PAIEZAD = P.PAIEZAD '; 
         req              := req||'AND R.PACMAT = P.PACMAT ';
         req              := req||'WHERE (P.MOIS_PAIE IS NULL ';
         req              := req||'OR R.MOIS_PAIE IS NULL ';
         req              := req||'OR P.DEBUT_PER_GENERATION_HP != R.DEBUT_PER_GENERATION_HP '; 
         req              := req||'OR P.FIN_PER_GENERATION_HP  != R.FIN_PER_GENERATION_HP)) ';
         req              := req||'select S.NUMPAC, S.PACMAT, TPRP2.MOIS_PAIE AS PERIODE, S.CODE_CHRONO , S.PAIEZAD , S.NUMCNT , H.DATE_SORTIE_SIT_BO , TO_CHAR( TO_DATE(TPRP2.MOIS_PAIE,''YYYYMM''),''DD/MM/YYYY'') AS DATE_EFF FROM TPRP2 ';
         req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
         req              := req||'ON S.NUMPAC = TPRP2.NUMPAC ';
         req              := req||'AND S.PAIEZAD = TPRP2.PAIEZAD ';
         req              := req||'AND S.PACMAT = TPRP2.PACMAT ';
         req              := req||'INNER JOIN ( SELECT DISTINCT ';
         req              := req||'TPRP2.MOIS_PAIE, ';
         req              := req||'dach_max_date_eff.numpac, ';
         req              := req||'dach_max_date_eff.paiezad, ';
         req              := req||'dach_max_date_eff.pacmat, ';
         req              := req||'MAX(dach_max_date_eff.date_eff) ';
         req              := req||'OVER(PARTITION BY dach_max_date_eff.numpac, dach_max_date_eff.paiezad, dach_max_date_eff.pacmat) AS date_eff ';
         req              := req||'FROM dic_adm_contrat_histo dach_max_date_eff ';
         req              := req||'INNER JOIN TPRP2  ON ';
         req              := req||'dach_max_date_eff.numpac = TPRP2.numpac ';
         req              := req||'AND dach_max_date_eff.paiezad = TPRP2.paiezad ';
         req              := req||'AND dach_max_date_eff.pacmat = TPRP2.pacmat ';
         req              := req||'WHERE dach_max_date_eff.date_eff <= last_day(to_date(TPRP2.MOIS_PAIE, ''YYYYMM'')) ';
         req              := req||') C on  ';
         req              := req||'C.NUMPAC = S.NUMPAC ';
         req              := req||'AND C.paiezad = S.paiezad ';
         req              := req||'AND C.PACMAT = S.PACMAT ';
         req              := req||'AND C.MOIS_PAIE = TPRP2.MOIS_PAIE ';
         req              := req||'INNER join DIC_ADM_CONTRAT_HISTO H  ';
         req              := req||'ON H.NUMPAC = S.NUMPAC ';
         req              := req||'AND H.PAIEZAD = S.PAIEZAD ';        
         req              := req||'AND H.PACMAT = S.PACMAT ';
         req              := req||'AND H.NUMCNT = S.NUMCNT ';
         req              := req||'AND H.DATE_EFF = C.date_eff ';
         req              := req||'AND H.ZA996 = ''Z'' ';
         req              := req||'WHERE  ';
         req              := req||'TPRP2.MOIS_PAIE >= ''' || periode_recalcul_deb || '''  ';
         req              := req||'AND TPRP2.NUMPAC = ''' || p_numpac || '''  ';
         IF w_pacmat IS NOT NULL THEN
           req              := req||'AND TPRP2.PACMAT = '''||w_pacmat||'''  ';
         END IF ;
         EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro2;
         IF tab_retro2.exists(1) THEN
           FOR i IN tab_retro2.first..tab_retro2.last  
           LOOP
             BEGIN
               TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro2(i).NUMPAC, tab_retro2(i).PACMAT, tab_retro2(i).PERIODE,  tab_retro2(i).CODE_CHRONO,  tab_retro2(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
             EXCEPTION
             WHEN OTHERS THEN
               TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PERIODE||''',  '''||tab_retro2(i).CODE_CHRONO||''',  '''||tab_retro2(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
             END;
             BEGIN
	           -- TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','CALC_HP.principal('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PERIODE||''',  '''||tab_retro2(i).CODE_CHRONO||''',  '''||tab_retro2(i).PAIEZAD||''','''||tab_retro2(i).DATE_SORTIE_SIT_BO||''','''||tab_retro2(i).DATE_EFF||''','''||tab_retro2(i).NUMCNT||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
               CALC_HP.principal(tab_retro2(i).NUMPAC, tab_retro2(i).PACMAT, tab_retro2(i).PAIEZAD,  tab_retro2(i).NUMCNT,  tab_retro2(i).DATE_EFF,  tab_retro2(i).DATE_SORTIE_SIT_BO, 'proc_TGE_ALIM_PERIODE_INDIV',1);
             EXCEPTION
             WHEN OTHERS THEN
               TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : CALC_HP.principal('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PAIEZAD||''',  '''||tab_retro2(i).NUMCNT||''',  '''||tab_retro2(i).DATE_EFF||''', '''||tab_retro2(i).DATE_SORTIE_SIT_BO||''', ''proc_TGE_ALIM_PERIODE_INDIV'',1) '||SQLCODE||' '||SQLERRM);
             END;
           END LOOP;
         END IF;	
		 EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPDATE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE pour forcer le passage dans le trigger et le recalcul de la colonne PERIODE avec la bonne valeur
		 -- On cible les incidents dont la colonne PERIODE ne correspond pas à la valeur qu'elle devrait avoir (MOIS_PAIE de TGE_PERIODE_RECUEIL_PAIEZAD pour la période de recueil incluant la DATE_EFFET de l'incident)
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE, TYPE_WRITER=''''R'''' ';
			req              := req|| ' WHERE ID IN ( ';
			req            	 := req|| '   select I.ID from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| '   INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| '   ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| '   AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| '   AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| '   WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			req            	 := req|| '   AND TO_CHAR(I.PERIODE, ''''YYYYMM'''') != P.MOIS_PAIE '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| '   AND P.PACMAT = '''''||w_pacmat||'''''  ';
			END IF;
			req            	 := req|| ' )  '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK : ''||SQL%ROWCOUNT||'' ligne(s) mise(s) à jour'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@éèç
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS 
/********************************************************************************
Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_MAL_RECYCLES)','Purge de la table GAP_TRT_MAL_RECYCLES pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_MAL_RECYCLES  WHERE NUMPAC = P_NUMPAC;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_DERNIER_ENVOI)','Purge de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_DERNIER_ENVOI  WHERE NUMPAC = P_NUMPAC;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_MAL_RECYCLES)','Remplissage de la table GAP_TRT_MAL_RECYCLES pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_MAL_RECYCLES select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from
 (SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 group by d.numpac,d.pacmat,d.paiezad);
 
 DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_MAL_RECYCLES',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_DERNIER_ENVOI)','Remplissage de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_DERNIER_ENVOI select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from
 (SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 group by d.numpac,d.pacmat,d.paiezad);
 
 DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_DERNIER_ENVOI',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION
 when others then
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND_RETRO WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 -- MCN : PERIODE_RECYCLAGE passe à 99 en début de Cloture et repasse à 0 à la fin, toute valeur entre 1 ( déclenché par le controle ) et 99 indicque que le matricule est en cours de traitement paie)
 update SECUPACMAT set PERIODE_RECYCLAGE=99 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Ajout photo_dic_adm_perso pour les mals recyclés '||P_NUMPAC);
 
 --SEUNA2-16226 : Ajout d'une PHOTO_ADM_PERSO pour les mals recyclés déjà envoyés en paie pour eviter d'envoyer une carte 29
 INSERT INTO PHOTO_DIC_ADM_PERSO (NUMPAC,PACMAT,MATRIC)
 SELECT DISTINCT M.NUMPAC,M.PACMAT,DAC.MATRIC 
 FROM TGE_SCHEMA_PRODUCTION A, GAP_TRT B, GAP_TRT_SUIVI C,
 GAP_TRT_LISTE_MAT M, DIC_ADM_CONTRAT DAC, GAP_RECYCL_MATRIC RM , DIC_ADM_CONTRAT_SITU DACS
 WHERE A.NUMPAC       =p_numpac
 AND A.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND A.NUMPAC         =B.NUMPAC
 AND A.MODELE         =B.MODELE
 AND A.NATURE         =B.NATURE
 AND B.ID_TRT         =C.ID_TRT
 AND C.STATUT        IN ('PA','EX','DEMSEA')
 AND NVL(C.CODE_RETOUR_ZPP,'00')='00'
 AND B.NUMERO_ECHANGE<>'0000'
 AND M.ID_TRT=B.ID_TRT
 AND M.NUMPAC=A.NUMPAC
 -- jointure sur dac pour récupérer le matric
 AND DAC.NUMPAC=M.NUMPAC
 AND DAC.PACMAT=M.PACMAT
 -- selectionne les mal recylcés 
 AND RM.NUMPAC=M.NUMPAC
 AND RM.PACMAT=M.PACMAT
 -- jointure avec DACS pour récupére le paiezad
 AND DAC.NUMPAC = DACS.NUMPAC
 AND DAC.PACMAT = DACS.PACMAT
 AND DAC.NUMCNT = DACS.NUMCNT
 -- qui n'ont pas de photo de dic_adm_perso
 AND DAC.MATRIC NOT IN (SELECT MATRIC FROM PHOTO_DIC_ADM_PERSO)
 -- Zadig n'a pas supprimé element A310 alimenté par le retour de paie correspondant a PRFPAI=A 
 AND NOT EXISTS( SELECT 1 FROM DIC_TGE_RESPAIE_UNIQUE DTRU WHERE DTRU.NUMPAC=DACS.NUMPAC AND DTRU.PAIEZAD=DACS.PAIEZAD 
 AND DTFPAI is not null and PRFPAI='A');
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b INNER JOIN DIC_ADM_CONTRAT_SITU d ON d.numpac =b.numpac AND d.pacmat =b.pacmat INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD t ON d.numpac  =t.numpac AND d.pacmat  =t.pacmat AND d.paiezad   =t.paiezad
 LEFT JOIN SECUPACMAT s ON t.NUMPAC = s.NUMPAC AND s.pacmat  =t.pacmat
 WHERE b.id_trt ='||p_id||' AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date(NVL( S.PREMIERE_PAIE, ''190101''),''YYYYMM''),to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 --R046
 update TGE_INCIDENTS_PAIE z
 set    z.ACTION_RETRO='H',z.ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >=greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 --THN
 --AND b.traite      IS NULL
 )
 AND z.date_maj<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='C',
 ACTION_RETRO_DATE =z.date_maj
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 --THN
 --AND b.traite      IS NULL
 )--- Pour les periodes<periodeencours on laisse l'action retro existante
 AND z.date_maj>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 ---R046
 update TGE_DONNEES_PAIE z
 set    z.ACTION_RETRO ='H',
 z.ACTION_RETRO_DATE =null
 where z.numpac=p_numpac
 and to_date(z.PERIODE,'YYYYMM')>=greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND to_date(z.PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 ---R046
 update TGE_DONNEES_PAIE z
 set    z.ACTION_RETRO ='C',
 z.ACTION_RETRO_DATE =to_date(z.date_maj,'yyyymmddHH24MI')
 where z.numpac=p_numpac
 AND to_date(z.PERIODE,'YYYYMM')=to_date(p_PERIODEENCOURS,'yyyymm')
 --- Pour les periodes<periodeencours on laisse l'action retro existante
 AND to_date(z.date_maj,'yyyymmddHH24MI')>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE z
 set    z.ACTION_RETRO ='H',
 z.ACTION_RETRO_DATE =null
 where z.numpac=p_numpac
 and to_date(z.PERIODE,'YYYYMM')>=greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND to_date(z.PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 
 update TGE_ELEMENTS_PAIE z
 set    z.ACTION_RETRO ='C',
 z.ACTION_RETRO_DATE =to_date(z.date_maj,'yyyymmddHH24MI')
 where z.numpac=p_numpac
 AND to_date(z.PERIODE,'YYYYMM')=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 
 
 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION<
 ( SELECT max (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 ) ;
 
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');
 
 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (  SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 
 
 IF p_histoIP='N' AND isRetro=0 THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<(SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 where z.numpac  =e.numpac
 AND   z.PAIEZAD =e.paiezad)
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 
 END IF;
 
 IF isRetro=0 THEN
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;
 
 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 
 WHERE z.numpac       =e.numpac
 AND  z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 END IF;
 
 if P_DEB_RETRO is null OR to_date(p_PERIODEENCOURS,'YYYYMM') < to_date(P_DEB_RETRO,'YYYYMM') then
 --Recalcul des période de recueil avec les photos de dach et dac avant de changer de mois, pour corriger les saisies tardives
 TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, p_PERIODEENCOURS, NULL, NULL, 'O');
 END IF;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS,isRetro);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
 --Historiser les periodes rétro max par pacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
 union all
 select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS)
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if isRetro=1 then
 
 BEGIN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV TGE_MODIF_PACMAT_RETRO) ','Sauvegarde de la table TGE_MODIF_PACMAT_RETRO avant purge' );
 
 w_req :='Create TABLE TGE_MODIF_PACMAT_RETRO_'||P_PERIODEENCOURS||' as select * from TGE_MODIF_PACMAT_RETRO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV TGE_MODIF_PACMAT_RETRO) ','la table TGE_MODIF_PACMAT_RETRO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 --R046 THN
 DELETE from TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and not exists(select 1 from GAP_TRT_MAL_RECYCLES e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat and z.DATE_MAJ>e.DATE_TRT) ;
 DELETE from GAP_RETRO_MATRIC z where z.numpac=p_numpac and not exists (select 1 from TGE_MODIF_PACMAT_RETRO e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;
 DELETE from GAP_SELECTION_RETRO z where  z.numpac=p_numpac   and not exists(select 1 from GAP_TRT_MAL_RECYCLES e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 --Fin R046
 --- Maj de la période pour les lignes non supprimée et mal recyclés
 --on duplique les lignes qui ont dépassé la limite rétro si c'est possible
 INSERT INTO TGE_MODIF_PACMAT_RETRO z select numpac,pacmat,GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat),table_maj,sysdate from TGE_MODIF_PACMAT_RETRO y where y.numpac=p_numpac and periode_retro < GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat)  and (numpac,pacmat,GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat),table_maj) not in (select x.numpac,x.pacmat,x.periode_retro,x.table_maj from TGE_MODIF_PACMAT_RETRO x where x.numpac= p_numpac );
 INSERT into GAP_RETRO_MATRIC (numpac,pacmat,periode_retro,min_code_chrono,paiezad_retro ) select numpac,pacmat,GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat),min_code_chrono ,paiezad_retro from gap_retro_matric y where y.numpac=p_numpac and periode_retro < GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat) and (numpac,pacmat,GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat),min_code_chrono ) not in (select numpac,pacmat,GET_DEB_HISTO_PACMAT(y.numpac,y.pacmat),min_code_chrono from gap_retro_matric x where x.numpac=p_numpac);
 INSERT INTO GAP_SELECTION_RETRO     (numpac,periode_paie,periode_retro,aoid,pacmat,date_maj) SELECT numpac,periode_paie,get_deb_histo_pacmat(y.numpac, y.pacmat),aoid,pacmat,sysdate FROM GAP_SELECTION_RETRO y WHERE y.numpac = p_numpac AND periode_retro < get_deb_histo_pacmat(y.numpac, y.pacmat) AND ( numpac,periode_paie,get_deb_histo_pacmat(y.numpac, y.pacmat),aoid,pacmat ) NOT IN ( SELECT numpac,periode_paie,periode_retro,aoid,pacmat FROM GAP_SELECTION_RETRO x WHERE x.numpac = p_numpac );
 
 --on supprime ensuite ce qui est hors période.
 DELETE TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and z.periode_retro < GET_DEB_HISTO_PACMAT(z.numpac,Z.pacmat) ;
 DELETE GAP_RETRO_MATRIC z where z.numpac=p_numpac and z.periode_retro < GET_DEB_HISTO_PACMAT(z.numpac,Z.pacmat) ;
 DELETE GAP_SELECTION_RETRO z where z.numpac=p_numpac and z.periode_retro < GET_DEB_HISTO_PACMAT(z.numpac,Z.pacmat) ;

 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insc Retro RELIQ)','Début d inscription retro des tables RELIQ_  pour le numpac : '||P_NUMPAC);
 tge_retro_inscription_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insc Retro RELIQ)','Fin d inscription retro des tables RELIQ_ pour le numpac : '||P_NUMPAC);
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
 
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- recalcul du flag SECUPACMAT.PRESENT_FICHIER_PAIE
 R_PRESENT_FICHIER_PAIE( p_numpac , null );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@éèç
##
TRG_TGE_DONNEES_PAIE
=SQL=
create or replace trigger trg_tge_donnees_paie FOR
  insert or
  update or
  delete on tge_donnees_paie COMPOUND TRIGGER
  
  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   number;
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  V_CODE_RUBRIQUE    varchar2(6);
  V_OPTION_RETRO     varchar2(1);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac       := nvl(:new.numpac, :old.numpac);
    v_paiezad      := nvl(:new.paiezad, :old.paiezad);
    
    BEGIN
	    SELECT t.pacmat,nvl(t.periode_recyclage,1),CODE_CHRONO
	    INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
	    from dic_adm_contrat_situ d, secupacmat t
	    where d.numpac = v_numpac 
	    and d.paiezad  = v_paiezad
	    and d.numpac   = t.numpac
	    and d.pacmat   = t.pacmat
	    and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
	EXCEPTION
 	WHEN OTHERS THEN
 		-- Trop souvent cette requête plante (surtout en environnement de dev, on catche l'erreur et on écrit une log)
 		trace_dbms_output( 'TRG_TGE_DONNEES_PAIE', 'Erreur avec le collaborateur : problème avec DIC_ADM_CONTRAT_SITU ou SECUPACMAT.');
 	END;
 	
 	-- S'il y a eu un souci avec la requête précédente, on n'exécute pas la suite
 	if v_pacmat is not null then
 	    if v_periode_recycl = 3 then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl >= 10 then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = 1 then
	      v_recycl            := 'N';
	      IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
	        select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
	      END IF;
	      IF DELETING THEN
	        date_test_recycl := :old.periode;
	      ELSE
	        date_test_recycl := :new.periode;
	      END IF;
	      if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
	        if inserting or deleting then
	          v_recycl := 'O';
	        elsif updating then
	          if :new.code_caisse            <> :old.code_caisse or (:new.code_caisse is not null and :old.code_caisse is null) or (:new.code_caisse is null and :old.code_caisse is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_imputation     <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_rubrique       <> :old.code_rubrique or (:new.code_rubrique is not null and :old.code_rubrique is null) or (:new.code_rubrique is null and :old.code_rubrique is not null) then
	            v_recycl                     := 'O';
	          elsif :new.date_deb_arret      <> :old.date_deb_arret or (:new.date_deb_arret is not null and :old.date_deb_arret is null) or (:new.date_deb_arret is null and :old.date_deb_arret is not null) then
	            v_recycl                     := 'O';
	          elsif :new.domaine_prcte       <> :old.domaine_prcte or (:new.domaine_prcte is not null and :old.domaine_prcte is null) or (:new.domaine_prcte is null and :old.domaine_prcte is not null) then
	            v_recycl                     := 'O';
	          elsif :new.montant             <> :old.montant or (:new.montant is not null and :old.montant is null) or (:new.montant is null and :old.montant is not null) then
	            v_recycl                     := 'O';
	          elsif :new.nombre              <> :old.nombre or (:new.nombre is not null and :old.nombre is null) or (:new.nombre is null and :old.nombre is not null) then
	            v_recycl                     := 'O';
	          elsif :new.no_sequence         <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
	            v_recycl                     := 'O';
	          elsif :new.origine             <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_affectation <> :old.periode_affectation or (:new.periode_affectation is not null and :old.periode_affectation is null) or (:new.periode_affectation is null and :old.periode_affectation is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_rattach_deb <> :old.periode_rattach_deb or (:new.periode_rattach_deb is not null and :old.periode_rattach_deb is null) or (:new.periode_rattach_deb is null and :old.periode_rattach_deb is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_rattach_fin <> :old.periode_rattach_fin or (:new.periode_rattach_fin is not null and :old.periode_rattach_fin is null) or (:new.periode_rattach_fin is null and :old.periode_rattach_fin is not null) then
	            v_recycl                     := 'O';
	          elsif :new.pourcentage         <> :old.pourcentage or (:new.pourcentage is not null and :old.pourcentage is null) or (:new.pourcentage is null and :old.pourcentage is not null) then
	            v_recycl                     := 'O';
	          elsif :new.sens                <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	            v_recycl                     := 'O';
	          elsif :new.taux                <> :old.taux or (:new.taux is not null and :old.taux is null) or (:new.taux is null and :old.taux is not null) then
	            v_recycl                     := 'O';
	          elsif :new.type_donnee         <> :old.type_donnee or (:new.type_donnee is not null and :old.type_donnee is null) or (:new.type_donnee is null and :old.type_donnee is not null) then
	            v_recycl                     := 'O';
	          elsif :new.type_traitement     <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode             <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_remplacement   <> :old.code_remplacement or (:new.code_remplacement is not null and :old.code_remplacement is null) or (:new.code_remplacement is null and :old.code_remplacement is not null) then
	            v_recycl                     := 'O';
	          elsif :new.action_retro        <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	            v_recycl                     := 'O';
	          end if;
	        end if;
	        if v_recycl = 'O' then
	          begin
	            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
	          when not matched then
	            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
	          exception
	          when others then 
	            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
	            --FIXME utiliser la procédure trace_dbms_output()
	            NULL;
	          end;
	        end if;
	      end if;
	    end if;
	    /** Test de mise en rétro **/
	    v_retro            := 'N';
	    if inserting or deleting then
	      v_retro := 'O';
	    elsif updating then
	      if :new.code_caisse            <> :old.code_caisse or (:new.code_caisse is not null and :old.code_caisse is null) or (:new.code_caisse is null and :old.code_caisse is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_imputation     <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_rubrique       <> :old.code_rubrique or (:new.code_rubrique is not null and :old.code_rubrique is null) or (:new.code_rubrique is null and :old.code_rubrique is not null) then
	        v_retro                     := 'O';
	      elsif :new.date_deb_arret      <> :old.date_deb_arret or (:new.date_deb_arret is not null and :old.date_deb_arret is null) or (:new.date_deb_arret is null and :old.date_deb_arret is not null) then
	        v_retro                     := 'O';
	      elsif :new.domaine_prcte       <> :old.domaine_prcte or (:new.domaine_prcte is not null and :old.domaine_prcte is null) or (:new.domaine_prcte is null and :old.domaine_prcte is not null) then
	        v_retro                     := 'O';
	      elsif :new.montant             <> :old.montant or (:new.montant is not null and :old.montant is null) or (:new.montant is null and :old.montant is not null) then
	        v_retro                     := 'O';
	      elsif :new.nombre              <> :old.nombre or (:new.nombre is not null and :old.nombre is null) or (:new.nombre is null and :old.nombre is not null) then
	        v_retro                     := 'O';
	      elsif :new.no_sequence         <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
	        v_retro                     := 'O';
	      elsif :new.origine             <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_affectation <> :old.periode_affectation or (:new.periode_affectation is not null and :old.periode_affectation is null) or (:new.periode_affectation is null and :old.periode_affectation is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_rattach_deb <> :old.periode_rattach_deb or (:new.periode_rattach_deb is not null and :old.periode_rattach_deb is null) or (:new.periode_rattach_deb is null and :old.periode_rattach_deb is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_rattach_fin <> :old.periode_rattach_fin or (:new.periode_rattach_fin is not null and :old.periode_rattach_fin is null) or (:new.periode_rattach_fin is null and :old.periode_rattach_fin is not null) then
	        v_retro                     := 'O';
	      elsif :new.pourcentage         <> :old.pourcentage or (:new.pourcentage is not null and :old.pourcentage is null) or (:new.pourcentage is null and :old.pourcentage is not null) then
	        v_retro                     := 'O';
	      elsif :new.sens                <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	        v_retro                     := 'O';
	      elsif :new.taux                <> :old.taux or (:new.taux is not null and :old.taux is null) or (:new.taux is null and :old.taux is not null) then
	        v_retro                     := 'O';
	      elsif :new.type_donnee         <> :old.type_donnee or (:new.type_donnee is not null and :old.type_donnee is null) or (:new.type_donnee is null and :old.type_donnee is not null) then
	        v_retro                     := 'O';
	      elsif :new.type_traitement     <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode             <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_remplacement   <> :old.code_remplacement or (:new.code_remplacement is not null and :old.code_remplacement is null) or (:new.code_remplacement is null and :old.code_remplacement is not null) then
	        v_retro                     := 'O';
	      elsif :new.action_retro        <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	        v_retro                     := 'O';
	      end if;
	    end if;
	    if v_retro = 'O' then
	      V_PERIODE := NVL(:NEW.PERIODE,:OLD.PERIODE);
	      V_CODE_RUBRIQUE := NVL(:OLD.CODE_RUBRIQUE,:NEW.CODE_RUBRIQUE);
	      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_DONNEES_PAIE', 'SELECT COUNT(*) FROM TGE_REF_RUBRIQUE WHERE TGE_REF_RUBRIQUE.CODERUB = '''||V_CODE_RUBRIQUE||''' AND NUMPAC = '''||V_NUMPAC||''' AND NVL(OPTION_RETRO,''N'') <> ''N''');
	    END IF;
	  /** Fin test de mise en rétro **/
	end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_donnees_paie;
##
TAG_CHARSET=@éèç
##
TRG_TGE_ELEMENTS_PAIE
=SQL=
create or replace trigger trg_tge_elements_paie FOR
  insert or
  update or
  delete on tge_elements_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   number;
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_CODE_ELEMENT     varchar2(4);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac       := nvl(:new.numpac, :old.numpac);
    v_paiezad      := nvl(:new.paiezad, :old.paiezad);
    
    BEGIN
	    SELECT t.pacmat,nvl(t.periode_recyclage,1),CODE_CHRONO
	    INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
	    from dic_adm_contrat_SITU d, secupacmat t
	    where d.numpac = v_numpac
	    and d.paiezad  = v_paiezad
	    and d.numpac   = t.numpac
	    and d.pacmat   = t.pacmat
	    and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
	EXCEPTION
	WHEN OTHERS THEN
		-- Trop souvent cette requête plante (surtout en environnement de dev, on catche l'erreur et on écrit une log)
	 	trace_dbms_output( 'TRG_TGE_ELEMENTS_PAIE', 'Erreur avec le collaborateur : problème avec DIC_ADM_CONTRAT_SITU ou SECUPACMAT.');
	END;
	
	-- S'il y a eu un souci avec la requête précédente, on n'exécute pas la suite
 	if v_pacmat is not null then
 	    if v_periode_recycl = 3 then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl >= 10 then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = 1 then
	      v_recycl            := 'N';
	      IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
	        select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
	      END IF;
	      IF DELETING THEN
	        date_test_recycl := :old.periode;
	      ELSE
	        date_test_recycl := :new.periode;
	      END IF;
	      if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
	        if inserting or deleting then
	          v_recycl := 'O';
	        elsif updating then
	          -- Les valeurs des colonnes clés ne peuvent pas être nulls 
	          if :new.code_element         <> :old.code_element then
	            v_recycl                   := 'O';
	          elsif :new.indicatif         <> :old.indicatif then
	            v_recycl                   := 'O';
	          elsif :new.origine           <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	            v_recycl                   := 'O';
	          elsif :new.sens              <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	            v_recycl                   := 'O';
	          elsif :new.type_traitement   <> :old.type_traitement then
	            v_recycl                   := 'O';
	          elsif :new.valeur            <> :old.valeur or (:new.valeur is not null and :old.valeur is null) or (:new.valeur is null and :old.valeur is not null) then
	            v_recycl                   := 'O';
	          elsif :new.periode           <> :old.periode then
	            v_recycl                   := 'O';
	          elsif :new.code_remplacement <> :old.code_remplacement then
	            v_recycl                   := 'O';
	          elsif :new.action_retro      <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	            v_recycl                   := 'O';
	          end if;
	        end if;
	        if v_recycl = 'O' then
	          begin
	            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
	          when not matched then
	            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
	          exception
	          when others then
	            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
	            --FIXME utiliser la procédure trace_dbms_output()
	            NULL;
	          end;
	        end if;
	      end if;
	    end if;
	    /** Test de mise en rétro **/
	    v_retro            := 'N';
	    if inserting or deleting then
	      v_retro := 'O';
	    elsif updating then
	      -- Les valeurs des colonnes clés ne peuvent pas être nulls 
	      if :new.code_element         <> :old.code_element then
	        v_retro                   := 'O';
	      elsif :new.indicatif         <> :old.indicatif then
	        v_retro                   := 'O';
	      elsif :new.origine           <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	        v_retro                   := 'O';
	      elsif :new.sens              <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	        v_retro                   := 'O';
	      elsif :new.type_traitement   <> :old.type_traitement then
	        v_retro                   := 'O';
	      elsif :new.valeur            <> :old.valeur or (:new.valeur is not null and :old.valeur is null) or (:new.valeur is null and :old.valeur is not null) then
	        v_retro                   := 'O';
	      elsif :new.periode           <> :old.periode then
	        v_retro                   := 'O';
	      elsif :new.code_remplacement <> :old.code_remplacement then
	        v_retro                   := 'O';
	      elsif :new.action_retro      <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	        v_retro                   := 'O';
	      end if;
	    end if;
	    if v_retro = 'O' then
	      V_PERIODE := NVL(:NEW.PERIODE,:OLD.PERIODE);
	      V_CODE_ELEMENT := NVL(:NEW.CODE_ELEMENT,:OLD.CODE_ELEMENT);
	      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_ELEMENTS_PAIE', 'SELECT COUNT(*) FROM TGE_REF_DICOZ WHERE TGE_REF_DICOZ.ELEMENT = '''||V_CODE_ELEMENT||''' AND NUMPAC = '''||V_NUMPAC||'''');
	    END IF;
	  /** Fin test de mise en rétro **/
	end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_elements_paie;
##
TRG_TGE_IMPUTATIONS
=SQL=
create or replace trigger trg_tge_imputations FOR
  insert or
  update or
  delete on tge_imputations COMPOUND TRIGGER

  type pacmats       is record (r_numpac varchar2(6), r_pacmat varchar2(8), r_periode_recycl number);
  type tab_pacmats   is table of pacmats index by binary_integer;
  tab                tab_pacmats;
  v_recycl           varchar2(1);
  v_periode_recycl   number;
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_bypass_trigger   number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac      := nvl(:new.numpac, :old.numpac);
    v_paiezad     := nvl(:new.paiezad, :old.paiezad);
    select t.numpac       as r_numpac,
      t.pacmat            as r_pacmat,
      t.periode_recyclage as r_periode_recycl bulk collect into tab
    from dic_adm_contrat_SITU d, secupacmat t
    where d.numpac = v_numpac
    and d.paiezad  = v_paiezad
    and d.numpac   = t.numpac
    and d.pacmat   = t.pacmat;
    if tab.exists(1) then
      for i in 1..tab.last
      loop
        v_pacmat           := tab(i).r_pacmat;
        v_periode_recycl   := nvl(tab(i).r_periode_recycl, 1);
 	    if v_periode_recycl = 3 then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl >= 10 then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = 1 then
          v_recycl            := 'N';
          IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
            select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
          END IF;
          IF DELETING THEN
            date_test_recycl := :old.periode;
          ELSE
            date_test_recycl := :new.periode;
          END IF;
          if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
            if inserting or deleting then
              v_recycl := 'O';
            elsif updating then
              if :new.imputation         <> :old.imputation or (:new.imputation is not null and :old.imputation is null) or (:new.imputation is null and :old.imputation is not null) then
                v_recycl                 := 'O';
              elsif :new.nb_unite        <> :old.nb_unite or (:new.nb_unite is not null and :old.nb_unite is null) or (:new.nb_unite is null and :old.nb_unite is not null) then
                v_recycl                 := 'O';
              elsif :new.no_sequence     <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
                v_recycl                 := 'O';
              elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
                v_recycl                 := 'O';
              elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
                v_recycl                 := 'O';
              elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
                v_recycl                 := 'O';
              end if;
            end if;
            if v_recycl = 'O' then
              begin
                merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
              when not matched then
                insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
              exception
              when others then
                --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
                --FIXME utiliser la procédure trace_dbms_output()
                NULL;
              end;
            end if;
          end if;
        end if;
      end loop;
    end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_imputations;
##
TAG_CHARSET=@éèç
##
TRG_TGE_INCIDENTS_PAIE
=SQL=
create or replace trigger trg_tge_incidents_paie FOR
  insert or
  update or
  delete on tge_incidents_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   number;
  v_numpac           varchar2(6);
  v_old_numpac       varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_old_paiezad      varchar2(8);
  v_date_effet       DATE; 
  v_periode_retro    VARCHAR2(6);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  dateFinRecueil DATE;
  --moisPaie  VARCHAR2(6);
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   DATE;
  date_effet_recycl   DATE;
  A520 VARCHAR2(32);
  A521 VARCHAR2(32);
  A523 VARCHAR2(32);
  activite VARCHAR2(32);
  etablissement VARCHAR2(32);
  categorie VARCHAR2(32);
  nomTablegxp VARCHAR2(32);
  requete CLOB;
  V_IS_T2           NUMBER;
  V_ORIGINE_CREATE  VARCHAR2(32);
  BEFORE STATEMENT IS BEGIN
    -- action de 'bypass' le trigger 
    select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;   
    v_old_numpac := 'X' ;
  END BEFORE STATEMENT;
BEFORE EACH ROW
IS
begin
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité
    v_numpac        := NVL(:new.numpac, :old.numpac);
    v_paiezad       := NVL(:new.paiezad, :old.paiezad);
    IF v_old_numpac != v_numpac THEN
     -- Récupération des info du pac    
     SELECT 
       PERIODEENCOURS,
       DEB_RETRO
     INTO
       V_PERIODEENCOURS,
       V_DEB_RETRO
     FROM TGE_REF_PAC
       WHERE NUMPAC = v_numpac; 
    end if;
    
    if deleting then
      v_type_writer := nvl(:old.type_writer, 'O');
    else
      v_type_writer := nvl(:new.type_writer, 'O');
      -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
      :new.type_writer := null;
    end if;

    if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
      --La colonne PERIODE_INIT ne peut pas être modifiée, elle doit contenir la valeur initiale de la colonne PERIODE (avant tout recalcul).
      IF INSERTING THEN
        :NEW.PERIODE_INIT := :NEW.PERIODE;
      ELSIF UPDATING THEN 
        :NEW.PERIODE_INIT := :OLD.PERIODE_INIT;
      END IF;
    
      if INSERTING or UPDATING then
        BEGIN
          IF NVL(:new.code_ip, :old.code_ip) != 'HP'  AND V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
            v_date_effet    := NVL(:new.date_effet, :old.date_effet);
            V_ORIGINE_CREATE := NVL(:new.ORIGINE_CREATE, :old.ORIGINE_CREATE);
            SELECT COUNT(*) INTO V_IS_T2 
            FROM DIC_ADM_CONTRAT_HISTO 
            WHERE V_ORIGINE_CREATE = 'BATCH' 
            AND NUMPAC = v_numpac 
            AND PAIEZAD = v_paiezad 
            AND ZA996 = 'A' 
            AND v_date_effet BETWEEN DATE_EFF AND DATE_SORTIE_SIT_BO;
            
            IF  V_IS_T2 = 0 THEN 
              SELECT MIN(MOIS_PAIE) 
              INTO v_periode_retro
              FROM TGE_PERIODE_RECUEIL_PAIEZAD
              WHERE numpac = v_numpac
              AND paiezad  = v_paiezad
              AND v_date_effet BETWEEN DEBUT_PERIODE_RECUEIL AND FIN_PERIODE_RECUEIL;
              
              IF v_periode_retro IS NOT NULL THEN
                :new.periode     := TO_DATE(v_periode_retro || 01, 'yyyyMMdd');
              END IF;
            END IF;
          END IF;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            -- Période de recueil non trouvé
            null;
        END;
      END IF;
  
      BEGIN
        SELECT t.pacmat,nvl(t.periode_recyclage,1),CODE_CHRONO
        INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
        from dic_adm_contrat_SITU d, secupacmat t
        where d.numpac = v_numpac
        and d.paiezad  = v_paiezad
        and d.numpac   = t.numpac
        and d.pacmat   = t.pacmat
        and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
      END;
 	    if v_periode_recycl = 3 then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl >= 10 then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = 1 then
        /** Test de mise en recyclage **/
        v_recycl            := 'N';
        --Période de recueil individuelle
        --select periodeencours into moisPaie from tge_ref_pac where numpac = v_numpac;
        BEGIN
          --Période de recueil individuelle
          SELECT FIN_PERIODE_RECUEIL INTO dateFinRecueil from tge_periode_recueil_paiezad where numpac=v_numpac 
          and MOIS_PAIE=V_PERIODEENCOURS and paiezad=v_paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          dateFinRecueil:=null;
        END;
        --Période de recueil génèrique
        if(dateFinRecueil  is null) then  
          if v_old_numpac  !=  v_numpac OR ( v_old_numpac  =  v_numpac AND A520 is null  and A521 is  null and A523  is null) THEN 
            SELECT tablegxp ,
              A520_DONNEE ,
              A521_DONNEE ,
              A523_DONNEE into 
            nomTablegxp,A520,A521,A523
            FROM
            (
            SELECT DISTINCT c.element,
              c.tablegxp,
              c.DONNEEGXP
            FROM tge_ref_mapdo c
            WHERE C.numpac = v_numpac
            AND c.element IN ('A520','A521', 'A523')
            UNION ALL
            SELECT DISTINCT c.element,
              c.tablegxp,
              c.DONNEEGXP
            FROM tge_ref_mapdo c
            WHERE C.numpac                  ='*'
            AND c.element                  IN ('A520','A521', 'A523')
            AND (c.TABLEGXP,c.ELEMENT) NOT IN
            (SELECT a.TABLEGXP,
              a.element
            FROM tge_ref_mapdo a
            WHERE a.numpac = v_numpac
            AND A.ELEMENT IN ('A520','A521', 'A523')
            )
            ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN('A520' AS A520,'A521' AS A521, 'A523' AS A523));
          end if; 
          if( A520 is  not null  and A521 is not null and A523  is not null) then
            requete:='select '||A520|| ','||A521||','||A523||'  from '||nomTablegxp||' d '; 
            requete:=requete || ' where numpac='''||v_numpac||''' and paiezad='''|| v_paiezad  || ''' and pacmat='''||v_pacmat||''''; 
            if( nomTablegxp='DIC_ADM_CONTRAT_HISTO') then
              requete:=requete || ' and sysdate BETWEEN date_eff and date_fin_bo AND rownum=1';
            end if;
            BEGIN
              EXECUTE IMMEDIATE requete into activite,etablissement,categorie;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              dateFinRecueil:=null;
            END;
          end if;
          if(activite is not null and etablissement is not null and categorie is not null) then
            BEGIN
              select 
                max(to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8),'DDMMYYYY')) into  dateFinRecueil
              from tge_ref_vrval   
              WHERE numero_de_pac = v_numpac 
              AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = to_char(to_date(V_PERIODEENCOURS,'YYYYMM'),'MMYYYY') 
              AND CODE_TABLE = 'LTP'  
              AND IS_BETWEEN_NLS_FRENCH(LPAD(activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = 'TRUE' 
              AND IS_BETWEEN_NLS_FRENCH(LPAD(etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = 'TRUE' 
              AND IS_BETWEEN_NLS_FRENCH(LPAD(categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = 'TRUE' ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                dateFinRecueil:=null;
            END;
          end if;
        end if;
        if (dateFinRecueil is null) then
          select LAST_DAY( to_date(V_PERIODEENCOURS,'YYYYMM') ) into dateFinRecueil from dual;
        end if;
        IF DELETING THEN
          date_test_recycl := :old.periode;
          date_effet_recycl :=:old.date_effet;
        ELSE
          date_test_recycl := :new.periode;
          IF updating THEN
            date_effet_recycl :=LEAST(:new.date_effet,:old.date_effet);
          ELSE
            date_effet_recycl :=:new.date_effet;
          END IF;
        END IF;
        IF  (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') > to_char(dateFinRecueil,'YYYYMMDD' ) ) THEN
          date_test_recycl := TO_DATE('20991231','yyyymmdd');
        END IF;
        if (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') <= to_char(dateFinRecueil,'YYYYMMDD' ) ) then
          if inserting or deleting then
            v_recycl := 'O';
          elsif updating then
            if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
              v_recycl                 := 'O';
            elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
              v_recycl                 := 'O';
            elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
              v_recycl                 := 'O';
            elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
              v_recycl                 := 'O';
            elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
              v_recycl                 := 'O';
            elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
              v_recycl                 := 'O';
            elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
              v_recycl                 := 'O';
            elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
              v_recycl                 := 'O';
            elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
              v_recycl                 := 'O';
            end if;
          end if;
          if v_recycl = 'O' then
            begin
              merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
            when not matched then
              insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
            exception
            when others then
              --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
              --FIXME utiliser la procédure trace_dbms_output()
              NULL;
            end;
          end if;
        end if;
      end if; /** Fin test de mise en recyclage **/
      -- Si TYPE_WRITER = 'R', on bypass la mise en rétro (le code appelant devra le faire lui-même si nécessaire)
      IF v_type_writer <> 'R' AND V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
        /** Test de mise en rétro **/
        v_retro            := 'N';
        if inserting or deleting then
          v_retro := 'O';
        elsif updating then
          -- Les valeurs des colonnes clés ne peuvent pas être nulls 
          if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
            v_retro                 := 'O';
          elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
            v_retro                 := 'O';
          elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
            v_retro                 := 'O';
          elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
            v_retro                 := 'O';
          elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
            v_retro                 := 'O';
          elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
            v_retro                 := 'O';
          elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
            v_retro                 := 'O';
          elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
            v_retro                 := 'O';
          elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
            v_retro                 := 'O';
          end if;
        end if;
        if v_retro = 'O' then
          V_PERIODE := TO_CHAR(NVL(:NEW.PERIODE,:OLD.PERIODE),'YYYYMM');
          TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_INCIDENTS_PAIE');
        END IF;
      END IF; /** Fin test de mise en rétro **/
    end if; /** Fin test v_type_writer <> N et M **/
    v_old_numpac  :=  v_numpac; 
  end if; /** Fin test v_bypass_trigger **/
END BEFORE EACH ROW;
end trg_tge_incidents_paie;
##
TAG_CHARSET=@éèç
##
T_SYS_USR_CID
==
create or replace TYPE T_SYS_USR_CID FORCE AS TABLE OF T_SYS_USR_CID_OBJ
##
TAG_CHARSET=@éèç
##
T_SYS_USR_CID_OBJ
==
create or replace TYPE T_SYS_USR_CID_OBJ FORCE AS OBJECT (LOGIN VARCHAR2(32), COMPANY_ID VARCHAR2(20))
##
TAG_CHARSET=@éèç
##
HRORG_SECU_GV
==
CREATE OR REPLACE FORCE VIEW "HRORG_SECU_GV" ("CODTS", "CODE_ENTITE", "DATE_EFF", "DATE_FIN", "LOGIN", "CID") AS   ( select a.codts, a.code_entite, a.date_eff, a.date_fin, gv.login, a.cid from std_struc_arbre a, sys_groupe_valideurs gv where a.groupe_valideurs=gv.groupe_valideurs  union all  select distinct a.codts, i.code_entite, i.date_eff, i.date_fin, gv.login, a.cid from std_struc_arbre a, std_struc_arbre_ratt_indirect i, sys_groupe_valideurs gv where a.groupe_valideurs=gv.groupe_valideurs and a.codts=i.codts and a.cid = i.cid and i.date_eff < a.date_fin and i.date_fin > a.date_eff and a.code_entite=i.code_ent_mere  ) 
##
STD_SITUATION_SALARIE_MAN
=SQL=
CREATE OR REPLACE FORCE VIEW STD_SITUATION_SALARIE_MAN ("MATRICULE", "NOM", "PRENOM", "TITRE", "INTITULE1", "VALEUR1", "INTITULE2", "VALEUR2", "INTITULE3", "VALEUR3", "INTITULE4", "VALEUR4", "INTITULE5", "VALEUR5", "INTITULE6", "VALEUR6", "INTITULE7", "VALEUR7", "INTITULE8", "VALEUR8", "INTITULE9", "VALEUR9", "INTITULE10", "VALEUR10", "INTITULE11", "VALEUR11", "INTITULE12", "VALEUR12", "INTITULE13", "VALEUR13")
AS
  (SELECT matric    AS matricule,
    nom             AS nom,
    prenom          AS prenom,
    titre           AS titre,
    'ETABLISSEMENT' AS intitule1,
    (SELECT LIBELLE_ENTITE AS libelle
    FROM std_struc_entite_view e
    WHERE e.CODE_ENTITE=CODETB
    )       AS valeur1,
    'NUM_SS' AS intitule2,
    SEXESS
    ||ANNESS
    ||MOISSS
    ||DEPTSS
    ||SECTSS
    ||ORDRSS
    ||CLCTSS                                            AS valeur2,
    'DATE_NAISSANCE'                                 AS intitule3,
    TO_CHAR (TO_DATE (dsnai, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur3,
    'DATE_ANCIENNETE_GROUPE'                         AS intitule4,
    TO_CHAR (TO_DATE (dsagp, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur4,
    'DATE_ANCIENNETE'                                AS intitule5,
    TO_CHAR (TO_DATE (dsato, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur5,
    'DEB_CNT'                          AS intitule6,
    TO_CHAR (TO_DATE (dsdcn, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur6,
    'FIN_CNT'                            AS intitule7,
    TO_CHAR (TO_DATE (dsfcn, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur7,
    'NAT_CNT'                                 AS intitule8,
	(SELECT libelle_long
	FROM GA_ZWNATURCNT
	WHERE GA_ZWNATURCNT.code_naturcnt = SECUMATRIC.ZT061
	)                 AS valeur8,
	'TYPE_CNT' AS intitule9,
	(SELECT max(libelle) FROM GA_ZWTYPCNT WHERE GA_ZWTYPCNT.code_type = SECUMATRIC.ZA700
	)        AS valeur9,

    'EMPLOI' AS intitule10,
    (SELECT LIBELLE
    FROM GA_FILIERE
    WHERE GA_FILIERE.FILIERE          =SECUMATRIC.FILIR
    AND GA_FILIERE.REGROUPEMENT_METIER=SECUMATRIC.SSFIL
    AND GA_FILIERE.METIER             =SECUMATRIC.METIER
    AND GA_FILIERE.QUALIFICATION      = SECUMATRIC.EMPLOI
     AND GA_FILIERE.NUMPAC      = SECUMATRIC.NUMPAC
    )                            AS valeur10,
    'CPN'                        AS intitule11,
    CODCPN                       AS valeur11,
    'AFFECTATION_ADMINISTRATIVE' AS intitule12,
    (SELECT LIBELLE_ENTITE AS libelle
    FROM std_struc_entite_view e
    WHERE e.CODE_ENTITE=AFFS02
    )                       AS valeur12,
    'TAUX_EMPLOI'        AS intitule13,
    TXACT
    ||'%' AS valeur13
  FROM SECUMATRIC
  )
##
STD_SITUATION_SALARIE_PAC
=SQL=
CREATE OR REPLACE FORCE VIEW  STD_SITUATION_SALARIE_PAC (NUMPAC, PACMAT, MATRICULE, NOM, PRENOM, TITRE, PRIORITE_SITUATION, INTITULE1, VALEUR1, INTITULE2, VALEUR2, INTITULE3, VALEUR3, INTITULE4, VALEUR4, INTITULE5, VALEUR5, INTITULE6, VALEUR6, INTITULE7, VALEUR7, INTITULE8, VALEUR8, INTITULE9, VALEUR9, INTITULE10, VALEUR10, INTITULE11, VALEUR11, INTITULE12, VALEUR12, INTITULE13, VALEUR13)
AS
  (SELECT numpac       AS numpac,
    pacmat             AS pacmat,
    matric             AS matricule,
    nom                AS nom,
    prenom             AS prenom,
    titre              AS titre,
    priorite_situation AS priorite_situation,
    'ETABLISSEMENT' AS intitule1,
    (SELECT LIBELLE_ENTITE AS libelle
    FROM std_struc_entite_view e
    WHERE e.CODE_ENTITE=CODETB
    )       AS valeur1,
    'NUM_SS' AS intitule2,
    SEXESS
    ||ANNESS
    ||MOISSS
    ||DEPTSS
    ||SECTSS
    ||ORDRSS
    ||CLCTSS                                            AS valeur2,
    'DATE_NAISSANCE'                                 AS intitule3,
    TO_CHAR (TO_DATE (dsnai, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur3,
    'DATE_ANCIENNETE_GROUPE'                         AS intitule4,
    TO_CHAR (TO_DATE (dsagp, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur4,
    'DATE_ANCIENNETE'                                AS intitule5,
    TO_CHAR (TO_DATE (dsato, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur5,
    'DEB_CNT'                          AS intitule6,
    TO_CHAR (TO_DATE (dsdcn, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur6,
    'FIN_CNT'                            AS intitule7,
    TO_CHAR (TO_DATE (dsfcn, 'yyyymmdd'), 'dd/mm/yyyy') AS valeur7,
    'NAT_CNT'                                 AS intitule8,
	(SELECT libelle_long
	FROM GA_ZWNATURCNT
	WHERE GA_ZWNATURCNT.code_naturcnt = SECUPACMAT.ZT061
	)                 AS valeur8,
	'TYPE_CNT' AS intitule9,
	(SELECT max(libelle) FROM GA_ZWTYPCNT WHERE GA_ZWTYPCNT.code_type = SECUPACMAT.ZA700
	)        AS valeur9,

    'EMPLOI' AS intitule10,
    (SELECT LIBELLE
    FROM GA_FILIERE
    WHERE GA_FILIERE.FILIERE          =SECUPACMAT.FILIR
    AND GA_FILIERE.REGROUPEMENT_METIER=SECUPACMAT.SSFIL
    AND GA_FILIERE.METIER             =SECUPACMAT.METIER
    AND GA_FILIERE.QUALIFICATION      = SECUPACMAT.EMPLOI
     AND GA_FILIERE.NUMPAC      = SECUPACMAT.NUMPAC
    )                            AS valeur10,
    'CPN'                        AS intitule11,
    CODCPN                       AS valeur11,
    'AFFECTATION_ADMINISTRATIVE' AS intitule12,
    (SELECT LIBELLE_ENTITE AS libelle
    FROM std_struc_entite_view e
    WHERE e.CODE_ENTITE=AFFS02
    )                       AS valeur12,
    'TAUX_EMPLOI'        AS intitule13,
    TXACT
    ||'%' AS valeur13
  FROM SECUPACMAT
  )
##
STD_SITUATION_SALARIE
=SQL=
CREATE OR REPLACE FORCE VIEW STD_SITUATION_SALARIE AS SELECT * FROM STD_SITUATION_SALARIE_PAC WHERE PRIORITE_SITUATION=0
##
STD_STRUCT_DATEAFFJURIDIQUE
=SQL=
CREATE OR REPLACE VIEW STD_STRUCT_DATEAFFJURIDIQUE
AS
  (SELECT matric,
    MIN(aff.date_eff) AS DTDEBSOCIETE,
    MAX(AFF.date_fin) AS DTFINSOCIETE,
    niv1
  FROM std_struc_affectation AFF,
    --  TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie STD_STRUC_AFFECTATION
    std_struc_index IDX
  WHERE last_entite = code_entite
  AND IDX.codts     = AFF.codts
  AND IDX.codts    IN
    (SELECT valvar
    FROM SYS_VARSYS
    WHERE module = 'GPC'
    AND codvar   = 'STRUCTURE_JUR'
    )
  AND AFF.date_eff BETWEEN idx.DATE_EFF AND IDX.DATE_FIN
  AND to_char(sysdate,'YYYYMMDD') between AFF.date_eff and AFF.date_fin
  GROUP BY matric,
    niv1
  )
##
STD_STRUC_AFFECTATION_ALLNIV
=SQL=
CREATE OR REPLACE FORCE VIEW STD_STRUC_AFFECTATION_ALLNIV (MATRIC, CODTS, DATE_EFF, CODE_ENTITE, DATE_FIN, TYPE_ENTITE, DATE_EFF_AFFECT_DIRECTE, CODE_ENTITE_AFFECT_DIRECTE, DATE_FIN_AFFECT_DIRECTE, TYPE_ENTITE_AFFECT_DIRECTE, EST_AFFEC_PRINCIPAL, PROFONDEUR, NIV_TECH) AS 
  WITH affectations (matric, codts, date_eff, code_entite, date_fin, type_entite, date_eff_affec, code_entite_affec, date_fin_affec, type_entite_affec, est_affec_principal, profondeur, niv_tech) AS
  (SELECT af.matric,
    af.codts,
    af.date_eff,
    af.code_entite,
    af.date_fin,
    (SELECT type_entite
    FROM std_struc_entite e
    WHERE e.code_entite=af.code_entite
    AND af.date_eff BETWEEN e.date_eff AND e.date_fin
    ),
    af.date_eff,
    af.code_entite,
    af.date_fin,
    (SELECT type_entite
    FROM std_struc_entite e
    WHERE e.code_entite=af.code_entite
    AND af.date_eff BETWEEN e.date_eff AND e.date_fin
    ),
    af.est_affec_principal,
    0 AS profondeur,
	(
	  SELECT NVL(idx.niv_tech, -1) 
	  FROM std_struc_index idx
	  WHERE 
        af.codts = idx.codts
        -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie STD_STRUC_AFFECTATION
        AND af.code_entite = idx.last_entite
        AND af.date_eff BETWEEN idx.date_eff AND idx.date_fin
    ) AS niv_tech 	
  FROM std_struc_affectation af
  UNION ALL
  SELECT af.matric,
    ar.codts,
    CASE
      WHEN ar.date_eff<af.date_eff
      THEN af.date_eff
      ELSE ar.date_eff
    END AS date_eff,
    ar.code_ent_mere,
    CASE
      WHEN ar.date_fin<af.date_fin
      THEN ar.date_fin
      ELSE af.date_fin
    END AS date_fin,
    (SELECT type_entite
    FROM std_struc_entite e
    WHERE e.code_entite=ar.code_ent_mere
    AND ar.date_eff BETWEEN e.date_eff AND e.date_fin
    ),
    af.date_eff_affec,
    af.code_entite_affec,
    af.date_fin_affec,
    af.type_entite_affec,
    af.est_affec_principal,
    profondeur+1,
	(
	  SELECT NVL(idx.niv_tech, -1) 
	  FROM std_struc_index idx
	  WHERE 
        ar.codts = idx.codts
        -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie STD_STRUC_AFFECTATION
	    AND ar.code_ent_mere = idx.last_entite
	    AND ar.date_eff BETWEEN idx.date_eff AND idx.date_fin
    ) AS niv_tech
  FROM affectations af,
    std_struc_arbre ar
  WHERE af.codts        =ar.codts
  AND af.code_entite    =ar.code_entite
  AND ar.date_eff      <=af.date_fin
  AND ar.date_fin      >=af.date_eff
  AND ar.code_ent_mere IS NOT NULL
  )
SELECT MATRIC,
  CODTS,
  DATE_EFF,
  CODE_ENTITE,
  DATE_FIN,
  TYPE_ENTITE,
  DATE_EFF_AFFEC,
  CODE_ENTITE_AFFEC,
  DATE_FIN_AFFEC,
  TYPE_ENTITE_AFFEC,
  EST_AFFEC_PRINCIPAL,
  PROFONDEUR,
  NIV_TECH
FROM affectations
##
TAG_CHARSET=@éèç
##
STD_STRUC_ARBRE_RATT_INDIRECT
==
CREATE OR REPLACE FORCE VIEW "STD_STRUC_ARBRE_RATT_INDIRECT" ("CID", "CODE_ENTITE", "TYPE_ENTITE", "CODTS", "DATE_EFF", "CODE_ENT_MERE", "DATE_FIN", "TYPE_ENT_MERE", "DATE_EFF_RATT_DIRECTE", "CODE_ENTITE_RATT_DIRECTE", "DATE_FIN_RATT_DIRECTE", "TYPE_ENTITE_RATT_DIRECTE", "PROFONDEUR") AS   WITH rattachements (cid, code_entite, type_entite, codts, date_eff, code_ent_mere, date_fin, type_ent_mere, date_eff_ratt, code_entite_ratt, date_fin_ratt, type_entite_ratt, profondeur) AS (SELECT ar.cid, ar.code_entite,(SELECT type_entite FROM std_struc_entite e WHERE e.cid = ar.cid and e.code_entite=ar.code_entite AND ar.date_eff BETWEEN e.date_eff AND e.date_fin),ar.codts,ar.date_eff,ar.code_ent_mere,ar.date_fin,(SELECT type_entite FROM std_struc_entite e WHERE e.cid = ar.cid and e.code_entite=ar.code_ent_mere AND ar.date_eff BETWEEN e.date_eff AND e.date_fin),ar.date_eff,ar.code_ent_mere,ar.date_fin,(SELECT type_entite FROM std_struc_entite e WHERE e.cid = ar.cid and e.code_entite=ar.code_ent_mere AND ar.date_eff BETWEEN e.date_eff AND e.date_fin),0 AS profondeur FROM std_struc_arbre ar WHERE ar.statut='1' UNION ALL SELECT rat.cid, rat.code_entite,(SELECT type_entite FROM std_struc_entite e WHERE e.cid = rat.cid and e.code_entite=rat.code_entite AND rat.date_eff BETWEEN e.date_eff AND e.date_fin),rat.codts,CASE WHEN ar.date_eff<rat.date_eff THEN rat.date_eff ELSE ar.date_eff END AS date_eff,ar.code_ent_mere,CASE WHEN ar.date_fin<rat.date_fin THEN ar.date_fin ELSE rat.date_fin END AS date_fin,(SELECT type_entite FROM std_struc_entite e WHERE e.cid = ar.cid and e.code_entite=ar.code_ent_mere AND ar.date_eff BETWEEN e.date_eff AND e.date_fin),rat.date_eff_ratt,rat.code_entite_ratt,rat.date_fin_ratt,rat.type_entite_ratt,profondeur+1 FROM rattachements rat,std_struc_arbre ar WHERE rat.cid = ar.cid and rat.codts =ar.codts AND rat.code_ent_mere =ar.code_entite AND ar.date_eff <=rat.date_fin AND ar.date_fin >=rat.date_eff) SELECT CID, CODE_ENTITE,TYPE_ENTITE,CODTS,DATE_EFF,CODE_ENT_MERE,DATE_FIN,TYPE_ENT_MERE,DATE_EFF_RATT,CODE_ENTITE_RATT,DATE_FIN_RATT,TYPE_ENTITE_RATT,PROFONDEUR FROM rattachements
##
EDI_HISTO_LANCEMENTS
=SQL IFNOTEXIST=EDI_HISTO_LANCEMENTS=CLASSEMENT_BVRH=
ALTER TABLE  EDI_HISTO_LANCEMENTS ADD CLASSEMENT_BVRH VARCHAR2(7)
##
TAG_CHARSET=@éèç
##
GA_EDITIONS_GAP
=SQL IFNOTEXIST=GA_EDITIONS_GAP=CLASSEMENT_BVRH=
ALTER TABLE GA_EDITIONS_GAP ADD CLASSEMENT_BVRH  VARCHAR2(7)
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE = 'CHEMIN_BULLETIN_PAIE'
'*','CHEMIN_BULLETIN_PAIE','CHEMIN_BULLETIN_PAIE','DIC_DONNEES_VIRTUELLES','X','4000',NULL,NULL,NULL,NULL,'Z','O',NULL,'149',NULL,NULL,'O',NULL,'N',NULL,NULL,NULL
##
MP_DATA
==
DELETE FROM MP_DATA WHERE DATA_NAME_MP_ALP IN ('remoteWorkArrangementDiscussedWithManager','remoteWorkArrangementNeedOfficeSupplies','remoteWorkArrangementComment','remoteWorkArrangementEngagement','remoteWorkArrangementTypeCode','remoteWorkArrangementRequestID','remoteWorkArrangementStartDate','remoteWorkArrangementEndDate','remoteWorkArrangementMonday','remoteWorkArrangementMondayAM','remoteWorkArrangementMondayPM','remoteWorkArrangementTuesday','remoteWorkArrangementTuesdayAM','remoteWorkArrangementTuesdayPM','remoteWorkArrangementWednesday','remoteWorkArrangementWednesdayAM','remoteWorkArrangementWednesdayPM','remoteWorkArrangementThursday','remoteWorkArrangementThursdayAM','remoteWorkArrangementThursdayPM','remoteWorkArrangementFriday','remoteWorkArrangementFridayAM','remoteWorkArrangementFridayPM','remoteWorkArrangementSaturday','remoteWorkArrangementSaturdayAM','remoteWorkArrangementSaturdayPM','remoteWorkArrangementSunday','remoteWorkArrangementSundayAM','remoteWorkArrangementSundayPM')
'remoteWorkArrangementDiscussedWithManager',NULL
'remoteWorkArrangementNeedOfficeSupplies',NULL
'remoteWorkArrangementComment',NULL
'remoteWorkArrangementEngagement',NULL
'remoteWorkArrangementTypeCode',NULL
'remoteWorkArrangementRequestID',NULL
'remoteWorkArrangementStartDate',NULL
'remoteWorkArrangementEndDate',NULL
'remoteWorkArrangementMonday',NULL
'remoteWorkArrangementMondayAM',NULL
'remoteWorkArrangementMondayPM',NULL
'remoteWorkArrangementTuesday',NULL
'remoteWorkArrangementTuesdayAM',NULL
'remoteWorkArrangementTuesdayPM',NULL
'remoteWorkArrangementWednesday',NULL
'remoteWorkArrangementWednesdayAM',NULL
'remoteWorkArrangementWednesdayPM',NULL
'remoteWorkArrangementThursday',NULL
'remoteWorkArrangementThursdayAM',NULL
'remoteWorkArrangementThursdayPM',NULL
'remoteWorkArrangementFriday',NULL
'remoteWorkArrangementFridayAM',NULL
'remoteWorkArrangementFridayPM',NULL
'remoteWorkArrangementSaturday',NULL
'remoteWorkArrangementSaturdayAM',NULL
'remoteWorkArrangementSaturdayPM',NULL
'remoteWorkArrangementSunday',NULL
'remoteWorkArrangementSundayAM',NULL
'remoteWorkArrangementSundayPM',NULL
##
MP_REF_EVENTS
==
delete from MP_REF_EVENTS where EVENT in ('/hr/v1/workers/{aoid}/remote-work-arrangements')
'/hr/v1/workers/{aoid}/remote-work-arrangements',null,'Demande de Télétravail Contractuel','50160','Remote work arrangement request for the specified worker','O'
##
MP_REF_EVENTS
==
delete from MP_REF_EVENTS where EVENT in ('/events/hr/v1/worker.citizenship.change')
'/events/hr/v1/worker.citizenship.change',null,'Modification du pays de nationalité',null,'Employee - Modification du pays de nationalité',null
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE = 'CHEMIN_BULLETIN_PAIE'
'*','CHEMIN_BULLETIN_PAIE','CHEMIN_BULLETIN_PAIE','DIC_DONNEES_VIRTUELLES','X','4000',NULL,NULL,NULL,NULL,'Z','O',NULL,'149',NULL,NULL,'O',NULL,'N',NULL,NULL,NULL
##
STD_STRUC_ARBRE
=SQL IFNOTEXIST=STD_STRUC_ARBRE=CID=
alter table STD_STRUC_ARBRE add CID varchar2(32)
##
STD_STRUC_ARBRE
=SQL=
update STD_STRUC_ARBRE set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
STD_STRUC_ARBRE
=SQL=
alter table STD_STRUC_ARBRE drop primary key drop index
##
STD_STRUC_ARBRE
=SQL=
alter table STD_STRUC_ARBRE add constraint STD_STRUC_ARBRE_PK primary key (CODTS, CODE_ENTITE, DATE_EFF, CID)
##
TAG_CHARSET=@éèç
##
STD_STRUC_INDEX
=SQL IFNOTEXIST=STD_STRUC_INDEX=CID=
alter table STD_STRUC_INDEX add CID varchar2(32)
##
STD_STRUC_INDEX
=SQL=
update STD_STRUC_INDEX set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
STD_STRUC_INDEX
=SQL=
alter table STD_STRUC_INDEX drop primary key drop index
##
STD_STRUC_INDEX
=SQL=
alter table STD_STRUC_INDEX add constraint STD_STRUC_INDEX_PK primary key (CODTS, LAST_ENTITE, DATE_EFF, CID)
##
TAG_CHARSET=@éèç
##
STD_STRUC_INDEX_DEFRAG
=SQL IFNOTEXIST=STD_STRUC_INDEX_DEFRAG=CID=
alter table STD_STRUC_INDEX_DEFRAG add CID varchar2(32)
##
STD_STRUC_INDEX_DEFRAG
=SQL=
update STD_STRUC_INDEX_DEFRAG set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
SYS_ACCUEIL
=SQL IFNOTEXIST=SYS_ACCUEIL=COLUMN_FLEX=
alter table SYS_ACCUEIL ADD COLUMN_FLEX VARCHAR2(1) DEFAULT '1'
##
SYS_ACCUEIL
=SQL IFNOTEXIST=SYS_ACCUEIL=TOOLTIP=
alter table SYS_ACCUEIL ADD TOOLTIP VARCHAR2(255)
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR IN ('GENWK120','GENWK121','GENWK122','GENWK123','GENWK124','GENWK125')
'GENWK120','GEN','fr_fr','0','Les choix renouvellement de télétravail et fin de télétravail ne sont pas compatibles.','1'
'GENWK121','GEN','fr_fr','0','Un des deux choix renouvellement de télétravail ou fin de télétravail est obligatoire.','1'
'GENWK122','GEN','fr_fr','0','Pour une fin de TAD, la date d''effet doit obligatoirement être égale à la date de fin de TAD + 1 jour. Vous devez abandonner et recommencer le processus à la bonne date d''effet.','1'
'GENWK123','GEN','fr_fr','0','La date de fin de télétravail doit être comprise dans les dates du contrat.','1'
'GENWK124','GEN','fr_fr','0','La date de fin de télétravail saisie doit être supérieure à la date de début de télétravail et à la date de fin précédente.','1'
'GENWK125','GEN','fr_fr','0','Le nombre de jours de télétravail étant renseigné, vous devez sélectionner le(s) jour(s) ou 1/2 journée(s) de TAD.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'SYS' and CODLANG = 'fr_fr' and NIV_DEFINITION = 0 and CODERR IN ('MCLI0001')
'MCLI0001','SYS','fr_fr',0,'Impossible de trouver le cid pour le pac=#1 ou matric=#2 ou login=#3',1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR IN ('ADMPD231','ADMPD232','ADMPD233','ADMPD234','ADMPD235','ADMPD236','ADMPD237','ADMPD238','ADMPD239','ADMPD240')
'ADMPD231','ADM','fr_fr',0,'Vous devez sélectionner un projet.',1
'ADMPD232','ADM','fr_fr',0,'Etes-vous sûr de vouloir supprimer cette régle de gestion ?',3
'ADMPD233','ADM','fr_fr',0,'Cette régle n''existe pas dans le système.',1
'ADMPD234','ADM','fr_fr',0,'La régle #1 a bien été supprimée.',3
'ADMPD235','ADM','fr_fr',0,'Vous devez sélectionner une régle.',1
'ADMPD236','ADM','fr_fr',0,'La régle a été enregistrée avec succès',3
'ADMPD237','ADM','fr_fr',0,'Attention, le déverrouillage de l''onglet Tableau regénére le contenu de l''onglet Source : tout le formatage et les commentaires seront perdus. Continuer ?',3
'ADMPD238','ADM','fr_fr',0,'Attention, l''onglet Tableau va etre regénéré à partir de l''onglet Source : toutes les modifications effectuées dans cet onglet seront perdues. Continuer ?',3
'ADMPD239','ADM','fr_fr',0,'Erreur de conversion.',1
'ADMPD240','ADM','fr_fr',0,'Il y a #1 erreur(s) dans la regle.',1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR IN ('ADMPD208', 'ADMPD209','ADMPD210','ADMPD211','ADMPD212','ADMPD213','ADMPD214','ADMPD215','ADMPD216','ADMPD217')
'ADMPD208','ADM','fr_fr',0,'La suppression de l''écran a été effectuée avec succés.',3
'ADMPD209','ADM','fr_fr',0,'La validation de l''écran a été effectuée avec succés.',3
'ADMPD210','ADM','fr_fr',0,'Etes-vous sur de vouloir supprimer cet écran ?',3
'ADMPD211','ADM','fr_fr',0,'Attention, après suppression, en cas d''ajout d''un nouvel écran récapitulatif, le paramétrage de l''ergonomie de cet écran ne sera pas repris sur le nouveau. Il faut modifier cet écran pour conserver le paramétrage existant.',3
'ADMPD212','ADM','fr_fr',0,'Veuillez sélectionnez une opération.',3
'ADMPD213','ADM','fr_fr',0,'Le code retour du #1 est obligatoire si un libellé est saisi',1
'ADMPD214','ADM','fr_fr',0,'La mise à jour des écrans a été effectuée avec succés.',3
'ADMPD215','ADM','fr_fr',0,'Vous ne pouvez pas modifier l''ordre de cet écran.',1
'ADMPD216','ADM','fr_fr',0,'Veuillez sélectionner un groupe de données.',3
'ADMPD217','ADM','fr_fr',0,'Veuillez sélectionner une donnée.',3
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR IN ('ADMPD213', 'ADMPD214','ADMPD215','ADMPD216','ADMPD217','ADMPD218','ADMPD219','ADMPD220','ADMPD221','ADMPD222')
'ADMPD213','ADM','fr_fr',0,'La suppression de l''écran a été effectuée avec succés.',3
'ADMPD214','ADM','fr_fr',0,'La validation de l''écran a été effectuée avec succés.',3
'ADMPD215','ADM','fr_fr',0,'Etes-vous sur de vouloir supprimer cet écran ?',3
'ADMPD216','ADM','fr_fr',0,'Attention, après suppression, en cas d''ajout d''un nouvel écran récapitulatif, le paramétrage de l''ergonomie de cet écran ne sera pas repris sur le nouveau. Il faut modifier cet écran pour conserver le paramétrage existant.',3
'ADMPD217','ADM','fr_fr',0,'Veuillez sélectionnez une opération.',3
'ADMPD218','ADM','fr_fr',0,'Le code retour du #1 est obligatoire si un libellé est saisi',1
'ADMPD219','ADM','fr_fr',0,'La mise à jour des écrans a été effectuée avec succés.',3
'ADMPD220','ADM','fr_fr',0,'Vous ne pouvez pas modifier l''ordre de cet écran.',1
'ADMPD221','ADM','fr_fr',0,'Veuillez sélectionner un groupe de données.',3
'ADMPD222','ADM','fr_fr',0,'Veuillez sélectionner une donnée.',3
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR IN ('ADMPD223','ADMPD224','ADMPD225','ADMPD226','ADMPD227','ADMPD228','ADMPD229','ADMPD230')
'ADMPD223','ADM','fr_fr',0,'La #1 de l''écran a été effectuée avec succés.',3
'ADMPD224','ADM','fr_fr',0,'Veuillez sélectionner un écran.',3
'ADMPD225','ADM','fr_fr',0,'Veuillez sélectionner une régle de gestion.',3
'ADMPD226','ADM','fr_fr',0,'La #1 de l''écran a été effectuée avec succés.',3
'ADMPD227','ADM','fr_fr',0,'Le champ #1 est obligatoire.',1
'ADMPD228','ADM','fr_fr',0,'Pour le type d''écran #1, le champ #2 est obligatoire',1
'ADMPD229','ADM','fr_fr',0,'Pour le type d''écran #1 ou #2, le champ #3 est obligatoire',1
'ADMPD230','ADM','fr_fr',0,'Numéro d''opération absent',1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR ='ADMPD99'
'ADMPD99','HRO','fr_fr',0,'Veuillez sélectionner une régle d''affichage existante.',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00360')
'TGE00360', 'TGE', 'fr_fr', 0, 'Les modifications effectuées concernent l''élément #1 de la famille #2 qui participe à la rétroactivité. Veuillez vérifier si la date de profondeur de rétroactivité #3 (élément WG94) est toujours d''actualité pour ce dossier.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00361')
'TGE00361', 'TGE', 'fr_fr', 0, 'Les modifications effectuées concernent les éléments #1 de la famille #2 qui participent à la rétroactivité. Veuillez vérifier si la date de profondeur de rétroactivité #3 (élément WG94) est toujours d''actualité pour ce dossier.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00362')
'TGE00362', 'TGE', 'fr_fr', 0, 'Les modifications effectuées concernent les éléments #1 qui participent à la rétroactivité. Veuillez vérifier si les dates de profondeur de rétroactivité #3 (élément WG94) des familles #2  sont toujours d''actualité pour ce dossier.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'HRO' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR = 'HROENT19'
'HROENT19','HRO','fr_fr',0,'Le champ libre "#1" de l''entité ne peut excéder #2 caractères.',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'STD' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR = 'STD00032'
'STD00032','STD','fr_fr',0,'Vous ne pouvez pas saisir plus de #1 caractères.',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00360')
'TGE00360','TGE','fr_fr',0,'Voulez-vous que la pièce jointe #1 soit visible au collaborateur ?',1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'TGEST062' AND CODLANG = 'fr_fr' AND CODMOD ='GTA'
'TGEST062', 'GTA', 'fr_fr', '0', 'Attention, vous êtes sur le point de désabonner ce login à Gestil, tous ses accès pour tous les PAC (environnements) seront coupés.<br />Pour supprimer laccès à un PAC Gestil particulier, veuillez retirer le profil daccès à ce PAC uniquement.<br />Êtes-vous sûr de vouloir désabonner ce login à Gestil ?', '3'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00360')
'TGE00360','TGE','fr_fr',0,'Voulez-vous que la pièce jointe "#1" soit visible par le collaborateur ?',1
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.FichiersVisualisables.FichiersVisualisablesExpert' AND CODE_LANGUE = 'fr_fr' AND CODE_LIBELLE = 'btnResetFilter'
'Ext.adp.Moteur.FichiersVisualisables.FichiersVisualisablesExpert','fr_fr','btnResetFilter','Réinitialiser les filtres'
##
SYS_DEF_LIBELLE_ML
==
delete FROM SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageEcransExtjs' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('paramEcran_bridging_SlideinTitle','paramEcran_bridging_ButtonText')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageEcransExtjs','fr_fr', 'paramEcran_bridging_ButtonText','Paramétrer le bridging'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageEcransExtjs','fr_fr', 'paramEcran_bridging_SlideinTitle', 'Paramétrage du bridging de l''écran '
##
SYS_DEF_LIBELLE_ML
==
delete FROM SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('Slidein_bridging_no_zip','paramEcran_bridging_warn1','paramEcran_bridging_menu1','paramEcran_bridging_menu2','paramEcran_bridging_menu3','paramEcran_bridging_menu4','paramEcran_bridging_menu5','paramEcran_bridging_menu6','Slidein_bridging_help_libel','Slidein_bridging_no_ref','Slidein_bridging_link_type1','Slidein_bridging_content_footer','Slidein_bridging_link_type_code','Slidein_bridging_content_title','Slidein_bridging_embedded_data','Slidein_bridging_content_subtitle')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_content_title', 'Libellé'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_embedded_data', 'Description'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_content_subtitle', 'Icône'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_link_type_code', 'Point de menu MonADP'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_content_footer', 'Libellé du bouton'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_link_type1', 'accueil'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_no_ref', 'Vous devez mettre au produit avant de paramétrer le Bridging.'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_help_libel', 'Ce champs provient du paramétrage de l''écran après mise au produit.'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu1','accueil'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu2','temps'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu3','profil'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu4','entreprise'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_warn1','Les paramètres de bridging seront opérationnels dans les autres environnements dès le prochain livrable, indépendamment du projet en cours.'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'Slidein_bridging_no_zip', 'Vous devez d''abord générer un livrable avant de paramétrer le Bridging.'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu5','paie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutBridging','fr_fr', 'paramEcran_bridging_menu6','équipe'
##
SYS_DEF_LIBELLE_ML
==
delete FROM SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.ObjetsComplementairesALivrerSlide' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('GestionLivrable.schema')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.ObjetsComplementairesALivrerSlide','fr_fr', 'GestionLivrable.schema','Schéma et bridging'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide' AND CODE_LANGUE='fr_fr'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.toutWkfs','Tous les workflows' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.multiWkfs','Un ou plusieurs workflows' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.choixEcrans','Veuillez choisir un ou plusieurs écrans.' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.num','N°' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.toutEcrans','Tous les écrans' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.multiEcrans','Un ou plusieurs écrans' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.selectionWkfs','Sélection des workflows' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.choixWkfs','Veuillez choisir un ou plusieurs workflows.' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.selectionEcrans','Sélection des écrans' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide','fr_fr', 'GenerationEcransDASlide.nomPage','Nom page' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.CreationModifLivrableSlide' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'GestionLivrable.ecransAGenerer' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.CreationModifLivrableSlide','fr_fr', 'GestionLivrable.ecransAGenerer','Ecrans/Workflows des dossiers d''analyse à générer.' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE IN ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideCreationDictionnaire', 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDictionnairesExtjs') AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE='dictionnaire.extensionDach'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDictionnairesExtjs','fr_fr', 'dictionnaire.extensionDach', 'Extension DACH'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideCreationDictionnaire','fr_fr', 'dictionnaire.extensionDach', 'Extension DACH'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.CreationModifLivrableSlide' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'GestionLivrable.ecransAGenerer' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.CreationModifLivrableSlide','fr_fr', 'GestionLivrable.ecransAGenerer','Ecrans/Workflows des dossiers d''analyse à générer' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'valeurLigneColonne' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'valeurLigneColonne','(Zéro ''0'' permet de gérer la valeur automatiquement)'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'CmbProcessus',' Processus'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'CmbOperation',' Opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'BtnAjouterEcran','Ajouter un écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'OngletEcransOperation','Ecrans de l''opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'OngletParametresOperation','Paramètres de l''opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'ColOrdre','Ordre'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'ColTypeEcran','Type d''écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'ColDetail','Détail'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'GridTitle','Tableau des écrans de l''opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'VisuTab','Visualiser le tableau de présentation'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'RecapComparatif','Récapitulatif comparatif'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'slideAjoutEcran_titre','Ajouter un écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'MsgModifDonnees','Cette opération est en cours de modification dans le cadre du projet '
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'listeDonneesFin','Liste des données à écrire à la fin de l''opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'SIMULATION_DE_PAIE','Simulation de paie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'BLOQUE_VALID_SI_AUCUNE_MODIF','Bloquer la validation si aucune donnée n''a été modifiée'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'BtnAbondonnerSupprimerTitre','Bouton "Abandonner / Supprimer"' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'btnComplementInfoTitre','Bouton "Complément d''''information"' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'masquerSupp','Masquer' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'codeRetour','Code retour' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'btnRenvoyerDossier','Bouton "Renvoyer le dossier"' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'paramBtnStandardsTitle','Paramétrer les boutons standards' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'afficherComplementInfo','Afficher' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'btnValiderTitre','Bouton "Valider"' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'libelleComplementInfo','Libellé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'DonneeCommSupprimer','Donnée commentaire' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'BtnPauseTitre','Bouton "Mettre en pause"' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'LibelleSupp','Libellé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'libelleValider','Libellé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'DonneeCommRenvoyerDossier','Donnée commentaire' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'CodeErrSiVideSupp','Code erreur si vide' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'libellePause','Libellé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'libelleRenvoyerDossier','Libellé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'masquerPause','Masquer' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'codeErrRenvoyerDossier','Code erreur si vide' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'condionneParRegleGestionCond','conditionné par la règle' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'AutoriseCreation','/ Autorise la création d''un nouveau salarié'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'Recap','Récapitulatif'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'donnee','DONNÉE'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'libelle','LIBELLÉ'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'dictionnaire','DICTIONNAIRE'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'placeholderInfo','Complément d''information'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'groupeGoToRegle','Aller vers ce groupe de donnée'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'donneeGoToRegle','Aller vers cette donnée' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'dragDrop','Glisser-déposer pour réorganiser'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'selectionPeriode','Sélection de la période' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'selectionSalarie','Sélection de salarié' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'saisieDonneesPaie','Saisie des données paie'   
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'modifierEcran','Modifier un écran' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('label_select-readonly','label_radio-readonly','label_checkbox-readonly', 'label_textarea-readonly')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_select-readonly','Liste déroulante non saisissable'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_radio-readonly','Bouton ''radio'' non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_checkbox-readonly','Case à cocher non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_textarea-readonly','Non saisissable sur plusieurs lignes' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('allerVersDictionnaire')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'allerVersDictionnaire','Aller vers ce dictionnaire'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('dateEffComp', 'label_dateEffComp','paramAppel')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'dateEffComp','Composant date d''effet'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'label_dateEffComp','Composant date d''effet'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'paramAppel','paramètre d''appel'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('label_dateEffComp')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_dateEffComp','Composant date d''effet'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.AnnulerSitu','L''action en cours va annuler une situation contractuelle.'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.SupprimerSitu','L''action en cours va supprimer une situation contractuelle.'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.Erreur','Une erreur est survenue, veuillez contacter votre administrateur.' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('allerVersDonnee')
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'GENERIC_LABELS' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('GENERIC_LABELS_SuppressionDateEff.AnnulerSitu', 'GENERIC_LABELS_SuppressionDateEff.SupprimerSitu', 'GENERIC_LABELS_SuppressionDateEff.Erreur')
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.AnnulerSitu','L''action en cours va annuler une situation contractuelle.'
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.SupprimerSitu','L''action en cours va supprimer une situation contractuelle.'
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.Erreur','Une erreur est survenue, veuillez contacter votre administrateur.' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'valeurLigneColonne' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'valeurLigneColonne','(Zéro ''0'' permet de gérer la valeur automatiquement)'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('label_select-readonly','label_radio-readonly','label_checkbox-readonly', 'label_textarea-readonly', 'allerVersDictionnaire', 'allerVersDonnee')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_select-readonly','Liste déroulante non saisissable'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_radio-readonly','Bouton ''radio'' non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_checkbox-readonly','Case à cocher non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_textarea-readonly','Non saisissable sur plusieurs lignes' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'allerVersDictionnaire','Aller vers ce dictionnaire'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'allerVersDonnee','Aller vers cette donnée'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'PARAMDONNEES_LongueurSaisie' ,'PARAMDONNEES_ExpressionReguliere')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'PARAMDONNEES_LongueurSaisie','Longueur saisie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'PARAMDONNEES_ExpressionReguliere','Expression régulière'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.ZPaie.RETRO.INSCRIRETRO' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('warnPremierePaie')
'Ext.adp.ZPaie.RETRO.INSCRIRETRO','fr_fr', 'warnPremierePaie','Certains des salariés sélectionnés n''ont pas été inscrits en rétro car leur date de première paie est plus récente'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE ='Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'ecranParam','Paramétré' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'ecranRecap','Récapitulatif' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'ecranDev','Développé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'GoToRegleGest','Aller vers cette règle de gestion' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'GoToRegleEcran','Aller vers cet écran' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'modification','modification' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'groupeGoToRegle','Aller vers ce groupe de donnée' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'creation','création' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'ecranRecherche','Recherche' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_ordre','Ordre'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_typeEcran','Type d''écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_lib','Libellé'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_nvSalarie','Autorise la création d''un nouveau salarié'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_lstInit','Liste des données à initialiser'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_typeDeclaration','Type de déclaration du tableau de résultat'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_reqTab','Requête de génération du tableau de résultat'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_jsonTab','JSON servicelet pour traitement spécifique du tableau'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_interpreteur','Interpréteur pour traitement spécifique'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_cond','Conditionnement du passage par l''écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_regle','Règle de controle de sélection'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_rappelSaisie','Rappel de saisie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_ecran','Ecran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_libBtnEdition','Libellé du bouton d''édition'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_grpDonneesPre','Groupe de données à afficher en premier'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_recapAuto','Récapitulatif automatique'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_grpDonneesDer','Groupe de données à afficher en dernier'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_nbrNiveaux','Nombre de niveaux de sous-groupe affiché si au moins une donnée modifiée'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_comp','Afficher un comparatif'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'slideAjoutEcran_ecranAlternatif','Ecran alternatif (si la règle n''est pas vérifié)'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'donneeCodeEdition','Donnée code édition'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'assistant','Assistant'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'infoTechnique','Informations techniques'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'dansLeCadreDuProjet','dans le cadre du projet : '
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'lancerAssistant','Lancer l''assistant de construction du tableau'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'assistantCreationSysReqJsp','Assistant de création d''une requête jsp '
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'DefaultLibelleEcranDEV','Ecran ?'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'DefaultLibelleEcranRECH','Recherche d''un salarié'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'DefaultLibelleEcranRECH_NewSal','Recherche d''homonymie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'DefaultLibelleEcranRECAP','Récapitulatif de la saisie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'idRequete','ID requête' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'nomPage','Nom page'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'idRegle','Id Règle'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf','fr_fr', 'description','Description'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInModificationDonnee'  AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE = 'LIBELLE_AU_DESSUS'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInModificationDonnee','fr_fr', 'LIBELLE_AU_DESSUS','Libellé au-dessus'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('label_downloadFile', 'label_asynchroneUploadFile')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_downloadFile','Récupération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_asynchroneUploadFile','Dépôt'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE CODE_LANGUE='fr_fr' and TYPE ='Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs' AND CODE_LANGUE='fr_fr'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'regleGestion','Règle de gestion'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'affichage','Affichage' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'regSyn','Règle synthètique' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'typeRegle','Type de règle' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'slideinTitle','Création d''une règle de gestion' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'controle','Contrôle' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'autVal','Automatisme/Valorisation' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'affValP','Masque la donnée, ou les données du groupe, en conservant leur valeur' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'affNonsaisissableP','Rend la donnée non-saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'affvideP','Masque la donnée, ou les données du groupe, en les vidant' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'autActivee','Activée en temps réel' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'autNonActivee','Non activée en temps réel' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'ctlInit','Exécutée à l''initialisation de l''écran' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'ctlNonInit','Non exécutée à l''initialisation de l''écran' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'debugActive','debug activé' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'btnTester','Tester' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'btnDeverouillerTableau','Déverrouiller l''onglet Tableau' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','fr_fr', 'btnRetablir','Rétablir' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle' AND CODE_LANGUE='fr_fr'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'non','Non' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'affVal','Masque la donnée, ou les données du groupe, en conservant leur valeur' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'affNonsaisissable','Rend la donnée non-saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'affvide','Masque la donnée, ou les données du groupe, en les vidant' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'slideinTitle','Création d''une règle de gestion' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'oui','Oui'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'labelCondExec','Exécuter en temps réel (Javascript)'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'labelCondInit','Exécuter à l''initialisation de l''écran'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'labelCond','Si la condition n''est pas vérifiée'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'dupRegle','Duplication de la règle'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'regleId','Règle'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'type','Type'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'regSyn','Règle synthétique'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle','fr_fr', 'desc','Description'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInTestRegleGestion' AND CODE_LANGUE='fr_fr'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInTestRegleGestion','fr_fr', 'titleSlideTest','Test d''une règle de gestion' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInTestRegleGestion','fr_fr', 'mab','Mise à blanc' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE in ('aucunParametrageDefini','structure','avec','nonSaisissable','affichageDeLArborescence')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'aucunParametrageDefini','(Aucun paramétrage défini)'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'structure','Structure'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'avec','avec'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'nonSaisissable',' (non-saisissable)'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'affichageDeLArborescence',' affichage de l''arborescence'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'GENERIC_LABELS' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('indice_delegation' ,'DESK_HISTORIQUE_TITLE','DESK_DERNIERECONNEXION_DATE','Generic_MsgInternalError','DESK_ANNUAIRE_RESPONSABLE_HIERARCHIQUE','DESK_ANNUAIRE_MES_CONTACTS','Generic_WBtnValidate','list_icones' ,'DESK_ANNUAIRE_AJOUT_CONTACT' ,'DESK_ANNUAIRE_CHARGEMENT_RECHERCHE_PERSONNE' ,'maximize' ,'DESK_FICHIERRECENT_HEADER_DERNIEREMODIF','DESK_FICHIERRECENT_GOTO_FICHIERSVISU','Generic_ConfirmSupp' ,'gestionDesThemes','Generic_Tooltip_WBtnConfirmDelete','DESK_HISTORIQUE_INFOBULLE_THEME' ,'action','favoris' ,'annuaire','DESK_ANNUAIRE_ORGANIGRAMME','DESK_FAVORIS_TITLE','Generic_Tooltip_SelectAllUnDelete','DESK_SEARCH_PAGE','DESK_HISTORIQUE_INFOBULLE_CLASSEUR','DESK_HISTORIQUE_TITLE_ADD_FAV','helpdesk','DESK_FAVORIS_INFOBULLE_THEME','Generic_MsgTitleInfo','DESK_SEARCH_TITRE_RESULTAT_MATRICULE','Generic_MsgHTTPError' ,'MESSAGE_BOUTON_INACTIVITE','DESK_SEARCH_TITRE_RESULTAT_PAGE','Generic_champRequired','DESK_FICHIERRECENT_HEADER_TAILLE','DESK_SEARCH_PAGE_AUCUN_RESULTAT','composantDatesEffet_warningHorsContrat','DESK_ANNUAIRE_ENLEV_CONTACT','MESSAGE_TITRE_INACTIVITE','fichiers','DESK_FICHIERRECENT_TITLE' ,'alertes','MESSAGE_FENETRE_INACTIVITE','DESK_FICHIERRECENT_HEADER_FICHIERS','Generic_champRequiredMulti','Generic_WBtnConfirmDelete','composantDatesEffet_warningPasDernierHistoPaiezad','Generic_Confirm_WBtnConfirmDelete','Generic_MsgTitleWarning' ,'DESK_QUIT' ,'DESK_NEWS_VERSION','Generic_WaitMsg','Generic_Tooltip_SelectAllDelete','Generic_MsgTitleError','minimize' ,'DESK_NEWS_TITLE','accueil','DESK_FAVORIS_INFOBULLE_SEP','DESK_FAVORIS_INFOBULLE_CLASSEUR','DESK_FAVORIS_TITLE_SUPP_FAV','DESK_FICHIERRECENT_BTNREFRESH','DESK_HISTORIQUE_TITLE_SUPP_FAV','Supprimer','DESK_HISTORIQUE_INFOBULLE_SEP' ,'search_basic','Generic_WBtnClose','DESK_DISCONNECT','Generic_MsgHTTPTimeOut','DESK_DERNIERECONNEXION_HEURE','historique' ,'search_advanced')
'GENERIC_LABELS','fr_fr', 'indice_delegation','Délégation en cours' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_TITLE','Mon historique' 
'GENERIC_LABELS','fr_fr', 'DESK_DERNIERECONNEXION_DATE','Votre dernière connexion ' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgInternalError','Erreur interne.' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_RESPONSABLE_HIERARCHIQUE','Responsable hiérarchique' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_MES_CONTACTS','Mes contacts' 
'GENERIC_LABELS','fr_fr', 'Generic_WBtnValidate','Valider' 
'GENERIC_LABELS','fr_fr', 'list_icones','Menu accès rapide' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_AJOUT_CONTACT','Ajouter le contact à vos favoris' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_CHARGEMENT_RECHERCHE_PERSONNE','Rechercher un contact' 
'GENERIC_LABELS','fr_fr', 'maximize','Maximiser' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_HEADER_DERNIEREMODIF','Dernière modification' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_GOTO_FICHIERSVISU','Accéder à tous mes fichiers' 
'GENERIC_LABELS','fr_fr', 'Generic_ConfirmSupp','Voulez-vous vraiment supprimer cet enregistrement ?' 
'GENERIC_LABELS','fr_fr', 'gestionDesThemes','Gestion du look & feel' 
'GENERIC_LABELS','fr_fr', 'Generic_Tooltip_WBtnConfirmDelete','Valider la suppression' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_INFOBULLE_THEME','' 
'GENERIC_LABELS','fr_fr', 'action','Action en cours et délégations' 
'GENERIC_LABELS','fr_fr', 'favoris','Mes favoris' 
'GENERIC_LABELS','fr_fr', 'annuaire','Mon annuaire' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_ORGANIGRAMME','Afficher l''organigramme' 
'GENERIC_LABELS','fr_fr', 'DESK_FAVORIS_TITLE','Mes Favoris' 
'GENERIC_LABELS','fr_fr', 'Generic_Tooltip_SelectAllUnDelete','Désélectionner toutes les lignes pour la suppression' 
'GENERIC_LABELS','fr_fr', 'DESK_SEARCH_PAGE','Rechercher...' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_INFOBULLE_CLASSEUR','' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_TITLE_ADD_FAV','Ajouter l''écran aux favoris' 
'GENERIC_LABELS','fr_fr', 'helpdesk','Naviguer vers le helpdesk' 
'GENERIC_LABELS','fr_fr', 'DESK_FAVORIS_INFOBULLE_THEME','' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgTitleInfo','Information' 
'GENERIC_LABELS','fr_fr', 'DESK_SEARCH_TITRE_RESULTAT_MATRICULE','Résultat des collaborateurs' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgHTTPError','Une erreur HTTP est survenue.' 
'GENERIC_LABELS','fr_fr', 'MESSAGE_BOUTON_INACTIVITE','Revenir à l''application' 
'GENERIC_LABELS','fr_fr', 'DESK_SEARCH_TITRE_RESULTAT_PAGE','Résultat des pages' 
'GENERIC_LABELS','fr_fr', 'Generic_champRequired','La donnée #1 est obligatoire.' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_HEADER_TAILLE','Taille (Ko)' 
'GENERIC_LABELS','fr_fr', 'DESK_SEARCH_PAGE_AUCUN_RESULTAT','Aucun résultat trouvé' 
'GENERIC_LABELS','fr_fr', 'composantDatesEffet_warningHorsContrat','La date d''effet saisie ne correspond à aucune période d''emploi. La date d''effet a été automatiquement corrigée pour sélectionner la période d''emploi la plus récente.' 
'GENERIC_LABELS','fr_fr', 'DESK_ANNUAIRE_ENLEV_CONTACT','Enlever le contact de vos favoris' 
'GENERIC_LABELS','fr_fr', 'MESSAGE_TITRE_INACTIVITE','Aucune activité détectée depuis plusieurs minutes' 
'GENERIC_LABELS','fr_fr', 'fichiers','Mes fichiers récents' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_TITLE','Mes fichiers récents' 
'GENERIC_LABELS','fr_fr', 'alertes','Naviguer vers le suivi des alertes' 
'GENERIC_LABELS','fr_fr', 'MESSAGE_FENETRE_INACTIVITE','<b> Nous protégeons vos données !<br>Attention, il sera peut-être nécessaire de vous reconnecter.</b>' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_HEADER_FICHIERS','Fichiers' 
'GENERIC_LABELS','fr_fr', 'Generic_champRequiredMulti','Les champs sont obligatoires.' 
'GENERIC_LABELS','fr_fr', 'Generic_WBtnConfirmDelete','Valider la suppression' 
'GENERIC_LABELS','fr_fr', 'composantDatesEffet_warningPasDernierHistoPaiezad','La date d''effet saisie n''est pas la dernière de la période d''emploi. La bonne date d''effet pour cette période d''emploi a été automatiquement corrigée.' 
'GENERIC_LABELS','fr_fr', 'Generic_Confirm_WBtnConfirmDelete','Voulez-vous vraiment supprimer ces enregistrements ?' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgTitleWarning','Attention' 
'GENERIC_LABELS','fr_fr', 'DESK_QUIT','Quitter' 
'GENERIC_LABELS','fr_fr', 'DESK_NEWS_VERSION','Version de report' 
'GENERIC_LABELS','fr_fr', 'Generic_WaitMsg','En cours de chargement...' 
'GENERIC_LABELS','fr_fr', 'Generic_Tooltip_SelectAllDelete','Sélectionner toutes les lignes pour la suppression' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgTitleError','Erreur' 
'GENERIC_LABELS','fr_fr', 'minimize','Minimiser' 
'GENERIC_LABELS','fr_fr', 'DESK_NEWS_TITLE','What''s new' 
'GENERIC_LABELS','fr_fr', 'accueil','Accueil' 
'GENERIC_LABELS','fr_fr', 'DESK_FAVORIS_INFOBULLE_SEP','&rarr;' 
'GENERIC_LABELS','fr_fr', 'DESK_FAVORIS_INFOBULLE_CLASSEUR','' 
'GENERIC_LABELS','fr_fr', 'DESK_FAVORIS_TITLE_SUPP_FAV','Supprimer l''écran des favoris' 
'GENERIC_LABELS','fr_fr', 'DESK_FICHIERRECENT_BTNREFRESH','Rafraîchir' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_TITLE_SUPP_FAV','Supprimer l''écran des favoris' 
'GENERIC_LABELS','fr_fr', 'Supprimer','Supprimer' 
'GENERIC_LABELS','fr_fr', 'DESK_HISTORIQUE_INFOBULLE_SEP','&rarr;' 
'GENERIC_LABELS','fr_fr', 'search_basic','Recherche d''un écran ou d''un employé' 
'GENERIC_LABELS','fr_fr', 'Generic_WBtnClose','Fermer' 
'GENERIC_LABELS','fr_fr', 'DESK_DISCONNECT','Déconnexion' 
'GENERIC_LABELS','fr_fr', 'Generic_MsgHTTPTimeOut','Une erreur HTTP est survenue.(timeout)' 
'GENERIC_LABELS','fr_fr', 'DESK_DERNIERECONNEXION_HEURE',' à ' 
'GENERIC_LABELS','fr_fr', 'historique','Mon historique' 
'GENERIC_LABELS','fr_fr', 'search_advanced','Recherche avancée d''un employé ou d''une population' 
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'GENERIC_LABELS' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('NUMPAC','MATRIC','IDENTIFIANT_RH','ETABLISSEMENT', 'NUM_SS','DATE_NAISSANCE','DATE_ANCIENNETE_GROUPE','DATE_ANCIENNETE','DEB_CNT','FIN_CNT','NAT_CNT','TYPE_CNT','EMPLOI','CPN','AFFECTATION_ADMINISTRATIVE','TAUX_EMPLOI', 'PAC', 'CONTRAT','NUM_CONTRAT', 'PERIODE_EMPLOI' )
'GENERIC_LABELS','fr_fr','NUMPAC','NUMPAC'
'GENERIC_LABELS','fr_fr','MATRIC','Matricule'
'GENERIC_LABELS','fr_fr','IDENTIFIANT_RH','Identifiant RH'
'GENERIC_LABELS','fr_fr','ETABLISSEMENT','Etablissement'
'GENERIC_LABELS','fr_fr','NUM_SS','N° SS'
'GENERIC_LABELS','fr_fr','DATE_NAISSANCE','Date de naissance'
'GENERIC_LABELS','fr_fr','DATE_ANCIENNETE_GROUPE','Date d''ancienneté groupe'
'GENERIC_LABELS','fr_fr','DATE_ANCIENNETE','Date d''ancienneté'
'GENERIC_LABELS','fr_fr','DEB_CNT','Date de début de contrat'
'GENERIC_LABELS','fr_fr','FIN_CNT','Date de fin de contrat'
'GENERIC_LABELS','fr_fr','NAT_CNT','Nature de contrat'
'GENERIC_LABELS','fr_fr','TYPE_CNT','Type de contrat'
'GENERIC_LABELS','fr_fr','EMPLOI','Emploi' 
'GENERIC_LABELS','fr_fr','CPN','CPN'
'GENERIC_LABELS','fr_fr','AFFECTATION_ADMINISTRATIVE','Affectation administrative'
'GENERIC_LABELS','fr_fr','TAUX_EMPLOI','Taux d''emploi'
'GENERIC_LABELS','fr_fr','PAC','PAC'
'GENERIC_LABELS','fr_fr','CONTRAT','Contrat'
'GENERIC_LABELS','fr_fr','NUM_CONTRAT','N° de contrat'
'GENERIC_LABELS','fr_fr','PERIODE_EMPLOI','Période d''emploi'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('OUI','NON' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr','OUI','Oui'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr','NON','Non'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('label_checkbox-hidden','checkbox-hidden')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr','label_checkbox-hidden','Case à cocher (masquée)'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr','checkbox-hidden','Case à cocher (masquée)'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('label_checkbox-hidden')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr','label_checkbox-hidden','Case à cocher (masquée)'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('natureTraitementPaie','nom', 'nature' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'natureTraitementPaie','Nature de traitement de paie'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'nature','Nature'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'nom','Nom'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('BtnBridging','paramEcran_bridging_SlideinTitleWkf','Slidein_bridging_no_zip','Slidein_bridging_no_ref' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'BtnBridging','Paramétrer le bridging'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'paramEcran_bridging_SlideinTitleWkf','Paramétrage du bridging de l''écran initial de l''opération'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'Slidein_bridging_no_zip', 'Vous devez d''abord générer un livrable avant de paramétrer le Bridging de cet écran.'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','fr_fr', 'Slidein_bridging_no_ref', 'Vous devez mettre cet écran au produit avant de paramétrer le Bridging.'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('Msg_NbLigne','Msg_NbLignePlur','Msg_NbLigneSecu','Msg_NbLigneSecuPlur') 
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbLigne','#1 ligne affichée'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbLignePlur','#1 ligne(s) affichée(s)'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbLigneSecu','Attention : #1 ligne sur #2 est affichée compte tenu de vos droits.'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbLigneSecuPlur','Attention : #1 lignes sur #2 sont affichées compte tenu de vos droits.'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Modules.Signature.slide.SlideUploadDocumentExterne') and CODE_LIBELLE IN ('label_classementBvrh')
'Ext.adp.Modules.Signature.slide.SlideUploadDocumentExterne','fr_fr','label_classementBvrh','Classement BVRH'
##
SYS_DEF_PREFERENCES
==
DELETE FROM SYS_DEF_PREFERENCES WHERE CODE_PREF = 'CODE_LANGUE'
'CODE_LANGUE','Langue','1','select','TAB_RD_LANGUE','1','fr_fr'
##
SYS_DEF_PURGE_TBL
==
DELETE FROM SYS_DEF_PURGE_TBL WHERE NOM_TABLE = 'SYS_TRC_ZIP_CONTENTS'
'SYS_TRC_ZIP_CONTENTS','ZIP_FILE_CREATION_DATE','000000','TO_TIMESTAMP(ZIP_FILE_CREATION_DATE,''yyyymmddhh24missff'') < SYSDATE - 180',NULL
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE in('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide', 'Génération des dossiers d''analyse'
##
sys_requetes_jsp
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '2'
'TracesInterpreter.jsp','2','Utilisateur', '(SELECT DISTINCT r.nom    AS NOM,  r.prenom AS PRENOM, nvl(e.EMAIL ,sx.EMAIL) AS EMAIL  FROM  sys_usr_config_ihm r LEFT JOIN etat_civ  e ON e.matric = r.requetematric LEFT JOIN sys_usr_externe    sx ON sx.login = r.login)', 'PRENOM,NOM,EMAIL' , 'PRENOM,NOM,EMAIL', NULL, 0, 'Login', NULL, NULL, NULL,'PRENOM,NOM,EMAIL' 
##
sys_requetes_jsp
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '2'
'TracesInterpreter.jsp','2','Utilisateur', '(SELECT DISTINCT r.nom    AS NOM,  r.prenom AS PRENOM, r.login AS LOGIN,  nvl(e.EMAIL ,sx.EMAIL) AS EMAIL  FROM  sys_usr_config_ihm r LEFT JOIN etat_civ  e ON e.matric = r.requetematric LEFT JOIN sys_usr_externe    sx ON sx.login = r.login)', 'PRENOM,NOM,EMAIL' , 'PRENOM,NOM,EMAIL,LOGIN', NULL, 0, 'Login', NULL, NULL, NULL,'PRENOM,NOM,EMAIL' 
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'LIVR_DA_ECRANS' and IDREQUETE = '1'
'LIVR_DA_ECRANS','1','Administrateur','META_ECRAN M','M.NOM_PAGE,M.LIBELLE_PAGE','M.NOM_PAGE,M.LIBELLE_PAGE','M.TYPE_ECRAN = ''U'' AND TO_CHAR(M.NOM_PAGE) NOT IN ( select regexp_substr(''%1'',''[^,]+'', 1, level) from dual connect by regexp_substr(''%1'', ''[^,]+'', 1, level) is not null)',0,NULL,'M.NOM_PAGE DESC','Ecrans à générer pour les DA','Ecrans à générer pour les DA','M.NOM_PAGE,M.LIBELLE_PAGE'
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage='WkfOperationEcransMVVM' and idrequete=1
'WkfOperationEcransMVVM','1','Utilisateur','TGE_SCHEMA_PRODUCTION','NATURE,NOM_TRT','NATURE,NOM_TRT','TYPE_PAIE IN (''PAIETEST'',''REGLE'',''REGLEALL'')',null,'true','NATURE',null,null,null
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '5'
'TracesInterpreter.jsp','5','Utilisateur', '(SELECT DISTINCT s.pacmat AS PACMAT,  s.matric AS MATRIC, s.nomjf AS NOMJF,  s.prenom AS PRENOM ,  s.nom as NOM,   s.numpac as NUMPAC ,d.paiezad PAIEZAD FROM dic_adm_contrat_histo d LEFT JOIN secumatric s ON d.matric=s.matric )', 'PAIEZAD,PACMAT ,MATRIC,NUMPAC, NOMJF,NOM,PRENOM' , 'PAIEZAD,PACMAT ,MATRIC,NUMPAC, NOMJF,NOM,  PRENOM', NULL, 0, 'TRUE', NULL, NULL, NULL,'Référence période d'emploi,Matricule paie,Identifiant RH,Numpac,Nom Famille,Nom,Prenom'
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '6'
'TracesInterpreter.jsp','6','Utilisateur', '(SELECT DISTINCT s.pacmat AS PACMAT,  s.matric AS MATRIC, s.nomjf AS NOMJF,  s.prenom AS PRENOM ,  s.nom as NOM,   s.numpac as NUMPAC ,d.paiezad PAIEZAD FROM dic_adm_contrat_histo d LEFT JOIN secumatric s ON d.matric=s.matric )', 'PAIEZAD,PACMAT ,MATRIC,NUMPAC, NOMJF,NOM,  PRENOM' , 'PAIEZAD,PACMAT ,MATRIC,NUMPAC, NOMJF,NOM,  PRENOM','NUMPAC= nvl (%1 , NUMPAC) AND PACMAT= nvl (%2 , PACMAT) AND MATRIC = nvl (%3 , MATRIC )and  @SECUMAT_SANSQUOTE@', 0, 'login', NULL, NULL, NULL,'Référence période d'emploi,Matricule paie,Identifiant RH,Numpac,Nom Famille,Nom,Prenom' 
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '7'
'TracesInterpreter.jsp','7','Utilisateur', 'SECUMATRIC S, SECUPACMAT', 'S.PACMAT,S.MATRIC,S.NUMPAC,S.NOMJF,S.NOM,S.PRENOM' , 'S.PACMAT,S.MATRIC,S.NUMPAC,S.NOMJF,S.NOM,S.PRENOM', 'S.pacmat = SECUPACMAT.pacmat  AND @SECUPACMAT_SANSQUOTE@', 0, 'TRUE', NULL, NULL, NULL,'Matricule paie,Identifiant RH,Numpac,Nom Famille,Nom,Prenom' 
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '8'
'TracesInterpreter.jsp','8','Utilisateur', 'SECUMATRIC', 'PACMAT,MATRIC,NUMPAC,NOMJF,NOM,PRENOM' , 'PACMAT,MATRIC,NUMPAC,NOMJF,NOM,PRENOM', 'MATRIC = nvl (%1 , MATRIC ) and NUMPAC= nvl (%2 , NUMPAC) and @SECUPACMAT_SANSQUOTE@', 0, 'TRUE', NULL, NULL, NULL,'Matricule paie,Identifiant RH,Numpac,Nom Famille,Nom,Prenom' 
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage='HRO_LoginResponsable' and idrequete=1
'HRO_LoginResponsable','1','Utilisateur','SYS_USR_EXTERNE E, GET_SYS_USR_CID() C','E.LOGIN, NOMFAM, PRENOM','E.LOGIN, NOMFAM, PRENOM','E.LOGIN = C.LOGIN and C.COMPANY_ID = ''%1''',null,'true','E.LOGIN','Appel table affichant les responsables externe pour HRO',null,null
##
sys_requetes_jsp
==
DELETE FROM sys_requetes_jsp WHERE nompage = 'TracesInterpreter.jsp' and idrequete = '2'
'TracesInterpreter.jsp','2','Utilisateur', '(SELECT DISTINCT r.nom    AS NOM,  r.prenom AS PRENOM, r.login AS LOGIN,  nvl(e.EMAIL ,sx.EMAIL) AS EMAIL  FROM  sys_usr_config_ihm r LEFT JOIN etat_civ  e ON e.matric = r.requetematric LEFT JOIN sys_usr_externe    sx ON sx.login = r.login)', 'NOM,PRENOM,EMAIL' , 'NOM,PRENOM,EMAIL,LOGIN', NULL, 0, 'Login', NULL, NULL, NULL,'NOM,PRENOM,EMAIL' 
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Moteur.FichiersVisualisables.FichiersVisualisablesExpert'
'Ext.adp.Moteur.FichiersVisualisables.FichiersVisualisablesExpert',NULL,NULL,'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs', null, 'ADMPD231;ADMPD232;ADMPD233;ADMPD234;ADMPD235;ADMPD236;ADMPD237;ADMPD238;ADMPD239;ADMPD240', 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInCreationDuplicatioRegle', null, 'null', 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInTestRegleGestion'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInTestRegleGestion', null, 'null', 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM', null, 'ADMPD213;ADMPD214;ADMPD215;ADMPD216;ADMPD217;ADMPD218;ADMPD219;ADMPD220;ADMPD221;ADMPD222;ADMPD223;ADMPD224;ADMPD225;ADMPD226;ADMPD230', 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE =  'Ext.adp.ZPaie.RETRO.INSCRIRETRO'
'Ext.adp.ZPaie.RETRO.INSCRIRETRO', null, null, 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideInAjoutEcranWkf',null,'ADMPD227;ADMPD228;ADMPD229','TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE in ( 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.GenerationEcransDASlide',null, null, 'TOOLS_ML'
##
SYS_SCH_PROFIL_P
==
DELETE FROM SYS_SCH_PROFIL_P WHERE NOM_PAGE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs') and CODE_PROFIL in ('-2')
'-2','Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','E','N'
##
SYS_SCH_PROFIL_P
==
DELETE FROM SYS_SCH_PROFIL_P WHERE NOM_PAGE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM') and CODE_PROFIL in ('-2')
'-2','Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','E','N'
##
TAG_CHARSET=@éèç
##
SYS_TRC_DOWNLOAD
=SQL IFEXIST=SYS_TRC_DOWNLOAD=FICHIER=
ALTER TABLE SYS_TRC_DOWNLOAD MODIFY FICHIER VARCHAR2(4000)
##
TAG_CHARSET=@éèç
##
SYS_TRC_ZIP_CONTENTS
=SQL IFNOTEXIST=SYS_TRC_ZIP_CONTENTS=
CREATE TABLE SYS_TRC_ZIP_CONTENTS ( ZIP_FILE_CREATION_DATE VARCHAR2(24 BYTE) NOT NULL, ZIP_FILE_AUTHOR VARCHAR2(255 BYTE) NOT NULL, ZIP_FILE_PATH VARCHAR2(4000 BYTE) NOT NULL, ZIP_FILE_SIZE_IN_BYTES NUMBER NOT NULL, FILE_PATH VARCHAR2(4000 BYTE) NOT NULL, FILE_SIZE_IN_BYTES NUMBER NOT NULL ) 
##
SYS_TRT_TOMAKE
=IF_ROW_NOTEXIST=
'Traitement_LancementBatchCFT?nomInterface=Hexaposte','00'
##
TAG_CHARSET=@éèç
##
SYS_USR_EXTERNE
##
UPDATE SYS_USR_EXTERNE SET NOMFAM = 'Application', PRENOM = 'Ingenieur' WHERE LOGIN = 'IA'
##
SYS_USR_EXTERNE
##
UPDATE SYS_USR_EXTERNE SET NOMFAM = 'Paie', PRENOM = 'Gestionnaire' WHERE LOGIN = 'GP'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','DESK_STOREMARKETP','CP','Texte','fait apparaitre l''icone MarketPlace dans les boutons de la barre de recherche du Schell OneUX, FALSE ==> Icone non affichée TRUE ==> Icone affichée pour tous les utilisateurs d''un profil Expert (Role 3) CP ==> Icone affichée uniquement pour les Experts positionné comme Chef de file'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','DESK_STOREMARKETP_URL','https://fr.apps.adp.com/fr-FR/listing?attr=14589','Texte','url pointée par l''icone MarketPlace'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','SYNERGIE_LINK','https://synerg.adp.com/config/synerg-config','Texte','url pointée par l''API Synergie'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','SYNERGIE_VERSION','-1.17.1','Texte','version de l''API Synergie'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','SYNERGIE_INIT_JS','window.SynergConfig.initialize().then(cfg => {cfg.loadGlobalStyles([''sdf-global'', ''sdf-utilities'']);});','Texte','Script J.S pour intitiet l''API Synergie'
##
TAG_CHARSET=@éèç
##
TGE_GESTIL_MATEVE
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATEVE' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATEVE';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATEVE';
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATEVE (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_AFF DATE
		,HRE_AFF VARCHAR2(6)
		,RANG NUMBER(6,0)
		,DAT_FIN DATE
		,HRE_FIN VARCHAR2(6)
		,NAT VARCHAR2(6)
		,PROV VARCHAR2(1)
		,PROV_LIB VARCHAR2(20)
		,CODPLJ VARCHAR2(3)
		,CODPLJ_LIB VARCHAR2(30)
		,HRS_DEB VARCHAR2(6)
		,HRJ_DEB NUMBER(6,0)
		,HRJ_DEB_LIB VARCHAR2(10)
		,HRS_FIN VARCHAR2(6)
		,HRJ_FIN NUMBER(6,0)
		,HRJ_FIN_LIB VARCHAR2(10)
		,TPS_EVE VARCHAR2(8)
		,TPM_EVE NUMBER(11,0)
		,TPHC_EVE NUMBER(11,3)
		,LIEU VARCHAR2(30)
		,POS VARCHAR2(30)
		,EQU VARCHAR2(30)
		,QUA VARCHAR2(30)
		,NIVQUA NUMBER(6,0)
		,QTE1 NUMBER(11,0)
		,QTE2 NUMBER(11,0)
		,UCRE VARCHAR2(10)
		,DAT_CRE DATE
		,COMM_COLLAB VARCHAR2(255)
		,COMM_MGR VARCHAR2(255)
		,COMM_EXP VARCHAR2(255)
		,USR_VALIDATION VARCHAR2(10)
		,DAT_VALIDATION DATE
		,HRE_SIGN VARCHAR2(6)
		,ID NUMBER(11,0)
		,STATUT_EVT NUMBER(6,0) DEFAULT 0
		,STATUT_EVT_LIB VARCHAR2(100) DEFAULT ''Evénement non soumis''
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
END;
##
TAG_CHARSET=@éèç
##
TGE_GESTIL_MATPRE
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATPRE' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATPRE';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATPRE';
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATPRE (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_PRE DATE
		,TYPE VARCHAR2(1)
		,TYPE_LIB VARCHAR2(10)
		,PRE_COL VARCHAR2(6)
		,STATUT NUMBER(38,0)
		,STATUT_LIB VARCHAR2(30)
		,COL VARCHAR2(1)
		,MGR VARCHAR2(1)
		,UCRE VARCHAR2(10)
		,DAT_CRE DATE
		,HRE_CRE VARCHAR2(6)
		,UMAJ VARCHAR2(10)
		,DAT_MAJ DATE
		,HRE_MAJ VARCHAR2(6)
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATPRE ADD (
		CONSTRAINT CK_DAT_PRE CHECK (DAT_PRE IS NOT NULL)
	)';
END;
##
TAG_CHARSET=@éèç
##
TGE_GESTIL_SQL
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_SQL';
	IF TABLE_EXIST > 0 THEN
		RETURN;
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_SQL ( 
		TABLENAME VARCHAR2(30) 
		, TABLEORDER NUMBER(3)  
		, TABLEREF NUMBER(1) 
		, TABLESUFFIX VARCHAR2(3) 
		, HISBISTER NUMBER(1) 
		, ADPURGE VARCHAR2(15)
		, STSAVE VARCHAR2(250) 
		, TABLESELECT CLOB 
	)';

	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_SQL ADD (
		CONSTRAINT PK_TGE_GESTIL_SQL PRIMARY KEY (TABLENAME,TABLEORDER) 
		, CONSTRAINT CK_TGE_GESTIL_SQL1 CHECK (TABLEREF IN (0,1))
		, CONSTRAINT CK_TGE_GESTIL_SQL2 CHECK (TABLESUFFIX IN (''HIS'',''BIS'',''TER'')) 
		, CONSTRAINT CK_HISBISTER1 CHECK (HISBISTER IN (0,1))
	)';
END;
##
TGE_GESTIL_SQL
==
DELETE FROM TGE_GESTIL_SQL WHERE TABLENAME IN ('TGE_GESTIL_MATEVE','TGE_GESTIL_MATPRE')
'TGE_GESTIL_MATEVE','200','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATEVE.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_AFF), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(AD_MATEVE.HRE_AFF,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.RANG,0),''S000000'')¿|| TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(AD_MATEVE.HRE_FIN,'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATEVE.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(AD_MATEVE.PROV,'' ''),1,'' '')¿|| RPAD(DECODE(NVL(AD_MATEVE.PROV,'' ''),''K'', ''Kiosque RH'',''W'', ''GTA Web'', ''H'', ''HR.net/OneHR'', ''M'', ''Mobile'', ''T'', ''Borne'', ''G'', ''Evénement badgé'', ''S'', ''Gestil'', ''I'', ''Import'', ''B'', ''Batch'', ''R'', ''Redbox'', '' '', ''ADPLink'',NVL(AD_MATEVE.PROV,'' '')),20,'' '')¿|| RPAD(NVL(TRIM(AD_MATEVE.CODPLJ),'' ''),3,'' '') || RPAD(DECODE(NVL(TRIM(AD_MATEVE.CODPLJ),'' ''),''J'',''Journée'',''M'',''Matin'',''A'',''Après-midi'',''N'',''Nombre d''''heures'',NVL(TRIM(AD_MATEVE.CODPLJ),'' '')),30,'' '') ¿|| RPAD(NVL(AD_MATEVE.HRS_DEB,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.HRJ_DEB,0),''S000000'') || RPAD(DECODE(NVL(AD_MATEVE.HRJ_DEB,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_MATEVE.HRJ_DEB,0)),10,'' '') ¿|| RPAD(NVL(AD_MATEVE.HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.HRJ_FIN,0),''S000000'') || RPAD(DECODE(NVL(AD_MATEVE.HRJ_FIN,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_MATEVE.HRJ_FIN,0)),10,'' '') ¿|| RPAD(NVL(AD_MATEVE.TPS_EVE,'' ''),8,'' '') || TO_CHAR(NVL(AD_MATEVE.TPM_EVE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(AD_MATEVE.TPM_EVE/60,3),0),''S00000000D000'')¿|| RPAD(NVL(AD_LIE.LIB,'' ''),30,'' '') || RPAD(NVL(AD_POS.LIB,'' ''),30,'' '') || RPAD(NVL(AD_EQU.LIB,'' ''),30,'' '') || RPAD(NVL(AD_QUA.LIB,'' ''),30,'' '')¿|| TO_CHAR(NVL(AD_MATEVE.NIVQUA,0),''S000000'') || TO_CHAR(NVL(AD_MATEVE.QTE1,0),''S00000000000'') || TO_CHAR(NVL(AD_MATEVE.QTE2,0),''S00000000000'') || RPAD(NVL(AD_MATEVE.UCRE,'' ''),10,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_CRE), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| RPAD(NVL(AD_COMM.COMM_COLLAB,'' ''),255,'' '') || RPAD(NVL(AD_COMM.COMM_MGR,'' ''),255,'' '') || RPAD(NVL(AD_COMM.COM,'' ''),255,'' '')¿|| RPAD(NVL(AD_MATEVE.SIGN1,'' ''),10,'' '') || CASE WHEN TRIM(AD_MATEVE.DAT_SIGN) IS NULL THEN RPAD('' '',8,'' '') ELSE TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_SIGN), ''YYYY/MM/DD''),''YYYYMMDD'') END¿|| RPAD(NVL(AD_MATEVE.HRE_SIGN,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.AD_W_EVT_ID,0),''S00000000000'') || TO_CHAR(NVL(AD_MATEVE.STATUT_EVT,0),''S000000'')¿|| RPAD(DECODE(NVL(AD_MATEVE.STATUT_EVT,0),0,''Evénement non soumis'',1,''En attente de validation'',3,''Accepté par le manager'',4,''Demande d''''annulation'',5,''Demande d''''annulation refusée'',53,''Accepté par l''''expert'',55,''Demande d''''annulation refusée par l''''expert'',NVL(AD_MATEVE.STATUT_EVT,0)),100,'' '') ¿FROM AD_MATEVE¿LEFT OUTER JOIN AD_LIE ON ( AD_LIE.DOM = AD_MATEVE.DOM AND AD_LIE.ID = AD_MATEVE.LIEU )¿LEFT OUTER JOIN AD_POS ON ( AD_POS.DOM = AD_MATEVE.DOM AND AD_POS.NOM = AD_MATEVE.POS )¿LEFT OUTER JOIN AD_EQU ON ( AD_EQU.DOM = AD_MATEVE.DOM AND AD_EQU.NOM = AD_MATEVE.EQU )¿LEFT OUTER JOIN AD_QUA ON ( AD_QUA.DOM = AD_MATEVE.DOM AND AD_QUA.NOM = AD_MATEVE.QUA )¿LEFT OUTER JOIN AD_COMM ON ( AD_COMM.DOM = AD_MATEVE.DOM AND AD_COMM.INDEXCOM = AD_MATEVE.INDEXCOM )¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATEVE.NAT)) ¿WHERE AD_MATEVE.DOM = ''2'' AND AD_MATEVE.SOC = ''HRV'' AND TRIM(AD_MATEVE.CODPLJ_M) IS NULL AND AD_MATEVE.INDEXCOM > 0 AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATEVE','201','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATEVE.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_AFF), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(AD_MATEVE.HRE_AFF,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.RANG,0),''S000000'')¿|| TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_FIN_MULTIPLE), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(AD_MATEVE.HRE_FIN,'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATEVE.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(AD_MATEVE.PROV,'' ''),1,'' '')¿|| RPAD(DECODE(NVL(AD_MATEVE.PROV,'' ''),''K'', ''Kiosque RH'',''W'', ''GTA Web'', ''H'', ''HR.net/OneHR'', ''M'', ''Mobile'', ''T'', ''Borne'', ''G'', ''Evénement badgé'', ''S'', ''Gestil'', ''I'', ''Import'', ''B'', ''Batch'', ''R'', ''Redbox'', '' '', ''ADPLink'',NVL(AD_MATEVE.PROV,'' '')),20,'' '')¿|| RPAD(NVL(TRIM(AD_MATEVE.CODPLJ_M),'' ''),3,'' '') || RPAD(DECODE(NVL(TRIM(AD_MATEVE.CODPLJ_M),'' ''),''AJ'',''Après-midi/Journée'',''JM'',''Journée/Matin'',''AJM'',''Après-midi/Journée/Matin'',''AM'',''Après-midi/Matin'',NVL(TRIM(AD_MATEVE.CODPLJ_M),'' '')),30,'' '') ¿|| RPAD(NVL(AD_MATEVE.HRS_DEB,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.HRJ_DEB,0),''S000000'') || RPAD(DECODE(NVL(AD_MATEVE.HRJ_DEB,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_MATEVE.HRJ_DEB,0)),10,'' '') ¿|| RPAD(NVL(AD_MATEVE.HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.HRJ_FIN,0),''S000000'') || RPAD(DECODE(NVL(AD_MATEVE.HRJ_FIN,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_MATEVE.HRJ_FIN,0)),10,'' '') ¿|| RPAD(NVL(AD_MATEVE.TPS_EVE,'' ''),8,'' '') || TO_CHAR(NVL(AD_MATEVE.TPM_EVE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(AD_MATEVE.TPM_EVE/60,3),0),''S00000000D000'')¿|| RPAD(NVL(AD_LIE.LIB,'' ''),30,'' '') || RPAD(NVL(AD_POS.LIB,'' ''),30,'' '') || RPAD(NVL(AD_EQU.LIB,'' ''),30,'' '') || RPAD(NVL(AD_QUA.LIB,'' ''),30,'' '')¿|| TO_CHAR(NVL(AD_MATEVE.NIVQUA,0),''S000000'') || TO_CHAR(NVL(AD_MATEVE.QTE1,0),''S00000000000'') || TO_CHAR(NVL(AD_MATEVE.QTE2,0),''S00000000000'') || RPAD(NVL(AD_MATEVE.UCRE,'' ''),10,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_CRE), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| RPAD(NVL(AD_COMM.COMM_COLLAB,'' ''),255,'' '') || RPAD(NVL(AD_COMM.COMM_MGR,'' ''),255,'' '') || RPAD(NVL(AD_COMM.COM,'' ''),255,'' '')¿|| RPAD(NVL(AD_MATEVE.SIGN1,'' ''),10,'' '') || CASE WHEN TRIM(AD_MATEVE.DAT_SIGN) IS NULL THEN RPAD('' '',8,'' '') ELSE TO_CHAR(TO_DATE(TRIM(AD_MATEVE.DAT_SIGN), ''YYYY/MM/DD''),''YYYYMMDD'') END¿|| RPAD(NVL(AD_MATEVE.HRE_SIGN,'' ''),6,'' '') || TO_CHAR(NVL(AD_MATEVE.AD_W_EVT_ID,0),''S00000000000'') || TO_CHAR(NVL(AD_MATEVE.STATUT_EVT,0),''S000000'')¿|| RPAD(DECODE(NVL(AD_MATEVE.STATUT_EVT,0),0,''Evénement non soumis'',1,''En attente de validation'',3,''Accepté par le manager'',4,''Demande d''''annulation'',5,''Demande d''''annulation refusée'',53,''Accepté par l''''expert'',55,''Demande d''''annulation refusée par l''''expert'',NVL(AD_MATEVE.STATUT_EVT,0)),100,'' '') ¿FROM AD_MATEVE¿LEFT OUTER JOIN AD_LIE ON ( AD_LIE.DOM = AD_MATEVE.DOM AND AD_LIE.ID = AD_MATEVE.LIEU )¿LEFT OUTER JOIN AD_POS ON ( AD_POS.DOM = AD_MATEVE.DOM AND AD_POS.NOM = AD_MATEVE.POS )¿LEFT OUTER JOIN AD_EQU ON ( AD_EQU.DOM = AD_MATEVE.DOM AND AD_EQU.NOM = AD_MATEVE.EQU )¿LEFT OUTER JOIN AD_QUA ON ( AD_QUA.DOM = AD_MATEVE.DOM AND AD_QUA.NOM = AD_MATEVE.QUA )¿LEFT OUTER JOIN AD_COMM ON ( AD_COMM.DOM = AD_MATEVE.DOM AND AD_COMM.INDEXCOM = AD_MATEVE.INDEXCOM )¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATEVE.NAT)) ¿WHERE AD_MATEVE.DOM = ''2'' AND AD_MATEVE.SOC = ''HRV'' AND TRIM(AD_MATEVE.CODPLJ_M) IS NOT NULL AND TRIM(AD_MATEVE.DAT_FIN_MULTIPLE) IS NOT NULL AND AD_MATEVE.INDEXCOM > 0 AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATEVE','202','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_W_EVT_DEMANDES.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_W_EVT_DEMANDES.DAT_DEB), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(TRIM(AD_W_EVT_DEMANDES.HRE_DEB),'' ''),6,'' '') || TO_CHAR(0,''S000000'')¿|| TO_CHAR(TO_DATE(TRIM(AD_W_EVT_DEMANDES.DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(AD_W_EVT_DEMANDES.HRE_FIN,'' ''),6,'' '') || RPAD(NVL(TRIM(AD_W_EVT_DEMANDES.NAT), ''NATNRS''),6,'' '') || ''W''¿|| RPAD(''GTA Web'',20,'' '')¿|| RPAD(NVL(TRIM(AD_W_EVT_DEMANDES.COD_PLG),'' ''),3,'' '') || RPAD(DECODE(NVL(TRIM(AD_W_EVT_DEMANDES.COD_PLG),'' ''),''J'',''Journée'',''M'',''Matin'',''A'',''Après-midi'',''N'',''Nombre d''''heures'',''AJ'',''Après-midi/Journée'',''JM'',''Journée/Matin'',''AJM'',''Après-midi/Journée/Matin'',''AM'',''Après-midi/Matin'',NVL(TRIM(AD_W_EVT_DEMANDES.COD_PLG),'' '')),30,'' '') ¿|| RPAD(NVL(AD_W_EVT_DEMANDES.HRE_DEB,'' ''),6,'' '') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.HRJ_DEB,0),''S000000'') || RPAD(DECODE(NVL(AD_W_EVT_DEMANDES.HRJ_DEB,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_W_EVT_DEMANDES.HRJ_DEB,0)),10,'' '') ¿|| RPAD(NVL(AD_W_EVT_DEMANDES.HRE_FIN,'' ''),6,'' '') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.HRJ_FIN,0),''S000000'') || RPAD(DECODE(NVL(AD_W_EVT_DEMANDES.HRJ_FIN,0),-1, ''Veille'',0, ''Jour'',1, ''Lendemain'',NVL(AD_W_EVT_DEMANDES.HRJ_FIN,0)),10,'' '') ¿|| RPAD(NVL(AD_W_EVT_DEMANDES.TPS_EVE,'' ''),8,'' '') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.TPM_EVE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(AD_W_EVT_DEMANDES.TPM_EVE/60,3),0),''S00000000D000'')¿|| RPAD(NVL(AD_LIE.LIB,'' ''),30,'' '') || RPAD(NVL(AD_POS.LIB,'' ''),30,'' '') || RPAD(NVL(AD_EQU.LIB,'' ''),30,'' '') || RPAD(NVL(AD_QUA.LIB,'' ''),30,'' '')¿|| TO_CHAR(NVL(AD_W_EVT_DEMANDES.NIVQUA,0),''S000000'') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.QTE1,0),''S00000000000'') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.QTE2,0),''S00000000000'') || RPAD(NVL(AD_W_EVT_DEMANDES.USR_DEMANDE,'' ''),10,'' '') || TO_CHAR(TO_DATE(TRIM(AD_W_EVT_DEMANDES.DAT_DEMANDE), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| RPAD(NVL(AD_W_EVT_DEMANDES.COMM_N,'' ''),255,'' '') || RPAD(NVL(AD_W_EVT_DEMANDES.COMM_N1,'' ''),255,'' '') || RPAD(NVL(AD_W_EVT_DEMANDES.COMM_EXP,'' ''),255,'' '')¿|| RPAD(NVL(AD_W_EVT_DEMANDES.USR_VALIDATION,'' ''),10,'' '') || CASE WHEN TRIM(AD_W_EVT_DEMANDES.DAT_VALIDATION) IS NULL THEN RPAD('' '',8,'' '') ELSE TO_CHAR(TO_DATE(TRIM(AD_W_EVT_DEMANDES.DAT_VALIDATION), ''YYYY/MM/DD''),''YYYYMMDD'') END¿|| RPAD(NVL(AD_W_EVT_DEMANDES.HRE_VALIDATION,'' ''),6,'' '') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.ID,0),''S00000000000'') || TO_CHAR(NVL(AD_W_EVT_DEMANDES.STATUT_DEMANDE,0),''S000000'')¿|| RPAD(DECODE(NVL(AD_W_EVT_DEMANDES.STATUT_DEMANDE,0)¿,2,''Refusé par le manager''¿,6,''Demande d''''annulation acceptée''¿,52,''Refusé par l''''expert''¿,56,''Demande d''''annulation acceptée par l''''expert''¿,100,''Evénement non soumis à validation annulé par le collaborateur ou par le manager''¿,101,''Evénement soumis à validation annulé par le collaborateur ou par le manager''¿,102,''Evénement soumis à validation annulé par le collaborateur ou par le manager''¿,103,''Evénement soumis à validation annulé par le collaborateur ou par le manager''¿,104,''Evénement soumis à validation annulé par le collaborateur ou par le manager''¿,105,''Evénement soumis à validation annulé par le collaborateur ou par le manager''¿,199,''Evénement soumis à validation qui avait anciennement le statut 30. Ce statut est spécifique à la migration en V4354''¿,200,''Evénement non soumis à validation annulé par l''''expert GTA Web''¿,201,''Evénement soumis à validation qui a été annulé par l''''expert''¿,202,''Evénement soumis à validation qui a été annulé par l''''expert''¿,203,''Evénement soumis à validation qui a été annulé par l''''expert''¿,204,''Evénement soumis à validation qui a été annulé par l''''expert''¿,205,''Evénement soumis à validation qui a été annulé par l''''expert''¿,252,''Evénement soumis à validation qui a été annulé par l''''expert''¿,253,''Evénement soumis à validation qui a été annulé par l''''expert''¿,254,''Evénement soumis à validation qui a été annulé par l''''expert''¿,255,''Evénement soumis à validation qui a été annulé par l''''expert'' ¿,300,''Evénement non soumis à validation annulé par l''''expert Gestil''¿,301,''Evénement en attente de validation qui a ensuite été annulé par l''''expert Gestil''¿,302,''Evénement refusé qui a ensuite été annulé/supprimé par l''''expert Gestil''¿,NVL(AD_W_EVT_DEMANDES.STATUT_DEMANDE,0)),100,'' '') ¿FROM AD_W_EVT_DEMANDES¿LEFT OUTER JOIN AD_LIE ON ( AD_LIE.DOM = AD_W_EVT_DEMANDES.DOM AND AD_LIE.ID = AD_W_EVT_DEMANDES.LIEU )¿LEFT OUTER JOIN AD_POS ON ( AD_POS.DOM = AD_W_EVT_DEMANDES.DOM AND AD_POS.NOM = AD_W_EVT_DEMANDES.POS )¿LEFT OUTER JOIN AD_EQU ON ( AD_EQU.DOM = AD_W_EVT_DEMANDES.DOM AND AD_EQU.NOM = AD_W_EVT_DEMANDES.EQU )¿LEFT OUTER JOIN AD_QUA ON ( AD_QUA.DOM = AD_W_EVT_DEMANDES.DOM AND AD_QUA.NOM = AD_W_EVT_DEMANDES.QUA )¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_W_EVT_DEMANDES.NAT)) ¿WHERE AD_W_EVT_DEMANDES.DOM = ''2'' AND AD_W_EVT_DEMANDES.SOC = ''HRV'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATPRE','210','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_W_MATPRE.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_W_MATPRE.DAT_PRE), ''YYYY/MM/DD''),''YYYYMMDD'') ¿|| NVL(TRIM(AD_W_MATPRE.TYPE),'' '') || RPAD(DECODE(NVL(TRIM(AD_W_MATPRE.TYPE),'' ''), ''P'', ''Plage'', ''V'', ''Volume'',''H'',''Tranche'',NVL(TRIM(AD_W_MATPRE.TYPE),'' '')),10,'' '')¿|| RPAD(NVL(AD_W_MATPRE.PRE_COL,'' ''),6,'' '') || TO_CHAR(NVL(AD_W_MATPRE.STATUT,0),''S000'') || RPAD(DECODE(NVL(AD_W_MATPRE.STATUT,0),''1'',''Saisi par le collaborateur'',''2'',''Entériné par le collaborateur'',''3'',''Saisi/Modifié par le manager'',''4'',''Entériné par le manager'',''5'',''Saisi/Modifié par lexpert'',NVL(AD_W_MATPRE.STATUT,0)),30,'' '')¿|| NVL(TRIM(AD_W_MATPRE.COL),'' '') || NVL(TRIM(AD_W_MATPRE.MGR),'' '') || RPAD(NVL(AD_W_MATPRE.UCRE,'' ''),10,'' '') || TO_CHAR(TO_DATE(TRIM(AD_W_MATPRE.DAT_CRE), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| RPAD(NVL(AD_W_MATPRE.HRE_CRE,'' ''),6,'' '') || RPAD(NVL(AD_W_MATPRE.UMAJ,'' ''),10,'' '')¿|| CASE WHEN TRIM(AD_W_MATPRE.DAT_MAJ) IS NULL THEN RPAD('' '',8,'' '') ELSE TO_CHAR(TO_DATE(TRIM(AD_W_MATPRE.DAT_MAJ), ''YYYY/MM/DD''),''YYYYMMDD'') END || RPAD(NVL(AD_W_MATPRE.HRE_MAJ,'' ''),6,'' '')¿FROM AD_W_MATPRE¿WHERE AD_W_MATPRE.DOM = ''2'' AND AD_W_MATPRE.SOC = ''HRV'''
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC='*' and ELEMENT in ('B961','A166','BA24','AC27','BA25','AC28')
'*', 'BA24', '**', 'RD_MNTPEN_PENS2', 'DIC_PENSION_ALIM', NULL, NULL, NULL, NULL, NULL, 'N';
'*', 'AC27', '**', 'RD_DSDPEN_PENS2', 'DIC_PENSION_ALIM', NULL, NULL, NULL, NULL, NULL, 'N';
'*', 'BA25', '**', 'RD_MNTPEN_PENS3', 'DIC_PENSION_ALIM', NULL, NULL, NULL, NULL, NULL, 'N';
'*', 'AC28', '**', 'RD_DSDPEN_PENS3', 'DIC_PENSION_ALIM', NULL, NULL, NULL, NULL, NULL, 'N';
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC='*' and ELEMENT in ('B480')
'*','B480','**','RD_RETSRCE','DIC_ADRESSE',null,null,null,null,null,'N'
##
XLS_MATCHING_DATA
==
update XLS_MATCHING_DATA set MAX_SIZE = '60' WHERE ATTRIBUTE_NAME = 'EST_OBLIGATOIRE' AND CODDOC = 'IMP_META_DATA'
##
TAG_CHARSET=@éèç
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_RETSRCE','Retenue à la source','DIC_ADRESSE','X','1',NULL,'1','0',NULL,'Z','O',NULL,'1205',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_RETSRCE','Retenue à la source','DIC_ADRESSE','X','1',NULL,'1','0',NULL,'Z','O',NULL,'1205',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_RETSRCE','*','Retenue à la source','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_RETSRCE','*','Retenue à la source','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
*_WKF_OPERATION_ECRANS_INFO
==
CALL META_MODIF_STRUCTURE('_WKF_OPERATION_ECRANS_INFO', 'TRAITEMENT_PAIE', 'VARCHAR2(8)')
##
*_DONNEE_GENERALE
==
CALL META_MODIF_STRUCTURE('_DONNEE_GENERALE', 'NOM_DONNEE', 'VARCHAR2(100)')
##
*_DONNEE_ECRAN
==
CALL META_MODIF_STRUCTURE('_DONNEE_ECRAN', 'NOM_DONNEE', 'VARCHAR2(100)')
##
*_DONNEE_GENERALE
=SQL IFNOTEXIST=_DONNEE_GENERALE=LONGUEUR_SAISIE=
CALL META_MODIF_STRUCTURE('_DONNEE_GENERALE', 'LONGUEUR_SAISIE', 'NUMBER(5)')
##
*_DONNEE_GENERALE
=SQL IFNOTEXIST=_DONNEE_GENERALE=VAL_PATTERN=
CALL META_MODIF_STRUCTURE('_DONNEE_GENERALE', 'VAL_PATTERN', 'VARCHAR2(100)')
##
*_GROUPE_DONNEES
==
CALL META_MODIF_STRUCTURE('_GROUPE_DONNEES', 'LIBELLE_AU_DESSUS', 'VARCHAR2(1)', '''N''')
##
TAG_CHARSET=@éèç
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_Z_DURPER','Durée permis','DIC_DONNEES_VIRTUELLES','X','3',NULL,NULL,NULL,NULL,'Z','O',NULL,'1197',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_Z_DURPER','Durée permis','DIC_DONNEES_VIRTUELLES','X','3',NULL,NULL,NULL,NULL,'Z','O',NULL,'1197',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_Z_DURPER','*','Durée permis','N','hidden',NULL,NULL,'Code,Libellé,Crédit mensuel,Crédit annuel',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_Z_DURPER','*','Durée permis','N','hidden',NULL,NULL,'Code,Libellé,Crédit mensuel,Crédit annuel',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
TAG_CHARSET=@éèç
##
STD_IMP_ACTION
=SQL IFEXIST=STD_IMP_ACTION=
DROP TABLE STD_IMP_ACTION
##
STD_IMP_ACTION_MAPPING
=SQL IFEXIST=STD_IMP_ACTION_MAPPING=
DROP TABLE STD_IMP_ACTION_MAPPING
##
STD_IMP_CARTE
=SQL IFEXIST=STD_IMP_CARTE=
DROP TABLE STD_IMP_CARTE
##
STD_IMP_DESCRIPTION
=SQL IFEXIST=STD_IMP_DESCRIPTION=
DROP TABLE STD_IMP_DESCRIPTION
##
STD_IMP_DOSSIER_DONNEES
=SQL IFEXIST=STD_IMP_DOSSIER_DONNEES=
DROP TABLE STD_IMP_DOSSIER_DONNEES
##
STD_IMP_EXIT
=SQL IFEXIST=STD_IMP_EXIT=
DROP TABLE STD_IMP_EXIT
##
STD_IMP_LIEN_ACTION_OPERATION
=SQL IFEXIST=STD_IMP_LIEN_ACTION_OPERATION=
DROP TABLE STD_IMP_LIEN_ACTION_OPERATION
##
STD_IMP_PAYS
=SQL IFEXIST=STD_IMP_PAYS=
DROP TABLE STD_IMP_PAYS
##
STD_IMP_STATUT
=SQL IFEXIST=STD_IMP_STATUT=
DROP TABLE STD_IMP_STATUT
##
STD_IMP_TRAITEMENT_ERREUR
=SQL IFEXIST=STD_IMP_TRAITEMENT_ERREUR=
DROP TABLE STD_IMP_TRAITEMENT_ERREUR
##
STD_IMP_ACTION
=SQL IFEXIST=STD_IMP_ACTION=
DROP TABLE STD_IMP_ACTION
##
STD_IMP_TRANSCO
=SQL IFEXIST=STD_IMP_TRANSCO=
DROP TABLE STD_IMP_TRANSCO
##
STD_IMP_DOSSIER
=SQL IFEXIST=STD_IMP_DOSSIER=
DROP TABLE STD_IMP_DOSSIER
##
STD_IMP_TRAITEMENT
=SQL IFEXIST=STD_IMP_TRAITEMENT=
DROP TABLE STD_IMP_TRAITEMENT
##
STD_IMP_ACTION_TRANSCO
=SQL IFEXIST=STD_IMP_ACTION_TRANSCO=
DROP TABLE STD_IMP_ACTION_TRANSCO
##
STD_IMP_PERIODE_BLOCAGE_PAIE
=SQL IFEXIST=STD_IMP_PERIODE_BLOCAGE_PAIE=
DROP TABLE STD_IMP_PERIODE_BLOCAGE_PAIE
##
STD_IMP_ACTION
==
¿  CREATE TABLE STD_IMP_ACTION ¿   (	ACTION VARCHAR2(2), ¿	LIBELLE VARCHAR2(30), ¿	CARTE VARCHAR2(3), ¿	OPERATION NUMBER(10,0), ¿	NOM_PAGE VARCHAR2(100), ¿	ORDRE NUMBER, ¿	 PRIMARY KEY (ACTION, CARTE, OPERATION, NOM_PAGE)¿   ¿   )  
##
STD_IMP_ACTION_MAPPING
==
¿  CREATE TABLE STD_IMP_ACTION_MAPPING ¿   (	ACTION VARCHAR2(2), ¿	CARTE VARCHAR2(3), ¿	NOM_DONNEE VARCHAR2(30), ¿	VALEUR_DEFAUT VARCHAR2(4000), ¿	TRTPARTICULIER VARCHAR2(4000), ¿	 PRIMARY KEY (ACTION, CARTE, NOM_DONNEE)¿   ¿   )  
##
STD_IMP_ACTION_TRANSCO
==
¿  CREATE TABLE STD_IMP_ACTION_TRANSCO ¿   (	ACTION VARCHAR2(3), ¿	TRTPARTICULIER VARCHAR2(4000), ¿	 PRIMARY KEY (ACTION)¿   ¿   )  
##
STD_IMP_DESCRIPTION
==
¿  CREATE TABLE STD_IMP_DESCRIPTION ¿   (	CARTE VARCHAR2(3), ¿	SEQUENCE NUMBER(5,0), ¿	DONNEE_INT VARCHAR2(100), ¿	 PRIMARY KEY (CARTE, SEQUENCE)¿   ¿   )  
##
STD_IMP_DOSSIER
==
¿  CREATE TABLE STD_IMP_DOSSIER ¿   (	ID_DOSSIER NUMBER(10,0), ¿	ID_TRAITEMENT NUMBER(6,0), ¿	ACTION VARCHAR2(2), ¿	STATUT VARCHAR2(30), ¿	DATE_AJOUT DATE, ¿	DATE_INTEGRATION DATE, ¿	MATRIC VARCHAR2(32), ¿	MATREP VARCHAR2(11), ¿	DATE_EFF DATE, ¿	SEQUENCE_DONNEES VARCHAR2(500), ¿	DOS_NUM NUMBER(38,3), ¿	NOM VARCHAR2(100), ¿	PRENOM VARCHAR2(100), ¿	CODETB VARCHAR2(20), ¿	 PRIMARY KEY (ID_DOSSIER)¿   ¿   )  
##
STD_IMP_DOSSIER_DONNEES
==
¿  CREATE TABLE STD_IMP_DOSSIER_DONNEES ¿   (	ID_TRT NUMBER(6,0), ¿	ID_LIGNE NUMBER(10,0), ¿	ID_DOSSIER NUMBER(6,0), ¿	DATE_AJOUT TIMESTAMP (6), ¿	MATRIC VARCHAR2(32), ¿	MATREP VARCHAR2(11), ¿	DATE_EFF DATE, ¿	CARTE VARCHAR2(3), ¿	ACTION VARCHAR2(2), ¿	DONNEES VARCHAR2(4000), ¿	 PRIMARY KEY (ID_TRT, ID_LIGNE)¿   ¿   )  
##
STD_IMP_PERIODE_BLOCAGE_PAIE
==
¿  CREATE TABLE STD_IMP_PERIODE_BLOCAGE_PAIE ¿   (	DATE_DEBUT DATE, ¿	DATE_FIN DATE, ¿	 PRIMARY KEY (DATE_DEBUT)¿   ¿   )  
##
STD_IMP_STATUT
==
¿  CREATE TABLE STD_IMP_STATUT ¿   (	CODE VARCHAR2(30), ¿	ORDRE NUMBER, ¿	FLAG_USER_MODIFIABLE VARCHAR2(1), ¿	FLAG_USER_SELECT VARCHAR2(1), ¿	 PRIMARY KEY (CODE)¿   ¿   )  
##
STD_IMP_TRAITEMENT
==
¿  CREATE TABLE STD_IMP_TRAITEMENT ¿   (	ID_TRT NUMBER(6,0), ¿	FICHIER VARCHAR2(200), ¿	DATE_AJOUT TIMESTAMP (6), ¿	ETAT VARCHAR2(20), ¿	 CONSTRAINT CLE_TRAITEMENT PRIMARY KEY (ID_TRT)¿   ¿   )  
##
STD_IMP_TRAITEMENT_ERREUR
==
¿  CREATE TABLE STD_IMP_TRAITEMENT_ERREUR ¿   (	ID_TRT NUMBER(6,0), ¿	BATCH VARCHAR2(20), ¿	MATRIC VARCHAR2(32), ¿	ACTION VARCHAR2(2), ¿	LIGNE NUMBER(6,0), ¿	ID_DOSSIER NUMBER(6,0), ¿	DONNEE VARCHAR2(20), ¿	VALEUR VARCHAR2(250), ¿	TYPEERR VARCHAR2(1), ¿	LIBELLE VARCHAR2(4000), ¿	LIBELLE_DONNEE VARCHAR2(250), ¿	DATE_ERREUR TIMESTAMP (6), ¿	PRIORITAIRE VARCHAR2(1)¿   )  
##
STD_IMP_ACTION (ACTION,LIBELLE,CARTE,OPERATION,NOM_PAGE,ORDRE)
'B','Reprise','*','53000','WKF_SUSP_OP1_EC3_REPRISE','5'
'CC','Modif. cnt','*','50200','*','3'
'H','Embauche','*','50000','*','1'
'R','Réembauche','*','50000','*','2'
'S','Suspension','*','53000','*','4'
'T','Départ','*','50100','*','6'
'U','Mise à jour','ADR','0','ADR_FIS','7'
'U','Mise à jour','BQE','0','BQE_SAL','7'
'U','Mise à jour','CHS','0','CHS','7'
'U','Mise à jour','CNT','0','CNT_COURANT','7'
'U','Mise à jour','ENF','0','ENF_POP','7'
'U','Mise à jour','ETC','0','ETC','7'
'U','Mise à jour','ETC','0','PRE','7'
'Z','Aucune action','*','0','*','8'
##
STD_IMP_ACTION_MAPPING (ACTION,CARTE,NOM_DONNEE,VALEUR_DEFAUT,TRTPARTICULIER)
'B','CNT','CHOIX_REPRISE','O',NULL
'B','CNT','TRAV_DSDEFFET_NEW','$DATE_EFF',NULL
'CC','CNT','*',NULL,NULL
'CC','CNT','CODSTE',NULL,'select ratste from dic_etabli2 where codetb_etb=$CODETB'
'CC','CNT','MODIFAFF','O',NULL
'CC','CNT','MODIFCLA','N',NULL
'CC','CNT','MODIFCNT','O',NULL
'CC','CNT','MODIFDSN','N',NULL
'CC','CNT','MODIFFRS','N',NULL
'CC','CNT','MODIFHOR','N',NULL
'CC','CNT','MODIFREM','O',NULL
'CC','CNT','RENOUVCDD','O',NULL
'CC','CNT','TRANSFOCDD','O',NULL
'CC','CNT','TRAV_DSDEFFET','$DATE_EFF',NULL
'H','BQE','*',NULL,NULL
'H','CNT','*',NULL,NULL
'H','CNT','CL_ZEPHIRID','$MATREP',NULL
'H','CNT','CODSTE',NULL,'select ratste from dic_etabli2 where codetb_etb=$CODETB'
'H','ENF','*',NULL,NULL
'H','ETC','*',NULL,NULL
'MU','CNT','*',NULL,NULL
'MU','CNT','CODSTE',NULL,'select ratste from dic_etabli2 where codetb_etb=$CODETB'
'MU','CNT','DSMUTA','$DATE_EFF',NULL
'R','BQE','*',NULL,NULL
'R','CNT','*',NULL,NULL
'R','CNT','CODSTE',NULL,'select ratste from dic_etabli2 where codetb_etb=$CODETB'
'R','ENF','*',NULL,NULL
'R','ETC','*',NULL,NULL
'S','CNT','DSA301',NULL,NULL
'S','CNT','DSFSUS',NULL,NULL
'S','CNT','ZA962',NULL,NULL
'T','CNT','DSDJTP',NULL,NULL
'T','CNT','DSFCN',NULL,NULL
'T','CNT','DSSAD',NULL,NULL
'T','CNT','ZA701',NULL,NULL
'U','BQE','*',NULL,NULL
'U','CNT','*',NULL,NULL
'U','ENF','*',NULL,NULL
'U','ETC','*',NULL,NULL
##
STD_IMP_ACTION_TRANSCO (ACTION,TRTPARTICULIER)
'B',NULL
'CC','SELECT CASE WHEN (CODETB!=$CODETB) THEN (''MU'') ELSE (''CC'') END FROM SECUMATRIC, DIC_ADM_PERSO WHERE DIC_ADM_PERSO.MATRIC=SECUMATRIC.MATRIC and DIC_ADM_PERSO.MATREP=$MATREP AND DIC_ADM_PERSO.DATE_EFF_CONTRAT=(SELECT MAX(p2.DATE_EFF_CONTRAT) FROM DIC_ADM_PERSO p2 WHERE p2.MATREP=$MATREP)'
'H',NULL
'R',NULL
'S',NULL
'T',NULL
'U',NULL
##
STD_IMP_DESCRIPTION (CARTE,SEQUENCE,DONNEE_INT)
'*','1','ID_CARTE'
'*','2','ACTION'
'BQE','10','ECRBQE'
'BQE','20','SEQBQE'
'BQE','30','MODPAI_BQE'
'BQE','40','NODEST'
'BQE','50','LIBQE'
'BQE','60','IBAPA'
'BQE','70','IBACC'
'BQE','80','IBA2'
'BQE','90','IBA3'
'BQE','100','IBA4'
'BQE','110','IBA5'
'BQE','120','IBA6'
'BQE','130','IBA7'
'BQE','140','IBA8'
'BQE','150','IBA9'
'BQE','160','BIC'
'CNT','10','DATE_EFF'
'CNT','20','DSDCN'
'CNT','30','DSFCN'
'CNT','40','ZT061'
'CNT','50','ZA700'
'CNT','70','DSFCNP'
'CNT','80','DSDCP'
'CNT','90','DSFCP'
'CNT','100','ESSAI'
'CNT','110','DSES1'
'CNT','120','CODETB'
'CNT','130','DSSAD'
'CNT','140','ZA701'
'CNT','150','DSAGP'
'CNT','160','DSANCR'
'CNT','170','DSATO'
'CNT','180','AFFS02'
'ENF','10','DSNAI_E'
'ENF','20','RANG'
'ENF','30','PREENF'
'ENF','40','NOMENF'
'ENF','50','SEXENF'
'ENF','60','ENFCHA'
'ENF','70','DSDCEN'
'ENF','80','ENFHAN'
'ETC','10','TITRE'
'ETC','30','NOM'
'ETC','40','NOMJF'
'ETC','50','PRENOM'
'ETC','60','DSNAI'
'ETC','80','NATACT'
'ETC','90','MELPRO'
##
STD_IMP_STATUT (CODE,ORDRE,FLAG_USER_MODIFIABLE,FLAG_USER_SELECT)
'A retraiter','4','O','O'
'A traiter','2','O','N'
'A traiter (période paie)','3','O','O'
'Erreur','1','O','N'
'Marqué comme annulé','7','O','O'
'Terminé','6','N','N'
'Tous','0','N','N'
'Workflow en cours','5','N','N'
'Terminé sans action','8','N','N'
##
SYS_VARSYS
=IF_ROW_NOTEXIST=
'STD','MODE_ENFANT','2','Entier','1 : On supprime tous les enfants puis on les recréé tous, 2 : le client envoie l''identifiant de l''enfant et on peut directement le mettre à jour'
'STD','MODE_ROUTAGE','TOUS_EXPERT_CONNUS','Texte','Deux modes sont possibles:¿TOUS_EXPERT_CONNUS pour que les wkf générés par interfaces soient visibles pour tous les Experts.¿VALIDEUR pour que les wkf générés par l''interfaces soient visibles uniquement par les groupes de valideurs positionnés dans HRO.'
'STD','PREFIXE_FICHIER','IMPGAP_','Texte','Préfixe des fichiers à importer'
'STD','VALEUR_NON_RENSEIGNEE','#','Texte','Valeur échappatoire pour ne pas prendre en compte cette donnée dans l''interface.'
##
SYS_TRT_TOMAKE
=IF_ROW_NOTEXIST=
'Traitement_ImportGapIntegrationRD','H0.01'
##
SYS_TRT_TOMAKELIB
=IF_ROW_NOTEXIST=
'Traitement_ImportGapIntegrationRD','Import GAP - Traitement d''intégration'
##
STD_TABIDENT
==
delete from STD_TABIDENT where IDENT in ('STD_IMP_ACTION','STD_IMP_ACTION_MAPPING','STD_IMP_DESCRIPTION','STD_IMP_STATUT','STD_IMP_PERIODE_BLOCAGE_PAIE','STD_IMP_DOSSIER','STD_IMP_DOSSIER_DONNEES','STD_IMP_TRAITEMENT','STD_IMP_TRAITEMENT_ERREUR')
'STD_IMP_ACTION','Import GAP - Paramétrage des actions','STD_IMP_ACTION','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_ACTION_MAPPING','STD_IMP_ACTION_MAPPING','STD_IMP_ACTION_MAPPING','U',NULL,'TG','O','O','N','Import GAP - Mapping des zones','0','0'
'STD_IMP_DESCRIPTION','Import GAP - Description du fichier csv','STD_IMP_DESCRIPTION','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_DOSSIER','Import GAP - Dossiers intégrés ou à intégrer','STD_IMP_DOSSIER','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_DOSSIER_DONNEES','Import GAP - Lignes des dossiers intégrés ou à int','STD_IMP_DOSSIER_DONNEES','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_PERIODE_BLOCAGE_PAIE','Import GAP - Période blocage paie','STD_IMP_PERIODE_BLOCAGE_PAIE','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_STATUT','Import GAP - Paramétrage des statuts','STD_IMP_STATUT','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_TRAITEMENT','Import GAP - Liste des fichiers chargés','STD_IMP_TRAITEMENT','U',NULL,'TG','O','O','N',NULL,'0','0'
'STD_IMP_TRAITEMENT_ERREUR','Import GAP - Erreurs survenus','STD_IMP_TRAITEMENT_ERREUR','U',NULL,'TG','O','O','N','Erreurs survenus lors de l''import des fichiers ou lors de l''intégration dans la GAP','0','0'
##
STD_TABDESCCOL
==
delete from STD_TABDESCCOL where IDENT in ('STD_IMP_ACTION','STD_IMP_ACTION_MAPPING','STD_IMP_DESCRIPTION','STD_IMP_STATUT','STD_IMP_PERIODE_BLOCAGE_PAIE','STD_IMP_DOSSIER','STD_IMP_DOSSIER_DONNEES','STD_IMP_TRAITEMENT','STD_IMP_TRAITEMENT_ERREUR')
'STD_IMP_ACTION','0','ACTION','O','O','O','O',NULL,NULL,NULL,'ACTION','X','2','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_ACTION','1','LIBELLE','N','N','O','O',NULL,NULL,NULL,'LIBELLE','X','30','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_ACTION','2','CARTE','O','O','O','O',NULL,NULL,NULL,'CARTE','X','3','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_ACTION','3','OPERATION','N','N','O','O',NULL,NULL,NULL,'OPERATION','N','10','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_ACTION','4','NOM_PAGE','N','N','O','O',NULL,NULL,NULL,'NOM_PAGE','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'STD_IMP_ACTION','5','ORDRE','N','N','O','O',NULL,NULL,NULL,'ORDRE','9','127','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'STD_IMP_ACTION_MAPPING','0','ACTION','O','O','O','O',NULL,NULL,NULL,'ACTION','X','2','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_ACTION_MAPPING','1','CARTE','O','O','O','O',NULL,NULL,NULL,'CARTE','X','3','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_ACTION_MAPPING','2','NOM_DONNEE','O','O','O','O',NULL,NULL,NULL,'NOM_DONNEE','X','30','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_ACTION_MAPPING','3','VALEUR_DEFAUT','N','N','O','O',NULL,NULL,NULL,'VALEUR_DEFAUT','X','4000','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_ACTION_MAPPING','4','TRTPARTICULIER','N','N','O','O',NULL,NULL,NULL,'TRTPARTICULIER','X','4000','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'STD_IMP_DESCRIPTION','0','CARTE','O','O','O','O',NULL,NULL,NULL,'CARTE','X','3','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_DESCRIPTION','1','SEQUENCE','O','O','O','O',NULL,NULL,NULL,'SEQUENCE','N','5','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_DESCRIPTION','2','DONNEE_INT','N','N','O','O',NULL,NULL,NULL,'DONNEE_INT','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_DOSSIER','0','ID_DOSSIER','O','O','O','O',NULL,NULL,NULL,'ID_DOSSIER','N','10','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_DOSSIER','1','ID_TRAITEMENT','N','N','O','O',NULL,NULL,NULL,'ID_TRAITEMENT','N','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_DOSSIER','2','ACTION','N','N','O','O',NULL,NULL,NULL,'ACTION','X','2','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_DOSSIER','3','STATUT','N','N','O','O',NULL,NULL,NULL,'STATUT','X','30','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_DOSSIER','4','DATE_AJOUT','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_AJOUT','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'STD_IMP_DOSSIER','5','DATE_INTEGRATION','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_INTEGRATION','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'STD_IMP_DOSSIER','6','MATRIC','N','N','O','O',NULL,NULL,NULL,'MATRIC','X','32','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'7','N',NULL
'STD_IMP_DOSSIER','7','MATREP','N','N','O','O',NULL,NULL,NULL,'MATREP','X','11','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'8','N',NULL
'STD_IMP_DOSSIER','8','DATE_EFF','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_EFF','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'9','N',NULL
'STD_IMP_DOSSIER','9','SEQUENCE_DONNEES','N','N','O','O',NULL,NULL,NULL,'SEQUENCE_DONNEES','X','500','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'10','N',NULL
'STD_IMP_DOSSIER','10','DOS_NUM','N','N','O','O',NULL,NULL,NULL,'DOS_NUM','9','3','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'11','N',NULL
'STD_IMP_DOSSIER','11','NOM','N','N','O','O',NULL,NULL,NULL,'NOM','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'12','N',NULL
'STD_IMP_DOSSIER','12','PRENOM','N','N','O','O',NULL,NULL,NULL,'PRENOM','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'13','N',NULL
'STD_IMP_DOSSIER','13','CODETB','N','N','O','O',NULL,NULL,NULL,'CODETB','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'14','N',NULL
'STD_IMP_DOSSIER_DONNEES','0','ID_TRT','O','O','O','O',NULL,NULL,NULL,'ID_TRT','N','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_DOSSIER_DONNEES','1','ID_LIGNE','O','O','O','O',NULL,NULL,NULL,'ID_LIGNE','N','10','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_DOSSIER_DONNEES','2','ID_DOSSIER','N','N','O','O',NULL,NULL,NULL,'ID_DOSSIER','N','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_DOSSIER_DONNEES','3','DATE_AJOUT','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_AJOUT','D','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_DOSSIER_DONNEES','4','MATRIC','N','N','O','O',NULL,NULL,NULL,'MATRIC','X','32','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'STD_IMP_DOSSIER_DONNEES','5','MATREP','N','N','O','O',NULL,NULL,NULL,'MATREP','X','11','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'STD_IMP_DOSSIER_DONNEES','6','DATE_EFF','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_EFF','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'7','N',NULL
'STD_IMP_DOSSIER_DONNEES','7','CARTE','N','N','O','O',NULL,NULL,NULL,'CARTE','X','3','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'8','N',NULL
'STD_IMP_DOSSIER_DONNEES','8','ACTION','N','N','O','O',NULL,NULL,NULL,'ACTION','X','2','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'9','N',NULL
'STD_IMP_DOSSIER_DONNEES','9','DONNEES','N','N','O','O',NULL,NULL,NULL,'DONNEES','X','4000','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'10','N',NULL
'STD_IMP_PERIODE_BLOCAGE_PAIE','0','DATE_DEBUT','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_DEBUT','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_PERIODE_BLOCAGE_PAIE','1','DATE_FIN','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_FIN','D','0','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_STATUT','0','CODE','O','O','O','O',NULL,NULL,NULL,'CODE','X','30','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_STATUT','1','ORDRE','N','N','O','O',NULL,NULL,NULL,'ORDRE','9','127','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_STATUT','2','FLAG_USER_MODIFIABLE','N','N','O','O',NULL,NULL,NULL,'FLAG_USER_MODIFIABLE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_STATUT','3','FLAG_USER_SELECT','N','N','O','O',NULL,NULL,NULL,'FLAG_USER_SELECT','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_TRAITEMENT','0','ID_TRT','O','O','O','O',NULL,NULL,NULL,'ID_TRT','N','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_TRAITEMENT','1','FICHIER','N','N','O','O',NULL,NULL,NULL,'FICHIER','X','200','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_TRAITEMENT','2','DATE_AJOUT','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_AJOUT','D','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_TRAITEMENT','3','ETAT','N','N','O','O',NULL,NULL,NULL,'ETAT','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','0','ID_TRT','N','N','O','O',NULL,NULL,NULL,'ID_TRT','N','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','1','BATCH','N','N','O','O',NULL,NULL,NULL,'BATCH','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','2','MATRIC','N','N','O','O',NULL,NULL,NULL,'MATRIC','X','32','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','3','ACTION','N','N','O','O',NULL,NULL,NULL,'ACTION','X','2','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','4','LIGNE','N','N','O','O',NULL,NULL,NULL,'LIGNE','N','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','5','ID_DOSSIER','N','N','O','O',NULL,NULL,NULL,'ID_DOSSIER','N','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','6','DONNEE','N','N','O','O',NULL,NULL,NULL,'DONNEE','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'7','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','7','VALEUR','N','N','O','O',NULL,NULL,NULL,'VALEUR','X','250','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'8','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','8','TYPEERR','N','N','O','O',NULL,NULL,NULL,'TYPEERR','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'9','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','9','LIBELLE','N','N','O','O',NULL,NULL,NULL,'LIBELLE','X','4000','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'10','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','10','LIBELLE_DONNEE','N','N','O','O',NULL,NULL,NULL,'LIBELLE_DONNEE','X','250','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'11','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','11','DATE_ERREUR','N','N','O','O','dd.mm.yyyy',NULL,NULL,'DATE_ERREUR','D','6','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'12','N',NULL
'STD_IMP_TRAITEMENT_ERREUR','12','PRIORITAIRE','N','N','O','O',NULL,NULL,NULL,'PRIORITAIRE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'13','N',NULL
##
META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION)
==
delete from META_ECRAN where NOM_PAGE in ('STD_ANO_WD', 'ECR_STD_DOSSIER_INTERFACES')
'*','ECR_STD_DOSSIER_INTERFACES','Suivi des dossiers interfacés','RD','EXP','DIC_DONNEES_VIRTUELLES','STD','INT','GR_STD_DOSSIERS_INTERFACES','U','InterpreterSuiviDossierRD',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N'
'*','STD_ANO_WD','Suivi des anomalies HrCore','RD','EXP','DIC_DONNEES_VIRTUELLES','STD','INT','STD_ANO_WD_ECR','U',NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N'
##
REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION)
==
delete FROM REF_ECRAN where NOM_PAGE in ('STD_ANO_WD', 'ECR_STD_DOSSIER_INTERFACES')
'*','STD_ANO_WD','Suivi des anomalies HrCore','RD','EXP','DIC_DONNEES_VIRTUELLES','STD','INT','STD_ANO_WD_ECR','U',NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N'
'*','ECR_STD_DOSSIER_INTERFACES','Suivi des dossiers interfacés','RD','EXP','DIC_DONNEES_VIRTUELLES','STD','INT','GR_STD_DOSSIERS_INTERFACES','U','InterpreterSuiviDossierRD',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE)
==
delete FROM META_GROUPE_DONNEES where ID_GROUPE in ('GR_STD_DOSSIERS_INTERFACES_RECH','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_ANO_WD_ECR','GR_STD_DOSSIERS_INTERFACES')
'*','STD_ANO_WD_ECR','#LIBELLE_1','1',NULL,'FormTitreµCritères d''affichage des anomalies',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_PER_ANO_WD1','2',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_PER_ANO_WD2','3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_1','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_MAT_ANO_WD','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_NOM_ANO_WD','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_2','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_ETB_ANO_WD','10',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_3','11',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_MSG_ANO_WD','12',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_4','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_5','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#LIBELLE_2','16','N','FormTitreµConsultation des anomalies de l''interface HrCore',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#TABLEAU_1','17',NULL,NULL,'TAB_STD_ANO_WD','1',NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_4','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#LIBELLE_1','22',NULL,'FormTitreµInfos',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_RECH','#TABLEAU_1','1',NULL,NULL,'TAB_STD_DOSSIERS_INTERFACE','46',NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#GROUPE_1','27',NULL,'GR_STD_DOSSIERS_INTERFACES_RECH',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#GROUPE_2','28',NULL,'GR_STD_DOSSIERS_INTERFACES_DETAILS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#TABLEAU_1','30',NULL,NULL,'TAB_STD_DOSSIERS_INTERFACE_DETAILS','1',NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_MATREP_ANO_WD','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_5','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_1','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_2','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_3','12',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_4','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_5','17',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_6','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#LIBELLE_1','2',NULL,'FormTitreµCritères d''affichage des dossiers ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_MATREP_ANO_WD','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_ACT_INTER_WD','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_ETB_ANO_WD','11',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_MAT_ANO_WD','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_NOM_ANO_WD','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_PER_ANO_WD1','3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_PER_ANO_WD2','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_STA_INTER_WD','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#BOUTONS','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_NEW_STATUT','27',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#BOUTONPERSO_Valider','28',NULL,'Valider',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#BOUTONPERSO_Interroger','5',NULL,'Rechercher',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_ID_DOSSIER','1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_STATUT','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_DOSSIER_DESCR','2','O',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_3','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#BOUTONS','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE)
==
delete FROM REF_GROUPE_DONNEES where ID_GROUPE in ('GR_STD_DOSSIERS_INTERFACES_RECH','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_ANO_WD_ECR','GR_STD_DOSSIERS_INTERFACES')
'*','STD_ANO_WD_ECR','#BOUTONS','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_1','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_2','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_3','11',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_4','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#EOL_5','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#LIBELLE_1','1',NULL,'FormTitreµCritères d''affichage des anomalies',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#LIBELLE_2','16','N','FormTitreµConsultation des anomalies de l''interface HrCore',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','#TABLEAU_1','17',NULL,NULL,'TAB_STD_ANO_WD','1',NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_MATREP_ANO_WD','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_ETB_ANO_WD','10',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_MAT_ANO_WD','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_MSG_ANO_WD','12',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_NOM_ANO_WD','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_PER_ANO_WD1','2',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_ANO_WD_ECR','STD_TRAV_PER_ANO_WD2','3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#BOUTONS','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_1','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_2','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_3','12',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_4','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_5','17',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#EOL_6','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#GROUPE_1','27',NULL,'GR_STD_DOSSIERS_INTERFACES_RECH',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#GROUPE_2','28',NULL,'GR_STD_DOSSIERS_INTERFACES_DETAILS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','#LIBELLE_1','2',NULL,'FormTitreµCritères d''affichage des dossiers ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_MATREP_ANO_WD','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_ACT_INTER_WD','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_ETB_ANO_WD','11',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_MAT_ANO_WD','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_NOM_ANO_WD','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_PER_ANO_WD1','3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_PER_ANO_WD2','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES','STD_TRAV_STA_INTER_WD','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#BOUTONPERSO_Interroger','5',NULL,'Rechercher',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#BOUTONPERSO_Valider','28',NULL,'Valider',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_ID_DOSSIER','1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_RECH','#TABLEAU_1','1',NULL,NULL,'TAB_STD_DOSSIERS_INTERFACE','46',NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_3','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_4','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#EOL_5','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#LIBELLE_1','22',NULL,'FormTitreµInfos',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','#TABLEAU_1','30',NULL,NULL,'TAB_STD_DOSSIERS_INTERFACE_DETAILS','1',NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_NEW_STATUT','27',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_STATUT','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_IMP_DOSSIER_DESCR','2','O',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
==
delete  FROM META_GROUPE_DONNEES_INFO where ID_GROUPE in ('GR_STD_DOSSIERS_INTERFACES_RECH','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_ANO_WD_ECR','GR_STD_DOSSIERS_INTERFACES')
'*','STD_ANO_WD_ECR',NULL,NULL,NULL,'N',NULL,NULL,NULL,'Tableau des anomalies des interfaces',NULL,NULL
'*','GR_STD_DOSSIERS_INTERFACES',NULL,NULL,NULL,'N',NULL,NULL,NULL,'Groupe pour Suivi des dossiers interfacés','Groupe pour Suivi des dossiers interfacés',NULL
'*','GR_STD_DOSSIERS_INTERFACES_RECH',NULL,NULL,NULL,'O',NULL,NULL,NULL,'Suivi',NULL,NULL
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS',NULL,NULL,NULL,'O',NULL,NULL,NULL,'Détail dossier',NULL,NULL
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
==
delete FROM REF_GROUPE_DONNEES_INFO where ID_GROUPE in ('GR_STD_DOSSIERS_INTERFACES_RECH','GR_STD_DOSSIERS_INTERFACES_DETAILS','STD_ANO_WD_ECR','GR_STD_DOSSIERS_INTERFACES')
'*','STD_ANO_WD_ECR',NULL,NULL,NULL,'N',NULL,NULL,NULL,'Tableau des anomalies des interfaces',NULL,NULL
'*','GR_STD_DOSSIERS_INTERFACES',NULL,NULL,NULL,'N',NULL,NULL,NULL,'Groupe pour Suivi des dossiers interfacés','Groupe pour Suivi des dossiers interfacés',NULL
'*','GR_STD_DOSSIERS_INTERFACES_DETAILS',NULL,NULL,NULL,'O',NULL,NULL,NULL,'Détail dossier',NULL,NULL
'*','GR_STD_DOSSIERS_INTERFACES_RECH',NULL,NULL,NULL,'O',NULL,NULL,NULL,'Suivi',NULL,NULL
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
==
delete from META_DONNEE_GENERALE where NOM_DONNEE in ('STD_TRAV_PER_ANO_WD2', 'STD_TRAV_MAT_ANO_WD', 'STD_IMP_DOSSIER_DESCR', 'STD_IMP_NEW_STATUT', 'STD_IMP_ID_DOSSIER', 'STD_TRAV_PER_ANO_WD1', 'STD_IMP_STATUT', 'STD_TRAV_NOM_ANO_WD', 'STD_TRAV_MSG_ANO_WD', 'STD_TRAV_STA_INTER_WD', 'STD_TRAV_ACT_INTER_WD', 'STD_TRAV_ETB_ANO_WD', 'STD_MATREP_ANO_WD')
'*','STD_TRAV_MSG_ANO_WD','Z.Travail message anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,NULL,NULL,NULL,'O',NULL,'N'
'*','STD_IMP_NEW_STATUT','Z.Travail nouveau statut import GAP','DIC_DONNEES_VIRTUELLES','X','30',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_MATREP_ANO_WD','Z.Travail MATREP anomalies','DIC_DONNEES_VIRTUELLES','X','11',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_IMP_DOSSIER_DESCR','Z.Travail ID dossier - description','DIC_DONNEES_VIRTUELLES','X','100',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_IMP_STATUT','Z.Travail nouveau statut import GAP','DIC_DONNEES_VIRTUELLES','X','30',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_TRAV_ACT_INTER_WD','Z. Travail action dossiers interfaces','DIC_DONNEES_VIRTUELLES','X','16',NULL,NULL,NULL,NULL,'GZ','O',NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_STA_INTER_WD','Z. Travail statut dossiers interfaces','DIC_DONNEES_VIRTUELLES','X','32',NULL,NULL,NULL,NULL,'GZ','O',NULL,NULL,NULL,NULL,'O',NULL,'N'
'*','STD_TRAV_MAT_ANO_WD','Z.Travail matricule anomalies','DIC_DONNEES_VIRTUELLES','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_NOM_ANO_WD','Z.Travail Nom anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_ETB_ANO_WD','Z.Travail établissement anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_PER_ANO_WD1','Z.Travail Date début analyse anomalies','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_PER_ANO_WD2','Z.Travail Date fin analyse anomalies','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_IMP_ID_DOSSIER','Z.Travail ID dossier','DIC_DONNEES_VIRTUELLES','9','9','0',NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'Y',NULL,'N'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
==
delete FROM REF_DONNEE_GENERALE where NOM_DONNEE in ('STD_TRAV_PER_ANO_WD2', 'STD_TRAV_MAT_ANO_WD', 'STD_IMP_DOSSIER_DESCR', 'STD_IMP_NEW_STATUT', 'STD_IMP_ID_DOSSIER', 'STD_TRAV_PER_ANO_WD1', 'STD_IMP_STATUT', 'STD_TRAV_NOM_ANO_WD', 'STD_TRAV_MSG_ANO_WD', 'STD_TRAV_STA_INTER_WD', 'STD_TRAV_ACT_INTER_WD', 'STD_TRAV_ETB_ANO_WD', 'STD_MATREP_ANO_WD')
'*','STD_IMP_NEW_STATUT','Z.Travail nouveau statut import GAP','DIC_DONNEES_VIRTUELLES','X','30',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_IMP_STATUT','Z.Travail nouveau statut import GAP','DIC_DONNEES_VIRTUELLES','X','30',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_MATREP_ANO_WD','Z.Travail MATREP anomalies','DIC_DONNEES_VIRTUELLES','X','11',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_ACT_INTER_WD','Z. Travail action dossiers interfaces','DIC_DONNEES_VIRTUELLES','X','16',NULL,NULL,NULL,NULL,'GZ','O',NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_ETB_ANO_WD','Z.Travail établissement anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_MAT_ANO_WD','Z.Travail matricule anomalies','DIC_DONNEES_VIRTUELLES','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_MSG_ANO_WD','Z.Travail message anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,NULL,NULL,NULL,'O',NULL,'N'
'*','STD_TRAV_NOM_ANO_WD','Z.Travail Nom anomalies','DIC_DONNEES_VIRTUELLES','X','55',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_PER_ANO_WD1','Z.Travail Date début analyse anomalies','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,NULL,NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_PER_ANO_WD2','Z.Travail Date fin analyse anomalies','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,NULL,NULL,'N'
'*','STD_TRAV_STA_INTER_WD','Z. Travail statut dossiers interfaces','DIC_DONNEES_VIRTUELLES','X','32',NULL,NULL,NULL,NULL,'GZ','O',NULL,NULL,NULL,NULL,'O',NULL,'N'
'*','STD_IMP_DOSSIER_DESCR','Z.Travail ID dossier - description','DIC_DONNEES_VIRTUELLES','X','100',NULL,NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'O',NULL,'N'
'*','STD_IMP_ID_DOSSIER','Z.Travail ID dossier','DIC_DONNEES_VIRTUELLES','9','9','0',NULL,NULL,NULL,'Z','O',NULL,'0',NULL,NULL,'Y',NULL,'N'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE in ('STD_TRAV_PER_ANO_WD2', 'STD_TRAV_MAT_ANO_WD', 'STD_IMP_DOSSIER_DESCR', 'STD_IMP_NEW_STATUT', 'STD_IMP_ID_DOSSIER', 'STD_TRAV_PER_ANO_WD1', 'STD_IMP_STATUT', 'STD_TRAV_NOM_ANO_WD', 'STD_TRAV_MSG_ANO_WD', 'STD_TRAV_STA_INTER_WD', 'STD_TRAV_ACT_INTER_WD', 'STD_TRAV_ETB_ANO_WD', 'STD_MATREP_ANO_WD')
'*','STD_TRAV_MSG_ANO_WD','*','Anomalie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_PER_ANO_WD2','*','au','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_ACT_INTER_WD','*','Action','N','radio','TAB_STD_TRAV_ACT_INTER_WD','1',NULL,NULL,NULL,'N','*',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
'*','STD_TRAV_STA_INTER_WD','*','Statut','N','radio','TAB_STD_TRAV_STA_INTER_WD','1',NULL,NULL,NULL,'N','Tous',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
'*','STD_TRAV_MAT_ANO_WD','*','Identifiant RH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_NOM_ANO_WD','*','Nom - Prénom','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_ETB_ANO_WD','*','Etablissement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_ACT_INTER_WD','ECR_STD_DOSSIER_INTERFACES','Action','N','radio','TAB_STD_TRAV_ACT_INTER_WD','1',NULL,NULL,NULL,'N','*',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
'*','STD_IMP_STATUT','*','Statut','N','span',NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_PER_ANO_WD1','*','Du','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_MATREP_ANO_WD','*','Matricule SIRH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_DOSSIER_DESCR','*','Description','N','span',NULL,NULL,'Id,Import,Intégration,Statut,Identifiant RH,Matricule SIRH,Nom,Etabliss.,Action,Wkf,Seq,Fichier',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_NEW_STATUT','*','Nouveau statut','N','text','TAB_STD_IMP_NEW_STATUT','1','Nouveau statut','STD_IMP_NEW_STATUT','STD_IMP_STATUT','N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_ID_DOSSIER','*','Id Dossier','N','text','TAB_STD_DOSSIERS_INTERFACE','46','Id,Import,Intégration,Statut,Identifiant RH,Matricule SIRH,Nom,Etabliss.,Action,Wkf,Seq,Fichier','STD_IMP_ID_DOSSIER,STD_IMP_DOSSIER_DESCR,STD_IMP_STATUT',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE in ('STD_TRAV_PER_ANO_WD2', 'STD_TRAV_MAT_ANO_WD', 'STD_IMP_DOSSIER_DESCR', 'STD_IMP_NEW_STATUT', 'STD_IMP_ID_DOSSIER', 'STD_TRAV_PER_ANO_WD1', 'STD_IMP_STATUT', 'STD_TRAV_NOM_ANO_WD', 'STD_TRAV_MSG_ANO_WD', 'STD_TRAV_STA_INTER_WD', 'STD_TRAV_ACT_INTER_WD', 'STD_TRAV_ETB_ANO_WD', 'STD_MATREP_ANO_WD')
'*','STD_IMP_DOSSIER_DESCR','*','Description','N','span',NULL,NULL,'Id,Import,Intégration,Statut,Identifiant RH,Matricule SIRH,Nom,Etabliss.,Action,Wkf,Seq,Fichier',NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_ID_DOSSIER','*','Id Dossier','N','text','TAB_STD_DOSSIERS_INTERFACE','46','Id,Import,Intégration,Statut,Identifiant RH,Matricule SIRH,Nom,Etabliss.,Action,Wkf,Seq,Fichier','STD_IMP_ID_DOSSIER,STD_IMP_DOSSIER_DESCR,STD_IMP_STATUT',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_NEW_STATUT','*','Nouveau statut','N','text','TAB_STD_IMP_NEW_STATUT','1','Nouveau statut','STD_IMP_NEW_STATUT','STD_IMP_STATUT','N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_IMP_STATUT','*','Statut','N','span',NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_MATREP_ANO_WD','*','Matricule SIRH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_ACT_INTER_WD','*','Action','N','radio','TAB_STD_TRAV_ACT_INTER_WD','1',NULL,NULL,NULL,'N','*',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
'*','STD_TRAV_ACT_INTER_WD','ECR_STD_DOSSIER_INTERFACES','Action','N','radio','TAB_STD_TRAV_ACT_INTER_WD','1',NULL,NULL,NULL,'N','*',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
'*','STD_TRAV_ETB_ANO_WD','*','Etablissement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_MAT_ANO_WD','*','Identifiant RH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_MSG_ANO_WD','*','Anomalie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_NOM_ANO_WD','*','Nom - Prénom','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_PER_ANO_WD1','*','Du','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_PER_ANO_WD2','*','au','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N',NULL,NULL,NULL
'*','STD_TRAV_STA_INTER_WD','*','Statut','N','radio','TAB_STD_TRAV_STA_INTER_WD','1',NULL,NULL,NULL,'N','Tous',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'O','N',NULL,NULL,NULL
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
==
delete FROM SYS_REQUETES_JSP where (NOMPAGE, IDREQUETE) in (('TAB_STD_IMP_NEW_STATUT', '1'), ('TAB_STD_TRAV_ACT_INTER_WD', '1'), ('TAB_STD_TRAV_STA_INTER_WD', '1'), ('TAB_STD_DOSSIERS_INTERFACE_DETAILS', '1'), ('TAB_STD_DOSSIERS_INTERFACE', '46'), ('TAB_STD_ANO_WD', '1'))
'TAB_STD_ANO_WD','1','Utilisateur','STD_IMP_TRAITEMENT_ERREUR ERR ¿LEFT OUTER JOIN STD_IMP_TRAITEMENT TRT ON ERR.ID_TRT = TRT.ID_TRT ¿LEFT OUTER JOIN STD_IMP_DOSSIER DOS ON ERR.ID_DOSSIER = DOS.ID_DOSSIER ¿LEFT OUTER JOIN STD_STRUC_ENTITE ETB ON DOS.CODETB = ETB.code_entite','TO_CHAR(DATE_ERREUR^''DD.MM.YYYY''), ERR.MATRIC, DOS.MATREP, NOM || '' '' || PRENOM, CODE_ENTITE || '' - '' || ETB.LIBELLE, ERR.ACTION, DONNEE, VALEUR, TYPEERR, ERR.LIBELLE, LIBELLE_DONNEE, TRT.FICHIER, ERR.LIGNE','TO_CHAR(DATE_ERREUR^''DD.MM.YYYY''), ERR.MATRIC, NOM || '' '' || PRENOM, CODE_ENTITE || '' - '' || ETB.LIBELLE, MATREP, ERR.ACTION, DONNEE, VALEUR, TYPEERR, ERR.LIBELLE, LIBELLE_DONNEE, TRT.FICHIER, ERR.LIGNE, ETB.NUMPAC','(''@STD_TRAV_PER_ANO_WD1@'' is null or DATE_ERREUR&gt;=to_timestamp(''@STD_TRAV_PER_ANO_WD1@'',''DD.MM.YYYY'')) and (''@STD_TRAV_PER_ANO_WD2@'' is null or trunc(DATE_ERREUR) &lt;=to_date(''@STD_TRAV_PER_ANO_WD2@'',''DD.MM.YYYY'')) and (''@STD_TRAV_MAT_ANO_WD@'' is null or ERR.MATRIC LIKE ''%%@STD_TRAV_MAT_ANO_WD@%'') and (''@STD_TRAV_ETB_ANO_WD@'' is null or CODE_ENTITE LIKE ''%%@STD_TRAV_ETB_ANO_WD@%'' or ETB.LIBELLE LIKE ''%%@STD_TRAV_ETB_ANO_WD@%'') and (''@STD_TRAV_CR_ANO_WD@'' is null or MATREP LIKE ''%%@STD_TRAV_CR_ANO_WD@%'') and (''@STD_TRAV_NOM_ANO_WD@'' is null or NOM LIKE ''%%@STD_TRAV_NOM_ANO_WD@%'' or PRENOM LIKE ''%%@COL_TRAV_NOM_ANO_WD@%'') and (''@STD_TRAV_MSG_ANO_WD@'' is null or LOWER(ERR.LIBELLE) LIKE LOWER(''%%@STD_TRAV_MSG_ANO_WD@%''))','0','false','ERR.DATE_ERREUR DESC, ERR.MATRIC ASC',NULL,'Consultation des anomalies de l''interface','Date de l''import, Identifiant RH, Matricule SIRH, Nom - Prénom, Etablissement, Action, Donnée, Valeur, Type d''erreur, Message d''anomalie, Libellé de la donnée, Fichier d''interface, N de ligne'
'TAB_STD_DOSSIERS_INTERFACE','46','Utilisateur','STD_IMP_DOSSIER dossier  INNER JOIN STD_IMP_TRAITEMENT trt on trt.ID_TRT =dossier.ID_TRAITEMENT LEFT OUTER JOIN STD_STRUC_ENTITE etablisment ON dossier.CODETB = etablisment.CODE_ENTITE LEFT OUTER JOIN WKF_TRACABILITE on WKF_TRACABILITE.DOS_NUM=dossier.DOS_NUM and WKF_TRACABILITE.TR_EMET=0 LEFT OUTER JOIN STD_IMP_TRAITEMENT_ERREUR E ON E.ID_DOSSIER=dossier.ID_DOSSIER AND E.PRIORITAIRE =''O''','dossier.ID_DOSSIER,TO_CHAR(dossier.DATE_AJOUT^''DD.MM.YYYY HH24:MI:SS''),TO_CHAR(dossier.DATE_INTEGRATION^''DD.MM.YYYY HH24:MI:SS''),TO_CHAR(dossier.DATE_EFF^''DD.MM.YYYY''),CASE WHEN WKF_TRACABILITE.DOS_NUM IS NOT NULL THEN DECODE(DOS_FINISHED^''true''^''Terminé''^''Workflow en cours'')  ELSE dossier.STATUT END,dossier.MATRIC,  dossier.MATREP,  dossier.NOM || ''  '' || dossier.PRENOM,  dossier.CODETB || '' - '' || etablisment.libelle,  (select distinct LIBELLE from STD_IMP_ACTION where STD_IMP_ACTION.ACTION=dossier.ACTION), WKF_TRACABILITE.DOS_NUM, dossier.SEQUENCE_DONNEES,E.LIBELLE,trt.FICHIER','dossier.ID_DOSSIER,dossier.NOM || ''  '' || dossier.PRENOM,CASE WHEN WKF_TRACABILITE.DOS_NUM IS NOT NULL THEN DECODE(DOS_FINISHED^''true''^''Terminé''^''Workflow en cours'')  ELSE dossier.STATUT END, NUMPAC','(''@STD_TRAV_PER_ANO_WD1@'' is null or dossier.DATE_AJOUT>=to_timestamp(''@STD_TRAV_PER_ANO_WD1@'',''DD.MM.YYYY''))  and (''@STD_TRAV_PER_ANO_WD2@'' is null or trunc(dossier.DATE_AJOUT) <=to_date(''@STD_TRAV_PER_ANO_WD2@'',''DD.MM.YYYY''))  and (''@STD_TRAV_MAT_ANO_WD@'' is null or dossier.MATRIC LIKE ''%%@STD_TRAV_MAT_ANO_WD@%'')  and (''@STD_TRAV_ETB_ANO_WD@'' is null or (dossier.CODETB ||  etablisment.libelle) LIKE ''%%@STD_TRAV_ETB_ANO_WD@%'')  and (''@STD_MATREP_ANO_WD@'' is null or dossier.MATREP LIKE ''%%@STD_MATREP_ANO_WD@%'')  and (''@STD_TRAV_NOM_ANO_WD@'' is null or UPPER(dossier.NOM || '' '' || dossier.PRENOM) LIKE ''%%@STD_TRAV_NOM_ANO_WD@%'') and (NVL(''@STD_TRAV_ACT_INTER_WD@'', ''*'')=''*'' or dossier.ACTION=''@STD_TRAV_ACT_INTER_WD@'')  and (NVL(''@STD_TRAV_STA_INTER_WD@'', ''Tous'')=''Tous'' or (CASE WHEN WKF_TRACABILITE.DOS_NUM IS NOT NULL THEN DECODE(DOS_FINISHED,''true'',''Terminé'',''Workflow en cours'')  ELSE dossier.STATUT END) = ''@STD_TRAV_STA_INTER_WD@'')','0',NULL,'dossier.DATE_AJOUT desc, dossier.ID_DOSSIER',NULL,'Consultation des dossiers de l''interface CoreHr','#Id,#Date import, #Date intégration, #Date effet, #Statut, #Identifiant RH, #Matricule SIRH, #Nom - Prenom, #Etablissement, #Action, #N dossier Wkf, #Sequence donnees, #Erreur, #Fichier'
'TAB_STD_DOSSIERS_INTERFACE_DETAILS','1','Utilisateur','(¿select  ''''||ID_DOSSIER ID_DOSSIER, ''Données carte : '' || CARTE THEME, DONNEES from STD_IMP_DOSSIER_DONNEES union select ''''||ID_DOSSIER, ''Erreurs'', LIBELLE from STD_IMP_TRAITEMENT_ERREUR¿)¿','THEME,DONNEES',NULL,'''''||ID_DOSSIER=''@STD_IMP_ID_DOSSIER@'' OR ''''||ID_DOSSIER=''*''','0','false',NULL,NULL,'Suivi des dossiers interfacés - Données','Carte,Données'
'TAB_STD_IMP_NEW_STATUT','1','Utilisateur','STD_IMP_STATUT','CODE','CODE','FLAG_USER_SELECT=''O'' and ''%1'' in (select CODE from STD_IMP_STATUT where FLAG_USER_MODIFIABLE=''O'')','0','false','ORDRE',NULL,'Nouveau statut',NULL
'TAB_STD_TRAV_ACT_INTER_WD','1','Utilisateur','(select ACTION, LIBELLE, ORDRE from STD_IMP_ACTION union select ''*'', ''Toutes'', 0 from dual)','ACTION, LIBELLE, ORDRE','ACTION, LIBELLE',NULL,'0','true','ORDRE',NULL,'List des actions','ACTION, LIBELLE'
'TAB_STD_TRAV_STA_INTER_WD','1','Utilisateur','STD_IMP_STATUT','CODE, CODE','CODE, CODE',NULL,'0','false','ORDRE',NULL,'Statut','CODE, CODE'
##
SYS_SERVICELET
=IF_ROW_NOTEXIST=
'T','Traitement_ImportGapIntegrationRD','fr.adp.com.gxp.std.modules.lib.specif.importgap.Traitement_ImportGapIntegration','O'
'I','InterpreterSuiviDossierRD','fr.adp.com.gxp.std.modules.lib.specif.importgap.InterpreterSuiviDossier','O'
##
TAG_CHARSET=@éèç
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE,LONGUEUR_SAISIE,VAL_PATTERN)
=IF_ROW_NOTEXIST=
'*','RD_DSEMBRUP','Date de demande d''autorisation d''embauche','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'1208',NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_DSLICRUP','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1208',NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE,LONGUEUR_SAISIE,VAL_PATTERN)
=IF_ROW_NOTEXIST=
'*','RD_DSEMBRUP','Date de demande d''autorisation d''embauche','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'1208',NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_DSLICRUP','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1208',NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_DSEMBRUP','*','Date de demande d''autorisation d''embauche','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSLICRUP','*','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_DSLICRUP','WKF_INSERT_PEREMP_FERM_PER_VALID','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_DSLICRUP','WKF_NEW_PEREMP_FERM_PER_VALID','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_DSEMBRUP','*','Date de demande d''autorisation d''embauche','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSLICRUP','*','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_DSLICRUP','WKF_INSERT_PEREMP_FERM_PER_VALID','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_DSLICRUP','WKF_NEW_PEREMP_FERM_PER_VALID','Date d''autorisation, à défaut, date de demande d''autorisation de licenciement','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','RD_AFF_DSEPL',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des régles de gestion old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/ParametrageReglesGestion_v2.jsp'
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Organisation des écrans Workflow','Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM',null,'true')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM','Ext.adp.Modules.TraceApi.TraceAppelsAPI')
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Paramétrage des régles de gestion','Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs',null,'true')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageReglesGestionExtjs','Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM')
##
TAG_CHARSET=@éèç
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_DTDEB_TAD_AFF','Date début TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DTFIN_TAD_AFF','Date fin TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_ECR_FIN_TAD','Passage par l''écran chgt télétravail (fin de TAD)','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_ECR_MISE_TAD','Passage par l''écran chgt télétravail (mise en TAD)','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_GES_FIN_TAD','Gestion d''une fin de télétravail','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z',NULL,NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_GES_MISE_TAD','Gestion d''une mise en télétravail','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z',NULL,NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_MTFORF_TAD_AFF','Montant forfaitaire indemnité TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','9','3','2',NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,'X',NULL,'N',NULL
'*','RD_NBJRS_TAD_AFF','Nombre de jours TAD (hebdomadaire) pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','9','3','2',NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,'X',NULL,'N',NULL
'*','RD_RNV_TAD_AFF','Renouvellement TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_TAD','Télétravail','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_DTDEB_TAD_AFF','Date début TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DTFIN_TAD_AFF','Date fin TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_ECR_FIN_TAD','Passage par l''écran chgt télétravail (fin de TAD)','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_ECR_MISE_TAD','Passage par l''écran chgt télétravail (mise en TAD)','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_GES_FIN_TAD','Gestion d''une fin de télétravail','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z',NULL,NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_GES_MISE_TAD','Gestion d''une mise en télétravail','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z',NULL,NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_MTFORF_TAD_AFF','Montant forfaitaire indemnité TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','9','3','2',NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,'X',NULL,'N',NULL
'*','RD_NBJRS_TAD_AFF','Nombre de jours TAD (hebdomadaire) pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','9','3','2',NULL,NULL,NULL,'Z','O',NULL,'1192',NULL,NULL,'X',NULL,'N',NULL
'*','RD_RNV_TAD_AFF','Renouvellement TAD pour affichage actes gestion fin de TAD','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'Z','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_TAD','Télétravail','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1192',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_DTDEB_TAD_AFF','*','Date de début','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C','RD_CTRL_DEB_TAD',NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DTFIN_TAD_AFF','*','Date de fin','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_ECR_FIN_TAD','*','Passage par l''écran chgt télétravail (fin de TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','RD_ECR_MODIF_WKF_MOD_CONTRACT_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_FIN_TAD','RD_WKF_MODIF_CNT_SELECT','Passage par l''écran chgt télétravail (fin de TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_MISE_TAD','*','Passage par l''écran chgt télétravail (mise en TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','RD_ECR_MODIF_WKF_MOD_CONTRACT_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_MISE_TAD','RD_WKF_MODIF_CNT_SELECT','Passage par l''écran chgt télétravail (mise en TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_GES_FIN_TAD','*','Gestion d''une fin de télétravail','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N','RD_WKF_EVTCNT_AFF_FIN_TAD',NULL,'C','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE',NULL,'C','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_GES_MISE_TAD','*','Gestion d''une mise en télétravail','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD_AFF','*','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD_AFF','*','Nombre de jours hebdo','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','RD_CTRL_JRSTAD_MAXI6',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_RNV_TAD_AFF','*','Renouvellement','N','checkbox-readonly','TAB_RD_NONOUI','1',NULL,NULL,NULL,'O','N','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD',NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','*','Télétravail','O','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','ASS_EMB_CONF_ENTREE_RECAP','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','ASS_MUT_SOC_ACCEPT','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_50201_5485HZ1B','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_5520_VIHVFTBO','Télétravail','N','hidden','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N','RD_WKF_MODIF_CONTRACT_INFOS_TAD',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_62001_LJODLEUB','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','RD_WKF_MODIF_CNT_SELECT','Télétravail','O','hidden','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_MAN_OP4_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_MAN_OP5_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP2_RE2_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP3_CONF','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP4_CONF','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_MUT_SOC_ACCEPT','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
=IF_ROW_NOTEXIST=
'*','RD_DTDEB_TAD_AFF','*','Date de début','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C','RD_CTRL_DEB_TAD',NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DTFIN_TAD_AFF','*','Date de fin','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_ECR_FIN_TAD','*','Passage par l''écran chgt télétravail (fin de TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','RD_ECR_MODIF_WKF_MOD_CONTRACT_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_FIN_TAD','RD_WKF_MODIF_CNT_SELECT','Passage par l''écran chgt télétravail (fin de TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_MISE_TAD','*','Passage par l''écran chgt télétravail (mise en TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','RD_ECR_MODIF_WKF_MOD_CONTRACT_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_MISE_TAD','RD_WKF_MODIF_CNT_SELECT','Passage par l''écran chgt télétravail (mise en TAD)','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_GES_FIN_TAD','*','Gestion d''une fin de télétravail','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N','RD_WKF_EVTCNT_AFF_FIN_TAD',NULL,'C','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE',NULL,'C','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_GES_MISE_TAD','*','Gestion d''une mise en télétravail','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,'C','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD_AFF','*','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD_AFF','*','Nombre de jours hebdo','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','RD_CTRL_JRSTAD_MAXI6',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_RNV_TAD_AFF','*','Renouvellement','N','checkbox-readonly','TAB_RD_NONOUI','1',NULL,NULL,NULL,'O','N','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD',NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','*','Télétravail','O','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','ASS_EMB_CONF_ENTREE_RECAP','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','ASS_MUT_SOC_ACCEPT','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_50201_5485HZ1B','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_5520_VIHVFTBO','Télétravail','N','hidden','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N','RD_WKF_MODIF_CONTRACT_INFOS_TAD',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','GEN_PAGE_RECAP_62001_LJODLEUB','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','RD_WKF_MODIF_CNT_SELECT','Télétravail','O','hidden','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_MAN_OP4_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_MAN_OP5_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP2_RE2_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP3_CONF','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_EMB_OP4_CONF','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Télétravail','O','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TAD','WKF_MUT_SOC_ACCEPT','Télétravail','N','span','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA,ONGLET_VERTICAL)
=IF_ROW_NOTEXIST=
'*','RD_WKF_MODIF_CNT_FINTAD','Gestion d''une fin de télétravail','RD','EXP',NULL,'WKF',NULL,'RD_WKF_MODCNT_FIN_TAD','W',NULL,NULL,'1192','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL,NULL
'*','RD_WKF_MODIF_CNT_MISETAD','Gestion d''une mise en télétravail','RD','EXP',NULL,'WKF',NULL,'RD_WKF_MODCNT_MISE_TAD','W',NULL,NULL,'1192','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL,NULL
##
REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA,ONGLET_VERTICAL)
=IF_ROW_NOTEXIST=
'*','RD_WKF_MODIF_CNT_FINTAD','Gestion d''une fin de télétravail','RD','EXP',NULL,'WKF',NULL,'RD_WKF_MODCNT_FIN_TAD','W',NULL,NULL,'1192','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL,NULL
'*','RD_WKF_MODIF_CNT_MISETAD','Gestion d''une mise en télétravail','RD','EXP',NULL,'WKF',NULL,'RD_WKF_MODCNT_MISE_TAD','W',NULL,NULL,'1192','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL,NULL
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_CNT_ECR_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD  pour récap WKF',NULL,NULL,'1','1'
'*','RD_CNT_ECR_TAD_AFF','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD affichage contrat courant','Affichage du sous-groupe si RD_TAD  = Oui',NULL,'1','1'
'*','RD_CNT_HOZ_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran HOZ  pour contrat - données TAD',NULL,NULL,'1','1'
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','RD_WKF_MOD_CONTRACT_AFF_ACTES_GESTION_HOR_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Affichage acte gestion fin TAD avenant TAD','Groupe conditionné par l''évènement Avenant TAD sélectionné',NULL,'1','1'
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Affichage acte gestion mise en TAD avenant TAD','Groupe conditionné par l''évènement Avenant TAD sélectionné',NULL,'1','1'
'*','RD_GES_CHGT_TAD_AFF','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. affichage renouvellement','Affichage du sous-groupe si RD_TAD  = Oui',NULL,'1','1'
'*','RD_GES_CHGT_TAD_DETAILJ','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe écran TAD Evts contract. détail des jours','Affichage du sous-groupe si RD_TAD  = Oui¿Pas affiché dans les récap',NULL,'1','1'
'*','RD_GES_FIN_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. fin TAD','Affichage du sous-groupe Fin TAD',NULL,'1','1'
'*','RD_GES_FIN_TAD_AFF','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Affichage Fin TAD WKF evts contract.','Pour Affichage du sous-groupe Fin TAD',NULL,'1','1'
'*','RD_GES_MISE_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. mise en TAD',NULL,NULL,'1','1'
'*','RD_GES_MISE_TAD_AFF','RD_AFF_DONNEES_MISE_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. AFF mise TAD','Affichage du sous-groupe si RD_TAD  = Non',NULL,'1','1'
'*','RD_WKF_MODCNT_FIN_TAD',NULL,NULL,NULL,'N',NULL,'1192',NULL,'Groupe de données fin TAD du wkf évts contrac',NULL,NULL,'1','1'
'*','RD_WKF_MODCNT_MISE_TAD',NULL,NULL,NULL,'N',NULL,'1192',NULL,'Groupe de données mise en TAD du wkf évts contrac',NULL,NULL,'1','1'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_CNT_ECR_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD  pour récap WKF',NULL,NULL,'1','1'
'*','RD_CNT_ECR_TAD_AFF','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD affichage contrat courant','Affichage du sous-groupe si RD_TAD  = Oui',NULL,'1','1'
'*','RD_CNT_HOZ_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran HOZ  pour contrat - données TAD',NULL,NULL,'1','1'
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','RD_WKF_MOD_CONTRACT_AFF_ACTES_GESTION_HOR_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Affichage acte gestion fin TAD avenant TAD','Groupe conditionné par l''évènement Avenant TAD sélectionné',NULL,'1','1'
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Affichage acte gestion mise en TAD avenant TAD','Groupe conditionné par l''évènement Avenant TAD sélectionné',NULL,'1','1'
'*','RD_GES_CHGT_TAD_AFF','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. affichage renouvellement','Affichage du sous-groupe si RD_TAD  = Oui',NULL,'1','1'
'*','RD_GES_CHGT_TAD_DETAILJ','RD_AFF_DONNEES_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe écran TAD Evts contract. détail des jours','Affichage du sous-groupe si RD_TAD  = Oui¿Pas affiché dans les récap',NULL,'1','1'
'*','RD_GES_FIN_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. fin TAD','Affichage du sous-groupe Fin TAD',NULL,'1','1'
'*','RD_GES_FIN_TAD_AFF','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Affichage Fin TAD WKF evts contract.','Pour Affichage du sous-groupe Fin TAD',NULL,'1','1'
'*','RD_GES_MISE_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. mise en TAD',NULL,NULL,'1','1'
'*','RD_GES_MISE_TAD_AFF','RD_AFF_DONNEES_MISE_TAD',NULL,NULL,'N',NULL,'1192',NULL,'Groupe de l''écran TAD Modif contract. AFF mise TAD','Affichage du sous-groupe si RD_TAD  = Non',NULL,'1','1'
'*','RD_WKF_MODCNT_FIN_TAD',NULL,NULL,NULL,'N',NULL,'1192',NULL,'Groupe de données fin TAD du wkf évts contrac',NULL,NULL,'1','1'
'*','RD_WKF_MODCNT_MISE_TAD',NULL,NULL,NULL,'N',NULL,'1192',NULL,'Groupe de données mise en TAD du wkf évts contrac',NULL,NULL,'1','1'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
=IF_ROW_NOTEXIST=
'*','RD_WKF_MODCNT_FIN_TAD','#EOL_1','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#EOL_2','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#GROUPE_3','17',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#GROUPE_4','19','N','RD_GES_FIN_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#LIBELLE_1','16',NULL,'FormTitreµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_EVT_AVTHOR','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_EVT_TAD','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_FIN_TAD','14','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#EOL_1','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#EOL_2','16',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#GROUPE_3','15',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#GROUPE_4','19','N','RD_GES_MISE_TAD',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#LIBELLE_1','14',NULL,'FormTitreµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_EVT_AVTHOR','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_EVT_TAD','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_MISE_TAD','12','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#EOL_4','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#GROUPE_1','18','N','RD_GES_CHGT_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#LIBELLE_1','8','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','RD_TAD','16','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_10','85',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_11','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_12','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_13','58',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_14','67',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_15','76',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_16','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_6','17',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_7','138',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_8','141',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_9','22',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_1','38',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_2','40',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_3','49',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_4','66',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_5','68',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_6','77',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_7','86',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#TEXTE_1','29','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_DTDEB_TAD','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_DTFIN_TAD','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_MTFORF_TAD','139',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_NBJRS_TAD','23',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_RNV_TAD','16',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#EOL_4','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#GROUPE_1','20','N','RD_GES_CHGT_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#GROUPE_2','21','N','RD_GES_CHGT_TAD_DETAILJ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#LIBELLE_1','8','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','RD_TAD','16','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','#EOL_2','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','RD_GES_FIN_TAD','8','N','FDonneeGµGestion d''une fin de télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','#EOL_2','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','RD_GES_MISE_TAD','7','N','FDonneeGµGestion d''une mise en télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_17','21','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_18','28','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_9','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_DTDEB_TAD','22',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_DTFIN_TAD','25',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_MTFORF_TAD','29','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_NBJRS_TAD','27',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_RNV_TAD','19','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_10','89',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_11','43',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_12','52',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_13','62',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_14','71',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_15','80',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_16','34',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_5','32',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_7','142',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_1','42',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_2','44',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_3','53',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_4','70',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_5','72',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_6','81',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_7','90',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#TEXTE_1','33','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_DTDEB_TAD','159','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_DTFIN_TAD','160','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_MTFORF_TAD','162','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_NBJRS_TAD','161','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_RNV_TAD','158','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_10','25','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_5','43',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_6','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_8','157',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_9','36',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#GROUPE_1','158','N','RD_GES_FIN_TAD',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#LIBELLE_1','24','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_DTDEB_TAD_AFF','33','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_DTFIN_TAD_AFF','35','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_MTFORF_TAD_AFF','156','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_NBJRS_TAD_AFF','42','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_RNV_TAD_AFF','27','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#GROUPE_1','18','N','RD_GES_MISE_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#LIBELLE_1','8','N','FormTitreµInformations pour une mise en télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_10','85',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_11','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_12','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_13','58',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_14','67',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_15','76',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_16','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_7','138',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_8','141',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_9','22',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_1','38',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_2','40',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_3','49',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_4','66',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_5','68',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_6','77',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_7','86',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#TEXTE_1','29','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_DTDEB_TAD','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_DTFIN_TAD','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_MTFORF_TAD','139',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_NBJRS_TAD','23',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
=IF_ROW_NOTEXIST=
'*','RD_WKF_MODCNT_FIN_TAD','#EOL_1','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#EOL_2','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#GROUPE_3','17',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#GROUPE_4','19','N','RD_GES_FIN_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','#LIBELLE_1','16',NULL,'FormTitreµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_EVT_AVTHOR','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_EVT_TAD','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_FIN_TAD','RD_ECR_FIN_TAD','14','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#EOL_1','13',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#EOL_2','16',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#GROUPE_3','15',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#GROUPE_4','19','N','RD_GES_MISE_TAD',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','#LIBELLE_1','14',NULL,'FormTitreµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_EVT_AVTHOR','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_EVT_TAD','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_WKF_MODCNT_MISE_TAD','RD_ECR_MISE_TAD','12','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#EOL_4','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#GROUPE_1','18','N','RD_GES_CHGT_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','#LIBELLE_1','8','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD','RD_TAD','16','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_10','85',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_11','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_12','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_13','58',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_14','67',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_15','76',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_16','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_6','17',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_7','138',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_8','141',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#EOL_9','22',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_1','38',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_2','40',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_3','49',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_4','66',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_5','68',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_6','77',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#GROUPE_7','86',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','#TEXTE_1','29','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_DTDEB_TAD','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_DTFIN_TAD','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_MTFORF_TAD','139',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_NBJRS_TAD','23',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_ECR_TAD_AFF','RD_RNV_TAD','16',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#EOL_4','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#GROUPE_1','20','N','RD_GES_CHGT_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#GROUPE_2','21','N','RD_GES_CHGT_TAD_DETAILJ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','#LIBELLE_1','8','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_HOZ_TAD','RD_TAD','16','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','#EOL_2','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_FIN_AFF_AVTTAD','RD_GES_FIN_TAD','8','N','FDonneeGµGestion d''une fin de télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','#EOL_2','8',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_CNT_WKF_MISE_AFF_AVTTAD','RD_GES_MISE_TAD','7','N','FDonneeGµGestion d''une mise en télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_17','21','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_18','28','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','#EOL_9','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_DTDEB_TAD','22',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_DTFIN_TAD','25',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_MTFORF_TAD','29','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_NBJRS_TAD','27',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_AFF','RD_RNV_TAD','19','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_10','89',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_11','43',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_12','52',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_13','62',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_14','71',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_15','80',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_16','34',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_5','32',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#EOL_7','142',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_1','42',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_2','44',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_3','53',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_4','70',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_5','72',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_6','81',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#GROUPE_7','90',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_CHGT_TAD_DETAILJ','#TEXTE_1','33','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_DTDEB_TAD','159','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_DTFIN_TAD','160','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_MTFORF_TAD','162','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_NBJRS_TAD','161','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD','RD_RNV_TAD','158','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_10','25','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_5','43',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_6','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_8','157',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#EOL_9','36',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#GROUPE_1','158','N','RD_GES_FIN_TAD',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','#LIBELLE_1','24','N','FormTitreµInformations sur le Télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_DTDEB_TAD_AFF','33','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_DTFIN_TAD_AFF','35','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_MTFORF_TAD_AFF','156','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_NBJRS_TAD_AFF','42','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_FIN_TAD_AFF','RD_RNV_TAD_AFF','27','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#EOL_5','17','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#GROUPE_1','18','N','RD_GES_MISE_TAD_AFF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD','#LIBELLE_1','8','N','FormTitreµInformations pour une mise en télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_10','85',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_11','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_12','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_13','58',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_14','67',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_15','76',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_16','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_7','138',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_8','141',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#EOL_9','22',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_1','38',NULL,'RD_GES_CHGT_TAD_LUNDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_2','40',NULL,'RD_GES_CHGT_TAD_MARDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_3','49',NULL,'RD_GES_CHGT_TAD_MERCREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_4','66',NULL,'RD_GES_CHGT_TAD_JEUDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_5','68',NULL,'RD_GES_CHGT_TAD_VENDREDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_6','77',NULL,'RD_GES_CHGT_TAD_SAMEDI',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#GROUPE_7','86',NULL,'RD_GES_CHGT_TAD_DIMANCHE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','#TEXTE_1','29','N','BoxLabelµDétail des jours :',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_DTDEB_TAD','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_DTFIN_TAD','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_MTFORF_TAD','139',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_GES_MISE_TAD_AFF','RD_NBJRS_TAD','23',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
=IF_ROW_NOTEXIST=
'*','RD_AFF_DONNEES_MISE_TAD','AFF','Affichage conditionnel pour la mise en TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel pour la mise en TAD dans le WKF évts contract. : affichage si donnée RD_TAD est à Non','M',NULL,'/*¿ * RD_AFF_DONNEES_MISE_TAD :¿ * Affichage conditionnel pour la mise en TAD dans le WKF évts contract. : non affichage si donnée RD_TAD est à Non¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "N") {¿}¿','Affichage conditionnel pour la mise en TAD dans le WKF évts contract.'
'*','RD_AFF_DONNEES_TAD','AFF','Affichage conditionnel des données du télétravail',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel des données du télétravail : affichage si donnée RD_TAD est à Oui','M',NULL,'/*¿ * RD_AFF_DONNEES_TAD :¿ * Affichage conditionnel des données du télétravail : affichage si donnée RD_TAD est à Oui¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿}¿','Affichage conditionnel des données du télétravail'
'*','RD_COCHE_JRS_TAD_OBLIG','CTL','Contrôle saisie d''au moins un jour de TAD si nbre de jours saisi',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK125£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La sélection d''au moins un jours ou demi journée de TAD est obligatoire si le nombre de jours de TAD est renseigné','N',NULL,'/*¿ * RD_COCHE_JRS_TAD_OBLIG :¿ * La sélection d''au moins un jours ou demi journée de TAD est obligatoire si le nombre de jours de TAD est renseigné¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD != vide) {¿	if (DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_PM != "O") {¿		ERR("GENWK125");¿	}¿}¿','Contrôle saisie d''au moins un jour de TAD si nbre de jours saisi'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','CTL','WKF evts cnt : contrôle de cohérence de la date de fin TAD et date d''effet',NULL,'1192',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£DATE_AJOUT_JOURS£DATE=DONNEE^RD_DTFIN_TAD_AFF§NB_JOURS=VALEUR^1","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK122£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD_AFF","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans le WKF evts contract, pour la fin de TAD, la date d''effet doit être égale à la date de fin de TAD + 1 jour sinon erreur.','N',NULL,'/*¿ * RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD :¿ * Dans le WKF evts contract, pour la fin de TAD, la date d''effet doit être égale à la date de fin de TAD + 1 jour sinon erreur.¿ */¿¿TMP1 = DATE_AJOUT_JOURS(DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF, 1);¿if (TMP1 != DONNEE.GEN_DATE_EFF) {¿	ERR("GENWK122", DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF);¿}¿','WKF evts cnt : contrôle de cohérence de la date de fin TAD et date d''effet'
'*','RD_CTRL_DTFIN_TAD_OBLIG','CTL','WKF evt cnt : contrôle cohérence date fin TAD obligatoire pour Mise en TAD et Renouv TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"NOTISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"OLD_DONNEE£RD_DTFIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"LE","OPERANDE_2":"OLD_DONNEE£RD_DTFIN_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"LE","OPERANDE_2":"DONNEE£RD_DTDEB_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"GT","OPERANDE_2":"DONNEE£RD_DTFIN_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"GT","OPERANDE_2":"DONNEE£DSSAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','WKF evt cnt : la date de fin TAD est obligatoire pour la mise en TAD et le renouvellement du TAD. Des contrôles cohérence sont ajoutés sur la saisie de cette date fin TAD (Supérieure à date de début + comprise dans contrat etc ...)','N',NULL,'/*¿ * RD_CTRL_DSFIN_TAD_RENOUV_TAD :¿ * WKF evt cnt : contrôle cohérence date fin TAD pour le renouv TAD et la mise en TAD¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿	if (NOTISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD)) {¿		ERR("GENWK124");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD.old != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD <= DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD.old) {¿	ERR("GENWK124", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (ISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD <= DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD) {¿	ERR("GENWK124", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (DIC_ADM_CONTRAT.DSDCN != vide && DIC_ADM_CONTRAT.DSDCN > DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) {¿	ERR("GENWK123", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (DIC_ADM_CONTRAT_HISTO.DSSAD != vide && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD > DIC_ADM_CONTRAT_HISTO.DSSAD) {¿	ERR("GENWK123", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿','WKF evt cnt : contrôle cohérence date fin TAD obligatoire pour Mise en TAD et Renouv TAD'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','AUT','WKF embauche : valorisation de la date de début de TAD avec début contrat',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans les WKF evts cnt, on valorise date de début de TAD avec la date de début contrat.','O',NULL,'/*¿ * RD_VALO_DTDEB_TAD_EMBAUCHE :¿ * Dans les WKF evts cnt, on valorise date de début de TAD avec la date de début contrat.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD = DIC_ADM_CONTRAT.DSDCN;¿}¿','WKF evts cnt : valorisation de la date de début de TAD avec début contrat'
'*','RD_VALO_DTDEB_TAD_MISETAD','AUT','WKF evts cnt : valorisation de la date de début de TAD pour la mise en TAD et renouv TAD',NULL,'1192',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£GEN_DATE_EFF££","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0}]','Dans le WKF evts cnt, on valorise date de début de TAD avec la date d''effet pour la mise en TAD','O',NULL,'/*¿ * RD_VALO_DTDEB_TAD_MISETAD :¿ * Dans le WKF evts cnt, on valorise date de début de TAD avec la date d''effet pour la mise en TAD¿ */¿¿DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD = DONNEE.GEN_DATE_EFF;¿','WKF evts cnt : valorisation de la date de début de TAD pour la mise en TAD et renouv TAD'
'*','RD_VALO_RNV_TAD_CHGT_TAD','AUT','WKF evts cnt : valorisation de la coche de renouv TAD pour le renouvellement',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RNV_TAD","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4}]','Dans le WKF evts cnt, on valorise la coche de renouv TAD à Oui dans l''acte de gestion "renouvellement TAD"','O',NULL,'/*¿ * RD_VALO_RNV_TAD_CHGT_TAD :¿ * Dans le WKF evts cnt, on valorise la coche de renouv TAD à Oui dans l''acte de gestion "renouvellement TAD"¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD = "O";¿}¿','WKF evts cnt : valorisation de la coche de renouv TAD pour le renouvellement'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','AUT','WKF evts contratct : récup des données TAD si acte gestion = fin du TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_RNV_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RNV_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_DTDEB_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTFIN_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_NBJRS_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_MTFORF_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_MTFORF_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on valorise des données virtuelles pour l''affichage de l''écran "fin TAD" avant de faire le RAB des données TAD pour créer/modifier l''occurrence sans TAD.','N',NULL,'/*¿ * RD_WKF_EVTCNT_AFF_FIN_TAD :¿ * Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on valorise des données virtuelles pour l''affichage de l''écran "fin TAD" avant de faire le RAB des données TAD pour créer/modifier l''occurrence sans TAD.¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != vide && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != "N") {¿	DIC_DONNEES_VIRTUELLES.RD_RNV_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_DTDEB_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_NBJRS_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_MTFORF_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_MTFORF_TAD;¿}¿','WKF evts contract : rcup des données TAD si acte gestion = fin du TAD'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','AUT','WKF evts contratct : RAB des données TAD si acte gestion = fin du TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Suivant","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£F11","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_RNV_TAD§NOM_DONNEE_2=DONNEE^RD_DTDEB_TAD§NOM_DONNEE_3=DONNEE^RD_DTFIN_TAD§NOM_DONNEE_4=DONNEE^RD_NBJRS_TAD§NOM_DONNEE_5=DONNEE^RD_TAD_LUNDI","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI§NOM_DONNEE_3=DONNEE^RD_TAD_JEUDI§NOM_DONNEE_4=DONNEE^RD_TAD_VENDREDI§NOM_DONNEE_5=DONNEE^RD_TAD_SAMEDI","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE§NOM_DONNEE_2=DONNEE^RD_MTFORF_TAD§NOM_DONNEE_3=DONNEE^RD_TAD_LUNDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_LUNDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_MARDI_AM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI_PM§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI_AM§NOM_DONNEE_3=DONNEE^RD_TAD_MERCREDI_PM§NOM_DONNEE_4=DONNEE^RD_TAD_JEUDI_AM§NOM_DONNEE_5=DONNEE^RD_TAD_JEUDI_PM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_VENDREDI_AM§NOM_DONNEE_2=DONNEE^RD_TAD_VENDREDI_PM§NOM_DONNEE_3=DONNEE^RD_TAD_SAMEDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_SAMEDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_DIMANCHE_AM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE_PM§NOM_DONNEE_2=§NOM_DONNEE_3=§NOM_DONNEE_4=§NOM_DONNEE_5=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15}]','Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on vide toutes les données TAD pour créer/modifier l''occurrence sans TAD.','N',NULL,'/*¿ * RD_WKF_EVTCNT_RAB_TAD_FIN_TAD :¿ * Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on vide toutes les données TAD pour créer/modifier l''occurrence sans TAD.¿ */¿¿if ((codeoperation == "Suivant" || codeoperation == "F11")) {¿	if (DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != vide && DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != "N") {¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD, DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD, DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD, DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE, DIC_ADM_CONTRAT_HISTO.RD_MTFORF_TAD, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_AM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_PM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_AM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_PM);¿	}¿}¿','WKF evts contract : RAB des données TAD si acte gestion = fin du TAD'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','AUT','WKF modif contract : la donnée TAD est valorisée à O si "mise en TAD" et à N si "fin TAD"',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_MISE_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£N","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché pour afficher les données sur contrat courant¿si Evt PROMO et MUT : actes gestion Remun + Classif¿si Evt MUT : + Affectation + période probatoire¿si Evt Avenant horaire : Activité + TAD¿si Evt Avenant CDI : Type contrat + période d''essai¿si Evt Avenant CDD : Renouvellement CDD','N',NULL,'/*¿ * RD_WKF_MODIF_CONTRACT_INFOS_TAD :¿ * WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché ou à Non si l''acte de gestion "fin du télétravail" est coché pour afficher les données sur contrat courant¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_MISE_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_TAD = "O";¿}¿if (DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_TAD = "N";¿}¿','WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché et à Non si acte de gestion = "fin TAD" pour afficher les données sur contrat courant '
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','CTL','Renouv. ET fin TAD impossible dans WKF evts contract.',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK121£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','"Renouvellemnt de TAD" et "Fin de TAD" ne peuvent pas être sélectionnés ou vides simultanément dans WKF evts contract. L''un ou l''autre acte de gestion doit être coché sinon message d''erreur.','N',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT :¿ * "Renouvellemnt de TAD" et "Fin de TAD" ne peuvent pas être sélectionnés ou vides simultanément dans WKF evts contract. L''un ou l''autre acte de gestion doit être coché sinon message d''erreur.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿		ERR("GENWK120");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿		ERR("GENWK120");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "N" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "N") {¿		ERR("GENWK121");¿	}¿}¿','Renouv. ET fin TAD impossible dans WKF evts contract.'
'*','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD','AFF','Conditions d''affichage de l''acte de gestion mise en TAD selon les évts sélectionnés',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Conditions d''affichage des actes de gestion selon les évts sélectionnés :   AVTTAD et AVTHOR si pas de TAD','M',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD :¿ * Conditions d''affichage des actes de gestion selon les évts sélectionnés :   AVTTAD et AVTHOR si pas de TAD¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD != "O" && (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" || DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O")) {¿}¿','Conditions d''affichage de l''acte de gestion mise en TAD selon les évts sélectionnés :  AVTTAD et AVTHOR si  pas de TAD'
'*','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE','AFF','GES FIN TAD non saisissable',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != "O") {¿}¿','GES FIN TAD non saisissable'
'*','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE','AFF','GES MISE TAD non saisissable',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_ECR_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_GES_CHGT_TAD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_MISE_TAD != "O" && DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" && DIC_DONNEES_VIRTUELLES.RD_ECR_MISE_TAD != "O" && DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD != "O") {¿}¿','GES MISE TAD non saisissable'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD','AFF','Ecran gestion de la fin de TAD dans WKF MOD CNT',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CHOIX_MOD_ANN_CNT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Si la donnée RD_GES_FIN_TAD est à Oui, l''écran de gestion de fin de TAD est proposé en saisie','C',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD :¿ * Si la donnée RD_GES_FIN_TAD est à Oui, l''écran de gestion de fin de TAD est proposé en saisie¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_CHOIX_MOD_ANN_CNT == "M" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != "N") {¿}¿','Ecran gestion de la fin de TAD dans WKF MOD CNT'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD','AFF','Ecran gestion de la mise en TAD dans WKF MOD CNT',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CHOIX_MOD_ANN_CNT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Si la donnée RD_GES_MISE_TAD est à Oui, l''écran de gestion de la mise en TAD est proposé en saisie','C',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD :¿ * Si la donnée RD_GES_MISE_TAD est à Oui, l''écran de gestion de la mise en TAD est proposé en saisie¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_CHOIX_MOD_ANN_CNT == "M" && DIC_DONNEES_VIRTUELLES.RD_GES_MISE_TAD != "N") {¿}¿','Ecran gestion de la mise en TAD dans WKF MOD CNT'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
=IF_ROW_NOTEXIST=
'*','RD_AFF_DONNEES_MISE_TAD','AFF','Affichage conditionnel pour la mise en TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel pour la mise en TAD dans le WKF évts contract. : affichage si donnée RD_TAD est à Non','M',NULL,'/*¿ * RD_AFF_DONNEES_MISE_TAD :¿ * Affichage conditionnel pour la mise en TAD dans le WKF évts contract. : non affichage si donnée RD_TAD est à Non¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "N") {¿}¿','Affichage conditionnel pour la mise en TAD dans le WKF évts contract.'
'*','RD_AFF_DONNEES_TAD','AFF','Affichage conditionnel des données du télétravail',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel des données du télétravail : affichage si donnée RD_TAD est à Oui','M',NULL,'/*¿ * RD_AFF_DONNEES_TAD :¿ * Affichage conditionnel des données du télétravail : affichage si donnée RD_TAD est à Oui¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿}¿','Affichage conditionnel des données du télétravail'
'*','RD_COCHE_JRS_TAD_OBLIG','CTL','Contrôle saisie d''au moins un jour de TAD si nbre de jours saisi',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_DIMANCHE_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_LUNDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MARDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_MERCREDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_JEUDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_VENDREDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI_AM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TAD_SAMEDI_PM","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK125£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La sélection d''au moins un jours ou demi journée de TAD est obligatoire si le nombre de jours de TAD est renseigné','N',NULL,'/*¿ * RD_COCHE_JRS_TAD_OBLIG :¿ * La sélection d''au moins un jours ou demi journée de TAD est obligatoire si le nombre de jours de TAD est renseigné¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD != vide) {¿	if (DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_PM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_AM != "O" && DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_PM != "O") {¿		ERR("GENWK125");¿	}¿}¿','Contrôle saisie d''au moins un jour de TAD si nbre de jours saisi'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','CTL','WKF evts cnt : contrôle de cohérence de la date de fin TAD et date d''effet',NULL,'1192',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£DATE_AJOUT_JOURS£DATE=DONNEE^RD_DTFIN_TAD_AFF§NB_JOURS=VALEUR^1","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK122£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD_AFF","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans le WKF evts contract, pour la fin de TAD, la date d''effet doit être égale à la date de fin de TAD + 1 jour sinon erreur.','N',NULL,'/*¿ * RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD :¿ * Dans le WKF evts contract, pour la fin de TAD, la date d''effet doit être égale à la date de fin de TAD + 1 jour sinon erreur.¿ */¿¿TMP1 = DATE_AJOUT_JOURS(DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF, 1);¿if (TMP1 != DONNEE.GEN_DATE_EFF) {¿	ERR("GENWK122", DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF);¿}¿','WKF evts cnt : contrôle de cohérence de la date de fin TAD et date d''effet'
'*','RD_CTRL_DTFIN_TAD_OBLIG','CTL','WKF evt cnt : contrôle cohérence date fin TAD obligatoire pour Mise en TAD et Renouv TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"NOTISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"OLD_DONNEE£RD_DTFIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"LE","OPERANDE_2":"OLD_DONNEE£RD_DTFIN_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"LE","OPERANDE_2":"DONNEE£RD_DTDEB_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"GT","OPERANDE_2":"DONNEE£RD_DTFIN_TAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"GT","OPERANDE_2":"DONNEE£DSSAD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','WKF evt cnt : la date de fin TAD est obligatoire pour la mise en TAD et le renouvellement du TAD. Des contrôles cohérence sont ajoutés sur la saisie de cette date fin TAD (Supérieure à date de début + comprise dans contrat etc ...)','N',NULL,'/*¿ * RD_CTRL_DSFIN_TAD_RENOUV_TAD :¿ * WKF evt cnt : contrôle cohérence date fin TAD pour le renouv TAD et la mise en TAD¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿	if (NOTISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD)) {¿		ERR("GENWK124");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD.old != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD <= DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD.old) {¿	ERR("GENWK124", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (ISMAJ(DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD <= DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD) {¿	ERR("GENWK124", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (DIC_ADM_CONTRAT.DSDCN != vide && DIC_ADM_CONTRAT.DSDCN > DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD) {¿	ERR("GENWK123", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿if (DIC_ADM_CONTRAT_HISTO.DSSAD != vide && DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD > DIC_ADM_CONTRAT_HISTO.DSSAD) {¿	ERR("GENWK123", DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD);¿}¿','WKF evt cnt : contrôle cohérence date fin TAD obligatoire pour Mise en TAD et Renouv TAD'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','AUT','WKF embauche : valorisation de la date de début de TAD avec début contrat',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans les WKF evts cnt, on valorise date de début de TAD avec la date de début contrat.','O',NULL,'/*¿ * RD_VALO_DTDEB_TAD_EMBAUCHE :¿ * Dans les WKF evts cnt, on valorise date de début de TAD avec la date de début contrat.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD = DIC_ADM_CONTRAT.DSDCN;¿}¿','WKF evts cnt : valorisation de la date de début de TAD avec début contrat'
'*','RD_VALO_DTDEB_TAD_MISETAD','AUT','WKF evts cnt : valorisation de la date de début de TAD pour la mise en TAD et renouv TAD',NULL,'1192',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£GEN_DATE_EFF££","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0}]','Dans le WKF evts cnt, on valorise date de début de TAD avec la date d''effet pour la mise en TAD','O',NULL,'/*¿ * RD_VALO_DTDEB_TAD_MISETAD :¿ * Dans le WKF evts cnt, on valorise date de début de TAD avec la date d''effet pour la mise en TAD¿ */¿¿DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD = DONNEE.GEN_DATE_EFF;¿','WKF evts cnt : valorisation de la date de début de TAD pour la mise en TAD et renouv TAD'
'*','RD_VALO_RNV_TAD_CHGT_TAD','AUT','WKF evts cnt : valorisation de la coche de renouv TAD pour le renouvellement',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RNV_TAD","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4}]','Dans le WKF evts cnt, on valorise la coche de renouv TAD à Oui dans l''acte de gestion "renouvellement TAD"','O',NULL,'/*¿ * RD_VALO_RNV_TAD_CHGT_TAD :¿ * Dans le WKF evts cnt, on valorise la coche de renouv TAD à Oui dans l''acte de gestion "renouvellement TAD"¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD = "O";¿}¿','WKF evts cnt : valorisation de la coche de renouv TAD pour le renouvellement'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','AUT','WKF evts contratct : récup des données TAD si acte gestion = fin du TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_RNV_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RNV_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_DTDEB_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTDEB_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_DTFIN_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_DTFIN_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_NBJRS_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_MTFORF_TAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_MTFORF_TAD_AFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on valorise des données virtuelles pour l''affichage de l''écran "fin TAD" avant de faire le RAB des données TAD pour créer/modifier l''occurrence sans TAD.','N',NULL,'/*¿ * RD_WKF_EVTCNT_AFF_FIN_TAD :¿ * Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on valorise des données virtuelles pour l''affichage de l''écran "fin TAD" avant de faire le RAB des données TAD pour créer/modifier l''occurrence sans TAD.¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != vide && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != "N") {¿	DIC_DONNEES_VIRTUELLES.RD_RNV_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_DTDEB_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_DTFIN_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_NBJRS_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD;¿	DIC_DONNEES_VIRTUELLES.RD_MTFORF_TAD_AFF = DIC_ADM_CONTRAT_HISTO.RD_MTFORF_TAD;¿}¿','WKF evts contract : rcup des données TAD si acte gestion = fin du TAD'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','AUT','WKF evts contratct : RAB des données TAD si acte gestion = fin du TAD',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Suivant","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£F11","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_RNV_TAD§NOM_DONNEE_2=DONNEE^RD_DTDEB_TAD§NOM_DONNEE_3=DONNEE^RD_DTFIN_TAD§NOM_DONNEE_4=DONNEE^RD_NBJRS_TAD§NOM_DONNEE_5=DONNEE^RD_TAD_LUNDI","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI§NOM_DONNEE_3=DONNEE^RD_TAD_JEUDI§NOM_DONNEE_4=DONNEE^RD_TAD_VENDREDI§NOM_DONNEE_5=DONNEE^RD_TAD_SAMEDI","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE§NOM_DONNEE_2=DONNEE^RD_MTFORF_TAD§NOM_DONNEE_3=DONNEE^RD_TAD_LUNDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_LUNDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_MARDI_AM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI_PM§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI_AM§NOM_DONNEE_3=DONNEE^RD_TAD_MERCREDI_PM§NOM_DONNEE_4=DONNEE^RD_TAD_JEUDI_AM§NOM_DONNEE_5=DONNEE^RD_TAD_JEUDI_PM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_VENDREDI_AM§NOM_DONNEE_2=DONNEE^RD_TAD_VENDREDI_PM§NOM_DONNEE_3=DONNEE^RD_TAD_SAMEDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_SAMEDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_DIMANCHE_AM","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE_PM§NOM_DONNEE_2=§NOM_DONNEE_3=§NOM_DONNEE_4=§NOM_DONNEE_5=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15}]','Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on vide toutes les données TAD pour créer/modifier l''occurrence sans TAD.','N',NULL,'/*¿ * RD_WKF_EVTCNT_RAB_TAD_FIN_TAD :¿ * Dans le WKF evts contract, si l''acte gestion est "fin du TAD" alors on vide toutes les données TAD pour créer/modifier l''occurrence sans TAD.¿ */¿¿if ((codeoperation == "Suivant" || codeoperation == "F11")) {¿	if (DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != vide && DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != "N") {¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_RNV_TAD, DIC_ADM_CONTRAT_HISTO.RD_DTDEB_TAD, DIC_ADM_CONTRAT_HISTO.RD_DTFIN_TAD, DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE, DIC_ADM_CONTRAT_HISTO.RD_MTFORF_TAD, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_LUNDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_AM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_MARDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_MERCREDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_JEUDI_PM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_VENDREDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_AM, DIC_ADM_CONTRAT_HISTO.RD_TAD_SAMEDI_PM, DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_AM);¿		RAZ(DIC_ADM_CONTRAT_HISTO.RD_TAD_DIMANCHE_PM);¿	}¿}¿','WKF evts contract : RAB des données TAD si acte gestion = fin du TAD'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','AUT','WKF modif contract : la donnée TAD est valorisée à O si "mise en TAD" et à N si "fin TAD"',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_MISE_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£N","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TAD","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché pour afficher les données sur contrat courant¿si Evt PROMO et MUT : actes gestion Remun + Classif¿si Evt MUT : + Affectation + période probatoire¿si Evt Avenant horaire : Activité + TAD¿si Evt Avenant CDI : Type contrat + période d''essai¿si Evt Avenant CDD : Renouvellement CDD','N',NULL,'/*¿ * RD_WKF_MODIF_CONTRACT_INFOS_TAD :¿ * WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché ou à Non si l''acte de gestion "fin du télétravail" est coché pour afficher les données sur contrat courant¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_GES_MISE_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_TAD = "O";¿}¿if (DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O") {¿	DIC_ADM_CONTRAT_HISTO.RD_TAD = "N";¿}¿','WKF modif contract : la donnée TAD est valorisée à Oui si l''acte de gestion "mise en télétravail" est coché et à Non si acte de gestion = "fin TAD" pour afficher les données sur contrat courant '
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','CTL','Renouv. ET fin TAD impossible dans WKF evts contract.',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_CHGT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK121£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','"Renouvellemnt de TAD" et "Fin de TAD" ne peuvent pas être sélectionnés ou vides simultanément dans WKF evts contract. L''un ou l''autre acte de gestion doit être coché sinon message d''erreur.','N',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT :¿ * "Renouvellemnt de TAD" et "Fin de TAD" ne peuvent pas être sélectionnés ou vides simultanément dans WKF evts contract. L''un ou l''autre acte de gestion doit être coché sinon message d''erreur.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿		ERR("GENWK120");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "O") {¿		ERR("GENWK120");¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD == "O") {¿	if (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD == "N" && DIC_DONNEES_VIRTUELLES.RD_GES_CHGT_TAD == "N") {¿		ERR("GENWK121");¿	}¿}¿','Renouv. ET fin TAD impossible dans WKF evts contract.'
'*','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD','AFF','Conditions d''affichage de l''acte de gestion mise en TAD selon les évts sélectionnés',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Conditions d''affichage des actes de gestion selon les évts sélectionnés :   AVTTAD et AVTHOR si pas de TAD','M',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD :¿ * Conditions d''affichage des actes de gestion selon les évts sélectionnés :   AVTTAD et AVTHOR si pas de TAD¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_TAD != "O" && (DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" || DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD == "O")) {¿}¿','Conditions d''affichage de l''acte de gestion mise en TAD selon les évts sélectionnés :  AVTTAD et AVTHOR si  pas de TAD'
'*','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE','AFF','GES FIN TAD non saisissable',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_FIN_TAD != "O") {¿}¿','GES FIN TAD non saisissable'
'*','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE','AFF','GES MISE TAD non saisissable',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_HOR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_ECR_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_EVT_AVT_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_GES_CHGT_TAD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur des RD_ECR_XXXXX est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_MISE_TAD != "O" && DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_HOR == "O" && DIC_DONNEES_VIRTUELLES.RD_ECR_MISE_TAD != "O" && DIC_DONNEES_VIRTUELLES.RD_EVT_AVT_TAD != "O") {¿}¿','GES MISE TAD non saisissable'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD','AFF','Ecran gestion de la fin de TAD dans WKF MOD CNT',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CHOIX_MOD_ANN_CNT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_FIN_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Si la donnée RD_GES_FIN_TAD est à Oui, l''écran de gestion de fin de TAD est proposé en saisie','C',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD :¿ * Si la donnée RD_GES_FIN_TAD est à Oui, l''écran de gestion de fin de TAD est proposé en saisie¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_CHOIX_MOD_ANN_CNT == "M" && DIC_DONNEES_VIRTUELLES.RD_GES_FIN_TAD != "N") {¿}¿','Ecran gestion de la fin de TAD dans WKF MOD CNT'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD','AFF','Ecran gestion de la mise en TAD dans WKF MOD CNT',NULL,'1192',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CHOIX_MOD_ANN_CNT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_GES_MISE_TAD","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Si la donnée RD_GES_MISE_TAD est à Oui, l''écran de gestion de la mise en TAD est proposé en saisie','C',NULL,'/*¿ * RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD :¿ * Si la donnée RD_GES_MISE_TAD est à Oui, l''écran de gestion de la mise en TAD est proposé en saisie¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_CHOIX_MOD_ANN_CNT == "M" && DIC_DONNEES_VIRTUELLES.RD_GES_MISE_TAD != "N") {¿}¿','Ecran gestion de la mise en TAD dans WKF MOD CNT'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
=IF_ROW_NOTEXIST=
'*','RD_AFF_DONNEES_MISE_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£NµEQ',NULL,NULL,'FIN','FIN'
'*','RD_AFF_DONNEES_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'FIN','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','1',NULL,'DONNEE£RD_NBJRS_TADµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','2',NULL,'DONNEE£RD_TAD_DIMANCHEµVALEUR£OµNEQµDONNEE£RD_TAD_DIMANCHE_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_DIMANCHE_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDI_PMµVALEUR£OµNEQµ#ET#',NULL,NULL,'23','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','23','££','ERR','CODEERREUR£GENWK125£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','1','££','FCT','FONCTION£DATE_AJOUT_JOURS£DATE=DONNEE^RD_DTFIN_TAD_AFF§NB_JOURS=VALEUR^1','@TMP1£',NULL,NULL
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','2',NULL,'@TMP1£µDONNEE£GEN_DATE_EFFµNEQ',NULL,NULL,'3','FIN'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','3','££','ERR','CODEERREUR£GENWK122£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD_AFF','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','1',NULL,'DONNEE£RD_GES_CHGT_TADµVALEUR£OµEQ',NULL,NULL,'2','4'
'*','RD_CTRL_DTFIN_TAD_OBLIG','2',NULL,'DONNEE£RD_DTFIN_TADµ££µNOTISMAJ',NULL,NULL,'3','4'
'*','RD_CTRL_DTFIN_TAD_OBLIG','3','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','4',NULL,'OLD_DONNEE£RD_DTFIN_TADµ@vide£µNEQµDONNEE£RD_DTFIN_TADµ££µISMAJµ#ET#µDONNEE£RD_DTFIN_TADµOLD_DONNEE£RD_DTFIN_TADµLEµ#ET#',NULL,NULL,'7','8'
'*','RD_CTRL_DTFIN_TAD_OBLIG','7','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','8',NULL,'DONNEE£RD_DTFIN_TADµ££µISMAJµDONNEE£RD_DTFIN_TADµDONNEE£RD_DTDEB_TADµLEµ#ET#',NULL,NULL,'10','11'
'*','RD_CTRL_DTFIN_TAD_OBLIG','10','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','11',NULL,'DONNEE£DSDCNµ@vide£µNEQµDONNEE£DSDCNµDONNEE£RD_DTFIN_TADµGTµ#ET#',NULL,NULL,'13','14'
'*','RD_CTRL_DTFIN_TAD_OBLIG','13','££','ERR','CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','14',NULL,'DONNEE£DSSADµ@vide£µNEQµDONNEE£RD_DTFIN_TADµDONNEE£DSSADµGTµ#ET#',NULL,NULL,'16','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','16','££','ERR','CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','2','DONNEE£DSDCN','VAL','££','DONNEE£RD_DTDEB_TAD','FIN','FIN'
'*','RD_VALO_DTDEB_TAD_MISETAD','1','DONNEE£GEN_DATE_EFF££','VAL','££','DONNEE£RD_DTDEB_TAD',NULL,NULL
'*','RD_VALO_RNV_TAD_CHGT_TAD','1',NULL,'DONNEE£RD_GES_CHGT_TADµVALEUR£OµEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_RNV_TAD_CHGT_TAD','2','VALEUR£O','VAL','££','DONNEE£RD_RNV_TAD','FIN','FIN'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','1',NULL,'DONNEE£RD_GES_FIN_TADµ@vide£µNEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'3','FIN'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','3','DONNEE£RD_RNV_TAD','VAL','££','DONNEE£RD_RNV_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','4','DONNEE£RD_DTDEB_TAD','VAL','££','DONNEE£RD_DTDEB_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','5','DONNEE£RD_DTFIN_TAD','VAL','££','DONNEE£RD_DTFIN_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','6','DONNEE£RD_NBJRS_TAD','VAL','££','DONNEE£RD_NBJRS_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','7','DONNEE£RD_MTFORF_TAD','VAL','££','DONNEE£RD_MTFORF_TAD_AFF','FIN','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','1',NULL,'@codeoperation££µVALEUR£SuivantµEQµ@codeoperation££µVALEUR£F11µEQµ#OU#',NULL,NULL,'3','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','3',NULL,'DONNEE£RD_ECR_FIN_TADµ@vide££µNEQµDONNEE£RD_ECR_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'5','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','5','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_RNV_TAD§NOM_DONNEE_2=DONNEE^RD_DTDEB_TAD§NOM_DONNEE_3=DONNEE^RD_DTFIN_TAD§NOM_DONNEE_4=DONNEE^RD_NBJRS_TAD§NOM_DONNEE_5=DONNEE^RD_TAD_LUNDI','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','6','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI§NOM_DONNEE_3=DONNEE^RD_TAD_JEUDI§NOM_DONNEE_4=DONNEE^RD_TAD_VENDREDI§NOM_DONNEE_5=DONNEE^RD_TAD_SAMEDI','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','7','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE§NOM_DONNEE_2=DONNEE^RD_MTFORF_TAD§NOM_DONNEE_3=DONNEE^RD_TAD_LUNDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_LUNDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_MARDI_AM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','8','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI_PM§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI_AM§NOM_DONNEE_3=DONNEE^RD_TAD_MERCREDI_PM§NOM_DONNEE_4=DONNEE^RD_TAD_JEUDI_AM§NOM_DONNEE_5=DONNEE^RD_TAD_JEUDI_PM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','9','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_VENDREDI_AM§NOM_DONNEE_2=DONNEE^RD_TAD_VENDREDI_PM§NOM_DONNEE_3=DONNEE^RD_TAD_SAMEDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_SAMEDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_DIMANCHE_AM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','10','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE_PM§NOM_DONNEE_2=§NOM_DONNEE_3=§NOM_DONNEE_4=§NOM_DONNEE_5=','£','FIN','FIN'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','1',NULL,'DONNEE£RD_GES_MISE_TADµVALEUR£OµEQ',NULL,NULL,'2','3'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','2','VALEUR£O','VAL','££','DONNEE£RD_TAD','3','3'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','3',NULL,'DONNEE£RD_GES_FIN_TADµVALEUR£OµEQ',NULL,NULL,'4','FIN'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','4','VALEUR£N','VAL','££','DONNEE£RD_TAD','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'2','6'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','2',NULL,'DONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£OµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£OµEQµ#ET#',NULL,NULL,'5','6'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','5','££','ERR','CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','6',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'7','11'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','7',NULL,'DONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£OµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£OµEQµ#ET#',NULL,NULL,'10','11'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','10','££','ERR','CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','11',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'12','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','12',NULL,'DONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£NµEQµ#ET#',NULL,NULL,'15','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','15','££','ERR','CODEERREUR£GENWK121£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£OµNEQµDONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµDONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE','1',NULL,'DONNEE£RD_ECR_FIN_TADµVALEUR£OµNEQ',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE','1',NULL,'DONNEE£RD_ECR_MISE_TADµVALEUR£OµNEQµDONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµ#ET#µDONNEE£RD_ECR_MISE_TADµVALEUR£OµNEQµ#ET#µDONNEE£RD_EVT_AVT_TADµVALEUR£OµNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD','1',NULL,'DONNEE£RD_CHOIX_MOD_ANN_CNTµVALEUR£MµEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD','1',NULL,'DONNEE£RD_CHOIX_MOD_ANN_CNTµVALEUR£MµEQµDONNEE£RD_GES_MISE_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'FIN','FIN'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
=IF_ROW_NOTEXIST=
'*','RD_AFF_DONNEES_MISE_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£NµEQ',NULL,NULL,'FIN','FIN'
'*','RD_AFF_DONNEES_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'FIN','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','1',NULL,'DONNEE£RD_NBJRS_TADµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','2',NULL,'DONNEE£RD_TAD_DIMANCHEµVALEUR£OµNEQµDONNEE£RD_TAD_DIMANCHE_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_DIMANCHE_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_LUNDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MARDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_MERCREDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_JEUDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_VENDREDI_PMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDIµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDI_AMµVALEUR£OµNEQµ#ET#µDONNEE£RD_TAD_SAMEDI_PMµVALEUR£OµNEQµ#ET#',NULL,NULL,'23','FIN'
'*','RD_COCHE_JRS_TAD_OBLIG','23','££','ERR','CODEERREUR£GENWK125£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','1','££','FCT','FONCTION£DATE_AJOUT_JOURS£DATE=DONNEE^RD_DTFIN_TAD_AFF§NB_JOURS=VALEUR^1','@TMP1£',NULL,NULL
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','2',NULL,'@TMP1£µDONNEE£GEN_DATE_EFFµNEQ',NULL,NULL,'3','FIN'
'*','RD_CTRL_DSFIN_TAD_DTEFF_FIN_TAD','3','££','ERR','CODEERREUR£GENWK122£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD_AFF','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','1',NULL,'DONNEE£RD_GES_CHGT_TADµVALEUR£OµEQ',NULL,NULL,'2','4'
'*','RD_CTRL_DTFIN_TAD_OBLIG','2',NULL,'DONNEE£RD_DTFIN_TADµ££µNOTISMAJ',NULL,NULL,'3','4'
'*','RD_CTRL_DTFIN_TAD_OBLIG','3','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','4',NULL,'OLD_DONNEE£RD_DTFIN_TADµ@vide£µNEQµDONNEE£RD_DTFIN_TADµ££µISMAJµ#ET#µDONNEE£RD_DTFIN_TADµOLD_DONNEE£RD_DTFIN_TADµLEµ#ET#',NULL,NULL,'7','8'
'*','RD_CTRL_DTFIN_TAD_OBLIG','7','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','8',NULL,'DONNEE£RD_DTFIN_TADµ££µISMAJµDONNEE£RD_DTFIN_TADµDONNEE£RD_DTDEB_TADµLEµ#ET#',NULL,NULL,'10','11'
'*','RD_CTRL_DTFIN_TAD_OBLIG','10','££','ERR','CODEERREUR£GENWK124£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','11',NULL,'DONNEE£DSDCNµ@vide£µNEQµDONNEE£DSDCNµDONNEE£RD_DTFIN_TADµGTµ#ET#',NULL,NULL,'13','14'
'*','RD_CTRL_DTFIN_TAD_OBLIG','13','££','ERR','CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','14',NULL,'DONNEE£DSSADµ@vide£µNEQµDONNEE£RD_DTFIN_TADµDONNEE£DSSADµGTµ#ET#',NULL,NULL,'16','FIN'
'*','RD_CTRL_DTFIN_TAD_OBLIG','16','££','ERR','CODEERREUR£GENWK123£NOM_DONNEE_FOCUS=DONNEE^RD_DTFIN_TAD','£','FIN','FIN'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_DTDEB_TAD_EMBAUCHE','2','DONNEE£DSDCN','VAL','££','DONNEE£RD_DTDEB_TAD','FIN','FIN'
'*','RD_VALO_DTDEB_TAD_MISETAD','1','DONNEE£GEN_DATE_EFF££','VAL','££','DONNEE£RD_DTDEB_TAD',NULL,NULL
'*','RD_VALO_RNV_TAD_CHGT_TAD','1',NULL,'DONNEE£RD_GES_CHGT_TADµVALEUR£OµEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_RNV_TAD_CHGT_TAD','2','VALEUR£O','VAL','££','DONNEE£RD_RNV_TAD','FIN','FIN'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','1',NULL,'DONNEE£RD_GES_FIN_TADµ@vide£µNEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'3','FIN'
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','3','DONNEE£RD_RNV_TAD','VAL','££','DONNEE£RD_RNV_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','4','DONNEE£RD_DTDEB_TAD','VAL','££','DONNEE£RD_DTDEB_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','5','DONNEE£RD_DTFIN_TAD','VAL','££','DONNEE£RD_DTFIN_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','6','DONNEE£RD_NBJRS_TAD','VAL','££','DONNEE£RD_NBJRS_TAD_AFF',NULL,NULL
'*','RD_WKF_EVTCNT_AFF_FIN_TAD','7','DONNEE£RD_MTFORF_TAD','VAL','££','DONNEE£RD_MTFORF_TAD_AFF','FIN','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','1',NULL,'@codeoperation££µVALEUR£SuivantµEQµ@codeoperation££µVALEUR£F11µEQµ#OU#',NULL,NULL,'3','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','3',NULL,'DONNEE£RD_ECR_FIN_TADµ@vide££µNEQµDONNEE£RD_ECR_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'5','FIN'
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','5','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_RNV_TAD§NOM_DONNEE_2=DONNEE^RD_DTDEB_TAD§NOM_DONNEE_3=DONNEE^RD_DTFIN_TAD§NOM_DONNEE_4=DONNEE^RD_NBJRS_TAD§NOM_DONNEE_5=DONNEE^RD_TAD_LUNDI','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','6','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI§NOM_DONNEE_3=DONNEE^RD_TAD_JEUDI§NOM_DONNEE_4=DONNEE^RD_TAD_VENDREDI§NOM_DONNEE_5=DONNEE^RD_TAD_SAMEDI','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','7','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE§NOM_DONNEE_2=DONNEE^RD_MTFORF_TAD§NOM_DONNEE_3=DONNEE^RD_TAD_LUNDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_LUNDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_MARDI_AM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','8','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_MARDI_PM§NOM_DONNEE_2=DONNEE^RD_TAD_MERCREDI_AM§NOM_DONNEE_3=DONNEE^RD_TAD_MERCREDI_PM§NOM_DONNEE_4=DONNEE^RD_TAD_JEUDI_AM§NOM_DONNEE_5=DONNEE^RD_TAD_JEUDI_PM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','9','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_VENDREDI_AM§NOM_DONNEE_2=DONNEE^RD_TAD_VENDREDI_PM§NOM_DONNEE_3=DONNEE^RD_TAD_SAMEDI_AM§NOM_DONNEE_4=DONNEE^RD_TAD_SAMEDI_PM§NOM_DONNEE_5=DONNEE^RD_TAD_DIMANCHE_AM','£',NULL,NULL
'*','RD_WKF_EVTCNT_RAB_TAD_FIN_TAD','10','££','FCT','FONCTION£RAZ£NOM_DONNEE_1=DONNEE^RD_TAD_DIMANCHE_PM§NOM_DONNEE_2=§NOM_DONNEE_3=§NOM_DONNEE_4=§NOM_DONNEE_5=','£','FIN','FIN'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','1',NULL,'DONNEE£RD_GES_MISE_TADµVALEUR£OµEQ',NULL,NULL,'2','3'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','2','VALEUR£O','VAL','££','DONNEE£RD_TAD','3','3'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','3',NULL,'DONNEE£RD_GES_FIN_TADµVALEUR£OµEQ',NULL,NULL,'4','FIN'
'*','RD_WKF_MODIF_CONTRACT_INFOS_TAD','4','VALEUR£N','VAL','££','DONNEE£RD_TAD','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','1',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'2','6'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','2',NULL,'DONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£OµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£OµEQµ#ET#',NULL,NULL,'5','6'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','5','££','ERR','CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','6',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'7','11'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','7',NULL,'DONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£OµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£OµEQµ#ET#',NULL,NULL,'10','11'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','10','££','ERR','CODEERREUR£GENWK120£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','11',NULL,'DONNEE£RD_TADµVALEUR£OµEQ',NULL,NULL,'12','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','12',NULL,'DONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµEQµ#ET#µDONNEE£RD_GES_CHGT_TADµVALEUR£NµEQµ#ET#',NULL,NULL,'15','FIN'
'*','RD_WKF_MOD_CONTRACT_ACT_RENOUV_FIN_TAD_SELECT','15','££','ERR','CODEERREUR£GENWK121£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_AFF_MISE_TAD_HOR_TAD','1',NULL,'DONNEE£RD_TADµVALEUR£OµNEQµDONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµDONNEE£RD_EVT_AVT_TADµVALEUR£OµEQµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_GES_FIN_TAD_DECOCHE','1',NULL,'DONNEE£RD_ECR_FIN_TADµVALEUR£OµNEQ',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_GES_MISE_TAD_DECOCHE','1',NULL,'DONNEE£RD_ECR_MISE_TADµVALEUR£OµNEQµDONNEE£RD_EVT_AVT_HORµVALEUR£OµEQµ#ET#µDONNEE£RD_ECR_MISE_TADµVALEUR£OµNEQµ#ET#µDONNEE£RD_EVT_AVT_TADµVALEUR£OµNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_FIN_TAD','1',NULL,'DONNEE£RD_CHOIX_MOD_ANN_CNTµVALEUR£MµEQµDONNEE£RD_GES_FIN_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_WKF_MOD_CONTRACT_PASSAGE_MISE_TAD','1',NULL,'DONNEE£RD_CHOIX_MOD_ANN_CNTµVALEUR£MµEQµDONNEE£RD_GES_MISE_TADµVALEUR£NµNEQµ#ET#',NULL,NULL,'FIN','FIN'
##
TAG_CHARSET=@éèç
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
=IF_ROW_NOTEXIST=
'*','RD_OBLIG_ZB330','AFF','La donnée ZB330 est obligatoire si ZB647 et/ou ZB648 renseignée(s)',NULL,'1203',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZB647","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZB648","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien (ZB647, ZB648) est renseignée (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )','M',NULL,'/*¿ * RD_OBLIG_ZB330 :¿ * La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien (ZB647, ZB648) est renseignée (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )¿ */¿¿if ((DIC_ADM_CONTRAT_HISTO.ZB647 == "O" || DIC_ADM_CONTRAT_HISTO.ZB648 == "O")) {¿}¿','La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien est renseignées (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
=IF_ROW_NOTEXIST=
'*','RD_OBLIG_ZB330','AFF','La donnée ZB330 est obligatoire si ZB647 et/ou ZB648 renseignée(s)',NULL,'1203',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZB647","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZB648","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien (ZB647, ZB648) est renseignée (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )','M',NULL,'/*¿ * RD_OBLIG_ZB330 :¿ * La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien (ZB647, ZB648) est renseignée (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )¿ */¿¿if ((DIC_ADM_CONTRAT_HISTO.ZB647 == "O" || DIC_ADM_CONTRAT_HISTO.ZB648 == "O")) {¿}¿','La donnée ZB330 (motif du maintien) n''est obligatoire que si au moins 1 des options de maintien est renseignées (sachant que le groupe de données concernant le maintien des cotisations ne s''affiche que si le coeff de rémun est inférieur à 1 )'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
=IF_ROW_NOTEXIST=
'*','RD_OBLIG_ZB330','1',NULL,'DONNEE£ZB647µVALEUR£OµEQµDONNEE£ZB648µVALEUR£OµEQµ#OU#',NULL,NULL,'FIN','FIN'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
=IF_ROW_NOTEXIST=
'*','RD_OBLIG_ZB330','1',NULL,'DONNEE£ZB647µVALEUR£OµEQµDONNEE£ZB648µVALEUR£OµEQµ#OU#',NULL,NULL,'FIN','FIN'
