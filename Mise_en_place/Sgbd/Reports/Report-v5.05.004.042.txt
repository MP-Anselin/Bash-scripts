##
TAG_CHARSET=@€éèç
TAG_IMPORT=5.05.004.R042
##
TAG_CHARSET=@€éèç
##
DIC_PERIODES_REC_H_AFTER_STMNT
=SQL=
create or replace FUNCTION DIC_PERIODES_REC_H_AFTER_STMNT RETURN VARCHAR2 AS BEGIN
 RETURN '
 idx       := paiezadPacPeriodModifed.FIRST;
  WHILE idx IS NOT NULL
  LOOP
    IF v_type_writer = ''M'' THEN
      listJobMasseAsync := listJobMasseAsync || ''
      TGE_ALIM_PERIODE_INDIV(0, '''''' || paiezadPacPeriodModifed(idx).NUMPAC || '''''', '''''' || paiezadPacPeriodModifed(idx).PERIODE || '''''', '''''' || paiezadPacPeriodModifed(idx).PAIEZAD || '''''');'';
    ELSE
      TGE_ALIM_PERIODE_INDIV(0, paiezadPacPeriodModifed(idx).NUMPAC, paiezadPacPeriodModifed(idx).PERIODE, paiezadPacPeriodModifed(idx).PAIEZAD);
    END IF;
    idx := paiezadPacPeriodModifed.NEXT(idx);
  END LOOP;
    --Lancement du job async lors d''une mise à jour Manuelle, en Masse (type_writer = ''M'')
  IF v_type_writer = ''M'' THEN
	  DBMS_JOB.SUBMIT(v_jobAsyncMasseIdx , ''BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''début ASYNC TRG_DPRH'''');
			 
	     '' || listJobMasseAsync || ''
	     
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''fin ASYNC TRG_DPRH OK'''');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''fin ASYNC TRG_DPRH KO : ''''|| SQLCODE|| SQLERRM);
	  END;'', sysdate, null);
  END IF;
 ';
 END DIC_PERIODES_REC_H_AFTER_STMNT;
##
TAG_CHARSET=@€éèç
##
GET_HISTO_EMPLOI
=SQL=
CREATE OR REPLACE FUNCTION GET_HISTO_EMPLOI(
          p_numpac  VARCHAR2,
          p_paiezad VARCHAR2)
     RETURN HISTO_EMPLOI_TAB
AS
     p_req CLOB;
     p_selectLibEmploi CLOB;
     p_cursHisto SYS_REFCURSOR;
     p_dateEff       DATE;
     p_dateFin       DATE;
     p_libelleEmploi VARCHAR2(4000);
     p_tabTmp HISTO_EMPLOI_TAB := HISTO_EMPLOI_TAB();
     p_retour HISTO_EMPLOI_TAB := HISTO_EMPLOI_TAB();
     p_tableGxp  VARCHAR2(24);
     p_donneeGxp VARCHAR2(50);
     p_trt       VARCHAR2(4000);
BEGIN
     p_req := 'SELECT DATE_EFF, (CASE WHEN DATE_FIN=TO_DATE(''20991231'',''yyyymmdd'') THEN NULL ELSE DATE_FIN END)        AS DATE_FIN, ';
     -- Par défaut, on récupère QUALPE, ou le libellé de l’emploi
     p_selectLibEmploi := 'NVL(QUALPE,(SELECT F.LIBELLE FROM GA_FILIERE F WHERE F.NUMPAC=C.NUMPAC AND F.FILIERE=C.FILIR AND F.REGROUPEMENT_METIER=C.SSFIL AND F.METIER=C.METIER AND F.QUALIFICATION=C.EMPLOI))';
     -- ICI ON VA RECUPERER LE TRAITEMENT PARTICULIER POTENTIEL pour l’élément A670
     BEGIN
          SELECT TABLEGXP,
               DONNEEGXP,
               TRTPARTICULIER
          INTO p_tableGxp,
               p_donneeGxp,
               p_trt
          FROM TGE_REF_MAPDO
          WHERE NUMPAC = p_numpac
           AND ELEMENT = 'A670';
     EXCEPTION
     WHEN NO_DATA_FOUND THEN
          -- Pas trouvé pour le NUMPAC passé en paramètre, on recherche pour NUMPAC='*'
          BEGIN
               SELECT TABLEGXP,
                    DONNEEGXP,
                    TRTPARTICULIER
               INTO p_tableGxp,
                    p_donneeGxp,
                    p_trt
               FROM TGE_REF_MAPDO
               WHERE NUMPAC = '*'
                AND ELEMENT = 'A670';
          EXCEPTION
          WHEN NO_DATA_FOUND THEN NULL;
          END;
     END;
IF p_tableGxp               IS NOT NULL AND p_tableGxp='DIC_ADM_CONTRAT_HISTO' THEN
     IF p_trt               IS NOT NULL THEN
          p_selectLibEmploi := p_trt;
          p_selectLibEmploi := REPLACE(p_selectLibEmploi,'$TABLE','C');
          p_selectLibEmploi := REPLACE(p_selectLibEmploi,'$MATRIC','C.MATRIC');
          p_selectLibEmploi := REPLACE(p_selectLibEmploi,'$NUMPAC','C.NUMPAC');
          p_selectLibEmploi := REPLACE(p_selectLibEmploi,'$DONNEEGXP','C.'||p_donneeGxp);
     ELSE
          IF p_donneeGxp         != 'QUALPE' THEN
               p_selectLibEmploi := REPLACE(p_selectLibEmploi, 'QUALPE', p_donneeGxp);
          END IF;
     END IF;
END IF;
p_req := p_req || p_selectLibEmploi;
p_req := p_req || ' AS LIBELLE_EMPLOI FROM DIC_ADM_CONTRAT_HISTO C WHERE NUMPAC='''||p_numpac||''' AND PAIEZAD ='''||p_paiezad||''' ORDER BY DATE_EFF';
OPEN p_cursHisto FOR p_req;
LOOP
     FETCH p_cursHisto INTO p_dateEff, p_dateFin, p_libelleEmploi;
     EXIT
WHEN p_cursHisto%NOTFOUND;
     IF p_tabTmp.count = 0 THEN
          p_tabTmp.extend;
          p_tabTmp(p_tabTmp.count) := HISTO_EMPLOI(NULL, p_dateEff, p_dateFin, p_libelleEmploi);
     ELSE
          IF p_libelleEmploi = p_tabTmp(p_tabTmp.count).LIBELLE_EMPLOI AND p_dateEff = p_tabTmp(p_tabTmp.count).DATE_FIN+1 THEN
               -- Même emploi sur une période continue : on modifie la date de fin du dernier histo stocké
               p_tabTmp(p_tabTmp.count).DATE_FIN := p_dateFin;
          ELSE
               -- Emploi différent, ou même emploi avec rupture (départ / réembauche avec période d'inactivité) : on stocke un nouvel histo
               p_tabTmp.extend;
               p_tabTmp(p_tabTmp.count) := HISTO_EMPLOI(NULL, p_dateEff, p_dateFin, p_libelleEmploi);
          END IF;
     END IF;
END LOOP;
CLOSE p_cursHisto;
FOR i IN REVERSE 1..p_tabTmp.count
LOOP
     EXIT
WHEN p_retour.count=30;
     p_retour.extend;
     p_retour(p_retour.count)            := p_tabTmp(i);
     p_retour(p_retour.count).NUM_EMPLOI := LPAD(p_retour.count,2,'0');
END LOOP;
RETURN p_retour;
END GET_HISTO_EMPLOI;
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_GET_TAB_ENTITES
=SQL=
CREATE OR REPLACE FUNCTION MP_CODELISTS_ESI_GET_TAB_ENTITES(p_TYPE_ENTITE VARCHAR2, p_CODVAR_TYPE_ENTITE VARCHAR2 DEFAULT NULL) RETURN MP_CODELISTS_ESI_TAB_ENTITES AS 
  v_retour MP_CODELISTS_ESI_TAB_ENTITES := MP_CODELISTS_ESI_TAB_ENTITES();
  v_TYPE_ENTITE VARCHAR2(15);
BEGIN
  v_TYPE_ENTITE := p_TYPE_ENTITE;
  IF v_TYPE_ENTITE IS NULL AND p_CODVAR_TYPE_ENTITE IS NOT NULL THEN
    SELECT VALVAR INTO v_TYPE_ENTITE FROM (SELECT VALVAR FROM SYS_VARSYS WHERE CODVAR=p_CODVAR_TYPE_ENTITE ORDER BY CASE WHEN MODULE='SYS' THEN 3 WHEN MODULE='STD' THEN 2 ELSE 1 END, MODULE) WHERE ROWNUM=1;
  END IF;
  IF v_TYPE_ENTITE IS NULL THEN
    RETURN v_retour;
  END IF;
  FOR une_entite IN (SELECT CODE_ENTITE, LIBELLE_REDUIT, LIBELLE FROM STD_STRUC_ENTITE WHERE TYPE_ENTITE=v_TYPE_ENTITE AND TO_CHAR(SYSDATE,'yyyymmdd') BETWEEN DATE_EFF AND DATE_FIN)
  LOOP
    v_retour.extend;
    v_retour(v_retour.count) := MP_CODELISTS_ESI_ENTITE(une_entite.CODE_ENTITE, une_entite.LIBELLE_REDUIT, une_entite.LIBELLE);
  END LOOP;
  RETURN v_retour;
END MP_CODELISTS_ESI_GET_TAB_ENTITES;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_MP_NOTIF
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE IN VARCHAR2, VAR_OR_BODY IN VARCHAR2 DEFAULT 'BODY')
RETURN CLOB
AS
  v_retour CLOB;

  v_typeTable VARCHAR(1);
  date_eff_exists NUMBER;
  PROC_DEX_UPDATING CLOB;
  PROC_DEX_UPDATING_TMP CLOB;
  PROC_DEX_CONDITION CLOB;
  v_existeDonneeDex boolean;
  v_eventDexPrec VARCHAR(100);
  v_cleSecondaireDex VARCHAR(200);
  v_action_acr varchar2(3);
  v_event_sans_acr MP_MAPPING_EVENT_DATA.EVENT%TYPE; 
  v_condition_acr_old_vide CLOB;
  v_condition_acr_new_vide CLOB;
  v_condition_donnee CLOB;
  v_condition_donnee_sql CLOB;
  -- Ce tableau indexé contient l'association entre un couple NOM_DONNEE/EVENT et le SOUS_EVENT à générer
  TYPE T_MAPPING_SPECIF_SOUS_EVENT IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(150);
  mappingSubEventByEventAndData T_MAPPING_SPECIF_SOUS_EVENT;
  -- Ce tableau indexé contient l'association entre un SOUS_EVENT et le IF qui conditionne sa génération
  TYPE T_SUB_EVENT_CONDITION IS TABLE OF CLOB INDEX BY VARCHAR2(100);
  subEventToGenWithCond T_SUB_EVENT_CONDITION;
  subEventToGen VARCHAR2(100);
  -- Ce tableau indexé contient l'association entre un EVENT et la liste des SOUS_EVENT de cet EVENT, et le IF qui conditionne sa génération
  TYPE T_SUB_EVENT_CONDITION_BY_EVENT IS TABLE OF T_SUB_EVENT_CONDITION INDEX BY VARCHAR2(100);
  subEventToGenWithCondByEvent T_SUB_EVENT_CONDITION_BY_EVENT;
  -- Ce tableau indexé contient l'association entre un couple EVENT(de type ACR)/CONDITION et la clause SQL de cette condition
  TYPE T_CONDITION_EVENT_ACR IS TABLE OF CLOB INDEX BY VARCHAR2(4000);
  conditionForEventAcr T_CONDITION_EVENT_ACR;

  CURSOR cur_donneesDex IS
    SELECT DISTINCT DMED.EVENT, RDMU.NOM_DONNEE, RDMU.CONDITION, DMED.NOM_DONNEE_DEX_OU_EVENT, LTRIM(REGEXP_SUBSTR(DMED.EVENT, '\.[acr]{1,3}$'),'.') ACTION_ACR, REGEXP_REPLACE(DMED.EVENT, '\.[acr]{1,3}$','') EVENT_SANS_ACR 
    FROM MP_MAPPING_EVENT_DATA DMED, REF_DONNEE_MAPPING_UX RDMU, REF_DONNEE_GEN_MODEL RDGM 
    WHERE 
      DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX 
      AND RDMU.NOM_DONNEE=RDGM.NOM_DONNEE 
      AND DMED.UTILISE_TRIGGER='O' 
      AND DMED.TYPE='D' 
      AND RDGM.NOM_DICTIONNAIRE=NOM_TABLE 
    ORDER BY DMED.EVENT, RDMU.NOM_DONNEE;
  lig_donneeDex cur_donneesDex%rowtype;

  CURSOR cur_eventsDex IS
    SELECT DISTINCT DMED.EVENT, RDMU.CONDITION, LTRIM(REGEXP_SUBSTR(DMED.EVENT, '\.[acr]{1,3}$'),'.') ACTION_ACR, REGEXP_REPLACE(DMED.EVENT, '\.[acr]{1,3}$','') EVENT_SANS_ACR 
    FROM MP_MAPPING_EVENT_DATA DMED, REF_DONNEE_MAPPING_UX RDMU, REF_DONNEE_GEN_MODEL RDGM 
    WHERE 
      DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX 
      AND RDMU.NOM_DONNEE=RDGM.NOM_DONNEE 
      AND DMED.UTILISE_TRIGGER='O' 
      AND DMED.TYPE='D' 
      AND RDGM.NOM_DICTIONNAIRE=NOM_TABLE;
  lig_eventDex cur_eventsDex%rowtype;

  CURSOR cur_subEventsDex IS
    SELECT NOM_DONNEE, EVENT, SOUS_EVENT
    FROM MP_SPECIF_MAP_SOUS_EVENT_DATA
    WHERE 
      NOM_DONNEE IN (
        SELECT COLUMN_NAME 
        FROM USER_TAB_COLS 
        WHERE TABLE_NAME=NOM_TABLE
      );
  lig_subEventDex cur_subEventsDex%rowtype;

BEGIN
  v_retour := NULL;

  -- On vérifie si la table va générer des évènements pour DEX (au moins une donnée mappée, ou dictionnaire DIC_ADM_CONTRAT qui gère l'embauche et le départ)
  IF nom_table='DIC_ADM_CONTRAT' THEN
    v_existeDonneeDex := TRUE;
  ELSE
    OPEN cur_donneesDex;
    LOOP FETCH cur_donneesDex INTO lig_donneeDex ;
      EXIT WHEN cur_donneesDex%NOTFOUND OR v_existeDonneeDex;
      v_existeDonneeDex := true;
    END LOOP;
    CLOSE cur_donneesDex;
  END IF;

  IF NOT v_existeDonneeDex THEN
    RETURN NULL;
  END IF;

IF VAR_OR_BODY = 'VAR' THEN

  v_retour := v_retour||'
-- DEBUT VARIABLES DEX
v_dexaction varchar2(1);
v_dexCleSecondaire VARCHAR2(100);
exist_contrat_for_matric NUMBER ;
TYPE eventsTabType is  table of MP_EVENTS%ROWTYPE ;
eventsTab eventsTabType := eventsTabType();
TYPE subEventsTabType is  table of MP_SPECIF_SOUS_EVENT%ROWTYPE ;
subEventsTab subEventsTabType := subEventsTabType();
v_processEventDex boolean;
v_processEventDexTypeAcr varchar2(3);
v_toutesLesNouvelleValVides boolean;
v_toutesLesAnciennesValVides boolean;
';

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    v_retour := v_retour||'
v_ligDACHPrec DIC_ADM_CONTRAT_HISTO%ROWTYPE;
';
  END IF;

  v_retour := v_retour||'
-- FIN VARIABLES DEX
';

ELSE

  v_retour := v_retour||'
-- DEBUT TRAITEMENT DEX
IF v_type_writer<>''M'' THEN
';

  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  date_eff_exists := 0;
  IF nom_table <> 'DIC_ADM_PERSO' AND nom_table <> 'DIC_ADM_CONTRAT' THEN
    SELECT COUNT(*)
    INTO date_eff_exists
    FROM user_tab_cols
    WHERE column_name     = 'DATE_EFF'
    AND table_name        = NOM_TABLE;
  END IF;

  -- Au moins une donnée DEX = on va vérifier si le traitement pour DEX doit être effectué
  IF date_eff_exists>0 THEN
    -- Date d'effet = traitement DEX seulement si modification à date du jour ou dans le futur (à revoir pour DACH ?)
    v_retour := v_retour||' 
IF TRUNC(SYSDATE,''dd'') <= nvl(:NEW.DATE_FIN,:OLD.DATE_FIN) THEN
';
  END IF;
  -- Si traitement DEX sur une table de type PAIEZAD ou PACMAT, si on n'a pas de MATRIC, on le récupère
  IF v_typeTable ='z' THEN
    v_retour := v_retour||' 
IF v_matric IS NULL THEN
 SELECT MAX(MATRIC) INTO v_matric FROM DIC_ADM_CONTRAT_SITU WHERE NUMPAC=v_numpac AND PAIEZAD=v_paiezad; 
END IF;
';
  ELSIF v_typeTable ='p' THEN
    v_retour := v_retour||' 
IF v_matric IS NULL THEN
 BEGIN
  SELECT MATRIC INTO v_matric FROM SECUPACMAT WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat;
 EXCEPTION 
  WHEN NO_DATA_FOUND THEN NULL; 
 END;
END IF;
';
  END IF;

  -- Le traitement en lui-même : certains évènements nécessitent d'avoir une clé secondaire spécifique, sinon on positionne '*'
  v_cleSecondaireDex := '''*''';

  -- On boucle sur les données générant un sous-événement (paramétrage spécifique)
  OPEN cur_subEventsDex;
  LOOP FETCH cur_subEventsDex INTO lig_subEventDex ;
    EXIT WHEN cur_subEventsDex%NOTFOUND;
    mappingSubEventByEventAndData(lig_subEventDex.NOM_DONNEE||'#'||lig_subEventDex.EVENT) := lig_subEventDex.SOUS_EVENT;
  END LOOP;
  CLOSE cur_subEventsDex;

  -- On boucle sur les données de l'évènement afin de calculer la CLE_SECONDAIRE si besoin 
  -- On en profite pour construire une partir du code de la partie UPDATING
  OPEN cur_donneesDex;
  LOOP FETCH cur_donneesDex INTO lig_donneeDex ;
    IF v_eventDexPrec IS NULL AND cur_donneesDex%NOTFOUND THEN
      PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
NULL;
';
    ELSIF v_eventDexPrec IS NOT NULL AND (cur_donneesDex%NOTFOUND OR NOT v_eventDexPrec=lig_donneeDex.EVENT) THEN
      -- Dernière donnée pour l'event
      PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
-- gestion evenement dex ' || v_eventDexPrec || '
v_processEventDex := FALSE; 
';
      IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF UPDATING THEN
';
      END IF;

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF FALSE THEN -- DEBUT :NEW<>:OLD
 NULL;
'||PROC_DEX_UPDATING_TMP||' 
END IF; -- FIN :NEW<>:OLD
';

      IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
        -- Pour DIC_ADM_CONTRAT_HISTO, on gère :
        -- - L'UPDATE, en comparant NEW et OLD
        -- - L'INSERT, en comparant NEW et v_ligDACHPrec
        -- - L'UPDATE, en comparant v_ligDACHPrec et OLD
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF INSERTING THEN
 IF FALSE THEN -- DEBUT :NEW<>:OLD
  NULL;
 '||REPLACE(PROC_DEX_UPDATING_TMP,':OLD.','v_ligDACHPrec.')||' 
 END IF; -- FIN :NEW<>:OLD
ELSIF DELETING THEN
 IF FALSE THEN -- DEBUT :NEW<>:OLD
  NULL;
 '||REPLACE(PROC_DEX_UPDATING_TMP,':NEW.','v_ligDACHPrec.')||' 
 END IF; -- FIN :NEW<>:OLD
END IF; -- FIN UPDATING / INSERTING / DELETING
';
      END IF;

      conditionForEventAcr(v_eventDexPrec||'#'||v_condition_donnee||'#OLD') := v_condition_acr_old_vide;
      conditionForEventAcr(v_eventDexPrec||'#'||v_condition_donnee||'#NEW') := v_condition_acr_new_vide;

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF v_processEventDex THEN
';

      IF v_action_acr IS NULL THEN
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
eventsTab.EXTEND ;
eventsTab(eventsTab.LAST).EVENT :='''||v_eventDexPrec||''';
eventsTab(eventsTab.LAST).ACTION :=''M'';
';
      ELSE
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
v_toutesLesAnciennesValVides := '||v_condition_acr_old_vide||v_condition_donnee_sql||';
v_toutesLesNouvelleValVides := '||v_condition_acr_new_vide||v_condition_donnee_sql||';
IF FALSE THEN
 v_processEventDex := FALSE; 
';
        IF INSTR(v_action_acr,'a') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF v_toutesLesAnciennesValVides AND NOT v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.add''; -- gestion add
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'a'

        IF INSTR(v_action_acr,'c') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF NOT v_toutesLesAnciennesValVides AND NOT v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.change''; -- gestion change
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'c'

        IF INSTR(v_action_acr,'r') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF NOT v_toutesLesAnciennesValVides AND v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.remove'';  -- gestion remove
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'r'

        PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
ELSE
 v_processEventDex := FALSE;
END IF;
';
      END IF; -- FIN v_action_acr IS NULL

      -- On boucle sur les sous-événements à générer (paramétrage spécifique)
      subEventToGen := subEventToGenWithCond.first;
      LOOP
        EXIT WHEN subEventToGen IS NULL;
        -- On concatène la condition, puis le sous-événements (si la condition est vérifiée)
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF v_processEventDex AND '; 

        IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
          -- Pour DIC_ADM_CONTRAT_HISTO, on gère :
          -- - L'UPDATE, en comparant NEW et OLD
          -- - L'INSERT, en comparant NEW et v_ligDACHPrec
          -- - L'UPDATE, en comparant v_ligDACHPrec et OLD
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'( (UPDATING AND ('||subEventToGenWithCond(subEventToGen)||')) OR (INSERTING AND ('||REPLACE(subEventToGenWithCond(subEventToGen),':OLD.','v_ligDACHPrec.')||')) OR (DELETING AND ('||REPLACE(subEventToGenWithCond(subEventToGen),':NEW.','v_ligDACHPrec.')||')) )';
        ELSE
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||' ('||subEventToGenWithCond(subEventToGen)||') ';
        END IF;

        PROC_DEX_UPDATING := PROC_DEX_UPDATING||' THEN 
 subEventsTab.EXTEND;
 subEventsTab(subEventsTab.LAST).EVENT := eventsTab(eventsTab.LAST).EVENT; 
 subEventsTab(subEventsTab.LAST).SOUS_EVENT :='''||subEventToGen||''';
END IF; -- FIN test génération sous-événement
';
        subEventToGen := subEventToGenWithCond.next(subEventToGen);
      END LOOP;

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
END IF; -- FIN v_processEventDex
';

      -- On vide le tableau pour recommencer un nouvel événément (on le sauvegarde avant, en l'associant à l'event)
      subEventToGenWithCondByEvent(v_eventDexPrec) := subEventToGenWithCond;
      subEventToGenWithCond.delete;
    END IF;

    -- Traitement spécifique à certains évènements qui stocke une CLE_SECONDAIRE
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      -- Si le nom de table est DIC_ADM_CONTRAT on stocke la date de début de contrat (DSDCN) dans la colonne CLE_SECONDAIRE 
      v_cleSecondaireDex := '''DSDCN;'' || TO_CHAR(nvl(:NEW.DSDCN, :OLD.DSDCN), ''YYYY-MM-DD'')';

    ELSIF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- Si le nom de table est DIC_ADM_CONTRAT_HISTO on stocke la date d'effet (DATE_EFF) dans la colonne CLE_SECONDAIRE 
      v_cleSecondaireDex := '''DATE_EFF;''|| TO_CHAR(nvl(:NEW.DATE_EFF, :OLD.DATE_EFF), ''YYYY-MM-DD'')';

    END IF;

    EXIT WHEN cur_donneesDex%NOTFOUND;

    IF v_eventDexPrec IS NULL OR NOT v_eventDexPrec=lig_donneeDex.EVENT THEN
      -- Première donnée pour l'event
      v_action_acr := lig_donneeDex.ACTION_ACR;
      v_event_sans_acr := lig_donneeDex.EVENT_SANS_ACR;
      PROC_DEX_UPDATING_TMP := NULL;
      v_condition_acr_old_vide := null;
      v_condition_acr_new_vide := null;
    END IF;

    -- Traitement spécifique à certains évènements qui stocke une CLE_SECONDAIRE
    IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'precedenceOrdCompteBancaire' THEN
      -- BANQUE : On parcourt les données de l'event et trouver celle qui correspond à la cle dont on a besoin
      v_cleSecondaireDex := 'nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';

    ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentConjointBirthOrder' THEN
      -- CONJOINT : Dans le cas où une donnée 'dependentConjointBirthOrder' a été paramétrée, 
      -- c'est cette valeur qui va être prise
      v_cleSecondaireDex := '''C;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';

    ELSIF INSTR(lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT, 'dependentConjoint') = 1 AND INSTR(v_cleSecondaireDex, 'C;') = 0 THEN
      -- CONJOINT : La première fois que l'on trouve une donnée commençant par 'dependentConjoint', on positionne la clé secondaire
      -- avec comme valeur "01" pour le "BirthOrder"
      v_cleSecondaireDex := '''C;01''';

    ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' OR lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthDate' THEN
      -- ENFANT : La clé secondaire pour les enfants est composée de 2 éléments à mettre dans un certain ordre : E;BirthOrder;BirthDate
      IF v_cleSecondaireDex = '''*''' THEN
        IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
          v_cleSecondaireDex := '''E;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';
        ELSE
          v_cleSecondaireDex := '||TO_CHAR(nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
        END IF;
      ELSE
        IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
          v_cleSecondaireDex := '''E;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')||'';''' || v_cleSecondaireDex;
        ELSE
          v_cleSecondaireDex := v_cleSecondaireDex || '||'';''||TO_CHAR(nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
        END IF;
      END IF;
    END IF;

    PROC_DEX_CONDITION := '(:NEW.'||lig_donneeDex.NOM_DONNEE||'<>:OLD.'||lig_donneeDex.NOM_DONNEE||' OR (:NEW.'||lig_donneeDex.NOM_DONNEE||' IS NOT NULL AND :OLD.'||lig_donneeDex.NOM_DONNEE||' IS NULL) OR (:NEW.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND :OLD.'||lig_donneeDex.NOM_DONNEE||' IS NOT NULL))';
    v_condition_donnee_sql := '1=1';
    v_condition_donnee := lig_donneeDex.CONDITION;
    IF v_condition_donnee IS NOT NULL THEN
      v_condition_donnee_sql := regexp_replace(regexp_replace(v_condition_donnee, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(:new.\1,:old.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(:new.\2,:old.\2)=\1');
      PROC_DEX_CONDITION := PROC_DEX_CONDITION||' AND '||v_condition_donnee_sql;
    END IF;

    PROC_DEX_UPDATING_TMP :=PROC_DEX_UPDATING_TMP||'
ELSIF '||PROC_DEX_CONDITION||' THEN
v_processEventDex := TRUE;
';

    v_condition_acr_old_vide := v_condition_acr_old_vide||':OLD.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND ';
    v_condition_acr_new_vide := v_condition_acr_new_vide||':NEW.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND ';

    IF mappingSubEventByEventAndData.exists(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT) THEN
      IF NOT subEventToGenWithCond.exists(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) THEN
        subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) := '1=2';
      END IF;
      subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) := subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT))||' OR ('||PROC_DEX_CONDITION||') ';
    END IF;

    v_eventDexPrec:=lig_donneeDex.EVENT;
  END LOOP;
  CLOSE cur_donneesDex;        

  v_retour := v_retour||' 
v_dexCleSecondaire := '||v_cleSecondaireDex||';
eventsTab.delete;
subEventsTab.delete;
';

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- Pour DIC_ADM_CONTRAT_HISTO :
    -- - On considère un INSERT comme un UPDATE dont le OLD est la ligne précédente
    -- - On considère un DELETE comme un UPDATE dont le NEW est la ligne précédente
    v_retour := v_retour||'
IF INSERTING OR DELETING THEN
 v_ligDACHPrec := GET_CONTRAT_HISTO_HORS_TRANSAC(v_numpac, NVL(:NEW.PACMAT,:OLD.PACMAT), NVL(:NEW.NUMCNT,:OLD.NUMCNT), NVL(:NEW.DATE_EFF,:OLD.DATE_EFF)-1, TRUE);
END IF;
IF UPDATING OR v_ligDACHPrec.NUMPAC IS NOT NULL THEN
';
  ELSIF nom_table   ='DIC_ADM_CONTRAT' THEN
    -- Pour DIC_ADM_CONTRAT, on gère en spécifique 
    -- - La création --> Evènement worker.hire ou worker.rehire
    -- - La suppression --> Evènement worker.workAssignment.terminate
    -- - La mise à jour de DSFCN --> Evènement worker.workAssignment.terminate (ou autre pour la modification ou l'annulation de départ ???)
    v_retour := v_retour||' 
IF INSERTING THEN
 -- On vérifie si c''est une embauche ou bien réembauche : s''il existe déja  un contrat pour le MATRIC c''est un réembauche. 
 exist_contrat_for_matric := COUNT_CONTRAT_HORS_TRANSAC ( v_matric ) ;
 IF exist_contrat_for_matric>0 THEN
  -- Réembauche  --> Evénement worker.rehire
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.rehire'';
  eventsTab(eventsTab.LAST).ACTION :=''Z''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:NEW.DSDCN;
 ELSE
  --  Embauche -->  Evénement worker.hire
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.hire'';
  eventsTab(eventsTab.LAST).ACTION :=''Z''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:NEW.DSDCN;
 END IF ;
ELSIF DELETING THEN
 exist_contrat_for_matric := COUNT_CONTRAT_HORS_TRANSAC ( v_matric ) ;
 IF exist_contrat_for_matric>1 THEN
  -- Annulation Réembauche  --> Evénement workerRehire.cancel 
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerRehire.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:OLD.DSDCN;
 ELSE
  -- Annulation Embauche -->  Evénement workerHire.cancel
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerHire.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:OLD.DSDCN;
 END IF ;
ELSIF :NEW.DSFCN<>:OLD.DSFCN OR (:NEW.DSFCN IS NOT NULL AND :OLD.DSFCN IS NULL) OR (:NEW.DSFCN IS NULL AND :OLD.DSFCN IS NOT NULL) THEN
 IF :NEW.DSFCN IS NOT NULL AND :OLD.DSFCN IS NULL THEN
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.workAssignment.terminate'';
  eventsTab(eventsTab.LAST).ACTION :=''M''; 
  -- On n''envoie le départ que le jour où il devient effectif
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:NEW.DSFCN;
 ELSIF :NEW.DSFCN<>:OLD.DSFCN THEN 
  -- mise à jour de DSFCN --> EVENEMENT worker.workerTerminationDate.change
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.workerTerminationDate.change'';
  eventsTab(eventsTab.LAST).ACTION :=''M'';
  -- On garde la date de départ initiale comme date d''envoi de la notif, comme ça le partenaire aura le départ et la modif de départ en même temps
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:OLD.DSFCN;
 ELSIF :NEW.DSFCN IS NULL AND :OLD.DSFCN IS NOT NULL THEN
 -- Annulation Départ --> EVENEMENT workerTermination.cancel 
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerTermination.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  -- On garde la date de départ initiale comme date d''envoi de la notif, comme ça le partenaire aura le départ et l''annulation de départ en même temps
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=:OLD.DSFCN;
 ELSE
  NULL;
 END IF;
ELSE
';
  ELSE
    -- Partie insert pour les autres tables
    -- Pour les autres tables, en création et suppression, on insère une ligne par évènement potentiellement généré par la table, avec le bon code action
    v_retour := v_retour||' 
-- DEBUT INSERTING / DELETING
IF INSERTING OR DELETING THEN
 IF INSERTING THEN
  v_dexaction := ''C'';
 ELSE
  v_dexaction := ''S'';
 END IF;
';

    OPEN cur_eventsDex;
    LOOP FETCH cur_eventsDex INTO lig_eventDex ;
      EXIT WHEN cur_eventsDex%NOTFOUND;
      v_retour := v_retour||'-- gestion evenement dex ' || lig_eventDex.EVENT || '
';
      v_action_acr := lig_eventDex.ACTION_ACR;
      v_condition_donnee_sql := '1=1';
      IF lig_eventDex.CONDITION IS NOT NULL THEN
        v_condition_donnee_sql := regexp_replace(regexp_replace(lig_eventDex.CONDITION, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(:new.\1,:old.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(:new.\2,:old.\2)=\1');
        v_retour := v_retour||'
IF '||v_condition_donnee_sql||' THEN
';
      END IF;

      v_retour := v_retour||'
v_processEventDex := FALSE;
v_toutesLesAnciennesValVides := '||conditionForEventAcr(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#OLD')||'1=1;
v_toutesLesNouvelleValVides := '||conditionForEventAcr(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#NEW')||'1=1;
';
      IF v_action_acr IS NULL THEN
        v_retour := v_retour||'
IF (INSERTING AND NOT v_toutesLesNouvelleValVides) OR (DELETING AND NOT v_toutesLesAnciennesValVides) THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT :='''||lig_eventDex.EVENT||''';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction;
END IF; 
';
      ELSIF conditionForEventAcr.exists(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#OLD') THEN
        v_retour := v_retour||'
IF FALSE THEN NULL; 
';

        IF INSTR(v_action_acr,'a') > 0 THEN
          v_retour := v_retour||'
ELSIF INSERTING AND NOT v_toutesLesNouvelleValVides THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := '''||lig_eventDex.EVENT_SANS_ACR||'.add'';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction; 
';
        END IF; -- FIN v_action_acr = 'a'

        IF INSTR(v_action_acr,'r') > 0 THEN
          v_retour := v_retour||'
ELSIF DELETING AND NOT v_toutesLesAnciennesValVides THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := '''||lig_eventDex.EVENT_SANS_ACR||'.remove'';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction; 
';
        END IF; -- FIN v_action_acr = 'r'

        v_retour := v_retour||'
END IF;
';
      END IF;

      IF lig_eventDex.CONDITION IS NOT NULL THEN
        v_retour := v_retour||'
END IF; -- FIN '||v_condition_donnee_sql||'
';
      END IF;

      IF subEventToGenWithCondByEvent.exists(lig_eventDex.EVENT) THEN
        subEventToGenWithCond := subEventToGenWithCondByEvent(lig_eventDex.EVENT);
        -- On boucle sur les sous-événements à générer (paramétrage spécifique) pour l'événement courant
        subEventToGen := subEventToGenWithCond.first;
        LOOP
          EXIT WHEN subEventToGen IS NULL;
          -- On concatène la condition, puis le sous-événements (si la condition est vérifiée)
          v_retour := v_retour||'
IF v_processEventDex AND ('||subEventToGenWithCond(subEventToGen)||') THEN
 subEventsTab.EXTEND;
 subEventsTab(subEventsTab.LAST).EVENT := eventsTab(eventsTab.LAST).EVENT; 
 subEventsTab(subEventsTab.LAST).SOUS_EVENT :='''||subEventToGen||''';
END IF;
';
          subEventToGen := subEventToGenWithCond.next(subEventToGen);
        END LOOP;
      END IF;
    END LOOP;
    CLOSE cur_eventsDex;
    v_retour := v_retour||'
-- FIN INSERTING / DELETING
ELSE -- DEBUT UPDATING
 v_dexaction := ''M'';
';
  END IF;
  -- Début de l'updating commun à toutes les tables

  v_eventDexPrec := NULL;
  -- On rajoute ce qui a été calculé plus haut
  v_retour := v_retour||PROC_DEX_UPDATING||'
END IF; -- FIN UPDATING
';

  v_retour := v_retour||' 
 IF eventsTab.count>0 THEN
  for i in 1..eventsTab.count loop
';

  IF date_eff_exists>0 THEN
    v_retour := v_retour||' 
eventsTab(i).DATE_ENVOI_MIN :=NVL(:NEW.DATE_EFF,:OLD.DATE_EFF);
';
  END IF;

  v_retour := v_retour||' 
   MERGE INTO MP_EVENTS DE 
    USING (SELECT v_matric AS MATRIC,eventsTab(i).EVENT AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z 
    ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
    WHEN MATCHED THEN UPDATE SET ACTION=eventsTab(i).ACTION,DATE_MODIF=CURRENT_TIMESTAMP,DATE_ENVOI_MIN=eventsTab(i).DATE_ENVOI_MIN
    WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF,DATE_ENVOI_MIN) VALUES (v_matric,eventsTab(i).EVENT,v_dexCleSecondaire,eventsTab(i).ACTION,CURRENT_TIMESTAMP,eventsTab(i).DATE_ENVOI_MIN);
  end loop;
 END IF; -- FIN eventsTab.count>0

 IF subEventsTab.count>0 THEN
  for i in 1..subEventsTab.count loop
   MERGE INTO MP_SPECIF_SOUS_EVENT DE 
    USING (SELECT v_matric AS MATRIC, subEventsTab(i).EVENT AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE, subEventsTab(i).SOUS_EVENT AS SOUS_EVENT FROM DUAL) Z 
    ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE AND Z.SOUS_EVENT=DE.SOUS_EVENT)
    WHEN MATCHED THEN UPDATE SET DATE_MODIF=CURRENT_TIMESTAMP, STATUT_TRT=NULL, DATE_TRT=NULL
    WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,SOUS_EVENT,DATE_MODIF) VALUES (v_matric,subEventsTab(i).EVENT,v_dexCleSecondaire,subEventsTab(i).SOUS_EVENT,CURRENT_TIMESTAMP);
  end loop;
 END IF; -- FIN subEventsTab.count>0
';
  IF date_eff_exists>0 THEN
    v_retour := v_retour||' 
END IF; -- FIN SYSDATE BETWEEN DATE_EFF AND DATE_FIN
';
  END IF;
  v_retour := v_retour||'
END IF;
-- FIN TRAITEMENT DEX
'; 

END IF;
  return v_retour;
END TGE_CREATE_TRIGGER_MP_NOTIF;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_RECYCLAGE
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE IN VARCHAR2, VAR_OR_BODY IN VARCHAR2 DEFAULT 'BODY')
RETURN CLOB
AS
  v_retour CLOB;

  v_typeTable VARCHAR(1);
  date_eff_exists NUMBER;
  nom_col_date_test_recycl VARCHAR2(30);
  condition CLOB;
  sscondition CLOB;
  existeMappingEtoile NUMBER;
  donneeprec          VARCHAR(100);

  CURSOR cur_numpac IS
    SELECT DISTINCT numpac
    FROM tge_ref_mapdo
    WHERE 
      TABLEGXP IN (
        SELECT tableparam
        FROM tge_ref_mapta
        WHERE 
          tablephy = nom_table
          --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
          --Ajout du type 'I'
          AND allerretour IN ('A', '2','I')
      )
      AND (donneegxp, tablegxp) IN (
        SELECT column_name, table_name 
        FROM user_tab_cols
      )
    ORDER BY numpac;
  lig_numpac cur_numpac%rowtype;

  CURSOR cur_mapdo IS
    SELECT numpac, donneegxp
    FROM tge_ref_mapdo
    WHERE 
      TABLEGXP IN (
        SELECT tableparam
        FROM tge_ref_mapta
        WHERE 
          tablephy = nom_table
          --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
          --Ajout du type 'I'
          AND allerretour IN ('A','2','I')
      )
      AND (donneegxp, tablegxp) IN (
        SELECT column_name, table_name 
        FROM user_tab_cols
      )
    UNION 
    SELECT numpac,donneegxp 
    FROM TABLE(GET_GXP_TRT_PARTICULIER_DATAS(nom_table))
    ORDER BY donneegxp, numpac;
  lig_mapdo cur_mapdo%rowtype;

BEGIN
  v_retour := NULL;
  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  date_eff_exists := 0;
  nom_col_date_test_recycl := NULL;
  IF nom_table='DIC_ADM_CONTRAT' THEN
    -- Pour DIC_ADM_CONTRAT c'est DSDCN qui fera office de DATE_EFF pour tester s'il faut mettre en recyclage
    nom_col_date_test_recycl := 'DSDCN';
  ELSE
    SELECT COUNT(*)
    INTO date_eff_exists
    FROM user_tab_cols
    WHERE column_name     = 'DATE_EFF'
    AND table_name        = NOM_TABLE;
    IF date_eff_exists>0 THEN
      nom_col_date_test_recycl := 'DATE_EFF';
    END IF;
  END IF;

IF VAR_OR_BODY = 'VAR' THEN

  v_retour := v_retour||'
-- DEBUT VARIABLES RECYCLAGE
type pacmats IS record (R_numpac VARCHAR2(6), R_pacmat VARCHAR2(8), R_periode_recycl VARCHAR2(1)); 
TYPE TAB_pacmats IS TABLE OF pacmats INDEX BY binary_integer; 
tab TAB_pacmats; 
v_recycl varchar2(1); 
v_periode_recycl varchar2(1); 
v_error_periode_recycl_3 number; 
';

  OPEN cur_numpac;
  LOOP FETCH cur_numpac INTO lig_numpac ;
    EXIT WHEN cur_numpac%NOTFOUND ;
    IF lig_numpac.numpac<>'*' THEN
      v_retour  := v_retour||' b'||lig_numpac.numpac||' boolean ;';
    END IF;
  END LOOP;
  CLOSE cur_numpac;

  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
date_test_recycl DATE;
';
  END IF;

  v_retour := v_retour||'
-- FIN VARIABLES RECYCLAGE
';

ELSE

  v_retour := v_retour||'
-- DEBUT TRAITEMENT RECYCLAGE
';

  v_retour := v_retour||' if v_type_writer<>''N'' AND v_type_writer<>''M'' THEN ';
  -- Récupération du numpac si besoin
  IF v_typeTable = 'z' THEN
    v_retour := v_retour||' 
SELECT DISTINCT D.numpac as R_numpac, 
D.pacmat as R_pacmat, 
T.PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM DIC_ADM_CONTRAT_SITU D ,SECUPACMAT T 
WHERE D.NUMPAC=v_numpac AND D.PAIEZAD=v_paiezad AND D.NUMPAC=T.NUMPAC AND D.PACMAT=T.PACMAT;';
  elsif v_typeTable = 'm' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE matric=v_matric;';
  elsif v_typeTable = 'p' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat;';
  END IF;
  v_retour := v_retour||'
v_retro := ''N'';
if tab.exists(1) then
 FOR i IN 1..tab.last LOOP
  v_numpac:=tab(i).r_numpac;
   IF NOT v_numpac = ''TMPPAC'' THEN
    v_pacmat:=tab(i).r_pacmat;
    v_periode_recycl:=nvl(tab(i).R_periode_recycl,''1'');
';
  IF NOT nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- une valeur '3' dans PERIODE_RECYCLAGE retourne une erreur
    -- sauf en cas de réembauche (insertion dans DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO)
    v_retour := v_retour||' IF v_periode_recycl = ''3'' THEN';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     IF UPDATING OR DELETING THEN';
    END IF;
    v_retour := v_retour||'     RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     END IF;';
    END IF;
    v_retour := v_retour||' END IF;';
  ELSE
    -- on positionne PERIODE_RECYCLAGE à '1' en cas de réembauche d'un salarié ayant une valeur '0' ou '3' dans PERIODE_RECYCLAGE et répondant aux critères suivants :
    -- - DRPAI2 est non-vide et différent de 'B'
    -- - NATCOL vaut 'SAL' ou 'STA'
    -- - DSDCN est antérieure ou égale à la période en cours
    v_retour := v_retour||'
IF v_periode_recycl IN (''0'',''3'') THEN
 IF v_periode_recycl = ''3'' THEN
  -- si PERIODE_RECYCLAGE vaut ''3'', on prévoit qu''il va falloir retourner une erreur (modification d''un contrat existant)
  v_error_periode_recycl_3 := 1;
 ELSE
  v_error_periode_recycl_3 := 0;
 END IF;
 IF INSERTING THEN
  -- insertion d''un historique de contrat : on vérifie s''il s''agit de la première occurrence du contrat (réembauche)
  v_nbOccForCnt := GET_NB_LIGNES(''DIC_ADM_CONTRAT_HISTO'', ''NUMPAC=''''''||:NEW.NUMPAC||'''''' AND PACMAT=''''''||:NEW.PACMAT||'''''' AND NUMCNT=''||:NEW.NUMCNT);
  IF v_nbOccForCnt = 0 THEN
   -- première occurrence du contrat (réembauche) : on ne retourne pas d''erreur, et, si PERIODE_RECYCLAGE = ''3'', on va réactiver le dossier
   IF v_periode_recycl = ''3'' THEN
    v_error_periode_recycl_3 := 0;
    :NEW.ZREACT := TO_DATE(TO_CHAR(:NEW.DATE_EFF,''yyyy'')||''0101'',''yyyymmdd'');
   END IF; -- FIN v_periode_recycl = ''3''
   -- vérification des critères pour positionner PERIODE_RECYCLAGE à ''1''
   IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := ''1'';
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  END IF; -- FIN v_nbOccForCnt = 0
 ELSIF UPDATING THEN
  -- un update : on va vérifier si on doit réactiver le dossier
  IF UPDATING(''DRPAI2'') AND ((NVL(:OLD.DRPAI2, ''B'') = ''B'' AND NVL(:NEW.DRPAI2, ''B'') <> ''B'') OR(NVL(:OLD.DRPAI2, ''B'')<> ''B'' AND NVL(:NEW.DRPAI2, ''B'') = ''B'')) THEN
   -- update de DRPAI2 pour déblocage paie : on ne retourne pas d''erreur, et on va réactiver le dossier
   v_error_periode_recycl_3 := 0;
   IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := ''1'';
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  ELSIF UPDATING(''ZREACT'') AND :OLD.ZREACT IS NULL AND :NEW.ZREACT IS NOT NULL THEN
   -- update de ZREACT pour réactivation : si l''année de ZREACT est inférieure ou égale à l''année de la période en cours, on ne retourne pas d''erreur
   BEGIN
    IF NOT tabPeriodeByNumpac.exists(:NEW.NUMPAC) THEN
     select periodeencours into tabPeriodeByNumpac(:NEW.NUMPAC) from tge_ref_pac where numpac = :NEW.NUMPAC;
    END IF;
    IF TO_CHAR(:NEW.ZREACT,''yyyy'') <= SUBSTR(tabPeriodeByNumpac(:NEW.NUMPAC),1,4) THEN
     v_error_periode_recycl_3 := 0;
     IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, tabPeriodeByNumpac(:NEW.NUMPAC)) = 1 THEN
      -- OK pour PERIODE_RECYCLAGE = ''1''
      v_periode_recycl := ''1'';
     END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
    END IF; -- FIN ZREACT <= PERIODEENCOURS
   EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF; -- FIN UPDATING DRPAI2 ou ZREACT
 END IF; -- FIN INSERTING/UPDATING
 IF v_error_periode_recycl_3 = 1 THEN
  RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');
 END IF;
END IF; -- FIN v_periode_recycl = 0 ou 3
';
  END IF;
  v_retour := v_retour||'
IF v_periode_recycl = ''2'' THEN
 RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC01'');
ELSIF v_periode_recycl = ''1'' THEN
';
  OPEN cur_numpac;
  LOOP FETCH cur_numpac INTO lig_numpac ;
    EXIT WHEN cur_numpac%NOTFOUND ;
    IF lig_numpac.numpac<>'*' THEN
      v_retour := v_retour||' b'||lig_numpac.numpac||' := (v_numpac='''||lig_numpac.numpac||''') ;';
    END IF;
  END LOOP;
  CLOSE cur_numpac;
  -- on vérifie si des colonnes paies ont été modifié
  v_retour := v_retour||' v_recycl:=''N'';';
  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
 select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
END IF;
IF DELETING THEN
 date_test_recycl := :old.'||nom_col_date_test_recycl||';
ELSE
 date_test_recycl := :new.'||nom_col_date_test_recycl||';
END IF;
IF (NVL(TO_CHAR(date_test_recycl,''yyyymm''),''000000'') <= tabPeriodeByNumpac(v_numpac)) THEN
';
  END IF;
  v_retour := v_retour||'
IF INSERTING OR DELETING THEN 
 v_recycl:=''O'';
ELSIF UPDATING THEN
';
  condition := NULL;
  OPEN cur_mapdo;
  LOOP FETCH cur_mapdo INTO lig_mapdo ;
    IF donneeprec IS NOT NULL AND (cur_mapdo%NOTFOUND OR lig_mapdo.donneegxp<>donneeprec ) THEN
      IF sscondition IS NOT NULL THEN
        sscondition := '('||sscondition||') and ';
      END IF;
      IF condition IS NULL AND NOM_TABLE ='DIC_ADM_CONTRAT_HISTO' THEN
        condition := ' IF NVL(:OLD.DRPAI2, ''B'') <> NVL(:NEW.DRPAI2, ''B'') AND (NVL(:OLD.DRPAI2, ''B'') =''B'' OR NVL(:NEW.DRPAI2, ''B'')=''B'') THEN v_recycl:=''O'';';
      END IF;
      IF condition IS NULL THEN
        condition := ' if ';
      ELSE
        condition := condition||' elsif ';
      END IF;
      condition := condition||sscondition||' (:NEW.'||donneeprec||'<>:OLD.'||donneeprec||' OR (:NEW.'||donneeprec||' IS NOT NULL AND :OLD.'||donneeprec||' IS NULL) OR (:NEW.'||donneeprec||' IS NULL AND :OLD.'||donneeprec||' IS NOT NULL)) THEN
       v_recycl:=''O''; ';
    END IF;
    EXIT WHEN cur_mapdo%NOTFOUND;
    IF lig_mapdo.donneegxp IS NOT NULL THEN
      IF donneeprec IS NULL OR lig_mapdo.donneegxp<>donneeprec THEN
        sscondition := '';
        existeMappingEtoile := 0;
      END IF;
      IF lig_mapdo.numpac = '*' THEN
        sscondition := '';
        existeMappingEtoile := 1;
      ELSIF existeMappingEtoile=0 THEN
        IF sscondition IS NOT NULL THEN
          sscondition := sscondition||' or ';
        END IF;
        sscondition := sscondition||' b'||lig_mapdo.numpac||' ';
      END IF;
      donneeprec := lig_mapdo.donneegxp;
    END IF;
  END LOOP;
  CLOSE cur_mapdo;
  IF condition IS NOT NULL THEN
    condition := condition||' END IF;';
  END IF;
  IF condition IS NULL THEN
    v_retour := v_retour||' NULL; ';
  ELSE
    v_retour := v_retour||condition;
  END IF;
  -- traitement du matricule pour recyclage
  v_retour := v_retour||'
END IF; -- FIN updating
IF v_recycl=''O'' THEN 
 MERGE INTO GAP_RECYCL_MATRIC a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac)
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat) VALUES (b.numpac,b.pacmat);

 MERGE INTO TGE_MODIF_PACMAT_TORESEND a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat, '''||NOM_TABLE||''' as TABLE_TO_SEND FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac and a.TABLE_TO_SEND=b.TABLE_TO_SEND)
  WHEN MATCHED THEN update set a.DATE_MAJ=sysdate 
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat,a.TABLE_TO_SEND,a.DATE_MAJ) VALUES (b.numpac,b.pacmat,b.TABLE_TO_SEND, sysdate);
END IF; -- FIN v_recycl
';
  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||' END IF; -- FIN test date recycl';
  END IF;
  v_retour := v_retour||'
END IF; -- FIN v_periode_recycl IN (''0'',''3'')
'|| TGE_CREATE_TRIGGER_RETRO(NOM_TABLE) ||'
END IF; -- FIN NOT v_numpac = ''TMPPAC''
END LOOP; -- FIN tab
END IF; -- FIN tab.exists(1)
END IF; -- FIN v_type_writer <> ''N'' AND v_type_writer<>''M''
-- FIN TRAITEMENT RECYCLAGE
';

END IF;

  return v_retour;
END TGE_CREATE_TRIGGER_RECYCLAGE;
##
TRG_CONTRAT_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le NUMPAC, ni le PACMAT, ni le NUMCNT
  IF UPDATING AND (NOT :OLD.NUMPAC=:NEW.NUMPAC OR NOT :OLD.PACMAT=:NEW.PACMAT OR NOT :OLD.NUMCNT=:NEW.NUMCNT) THEN
    -- Message d''erreur --> On interdit la mise à jour du NUMPAC, du PACMAT et du NUMCNT : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes NUMPAC, PACMAT et NUMCNT n''''est pas autorisée : vous devez supprimer puis recréer le contrat'');
  END IF;
  -- On vérifie qu''on ne modifie pas le RHID et qu''il n''est pas vide
  IF (INSERTING OR UPDATING) AND :NEW.MATRIC IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne MATRIC doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT :OLD.MATRIC=:NEW.MATRIC THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne MATRIC n''''est pas autorisée'');
  END IF;
  -- On vérifie qu''on ne modifie pas la date de début de contrat et qu''elle n''est pas vide
  IF (INSERTING OR UPDATING) AND :NEW.DSDCN IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne DSDCN doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT :OLD.DSDCN=:NEW.DSDCN THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne DSDCN n''''est pas autorisée'');
  END IF;
  
  IF INSERTING THEN
    -- On regarde si le couple NUMPAC/PACMAT existe dans SECUPACMAT (premier contrat du couple ?), et si un NUMPAC temporaire est positionné pour le MATRIC (premier contrat du MATRIC ?)
    BEGIN
      SELECT NVL(MATRIC,''NO_MATRIC'') INTO v_matricForPacmat FROM SECUPACMAT WHERE NUMPAC=:NEW.NUMPAC AND PACMAT=:NEW.PACMAT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN v_matricForPacmat:=NULL;
      WHEN OTHERS THEN RAISE;
    END;
    IF v_matricForPacmat IS NULL THEN
      v_nbLig:=0;
    ELSE
      IF NOT v_matricForPacmat=:NEW.MATRIC THEN
        -- Le couple NUMPAC/PACMAT existe pour un autre MATRIC
        RAISE_APPLICATION_ERROR(-20000,''Erreur lors de l''''attribution du PACMAT pour le matricule ''||:NEW.MATRIC||'' sur le PAC ''||:NEW.NUMPAC||'' : le PACMAT ''||:NEW.PACMAT||'' est déjà associé au matricule ''||v_matricForPacmat);
      END IF;
      v_nbLig:=1;
    END IF;
    IF v_nbLig=0 THEN
      -- Premier contrat pour le couple NUMPAC/PACMAT : on insère dans SECUPACMAT (ou on met à jour la ligne ayant un NUMPAC temporaire, si elle existe)
      SELECT COUNT(*) INTO v_nbLig FROM SECUPACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=:NEW.MATRIC;
      IF v_nbLig=1 THEN
        -- Il y a un couple NUMPAC/PACMAT temporaire dans SECUPACMAT pour ce MATRIC : on le met à jour
        UPDATE SECUPACMAT SET NUMPAC=:NEW.NUMPAC, PACMAT=:NEW.PACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=:NEW.MATRIC;
      ELSE
        -- On insère le couple NUMPAC/PACMAT dans SECUPACMAT
        INSERT INTO SECUPACMAT (NUMPAC, PACMAT, MATRIC) VALUES (:NEW.NUMPAC, :NEW.PACMAT, :NEW.MATRIC);
        v_doMajPerso := 1;
      END IF;
    END IF;
    -- Si la colonne NUMCNT_ORIGINE est vide, on la valorise avec NUMCNT
    IF :NEW.NUMCNT_ORIGINE IS NULL THEN
      :NEW.NUMCNT_ORIGINE := :NEW.NUMCNT;
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,:NEW.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||:NEW.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF insérés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(:NEW.MATRIC, :NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;
    
   IF NOT tabPeriodeByNumpac.exists(:NEW.NUMPAC) THEN
       SELECT PERIODEENCOURS INTO tabPeriodeByNumpac(:NEW.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = :NEW.NUMPAC;
   END IF;
   
   	v_date_debut_periode_paie := to_date(tabPeriodeByNumpac(:NEW.NUMPAC) || ''01'',''YYYYMMDD''); 

   	IF :NEW.DSDCN < v_date_debut_periode_paie THEN
    	:NEW.ENTREE_RETRO := ''O'';
   	ELSE
	   	:NEW.ENTREE_RETRO := ''N'';
    END IF;

    IF :NEW.DSFCN < v_date_debut_periode_paie THEN
    	:NEW.SORTIE_RETRO := ''O'';
   	ELSE
	   	:NEW.SORTIE_RETRO := ''N'';
    END IF;

    
  ELSIF UPDATING AND (NOT UPDATING(''DATE_EFF_CONTRAT'') AND NOT UPDATING(''CURRENT_PAIEZAD'')) THEN
    -- On considère que c''est une "vraie" mise à jour si ce n''est pas de la mise à jour de DATE_EFF_CONTRAT ou CURRENT_PAIEZAD
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,:NEW.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||:NEW.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF modifiés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(:NEW.MATRIC, :NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;

    IF UPDATING(''DSFCN'') THEN
       IF NOT tabPeriodeByNumpac.exists(:OLD.NUMPAC) THEN
         SELECT PERIODEENCOURS INTO tabPeriodeByNumpac(:OLD.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = :OLD.NUMPAC;
       END IF;
    	v_date_debut_periode_paie := to_date(tabPeriodeByNumpac(:NEW.NUMPAC) || ''01'',''YYYYMMDD''); 
    	IF :NEW.DSFCN < v_date_debut_periode_paie THEN
    		:NEW.SORTIE_RETRO := ''O'';
    	ELSE
	    	:NEW.SORTIE_RETRO := ''N'';
    	END IF;
    END IF;
  ELSIF DELETING THEN
    IF (v_listNumpacPacmatToDelete IS NULL OR INSTR(v_listNumpacPacmatToDelete, '',''||:OLD.NUMPAC||:OLD.PACMAT||'','')<=0) THEN
      -- On liste les couples NUMPAC/PACMAT supprimés pour les traiter par la suite
      v_NUMPAC_PACMAT.MATRIC:=:OLD.MATRIC;
      v_NUMPAC_PACMAT.NUMPAC:=:OLD.NUMPAC;
      v_NUMPAC_PACMAT.PACMAT:=:OLD.PACMAT;
      IF v_TAB_NUMPAC_PACMAT IS NULL THEN
        v_TAB_NUMPAC_PACMAT:=TAB_NUMPAC_PACMAT_TO_DELETE(v_NUMPAC_PACMAT);
      ELSE
        v_TAB_NUMPAC_PACMAT.EXTEND();
        v_TAB_NUMPAC_PACMAT(v_TAB_NUMPAC_PACMAT.last):=v_NUMPAC_PACMAT;
      END IF;
      v_listNumpacPacmatToDelete := v_listNumpacPacmatToDelete||:OLD.NUMPAC||:OLD.PACMAT||'','';
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF supprimés
    v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(:OLD.MATRIC, :OLD.NUMPAC, :OLD.PACMAT, :OLD.NUMCNT, :OLD.DSDCN);
    v_cles_idx_contrat.extend;
    v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
  END IF;
';
END TRG_CONTRAT_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_AFTER_ROW
  RETURN CLOB
AS
  v_retour CLOB;
  v_prec_donneegxp VARCHAR2(100);
  CURSOR cur_mapdo
  IS
    SELECT
      NUMPAC,
      ELEMENT,
      DONNEEGXP
    FROM
      TGE_REF_MAPDO
    WHERE
      ELEMENT IN
      (
        SELECT
          'A301'
        FROM
          dual
      UNION ALL
      SELECT
        'A302'
      FROM
        dual
      UNION
      SELECT
        nom_elt
      FROM
        tge_map_arg_elt
      WHERE
        code_table = 'LTP'
      )
    ORDER BY
      ELEMENT,
      NUMPAC DESC;
    lig_mapdo cur_mapdo%rowtype;
    lig_mapdo_prec cur_mapdo%rowtype := NULL;
  BEGIN
    v_retour :=
    ' 
v_numpac := NVL(:NEW.NUMPAC,:OLD.NUMPAC); 

v_pacmat :=NVL(:NEW.PACMAT,:OLD.PACMAT);
v_paiezad := NVL(:NEW.paiezad,:OLD.paiezad); 
v_periode := TO_CHAR(LEAST(NVL(:NEW.date_eff,:OLD.date_eff), NVL(:OLD.date_eff,:NEW.date_eff)), ''YYYYMM''); 
-- On ne traite que l''UPDATE, et on n''ajoute chaque couple NUMPAC/PAIEZAD qu''une seule fois 
IF NOT tabTrtPeriodesIndividuelles.exists(v_numpac||v_paiezad) THEN 
tabTrtPeriodesIndividuelles(v_numpac||v_paiezad) := ''O''; 
IF INSERTING OR DELETING THEN 
alimPeriodesIndiv := TRUE; 
ELSE 
alimPeriodesIndiv := FALSE; '
    ;
    OPEN cur_mapdo;
    LOOP
      FETCH
        cur_mapdo
      INTO
        lig_mapdo ;
        
      IF lig_mapdo_prec.element IS NOT NULL AND
        (
          cur_mapdo%NOTFOUND OR NOT lig_mapdo_prec.element=lig_mapdo.element
        )
        THEN
        -- La dernière ligne traitée était la dernière ligne de mapping pour l'
        -- élément précédent
        -- Si c'était le PAC *, c'est le cas par défaut (ELSE), sinon, on
        -- continue de tester le PAC
       
        IF lig_mapdo_prec.numpac='*' THEN
          v_retour             := v_retour||' 
ELSE ';
        ELSE
          v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo_prec.numpac||
          ''' THEN ';
        END IF;
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo_prec.element
        ||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||
        lig_mapdo_prec.element||''') := '||REPLACE(v_prec_donneegxp,':old',':new')||'; 
END IF; ';
        IF NOT lig_mapdo_prec.numpac='*' THEN
          -- Pas de ligne avec un PAC * : cas par défaut --> NULL
          v_retour := v_retour||' 
ELSE 
tabValToCompare(''old'||
          lig_mapdo_prec.element||''') := NULL; 
tabValToCompare(''new'||
          lig_mapdo_prec.element||''') := NULL; 
END IF; ';
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND;
    
       SELECT
          ':old.'
          ||LISTAGG(donneegxp,'||:old.') WITHIN GROUP (
        ORDER BY
          donneegxp)
        INTO
          v_prec_donneegxp
        FROM
          (
            SELECT
              numpac,
              donneegxp
            FROM
              TABLE (get_gxp_trt_particulier_datas('DIC_ADM_CONTRAT_HISTO',lig_mapdo.element))
            UNION
            SELECT
              lig_mapdo.numpac,
              lig_mapdo.donneegxp
            FROM
              dual
          );  
    
    
      -- C'est la toute première ligne, ou bien la ligne précédente était la
      -- dernière ligne de mapping pour l'élément précédent
      -- On recommence un nouveau bloc IF
      IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=
        lig_mapdo.element THEN
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo.element||
        ''') := NULL; 
tabValToCompare(''new'||lig_mapdo.element||
        ''') := NULL; 
IF v_numpac IS NULL THEN NULL; ';
      END IF;
      IF NOT lig_mapdo.numpac='*' THEN
        v_retour            := v_retour||' 
ELSIF v_numpac='''||
        lig_mapdo.numpac||''' THEN 
tabValToCompare(''old'||lig_mapdo.element||
        ''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||
        lig_mapdo.element||''') := '||REPLACE(v_prec_donneegxp,':old',':new')||';  ';
      END IF;
      lig_mapdo_prec := lig_mapdo;
    END LOOP;
    CLOSE cur_mapdo;
    IF lig_mapdo_prec.element IS NOT NULL THEN
      -- On est passé au moins une fois dans la boucle
      lig_mapdo_prec := NULL;
      OPEN cur_mapdo;
      LOOP
        FETCH
          cur_mapdo
        INTO
          lig_mapdo ;
        EXIT
      WHEN cur_mapdo%NOTFOUND;
        -- C'est la toute première ligne, ou bien la ligne précédente était la
        -- dernière ligne de mapping pour l'élément précédent
        IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=
          lig_mapdo.element THEN
          v_retour := v_retour||' 
IF tabValToCompare(''new'||lig_mapdo.element
          ||''')<>tabValToCompare(''old'||lig_mapdo.element||
          ''') OR (tabValToCompare(''new'||lig_mapdo.element||
          ''') IS NOT NULL AND tabValToCompare(''old'||lig_mapdo.element||
          ''') IS NULL) OR (tabValToCompare(''new'||lig_mapdo.element||
          ''') IS NULL AND tabValToCompare(''old'||lig_mapdo.element||
          ''') IS NOT NULL) THEN 
alimPeriodesIndiv := TRUE; 
END IF; ';
        END IF;
        lig_mapdo_prec := lig_mapdo;
      END LOOP;
      CLOSE cur_mapdo;
    END IF;
    v_retour := v_retour||
    ' 
END IF; 
IF alimPeriodesIndiv THEN 
-- Modification de la date de début ou de fin de suspension : on met à jour la table des périodes individuelles 
idxPeriodesIndiv := null; 
FOR i IN 1..paiezadTab.count LOOP 
IF numpacTab(i) = v_numpac AND paiezadTab(i) = v_paiezad THEN 
idxPeriodesIndiv := i; 
EXIT; 
END IF; 
end LOOP ;  

IF idxPeriodesIndiv IS NOT NULL THEN 
periodeTab(idxPeriodesIndiv) := LEAST(periodeTab(idxPeriodesIndiv), v_periode); 
ELSE 
paiezadTab.EXTEND ; 
paiezadTab(paiezadTab.LAST) := v_paiezad; 
numpacTab.EXTEND ; 
numpacTab(numpacTab.LAST) := v_numpac; 
periodeTab.EXTEND ; 
periodeTab(periodeTab.LAST) := v_periode; 
END IF; 
END IF; 
END IF; 
IF NOT tabPresenceFichierPacmat.exists(v_numpac||v_pacmat) THEN
  tabPresenceFichierPacmat(v_numpac||v_pacmat).NUMPAC := v_numpac; 
  tabPresenceFichierPacmat(v_numpac||v_pacmat).PACMAT := v_pacmat;
END IF; 
IF  v_lanceRecalculHp THEN 
 in_calc_hp := T_TRAITEMENT_PERIODES_INDIV();
 in_calc_hp(''P_NUMPAC''):=NVL(:NEW.NUMPAC,:OLD.NUMPAC); 
 in_calc_hp(''P_PACMAT''):=NVL(:NEW.PACMAT,:OLD.PACMAT); 
 in_calc_hp(''P_PAIEZAD''):=NVL(:NEW.PAIEZAD,:OLD.PAIEZAD); 
 in_calc_hp(''P_NUMCNT''):=TO_CHAR(NVL(:NEW.NUMCNT,:OLD.NUMCNT)); 
 in_calc_hp(''P_DATE_EFF''):=TO_CHAR(NVL(:NEW.DATE_EFF,:OLD.DATE_EFF),''DD/MM/YYYY''); 
 in_calc_hp(''P_DATE_SORTIE_SIT_BO''):=TO_CHAR(NVL(:NEW.date_sortie_sit_bo,:OLD.date_sortie_sit_bo),''DD/MM/YYYY''); 
 in_calc_hp(''P_LOGIN'') :=''TRIGGER''; 
 in_calc_hp(''p_isDeleting'') :=v_isDeleting;
 calcHpTab.EXTEND ;
 calcHpTab(calcHpTab.LAST) := in_calc_hp;
END IF; 
'
    ;
    RETURN v_retour;
  END TRG_CONTRAT_HISTO_AFTER_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_STMNT
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_AFTER_STMNT RETURN CLOB AS 
BEGIN
  RETURN '
  IF v_listMatricToUpdate IS NOT NULL THEN
    -- Insère dans la table temporaire les NUMPAC/PACMAT/MATRIC à mettre à jour
    --DBMS_OUTPUT.PUT_LINE(''CONTRAT_HISTO UPDATING ''||v_listMatricToUpdate);
    --FIXME utiliser la procédure trace_dbms_output()
    EXECUTE_IMMEDIATE_STRING (''INSERT INTO SECUPACMAT_TMP_CONTRAT (NUMPAC, PACMAT, MATRIC) SELECT DISTINCT NUMPAC, PACMAT, MATRIC FROM SECUPACMAT WHERE MATRIC IN (''||v_listMatricToUpdate||'')'',0);
    SECNAV_MAJ_CURRENT_CONTRAT(''DO_MAJ'', 0, 1, 0);
    DELETE FROM SECUPACMAT_TMP_CONTRAT;
    IF INSERTING THEN
      v_actionIdx := ''I'';
    ELSIF UPDATING THEN
      v_actionIdx := ''U'';
    ELSIF DELETING THEN
      v_actionIdx := ''D'';
    END IF;
    DBMS_JOB.SUBMIT(v_jobIdx , ''BEGIN NULL; END;'' , sysdate+1);
 	DBMS_JOB.WHAT(v_jobIdx , ''ALIM_IDX.COMPARE_CONTRAT_HISTO_JOB(''||v_jobIdx||'', ''''''||v_actionIdx||'''''');'');
 	DBMS_JOB.NEXT_DATE(v_jobIdx ,  sysdate-1);
    INSERT INTO DIC_IDX_JOB_KEYS SELECT v_jobIdx, T.* FROM TABLE(v_cles_idx_contrat) T;
    IF INSERTING OR UPDATING THEN
      INSERT INTO DIC_IDX_JOB_OLD_DATAS VALUES (v_jobIdx, ANYDATA.CONVERTCOLLECTION(GET_DACH_MULTI_HORS_TRANSAC(v_cles_idx_contrat)));
    END IF;
  END IF;
   --CRF RSI 
  select count(*) into v1_bypass_DACH from bypass_trg_DACH_on_session;
  IF v1_bypass_DACH =0 THEN
  FOR i IN 1..paiezadTab.count
  LOOP
    IF v_type_writer = ''M'' THEN
      listJobMasseAsync := listJobMasseAsync || ''
      TGE_ALIM_PERIODE_INDIV(0, '''''' || numpacTab(i) || '''''', '''''' || periodeTab(i) || '''''', '''''' || paiezadTab(i) || '''''');'';
    ELSE
      TGE_ALIM_PERIODE_INDIV(0, numpacTab(i), periodeTab(i), paiezadTab(i));
    END IF;
  END LOOP ;
  
  FOR i IN 1..calcHpTab.count
  LOOP
  	in_calc_hp := calcHpTab(i);
	IF in_calc_hp.exists(''P_NUMPAC'') THEN
	  	IF v_type_writer = ''M'' THEN
	      	listJobMasseAsync := listJobMasseAsync || ''
	      		CALC_HP.PRINCIPAL(
			    '''''' || in_calc_hp(''P_NUMPAC'') || '''''',
			    '''''' || in_calc_hp(''P_PACMAT'') || '''''',
			    '''''' || in_calc_hp(''P_PAIEZAD'') || '''''',
			     	'' || in_calc_hp(''P_NUMCNT'') || '',
			    '''''' || in_calc_hp(''P_DATE_EFF'') || '''''',
			    '''''' || in_calc_hp(''P_DATE_SORTIE_SIT_BO'') || '''''',
			    '''''' || in_calc_hp(''P_LOGIN'') || '''''', 
			    '''''' || in_calc_hp(''p_isDeleting'')  || ''''''
			  	);'';
	    ELSE
	        CALC_HP.PRINCIPAL(
			    in_calc_hp(''P_NUMPAC''),
			    in_calc_hp(''P_PACMAT''),
			    in_calc_hp(''P_PAIEZAD''),
			    TO_NUMBER(in_calc_hp(''P_NUMCNT'')),
			    in_calc_hp(''P_DATE_EFF''),
			    in_calc_hp(''P_DATE_SORTIE_SIT_BO''),
			    in_calc_hp(''P_LOGIN'') , 
			    in_calc_hp(''p_isDeleting'') 
			  );
	    END IF;
	 END IF;
 END LOOP ;
 END IF; 
 --FIN CRF RSI
  -- maj secupacmat.PRESENCE_FICHIER
  indexTabPresFicPacmat := tabPresenceFichierPacmat.FIRST;
  WHILE indexTabPresFicPacmat IS NOT NULL LOOP
    IF v_type_writer = ''M'' THEN
      listJobMasseAsync := listJobMasseAsync || ''
      R_PRESENT_FICHIER_PAIE('''''' || tabPresenceFichierPacmat(indexTabPresFicPacmat).NUMPAC || '''''','''''' || tabPresenceFichierPacmat(indexTabPresFicPacmat).PACMAT || '''''');'';
    ELSE
      R_PRESENT_FICHIER_PAIE(tabPresenceFichierPacmat(indexTabPresFicPacmat).NUMPAC,tabPresenceFichierPacmat(indexTabPresFicPacmat).PACMAT);
    END IF;
    indexTabPresFicPacmat := tabPresenceFichierPacmat.NEXT(indexTabPresFicPacmat);
  end loop;
  --Lancement du job async lors d''une mise à jour Manuelle, en Masse (type_writer = ''M'')
  IF v_type_writer = ''M'' THEN
	  DBMS_JOB.SUBMIT(v_jobAsyncMasseIdx , ''BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''début ASYNC TRG_DACH'''');
			 
	     '' || listJobMasseAsync || ''
	     
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''fin ASYNC TRG_DACH OK'''');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''''TGE_JOB_MASSE'''',''''fin ASYNC TRG_DACH KO : ''''|| SQLCODE|| SQLERRM);
	  END;'', sysdate, null);
  END IF;
';
END TRG_CONTRAT_HISTO_AFTER_STMNT;
##
TRG_CONTRAT_HISTO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le NUMPAC, ni le PACMAT, ni le NUMCNT, ni la date d''effet
  IF UPDATING AND (NOT :OLD.NUMPAC=:NEW.NUMPAC OR NOT :OLD.PACMAT=:NEW.PACMAT OR NOT :OLD.NUMCNT=:NEW.NUMCNT OR NOT :OLD.DATE_EFF=:NEW.DATE_EFF) THEN
    -- Message d''erreur --> On interdit la mise à jour du NUMPAC, du PACMAT et de la date d''effet : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes NUMPAC, PACMAT, NUMCNT et DATE_EFF n''''est pas autorisée : vous devez supprimer puis recréer l''''occurrence'');
  END IF;
  IF INSERTING OR UPDATING THEN
    IF :NEW.DATE_FIN IS NULL THEN
      :NEW.DATE_FIN := TO_DATE(''20991231'',''yyyymmdd'');
    END IF;
  END IF;
  IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
    IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,NVL(:NEW.MATRIC,:OLD.MATRIC))<=0 THEN
      -- On stocke la liste des NUMPAC/PACMAT modifiés
      IF v_nbMatricToUpdate=1000 THEN
        v_nbMatricToUpdate := 0;
        v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToUpdate>0 THEN
        v_listMatricToUpdate := v_listMatricToUpdate||'','';
      END IF;
      v_listMatricToUpdate := v_listMatricToUpdate||''''''''||NVL(:NEW.MATRIC,:OLD.MATRIC)||'''''''';
      v_nbMatricToUpdate := v_nbMatricToUpdate+1;
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF insérés/modifiés/supprimés
    v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(NVL(:NEW.MATRIC,:OLD.MATRIC), NVL(:NEW.NUMPAC,:OLD.NUMPAC), NVL(:NEW.PACMAT,:OLD.PACMAT), NVL(:NEW.NUMCNT,:OLD.NUMCNT), NVL(:NEW.DATE_EFF,:OLD.DATE_EFF));
    v_cles_idx_contrat.extend;
    v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
  END IF;
 IF INSERTING OR DELETING THEN
      v_ligDACHPrec := GET_CONTRAT_HISTO_HORS_TRANSAC(v_numpac, NVL(:NEW.PACMAT,:OLD.PACMAT), NVL(:NEW.NUMCNT,:OLD.NUMCNT), NVL(:NEW.DATE_EFF,:OLD.DATE_EFF)-1, TRUE);
    END IF;
    v_lanceRecalculHp                              :=FALSE;
    v_isDeleting                                         :=0;
    IF UPDATING THEN
      IF FALSE THEN -- DEBUT :NEW<>:OLD
        NULL;
      ELSIF (( :NEW.ZA820<>:OLD.ZA820) OR (:NEW.ZA820 IS NOT NULL AND :OLD.ZA820 IS NULL) OR (:NEW.ZA820 IS NULL AND :OLD.ZA820 IS NOT NULL) OR (:NEW.ZA819<>:OLD.ZA819) OR (:NEW.ZA819 IS NOT NULL AND :OLD.ZA819 IS NULL) OR (:NEW.ZA819 IS NULL AND :OLD.ZA819 IS NOT NULL))THEN
        v_lanceRecalculHp:=true;
      END IF;
    ELSIF INSERTING THEN
      IF FALSE THEN -- DEBUT :NEW<>:OLD
        NULL;
      ELSIF ( (:NEW.ZA820<>v_ligDACHPrec.ZA820) OR (:NEW.ZA820 IS NOT NULL AND v_ligDACHPrec.ZA820 IS NULL) OR (:NEW.ZA820 IS NULL AND v_ligDACHPrec.ZA820 IS NOT NULL)OR (:NEW.ZA819<>v_ligDACHPrec.ZA819) OR (:NEW.ZA819 IS NOT NULL AND v_ligDACHPrec.ZA819 IS NULL) OR (:NEW.ZA819 IS NULL AND v_ligDACHPrec.ZA819 IS NOT NULL)) THEN
        v_lanceRecalculHp:=true;
      END IF; -- FIN :NEW<>:OLD
    ELSIF DELETING THEN
      IF FALSE THEN -- DEBUT :NEW<>:OLD
        NULL;
      ELSIF ( (:OLD.ZA820<>v_ligDACHPrec.ZA820) OR (:OLD.ZA820 IS NOT NULL AND v_ligDACHPrec.ZA820 IS NULL) OR (:OLD.ZA820 IS NULL AND v_ligDACHPrec.ZA820 IS NOT NULL)OR (:OLD.ZA819<>v_ligDACHPrec.ZA819) OR (:OLD.ZA819 IS NOT NULL AND v_ligDACHPrec.ZA819 IS NULL) OR (:OLD.ZA819 IS NULL AND v_ligDACHPrec.ZA819 IS NOT NULL)) THEN
        v_lanceRecalculHp:=true;
        v_isDeleting     :=1;
      END IF;
    END IF ;
';
END TRG_CONTRAT_HISTO_BEFORE_ROW;
##
TRG_PERSO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_PERSO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  IF INSERTING THEN
    -- On vérifie que le NUMPAC soit renseigné : si ce n''est pas le cas, on positionne un NUMPAC temporaire
    IF :NEW.CURRENT_NUMPAC IS NULL THEN
      :NEW.CURRENT_NUMPAC:=''TMPPAC'';
    END IF;
    -- On vérifie que le PACMAT soit renseigné : si ce n''est pas le cas, on va cherche le prochain PACMAT du NUMPAC
    IF :NEW.CURRENT_PACMAT IS NULL THEN
      :NEW.CURRENT_PACMAT:=PAC_SEQUENCE_GET_NEXT(:NEW.CURRENT_NUMPAC);
    END IF;
    -- On regarde si le couple NUMPAC/PACMAT n''existe pas déjà dans SECUPACMAT pour un autre MATRIC
    BEGIN
      SELECT NVL(MATRIC,''NO_MATRIC'') INTO v_matricForPacmat FROM SECUPACMAT WHERE NUMPAC=:NEW.CURRENT_NUMPAC AND PACMAT=:NEW.CURRENT_PACMAT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN v_matricForPacmat:=NULL;
      WHEN OTHERS THEN RAISE;
    END;
    IF v_matricForPacmat IS NOT NULL AND NOT v_matricForPacmat=:NEW.MATRIC THEN
      -- Le couple NUMPAC/PACMAT existe pour un autre MATRIC
      RAISE_APPLICATION_ERROR(-20000,''Erreur lors de l''''attribution du PACMAT pour le matricule ''||:NEW.MATRIC||'' sur le PAC ''||:NEW.CURRENT_NUMPAC||'' : le PACMAT ''||:NEW.CURRENT_PACMAT||'' est déjà associé au matricule ''||v_matricForPacmat);
    END IF;
    -- On insère dans SECUPACMAT
    --INSERT INTO SECUPACMAT (NUMPAC, PACMAT, MATRIC, PRIORITE_SITUATION) VALUES (:NEW.CURRENT_NUMPAC, :NEW.CURRENT_PACMAT, :NEW.MATRIC, 0);
    merge into SECUPACMAT a using (select :NEW.CURRENT_NUMPAC as numpac, :NEW.CURRENT_PACMAT as pacmat, :NEW.MATRIC as matric , 0 as PRIORITE_SITUATION from dual) b on (a.numpac=b.numpac and a.pacmat=b.pacmat )
    when not matched then
    insert (a.NUMPAC, a.PACMAT, a.MATRIC, a.PRIORITE_SITUATION) values (b.NUMPAC, b.PACMAT, b.MATRIC, b.PRIORITE_SITUATION);

    -- On stocke la liste des MATRIC modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,:NEW.MATRIC)<=0) THEN
      IF v_nbMatricToUpdate=1000 THEN
        v_nbMatricToUpdate := 0;
        v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToUpdate>0 THEN
        v_listMatricToUpdate := v_listMatricToUpdate||'','';
      END IF;
      v_listMatricToUpdate := v_listMatricToUpdate||''''''''||:NEW.MATRIC||'''''''';
      v_nbMatricToUpdate := v_nbMatricToUpdate+1;
    END IF;
  ELSIF UPDATING THEN
    -- On vérifie qu''on ne modifie pas le RHID
    IF NOT :OLD.MATRIC=:NEW.MATRIC THEN
      -- Message d''erreur --> On interdit la mise à jour du RHID : il faut faire un delete puis un insert
      RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne MATRIC n''''est pas autorisée : vous devez supprimer puis recréer le dossier'');
    END IF;
    IF (NOT UPDATING(''DATE_EFF_PERSO'') AND NOT UPDATING(''CURRENT_NUMPAC'') AND NOT UPDATING(''CURRENT_PACMAT'') AND NOT UPDATING(''CURRENT_NUMCNT'') AND NOT UPDATING(''DATE_EFF_CONTRAT'')) THEN
      -- On considère que c''est une "vraie" mise à jour si ce n''est pas de la mise à jour de DATE_EFF_PERSO, CURRENT_NUMPAC, CURRENT_PACMAT, CURRENT_NUMCNT ou DATE_EFF_CONTRAT
      -- On stocke la liste des MATRIC modifiés
      IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,:NEW.MATRIC)<=0) THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||:NEW.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
    END IF;
  ELSIF DELETING THEN
    -- On stocke la liste des MATRIC supprimés
    IF v_listMatricToDelete IS NULL OR INSTR(v_listMatricToDelete,:OLD.MATRIC)<=0 THEN
      IF v_nbMatricToDelete=1000 THEN
        v_nbMatricToDelete := 0;
        v_listMatricToDelete := v_listMatricToDelete||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToDelete>0 THEN
        v_listMatricToDelete := v_listMatricToDelete||'','';
      END IF;
      v_listMatricToDelete := v_listMatricToDelete||''''''''||:OLD.MATRIC||'''''''';
      v_nbMatricToDelete := v_nbMatricToDelete+1;
    END IF;
  END IF;
';
END TRG_PERSO_BEFORE_ROW;
##
TRG_PERSO_HISTO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_PERSO_HISTO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le RHID, ni la date d''effet
  IF UPDATING AND (NOT :OLD.MATRIC=:NEW.MATRIC OR NOT :OLD.DATE_EFF=:NEW.DATE_EFF) THEN
    -- Message d''erreur --> On interdit la mise à jour du RHID et de la date d''effet : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes MATRIC et DATE_EFF n''''est pas autorisée : vous devez supprimer puis recréer l''''occurrence'');
  END IF;
  IF INSERTING OR UPDATING THEN
    IF :NEW.DATE_FIN IS NULL THEN
      :NEW.DATE_FIN := TO_DATE(''20991231'',''yyyymmdd'');
    END IF;
  END IF;
  IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,NVL(:NEW.MATRIC,:OLD.MATRIC))<=0) THEN
    -- On stocke la liste des MATRIC modifiés
    IF v_nbMatricToUpdate=1000 THEN
      v_nbMatricToUpdate := 0;
      v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
    ELSIF v_nbMatricToUpdate>0 THEN
      v_listMatricToUpdate := v_listMatricToUpdate||'','';
    END IF;
    v_listMatricToUpdate := v_listMatricToUpdate||''''''''||NVL(:NEW.MATRIC,:OLD.MATRIC)||'''''''';
    v_nbMatricToUpdate := v_nbMatricToUpdate+1;
  END IF;
';
END TRG_PERSO_HISTO_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
ALIM_IDX
=SQL=
CREATE OR REPLACE PACKAGE ALIM_IDX
AS
  TYPE T_IDX_DONNEE IS TABLE OF DIC_IDX_CONTRAT_HISTO%ROWTYPE INDEX BY VARCHAR2(32);

  TYPE T_EXISTE_RUPT_DONNEE IS TABLE OF INTEGER INDEX BY VARCHAR2(30);

  TYPE T_EXISTE_IDX_DONNEE IS TABLE OF INTEGER INDEX BY VARCHAR2(32);

  PROCEDURE COMPARE_CONTRAT_JOB(
    p_job_number NUMBER,
    p_action VARCHAR2);

  PROCEDURE COMPARE_CONTRAT(
    p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
    p_action VARCHAR2, 
    p_tabDac T_TAB_DAC, 
    p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE);

  PROCEDURE COMPARE_CONTRAT_HISTO_JOB(
    p_job_number NUMBER,
    p_action VARCHAR2);

  PROCEDURE COMPARE_CONTRAT_HISTO(
    p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
    p_action VARCHAR2, 
    p_tabDach T_TAB_DACH, 
    p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE);

  PROCEDURE INSERT_DATA_CONTRAT(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_ligne T_LIG_DAC);

  PROCEDURE UPDATE_DATA_CONTRAT(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_valueOldContrat CLOB, 
    p_lignePrec T_LIG_DAC, 
    p_ligne T_LIG_DAC, 
    p_ligneSuiv T_LIG_DAC, 
    p_listeDonneesIdx T_EXISTE_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);

  PROCEDURE INSERT_DATA_CONTRAT_HISTO(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_ligne T_LIG_DACH, 
    p_ligneSuiv T_LIG_DACH, 
    p_dsfcn DATE, 
    p_listeDonneesIdx T_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);

  PROCEDURE UPDATE_DATA_CONTRAT_HISTO(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_valueOldContratHisto CLOB, 
    p_lignePrec T_LIG_DACH, 
    p_ligne T_LIG_DACH, 
    p_ligneSuiv T_LIG_DACH, 
    p_dsdcn DATE, 
    p_dsfcn DATE, 
    p_listeDonneesIdx T_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);
END ALIM_IDX;
##
ALIM_IDX
=SQL=
CREATE OR REPLACE PACKAGE BODY ALIM_IDX AS 

  PROCEDURE COMPARE_CONTRAT_JOB(
      p_job_number NUMBER,
      p_action     VARCHAR2) IS
    v_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
    v_anyData ANYDATA;
    v_tabDac T_TAB_DAC;
    TYPE tcur IS REF CURSOR; 
    cur tcur; 
    v_nomDonnee VARCHAR2(30); 
    v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE;
  BEGIN
    SELECT T_CLE_IDX_CONTRAT_HISTO(MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_IDX) BULK COLLECT INTO v_listeClesIdxContrat FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    DELETE FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    IF p_action = 'D' THEN
      ALIM_IDX_DELETE_CONTRAT(v_listeClesIdxContrat);
    ELSE
      SELECT OLD_DATAS INTO v_anyData FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      IF NOT v_anyData.getCollection(v_tabDac) = dbms_types.success THEN
        v_tabDac := T_TAB_DAC();
      END IF;
      DELETE FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      OPEN cur FOR SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT;
      LOOP
        FETCH cur INTO v_nomDonnee;
        EXIT WHEN cur % NOTFOUND;
        v_listeDonneesRupt(v_nomDonnee) := 1;
      END LOOP;
      CLOSE cur;
      COMPARE_CONTRAT(v_listeClesIdxContrat, p_action, v_tabDac, v_listeDonneesRupt);
    END IF;
  END COMPARE_CONTRAT_JOB;

  PROCEDURE COMPARE_CONTRAT(
      p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
      p_action VARCHAR2, 
      p_tabDac T_TAB_DAC, 
      p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
    TYPE T_EXISTE_MATRIC IS TABLE OF INTEGER INDEX BY VARCHAR2(32);
    v_listeMatricules T_EXISTE_MATRIC;
    TYPE T_EXISTE_CLES_CONTRAT IS TABLE OF T_CLE_IDX_CONTRAT_HISTO INDEX BY VARCHAR2(40);
    v_listeClesIdxContrat T_EXISTE_CLES_CONTRAT;
    v_matric VARCHAR(32);
    v_cpt NUMBER;
    TYPE tcur IS REF CURSOR;
    cur tcur;
    v_dacMatric T_TAB_DAC;
    v_lignePrec T_LIG_DAC := GET_EMPTY_LIG_DAC();
    v_ligne T_LIG_DAC := GET_EMPTY_LIG_DAC();
    v_ligneSuiv T_LIG_DAC := GET_EMPTY_LIG_DAC();
  BEGIN
    FOR i in 1..p_listeClesIdxContrat.count LOOP
      v_listeMatricules(p_listeClesIdxContrat(i).MATRIC) := 1;
      v_listeClesIdxContrat(LPAD(p_listeClesIdxContrat(i).MATRIC,32,'0')||TO_CHAR(p_listeClesIdxContrat(i).DATE_IDX,'yyyymmdd')) := p_listeClesIdxContrat(i);
    END LOOP;
    -- Pour chaque salarié (MATRIC) ayant été mis à jour
    v_matric := v_listeMatricules.FIRST;
    WHILE v_matric IS NOT NULL LOOP
      v_dacMatric := GET_DAC_MATRIC(v_matric);
      v_cpt := 0;
      LOOP
        EXIT WHEN v_dacMatric.COUNT=0;
        v_cpt := v_cpt+1;
        IF v_cpt = 1 THEN
          -- Premier passage dans la boucle : le premier contrat est le "courant" (celui qu'on va traiter)
          v_ligne := v_dacMatric(v_cpt);
          v_cpt := v_cpt+1;
        END IF;
        EXIT WHEN v_cpt>v_dacMatric.COUNT;
        -- On récupère le contrat suivant
        v_ligneSuiv := v_dacMatric(v_cpt);
        IF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DSDCN,'yyyymmdd')) THEN
          -- Le contrat "courant" vient d'être inséré ou modifié : on appelle la procédure en passant le contrat précédent et le contrat suivant
          IF p_action = 'I' THEN
            ALIM_IDX_INSERT_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv);
          ELSIF p_action = 'U' THEN
            ALIM_IDX_UPDATE_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDac, p_listeDonneesRupt);
          END IF;
        END IF;
        -- Le contrat "courant" devient le précédent
        v_lignePrec := v_ligne;
        -- Le contrat suivant devient le "courant"
        v_ligne := v_ligneSuiv;
      END LOOP;
      v_ligneSuiv := NULL;
      IF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DSDCN,'yyyymmdd')) THEN
        -- Le dernier contrat vient d'être inséré ou modifié : on appelle la procédure en passant le contrat précédent (et le contrat suivant, même s'il est vide)
        IF p_action = 'I' THEN
          ALIM_IDX_INSERT_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv);
        ELSIF p_action = 'U' THEN
          ALIM_IDX_UPDATE_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDac, p_listeDonneesRupt);
        END IF;
      END IF;
      -- Salarié suivant
      v_matric := v_listeMatricules.NEXT(v_matric);
    END LOOP;
  END COMPARE_CONTRAT;

  PROCEDURE COMPARE_CONTRAT_HISTO_JOB(
      p_job_number NUMBER,
      p_action     VARCHAR2) IS
    v_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
    v_anyData ANYDATA;
    v_tabDach T_TAB_DACH;
    TYPE tcur IS REF CURSOR; 
    cur tcur; 
    v_nomDonnee VARCHAR2(30); 
    v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE;
  BEGIN
    SELECT T_CLE_IDX_CONTRAT_HISTO(MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_IDX) BULK COLLECT INTO v_listeClesIdxContrat FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    DELETE FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    IF p_action = 'D' THEN
      ALIM_IDX_DELETE_CONTRAT_HISTO(v_listeClesIdxContrat);
    ELSE
      SELECT OLD_DATAS INTO v_anyData FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      IF NOT v_anyData.getCollection(v_tabDach) = dbms_types.success THEN
        v_tabDach := T_TAB_DACH();
      END IF;
      DELETE FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      OPEN cur FOR SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT;
      LOOP
        FETCH cur INTO v_nomDonnee;
        EXIT WHEN cur % NOTFOUND;
        v_listeDonneesRupt(v_nomDonnee) := 1;
      END LOOP;
      CLOSE cur;
      COMPARE_CONTRAT_HISTO(v_listeClesIdxContrat, p_action, v_tabDach, v_listeDonneesRupt);
    END IF;
  END COMPARE_CONTRAT_HISTO_JOB;

  PROCEDURE COMPARE_CONTRAT_HISTO(
      p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
      p_action VARCHAR2, 
      p_tabDach T_TAB_DACH, 
      p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
    TYPE T_EXISTE_MATRIC IS TABLE OF INTEGER INDEX BY VARCHAR2(32);
    v_listeMatricules T_EXISTE_MATRIC;
    TYPE T_EXISTE_CLES_CONTRAT IS TABLE OF T_CLE_IDX_CONTRAT_HISTO INDEX BY VARCHAR2(40);
    v_listeClesIdxContrat T_EXISTE_CLES_CONTRAT;
    v_matric VARCHAR(32);
    v_cpt NUMBER;
    TYPE tcur IS REF CURSOR;
    cur tcur;
    v_dachMatric T_TAB_DACH;
    v_lignePrec T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligne T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligneSuiv T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligneSupp T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_cleRechercheSupp VARCHAR(40);
  BEGIN
    FOR i in 1..p_listeClesIdxContrat.count LOOP
      v_listeMatricules(p_listeClesIdxContrat(i).MATRIC) := 1;
      v_listeClesIdxContrat(LPAD(p_listeClesIdxContrat(i).MATRIC,32,'0')||TO_CHAR(p_listeClesIdxContrat(i).DATE_IDX,'yyyymmdd')) := p_listeClesIdxContrat(i);
    END LOOP;
    -- Pour chaque salarié (MATRIC) ayant été mis à jour
    v_matric := v_listeMatricules.FIRST;
    WHILE v_matric IS NOT NULL LOOP
      v_dachMatric := GET_DACH_MATRIC(v_matric);
      v_cpt := 0;
      LOOP
        EXIT WHEN v_dachMatric.COUNT=0;
        v_cpt := v_cpt+1;
        IF v_cpt = 1 THEN
          -- Premier passage dans la boucle : la première occurrence est la "courante" (celle qu'on va traiter)
          v_ligne := v_dachMatric(v_cpt);
          v_cpt := v_cpt+1;
        END IF;
        EXIT WHEN v_cpt>v_dachMatric.COUNT;
        -- On récupère l'occurrence suivante
        v_ligneSuiv := v_dachMatric(v_cpt);
        IF p_action = 'D' THEN
          IF v_cpt > 1 THEN
            -- Ce n'est pas le premier passage dans la boucle : on va vérifier qu'on n'a pas un contrat supprimé entre l'occurrence précédente et la "courante"
            v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(LPAD(v_matric,32,'0')||TO_CHAR(v_lignePrec.DATE_EFF,'yyyymmdd'));
            WHILE v_cleRechercheSupp < LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd') LOOP
              -- On a dans v_listeClesIdxContrat une clé qui n'existe plus : on va faire comme si on avait mis à jour la ligne suivante
              v_ligneSupp.NUMPAC := '_SUPP_';
              ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSupp, p_tabDach, p_listeDonneesRupt);
              v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(v_cleRechercheSupp);
            END LOOP;
          END IF;
        ELSIF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd')) THEN
          -- L'occurrence "courante" vient d'être insérée ou modifiée : on appelle la procédure en passant l'occurrence précédente et l'occurrence suivante
          IF p_action = 'I' THEN
            ALIM_IDX_INSERT_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv);
          ELSIF p_action = 'U' THEN
            ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDach, p_listeDonneesRupt);
          END IF;
        END IF;
        -- L'occurrence "courante" devient la précédente
        v_lignePrec := v_ligne;
        -- L'occurrence suivante devient la "courante"
        v_ligne := v_ligneSuiv;
        -- Pas d'occurrence suivante
        v_ligneSuiv := NULL;
      END LOOP;
      IF p_action = 'D' THEN
        v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(LPAD(v_matric,32,'0')||TO_CHAR(v_lignePrec.DATE_EFF,'yyyymmdd'));
        WHILE v_cleRechercheSupp IS NOT NULL LOOP
          -- On a dans v_listeClesIdxContrat une clé qui n'existe plus : on va faire comme si on avait mis à jour la ligne suivante
          v_ligneSupp.NUMPAC := '_SUPP_';
          ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSupp, p_tabDach, p_listeDonneesRupt);
          v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(v_cleRechercheSupp);
        END LOOP;
      ELSIF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd')) THEN
        -- La dernière occurrence vient d'être insérée ou modifiée : on appelle la procédure en passant l'occurrence précédente (et l'occurrence suivante, même si elle est vide)
        IF p_action = 'I' THEN
          ALIM_IDX_INSERT_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv);
        ELSIF p_action = 'U' THEN
          ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDach, p_listeDonneesRupt);
        END IF;
      END IF;
      -- Salarié suivant
      v_matric := v_listeMatricules.NEXT(v_matric);
    END LOOP;
  END COMPARE_CONTRAT_HISTO;

  PROCEDURE INSERT_DATA_CONTRAT(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_ligne T_LIG_DAC) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    IF NOT v_valueLignePrec = v_valueLigne THEN
    BEGIN
      MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN NULL; 
      WHEN OTHERS THEN 
	 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
	 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
	 END;
    END IF; 
  END INSERT_DATA_CONTRAT;

  PROCEDURE UPDATE_DATA_CONTRAT(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_valueOldContrat CLOB, 
      p_lignePrec T_LIG_DAC, 
      p_ligne T_LIG_DAC, 
      p_ligneSuiv T_LIG_DAC, 
      p_listeDonneesIdx T_EXISTE_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_valueOldContrat CLOB;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    v_valueOldContrat := NVL(p_valueOldContrat, p_emptyValue);
    IF NOT v_valueOldContrat = v_valueLigne THEN
      IF p_lignePrec.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLignePrec = v_valueLigne THEN
          IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
          	BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
             EXCEPTION
             WHEN DUP_VAL_ON_INDEX THEN NULL;
              WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
			 END;
          END IF;
        ELSIF p_listeDonneesIdx.exists(p_nomDonnee) THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
      IF p_ligneSuiv.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLigne = v_valueLigneSuiv THEN
          IF NOT p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
          	BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
          ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
    END IF; 
  END UPDATE_DATA_CONTRAT;

  PROCEDURE INSERT_DATA_CONTRAT_HISTO(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_ligne T_LIG_DACH, 
      p_ligneSuiv T_LIG_DACH, 
      p_dsfcn DATE, 
      p_listeDonneesIdx T_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    IF p_listeDonneesIdx.exists(p_nomDonnee||'-1') THEN
      v_idxContratHistoPrec := p_listeDonneesIdx(p_nomDonnee||'-1');
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
      v_idxContratHisto := p_listeDonneesIdx(p_nomDonnee);
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
      v_idxContratHistoSuiv := p_listeDonneesIdx(p_nomDonnee||'+1');
    END IF;
    IF NOT v_valueLignePrec = v_valueLigne THEN
      IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
        UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
      ELSE
        v_idxContratHisto.NUMPAC := p_ligne.NUMPAC;
        IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
          v_idxContratHisto.DATE_FIN := v_idxContratHistoPrec.DATE_FIN;
          UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligne.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
        ELSIF v_idxContratHistoSuiv.NUMPAC IS NOT NULL AND v_idxContratHistoSuiv.DATE_EFF < p_dsfcn THEN
          v_idxContratHisto.DATE_FIN := v_idxContratHistoSuiv.DATE_EFF-1;
        ELSE
          v_idxContratHisto.DATE_FIN := p_dsfcn;
        END IF;
        BEGIN
        MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHisto.DATE_FIN, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DATE_EFF,p_nomDonnee,v_idxContratHisto.DATE_FIN,SYSDATE);
         EXCEPTION 
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN 
		 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
		 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
		 END;
      END IF;
    END IF;
    IF p_ligneSuiv.NUMPAC IS NOT NULL THEN
      IF NOT v_valueLigne = v_valueLigneSuiv THEN
        IF v_idxContratHistoSuiv.NUMPAC IS NULL OR NOT v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
          BEGIN
          IF v_idxContratHistoSuiv.NUMPAC IS NULL OR p_dsfcn < v_idxContratHistoSuiv.DATE_EFF THEN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=p_dsfcn, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,p_dsfcn,SYSDATE);
          ELSE
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHistoSuiv.DATE_EFF-1, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,v_idxContratHistoSuiv.DATE_EFF-1,SYSDATE);
          END IF;
           EXCEPTION 
           WHEN DUP_VAL_ON_INDEX THEN NULL;
           WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
          IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
          UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
        END IF;
      END IF;
    END IF; 
  END INSERT_DATA_CONTRAT_HISTO;

  PROCEDURE UPDATE_DATA_CONTRAT_HISTO(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_valueOldContratHisto CLOB, 
      p_lignePrec T_LIG_DACH, 
      p_ligne T_LIG_DACH, 
      p_ligneSuiv T_LIG_DACH, 
      p_dsdcn DATE, 
      p_dsfcn DATE, 
      p_listeDonneesIdx T_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_valueOldContratHisto CLOB;
    v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    v_valueOldContratHisto := NVL(p_valueOldContratHisto, p_emptyValue);
    IF p_listeDonneesIdx.exists(p_nomDonnee||'-1') THEN
      v_idxContratHistoPrec := p_listeDonneesIdx(p_nomDonnee||'-1');
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
      v_idxContratHisto := p_listeDonneesIdx(p_nomDonnee);
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
      v_idxContratHistoSuiv := p_listeDonneesIdx(p_nomDonnee||'+1');
    END IF;
    IF p_ligneSuiv.NUMPAC='_SUPP_' OR NOT v_valueOldContratHisto = v_valueLigne THEN
      IF p_lignePrec.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLignePrec = v_valueLigne THEN
          IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            v_idxContratHisto.NUMPAC := p_ligne.NUMPAC;
            IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              v_idxContratHisto.DATE_FIN := v_idxContratHistoPrec.DATE_FIN;
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligne.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoSuiv.NUMPAC IS NOT NULL AND v_idxContratHistoSuiv.DATE_EFF < p_dsfcn THEN
              v_idxContratHisto.DATE_FIN := v_idxContratHistoSuiv.DATE_EFF-1;
            ELSE
              v_idxContratHisto.DATE_FIN := p_dsfcn;
            END IF;
            BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHisto.DATE_FIN, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DATE_EFF,p_nomDonnee,v_idxContratHisto.DATE_FIN,SYSDATE);
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
			 END;
          END IF;
        ELSIF v_idxContratHisto.NUMPAC IS NOT NULL THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) AND p_ligne.DATE_EFF = p_dsdcn THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHisto.DATE_FIN WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=v_idxContratHisto.NUMPAC AND PACMAT=v_idxContratHisto.PACMAT AND NUMCNT=v_idxContratHisto.NUMCNT AND DATE_EFF=v_idxContratHisto.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
        UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
      ELSIF p_ligne.NUMPAC IS NOT NULL THEN
      	BEGIN
        MERGE INTO DIC_IDX_CONTRAT_HISTO_COMP USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT, p_ligne.DATE_EFF, p_nomDonnee, SYSDATE);
         EXCEPTION 
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN 
		 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
		 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
		 END;
      END IF;
      IF p_ligneSuiv.NUMPAC IS NOT NULL AND NOT NVL(p_ligneSuiv.NUMPAC,'_EMPTY_')='_SUPP_' THEN
        IF NOT v_valueLigne = v_valueLigneSuiv THEN
          IF v_idxContratHistoSuiv.NUMPAC IS NULL OR NOT v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
            BEGIN
            IF v_idxContratHistoSuiv.NUMPAC IS NULL OR p_dsfcn < v_idxContratHistoSuiv.DATE_EFF THEN
              MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=p_dsfcn, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,p_dsfcn,SYSDATE);
            ELSE
              MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHistoSuiv.DATE_EFF-1, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,v_idxContratHistoSuiv.DATE_EFF-1,SYSDATE);
            END IF;
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
            IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
          ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) AND NOT p_ligne.NUMCNT = p_ligneSuiv.NUMCNT THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHistoSuiv.DATE_FIN WHERE NUMPAC=v_idxContratHisto.NUMPAC AND PACMAT=v_idxContratHisto.PACMAT AND NUMCNT=v_idxContratHisto.NUMCNT AND DATE_EFF=v_idxContratHisto.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHistoSuiv.DATE_FIN WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=v_idxContratHistoSuiv.NUMPAC AND PACMAT=v_idxContratHistoSuiv.PACMAT AND NUMCNT=v_idxContratHistoSuiv.NUMCNT AND DATE_EFF=v_idxContratHistoSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
    END IF; 
  END UPDATE_DATA_CONTRAT_HISTO;
END ALIM_IDX;
##
TAG_CHARSET=@€éèç
##
CREATE_PROC_IDX_CONTRAT_HISTO
=SQL=
create or replace PROCEDURE CREATE_PROC_IDX_CONTRAT_HISTO AUTHID CURRENT_USER
AS
TYPE TypeColNameCountTable
IS
  RECORD
  (
    COLUMN_NAME USER_TAB_COLUMNS.COLUMN_NAME%TYPE,
    COUNT_TABLE NUMBER,
    COLUMN_TYPE USER_TAB_COLUMNS.DATA_TYPE%TYPE);
TYPE TYP_COL_NAME
IS
  TABLE OF TypeColNameCountTable;
  TabcolContrat TYP_COL_NAME ;
  TabcolContratHisto TYP_COL_NAME ;
  v_reqCreate CLOB;
  v_reqCreateHistoRuptureContrat CLOB;
  v_reqCreateHistoModifOnly CLOB;
  v_reqProcInsertContrat1 CLOB;
  v_reqProcInsertContrat2 CLOB;
  v_reqProcInsertContrat CLOB;
  v_reqProcUpdateContrat1 CLOB;
  v_reqProcUpdateContrat CLOB;
  v_reqProcDeleteContrat1 CLOB;
  v_reqProcDeleteContrat2 CLOB;
  v_reqProcDeleteContrat CLOB;
  v_reqProcInsertContratHisto1 CLOB;
  v_reqProcInsertContratHisto CLOB;
  v_reqProcUpdateContratHisto1 CLOB;
  v_reqProcUpdateContratHisto CLOB;
  v_reqProcDeleteContratHisto CLOB;
  v_listDonneesContratType CLOB;
  v_listDonneesContrat CLOB;
  v_listNullContrat CLOB;
  v_listDonneesContratHistoType CLOB;
  v_listDonneesContratHisto CLOB;
  v_listNullContratHisto CLOB;
  emptyVal VARCHAR2(7);
BEGIN

  -- On crée les types T_LIG_DAC et T_TAB_DAC dynamiquement, avec toutes les colonnes de DAC
  v_listDonneesContratType := NULL;
  v_listDonneesContrat := NULL;
  v_listNullContrat := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContrat := v_listDonneesContrat||r.COLUMN_NAME;
    v_listDonneesContratType := v_listDonneesContratType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratType := v_listDonneesContratType||'('||r.DATA_LENGTH||')';
    ELSIF r.DATA_TYPE='NUMBER' THEN
      v_listDonneesContratType := v_listDonneesContratType||'('||r.DATA_PRECISION||','||r.DATA_SCALE||')';
    END IF;
    v_listDonneesContrat := v_listDonneesContrat||',';
    v_listDonneesContratType := v_listDonneesContratType||',';
    v_listNullContrat := v_listNullContrat||'NULL,';
  END LOOP;
  v_listDonneesContrat := SUBSTR(v_listDonneesContrat, 1, LENGTH(v_listDonneesContrat)-1);
  v_listDonneesContratType := SUBSTR(v_listDonneesContratType, 1, LENGTH(v_listDonneesContratType)-1);
  v_listNullContrat := SUBSTR(v_listNullContrat, 1, LENGTH(v_listNullContrat)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DAC',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DAC IS OBJECT ('||v_listDonneesContratType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DAC IS TABLE OF T_LIG_DAC',0);

  -- On crée la fonction GET_EMPTY_LIG_DAC, qui a besoin du nombre de colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DAC RETURN T_LIG_DAC IS 
BEGIN 
  RETURN T_LIG_DAC('||v_listNullContrat||');
END GET_EMPTY_LIG_DAC;',0);

  -- On crée la fonction GET_DAC_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DAC IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC, PACMAT, NUMCNT FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DAC_MATRIC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DAC IS 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE MATRIC=p_matric ORDER BY DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MATRIC;',0);


  -- On crée les types T_LIG_DACH et T_TAB_DACH dynamiquement, avec toutes les colonnes de DACH
  v_listDonneesContratHistoType := NULL;
  v_listDonneesContratHisto := NULL;
  v_listNullContratHisto := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT_HISTO' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContratHisto := v_listDonneesContratHisto||r.COLUMN_NAME;
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType||'('||r.DATA_LENGTH||')';
    ELSIF r.DATA_TYPE='NUMBER' THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType||'('||r.DATA_PRECISION||','||r.DATA_SCALE||')';
    END IF;
    v_listDonneesContratHisto := v_listDonneesContratHisto||',';
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||',';
    v_listNullContratHisto := v_listNullContratHisto||'NULL,';
  END LOOP;
  v_listDonneesContratHisto := SUBSTR(v_listDonneesContratHisto, 1, LENGTH(v_listDonneesContratHisto)-1);
  v_listDonneesContratHistoType := SUBSTR(v_listDonneesContratHistoType, 1, LENGTH(v_listDonneesContratHistoType)-1);
  v_listNullContratHisto := SUBSTR(v_listNullContratHisto, 1, LENGTH(v_listNullContratHisto)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DACH',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DACH IS OBJECT ('||v_listDonneesContratHistoType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DACH IS TABLE OF T_LIG_DACH',0);

  -- On crée la fonction GET_EMPTY_LIG_DACH, qui a besoin du nombre de colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DACH RETURN T_LIG_DACH IS 
BEGIN 
  RETURN T_LIG_DACH('||v_listNullContratHisto||');
END GET_EMPTY_LIG_DACH;',0);

  -- On crée la fonction GET_DACH_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DACH IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE (NUMPAC,PACMAT,NUMCNT,DATE_EFF) IN (SELECT NUMPAC, PACMAT, NUMCNT, DATE_IDX FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DACH_MATRIC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DACH IS 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE MATRIC=p_matric ORDER BY DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MATRIC;',0);


  SELECT COLUMN_NAME,
    0,
    DATA_TYPE BULK COLLECT
  INTO TabcolContrat
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME='DIC_ADM_CONTRAT'
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('IDPACMAT','DATE_EFF_CONTRAT','CURRENT_PAIEZAD','MATRIC','DATE_CREATION','DATE_DERNIERE_MODIF'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  
  SELECT COLUMN_NAME,
    (SELECT COUNT(*)
    FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT
    WHERE NOM_DONNEE=COLUMN_NAME
    ),
    DATA_TYPE BULK COLLECT
  INTO TabcolContratHisto
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME     ='DIC_ADM_CONTRAT_HISTO'
  AND COLUMN_NAME NOT IN
    (SELECT COLUMN_NAME
    FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME='DIC_ADM_CONTRAT'
    )
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('DATE_EFF','DATE_FIN','MATRIC','PAIEZAD','DATE_CREATION','DATE_DERNIERE_MODIF','DATE_FIN_BO','IDPACMAT','DATE_SORTIE_SIT_BO'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  v_reqCreate          := 'CREATE OR REPLACE PROCEDURE ALIM_IDX_CONTRAT_HISTO (p_onlyFlaggedNumpacPacmat NUMBER) AS ';
  IF TabcolContrat.count>0 THEN
    v_reqCreate        := v_reqCreate||'
    cursor curContrat is SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DSDCN, DSFCN';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Dsdcn;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColContrat IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT.NUMCNT%TYPE, DSDCN DIC_ADM_CONTRAT.DSDCN%TYPE, DSFCN DIC_ADM_CONTRAT.DSFCN%TYPE';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME||' DIC_ADM_CONTRAT.'||TabcolContrat(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligContrat TypeColContrat;';
    v_reqCreate := v_reqCreate||'previous_ligContrat TypeColContrat;   ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'
    cursor curHisto is  SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_EFF, DATE_FIN';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT_HISTO WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Date_eff;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColHisto IS RECORD (MATRIC DIC_ADM_CONTRAT_HISTO.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT_HISTO.NUMCNT%TYPE, DATE_EFF DIC_ADM_CONTRAT_HISTO.DATE_EFF%TYPE, DATE_FIN DIC_ADM_CONTRAT_HISTO.DATE_FIN%TYPE';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME||' DIC_ADM_CONTRAT_HISTO.'||TabcolContratHisto(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligHisto TypeColHisto;';
    v_reqCreate := v_reqCreate||'previous_ligHisto TypeColHisto;   ';
  END IF;
  IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
    v_reqCreate        := v_reqCreate||'TYPE TYP_LIG_IDX IS RECORD ( ';
    v_reqCreate        := v_reqCreate||'  NUMPAC DIC_IDX_CONTRAT_HISTO_TMP.NUMPAC%TYPE, ';
    v_reqCreate        := v_reqCreate||'  PACMAT DIC_IDX_CONTRAT_HISTO_TMP.PACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NUMCNT DIC_IDX_CONTRAT_HISTO_TMP.NUMCNT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_EFF DIC_IDX_CONTRAT_HISTO_TMP.DATE_EFF%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NOM_DONNEE DIC_IDX_CONTRAT_HISTO_TMP.NOM_DONNEE%TYPE, ';
    v_reqCreate        := v_reqCreate||'  IDPACMAT DIC_IDX_CONTRAT_HISTO_TMP.IDPACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_FIN DIC_IDX_CONTRAT_HISTO_TMP.DATE_FIN%TYPE, ';
    v_reqCreate        := v_reqCreate||'  RUPTURE_CONTRAT DIC_IDX_CONTRAT_HISTO_TMP.RUPTURE_CONTRAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_DERNIERE_MODIF DIC_IDX_CONTRAT_HISTO_TMP.DATE_DERNIERE_MODIF%TYPE); ';
    v_reqCreate        := v_reqCreate||'TYPE TYP_TAB_IDX IS TABLE OF TYP_LIG_IDX ; ';
    v_reqCreate        := v_reqCreate||'Tabidx TYP_TAB_IDX ; ';
    v_reqCreate        := v_reqCreate||'Ligidx TYP_LIG_IDX ; ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'TYPE TAB_INDICE_IDX_BY_DONNEE IS TABLE OF NUMBER INDEX BY VARCHAR2(20) ; ';
    v_reqCreate             := v_reqCreate||'tabIndice TAB_INDICE_IDX_BY_DONNEE ; ';
    v_reqCreate             := v_reqCreate||'bMATRIC NUMBER ; ';
    v_reqCreate             := v_reqCreate||'bCNT NUMBER ; ';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' NUMBER ; ';
    END LOOP;
  END IF;
  v_reqCreate          := v_reqCreate||'BEGIN ';
  IF TabcolContrat.count=0 AND TabcolContratHisto.count=0 THEN
    v_reqCreate        := v_reqCreate||'NULL; ';
  ELSE
    v_reqCreate          := v_reqCreate||'Tabidx := TYP_TAB_IDX(); ';
    IF TabcolContrat.count>0 THEN
      v_reqCreate        := v_reqCreate||'OPEN curContrat; ';
      v_reqCreate        := v_reqCreate||'  LOOP ';
      v_reqCreate        := v_reqCreate||' FETCH curContrat INTO ligContrat; ';
      v_reqCreate        := v_reqCreate||'   EXIT ';
      v_reqCreate        := v_reqCreate||' WHEN curContrat % NOTFOUND; ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is null OR NOT previous_ligContrat.MATRIC=ligContrat.MATRIC THEN ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is not null THEN ';
      v_reqCreate        := v_reqCreate||'BEGIN ';
      v_reqCreate        := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate        := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate        := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate        := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate        := v_reqCreate||' END IF; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''*''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      v_reqCreate        := v_reqCreate||'ELSE ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''+''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      FOR i IN TabcolContrat.first..TabcolContrat.last
      LOOP
        emptyVal                        := '_EMPTY_';
        IF (TabcolContrat(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                      := '0';
        END IF;
        v_reqCreate             := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
        v_reqCreate             := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_FIN := NVL(ligContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); ';
        v_reqCreate             := v_reqCreate||'Ligidx.NOM_DONNEE := '''||TabcolContrat(i).COLUMN_NAME||'''; ';
        v_reqCreate             := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreate             := v_reqCreate||'Tabidx.extend; ';
        v_reqCreate             := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreate             := v_reqCreate||'END IF; ';
        v_reqProcInsertContrat1 := v_reqProcInsertContrat1||' 
ALIM_IDX.INSERT_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
p_ligne); ';
        v_reqProcUpdateContrat1 := v_reqProcUpdateContrat1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContrat.'||TabcolContrat(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
        v_reqProcDeleteContrat1 := v_reqProcDeleteContrat1||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContrat(i).COLUMN_NAME||'''; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligContrat:=ligContrat;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curContrat;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContratHisto.count       >0 THEN
      v_reqCreate                    := v_reqCreate||'OPEN curHisto; ';
      v_reqCreateHistoRuptureContrat := 'tabIndice.delete(); ';
      v_reqCreateHistoModifOnly      := NULL;
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        IF TabcolContratHisto(i).COUNT_TABLE>0 THEN
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.PACMAT := ligHisto.PACMAT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.RUPTURE_CONTRAT := ''O''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx.extend; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx(Tabidx.last) := Ligidx; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
          v_reqProcInsertContrat2          := v_reqProcInsertContrat2||' 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''') WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')), RUPTURE_CONTRAT=''O'', DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,RUPTURE_CONTRAT,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,'''||TabcolContratHisto(i).COLUMN_NAME||''',NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')),''O'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;';
          v_reqProcDeleteContrat2          := v_reqProcDeleteContrat2||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''' AND RUPTURE_CONTRAT=''O''; ';
        END IF;
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF b'||TabcolContratHisto(i).COLUMN_NAME||'=1 THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') AND Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_EFF = ligHisto.DATE_EFF THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSE ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.PACMAT := ligHisto.PACMAT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx.extend; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSIF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'  LOOP ';
      v_reqCreate := v_reqCreate||' FETCH curHisto INTO ligHisto; ';
      v_reqCreate := v_reqCreate||'   EXIT ';
      v_reqCreate := v_reqCreate||' WHEN curHisto % NOTFOUND; ';
      v_reqCreate := v_reqCreate||' IF previous_ligHisto.PACMAT is null OR NOT previous_ligHisto.MATRIC=ligHisto.MATRIC THEN ';
      v_reqCreate := v_reqCreate||'bMATRIC := 1; ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bMATRIC := 0; ';
      v_reqCreate := v_reqCreate||'IF NOT (previous_ligHisto.NUMPAC=ligHisto.NUMPAC AND previous_ligHisto.PACMAT=ligHisto.PACMAT AND previous_ligHisto.NUMCNT=ligHisto.NUMCNT) THEN ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bCNT := 0; ';
      v_reqCreate := v_reqCreate||'END IF; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        emptyVal                             := '_EMPTY_';
        IF (TabcolContratHisto(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                           := '0';
        END IF;
        v_reqCreate                  := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 1; ';
        v_reqCreate                  := v_reqCreate||'ELSE ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
        v_reqCreate                  := v_reqCreate||'END IF; ';
        v_reqProcInsertContratHisto1 := v_reqProcInsertContratHisto1||' 
ALIM_IDX.INSERT_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_ligne, 
p_ligneSuiv, 
v_dsfcn, 
v_listeDonneesIdx, 
v_listeDonneesRupt); ';
        v_reqProcUpdateContratHisto1 := v_reqProcUpdateContratHisto1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContratHisto.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_dsdcn, 
v_dsfcn, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bCNT=1 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoRuptureContrat;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bMATRIC=0 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoModifOnly;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligHisto:=ligHisto;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curHisto;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
      v_reqCreate        := v_reqCreate||'BEGIN
      MERGE INTO DIC_IDX_CONTRAT_HISTO IDX USING (SELECT * FROM DIC_IDX_CONTRAT_HISTO_TMP) IDX_TMP ON (IDX.NUMPAC=IDX_TMP.NUMPAC AND IDX.PACMAT=IDX_TMP.PACMAT AND IDX.NUMCNT=IDX_TMP.NUMCNT AND IDX.DATE_EFF=IDX_TMP.DATE_EFF AND IDX.NOM_DONNEE=IDX_TMP.NOM_DONNEE) WHEN MATCHED THEN UPDATE SET DATE_FIN=IDX_TMP.DATE_FIN, RUPTURE_CONTRAT=IDX_TMP.RUPTURE_CONTRAT, DATE_DERNIERE_MODIF= (case when (IDX_TMP.DATE_FIN<>IDX.DATE_FIN or NVL(IDX.RUPTURE_CONTRAT,''N'')<>NVL(IDX_TMP.RUPTURE_CONTRAT,''N'') ) then IDX_TMP.DATE_DERNIERE_MODIF else IDX.DATE_DERNIERE_MODIF end) WHEN NOT MATCHED THEN INSERT (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (IDX_TMP.NUMPAC, IDX_TMP.PACMAT, IDX_TMP.NUMCNT, IDX_TMP.DATE_EFF, IDX_TMP.NOM_DONNEE, IDX_TMP.DATE_FIN, IDX_TMP.RUPTURE_CONTRAT, IDX_TMP.DATE_DERNIERE_MODIF); 
      EXCEPTION
	 WHEN DUP_VAL_ON_INDEX THEN NULL;
	 WHEN OTHERS THEN 
	 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
	 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat IDX '');
	 END;';
    END IF;
    v_reqCreate := v_reqCreate||'IF p_onlyFlaggedNumpacPacmat=1 THEN ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE) ';
    v_reqCreate := v_reqCreate||' AND EXISTS (SELECT 1 FROM SECUPACMAT_TMP_CONTRAT WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT); ';
    v_reqCreate := v_reqCreate||'ELSE ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE); ';
    v_reqCreate := v_reqCreate||'END IF; ';
  END IF;
  v_reqCreate := v_reqCreate||'END ALIM_IDX_CONTRAT_HISTO;';
  EXECUTE_IMMEDIATE_STRING(v_reqCreate,0);
  -- Procédure de mise à jour plus fine
  v_reqProcInsertContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC) IS 
BEGIN 
IF p_lignePrec.NUMPAC IS NULL THEN
BEGIN 
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''*'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''*'',SYSDATE);
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END; 
ELSE 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''+'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''+'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;'
  || v_reqProcInsertContrat1||' 
 END IF; '|| v_reqProcInsertContrat2||'
 END ALIM_IDX_INSERT_CONTRAT;';
  v_reqProcUpdateContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC, p_tabDac T_TAB_DAC, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContrat T_LIG_DAC := GET_EMPTY_LIG_DAC(); 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_dateEff DATE; 
v_listeDonneesIdx ALIM_IDX.T_EXISTE_IDX_DONNEE; 
BEGIN 
FOR i in 1..p_tabDac.COUNT LOOP
  IF p_tabDac(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDac(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDac(i).NUMCNT=p_ligne.NUMCNT THEN
    v_oldContrat := p_tabDac(i);
    EXIT WHEN v_oldContrat IS NOT NULL;
  END IF;
END LOOP;
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE ((NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN) 
OR (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN)) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_ligne.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee) := 1; 
ELSIF v_dateEff = p_ligneSuiv.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee||''+1'') := 1; 
END IF; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContrat1||' 
IF NOT NVL(TO_CHAR(v_oldContrat.DSFCN),''_EMPTY_'')=NVL(TO_CHAR(p_ligne.DSFCN),''_EMPTY_'') THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')) WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_FIN=NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
END IF; 
END ALIM_IDX_UPDATE_CONTRAT;';
  v_reqProcDeleteContrat      := ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
BEGIN 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE IN (''*'',''+''); '|| v_reqProcDeleteContrat1|| v_reqProcDeleteContrat2||' 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT;';
  v_reqProcInsertContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH) IS 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
v_dsfcn := NVL(GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT).DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
IF p_lignePrec.NUMPAC IS NOT NULL THEN NULL; '
  || v_reqProcInsertContratHisto1||' 
END IF; 
END ALIM_IDX_INSERT_CONTRAT_HISTO;';
  v_reqProcUpdateContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH, p_tabDach T_TAB_DACH, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContratHisto T_LIG_DACH := GET_EMPTY_LIG_DACH(); 
v_oldContrat DIC_ADM_CONTRAT%ROWTYPE; 
v_dsdcn DATE; 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
BEGIN 
IF NOT NVL(p_ligneSuiv.NUMPAC,''_EMPTY_'')=''_SUPP_'' THEN 
FOR i in 1..p_tabDach.COUNT LOOP
  IF p_tabDach(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDach(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDach(i).NUMCNT=p_ligne.NUMCNT 
      AND p_tabDach(i).DATE_EFF=p_ligne.DATE_EFF THEN
    v_oldContratHisto := p_tabDach(i);
    EXIT WHEN v_oldContratHisto IS NOT NULL;
  END IF;
END LOOP;
END IF; 
v_oldContrat := GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT); 
v_dsdcn := v_oldContrat.DSDCN; 
v_dsfcn := NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContratHisto1||' 
END ALIM_IDX_UPDATE_CONTRAT_HISTO;';
  v_reqProcDeleteContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT_HISTO(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonneePrec VARCHAR2(30); 
v_nomDonnee VARCHAR2(30); 
v_dateEffPrec DATE; 
v_dateEff DATE; 
v_dateFin DATE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF, DATE_FIN 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND (DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX OR DATE_FIN=p_listeClesIdxContrat(i).DATE_IDX-1) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff, v_dateFin; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_listeClesIdxContrat(i).DATE_IDX THEN 
IF v_nomDonnee = v_nomDonneePrec THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_dateFin WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND NOM_DONNEE=v_nomDonnee AND DATE_EFF=v_dateEffPrec; 
END IF; 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE=v_nomDonnee; 
END IF; 
v_nomDonneePrec := v_nomDonnee; 
v_dateEffPrec := v_dateEff; 
END LOOP; 
CLOSE cur; 
ALIM_IDX.COMPARE_CONTRAT_HISTO(p_listeClesIdxContrat, ''D'', NULL, v_listeDonneesRupt); 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT_HISTO;';

  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
END CREATE_PROC_IDX_CONTRAT_HISTO;
##
CREATE_PROC_IDX_CONTRAT_HISTO
==
CALL CREATE_PROC_IDX_CONTRAT_HISTO()
##
TAG_CHARSET=@€éèç
##
MAJ_REFERENCE_DATA_GLOBAL_DATA
=SQL=
create or replace PROCEDURE MAJ_REFERENCE_DATA_GLOBAL_DATA AS
 V_CONSUMERAPPOID    VARCHAR2(50 BYTE);
 VREF_CONSUMERAPPOID VARCHAR2(50 BYTE);
 CURSOR cur_consumerappoid IS
  SELECT mc.CONSUMER_APP_OID, mc.CONSUMER_APP_OID_REF FROM MP_CONSUMERAPPOID mc WHERE CONSUMER_APP_OID_REF IS NOT NULL;
 CURSOR curref_consumerappoid IS
  SELECT rc.CONSUMER_APP_OID FROM MP_REF_CONSUMERAPPOID rc;
BEGIN
 OPEN cur_consumerappoid;
  LOOP
   FETCH cur_consumerappoid INTO V_CONSUMERAPPOID,VREF_CONSUMERAPPOID;
   EXIT WHEN cur_consumerappoid%NOTFOUND;
   
   -- Traitement dans MP_SECU_URI
   -- Si pour une application présente dans MP_CONSUMERAPPOID, une ligne existe dans MP_REF_SECU_URI, et pas dans MP_SECU_URI, on l'ajoute dans MP_SECU_URI
   MERGE INTO MP_SECU_URI a 
   USING (
    SELECT CONSUMER_APP_OID,URI_ID
    FROM MP_REF_SECU_URI
    WHERE CONSUMER_APP_OID     = VREF_CONSUMERAPPOID
   ) b 
   ON (a.CONSUMER_APP_OID = V_CONSUMERAPPOID AND a.URI_ID = b.URI_ID)
   WHEN NOT MATCHED THEN INSERT (CONSUMER_APP_OID,URI_ID) VALUES (V_CONSUMERAPPOID,b.URI_ID);
 
   -- Traitement dans MP_SECU_DATA
   -- Une ligne existe dans MP_REF_SECU_DATA avec la valeur 'Y' dans la colonne MANDATORY, et pas dans MP_SECU_DATA, on l'ajoute dans MP_SECU_DATA
   MERGE INTO MP_SECU_DATA a 
   USING (
    SELECT r.URI_ID,d.DATA_NAME_MP_ALP
    FROM MP_REF_SECU_DATA r, mp_ref_data_alp d 
    WHERE r.CONSUMER_APP_OID = VREF_CONSUMERAPPOID AND r.DATA_NAME_MP = d.DATA_NAME_MP AND r.MANDATORY='Y'
   ) b 
   ON (a.CONSUMER_APP_OID = V_CONSUMERAPPOID AND Upper(a.URI_ID||' '||a.DATA_NAME_MP_ALP) = Upper(b.URI_ID||' '||b.DATA_NAME_MP_ALP))
   WHEN NOT MATCHED THEN INSERT (CONSUMER_APP_OID,DATA_NAME_MP_ALP,URI_ID) VALUES (V_CONSUMERAPPOID,b.DATA_NAME_MP_ALP,b.URI_ID);
 END LOOP;
 CLOSE cur_consumerappoid;
 OPEN curref_consumerappoid;
 LOOP
  FETCH curref_consumerappoid INTO VREF_CONSUMERAPPOID;
  EXIT WHEN curref_consumerappoid%NOTFOUND;
   
   -- Traitement dans MP_SECU_URI
   -- Une ligne existe dans MP_SECU_URI et pas dans MP_REF_SECU_URI, on la supprime de MP_SECU_URI
   DELETE FROM MP_SECU_URI a
   WHERE EXISTS (
     SELECT 1
     FROM MP_CONSUMERAPPOID
     WHERE CONSUMER_APP_OID = a.CONSUMER_APP_OID AND CONSUMER_APP_OID_REF = VREF_CONSUMERAPPOID
   )
   AND NOT EXISTS (
    SELECT 1
    FROM MP_REF_SECU_URI b
    WHERE a.URI_ID         =b.URI_ID
    AND b.CONSUMER_APP_OID = VREF_CONSUMERAPPOID
   );
   
   -- Traitement dans MP_SECU_DATA
   -- Une ligne existe dans MP_SECU_DATA et pas dans MP_REF_SECU_DATA, on la supprime de MP_SECU_DATA
   DELETE FROM MP_SECU_DATA a
   WHERE EXISTS (
     SELECT 1
     FROM MP_CONSUMERAPPOID
     WHERE CONSUMER_APP_OID = a.CONSUMER_APP_OID AND CONSUMER_APP_OID_REF = VREF_CONSUMERAPPOID
   )
   AND NOT EXISTS (
    SELECT 1
    FROM MP_REF_SECU_DATA ref, mp_ref_data_alp 
    WHERE ref.DATA_NAME_MP= mp_ref_data_alp.DATA_NAME_MP 
    AND ref.CONSUMER_APP_OID = VREF_CONSUMERAPPOID 
    AND a.URI_ID = ref.URI_ID
    AND a.DATA_NAME_MP_ALP = mp_ref_data_alp.DATA_NAME_MP_ALP
   );
 END LOOP;
 CLOSE curref_consumerappoid;
 COMMIT;
END MAJ_REFERENCE_DATA_GLOBAL_DATA;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_MAIN
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_MAIN( p_id            IN NUMBER, p_numpac        IN VARCHAR2, p_periode_paie  IN VARCHAR2,
 p_paiezad       IN VARCHAR2,
 p_dosNumForSimu IN NUMBER DEFAULT NULL )
 IS
 w_err    VARCHAR2(2000);
 w_pacmat VARCHAR2(20);
 w_audit_alim_periode_tab AUDIT_ALIM_PERIODE_TAB;
 w_debut_recueil_retro DATE;
 w_fin_recueil_retro   DATE;
 id_trt                NUMBER;
 id_CALCUL_TGE_PERIODE_RECUEIL    NUMBER;
 pacmat_found          BOOLEAN;
 reqTempInfo		   CLOB;
 req                   CLOB;
 v_jobIdx 			   NUMBER;
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ')');
 --Alimentation id procédure
 IF p_id   = 0 OR p_id IS NULL THEN
 id_trt := IMP_TRT_SEQ_ID.nextval;
 ELSE
 id_trt := p_id;
 END IF;
 id_CALCUL_TGE_PERIODE_RECUEIL:= IMP_TRT_SEQ_ID.nextval;
 --Récupération du pacmat
 pacmat_found := true;
 IF p_paiezad IS NOT NULL THEN
 BEGIN
 SELECT PACMAT
 INTO w_pacmat
 FROM DIC_ADM_CONTRAT_SITU
 WHERE NUMPAC = p_numpac
 AND PAIEZAD  = p_paiezad
 AND rownum   =1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 pacmat_found := false;
 req := 'DELETE FROM ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req := req||' AND MOIS_PAIE >= '''||p_periode_paie||'''';
 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
 IF p_dosNumForSimu IS NOT NULL THEN
 req := req||' AND DOS_NUM = '||p_dosNumForSimu;
 END IF;
 EXECUTE_IMMEDIATE_STRING (req,0);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
 raise;
 END;
 END IF;
 IF pacmat_found THEN
 --Vérification des données à traiter
 w_audit_alim_periode_tab := AUDIT_ALIM_PERIODE_INDIV(id_trt, p_numpac, p_periode_paie, w_pacmat);
 IF w_audit_alim_periode_tab.exists(1) THEN
 FOR i IN w_audit_alim_periode_tab.first..w_audit_alim_periode_tab.last
 LOOP
 w_err := w_err || '(' || w_audit_alim_periode_tab(i).paiezad || ',' || w_audit_alim_periode_tab(i).debut_recueil_force || ',' || w_audit_alim_periode_tab(i).fin_recueil_force || ')';
 END LOOP;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil pour les paiezad suivant (paiezad,debut_recueil_force,fin_recueil_force) : ' || w_err);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO');
 RETURN;
 END IF;
 --Récupération de la période de recueil retro issu de la table LTP (TGE_REF_LTP)
 BEGIN
 SELECT DEBUT_PERIODE,
 FIN_PERIODE
 INTO w_debut_recueil_retro,
 w_fin_recueil_retro
 FROM TGE_REF_LTP
 WHERE NUMPAC  = p_numpac
 AND MOIS_PAIE = TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil M-1 dans TGE_REF_LTP : NUMPAC = ''' || p_numpac || ''' AND MOIS_PAIE = ' || TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM'));
 raise;
 END;

 --Récupération requête des informations
 TGE_ALIM_PERIODE_INDIV_TEMP(id_trt, p_numpac, w_pacmat, p_periode_paie, reqTempInfo, id_CALCUL_TGE_PERIODE_RECUEIL);
 
 --Nettoyage avant d'insérer dans TGE_PERIODE_RECUEIL_PAIEZAD_R
 IF p_dosNumForSimu IS NULL THEN
 DELETE  TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT= ''''||id_CALCUL_TGE_PERIODE_RECUEIL||'''';
 req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
 req         := req||'SELECT '||''''||id_CALCUL_TGE_PERIODE_RECUEIL||'''' || ' ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
 req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req         := req||' AND MOIS_PAIE = '''||p_periode_paie||'''';
 IF w_pacmat IS NOT NULL THEN
 req       := req||' AND PACMAT = '''||w_pacmat||'''';
 END IF;
 EXECUTE_IMMEDIATE_STRING ( req,0);
 END IF;
 --Nettoyage avant d'insérer dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'DELETE FROM ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req := req||' AND MOIS_PAIE >= '''||p_periode_paie||'''';
 IF w_pacmat IS NOT NULL THEN
 req := req||' AND PACMAT = '''||w_pacmat||'''';
 END IF;
 IF p_dosNumForSimu IS NOT NULL THEN
 req := req||' AND DOS_NUM = '||p_dosNumForSimu;
 END IF;
 EXECUTE_IMMEDIATE_STRING ( req,0);
 
 --Insertion des données dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'INSERT INTO ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' (';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||'    DOS_NUM,';
 END IF;
 req := req||'    NUMPAC, 
 			      MOIS_PAIE, 
 			      PAIEZAD, 
 			      PACMAT, 
 			      RETRO_GC, 
 			      DEBUT_PERIODE_PAIE, 
 			      FIN_PERIODE_PAIE, 
 			      DEBUT_PERIODE_RECUEIL, 
 			      FIN_PERIODE_RECUEIL, 
 			      ENTREE, 
 			      SORTIE, 
 			      DEBUT_PER_RECUEIL_RETRO, 
 			      FIN_PER_RECUEIL_RETRO, 
 			      DEPART_SUSPENSION, 
 			      RETOUR_SUSPENSION, 
 			      DEBUT_PER_GENERATION_HP, 
 			      FIN_PER_GENERATION_HP,
 				  DEBUT_PERIODE_RECUEIL_LTP,
 				  FIN_PERIODE_RECUEIL_LTP
 			    ) 
 			  SELECT * FROM ( SELECT   ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||p_dosNumForSimu||',';
 END IF;
 req := req||'  NUMPAC, 
 			    MOIS_PAIE, 
 			    PAIEZAD, 
 			    PACMAT, 
 			    RETRO_GC, 
 			    DATE_DEB_PERIODE, 
 			    DATE_FIN_PERIODE, 
 			    debut_recueil, 
 			    fin_recueil, 
 			    debut_situ, 
 			    CASE 
 			      WHEN fin_situ > DATE_FIN_PERIODE 
 			        THEN TO_DATE(''31.12.2099'',''dd.mm.yyyy'') 
 			      ELSE fin_situ 
 			    END AS fin_situation, 
 			    TO_DATE('||TO_CHAR(w_debut_recueil_retro,'yyyymmdd')||',''yyyymmdd''), 
 			    TO_DATE('||TO_CHAR(w_fin_recueil_retro,'yyyymmdd')||',''yyyymmdd''), 
 			    DEPART_SUSP, 
 			    RETOUR_SUSP, 
 			    CASE 
 			      WHEN SORTIE_PRECEDENTE BETWEEN DATE_DEB_PERIODE AND DATE_FIN_PERIODE 
 			        THEN debut_situ 
 			      WHEN debut_recueil IS NOT NULL 
 			        THEN TRUNC(TRUNC(debut_recueil,''MONTH''),''DAY'') 
 			      WHEN debut_recueil IS NULL 
 			        AND entree       IS NOT NULL 
 			        AND entree         <= DATE_FIN_PERIODE 
 			        AND sortie        IS NOT NULL 
 			        AND sortie         >= dt_recueil_deb 
 			        THEN DATE_DEB_PERIODE 
 			      WHEN debut_recueil IS NULL
                  AND ((entree       IS NOT NULL
                  AND entree          > DATE_FIN_PERIODE)
                  OR (sortie         IS NOT NULL
                  AND sortie          < dt_recueil_deb))
                  THEN NULL 
 			    END AS debut_HP , 
 			    CASE 
 			        WHEN fin_recueil IS NOT NULL 
 			          THEN LEAST(TRUNC(LAST_DAY(DATE_FIN_PERIODE),''DAY'')+6,NVL(ENTREE_SUIVANTE,TRUNC(LAST_DAY(DATE_FIN_PERIODE),''DAY'')+6)) 
 			        WHEN fin_recueil IS NULL 
 			          AND entree     IS NOT NULL 
 			          AND entree       <= DATE_FIN_PERIODE 
 			          AND sortie      IS NOT NULL 
 			          AND sortie       >= dt_recueil_deb 
 			          THEN DATE_FIN_PERIODE
 			           WHEN fin_recueil IS NULL
                    AND ((entree     IS NOT NULL
                    AND entree        > DATE_FIN_PERIODE)
                    OR (sortie       IS NOT NULL
                    AND sortie        < dt_recueil_deb))
                    THEN NULL 
 			      END AS fin_HP,
 			      DT_RECUEIL_DEB,
 				  DT_RECUEIL_FIN 
 			    FROM 
 			      (SELECT lead(ENTREE,1) over(partition BY NUMPAC,PACMAT order by ENTREE)-1 ENTREE_SUIVANTE, 
 			        lag(SORTIE,1) over(partition BY NUMPAC,PACMAT order by SORTIE) SORTIE_PRECEDENTE, 
 			        NUMPAC, 
 			        PACMAT, 
 			        PAIEZAD, 
 			        RETRO_GC, 
 			        MOIS_PAIE,
 			        DATE_DEB_PERIODE,
 			        DATE_FIN_PERIODE,
 			        IS_RETRO, 
 			        DEBUT_FORCEE, 
 			        FIN_FORCEE, 
 			        ENTREE, 
 			        SORTIE, 
 			        RETOUR_SUSP, 
 			        DEPART_SUSP, 
 			        DEBUT_SITU, 
 			        FIN_SITU, 
 			        debut_recueil, 
 			        DT_RECUEIL_DEB, 
 			        DT_RECUEIL_FIN, 
 			        CASE 
 			          WHEN fin_forcee IS NOT NULL 
 			            THEN fin_forcee 
 			          WHEN debut_recueil IS NULL 
 			            THEN NULL 
 			          WHEN sortie      IS NULL 
 			            OR sortie      > DATE_FIN_PERIODE 
 			            THEN dt_recueil_fin 
 			          WHEN sortie      >= dt_recueil_deb 
 			            THEN sortie  
 			          ELSE TO_DATE(''01/01/1900'',''dd/mm/yyyy'')  
 			        END AS fin_recueil 
 			      FROM 
 			        (SELECT NUMPAC, 
 			          PACMAT, 
 			          PAIEZAD, 
 			          RETRO_GC, 
 			          MOIS_PAIE,
 			          DATE_DEB_PERIODE,
 			          DATE_FIN_PERIODE,
 			          IS_RETRO, 
 			          DEBUT_FORCEE, 
 			          FIN_FORCEE, 
 			          ENTREE, 
 			          SORTIE, 
 			          RETOUR_SUSP, 
 			          DEPART_SUSP, 
 			          DEBUT_SITU, 
 			          FIN_SITU, 
 			          DT_RECUEIL_DEB, 
 			          DT_RECUEIL_FIN, 
 			          CASE 
 			            WHEN debut_forcee IS NOT NULL 
 			              THEN debut_forcee 
 			            WHEN entree IS NULL  
 			              THEN null 
 			            WHEN entree        <= dt_recueil_fin 
 			              AND (sortie IS NULL 
 			              OR (sortie        >= dt_recueil_deb 
 			              AND (sortie > DATE_FIN_PERIODE  
 			              	OR NOT EXISTS (SELECT 1 FROM TGE_PERIODE_RECUEIL_PAIEZAD rec_ind WHERE rec_ind.NUMPAC = rec_temp.numpac AND rec_ind.PAIEZAD = rec_temp.paiezad AND rec_ind.FIN_PERIODE_RECUEIL >= rec_temp.sortie) ) ))  
 
 			              THEN GREATEST(entree, NVL(dt_recueil_deb, entree)) 
 			            WHEN entree        <= dt_recueil_fin	
						AND (sortie        < dt_recueil_deb  
							OR ( sortie        >= dt_recueil_deb AND (sortie < DATE_FIN_PERIODE 
								AND EXISTS (SELECT 1 FROM TGE_PERIODE_RECUEIL_PAIEZAD rec_ind WHERE rec_ind.NUMPAC = rec_temp.numpac AND rec_ind.PAIEZAD = rec_temp.paiezad AND rec_ind.FIN_PERIODE_RECUEIL >= rec_temp.sortie))))
						THEN TO_DATE(''01/01/1900'',''dd/mm/yyyy'')
						WHEN (sortie        IS NOT NULL
                          AND entree         > dt_recueil_fin
                          AND sortie        <= DATE_FIN_PERIODE)
                          THEN entree						
                        ELSE NULL
 			          END AS debut_recueil 
 			        FROM (' || reqTempInfo || ') rec_temp 
 			        ) 
 			      ) ) WHERE (debut_recueil IS NULL OR TO_CHAR(debut_recueil,''dd/mm/yyyy'') != ''01/01/1900'') AND (fin_recueil IS NULL OR  TO_CHAR(fin_recueil,''dd/mm/yyyy'')  != ''01/01/1900'') AND debut_HP IS NOT NULL AND fin_HP IS NOT NULL';
 			      

 EXECUTE_IMMEDIATE_STRING  (req,0);
 --Mise à jour des incidents qui on changé période de paie
 IF p_dosNumForSimu IS NULL THEN
	 req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = TO_DATE(''''01.01.1900'''', ''''dd.MM.yyyy'''') ';
	 req              := req||' WHERE ID IN ( ';
	 req              := req||' SELECT I.ID FROM TGE_INCIDENTS_PAIE I  ';
	 req              := req||' INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
	 req              := req||' ON P.NUMPAC = I.NUMPAC ';
	 req              := req||' AND P.PAIEZAD = I.PAIEZAD ';
	 req              := req||' AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL ';
	 req              := req||' LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
	 req              := req||' ON P. NUMPAC = R.NUMPAC  ';
	 req              := req||' AND P.MOIS_PAIE = R.MOIS_PAIE ';
	 req              := req||' AND P.PAIEZAD = R.PAIEZAD ';
	 req              := req||' AND P.PACMAT = R.PACMAT ';
	 req              := req||' AND R.ID_TRT = '''''||id_CALCUL_TGE_PERIODE_RECUEIL||'''''';
	 
	 req              := req||' WHERE I.NUMPAC = '''''||p_numpac||''''' ';
	 req              := req||' AND (P.MOIS_PAIE = '''''||p_periode_paie||''''' OR R.MOIS_PAIE = '''''||p_periode_paie||''''') ';
	 IF w_pacmat      IS NOT NULL THEN
	 req            := req||' AND (P.PACMAT = '''''||w_pacmat||''''' OR R.PACMAT = '''''||w_pacmat||''''') ';
	 END IF;
	 req := req||' AND (P.MOIS_PAIE IS NULL OR R.MOIS_PAIE IS NULL ';
	 req := req||' OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL  ';
	 req := req||' OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL)) ';
		 
	 DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
		 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_CALCUL_TGE_PERIODE_RECUEIL||''');
		 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
		 DELETE  TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT= '||id_CALCUL_TGE_PERIODE_RECUEIL||';
		 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_CALCUL_TGE_PERIODE_RECUEIL||' OK'');
		 EXCEPTION
		 WHEN OTHERS THEN
		 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE|| SQLERRM);
	 END;', sysdate, null);
 END IF;
 END IF;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN OK');
 EXCEPTION
 WHEN OTHERS THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO : TGE_ALIM_PERIODE_INDIV_MAIN '||SQLCODE|| SQLERRM);
 END TGE_ALIM_PERIODE_INDIV_MAIN;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_TEMP
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_TEMP( p_id           IN NUMBER, p_numpac       IN VARCHAR2,
 p_pacmat       IN VARCHAR2,
 p_periode_paie IN VARCHAR2, 
 out_req OUT CLOB, 
 id_CALCUL_TGE_PERIODE_RECUEIL IN NUMBER)
 AS
 w_Y326                 VARCHAR2(4000 BYTE);
 w_Y327                 VARCHAR2(4000 BYTE);
 w_A302                 VARCHAR2(4000 BYTE);
 w_A301                 VARCHAR2(4000 BYTE);
 w_A520                 VARCHAR2(4000 BYTE);
 w_A521                 VARCHAR2(4000 BYTE);
 w_A523                 VARCHAR2(4000 BYTE);
 periode_paie_en_cours  VARCHAR2(6);
 periode_deb_retro      VARCHAR2(6);
 optionEcp      VARCHAR2(1);
 
 A01_NOM_ELT    VARCHAR2(20);
 A02_NOM_ELT    VARCHAR2(20);
 A03_NOM_ELT    VARCHAR2(20);
 requeteMappingPivot  VARCHAR2(3000);
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP début (' || p_id || ',' || p_numpac || ',' || p_pacmat || ',' || p_periode_paie || ')');
 BEGIN
 --Alimentation des informations sur le pac
 SELECT PERIODEENCOURS, DEB_RETRO, OPTION_ECP
 INTO periode_paie_en_cours, periode_deb_retro, optionEcp
 FROM TGE_REF_PAC
 WHERE NUMPAC = p_numpac;
 --- Calcul des noms d'elements depuis tge_map_arg_elt
 select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 from (
 SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
 )
 pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));
 
 
 --Alimentation des informations sur le mapping des données
 requeteMappingPivot :='SELECT
 Y326_DONNEE ,
 Y327_DONNEE ,
 A302_DONNEE ,
 A301_DONNEE ,
 A520_DONNEE ,
 A521_DONNEE ,
 A523_DONNEE
 FROM (
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = '''|| p_numpac ||'''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 UNION ALL
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = ''*''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 AND (c.ELEMENT) NOT IN
 (
 SELECT a.element
 FROM tge_ref_mapdo a
 WHERE a.numpac = '''|| p_numpac ||'''
 AND A.ELEMENT IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 )
 ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element)
 IN(''Y326'' AS Y326 ,''Y327'' AS Y327 ,''A302'' AS A302 ,''A301'' AS A301 ,'''||A01_NOM_ELT||''' AS A520 ,'''||A02_NOM_ELT||''' AS A521,'''||A03_NOM_ELT||''' AS A523))
 ';
 EXECUTE IMMEDIATE
 requeteMappingPivot
 INTO w_Y326,
 w_Y327,
 w_A302,
 w_A301,
 w_A520,
 w_A521,
 w_A523;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP ERR : Erreurs de configuration de TGE_REF_MAPDO : NUMPAC = ''' || p_numpac || ''' AND ELEMENT in (''Y326'',''Y327'',''A302'',''A301'',''A520'',''A521'',''A523'')');
 raise;
 END;
 
 out_req := 'SELECT l.numpac, l.pacmat, l.PAIEZAD, l.is_retro, l.debut_forcee, l.fin_forcee, l.entree, l.sortie, l.retour_susp, l.depart_susp, l.debut_situ, l.fin_situ, l.DT_RECUEIL_DEB, l.DT_RECUEIL_FIN, l.retro_gc, l.MOIS_PAIE, l.DATE_DEB_PERIODE, l.DATE_FIN_PERIODE from (
 SELECT
 dach_tmp_sus.numpac,
 dach_tmp_sus.pacmat,
 dach_tmp_sus.PAIEZAD,
 dach_tmp_sus.is_retro,
 dach_tmp_sus.debut_forcee,
 dach_tmp_sus.fin_forcee,
 dach_tmp_sus.debut_situ as entree,
 dach_tmp_sus.fin_situ as sortie ,'
 || w_A302 || '+1 as retour_susp,  ' --pseudo date de retour de suspension / réembaucher
 || w_A301 || '-1 as depart_susp,  ' --pseudo date de départ en suspension
 || '
 dach_tmp_sus.debut_situ,
 dach_tmp_sus.fin_situ,
 dach_tmp_sus.DT_RECUEIL_DEB,
 dach_tmp_sus.DT_RECUEIL_FIN,
 dach_tmp_sus.retro_gc,
 dach_tmp_sus.NUMCNT,dach_tmp_sus.DATE_EFF,dach_tmp_sus.DSFCN,dach_tmp_sus.DSDCN,
 ' || w_A301 || ' AS sous_DSA301,
 ' || w_A302 || ' AS sous_DSA302,
 MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE
 FROM (
 select VR.numpac,VR.pacmat,VR.PAIEZAD,VR.NUMCNT,VR.DATE_EFF,VR.DSFCN,VR.DSDCN,VR.is_retro,VR.debut_forcee,VR.fin_forcee,VR.debut_situ,VR.fin_situ,VR.MOIS_PAIE,VR.DATE_DEB_PERIODE,VR.DATE_FIN_PERIODE,
 CASE
 WHEN TO_CHAR(VR.debut_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.debut_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_DEB,
 CASE
 WHEN TO_CHAR(VR.fin_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.fin_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_FIN,  ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 out_req := out_req || ' TGE_PERIODE_RECUEIL_PAIEZAD_R.retro_gc,  ';
 ELSE
 out_req := out_req || ' null as retro_gc, ';
 END IF;
 out_req := out_req || '(
 select max(dach_tmp.date_eff) from dic_adm_contrat_histo dach_tmp
 where dach_tmp.za962 is not null
 and dach_tmp.dsa301-1 <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD''))
 and nvl(dach_tmp.dsa302, dach_tmp.dsfsus)+1 >= to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 and dach_tmp.date_eff <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD'')) + 1
 and dach_tmp.numpac = VR.NUMPAC
 and dach_tmp.pacmat = VR.PACMAT
 and dach_tmp.paiezad = VR.PAIEZAD
 ) as date_eff_sus
 
 from (
 select numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE,MIN(NUMERO_DE_LIGNE) as min_NUMERO_DE_LIGNE from
 (SELECT CO.* FROM (select
 SITUATION_PAIE.numpac as numpac,
 SITUATION_PAIE.pacmat as pacmat,
 SITUATION_PAIE.PAIEZAD as paiezad,
 DIC_ADM_CONTRAT.DSDCN                 AS DSDCN,
 DIC_ADM_CONTRAT.DSFCN                 AS DSFCN,
 DIC_ADM_CONTRAT_HISTO.NUMCNT          AS NUMCNT,
 DIC_ADM_CONTRAT_HISTO.DATE_EFF        AS DATE_EFF, ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 out_req := out_req || ' CASE
 WHEN RETRO_ENTREE = ''O''
 AND RETRO_SORTIE   = ''O''
 THEN ''O''
 WHEN RETRO_ENTREE = ''O''
 THEN ''E''
 WHEN RETRO_SORTIE = ''O''
 THEN ''S''
 ELSE ''N''
 END AS is_retro, ';
 ELSE
 out_req := out_req || ' ''N'' as is_retro, ';
 END IF;
 out_req := out_req || w_Y326 || ' as debut_forcee,
 ' || w_Y327 || ' as fin_forcee,
 SITUATION_PAIE.DSDSC as debut_situ,
 SITUATION_PAIE.DSFSC as fin_situ,
 ' || w_A520 || ' as activite,
 ' || w_A521 || ' as etablissement,
 ' || w_A523 || ' as categorie,
 DIC_ADM_CONTRAT_HISTO.MOIS_PAIE,
 DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE,
 DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 FROM SITUATION_PAIE
 left join DIC_PERIODES_RECUEIL_HIS
 on DIC_PERIODES_RECUEIL_HIS.numpac = SITUATION_PAIE.numpac
 AND DIC_PERIODES_RECUEIL_HIS.paiezad = SITUATION_PAIE.paiezad
 AND DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE = ''' || p_periode_paie || '''
 inner join DIC_ADM_CONTRAT
 on DIC_ADM_CONTRAT.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT.PACMAT=SITUATION_PAIE.PACMAT
 AND DIC_ADM_CONTRAT.NUMCNT=SITUATION_PAIE.NUMCNT
 left join ( SELECT  DIC_ADM_CONTRAT_HISTO.*,C.MOIS_PAIE, C.DATE_DEB_PERIODE_PREC, C.DATE_DEB_PERIODE, C.DATE_FIN_PERIODE
 FROM (
 			SELECT DACH_MAX_DATE_EFF.NUMPAC,
              DACH_MAX_DATE_EFF.PAIEZAD,
              DACH_MAX_DATE_EFF.PACMAT,
              ''' || p_periode_paie || ''' MOIS_PAIE,
              TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(''' || p_periode_paie || ''',''yyyymm''),-1),''YYYYMM'')||''01'',''yyyymmdd'') DATE_DEB_PERIODE_PREC,
              TO_DATE(''' || p_periode_paie || '''||''01'',''yyyymmdd'') DATE_DEB_PERIODE,
              last_day(to_date(''' || p_periode_paie || '''||''01'',''yyyymmdd'')) DATE_FIN_PERIODE,
              MAX(DACH_MAX_DATE_EFF.DATE_EFF) AS max_date_eff
            FROM DIC_ADM_CONTRAT_HISTO DACH_MAX_DATE_EFF
 			WHERE DACH_MAX_DATE_EFF.NUMPAC = ''' || p_numpac || ''' ';
 IF p_pacmat IS NOT NULL THEN
 out_req := out_req || ' AND PACMAT = ''' || p_pacmat || ''' ';
 END IF;
 out_req := out_req || '  AND DACH_MAX_DATE_EFF.DATE_EFF <= last_day(TO_DATE( ''' || p_periode_paie || '''||''01'',''yyyymmdd''))
 			GROUP BY DACH_MAX_DATE_EFF.NUMPAC,
              DACH_MAX_DATE_EFF.PAIEZAD,
              DACH_MAX_DATE_EFF.PACMAT,
              ''' || p_periode_paie || ''',
              TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(''' || p_periode_paie || ''',''yyyymm''),-1),''YYYYMM'')||''01'',''yyyymmdd''),
              TO_DATE(''' || p_periode_paie || '''||''01'',''yyyymmdd''),
              last_day(to_date(''' || p_periode_paie || '''||''01'',''yyyymmdd''))
 			) C
 inner join DIC_ADM_CONTRAT_HISTO on
 DIC_ADM_CONTRAT_HISTO.NUMPAC = C.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = C.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT = C.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.DATE_EFF = C.max_date_eff
 ) DIC_ADM_CONTRAT_HISTO
 on DIC_ADM_CONTRAT_HISTO.NUMCNT=SITUATION_PAIE.NUMCNT
 AND DIC_ADM_CONTRAT_HISTO.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = SITUATION_PAIE.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT=SITUATION_PAIE.PACMAT
 WHERE (DIC_ADM_CONTRAT_HISTO.ZA750 IS NULL OR DIC_ADM_CONTRAT_HISTO.DRPAI2 != ''B'')
 AND (DIC_ADM_CONTRAT.NATCOL IS NULL OR DIC_ADM_CONTRAT.NATCOL in (''SAL'',''STA''))
 AND NVL(SITUATION_PAIE.DSFSC,TO_DATE(''20990101'',''YYYYMMDD'')) >= DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE_PREC
 AND NVL(DIC_ADM_CONTRAT_HISTO.DATE_EFF,SITUATION_PAIE.DSDSC) <= DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 ) CO
 ) COM,TGE_REF_VRVAL
 WHERE TGE_REF_VRVAL.CODE_TABLE = ''LTP''
 AND TGE_REF_VRVAL.NUMERO_DE_PAC = COM.NUMPAC
 AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = SUBSTR(COM.MOIS_PAIE,5, 2)||SUBSTR(COM.MOIS_PAIE,1, 4) ';
 
 IF optionEcp IS NOT NULL AND optionEcp = 'P' THEN
 out_req := out_req || '
 AND TRIM(LPAD(COM.activite,2)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2)
 AND TRIM(LPAD(COM.etablissement,5)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5)
 AND TRIM(LPAD(COM.categorie,2)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2)
 ';
 ELSE
 out_req := out_req || '
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.activite,2)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.etablissement,5)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.categorie,2)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = ''TRUE''
 ';
 END IF;
 
 out_req := out_req || '
 GROUP BY numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,COM.MOIS_PAIE,COM.DATE_DEB_PERIODE,COM.DATE_FIN_PERIODE
 ) VR inner join TGE_REF_VRVAL on TGE_REF_VRVAL.NUMERO_DE_PAC = VR.NUMERO_DE_PAC AND TGE_REF_VRVAL.CODE_TABLE = VR.CODE_TABLE AND TGE_REF_VRVAL.NUMERO_DE_LIGNE = VR.min_NUMERO_DE_LIGNE
 LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD_R
 ON TGE_PERIODE_RECUEIL_PAIEZAD_R.NUMPAC      = VR.NUMPAC
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.PACMAT     = VR.PACMAT
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.PAIEZAD    = VR.PAIEZAD
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.MOIS_PAIE  = VR.MOIS_PAIE
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.ID_TRT     = ''' || id_CALCUL_TGE_PERIODE_RECUEIL || '''
 ) dach_tmp_sus
 LEFT JOIN DIC_ADM_CONTRAT_HISTO DIC_ADM_CONTRAT_HISTO ON
 DIC_ADM_CONTRAT_HISTO.numpac = dach_tmp_sus.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.pacmat = dach_tmp_sus.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.paiezad = dach_tmp_sus.PAIEZAD
 AND DIC_ADM_CONTRAT_HISTO.date_eff = dach_tmp_sus.date_eff_sus
 ) l
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT P
 ON l.NUMPAC = P.NUMPAC
 AND l.PACMAT = P.PACMAT
 AND l.NUMCNT = P.NUMCNT
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT_HISTO PH
 ON l.NUMPAC = PH.NUMPAC
 AND l.PACMAT = PH.PACMAT
 AND l.NUMCNT = PH.NUMCNT
 AND l.DATE_EFF = PH.DATE_EFF
 AND l.PAIEZAD = PH.PAIEZAD
 WHERE P.PACMAT IS NULL
 OR l.DSFCN IS NULL
 OR l.DSFCN >  l.DATE_FIN_PERIODE
 OR NVL(P.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(P.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR PH.PACMAT IS NULL
 OR l.sous_DSA301 IS NULL
 OR l.sous_DSA301 > l.DATE_FIN_PERIODE
 OR NVL(PH.DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(PH.DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR l.DATE_DEB_PERIODE BETWEEN l.ENTREE AND l.SORTIE
 OR l.ENTREE BETWEEN l.DATE_DEB_PERIODE AND  l.DATE_FIN_PERIODE ';
 
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP OK');
 EXCEPTION
 WHEN OTHERS THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP KO : TGE_ALIM_PERIODE_INDIV_TEMP '||SQLCODE|| SQLERRM);
 raise;
 END TGE_ALIM_PERIODE_INDIV_TEMP;
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='H',ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm')
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 AND b.traite      IS NULL
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_DONNEES_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 

 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION <
 ( SELECT nvl(max (b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt  
 AND z.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 ) ; 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT nvl(max (b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 IF p_histoIP='N' THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<
 (SELECT nvl(MAX (b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c,
 GAP_TRT_LISTE_MAT e,
 DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac                 =p_numpac
 AND a.TYPE_PAIE               IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND b.id_trt                   =c.id_trt
 AND c.statut                  IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE             = p_PERIODEENCOURS
 AND b.numero_echange          <>'0000'
 AND e.id_trt                   =b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac  =e.numpac
 AND d.pacmat  =e.pacmat
 AND z.numpac  =e.numpac
 AND z.PAIEZAD =d.paiezad
 )
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 END IF;
 
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT nvl(max (b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;
 
 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT nvl(max (b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
 
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
  --Historiser les periodes rétro max par pacmat 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
  union all
  select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS) 
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if P_DEB_RETRO is not null AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_RETRO,'YYYYMM') then
 DELETE from GAP_RETRO_MATRIC where numpac=p_numpac ;
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_RETRO where numpac=p_numpac ;
 DELETE from GAP_SELECTION_RETRO where  numpac=p_numpac;
 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_30
=SQL=
create or replace PROCEDURE TGE_CONTROLE_30 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 -- Valeurs attendues : EC/ECS -> écran création (S en mode SimuPaie),  EM/EMS -> écran modification (S en mode SimuPaie), GAP -> création en sous-marin,
 -- I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch, MP -> création depuis la Market Place
 , P_TYPE_ACTION IN VARCHAR2
 ) AS
 /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 clWhere varchar2(1000);
 -- Pour les merge, la clause where ne doit pas inclure la colonne ERREURS, on gère des clauses spécifiques
 clWhereMerge varchar2(1000);
 clWhereMergeErreur varchar2(250);
 
 req varchar2(2000);
 w_exist_element NUMBER ;
 w_err VARCHAR2(2000);
 w_param_longueur VARCHAR2(10);
 w_id_natcol varchar2(4000);
 
 BEGIN
 clwhere:='EI.login='''||p_login||''' and EI.date_import='''||P_DATE_IMPORT||''' and EI.code_element not in (''B690'',''B691'') ';
 
 if p_numligne is not null then
 	clwhere:=clwhere||' AND EI.NUMLIGNE='||p_numligne;
 end if;

 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controlées 
 clwhere:=clwhere || ' AND (EI.STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR EI.STATUT = ''TRANS'') ';
  
 clWhereMerge := clwhere;
 clWhereMergeErreur := '';
 
 IF p_type_action = 'VI' and p_login <> 'BATCH' then
   -- A la validation d'import Web, on ne va passer que sur les lignes qui ne sont pas déjà en erreur.
   -- Certaines lignes sont déjà en erreur et on ne veut pas les retraiter (sinon double message)
   clwhere := clwhere || ' and EI.ERREURS is null';
   clWhereMergeErreur := ' where EI.ERREURS is null';
 END IF;
 
 IF p_login ='BATCH' THEN 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées. Seulement pour le BATCH, car dans les autres cas il y a des contrôles
 -- qui sont fait en amont des contrôles PL/SQL (côté Java)
 	req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS = '''' WHERE '||clwhere;
 	EXECUTE_IMMEDIATE_STRING( req,0);
 	
 -- Contrôle que le collaborateur est cohérent : date effet / paiezad. En Batch, on n'utilise pas IdentifiantCollab pour récupérer les informations
 -- du collaborateur, on prend juste ce qui est dans le fichier. On doit donc contrôler que le collab existe
  	req:= 'update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS, '''||replace(get_message_erreur('STD', 'STD00046', p_codlang),'''','''''')||''',EI.MATRICULE||''|''||EI.NUMPAC||''|''||EI.PACMAT||''|''||EI.PAIEZAD||''|''||EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere;
  	req:= req || ' and EI.NUMPAC is not null and EI.PAIEZAD is not null';
  	req:= req || ' and (not exists(SELECT 1 FROM DIC_ADM_CONTRAT_SITU DACS WHERE DACS.NUMPAC=EI.NUMPAC and DACS.PAIEZAD=EI.PAIEZAD';
  	req:= req || ' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DACS.DSDSC and DACS.DSFSC))';
  	EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Met une erreur sur les lignes en doublon dans le fichier d'import
 IF p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 req :='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00032',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE  '||clwhere||' AND ';
 req := req ||' NUMLIGNE IN (select numligne from  tge_import_elements P where P.date_import ='''||P_DATE_IMPORT||''' AND  P.LOGIN='''||p_login||''' ';
 req := req ||' AND (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,code_element,nvl(INDICATIF,''XyZ''),NVL(CODE_REMPLACEMENT,''*'') )in ';
 req := req ||' (select t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,nvl(t.INDICATIF,''XyZ''),NVL(t.CODE_REMPLACEMENT,''*'') from tge_import_elements t';
 req := req ||' where t.login='''||p_login||''' and t.date_import='''||P_DATE_IMPORT||''' group by t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,t.INDICATIF,t.CODE_REMPLACEMENT having count(*)>1) )' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- On conserve la ligne dont le numLigne est le max dans la liste des doublons (on enlève le message d'erreur)
 IF p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 req :='update TGE_IMPORT_ELEMENTS EI SET ERREURS=null WHERE  '||clwhere||' AND ';
 req := req ||' NUMLIGNE IN (select numligne from  tge_import_elements P where P.date_import ='''||P_DATE_IMPORT||''' AND  P.LOGIN='''||p_login||''' ';
 req := req ||' AND (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,code_element,nvl(INDICATIF,''XyZ''),NVL(CODE_REMPLACEMENT,''*''),numligne) in ';
 req := req ||' (select t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,nvl(t.INDICATIF,''XyZ''),NVL(t.CODE_REMPLACEMENT,''*''),max(numligne) as numligne from tge_import_elements t';
 req := req ||' where t.login='''||p_login||''' and t.date_import='''||P_DATE_IMPORT||''' group by t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,t.INDICATIF,t.CODE_REMPLACEMENT having count(*)>1) )' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 IF p_type_action = 'EC' or p_type_action = 'ECS' or p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
   -- Non existe EZ (seulement en création ou import. Les tests d'existence en modification sont exécutés en Java)
   -- Si l'élément existant a comme DERNIER_CODE_OPE = 'S', alors message ZEZ00040
   -- sinon ZEZ00030
   req :='merge into TGE_IMPORT_ELEMENTS EI using TGE_ELEMENTS_PAIE E on (';
   req := req || clwhereMerge;
   req := req ||' and E.NUMPAC = EI.NUMPAC and E.PAIEZAD = EI.PAIEZAD and E.PERIODE = EI.PERIODE';
   --req := req ||' and E.TYPE_TRAITEMENT = EI.TYPE_TRAITEMENT and E.CODE_ELEMENT = EI.CODE_ELEMENT and E.INDICATIF = EI.INDICATIF AND E.CODE_REMPLACEMENT=NVL(EI.CODE_REMPLACEMENT,''*''))';
   req := req ||' and E.TYPE_TRAITEMENT = EI.TYPE_TRAITEMENT and E.CODE_ELEMENT = EI.CODE_ELEMENT and E.INDICATIF = EI.INDICATIF AND E.CODE_REMPLACEMENT=NVL(EI.CODE_REMPLACEMENT,''*'')';
   -- On rajoute une clause sur la table TGE_IMPORT_ANNULATION car avant l'insertion il peut y avoir eu des cartes d'annulation (FSED) et donc l'élément sera supprimé
   req := req ||' and not exists (select 1 from  TGE_IMPORT_ANNULATION A where A.LOGIN = '''||P_LOGIN||''' and A.DATE_IMPORT = '''||P_DATE_IMPORT||''' and A.NUMPAC = E.NUMPAC';
   req := req ||' and A.PAIEZAD = E.PAIEZAD and A.PERIODE = E.PERIODE and A.ORIGINE = E.ORIGINE)';
   req := req ||' )';
   req := req ||' when matched then update set ERREURS ='; 
   req := req ||' case';
   req := req ||' when E.DERNIER_CODE_OPE = ''S'' then TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00040',p_codlang),'''','''''')||''',EI.CODE_ELEMENT||''|''||TGE_IMPORT_FORMATE_DATE(EI.PERIODE, EI.LOGIN, ''YYYYMM'', ''MM.YYYY'')||''|''||EI.INDICATIF,'''||p_codlang||''')';
   req := req ||' else TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00030',p_codlang),'''','''''')||''',CODE_ELEMENT||''|''||INDICATIF||''|''||TGE_IMPORT_FORMATE_DATE(PERIODE, LOGIN, ''YYYYMM'', ''MM.YYYY''),'''||p_codlang||''')';
   req := req ||' end';
   req:= req || clWhereMergeErreur;
   EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Numpac non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PaieZad non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Periode non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Type Traitement non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Code_element non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00016',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_ELEMENT is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Date d'effet non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00314',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_EFFET is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Longueur Matricule
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00089',p_codlang),'''','''''')||''',MATRICULE,'''||p_codlang||''') where '||clwhere||' AND MATRICULE is NOT null AND LENGTH (MATRICULE)>32 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur Origine
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',ORIGINE,'''||p_codlang||''') where '||clwhere||' AND ORIGINE is NOT null AND LENGTH (ORIGINE)>1 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --
 -- Longueur LOGIN (sauf pour le Batch)
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00107',p_codlang),'''','''''')||''',LOGIN,'''||p_codlang||''') where '||clwhere||' AND LOGIN!=''BATCH'' AND LENGTH (LOGIN)>32 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- date_effet/periode de paie TGE00310
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00310',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 -- permet de gérer les cas où DATE_EFFET ou PERIODE ne sont pas des dates valides
 req:= req ||' and (select case when to_date(EI.DATE_EFFET,''YYYYMMDD'') > last_day(to_date(EI.PERIODE,''YYYYMM'')) then ''O'' else ''N'' end from dual where is_date(EI.DATE_EFFET, ''YYYYMMDD'')=1 and is_date(EI.PERIODE, ''YYYYMM'')=1 ) = ''O''';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF p_type_action = 'ECS' or p_type_action = 'EMS' then
	-- En SimuPaie, on contrôle seulement l'interdiction de la saisie dans la passé : TGE00311 (il n'y a pas de passé, rétro) 
	req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00311',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	req:= req ||' where '||clwhere || ' ';
	-- permet de gérer les cas où PERIODE n'est pas une date valide 
	req:= req ||' and (select case when to_date(EI.PERIODE,''YYYYMM'') < (select to_date(P.PERIODEENCOURS,''YYYYMM'') from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC) then ''O'' else ''N'' end from dual where is_date(EI.PERIODE, ''YYYYMM'')=1 ) = ''O''';
	EXECUTE_IMMEDIATE_STRING( req,0);
 ELSE
	 -- période de paie pour les EZ : TGE00311 / ZEZ00037 / TGE00336 / TGE00337
	 req:='merge into TGE_IMPORT_ELEMENTS EI using';
	 req:= req ||' (select P1.NUMPAC, P1.PERIODEENCOURS, P1.DEB_RETRO, P1.DEB_HISTO_RETRO, P1.NB_MOIS_RETRO, ';
	 -- Pour le calcul de la limite rétro, on ne tient pas compte du max entre DEB_HISTO_RETRO et PERIODEENCOURS - NB_MOIS
	 -- car c'est le test sur la DEB_HISTO_RETRO et le message TGE00336 qui sera pris en compte
	 req:= req ||' TO_CHAR(ADD_MONTHS(TO_DATE(P1.PERIODEENCOURS, ''YYYYMM''), - P1.NB_MOIS_RETRO), ''YYYYMM'') AS LIMITE_RETRO '; 
	 req:= req ||' from TGE_REF_PAC P1) P';
	 req:= req ||' on (';
	 req:= req || clwhereMerge;
	 req:= req ||' and EI.PERIODE < P.PERIODEENCOURS';
	 req:= req ||' and ( P.DEB_RETRO IS NULL or P.PERIODEENCOURS < P.DEB_RETRO';
	 IF not p_type_action = 'GAP' then
	   -- Pour les éléments créés en sous-marin depuis la GAP, on ne teste pas le caractère CALCUL_RETRO de l'élément, ni la cohérence entre la période et la date d'effet
	   req:= req ||' or EI.PERIODE <> substr(EI.DATE_EFFET, 0, 6)';
	 END IF;
	 req:= req ||' or EI.PERIODE < P.DEB_HISTO_RETRO or EI.PERIODE < P.LIMITE_RETRO)';
	 req:= req ||' and EI.NUMPAC = P.NUMPAC)'; 
	 req:= req ||' when matched then update set EI.ERREURS = case';
	 req:= req ||' when P.DEB_RETRO is null or P.PERIODEENCOURS < P.DEB_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00311',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	 IF not p_type_action = 'GAP' then
	   req:= req ||' when EI.PERIODE <> substr(EI.DATE_EFFET, 0, 6) then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00041',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	 END IF;
	 req:= req ||' when EI.PERIODE < P.DEB_HISTO_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00336',p_codlang),'''','''''')||''',to_char(to_date(P.DEB_HISTO_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
	 req:= req ||' when EI.PERIODE < P.LIMITE_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00337',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.LIMITE_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
	 req:= req ||' end';
	 req:= req || clWhereMergeErreur;
	 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Format date d'effet TGE00315
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00315',p_codlang),'''','''''')||''',EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere||' AND EI.DATE_EFFET is not null and IS_DATE(EI.DATE_EFFET,''YYYYMMDD'')=0';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- IdPacMat non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00102',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND (RPAD(NUMPAC,6) || PACMAT) is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur NumPac
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',numpac,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(NUMPAC),0)>6 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur PaieZad
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',NULL,PAIEZAD) where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Format Periode
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00328',p_codlang),'''','''''')||''',PERIODE,'''||p_codlang||''') WHERE '||clwhere||' AND PERIODE is NOT null AND IS_DATE(PERIODE,''YYYYMM'')=0 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur Cle_import
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00099',p_codlang),'''','''''')||''',LOGIN || ''#'' ||DATE_IMPORT || ''#'' ||NUMLIGNE,'''||p_codlang||''') WHERE '||clwhere||' AND LOGIN IS NOT NULL AND DATE_IMPORT IS NOT NULL AND NUMLIGNE IS NOT NULL AND  LENGTH(LOGIN || ''#'' ||DATE_IMPORT || ''#'' ||NUMLIGNE) >70 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur IdPacMat
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00103',p_codlang),'''','''''')||''',RPAD(NUMPAC,6) || PACMAT,'''||p_codlang||''') WHERE '||clwhere||' AND NUMPAC   IS NOT NULL AND PACMAT IS NOT NULL AND  LENGTH(RPAD(NUMPAC,6) || PACMAT) >14 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controle NATCOL doit avoir la valeur SAL ou STA TGE00027
 select VALVAR into w_id_natcol from sys_varsys where module='STD' and codvar='ID_NATCOL';
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00027',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 req := req ||' and (select DAC.'||w_id_natcol||' from DIC_ADM_CONTRAT DAC inner join DIC_ADM_CONTRAT_SITU DACS on (DACS.NUMPAC = DAC.NUMPAC and DACS.PACMAT = DAC.PACMAT and DACS.NUMCNT = DAC.NUMCNT) where DACS.PAIEZAD = EI.PAIEZAD and DAC.NUMPAC = EI.NUMPAC';
-- Si le PAC n'est pas MPE, le couple NUMPAC/PAIEZAD ne suffit pas à déterminer un contrat, on utilise la date d'effet
 req := req ||' and case when ((select MPE from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC) = ''N'' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DAC.DSDCN and nvl(DAC.DSFCN, to_date(''20991231'', ''YYYYMMDD'')))';
 req := req ||' or (select MPE from TGE_REF_PAC P2 where P2.NUMPAC = EI.NUMPAC) <> ''N'' then 1 else 0 end = 1) not in (''SAL'', ''STA'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF p_login = 'BATCH' THEN
 -- Autorisation paiezad
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND EI.paiezad IS NOT NULL AND EI.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Chez les clients, ils n'ont pas de pac * dans TGE_DICOZ, par contre en recette interne ils n'ont que celui là (pac *). 
 -- Du coup on conserve la complexité de choisir les éléments du pac *, mais en gros, il n'y a pas de cohabitation entre les 2 gestions 
 -- (sauf en dev ce qui peut provoquer des incohérences sur les contrôles : 
 --  - Elément U101 existe sur le pac *, mais s'il y a d'autres éléments sur le pac TLSE01 mais pas U101
 --  - L'appel table va proposer U101 mais le contrôle ici va bloquer en disant que U101 n'existe pas
 
 -- Existe code_element
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00017',p_codlang),'''','''''')||''',code_element,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND EI.code_element is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT= EI.CODE_ELEMENT)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Existe type_traitement
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND  EI.type_traitement is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_TYPETRT TT where TT.CODETYPTRT = EI.TYPE_TRAITEMENT';
 req:= req || ' and (';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT = EI.TYPE_TRAITEMENT) > 0 and TT.NUMPAC = EI.NUMPAC)';
 req:= req ||   ' or';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT= EI.TYPE_TRAITEMENT) = 0 and TT.NUMPAC=''*'')';
 req:= req || ' ))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format sens
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00038',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND sens IS NOT NULL AND sens NOT IN (''+'',''-'') ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Autorisation sens (Valeur 'Aucun' attendue pour les TYPE = 'A')
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00015',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' and EI.SENS is not null and EI.SENS in (''+'',''-'') ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT= EI.CODE_ELEMENT and DZ.TYPE = ''A'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /** Début des tests sur l'INDICATIF */
 -- On fait les tests sur l'indicatif qu'en création ou import. En modification, l'indicatif ne change pas.
 IF p_type_action = 'EC' or p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 -- OCC1 > 0 et GROUPE = COT/CZR/CTM/CRA : Existe code_caisse
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00013',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null AND EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''COT'',''CZR'',''CTM'',''CRA''))';
 req:= req || ' and not exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = EI.INDICATIF)';
 EXECUTE_IMMEDIATE_STRING( req,0);

  -- OCC1 > 0 et GROUPE = TXR : Existe code_rubrique
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00334',p_codlang),'''','''''')||''',EI.INDICATIF,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null AND EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''TXR''))';
 req:= req || ' and not exists (select 1 from TGE_REF_RUBRIQUE R where R.NUMPAC = EI.NUMPAC and R.CODERUB = EI.INDICATIF)';
 EXECUTE_IMMEDIATE_STRING( req,0);

 -- OCC1 > 0 et GROUPE = COT/CZR/CTM/CRA : Caisse référence interdite si on est NewCot (TGE_REF_PAC.OLDCOT = 'N')
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null and EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''COT'',''CZR'',''CTM'',''CRA''))';
 req:= req || ' and exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = EI.INDICATIF and RC.CODEGROUP = ''R'')';
 req:= req || ' and nvl((select P.OLDCOT from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC), ''N'') != ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - longueur attendue 6
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''MM:CCC'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null  and length(EI.INDICATIF) != 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - MM doit correspondre à un mois
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00011',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null AND EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and (IS_NUMBER(substr(EI.INDICATIF, 0, 2)) is null or IS_DATE(substr(EI.INDICATIF,0, 2),''MM'') !=1)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - CCC Existe code_caisse
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00013',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null and EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 req:= req || ' and not exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = substr(EI.INDICATIF, 4))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - CCC Caisse référence interdite
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null and EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''HCO''))';
 req:= req || ' and exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = substr(EI.INDICATIF, 4) and RC.CODEGROUP = ''R'')';
 req:= req || ' and nvl((select P.OLDCOT from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC), ''N'') != ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 = 0 : Format attendu SSAAMMN
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMMN'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) != 7 or IS_NUMBER(substr(EI.INDICATIF,7,1)) is null or IS_DATE(substr(EI.INDICATIF, 0, 6),''YYYYMM'') !=1 )';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 = 0 and DZ.GROUPE = ''HIS'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 = 0 : Format attendu SSAAMMN - N doit etre compris etre 1 et 9
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00012',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere;
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 = 0 and DZ.GROUPE = ''HIS'')';
 -- On gère avec un "exist/from dual" pour effectuer les tests > 1 et < 9 sans que ça plante si la valeur de "N" n'est pas un nombre valide
 req:= req || ' and exists (select 1 from dual where length(EI.INDICATIF) = 7 and (IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or to_number(substr(EI.INDICATIF, 7, 1)) < 1 or to_number(substr(EI.INDICATIF, 7, 1)) > 9))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMMN:XX'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) != 10 or IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or IS_DATE(substr(EI.INDICATIF, 0, 6),''YYYYMM'') !=1 ';
 req:= req || ' or substr(EI.INDICATIF,8,1) != '':'' or IS_NUMBER(substr(EI.INDICATIF,9,2)) is null)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX - N doit etre compris etre 1 et 9
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00012',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere;
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'')';
 -- On gère avec un "exist/from dual" pour effectuer les tests > 1 et < 9 sans que ça plante si la valeur de "N" n'est pas un nombre valide
 req:= req || ' and exists (select 1 from dual where length(EI.INDICATIF) = 10 and (IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or to_number(substr(EI.INDICATIF, 7, 1)) < 1 or to_number(substr(EI.INDICATIF, 7, 1)) > 9))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX - XX doit être compris entre 01 et TGE_REF_DICOZ.OCC2
 -- Utilisation d'un merge afin de pouvoir utiliser DZ.OCC2 dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 AND DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'' ';
 req:= req || ' and (length(EI.INDICATIF)) = 10 and IS_NUMBER(substr(EI.INDICATIF,7,1)) is not null and IS_DATE(substr(EI.INDICATIF,0,6),''YYYYMM'') !=0 and (IS_NUMBER(substr(EI.INDICATIF,9,2)) is null ';
 req:= req || ' or to_number(substr(EI.INDICATIF,9,2)) < 1 or to_number(substr(EI.INDICATIF,9,2)) > DZ.OCC2 )) ';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00013',p_codlang),'''','''''')||''',DZ.OCC2,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur; 
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''AAMM+Code Chrono'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) !=10 ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono, partie AAMM non valide
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00035',p_codlang),'''','''''')||''',''AAMM+Code Chrono|AAMM'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) = 10 and IS_DATE(substr(EI.INDICATIF, 0, 4),''YYMM'') != 1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono, Code chrono n'existe pas pour le collaborateur
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00034',p_codlang),'''','''''')||''',substr(Ei.indicatif,5),'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) = 10 and IS_DATE(substr(EI.INDICATIF, 0, 4),''YYMM'') = 1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 req:= req || ' and not exists (select 1 from DIC_ADM_CONTRAT_SITU where NUMPAC = EI.NUMPAC and PACMAT = EI.PACMAT and CODE_CHRONO  = substr(EI.INDICATIF, 5))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC2 = 0 et OCC1 = 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR / CRF / CAA / CPP: Format indicatif attendu SSAAMM
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMM'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and IS_DATE(EI.INDICATIF,''YYYYMM'') !=1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC2 = 0 and DZ.OCC1 = 13 and DZ.GROUPE not in (''COT'',''CZR'',''CTM'',''CRA'',''HCO'',''HIS'',''HCP'',''HC2'',''TXR'',''CRF'',''CAA'',''CPP''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_ELEMENT commence par 'R' et OCC2 = 0 et OCC1 = 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR /CRF / CAA / CPP: Format indicatif attendu compris entre (PERIODE -12 mois) et (PERIODE - 1 mois)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00035',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.CODE_ELEMENT is not null and length(EI.CODE_ELEMENT) = 4 and EI.CODE_ELEMENT like ''R%'' ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC2 = 0 and DZ.OCC1 = 13 and DZ.GROUPE not in (''COT'',''CZR'',''CTM'',''CRA'',''HCO'',''HIS'',''HCP'',''HC2'',''TXR'',''CRF'',''CAA'',''CPP''))';
 -- permet de gérer les cas où INDICATIF n'est pas une date valide
 req:= req || ' and (select case when (to_date(EI.INDICATIF,''YYYYMM'') > add_months(to_date(EI.PERIODE,''YYYYMM''),-1) or to_date(EI.INDICATIF,''YYYYMM'') < add_months(to_date(EI.PERIODE,''YYYYMM''),-12)) then ''O'' else ''N'' end from dual where IS_DATE(EI.INDICATIF, ''YYYYMM'')=1) = ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et OCC1 <> 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR / CRF / CAA / CPP: Format indicatif attendu entre 1 et OCC1 
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.OCC1 dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC1 <> 13';
 req:= req || ' and DZ.GROUPE not in (''HIS'',''HCO'',''COT'',''CZR'',''CTM'',''CRA'',''DFR'', ''HCP'', ''HC2'', ''TXR'',''CRF'',''CAA'',''CPP'')';
 req:= req || ' and (is_number(EI.INDICATIF) is null or to_number(EI.INDICATIF) < 1 or to_number(EI.INDICATIF) > DZ.OCC1))';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00014',p_codlang),'''','''''')||''',DZ.OCC1,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- GROUPE in CRF / CAA / CPP : Format indicatif attendu alphanumerique <= 2 Caractères
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00343',p_codlang),'''','''''')||''',''XX=alphanumérique'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) > 2 or not regexp_like(EI.INDICATIF, ''^[a-zA-Z0-9]+$''))';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.GROUPE in (''CRF'',''CAA'',''CPP''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 -- Fin tests sur l'indicatif
 
 -- Format valeur : longueur valide (TYPE = A ou N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00006',p_codlang),'''','''''')||''',(select distinct(oz.longueur) from tge_ref_dicoz oz where oz.element = ei.code_element and ei.numpac =oz.numpac and oz.type in (''A'',''N'',''B'')),'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req ||   ' and (';
 req:= req ||   ' ((DZ.TYPE = ''A'' or DZ.TYPE = ''B'') and length(EI.VALEUR) > DZ.LONGUEUR)';
 req:= req ||   ' or (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16) and length(EI.VALEUR) > DZ.LONGUEUR)';
 req:= req ||   ')';
 req:= req || ' )';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : nombre signé(TYPE = N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR04',p_codlang),'''','''''')||''',EI.VALEUR,'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req ||   ' and ( (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16)) or (DZ.TYPE = ''B'')) ';
 req:= req ||   ' and (regexp_like(EI.VALEUR, ''^[-+]+.*''))';
 req:= req || ' )';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : partie entière <= TGE_REF_DICOZ.LONGUEUR (TYPE =P)
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC ';
 req:= req || ' and (DZ.TYPE = ''P'' and is_number(EI.VALEUR) is not null and (((INSTR(replace(EI.VALEUR,''.'','',''),'','')-1)> DZ.LONGUEUR) or (INSTR(replace(EI.VALEUR,''.'','',''),'','')= 0 and length(EI.VALEUR) > DZ.LONGUEUR))  ) ';
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR02',p_codlang),'''','''''')||''', EI.VALEUR||''|''||DZ.LONGUEUR,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : partie décimale <= TGE_REF_DICOZ.NBDECI (TYPE =P)
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC ';
 req:= req || ' and (DZ.TYPE = ''P'' and INSTR(replace(EI.VALEUR,''.'','',''),'','') > 0 and length(EI.VALEUR)-INSTR(replace(EI.VALEUR,''.'','',''),'','')> DZ.NBDECI)'; 
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR01',p_codlang),'''','''''')||''', EI.VALEUR||''|''||(DZ.NBDECI),'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- Format valeur : nombre non décimal (TYPE = N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00007',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null and (is_number(EI.VALEUR) is null or instr(EI.VALEUR, '','') > 0 or instr(EI.VALEUR, ''.'') > 0)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC'; 
 req:= req ||   ' and (DZ.TYPE = ''B'' or (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16))))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : date ne respectant pas la longueur (TYPE = N)
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.LONGUEUR dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req || ' and EI.VALEUR is not null and DZ.TYPE = ''N'' and DZ.MASQUE>=1 AND DZ.MASQUE<=16';
 req:= req || ' and length(EI.VALEUR) != DZ.LONGUEUR';
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00008',p_codlang),'''','''''')||''',DZ.LONGUEUR,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : date pas dans bon format (TYPE = N)
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.MASQUE dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = Ei.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC'; 
 req:= req || ' and DZ.TYPE = ''N'' AND DZ.MASQUE >= 1 AND DZ.MASQUE <= 16';
 req:= req || ' and length(EI.VALEUR) = DZ.LONGUEUR and (';
 req:= req || ' (DZ.MASQUE =1 AND (IS_DATE(EI.VALEUR,''DDMMYYYY'')!=1 AND EI.VALEUR<>''00000000'')) OR';
 req:= req || ' (DZ.MASQUE =2 AND (IS_DATE(EI.VALEUR,''MMYYYY'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =3 AND (IS_DATE(EI.VALEUR,''YYYYMM'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =4 AND (IS_DATE(EI.VALEUR,''DD'')!=1 AND EI.VALEUR<>''00'' ) ) OR';
 req:= req || ' (DZ.MASQUE =5 AND (IS_DATE(EI.VALEUR,''MM'')!=1 AND EI.VALEUR<>''00'')) OR';
 req:= req || ' (DZ.MASQUE =6 AND (IS_DATE(EI.VALEUR,''YYYY'')!=1 AND EI.VALEUR<>''0000'' )) OR';
 req:= req || ' (DZ.MASQUE =7 AND (IS_DATE(EI.VALEUR,''YYYYMMDD'')!=1 AND EI.VALEUR<>''00000000'')) OR';
 req:= req || ' (DZ.MASQUE =8 AND (IS_DATE(EI.VALEUR,''DDMMYY'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =9 AND (IS_DATE(EI.VALEUR,''MMYY'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =10 AND (IS_DATE(EI.VALEUR,''YYMM'')!=1 AND EI.VALEUR<>''0000'' )) OR';
 req:= req || ' (DZ.MASQUE =11 AND (IS_DATE(EI.VALEUR,''YY'')!=1 AND EI.VALEUR<>''00'')) OR';
 req:= req || ' (DZ.MASQUE =12 AND (IS_DATE(EI.VALEUR,''YYMMDD'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =13 AND( IS_DATE(EI.VALEUR,''DDYY'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =14 AND (IS_DATE(EI.VALEUR,''DDMM'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =15 AND (IS_DATE(EI.VALEUR,''MMDD'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =16 AND (IS_DATE(EI.VALEUR,''MMDDYYYY'')!=1 AND EI.VALEUR<>''00000000''))';
 req:= req || '))';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00024',p_codlang),'''','''''')||''',TGE_VALEUR_FORMAT_DATE(DZ.MASQUE),'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : nombre attendu (TYPE = P)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00009',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.VALEUR is not null and is_number(EI.VALEUR) is null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.TYPE = ''P'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Controle Origine et mode_3060 : TGE00317
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00317',p_codlang),'''','''''')||''',EI.ORIGINE ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null and EI.CODE_REMPLACEMENT = ''R''';
 req:= req || ' and exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC and G.MODE_3060 <> ''R'' and G.MODE_3060 <> ''F'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF P_TYPE_ACTION = 'EM' or p_type_action = 'EMS' THEN
 -- Ce test n'est à faire qu'en modification (EM), mais pas à la création (EC ou I)
 -- Controle Origine et mode_3060 : TGE00318
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00318',p_codlang),'''','''''')||''',EI.ORIGINE ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null and nvl(EI.CODE_REMPLACEMENT, ''*'') <> ''R''';
 req:= req || ' and exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC and G.MODE_3060 <> ''W'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Mise à jour de l'élément autorisée ZEZ00005 seulement si on n'est pas en simulation
 /*      
  	 	 - Si on est en simulation
  	 	 - Si l'élément a une ORIGINE = '&'
         - sinon CODEMODIF doit être égale à 2 et :
            - soit l'élément n'est pas présent dans MAPDO
            - soit il est présent dans TGE_REF_MAPDO et il doit avoir TGE_REF_MAPDO.OCCURRENCE like '%!%' ou TGE_REF_MAPTA.ALLERRETOUR = 'R'
 */
 IF p_type_action <> 'ECS' and p_type_action <> 'EMS' then
 	req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00005',p_codlang),'''','''''')||''',EI.CODE_ELEMENT ,'''||p_codlang||''') where '||clwhere;
 	req:= req || ' and EI.CODE_ELEMENT is not null and (EI.ORIGINE is null or EI.ORIGINE <> ''&'') and not exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.CODEMODIF =''2'' ';
 	req:= req || ' and EI.NUMPAC = DZ.NUMPAC ';
 	-- L'élément n'est pas présent dans MAPDO (pour le numpac ou le pac *)
 	req:= req || ' and (DZ.ELEMENT not in (select ELEMENT from TGE_REF_MAPDO DO2 where (((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) > 0 and DO2.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) = 0 and DO2.NUMPAC = ''*''))) ';
 	-- Si l'élément est présent dans MAPDO alors TGE_REF_MAPDO.OCCURENCE doit contenir '!'
 	-- ou TGE_REF_MAPTA.ALLERRETOUR = 'R' pour être modifiable
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO DO left outer join TGE_REF_MAPTA TA on DO.TABLEGXP = TA.TABLEPARAM where DO.ELEMENT = DZ.ELEMENT ';
 	req:= req || ' and (((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) > 0 and DO.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) = 0 and DO.NUMPAC = ''*'')) ';
 	req:= req || ' and (((select count(*) from TGE_REF_MAPTA where NUMPAC = DZ.NUMPAC and TABLEPARAM = DO.TABLEGXP ) > 0 and TA.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPTA where NUMPAC = DZ.NUMPAC and TABLEPARAM = DO.TABLEGXP ) = 0 and TA.NUMPAC = ''*'')) ';
 	req:= req || ' and (DO.OCCURENCE like ''%!%'' or TA.ALLERRETOUR = ''R'')) > 0 )) ';
 	req:= req || ' )';
 	EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Contrôle Origine existe pour le numPac TGE00331
 -- Ce test devra être supprimé lorsque celui associé au message TGE00321(origine est cohérente avec la GTA du collaborateur)
 -- sera intégré au contrôle PL/SQL (pour le moment fait en Java pour les saisies écrans et imports Web)
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00331',p_codlang),'''','''''')||''',EI.ORIGINE||''|''||EI.NUMPAC ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC)';
 EXECUTE_IMMEDIATE_STRING( req,0);
  
 -- Ecrasement de la clause Where
 clwhere:='EI.login='''||p_login||''' and EI.date_import='''||P_DATE_IMPORT||'''';
 -- Controles pour les éléments B691 et B690
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00195',p_codlang),'''','''''')||''',ei.valeur,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element=''B690'' and not exists(select * from   TGE_REF_IMPUTATION
 Ei2 where ei2.numpac in (Ei.numpac,''*'') and ei2.codeimp=ei.valeur )  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00193',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element=''B691'' and exists(select * from
 (select date_import,login,numpac,paiezad, code_element, sum(to_number(replace(valeur,''.'','',''))) as somme from TGE_IMPORT_ELEMENTS Ei2 where code_element=''B691'' AND IS_NUMBER(VALEUR) is not null  group by  date_import,login,numpac,paiezad, code_element) tmp where   ei.date_import  =tmp.date_import  AND ei.login =tmp.login and somme<>100 and ei.numpac =tmp.numpac
 AND ei.paiezad  =tmp.paiezad)  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --
 req:='update TGE_IMPORT_ELEMENTS Ei SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00194',p_codlang),'''','''''')||''',CODE_ELEMENT||''|''||INDICATIF,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element in (''B690'',''B691'') and not exists(select * from TGE_REF_MAPDO d where code_element=ELEMENT and indicatif=occurence and (d.numpac=Ei.numpac or d.numpac=''*''))  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
    	-- On remonte l'erreur à l'application
 		raise;
	END IF;
 END TGE_CONTROLE_30;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_40
=SQL=
create or replace PROCEDURE TGE_CONTROLE_40 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 , P_ISFSED in NUMBER
 ) AS
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
 cNumeric_Characters varchar2(40);
 cNLS_NUMERIC_CHARACTERS varchar2(40);
 clWhere varchar2(1000);
 req varchar2(2000);
 w_exist_incident VARCHAR2(2000);
 w_err VARCHAR2(2000);
 
 /* Objets utilisés pour le contrôle sur la somme des heures réalisées */
 -- Objet contenant un tableau des lignes par collaborateur par jour avec les sommes des heures réalisées déjà créées (TGE_INCIDENTS_PAIE) et des heures réalisées ajoutées par l'import
 TYPE T_REC IS RECORD (
 numpac varchar2(6),
 paiezad varchar2(8),
 date_effet date,
 somme_heures number,
 somme_heures_trav_import number);
 TYPE typ_tab IS table of T_REC;
 tab typ_tab ;
 -- Plus petite et plus grande date de l'import
 v_dateMinImport varchar2(8);
 v_dateMaxImport varchar2(8);
 varsys varchar2(100);
 
 BEGIN
 
 SELECT substr(TRIM(VALUE),length(TRIM(VALUE)))  INTO cNLS_NUMERIC_CHARACTERS FROM nls_session_parameters where PARAMETER = 'NLS_NUMERIC_CHARACTERS';
 
 clwhere:='login='''||p_login||''' and date_import='''||p_date_import||'''';
 if p_numligne is not null then
 clwhere:=clwhere||' AND NUMLIGNE='||p_numligne;
 end if;
 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controler
 clwhere:=clwhere || ' AND (STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR STATUT = ''TRANS'')';
 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées
 IF p_login='BATCH' THEN
 req:='update TGE_IMPORT_INCIDENTS I SET ERREURS = '''' WHERE '||clwhere;
EXECUTE_IMMEDIATE_STRING (req,0);
 END IF;
 
 -- Numpac non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- TYPE_TRAITEMENT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00108',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00109',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_FIN is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- NUMPAC controle format
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',NUMPAC,'''||p_codlang||''') where '||clwhere||' AND  NVL(LENGTH(NUMPAC),0)>6 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 ---controleLigneImportIncidentVide(TGE_IMPORT_INCIDENTS_sgbd p_importIncident, ArrayList<GxpErreurWithParams> p_arrErreurs)INCI0025
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0025',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IP is null AND HEURES_IP IS NULL AND HEURES_TRAV IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD >8 cara
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',PAIEZAD,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00083',p_codlang),'''','''''')||''',PERIODE||''|yyyyMM'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(PERIODE ,''yyyyMM'') =0)' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00110',p_codlang),'''','''''')||''',DATE_DEBUT||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(DATE_DEBUT ,''yyyyMMdd'') =0) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00111',p_codlang),'''','''''')||''',DATE_FIN||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND IS_DATE(DATE_FIN ,''yyyyMMdd'') =0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_TRAV controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00112',p_codlang),'''','''''')||''',HEURES_TRAV,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_TRAV, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_IP controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00113',p_codlang),'''','''''')||''',HEURES_IP,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_IP, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE
 req:='update TGE_IMPORT_INCIDENTS INC SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00331',p_codlang),'''','''''')||''',INC.ORIGINE||''|''||INC.NUMPAC ,'''||p_codlang||''') WHERE '||clwhere;
 req:= req || ' and INC.ORIGINE is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = INC.ORIGINE and G.NUMPAC = INC.NUMPAC)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE (lig 1968)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (ORIGINE IS NOT NULL AND LENGTH(ORIGINE) >1) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE
  IF P_LOGIN ='BATCH' THEN 
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') OR (ORIGINE is null)) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  else if P_ISFSED=1 then
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') OR (ORIGINE is null)) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  END IF;
  END IF;
 
 -- CONTROLES EXISTENCES
 -- TYPE_TRAITEMENT (Lig 1971)
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' WHERE '||clwhere||' AND ii.TYPE_TRAITEMENT IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists  (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=ii.numpac and ii.type_traitement =RT.CODETYPTRT) )';
 req:= req || ' OR ';
 req:= req ||   '( exists (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=''*'' AND RT.codetyptrt= ii.type_traitement and ii.type_traitement =RT.CODETYPTRT AND NOT EXISTS (SELECT 1 FROM TGE_REF_TYPETRT RT2 WHERE RT2.NUMPAC=ii.numpac)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IMPUTATION (Lig 1972)
 
 select valvar into varsys from sys_varsys where module='TGE' and CODVAR='CTRL_CODE_IMPUTATION_EXISTE';
 if upper(varsys)<>'FALSE' then
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00012',p_codlang),'''','''''')||''',ii.code_imputation||''|''||ii.numPac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' and ii.code_imputation<>''*'' AND  ii.code_imputation IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac = ii.numpac and ri.codeimp=ii.code_imputation))';
 req:= req || ' OR ';
 req:= req ||   '(exists  (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac=''*'' AND  ri.codeimp=ii.code_imputation and ri.codeimp= ii.code_imputation AND NOT EXISTS (SELECT 1 FROM TGE_REF_IMPUTATION rt2 WHERE rt2.numpac=ii.numpac and rt2.codeimp= ii.code_imputation)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 end if;
 
 -- CODE_IP (Lig 1973)INCI0012
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0012',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.code_ip IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac ) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac=''*'' AND rp.code_incident=ii.code_ip AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rp2 WHERE rp2.numpac=ii.numpac and ii.code_ip=rp2.code_incident)))';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Contrôles spécifiques
 -- Date_Debut Date_Fin (lig 1977)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') WHERE '||clwhere||' AND  date_debut > date_fin ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- HEURES_TRAV TYPE_HEURE (lig 1978)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00114',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NOT NULL AND type_heure NOT IN (''T'',''R'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00115',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NULL AND type_heure IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IP HEURE_IP (lig 1979)
 /*req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00138',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_ip IS NOT NULL AND heures_ip IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);*/
 
 -- DOMAINE_IMP ligne 1980
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00119',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (DOMAINE_IMP IS NOT NULL AND CODE_IMPUTATION IS NULL) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00120',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NOT NULL AND domaine_imp != ''H'' AND domaine_imp !=''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00121',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NULL AND domaine_imp != ''H'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00122',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_ip IS NOT NULL AND heures_trav IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00136',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NULL AND heures_ip IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ctrl if heure contenuHeures(String p_heures, String p_type_ip, ArrayList<GxpErreurWithParams> p_arrErreurs) INCI0024
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0024',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND (((Ii.heures_ip IS NOT NULL OR Ii.code_ip is not null ) AND Ii.code_ip = ''HP'' AND II.heures_ip is null)
     OR (ii.HEURES_TRAV is null  AND ii.type_heure  in (''T'',''R''))
     ) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ToolsTge_controles.controleAutorisationPaieZad(p_loginUserOrDelegator, p_unIncident.numPac, p_unIncident.paieZad, arrErreurs);STD00049
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.paiezad IS NOT NULL AND ii.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleHoraireTheorique(p_unIncident, arrErreurs, p_transac); INCI0020 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0020',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.code_imputation IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleDateDebutFin(p_code_ip,p_date_debut,p_date_fin,p_arrErreurs); TGE00226 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','TGE00226',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.DATE_FIN !=  ii.DATE_DEBUT ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleCode_ip; INCI0027 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0027',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.type_heure != ''T'' AND  ii.type_heure != ''R''  AND (ii.CODE_IP =''HP'' OR ii.CODE_IP =''HT'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie en demi journée DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00264',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' AND ii.DATE_DEBUT is not null and ii.DATE_FIN is not null  and ii.DATE_DEBUT!=ii.DATE_FIN ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)=0.5 ';
 
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie du volume different de 0 ou 1 DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii  SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00265',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')'; 
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)!=0 AND is_number(ii.HEURES_IP)!=1  AND is_number(ii.HEURES_IP)!=0.5 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Bloquer les imports carte 40 sur des périodes antérieures à la date de limite de rétro
 req:='MERGE INTO TGE_IMPORT_INCIDENTS II USING ';
 req:= req ||' (SELECT NUMPAC, PERIODEENCOURS, DEB_RETRO, DEB_HISTO_RETRO, NB_MOIS_RETRO, ';
 req:= req ||'  GREATEST(NVL(DEB_HISTO_RETRO, ''190001''), (TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM''))) AS LIMITE_RETRO ';
 req:= req ||' FROM TGE_REF_PAC ) P';
 req:= req ||' ON (';
 req:= req || clwhere;
 req:= req ||' AND II.NUMPAC = P.NUMPAC';
 req:= req ||' AND II.PERIODE < P.PERIODEENCOURS';
 req:= req ||' AND ( P.DEB_RETRO IS NOT NULL AND P.DEB_RETRO <= P.PERIODEENCOURS';
 req:= req ||' ) ) WHEN MATCHED THEN UPDATE SET II.ERREURS = CASE';
 req:= req ||' WHEN II.PERIODE < P.DEB_HISTO_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00336',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.DEB_HISTO_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' WHEN II.PERIODE < P.LIMITE_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00337',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.LIMITE_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' END WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 -- Bloquer en mode non rétro les imports carte 40 sur des périodes antérieures à la période en cours
 req := 'MERGE INTO TGE_IMPORT_INCIDENTS II USING TGE_REF_PAC P ON( '|| clwhere;
 req := req || ' AND II.NUMPAC = P.NUMPAC';
 req := req || ' AND P.PERIODEENCOURS IS NOT NULL ';
 req := req || ' AND (P.DEB_RETRO > P.PERIODEENCOURS OR P.DEB_RETRO IS NULL) ';
 req := req || ' AND II.PERIODE < P.PERIODEENCOURS) ';
 req := req || ' WHEN MATCHED THEN UPDATE ';
 req := req || ' SET II.ERREURS = TGE_GET_MESSAGE_ERREUR(II.ERREURS, ''' || replace(get_message_erreur('TGE', 'TGE00351', p_codlang), '''', '''''') || ''', NULL, ''' || p_codlang || ''')';
 req := req || ' WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
 		-- On remonte l'erreur à l'application
  		raise;
  	END IF;
 END TGE_CONTROLE_40;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_40_CHEVAUCHEMENT
=SQL=
create or replace PROCEDURE TGE_CONTROLE_40_CHEVAUCHEMENT (P_LOGIN IN VARCHAR2, P_DATE_IMPORT IN VARCHAR2, P_NUMLIGNE IN VARCHAR2, P_CODLANG IN VARCHAR2) AS 
 /********************************************************************************
 Version     : V5.05.003
 *********************************************************************************/
 
 dateDebutSQL  VARCHAR2(20);                      --date fin import_absence
 dateFinSQL    VARCHAR2(20);                      --date fin import_absence
 cod_erreur    VARCHAR2(10);                      --code anomalie
 msg           VARCHAR(1000);                     --Message d'ano namlie
 typ_msg       VARCHAR2(10);                      --type de message ERROR ou WARNING
 varsys        VARCHAR2(100);                     --boolean varsys CTRL_ABS_CHEVAUCH
 ctrlWhere     VARCHAR2(2000) ;                   --requet SELECT pour controler le chevauchement
 updatesql     VARCHAR2(2000);                    --requete d'insertion de ERROR/WARNING
 C_FORMAT_DATE CONSTANT VARCHAR(10) :='YYYYMMDD'; --format date
 iterChev      NUMBER               :=0;          --compteur iteration absence chevauchante
 haveJ         NUMBER               :=0;          --boolean verifier si une absence type J a été traité
 firstMsg      NUMBER               :=0;
 haveMsg2demiJr NUMBER              :=0;
 accepte_2_demi_journee boolean:=false;
 type_demi_journee_meme_motif boolean:=false;
 
 ------- variable temporaire info abs. chevauché -------
 v_DATE_DEBUT TGE_ABSENCES.DATE_DEBUT%TYPE ;
 v_DATE_FIN TGE_ABSENCES.DATE_FIN%TYPE;
 v_FIN_MA TGE_ABSENCES.FIN_MA%TYPE;
 v_DEBUT_MA TGE_ABSENCES.DEBUT_MA%TYPE;
 v_MOTIF TGE_ABSENCES.MOTIF%TYPE;
 v_DEMI_JOURNEE TGE_REF_PRE.DEMI_JOURNEE%TYPE;
 v_duree VARCHAR2(100);
 --------------------------------------
 TYPE TGE_CTRL40_type_map_msg_error
 IS
 TABLE OF VARCHAR2(200) INDEX BY VARCHAR2(10);-- typer table temporère pour optimiser la recupération des erreurs */
 abs_chevauch SYS_REFCURSOR;                  -- cursor + variable absence chevauché
 prop_abs_encour TGE_CTRL40_prop_absence;     -- contient statut absence
 map_msg TGE_CTRL40_type_map_msg_error;       -- for optimization error
 inf_abs TGE_CTRL40_info_absence;             -- Objet de sauvegarde des propriété absence calculable
 tmp_record_cursor TGE_CTRL40_abs_row_cursor  :=TGE_CTRL40_abs_row_cursor(NULL,NULL,NULL,NULL,NULL,NULL);
 C_SQL_NON_DEMI_JOURNEE CONSTANT VARCHAR(200) :='and not exists (select 1 from tge_ref_pre pre  where absence.numpac=pre.numpac and absence.motif=pre.code_incident and pre.demi_journee =1 )';
 /************ CURSORS ************/
 -- Curseur des absence à contrôler
 CURSOR ABS_IMPORT
 IS
 SELECT absence.LOGIN,
 absence.DATE_IMPORT,
 absence.NUMLIGNE,
 absence.MATRICULE,
 absence.NUMPAC,
 absence.PACMAT,
 absence.PAIEZAD,
 absence.PERIODE,
 absence.TYPE_TRAITEMENT,
 absence.DATE_DEBUT,
 absence.DATE_FIN,
 absence.HEURES_TRAV,
 absence.TYPE_HEURE,
 absence.HEURES_IP,
 absence.CODE_IP,
 absence.CODE_IMPUTATION,
 absence.DOMAINE_IMP,
 absence.ORIGINE,
 absence.ERREURS,
 absence.STATUT,
 absence.WARNINGS,
 absence.DATE_EFFET,
 absence.FSED_PAIEZAD,
 MOT.DEMI_JOURNEE,
 mot.RUB_ECHANGE,
 mot.UNITE
 FROM TGE_IMPORT_INCIDENTS absence LEFT JOIN TGE_REF_PRE mot
 ON absence.CODE_IP=mot.CODE_INCIDENT AND mot.NUMPAC    =absence.NUMPAC WHERE LOGIN =P_LOGIN  AND DATE_IMPORT   =P_DATE_IMPORT AND mot.OPTION_CONSERV_HISTO='A';
 
 --Curseur des messages d'erreurs
 CURSOR error_msg_cursor
 IS SELECT coderr, liberr FROM sys_def_erreurs WHERE codlang=P_CODLANG AND CODMOD   ='TGE'
 AND coderr  IN ('TGE00172','TGE00184','TGE00187','TGE00188','TGE00198','TGE00185','TGE00186','TGE00197','TGE00295','TGE00296','TGE00297','TGE00298','TGE00344','TGE00345');
 
 BEGIN
 /**********DEBUT TRAITEMENT ***********/
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'CTRL_CHEVAUCHEMENT_40 DEBUT '||TO_CHAR(SYSTIMESTAMP, 'DD.MM.YYYY HH24:MI:SSxFF'));
 
 /** Alimentation des erreur en memoir **/
 FOR row_err IN error_msg_cursor LOOP
 map_msg(row_err.coderr):=row_err.liberr;
 END LOOP;
 
 --get varsys CTRL_ABS_CHEVAUCH
 --IF true inserer dans Erreur ELSE inserer dans Warning
 SELECT valvar INTO varsys FROM sys_varsys WHERE module ='TGE' AND CODVAR      ='CTRL_ABS_CHEVAUCH';
 IF upper(varsys)='TRUE' THEN  typ_msg :='erreurs'; ELSE typ_msg:='warnings'; END IF;
 
 /**************************************/
 /****  LOOP sur TGE_IMPORT_ABSENCES****/
 /**************************************/
 FOR absence IN ABS_IMPORT
 LOOP
 
 dateDebutSQL                  :='';
 dateFinSQL                    :='';
 iterChev                      :=0;
 tmp_record_cursor.DATE_DEBUT  :=absence.DATE_DEBUT;
 tmp_record_cursor.DATE_FIN    :=absence.DATE_FIN;
 tmp_record_cursor.UNITE       :=absence.UNITE;
 tmp_record_cursor.HEURES_IP   :=absence.HEURES_IP;
 tmp_record_cursor.DEMI_JOURNEE:=absence.DEMI_JOURNEE;
 tmp_record_cursor.RUB_ECHANGE :=absence.RUB_ECHANGE;
 
 -- get info absence
 inf_abs  := TGE_CTRL40_GET_INFO_ABSENCE(tmp_record_cursor,dateDebutSQL , dateFinSQL);
 
 -- calculer les états de l'absence
 prop_abs_encour :=TGE_CTRL40_GET_ETATS_ABSENCE(absence.HEURES_IP, absence.DEMI_JOURNEE, inf_abs, dateDebutSQL, dateFinSQL);
 
 /* verification date absence */
 IF dateDebutSQL IS NULL THEN dateDebutSQL := '19000102'; END IF;
 IF dateFinSQL   IS NULL THEN dateFinSQL   := '20990101'; END IF;
 
 /********************************************************/
 /* Construction de la requete controle chevauchement !! */
 /********************************************************/
 ctrlWhere :='SELECT DATE_DEBUT, DATE_FIN, FIN_MA, DEBUT_MA,MOTIF , TO_CHAR(NVL(DUREE,0)) as DUREE, DEMI_JOURNEE FROM TGE_ABSENCES absence LEFT JOIN TGE_REF_PRE mot ON absence.MOTIF=mot.CODE_INCIDENT AND mot.NUMPAC=absence.NUMPAC  WHERE MATRIC='''||absence.MATRICULE||''' AND STATUT IN (select CODE from TGE_GTA_ABS_STATUTS  where EST_ABS_ACTIVE = 1) ' ;
 ctrlWhere := ctrlWhere|| 'AND ( ( TO_DATE( ' || dateDebutSQL ||','''|| C_FORMAT_DATE ||''') between DATE_DEBUT AND DATE_FIN OR TO_DATE('||dateFinSQL||','''|| C_FORMAT_DATE ||''') between DATE_DEBUT AND DATE_FIN OR DATE_DEBUT between TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') AND TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') OR  DATE_FIN  between TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') AND TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') ) AND ';
 IF prop_abs_encour.isJourneeCompleteSurUnSeulJour   =1 OR prop_abs_encour.isEnDureeSurUnSeulJour=1 OR prop_abs_encour.isJourneCompletSurPlusieurJour=1 OR prop_abs_encour.isEnDureeSurPlusieursJour=1 THEN
 ctrlWhere :=ctrlWhere||' 1=1 ';
 ELSIF prop_abs_encour.isDemiJourneeSurUnSeulJour=1  OR prop_abs_encour.estDemiJournee=1 THEN
 ctrlWhere :=ctrlWhere||' ((DEBUT_MA=''J'' AND ( ('''|| NVL(absence.heures_ip,'0') ||'''=''0.50'' AND TO_CHAR(NVL(DUREE,0))=''14400'') OR  ''0'' = NVL(DUREE,''0'')) ) OR (DEBUT_MA in (''M'',''D'',''A'')) OR (FIN_MA in (''M'',''D'',''A'')) OR DEMI_JOURNEE = ''1'')';
 ELSIF prop_abs_encour.isMatinSurUnSeulJour =1 OR prop_abs_encour.isMatinSurPlusieursJour=1 THEN --
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA IN (''D'',''J'',''M'') AND DEBUT_MA =FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' AND FIN_MA in (''M'',''J'') AND TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') <> DATE_DEBUT ) OR (DEBUT_MA=''J'' AND FIN_MA=''M'') )';
 ELSIF prop_abs_encour.isApresMidiSurUnSeulJour      =1 OR prop_abs_encour.isApresMidiSurPlusieursJour=1 THEN--
 ctrlWhere :=ctrlWhere||' (  (DEBUT_MA in (''D'',''J'',''A'') AND DEBUT_MA= FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' AND FIN_MA=''J'') OR ( DEBUT_MA IN (''A'',''J'') and FIN_MA=''M'' and TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') <> DATE_FIN ) ) ';
 ELSIF prop_abs_encour.isStatApremdAndFinitToutJourne=1 THEN
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA in(''J'',''D'',''A'') AND DEBUT_MA= FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' and FIN_MA=''J'') OR ( DEBUT_MA in (''A'',''J'') AND FIN_MA=''M'' AND TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') <> DATE_FIN ) OR ( DEBUT_MA=''M'' and FIN_MA=''M'' AND DATE_FIN >  TO_DATE( '|| dateDebutSQL||' ,'''|| C_FORMAT_DATE ||''') ) )';
 ELSIF prop_abs_encour.isStartApremidiAndFinitMatin  =1 THEN
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA IN (''J'',''D'') AND DEBUT_MA=FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR ( DEBUT_MA=''M'' AND FIN_MA=''M'' AND DATE_FIN> TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''A'' AND FIN_MA=''A'' AND DATE_DEBUT > TO_DATE( '||dateFinSql||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''A'' AND FIN_MA=''M'' AND DATE_DEBUT <> TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') and DATE_FIN <> TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''J'' AND FIN_MA=''M'' AND DATE_FIN <> TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') ) )';
 ELSIF prop_abs_encour.isStartToutJourneAndFinitMatin=1 THEN
 ctrlWhere :=ctrlWhere||' ( ( DEBUT_MA IN (''J'',''D'',''M'') AND DEBUT_MA=FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR ( DEBUT_MA =''A'' AND FIN_MA =''A''  AND DATE_DEBUT < TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA =''A'' AND FIN_MA IN (''J'',''M'') AND DATE_DEBUT <> TO_DATE('||dateFinSQL||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''J'' AND FIN_MA=''M'' ) )';
 END IF;
 ctrlWhere :=ctrlWhere||')  ORDER BY DEBUT_MA desc';
 
 
 IF NOT prop_abs_encour.erreur=1 THEN
 --parcourir les absences en cheuvauchement pour inserer les erreurs/warnings
 OPEN abs_chevauch FOR ctrlWhere;
 LOOP
 FETCH abs_chevauch INTO v_DATE_DEBUT, v_DATE_FIN, v_FIN_MA, v_DEBUT_MA, v_MOTIF, v_duree, v_DEMI_JOURNEE;
 EXIT WHEN abs_chevauch%NOTFOUND;
 

 
 IF v_DEBUT_MA='J' OR v_FIN_MA='J' THEN haveJ:=1; END IF;
 
 iterChev :=iterChev+1;
 
 -- condition qui accepte 2 demi journée
 accepte_2_demi_journee:= iterchev<2 AND (prop_abs_encour.isDemiJourneeSurUnSeulJour=1 OR prop_abs_encour.estDemiJournee=1) AND ( ((v_duree ='14400') AND v_DEBUT_MA = 'J' AND v_DEMI_JOURNEE <> 1) OR  v_DEBUT_MA IN ('M','A') OR v_FIN_MA IN ('M','A') OR (v_DEMI_JOURNEE=1 AND v_MOTIF != absence.CODE_IP));
 -- condition qui bloque la 2éme absence typé demi_journée si même motif d'absence
 type_demi_journee_meme_motif:=prop_abs_encour.estDemiJournee=1 AND v_DEMI_JOURNEE=1 AND v_MOTIF=absence.CODE_IP;
 
 -- contrôle pour ne pas dépasser 2 demi journée dans la même journée (sauf pour la durée) et qui bloque l'import d'une 2eme absnece typée demi-journée avec le même motif.
 IF firstMsg = 0 AND (not(accepte_2_demi_journee) OR type_demi_journee_meme_motif ) THEN
 msg:=map_msg('TGE00172');
 updatesql:=' update TGE_IMPORT_INCIDENTS set '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' and date_import='''||absence.date_import||''' and numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 firstMsg:=1;
 END IF;
 IF accepte_2_demi_journee THEN
 CONTINUE;
 ELSIF haveMsg2demiJr=0 AND prop_abs_encour.isDemiJourneeSurUnSeulJour=1 AND (v_DEBUT_MA  <> 'D' OR haveJ = 1)  AND iterchev>=2 THEN
 msg:=map_msg('TGE00344');
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 haveMsg2demiJr:=1;
 GOTO MAJ_TBL_IMPORT;
 ELSIF haveMsg2demiJr=1 AND prop_abs_encour.isDemiJourneeSurUnSeulJour=1 AND iterchev>=2 THEN
 CONTINUE;
 END IF;
 IF type_demi_journee_meme_motif THEN
 msg:=map_msg('TGE00345');
 msg:=regexp_replace(msg,'#',v_MOTIF,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 GOTO MAJ_TBL_IMPORT;
 END IF;
 
 --get code erreur adéquat
 IF v_DATE_DEBUT   =v_DATE_FIN THEN
 IF    v_DEBUT_MA='D' THEN cod_erreur   :='TGE00184';
 ELSIF v_DEBUT_MA='M' THEN cod_erreur   :='TGE00187';
 ELSIF v_DEBUT_MA='A' THEN cod_erreur   :='TGE00188';
 ELSIF v_DEBUT_MA='J' THEN cod_erreur   :='TGE00198';
 END IF;
 ELSE
 IF v_DEBUT_MA   ='M' THEN
 cod_erreur   :='TGE00185';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA!='M' AND v_FIN_MA!='J' THEN cod_erreur   :='TGE00186';
 ELSIF v_DEBUT_MA='J' AND v_FIN_MA!='M' THEN cod_erreur   :='TGE00197';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA='J' THEN cod_erreur   :='TGE00295';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA='M' THEN cod_erreur   :='TGE00296';
 ELSIF v_DEBUT_MA='J' AND v_FIN_MA='M' THEN cod_erreur   :='TGE00297';
 ELSIF v_DEBUT_MA='D' THEN cod_erreur   :='TGE00298';
 END IF;
 END IF;
 
 --récupèrer message d'erreur et remplacer les paramétres
 msg:=map_msg(cod_erreur);
 msg:=regexp_replace(msg,'#',v_MOTIF,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_FIN,1,1);
 
 <<MAJ_TBL_IMPORT>>
 --MAJ de l'anomalie import_absence / WARNINGS si MA=Durée
 updatesql:=' UPDATE TGE_IMPORT_INCIDENTS SET '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' AND date_import='''||absence.date_import||''' AND numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 
 END LOOP; --FIN LOOP absence chevauché
 iterChev:=0; firstMsg:=0;haveJ:=0;haveMsg2demiJr:=0;
 CLOSE abs_chevauch;
 
 ELSE
 msg :='Problem de controle de chevauchement. ';
 updatesql:=' UPDATE TGE_IMPORT_ABSENCES SET '||( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' AND date_import='''||absence.date_import||''' AND numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 END IF;
 END LOOP;--FIN LOOP import_absence
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'CTRL_CHEVAUCHEMENT_40 FIN '||TO_CHAR(SYSTIMESTAMP, 'DD.MM.YYYY HH24:MI:SSxFF'));
 
 EXCEPTION
 WHEN OTHERS THEN
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END TGE_CONTROLE_40_CHEVAUCHEMENT;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_ABSENCES
=SQL=
create or replace PROCEDURE TGE_CONTROLE_ABSENCES ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 ) AS
 /********************************************************************************
Version     : V5.05.000
*********************************************************************************/
 cNumeric_Characters varchar2(40);
 cNLS_NUMERIC_CHARACTERS varchar2(40);
 clWhereLoginDate varchar2(1000);
 clWhere varchar2(1000);
 req varchar2(2000);
 w_err VARCHAR2(2000);
 BEGIN
 SELECT TRIM(VALUE) INTO cNLS_NUMERIC_CHARACTERS FROM nls_session_parameters where PARAMETER = 'NLS_NUMERIC_CHARACTERS';
 
 clwhereLoginDate:='login='''||p_login||''' and date_import='''||P_DATE_IMPORT||'''';
 --Ajout clause incident
 clwhere:=clWhereLoginDate||' and ( exists ( (SELECT ri.CODE_INCIDENT FROM TGE_REF_PRE ri WHERE ri.numpac = ii.numpac AND  ri.OPTION_CONSERV_HISTO = ''A'' and CODE_IP=ri.CODE_INCIDENT) )OR ';
 clwhere:=clwhere||' exists (SELECT ri.CODE_INCIDENT FROM TGE_REF_PRE ri WHERE ri.numpac=''*''  and CODE_IP=ri.CODE_INCIDENT AND ri.OPTION_CONSERV_HISTO = ''A'' ';
 clwhere:=clwhere||' AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rt2 WHERE rt2.numpac=ii.numpac and  CODE_IP=rt2.CODE_INCIDENT ))) ';
 if p_numligne is not null then
 clwhere:=clwhere||' AND NUMLIGNE='||p_numligne;
 end if;
 /*Champs obligatoires*/
 --contenuMotif(p_absence.motif, arrErreurs);ToolsTge_controles.contenu(p_motif, "TGE00142", p_arrErreurs);CODE_IP
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00142',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IP is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenuDate_debut(p_absence.date_debut, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00108", new String[] {}));
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00108',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenuDate_fin(p_absence.date_fin, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00109", new String[] {}));
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00109',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where  '||clwhere||' AND DATE_FIN is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenu numpac  ToolsTge_controles.contenuNumPac(p_absence.numPac, arrErreurs); TGE00077
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /* Contrôles format */
 --controleFormatMatricule(p_absence.matric, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00089", new String[] {}));--MATRIC
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00089',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND MATRICULE is NOT NULL AND LENGTH(MATRICULE)>32';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --controleFormatMotif(p_absence.motif, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00143", new String[] {}));MOTIF
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00143',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND (CODE_IP IS NOT NULL AND LENGTH(CODE_IP) > 2)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ToolsTge_controles.controleFormatNumPac(p_absence.numPac, arrErreurs);TGE00072
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',NUMPAC,'''||p_codlang||''') where '||clwhere||' AND NUMPAC IS NOT NULL AND LENGTH(NUMPAC)>6';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /* Contrôles métier */
 --Format date fin et date
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',date_debut||''|''||date_fin,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT IS NOT NULL AND DATE_FIN IS NOT NULL '||
 ' AND  (IS_DATE(date_debut, ''YYYYMMdd'')=0 OR IS_DATE(date_fin, ''YYYYMMdd'')=0)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --date_debut> date_fin
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',date_debut||''|''||date_fin,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT IS NOT NULL AND DATE_FIN IS NOT NULL '||
 ' AND  DATE_DEBUT>DATE_FIN  AND IS_DATE(date_debut, ''YYYYMMdd'')=1 AND  IS_DATE(date_fin, ''YYYYMMdd'')=1 AND  '||clwhere;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controlePlageSiDuree: n'est pas valable puisque debut_ma ='D' et fin_ma tjrs

 --controleAbsenceInPeriodeActivite(p_absence, arrErreurs); verification de la négation "TGE00148"
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00148',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')where '||clwhere;
 req:= req || ' AND EXISTS ( SELECT 1
 FROM DIC_ADM_CONTRAT dac, dic_adm_contrat_histo dach
 WHERE dac.numpac=dach.numpac and dac.numpac=ii.numpac
 AND dac.pacmat=dach.pacmat and dac.pacmat=ii.pacmat
 AND dac.numcnt=dach.numcnt 
 AND ii.date_debut <=TO_CHAR(dach.date_sortie_sit_bo,''yyyymmdd'')
 AND ii.date_fin  > TO_CHAR(dac.dsfcn,''yyyymmdd'')
 AND dac.DSFCN<dach.DATE_SORTIE_SIT_BO)';
 EXECUTE_IMMEDIATE_STRING( req,0);

 ---controleExistenceMotif TGE00161
 req:='update TGE_IMPORT_INCIDENTS  ii  SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00161',p_codlang),'''','''''')||''',CODE_IP||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clWhereLoginDate||' AND II.CODE_IP IS NOT NULL ';
 req:= req || ' AND NOT (';
 req:= req ||   '(exists(SELECT p.CODE_INCIDENT FROM TGE_REF_PRE P WHERE p.numpac=II.numpac AND p.CODE_INCIDENT=II.CODE_IP  and II.CODE_IP= p.CODE_INCIDENT))';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT p.CODE_INCIDENT FROM TGE_REF_PRE P WHERE p.numpac=''*'' and II.CODE_IP= p.CODE_INCIDENT AND p.CODE_INCIDENT=II.CODE_IP AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rt2 WHERE rt2.numpac=II.numpac)))';
 req:= req || ')  ' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 --ToolsTge_controles.controleAutorisationMatric(p_loginOrLoginDelegator, p_absence.matric, arrErreurs);STD00014
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00014',p_codlang),'''','''''')||''',MATRICULE,'''||p_codlang||''') where '||clwhere||
 'AND MATRICULE IS NOT NULL and NOT exists (select S.MATRIC  from SECUPACMAT S, DIC_ADM_CONTRAT C where  C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT and S.MATRIC =ii.MATRICULE)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controlerMotifInAllNumPac TGE00161
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00161',p_codlang),'''','''''')||''',CODE_IP||''|''||NUMPAC,'''||p_codlang||''')';
 req:= req || ' where '||clwhereLoginDate|| ' AND MATRICULE IS NOT NULL AND NUMPAC IS NOT NULL AND (DATE_DEBUT IS NOT NULL OR DATE_FIN IS NOT NULL)';
 req:= req || ' and II.CODE_IP IS NOT NULL and exists ';
 -- Récupération de la liste des numPac pour lesquels le code incident n'existe pas
 req:= req || ' (select NUMPAC from TGE_REF_PAC where ( NUMPAC not in (select NUMPAC from TGE_REF_PRE where code_incident = ii.code_IP) and not exists (select * from TGE_REF_PRE where code_incident = ii.code_IP  and NUMPAC = ''*''))';
 req:= req || ' and NUMPAC in (select distinct C.NUMPAC from   DIC_ADM_CONTRAT C where  C.MATRIC = ii.matricule and  C.DSDCN  <= to_DATE(ii.date_debut,''YYYYMMDD'') and (C.DSFCN >= TO_DATE(ii.date_fin,''YYYYMMDD'')  or C.DSFCN is null ))'||
 ')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controle Période de recueil
 END TGE_CONTROLE_ABSENCES;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER
=SQL=
CREATE OR REPLACE PROCEDURE TGE_CREATE_TRIGGER(NOM_TABLE IN VARCHAR2)
AS
  PROC CLOB;
  v_typeTable VARCHAR(1);
  is_aller_ou_allerretour_mapta NUMBER;
  table_exist                   NUMBER;
  type_writer_exists            NUMBER;
BEGIN
  -- On teste si la table existe bien
  SELECT COUNT(*)
  INTO table_exist
  FROM user_tables
  WHERE table_name = nom_table;
  IF table_exist   > 0 THEN
    SELECT COUNT(*)
    INTO is_aller_ou_allerretour_mapta
    FROM tge_ref_mapta
    WHERE 
      tablephy = nom_table
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
        --Ajout du type 'I'
      AND allerretour                                   IN ('A', '2','I');
    IF is_aller_ou_allerretour_mapta > 0 OR nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
      -- Si la colonne TYPE_WRITER n'existe pas, on la crée
      SELECT COUNT(*)
      INTO type_writer_exists
      FROM user_tab_cols
      WHERE column_name     = 'TYPE_WRITER'
      AND table_name        = NOM_TABLE;
      IF type_writer_exists = 0 THEN
         EXECUTE_IMMEDIATE_STRING(  'ALTER TABLE ' || NOM_TABLE || ' ADD (TYPE_WRITER VARCHAR2(1 BYTE))',0);
      END IF;
      v_typeTable := fsed.getTypeTable(NOM_TABLE);
      PROC        := 'CREATE OR REPLACE TRIGGER TRG_' || NOM_TABLE || ' FOR INSERT OR UPDATE OR DELETE ON '||NOM_TABLE||' COMPOUND TRIGGER 
v_matric varchar2(32);
v_numpac varchar2(6); 
v_pacmat varchar2(8); 
v_paiezad varchar2(8);
v_type_writer varchar2(1); 
v_bypass_trigger number; 
v_bypass_DACH number; 
v1_bypass_DACH number;
TYPE periodeTabType is  table of TGE_REF_PAC.PERIODEENCOURS%TYPE ; 
periodeTab periodeTabType := periodeTabType();    
idxPeriodesIndiv NUMBER;
';
  IF nom_table='DIC_PERIODES_RECUEIL_HIS' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
   PROC :=PROC||'
    listJobMasseAsync CLOB;
    v_jobAsyncMasseIdx NUMBER;
   ';
  END IF;

      PROC := PROC||TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE, 'VAR');

      IF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
        PROC :=PROC||'
TYPE paiezadPacPeriodModifedType IS  TABLE OF TGE_PAC_PAIEZAD_PERIOD_RETRO  INDEX BY VARCHAR2(15);
paiezadPacPeriodModifed paiezadPacPeriodModifedType ;
idx  VARCHAR2(15);
';
      ELSE 
        PROC :=PROC||'
idx NUMBER;
';
      END IF;

      PROC := PROC||TGE_CREATE_TRIGGER_RETRO(NOM_TABLE, 'VAR');

      IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
        PROC          :=PROC||' 
v_listMatricToUpdate CLOB := NULL; 
v_nbMatricToUpdate NUMBER := 0;
v_countSecNav NUMBER := -1;
';
        IF nom_table   ='DIC_ADM_PERSO' THEN
          PROC        :=PROC||'
v_listMatricToDelete CLOB := NULL; 
v_nbMatricToDelete NUMBER := 0;
';
        ELSIF nom_table='DIC_ADM_CONTRAT' THEN
          PROC        :=PROC||'
v_date_debut_periode_paie DATE :=NULL; 
v_nbLig NUMBER; 
v_doMajPerso NUMBER := 0; 
TYPE NUMPAC_PACMAT_TO_DELETE IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE); 
TYPE TAB_NUMPAC_PACMAT_TO_DELETE IS TABLE OF NUMPAC_PACMAT_TO_DELETE; 
v_NUMPAC_PACMAT NUMPAC_PACMAT_TO_DELETE; 
v_TAB_NUMPAC_PACMAT TAB_NUMPAC_PACMAT_TO_DELETE; 
v_listNumpacPacmatToDelete CLOB := '','';
';
        ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
          PROC        :=PROC||'
v_nbOccForCnt number; 
v_dsdcn DIC_ADM_CONTRAT.DSDCN%TYPE; 
v_natcol DIC_ADM_CONTRAT.NATCOL%TYPE; 

TYPE paiezadTabType is table of DIC_ADM_CONTRAT_HISTO.PAIEZAD%TYPE ; 
TYPE numpacTabType is  table of DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE ; 
paiezadTab paiezadTabType := paiezadTabType(); 
numpacTab numpacTabType := numpacTabType(); 

TYPE T_TRAITEMENT_PERIODES_INDIV IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(100);
-- Ce tableau indexé contient plusieurs chose :
-- + Une entrée avec un code PAC + un PAIEZAD --> Un flag permettant de savoir si le couple NUMPAC/PAIEZAD a déjà été traité
-- + Une entrée avec un code PAC --> La période en cours du PAC
tabTrtPeriodesIndividuelles T_TRAITEMENT_PERIODES_INDIV;
in_calc_hp T_TRAITEMENT_PERIODES_INDIV;
TYPE calcHpTabType is  table of T_TRAITEMENT_PERIODES_INDIV ; 
calcHpTab calcHpTabType := calcHpTabType();
 
TYPE T_COMPARAISON_VAL_OLD_NEW IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(20);
tabValToCompare T_COMPARAISON_VAL_OLD_NEW;
TYPE PRESENTDIC_PACMAT IS RECORD 
(NUMPAC  varchar2(6),PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE);
TYPE TAB_PRESENTDIC_PACMAT IS TABLE OF PRESENTDIC_PACMAT INDEX BY VARCHAR2(14);
indexTabPresFicPacmat varchar2(14);
tabPresenceFichierPacmat TAB_PRESENTDIC_PACMAT;
alimPeriodesIndiv boolean;
';
        END IF;
        IF nom_table='DIC_ADM_CONTRAT' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
          PROC     :=PROC||'
v_actionIdx VARCHAR2(1);
v_lanceRecalculHp boolean;
v_isDeleting  NUMBER ;
v_jobIdx NUMBER;
v_cle_idx_contrat T_CLE_IDX_CONTRAT_HISTO; 
v_cles_idx_contrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
';
        END IF;
        IF nom_table='DIC_ADM_PERSO' OR nom_table='DIC_ADM_CONTRAT' THEN
          PROC     :=PROC||'
v_matricForPacmat VARCHAR2(32); 
TYPE T_LOCKED_MATRIC IS TABLE OF VARCHAR2(1) INDEX BY VARCHAR2(32);
tabLockedMatric T_LOCKED_MATRIC;
';
        END IF;
      END IF;

      PROC := PROC||TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE, 'VAR');

      IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
        PROC      :=PROC||' 
BEFORE STATEMENT IS BEGIN
 select count(*) into v_bypass_DACH from bypass_trg_DACH_on_session;
END BEFORE STATEMENT;
';
      END IF;

      PROC        := PROC || '  
BEFORE EACH ROW IS BEGIN
' ;
      IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
        PROC      := PROC || ' IF (v_bypass_DACH > 0) THEN null; else ';
      END IF;

      PROC          := PROC || ' 
if (v_bypass_trigger > 0) then 
 v_type_writer := ''N''; 
else 
 IF DELETING THEN 
  v_type_writer :=NVL(:old.type_writer,''O''); 
 ELSE 
  v_type_writer :=NVL(:NEW.type_writer,''O''); 
  -- On remet TYPE_WRITER à NULL pour qu''il ne soit pas considéré comme ''N'' lors des futurs update n''incluant pas cette colonne 
  :NEW.type_writer := NULL; 
 END IF; 
END IF; 
v_matric := NVL(:NEW.MATRIC,:OLD.MATRIC);
';

      IF v_typeTable = 'z' THEN
        PROC := PROC||' 
v_numpac := nvl(:NEW.numpac,:OLD.numpac); 
v_paiezad := nvl(:NEW.paiezad,:OLD.paiezad); ';
      ELSIF v_typeTable='p' THEN
        PROC := PROC||' 
v_numpac := nvl(:NEW.numpac,:OLD.numpac); 
v_pacmat := nvl(:NEW.pacmat,:OLD.pacmat); ';
      END IF;

      IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
        PROC      := PROC || '
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND v_countSecNav=-1 THEN
 SELECT COUNT(*) INTO v_countSecNav FROM SECUPACMAT_TMP WHERE MATRIC=''SECNAV'';
 IF v_countSecNav>0 THEN
  RAISE_APPLICATION_ERROR(-20000,''CODERR=GENREC03'');
 END IF;
END IF;
';
      END IF;

      IF nom_table ='DIC_ADM_PERSO' OR nom_table ='DIC_ADM_CONTRAT' THEN
        -- On récupère le MATRIC et on teste si on l'a déjà traité
        PROC      := PROC || ' 
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND NOT tabLockedMatric.exists(v_matric) THEN';

        -- En cas de modification de DAP, on lock les tables qui la mette à jour par trigger (DAPH, DAC, DACS et DACH)
        -- En cas de modification de DAC, on lock les tables qui la mette à jour par trigger (DACS et DACH)
        IF nom_table ='DIC_ADM_PERSO' THEN
          -- DAPH et DAC uniquement pour DAP
          PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_PERSO_HISTO SET MATRIC=MATRIC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
        END IF;
        
        -- DACs et DACH uniquement pour les 2 (DAP et DAC)
        PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_CONTRAT_SITU SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd'') WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT_HISTO SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
        

        -- On stocke le MATRIC pour indiquer qu'on l'a déjà traité
        PROC      := PROC || ' 
tabLockedMatric(v_matric) := ''O'';
END IF;';

      END IF;

      IF nom_table   ='DIC_ADM_PERSO' THEN
        PROC        :=PROC||TRG_PERSO_BEFORE_ROW();
      ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
        PROC        :=PROC||TRG_PERSO_HISTO_BEFORE_ROW();
      ELSIF nom_table='DIC_ADM_CONTRAT' THEN
        PROC        :=PROC||TRG_CONTRAT_BEFORE_ROW();
      ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
        PROC        :=PROC||TRG_CONTRAT_HISTO_BEFORE_ROW();
      END IF;

      IF is_aller_ou_allerretour_mapta > 0 THEN
        PROC := PROC||TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE);
      END IF;

      IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
        PROC      := PROC || '
END IF ;
';
      END IF;

      PROC := PROC||TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE);

      PROC :=PROC||' 
      END BEFORE EACH ROW;';
      IF nom_table IN ('DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
        PROC      :=PROC||' AFTER EACH ROW IS BEGIN ';
        IF nom_table   = 'DIC_ADM_CONTRAT_HISTO' THEN
          PROC      := PROC|| TRG_CONTRAT_HISTO_AFTER_ROW();
        ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
          PROC      := PROC|| DIC_PERIOD_REC_HISTO_AFTER_ROW();
        END IF;
        PROC      :=PROC||' END AFTER EACH ROW;';
      END IF;
      IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
        PROC          :=PROC||' AFTER STATEMENT IS BEGIN';
        IF nom_table   ='DIC_ADM_PERSO' THEN
          PROC        :=PROC||TRG_PERSO_AFTER_STMNT();
        ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
          PROC        :=PROC||TRG_PERSO_HISTO_AFTER_STMNT();
        ELSIF nom_table='DIC_ADM_CONTRAT' THEN
          PROC        :=PROC||TRG_CONTRAT_AFTER_STMNT();
        ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
          PROC        :=PROC||TRG_CONTRAT_HISTO_AFTER_STMNT();
        ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
          PROC        :=PROC||DIC_PERIODES_REC_H_AFTER_STMNT();
        END IF;
        PROC:=PROC||'END AFTER STATEMENT;';
      END IF;
      PROC :=PROC||' END TRG_'||NOM_TABLE||';';
      EXECUTE_IMMEDIATE_STRING( PROC,0);
    END IF;
  END IF;
END TGE_CREATE_TRIGGER;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_30
=SQL=
create or replace PROCEDURE TGE_IMPORT_30
(
    P_LOGIN       IN VARCHAR2 ,
    P_DATE_IMPORT IN VARCHAR2 ,
    P_ROLE        IN VARCHAR2 ,
    -- Origine écran
    P_ORIGINE     IN VARCHAR2 ,
    P_VALIDATION  IN VARCHAR2 ,
    P_WITH30      IN VARCHAR2 ,
    P_CODLANG     IN VARCHAR2,
    -- Valeurs attendues : EC -> écran création, EM -> écran modification, GAP -> création en sous-marin, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
    P_TYPE_ACTION IN VARCHAR2 ,
    P_DATE_MAJ    IN SYS_TRC_MODIF.DATEMAJ%type )
AS
  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  req CLOB;
  reqvalues CLOB;
  reqInsert CLOB;
  dateMaj SYS_TRC_MODIF.datemaj%type;
BEGIN
  v_start       := DBMS_UTILITY.GET_TIME;
  IF P_DATE_MAJ IS NULL THEN
    SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
  ELSE
    dateMaj:= P_DATE_MAJ;
  END IF;
  IF ( P_WITH30 =1) THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
      TGE_CONTROLE_30 (p_login, p_date_import, NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_30 - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
  END IF;
  IF p_validation = 1 THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion TGE_ELEMENTS_PAIE');
      INSERT
      INTO TGE_ELEMENTS_PAIE
        (
          NUMPAC ,
          PAIEZAD ,
          PERIODE ,
          TYPE_TRAITEMENT ,
          CODE_ELEMENT ,
          INDICATIF ,
          ORIGINE ,
          SENS ,
          VALEUR ,
          DERNIER_CODE_OPE ,
          LOGIN_MAJ ,
          DATE_MAJ ,
          CLE_IMPORT ,
          IDPACMAT,
          type_writer,
          CODE_REMPLACEMENT,
          DATE_EFFET,
         ACTION_RETRO,
         ACTION_RETRO_DATE
        )
      SELECT E.NUMPAC ,
        PAIEZAD ,
        PERIODE ,
        TYPE_TRAITEMENT ,
        CODE_ELEMENT ,
        UPPER (NVL(INDICATIF,'*')) AS INDICATIF,
        ORIGINE ,
        SENS ,
        VALEUR ,
        'C' ,
        p_login ,
        TO_CHAR (sysdate, 'YYYYMMDDHH24MI') ,
        CASE
          WHEN 'VI' = P_TYPE_ACTION
          THEN P_LOGIN
            ||'#'
            ||P_DATE_IMPORT
            ||'#'
            ||NUMLIGNE
          ELSE NULL
        END AS CLE_IMPORT,
        CASE
          WHEN E.NUMPAC IS NOT NULL
          AND PACMAT    IS NOT NULL
          THEN RPAD(E.NUMPAC,6)
            || PACMAT
          ELSE ' '
        END AS IDPACMAT,
        CASE
          WHEN (SELECT O.MODE_T2
              ||'#'
              ||O.ENVOI_MODE_R
            FROM TGE_REF_ORIGINE_GTA O
            WHERE O.NUMPAC     = E.NUMPAC
            AND O.CODE_ORIGINE = E.ORIGINE) = 'R#N'
          THEN 'N'
          ELSE NULL
        END AS TYPE_WRITER,
        NVL(E.CODE_REMPLACEMENT,'*') AS CODE_REMPLACEMENT,
        TO_DATE(E.DATE_EFFET,'YYYYMMDD') AS DATE_EFFET,
        -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
        -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
        -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
        case
        	when  E.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = E.NUMPAC)
         	then '*'
         	else NULL
        end as ACTION_RETRO,
        NULL as ACTION_RETRO_DATE
                             
      FROM TGE_IMPORT_ELEMENTS E
      WHERE LOGIN           =P_LOGIN
      AND CODE_ELEMENT NOT IN ('B690','B691')
      AND DATE_IMPORT       = p_date_import
      AND ((ERREURS        IS NULL
      AND STATUT            = 'TRAIT')
      OR (ERREURS          IS NOT NULL
      AND STATUT            = 'TRANS'));
      
      -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
      update TGE_ELEMENTS_PAIE set 
      	ACTION_RETRO = 'C',
      	ACTION_RETRO_DATE = DATE_MAJ
      where ACTION_RETRO = '*';
      
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  ' ||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidElement - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH' or SQLCODE=-20001) THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
    
    IF P_TYPE_ACTION = 'VI' THEN
      --- Gestion de la trace : on enregistre une trace généréale lors d'un import car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_ELEMENTS_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_ELEMENT_PAIE', 'CARTE=30&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Batch/Web 30','C',NULL,NULL,NULL,NULL);
    ELSIF P_TYPE_ACTION = 'MP' THEN
    	--- Gestion de la trace : on enregistre une trace généréale lors d'une saisie depuis la Market Place car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_ELEMENTS_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_ELEMENT_PAIE_MP', 'LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Market Place 30','C',NULL,NULL,NULL,NULL);
    END IF;
    
    -- Mise à jour de la column RETRO_GC de la table TGE_PERIODE_RECUEIL_PAIEZAD
    -- si la "full" rétroactivité n'est pas activé sur le pac
    UPDATE TGE_PERIODE_RECUEIL_PAIEZAD R
    SET R.RETRO_GC =
      (SELECT E.VALEUR
      FROM TGE_ELEMENTS_PAIE E
      WHERE R.NUMPAC     = E.NUMPAC
      AND R.PAIEZAD      = E.PAIEZAD
      AND R.MOIS_PAIE    = E.PERIODE
      AND E.CODE_ELEMENT = 'WG96'
      )
    WHERE (R.NUMPAC, R.PAIEZAD, R.MOIS_PAIE) IN
      (SELECT e2.numpac,
        e2.paiezad,
        e2.periode
      FROM TGE_IMPORT_ELEMENTS E2
      WHERE e2.login     = P_LOGIN
      AND e2.date_import = p_date_import
      AND ((e2.ERREURS  IS NULL
      AND e2.STATUT     IN ('TRAIT','FIN'))
      OR (e2.ERREURS    IS NOT NULL
      AND e2.STATUT      = 'TRANS'))
      AND EXISTS (SELECT 'ACTIVE_RETRO_GC'
	 	FROM TGE_REF_PAC
	 	WHERE NUMPAC = e2.NUMPAC
	 		AND (DEB_RETRO IS NULL OR DEB_RETRO > e2.periode)
	 	)
      );
    ----------------------------------------------------------------------------
    
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_ELEMENTS');
    -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   	UPDATE TGE_IMPORT_ELEMENTS
   	SET STATUT ='TRANS'
   	WHERE LOGIN = P_LOGIN
   	AND DATE_IMPORT = p_date_import
   	AND (ERREURS IS NOT NULL
   	AND STATUT = 'TRAIT')
   	AND CODE_ELEMENT NOT IN ('B690','B691');
	
   	-- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
    UPDATE TGE_IMPORT_ELEMENTS
    SET STATUT ='FIN'
    WHERE LOGIN = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND ERREURS IS NULL
    AND CODE_ELEMENT NOT IN ('B690','B691');
       
    -- Suppression des lignes dans dans DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début DELETE FROM dic_tge_imputations_perm');
    DELETE
    FROM DIC_TGE_IMPUTATIONS_PERM A
    WHERE (A.NUMPAC,A.PAIEZAD) IN
      (SELECT B.NUMPAC,
        B.paiezad
      FROM TGE_IMPORT_ELEMENTS B
      WHERE B.CODE_ELEMENT >='B690'
      AND B.CODE_ELEMENT   <='B691'
      AND B.CODE_ELEMENT   IS NOT NULL
      AND B.ERREURS        IS NULL
      AND B.DATE_IMPORT     = p_date_import
      AND B.LOGIN           = P_LOGIN
      GROUP BY LOGIN,
        NUMPAC,
        PAIEZAD,
        DATE_IMPORT,
        INDICATIF
      HAVING COUNT(DISTINCT B.CODE_ELEMENT ) >1
      ) ;
    -- Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE');
    FOR b_numpac IN
    (SELECT DISTINCT numpac
    FROM TGE_IMPORT_ELEMENTS
    WHERE LOGIN       = P_LOGIN
    AND DATE_IMPORT   = p_date_import
    AND ERREURS      IS NULL
    AND code_ELEMENT IN ('B690','B691')
    )
    LOOP
      req      :='insert into DIC_TGE_IMPUTATIONS_PERM p(numpac,paiezad,MATRIC,pacmat';
      reqInsert:='select numpac,paiezad,MATRICULE,pacmat,';
      reqvalues:= ' from (select numpac,paiezad,MATRICULE,pacmat,code_element||''#''||indicatif as el, valeur';
      reqvalues:= reqvalues|| ' from TGE_IMPORT_ELEMENTS b where login='''||p_login||''' and date_import='''||P_DATE_IMPORT||''' and code_element in (''B690'',''B691'')  )';


      reqvalues:= reqvalues|| '  pivot (max(valeur)   for(el) in (';
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion DIC_TGE_IMPUTATIONS_PERM');
      FOR cur IN
      (SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     =b_numpac.numpac
      UNION
      SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     ='*'
      )
      LOOP
        req           :=req||','||cur.DONNEEGXP;
        reqvalues     := reqvalues||''''||cur.element||'#'||cur.occurence ||''' as '|| cur.DONNEEGXP||',';
        IF cur.element ='B690' THEN
          reqInsert   := reqInsert||cur.DONNEEGXP ||',';
        ELSE
          reqInsert:= reqInsert||' IS_NUMBER(replace('||cur.DONNEEGXP ||','','',''.'')) as '||cur.DONNEEGXP ||' ,';
        END IF;
        IF P_LOGIN = 'BATCH' THEN
          SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPUTATION_PAIE', 'CARTE=30&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE||'&ELEMENT='||cur.element||'&DONNEEGXP='||cur.DONNEEGXP, 'Import Batch 30 B690/B691','C',NULL,NULL,NULL,NULL);
        END IF;
      END LOOP;
      reqvalues:= SUBSTR(reqvalues,1,LENGTH(reqvalues)-1)||'))  ';
      reqvalues:= reqvalues|| ' b where   exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||'''  and c.date_import='''||P_DATE_IMPORT||'''  and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B690''   and ERREURs is  null)
      and  exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||''' and c.date_import='''||P_DATE_IMPORT||''' and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B691''  and ERREURs is  null) ';
      reqInsert:= SUBSTR(reqInsert,1,LENGTH(reqInsert)-1);
      req      :=req||')  ';
      req      :=req||reqInsert|| reqvalues;
       EXECUTE_IMMEDIATE_STRING( req,0);
    END LOOP;
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
    UPDATE TGE_IMPORT_LISTE
    SET NBLIGNES_ERR =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      AND ERREURS    IS NOT NULL
      ),
      NBLIGNES_IMP =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      ),
      STATUT        ='TRANS'
    WHERE LOGIN     = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND TYPE        = 2;
    -- Inscription en recyclage
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Inscription en recyclage');
  END IF;
END TGE_IMPORT_30;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : VI -> pour la validation des imports Web ou Batch, MP -> pour la validation depuis le Market Place
 P_TYPE_ACTION IN VARCHAR2)
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 doRollback boolean;
 desactiveTraitements   VARCHAR2(1000);

 BEGIN
 doRollback:=false;
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début');
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = C.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 and A.ERREURS is null
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 and a.erreurs is null
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then 
  doRollback:=true;
  GOTO end_proc;
 end if ; 
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, P_TYPE_ACTION );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 if(SQLCODE='-20001') then 
   doRollback:=true;
   GOTO end_proc;
  end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 -- activer ou non les nouveaux traitements de l'import 3040
 select NVL(upper(VALVAR), ' ') into desactiveTraitements from sys_varsys where module='STD' and codvar='DESACTIVE_TRAITEMENTS_IMPORT_3040';
 IF INSTR(desactiveTraitements, 'TGE_CONTROLE_40_CHEVAUCHEMENT') < 1 THEN
	 --controle chevauchement
	 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 END IF;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT,
 ORIGINE,
 CODE_IMPUTATION
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT,
 ABSENCES.ORIGINE,
 ABSENCES.CODE_IMPUTATION
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT,
  INCI.origine AS ORIGINE,     --origine 
  CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation-- code_imputation
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ,
 TGE_REF_ORIGINE_GTA
 WHERE ABSENCES.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND ABSENCES.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20000') then 
  doRollback:=true;
  GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 IF INSTR(desactiveTraitements, 'TGE_REGROUPE_ABS') < 1 THEN
 	-- Regroupement des absences importé
 	TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 END IF;
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_LISTE');
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 5;
 
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_ANNULATION');
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 0;
 
 
 
 END IF;
 END IF ;

 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 <<end_proc>> 
 if(doRollback) then
  ROLLBACK;
  if(P_WITH30=1) then
    UPDATE TGE_IMPORT_ELEMENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
    end if;
  if(P_WITH40=1) then
    UPDATE TGE_IMPORT_INCIDENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
  end if;
  if(P_WITH60=1 or P_WITH70=1) then
  UPDATE TGE_IMPORT_DONNEES
  SET ERREURS =TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
  WHERE LOGIN      = P_LOGIN
  AND DATE_IMPORT  = p_date_import ;
  
  end if;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Rollback de l''import suite à une détection d''un traitement de paie en cours.');
  FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , 'Une paie est en cours d''exécution.' );
 
  end if;

 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_6070
=SQL=
create or replace PROCEDURE TGE_IMPORT_6070 
(
  P_LOGIN IN VARCHAR2 
, P_DATE_IMPORT IN VARCHAR2 
, P_ROLE IN VARCHAR2 -- pour les traces
  -- Origine écran
, P_ORIGINE IN VARCHAR2  -- pour les traces
, P_VALIDATION IN VARCHAR2 
, P_WITH60 IN VARCHAR2 
, P_WITH70 IN VARCHAR2 
, P_CODLANG IN VARCHAR2 
-- Valeurs attendues : EC -> écran création, EM -> écran modification, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
, P_TYPE_ACTION IN VARCHAR2
) AS 

  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  dateMaj SYS_TRC_MODIF.datemaj%type;
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
 IF  ( P_WITH60 =1  OR P_WITH70 = 1) THEN
    BEGIN
      TGE_CONTROLE_DONNEE_PAIE (p_login,p_date_import,NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_DONNEE_PAIE - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
  	    raise;
  	  END IF;
    END ;
 END IF;
 IF p_validation = 1 THEN
   BEGIN
   	 INSERT INTO TGE_DONNEES_PAIE (NUMPAC                 ,
                                 PAIEZAD                    ,
                                 PERIODE                    ,
                                 TYPE_TRAITEMENT            ,
                                 TYPE_DONNEE                ,
                                 CODE_RUBRIQUE              ,
                                 CODE_CAISSE                ,
                                 NO_SEQUENCE                ,
                                 SENS                       ,
                                 CODE_IMPUTATION            ,
                                 ORIGINE                    ,
                                 NOMBRE                     ,
                                 TAUX                       ,
                                 MONTANT                    ,
                                 POURCENTAGE                ,
                                 DOMAINE_PRCTE              ,
                                 DERNIER_CODE_OPE           ,
                                 LOGIN_MAJ                  ,
                                 DATE_MAJ                   ,
                                 CLE_IMPORT                 ,
                                 IDPACMAT                   ,
                                 PERIODE_RATTACH_DEB        ,
                                 PERIODE_RATTACH_FIN        ,
                                 DATE_DEB_ARRET             ,
                                 PERIODE_AFFECTATION        ,
                                 TYPE_WRITER                ,
                                 CODE_REMPLACEMENT			,
                                 DATE_EFFET           		,
                                 ACTION_RETRO				,
                                 ACTION_RETRO_DATE
                                 )
                                 
              SELECT                   DONNEES.NUMPAC,
                                       DONNEES.PAIEZAD,
                                       DONNEES.PERIODE,
                                       DONNEES.TYPE_TRAITEMENT,
                                       DONNEES.TYPE_DONNEE,
                                       DONNEES.CODE_RUBRIQUE,
                                       DONNEES.CODE_CAISSE,
                                       is_number(DONNEES.NO_SEQUENCE+DONNEES.CMPT),
                                       DONNEES.SENS,
                                       DONNEES.CODE_IMPUTATION,
                                       DONNEES.ORIGINE,
                                       is_number(DONNEES.NOMBRE),
                                       is_number(DONNEES.TAUX),
                                       is_number(DONNEES.MONTANT),
                                       is_number(DONNEES.POURCENTAGE),
                                       DONNEES.DOMAINE_PRCTE,
                                       DONNEES.DERNIER_CODE_OPE,
                                       DONNEES.LOGIN_MAJ,
                                       DONNEES.DATE_MAJ,
                                       DONNEES.CLE_IMPORT,
                                       DONNEES.IDPACMAT,
                                       DONNEES.PERIODE_RATTACH_DEB,
                                       DONNEES.PERIODE_RATTACH_FIN,
                                       DONNEES.DATE_DEB_ARRET,
                                       DONNEES.PERIODE_AFFECTATION,
                                       DONNEES.TYPE_WRITER,
                                       DONNEES.CODE_REMPLACEMENT,
                                       DONNEES.DATE_EFFET,
                                       DONNEES.ACTION_RETRO,
                                       DONNEES.ACTION_RETRO_DATE
              FROM    
              (SELECT            dense_rank() over (partition by tg.NUMPAC,tg.PAIEZAD,tg.PERIODE,tg.TYPE_TRAITEMENT,tg.TYPE_DONNEE,tg.CODE_RUBRIQUE,tg.CODE_CAISSE order by tg.NUMLIGNE desc)  as CMPT,     
                                 TG.NUMPAC,
                                 TG.PAIEZAD,
                                 TG.PERIODE,
                                 TG.TYPE_TRAITEMENT,
                                 TG.TYPE_DONNEE ,
                                 TG.CODE_RUBRIQUE,
                                 NVL(TG.CODE_CAISSE,'*') AS CODE_CAISSE,
                            (select NVL(max(tp.no_sequence),0 )
                             from TGE_DONNEES_PAIE tp
                             where tp.NUMPAC=tg.NUMPAC
                             AND tp.PAIEZAD=tg.PAIEZAD
                             AND tp.PERIODE =tg.PERIODE
                             AND tp.TYPE_TRAITEMENT =tg.TYPE_TRAITEMENT
                             AND tp.TYPE_DONNEE = tg.TYPE_DONNEE
                             AND tp.CODE_RUBRIQUE =tg.code_rubrique
                             AND tp.CODE_CAISSE=NVL(tg.code_caisse,'*')) AS no_sequence,
                             TG.SENS,
                             TG.CODE_IMPUTATION,
                             TG.ORIGINE,
                             TG.NOMBRE                     ,
                             TG.TAUX                       ,
                             TG.MONTANT                    ,
                             TG.POURCENTAGE                ,
                             TG.DOMAINE_PRCTE              ,
                             'C'  AS   DERNIER_CODE_OPE ,
                             P_LOGIN AS LOGIN_MAJ,
                             TO_CHAR (sysdate, 'YYYYMMDDHH24MI') AS DATE_MAJ,
                             -- Pour les DV/DR, on va stocker une clé d'import même lorsque l'on vient de l'écran
                             -- afin de pouvoir retrouver la ligne créée et le no_sequence (pour les traces)
                             P_LOGIN||'#'||P_DATE_IMPORT||'#'||NUMLIGNE AS CLE_IMPORT,
                             CASE
                               WHEN TG.NUMPAC IS NOT NULL
                               AND TG.PACMAT  IS NOT NULL
                               THEN RPAD(TG.NUMPAC,6)|| TG.PACMAT
                               ELSE ' '
                             END AS IDPACMAT,
                             to_date(TG.PERIODE_RATTACH_DEB, 'YYYYMMDD') as PERIODE_RATTACH_DEB,
                             to_date(TG.PERIODE_RATTACH_FIN, 'YYYYMMDD') as PERIODE_RATTACH_FIN,
                             to_date(TG.DATE_DEB_ARRET, 'YYYYMMDD') as DATE_DEB_ARRET,
                             to_date(TG.PERIODE_AFFECTATION, 'YYYYMMDD') as PERIODE_AFFECTATION,
                             case 
                               when (select O.MODE_T2||'#'||O.ENVOI_MODE_R from TGE_REF_ORIGINE_GTA O where O.NUMPAC = TG.NUMPAC and O.CODE_ORIGINE = TG.ORIGINE) = 'R#N'
      						   then 'N'
      						   else NULL
                             end as TYPE_WRITER,
                             TG.CODE_REMPLACEMENT,
                             to_date(TG.DATE_EFFET,'YYYYMMDD') as DATE_EFFET,
                             -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
                             -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
                             -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
                             case
                             	when  TG.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = TG.NUMPAC)
                             	then '*'
                             	else NULL
                             end as ACTION_RETRO,
                             NULL as ACTION_RETRO_DATE
                             
          FROM               TGE_IMPORT_DONNEES  TG
          WHERE              TG.LOGIN            = P_LOGIN 
          AND                TG.DATE_IMPORT      = P_DATE_IMPORT
          AND ((TG.ERREURS   IS NULL
          AND TG.STATUT  = 'TRAIT')
          OR (TG.ERREURS  IS NULL
          AND TG.STATUT   = 'TRANS')))DONNEES;
          
          -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
          update TGE_DONNEES_PAIE set 
          	ACTION_RETRO = 'C',
          	ACTION_RETRO_DATE = DATE_MAJ
          where ACTION_RETRO = '*';
   END ;
   
   IF P_TYPE_ACTION = 'VI' THEN
     --- Gestion de la trace : on enregistre une trace généréale lors d'un import car on ne peut pas gérer de trace individuelle
     TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT, 'Trace SYS_TRC_MODIF : insertion TGE_DONNEES_PAIE');
     SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_DONNEE_ELT_PAIE', 'CARTE=60/70&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
       'Import Batch/Web 60/70','C',null,null,null,null);
   ELSIF P_TYPE_ACTION = 'MP' THEN
    	--- Gestion de la trace : on enregistre une trace généréale lors d'une saisie depuis la Market Place car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_DONNEES_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_DONNEE_ELT_PAIE', 'LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Market Place 60/70','C',NULL,NULL,NULL,NULL);
   END IF;
   
   TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_DONNEES');
   -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT = 'TRANS'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND (ERREURS IS NOT NULL
   AND STATUT = 'TRAIT');
	 
   -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT ='FIN'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND ERREURS IS NULL;
   
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
	-- DV
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '1'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '1'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '1';
	-- DR
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '3'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '3'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '3';
	-- DR Cotis
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '4'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '4'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '4';
   
 END IF ;
EXCEPTION
  WHEN OTHERS THEN
  w_err := ' '||w_err|| sqlerrm;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidDonneePaie - Erreur : ' || w_err);
  IF (P_LOGIN != 'BATCH' or SQLCODE='-20001') THEN
  	-- On remonte l'erreur à l'application
    raise;
  END IF;
END TGE_IMPORT_6070;
## 
TAG_CHARSET=@€éèç 
##
TGE_REGROUPE_ABS
=SQL=
CREATE OR REPLACE PROCEDURE TGE_REGROUPE_ABS(
    P_CLE_IMPORT IN VARCHAR2)
AS
BEGIN

	if (P_CLE_IMPORT like 'BATCH#%') THEN
		SYS_RECALCUL_STATS('TGE_ABSENCES');
		SYS_RECALCUL_STATS('TGE_INCIDENTS_PAIE');
	END IF;

  /*
  * Etape 1
  * Mise à jour des date de fin des absences pouvant être regroupé
  *
  */
  MERGE INTO TGE_ABSENCES USING
  (SELECT DISTINCT 
 	(SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND INC2.ORIGINE = TB1.ORIGINE AND INC2.CODE_IP = TB1.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE,
 	NEW_DATE_FIN,ORIGINE
 FROM (SELECT  NUMPAC,
    PAIEZAD,
    CODE_IP,
    MIN(d) NEW_DATE_DEBUT,
    MAX(d) NEW_DATE_FIN,
    ORIGINE
  FROM
    (SELECT INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.ORIGINE ,
      INC.DATE_EFFET d,  
      ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP, INC.ORIGINE, INC.DATE_EFFET) i
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ORIGINE = INCHP.ORIGINE
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
    substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP     != 'HP'
    AND INC.CLE_ABSENCE IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES        = ''
    OR (INC.HEURES      >= INCHP.HEURES)
    OR (PRE.UNITE        = 'J'
    AND INC.HEURES      >= 1))
    GROUP BY INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.ORIGINE,
      INC.DATE_EFFET
    )
  GROUP BY NUMPAC,
    PAIEZAD,
    CODE_IP,
    ORIGINE	,
    (d-i)
   
  )TB1) TB ON (TGE_ABSENCES.ID = TB.CLE_ABSENCE and TGE_ABSENCES.ORIGINE = TB.ORIGINE)
WHEN MATCHED THEN
  UPDATE SET TGE_ABSENCES.DATE_FIN = TB.NEW_DATE_FIN;
  /*
  * Etape 2
  * Suppresion des absences pouvant être regroupé
  *
  */
  DELETE
  FROM TGE_ABSENCES
  WHERE
  substr(REGEXP_REPLACE(TGE_ABSENCES.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND exists
    (SELECT 1
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP         != 'HP'
    AND INC.CLE_ABSENCE     IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES            = ''
    OR (INC.HEURES          >= INCHP.HEURES)
    OR (PRE.UNITE            = 'J'
    AND INC.HEURES          >= 1))
    AND NOT exists (select 1 from 
      (SELECT  
 (SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND INC2.ORIGINE = TB1.ORIGINE AND TB1.CODE_IP = INC2.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE
 FROM (SELECT 
      NUMPAC,
      PAIEZAD,
      CODE_IP,
      MIN(d) NEW_DATE_DEBUT,
      ORIGINE  
      FROM
        (SELECT INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET d,
          INC.ORIGINE ,
          ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP,INC.ORIGINE,INC.DATE_EFFET) i
        FROM TGE_INCIDENTS_PAIE INC
        LEFT JOIN TGE_INCIDENTS_PAIE INCHP
        ON INC.NUMPAC      = INCHP.NUMPAC
        AND INC.PAIEZAD    = INCHP.PAIEZAD
        AND INC.DATE_EFFET = INCHP.DATE_EFFET
        AND INC.ID        != INCHP.ID
        AND INCHP.CODE_IP  = 'HP'
		AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        INNER JOIN TGE_REF_PRE PRE
        ON INC.NUMPAC   = PRE.NUMPAC
        AND INC.CODE_IP = PRE.CODE_INCIDENT
        WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        AND INC.CODE_IP     != 'HP'
        AND INC.CLE_ABSENCE IS NOT NULL
        AND (nvl(INC.HEURES,'0') = '0'
        OR INC.HEURES        = ''
        OR (INC.HEURES      >= INCHP.HEURES)
        OR (PRE.UNITE        = 'J'
        AND INC.HEURES      >= 1))
        GROUP BY INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET,
          INC.ORIGINE
        )
      GROUP BY NUMPAC,
        PAIEZAD,
        CODE_IP,
        (d-i),
        ORIGINE
      )TB1) tb2 where inc.cle_absence = tb2.cle_absence) 
       and TGE_ABSENCES.ID = INC.CLE_ABSENCE
    );
  /*
  * Etape 3
  * Mise à jour des clé absences des incidents paie liée a des absences ayant été regroupé
  *
  */
  MERGE INTO TGE_INCIDENTS_PAIE USING
  (SELECT DISTINCT INC.ID AS ID,
    MIN(ABS.ID)       AS CLE
  FROM TGE_INCIDENTS_PAIE INC
  INNER JOIN DIC_ADM_CONTRAT_SITU S
  ON S.NUMPAC   = INC.NUMPAC
  AND S.PAIEZAD = INC.PAIEZAD
  AND INC.DATE_EFFET BETWEEN S.DSDSC AND S.DSFSC
  INNER JOIN TGE_ABSENCES ABS
  ON ABS.MATRIC   = S.MATRIC
  AND INC.CODE_IP = ABS.MOTIF
  AND INC.DATE_EFFET BETWEEN ABS.DATE_DEBUT AND ABS.DATE_FIN
  AND INC.ORIGINE = ABS.ORIGINE
  WHERE NOT EXISTS
    (SELECT 1 FROM TGE_ABSENCES WHERE ID = INC.CLE_ABSENCE
    )
  AND substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
  AND substr(REGEXP_REPLACE(ABS.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND INC.CLE_ABSENCE            IS NOT NULL
  GROUP BY INC.ID
  ) TB ON ( TGE_INCIDENTS_PAIE.ID = TB.ID)
WHEN MATCHED THEN
  UPDATE SET TGE_INCIDENTS_PAIE.CLE_ABSENCE = TB.CLE;
END TGE_REGROUPE_ABS;
##
TAG_CHARSET=@€éèç
##
SYS_STATS_REST_API_DELAY_SEQUENCE
=SQL IF_SEQUENCE_NOTEXIST=SYS_STATS_REST_API_DELAY_SEQUENCE=
CREATE SEQUENCE SYS_STATS_REST_API_DELAY_SEQUENCE  START WITH 1  INCREMENT BY 1 NOCACHE NOCYCLE
##
TAG_CHARSET=@€éèç
##
TRG_TGE_DONNEES_PAIE
=SQL=
create or replace trigger trg_tge_donnees_paie FOR
  insert or
  update or
  delete on tge_donnees_paie COMPOUND TRIGGER
  
  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  V_CODE_RUBRIQUE    varchar2(6);
  V_OPTION_RETRO     varchar2(1);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac       := nvl(:new.numpac, :old.numpac);
    v_paiezad      := nvl(:new.paiezad, :old.paiezad);
    
    BEGIN
	    SELECT t.pacmat,nvl(t.periode_recyclage,'1'),CODE_CHRONO
	    INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
	    from dic_adm_contrat_situ d, secupacmat t
	    where d.numpac = v_numpac 
	    and d.paiezad  = v_paiezad
	    and d.numpac   = t.numpac
	    and d.pacmat   = t.pacmat
	    and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
	EXCEPTION
 	WHEN OTHERS THEN
 		-- Trop souvent cette requête plante (surtout en environnement de dev, on catche l'erreur et on écrit une log)
 		trace_dbms_output( 'TRG_TGE_DONNEES_PAIE', 'Erreur avec le collaborateur : problème avec DIC_ADM_CONTRAT_SITU ou SECUPACMAT.');
 	END;
 	
 	-- S'il y a eu un souci avec la requête précédente, on n'exécute pas la suite
 	if v_pacmat is not null then
 	    if v_periode_recycl = '3' then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl = '2' then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = '1' then
	      v_recycl            := 'N';
	      IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
	        select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
	      END IF;
	      IF DELETING THEN
	        date_test_recycl := :old.periode;
	      ELSE
	        date_test_recycl := :new.periode;
	      END IF;
	      if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
	        if inserting or deleting then
	          v_recycl := 'O';
	        elsif updating then
	          if :new.code_caisse            <> :old.code_caisse or (:new.code_caisse is not null and :old.code_caisse is null) or (:new.code_caisse is null and :old.code_caisse is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_imputation     <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_rubrique       <> :old.code_rubrique or (:new.code_rubrique is not null and :old.code_rubrique is null) or (:new.code_rubrique is null and :old.code_rubrique is not null) then
	            v_recycl                     := 'O';
	          elsif :new.date_deb_arret      <> :old.date_deb_arret or (:new.date_deb_arret is not null and :old.date_deb_arret is null) or (:new.date_deb_arret is null and :old.date_deb_arret is not null) then
	            v_recycl                     := 'O';
	          elsif :new.domaine_prcte       <> :old.domaine_prcte or (:new.domaine_prcte is not null and :old.domaine_prcte is null) or (:new.domaine_prcte is null and :old.domaine_prcte is not null) then
	            v_recycl                     := 'O';
	          elsif :new.montant             <> :old.montant or (:new.montant is not null and :old.montant is null) or (:new.montant is null and :old.montant is not null) then
	            v_recycl                     := 'O';
	          elsif :new.nombre              <> :old.nombre or (:new.nombre is not null and :old.nombre is null) or (:new.nombre is null and :old.nombre is not null) then
	            v_recycl                     := 'O';
	          elsif :new.no_sequence         <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
	            v_recycl                     := 'O';
	          elsif :new.origine             <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_affectation <> :old.periode_affectation or (:new.periode_affectation is not null and :old.periode_affectation is null) or (:new.periode_affectation is null and :old.periode_affectation is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_rattach_deb <> :old.periode_rattach_deb or (:new.periode_rattach_deb is not null and :old.periode_rattach_deb is null) or (:new.periode_rattach_deb is null and :old.periode_rattach_deb is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode_rattach_fin <> :old.periode_rattach_fin or (:new.periode_rattach_fin is not null and :old.periode_rattach_fin is null) or (:new.periode_rattach_fin is null and :old.periode_rattach_fin is not null) then
	            v_recycl                     := 'O';
	          elsif :new.pourcentage         <> :old.pourcentage or (:new.pourcentage is not null and :old.pourcentage is null) or (:new.pourcentage is null and :old.pourcentage is not null) then
	            v_recycl                     := 'O';
	          elsif :new.sens                <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	            v_recycl                     := 'O';
	          elsif :new.taux                <> :old.taux or (:new.taux is not null and :old.taux is null) or (:new.taux is null and :old.taux is not null) then
	            v_recycl                     := 'O';
	          elsif :new.type_donnee         <> :old.type_donnee or (:new.type_donnee is not null and :old.type_donnee is null) or (:new.type_donnee is null and :old.type_donnee is not null) then
	            v_recycl                     := 'O';
	          elsif :new.type_traitement     <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
	            v_recycl                     := 'O';
	          elsif :new.periode             <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
	            v_recycl                     := 'O';
	          elsif :new.code_remplacement   <> :old.code_remplacement or (:new.code_remplacement is not null and :old.code_remplacement is null) or (:new.code_remplacement is null and :old.code_remplacement is not null) then
	            v_recycl                     := 'O';
	          elsif :new.action_retro        <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	            v_recycl                     := 'O';
	          end if;
	        end if;
	        if v_recycl = 'O' then
	          begin
	            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
	          when not matched then
	            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
	          exception
	          when others then 
	            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
	            --FIXME utiliser la procédure trace_dbms_output()
	            NULL;
	          end;
	        end if;
	      end if;
	    end if;
	    /** Test de mise en rétro **/
	    v_retro            := 'N';
	    if inserting or deleting then
	      v_retro := 'O';
	    elsif updating then
	      if :new.code_caisse            <> :old.code_caisse or (:new.code_caisse is not null and :old.code_caisse is null) or (:new.code_caisse is null and :old.code_caisse is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_imputation     <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_rubrique       <> :old.code_rubrique or (:new.code_rubrique is not null and :old.code_rubrique is null) or (:new.code_rubrique is null and :old.code_rubrique is not null) then
	        v_retro                     := 'O';
	      elsif :new.date_deb_arret      <> :old.date_deb_arret or (:new.date_deb_arret is not null and :old.date_deb_arret is null) or (:new.date_deb_arret is null and :old.date_deb_arret is not null) then
	        v_retro                     := 'O';
	      elsif :new.domaine_prcte       <> :old.domaine_prcte or (:new.domaine_prcte is not null and :old.domaine_prcte is null) or (:new.domaine_prcte is null and :old.domaine_prcte is not null) then
	        v_retro                     := 'O';
	      elsif :new.montant             <> :old.montant or (:new.montant is not null and :old.montant is null) or (:new.montant is null and :old.montant is not null) then
	        v_retro                     := 'O';
	      elsif :new.nombre              <> :old.nombre or (:new.nombre is not null and :old.nombre is null) or (:new.nombre is null and :old.nombre is not null) then
	        v_retro                     := 'O';
	      elsif :new.no_sequence         <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
	        v_retro                     := 'O';
	      elsif :new.origine             <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_affectation <> :old.periode_affectation or (:new.periode_affectation is not null and :old.periode_affectation is null) or (:new.periode_affectation is null and :old.periode_affectation is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_rattach_deb <> :old.periode_rattach_deb or (:new.periode_rattach_deb is not null and :old.periode_rattach_deb is null) or (:new.periode_rattach_deb is null and :old.periode_rattach_deb is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode_rattach_fin <> :old.periode_rattach_fin or (:new.periode_rattach_fin is not null and :old.periode_rattach_fin is null) or (:new.periode_rattach_fin is null and :old.periode_rattach_fin is not null) then
	        v_retro                     := 'O';
	      elsif :new.pourcentage         <> :old.pourcentage or (:new.pourcentage is not null and :old.pourcentage is null) or (:new.pourcentage is null and :old.pourcentage is not null) then
	        v_retro                     := 'O';
	      elsif :new.sens                <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	        v_retro                     := 'O';
	      elsif :new.taux                <> :old.taux or (:new.taux is not null and :old.taux is null) or (:new.taux is null and :old.taux is not null) then
	        v_retro                     := 'O';
	      elsif :new.type_donnee         <> :old.type_donnee or (:new.type_donnee is not null and :old.type_donnee is null) or (:new.type_donnee is null and :old.type_donnee is not null) then
	        v_retro                     := 'O';
	      elsif :new.type_traitement     <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
	        v_retro                     := 'O';
	      elsif :new.periode             <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
	        v_retro                     := 'O';
	      elsif :new.code_remplacement   <> :old.code_remplacement or (:new.code_remplacement is not null and :old.code_remplacement is null) or (:new.code_remplacement is null and :old.code_remplacement is not null) then
	        v_retro                     := 'O';
	      elsif :new.action_retro        <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	        v_retro                     := 'O';
	      end if;
	    end if;
	    if v_retro = 'O' then
	      V_PERIODE := NVL(:NEW.PERIODE,:OLD.PERIODE);
	      V_CODE_RUBRIQUE := NVL(:OLD.CODE_RUBRIQUE,:NEW.CODE_RUBRIQUE);
	      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_DONNEES_PAIE', 'SELECT COUNT(*) FROM TGE_REF_RUBRIQUE WHERE TGE_REF_RUBRIQUE.CODERUB = '''||V_CODE_RUBRIQUE||''' AND NUMPAC = '''||V_NUMPAC||''' AND NVL(OPTION_RETRO,''N'') <> ''N''');
	    END IF;
	  /** Fin test de mise en rétro **/
	end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_donnees_paie;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_ELEMENTS_PAIE
=SQL=
create or replace trigger trg_tge_elements_paie FOR
  insert or
  update or
  delete on tge_elements_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_CODE_ELEMENT     varchar2(4);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac       := nvl(:new.numpac, :old.numpac);
    v_paiezad      := nvl(:new.paiezad, :old.paiezad);
    
    BEGIN
	    SELECT t.pacmat,nvl(t.periode_recyclage,'1'),CODE_CHRONO
	    INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
	    from dic_adm_contrat_SITU d, secupacmat t
	    where d.numpac = v_numpac
	    and d.paiezad  = v_paiezad
	    and d.numpac   = t.numpac
	    and d.pacmat   = t.pacmat
	    and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
	EXCEPTION
	WHEN OTHERS THEN
		-- Trop souvent cette requête plante (surtout en environnement de dev, on catche l'erreur et on écrit une log)
	 	trace_dbms_output( 'TRG_TGE_ELEMENTS_PAIE', 'Erreur avec le collaborateur : problème avec DIC_ADM_CONTRAT_SITU ou SECUPACMAT.');
	END;
	
	-- S'il y a eu un souci avec la requête précédente, on n'exécute pas la suite
 	if v_pacmat is not null then
		if v_periode_recycl = '3' then
	      raise_application_error(-20001, 'CODERR=GENREC02');
	    elsif v_periode_recycl = '2' then
	      raise_application_error(-20001, 'CODERR=GENREC01');
	    elsif v_periode_recycl = '1' then
	      v_recycl            := 'N';
	      IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
	        select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
	      END IF;
	      IF DELETING THEN
	        date_test_recycl := :old.periode;
	      ELSE
	        date_test_recycl := :new.periode;
	      END IF;
	      if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
	        if inserting or deleting then
	          v_recycl := 'O';
	        elsif updating then
	          -- Les valeurs des colonnes clés ne peuvent pas être nulls 
	          if :new.code_element         <> :old.code_element then
	            v_recycl                   := 'O';
	          elsif :new.indicatif         <> :old.indicatif then
	            v_recycl                   := 'O';
	          elsif :new.origine           <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	            v_recycl                   := 'O';
	          elsif :new.sens              <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	            v_recycl                   := 'O';
	          elsif :new.type_traitement   <> :old.type_traitement then
	            v_recycl                   := 'O';
	          elsif :new.valeur            <> :old.valeur or (:new.valeur is not null and :old.valeur is null) or (:new.valeur is null and :old.valeur is not null) then
	            v_recycl                   := 'O';
	          elsif :new.periode           <> :old.periode then
	            v_recycl                   := 'O';
	          elsif :new.code_remplacement <> :old.code_remplacement then
	            v_recycl                   := 'O';
	          elsif :new.action_retro      <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	            v_recycl                   := 'O';
	          end if;
	        end if;
	        if v_recycl = 'O' then
	          begin
	            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
	          when not matched then
	            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
	          exception
	          when others then
	            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
	            --FIXME utiliser la procédure trace_dbms_output()
	            NULL;
	          end;
	        end if;
	      end if;
	    end if;
	    /** Test de mise en rétro **/
	    v_retro            := 'N';
	    if inserting or deleting then
	      v_retro := 'O';
	    elsif updating then
	      -- Les valeurs des colonnes clés ne peuvent pas être nulls 
	      if :new.code_element         <> :old.code_element then
	        v_retro                   := 'O';
	      elsif :new.indicatif         <> :old.indicatif then
	        v_retro                   := 'O';
	      elsif :new.origine           <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
	        v_retro                   := 'O';
	      elsif :new.sens              <> :old.sens or (:new.sens is not null and :old.sens is null) or (:new.sens is null and :old.sens is not null) then
	        v_retro                   := 'O';
	      elsif :new.type_traitement   <> :old.type_traitement then
	        v_retro                   := 'O';
	      elsif :new.valeur            <> :old.valeur or (:new.valeur is not null and :old.valeur is null) or (:new.valeur is null and :old.valeur is not null) then
	        v_retro                   := 'O';
	      elsif :new.periode           <> :old.periode then
	        v_retro                   := 'O';
	      elsif :new.code_remplacement <> :old.code_remplacement then
	        v_retro                   := 'O';
	      elsif :new.action_retro      <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
	        v_retro                   := 'O';
	      end if;
	    end if;
	    if v_retro = 'O' then
	      V_PERIODE := NVL(:NEW.PERIODE,:OLD.PERIODE);
	      V_CODE_ELEMENT := NVL(:NEW.CODE_ELEMENT,:OLD.CODE_ELEMENT);
	      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_ELEMENTS_PAIE', 'SELECT COUNT(*) FROM TGE_REF_DICOZ WHERE TGE_REF_DICOZ.ELEMENT = '''||V_CODE_ELEMENT||''' AND NUMPAC = '''||V_NUMPAC||'''');
	    END IF;
	  /** Fin test de mise en rétro **/
	end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_elements_paie;
##
TRG_TGE_IMPUTATIONS
=SQL=
create or replace trigger trg_tge_imputations FOR
  insert or
  update or
  delete on tge_imputations COMPOUND TRIGGER

  type pacmats       is record (r_numpac varchar2(6), r_pacmat varchar2(8), r_periode_recycl varchar2(1));
  type tab_pacmats   is table of pacmats index by binary_integer;
  tab                tab_pacmats;
  v_recycl           varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_bypass_trigger   number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   varchar2(6);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac      := nvl(:new.numpac, :old.numpac);
    v_paiezad     := nvl(:new.paiezad, :old.paiezad);
    select t.numpac       as r_numpac,
      t.pacmat            as r_pacmat,
      t.periode_recyclage as r_periode_recycl bulk collect into tab
    from dic_adm_contrat_SITU d, secupacmat t
    where d.numpac = v_numpac
    and d.paiezad  = v_paiezad
    and d.numpac   = t.numpac
    and d.pacmat   = t.pacmat;
    if tab.exists(1) then
      for i in 1..tab.last
      loop
        v_pacmat           := tab(i).r_pacmat;
        v_periode_recycl   := nvl(tab(i).r_periode_recycl, '1');
        if v_periode_recycl = '3' then
          raise_application_error(-20001, 'CODERR=GENREC02');
        elsif v_periode_recycl = '2' then
          raise_application_error(-20001, 'CODERR=GENREC01');
        elsif v_periode_recycl = '1' then
          v_recycl            := 'N';
          IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN
            select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
          END IF;
          IF DELETING THEN
            date_test_recycl := :old.periode;
          ELSE
            date_test_recycl := :new.periode;
          END IF;
          if (NVL(date_test_recycl,'000000') <= tabPeriodeByNumpac(v_numpac)) then
            if inserting or deleting then
              v_recycl := 'O';
            elsif updating then
              if :new.imputation         <> :old.imputation or (:new.imputation is not null and :old.imputation is null) or (:new.imputation is null and :old.imputation is not null) then
                v_recycl                 := 'O';
              elsif :new.nb_unite        <> :old.nb_unite or (:new.nb_unite is not null and :old.nb_unite is null) or (:new.nb_unite is null and :old.nb_unite is not null) then
                v_recycl                 := 'O';
              elsif :new.no_sequence     <> :old.no_sequence or (:new.no_sequence is not null and :old.no_sequence is null) or (:new.no_sequence is null and :old.no_sequence is not null) then
                v_recycl                 := 'O';
              elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
                v_recycl                 := 'O';
              elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
                v_recycl                 := 'O';
              elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
                v_recycl                 := 'O';
              end if;
            end if;
            if v_recycl = 'O' then
              begin
                merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
              when not matched then
                insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
              exception
              when others then
                --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
                --FIXME utiliser la procédure trace_dbms_output()
                NULL;
              end;
            end if;
          end if;
        end if;
      end loop;
    end if;
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_imputations;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_INCIDENTS_PAIE
=SQL=
create or replace trigger trg_tge_incidents_paie FOR
  insert or
  update or
  delete on tge_incidents_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_date_effet       DATE; 
  v_periode_retro    VARCHAR2(6);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  dateFinRecueil DATE;
  moisPaie  VARCHAR2(6);
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   DATE;
  date_effet_recycl   DATE;
  A520 VARCHAR2(32);
  A521 VARCHAR2(32);
  A523 VARCHAR2(32);
  activite VARCHAR2(32);
  etablissement VARCHAR2(32);
  categorie VARCHAR2(32);
  nomTablegxp VARCHAR2(32);
  requete CLOB;
  V_IS_T2           NUMBER;
  V_ORIGINE_CREATE  VARCHAR2(32);
BEFORE EACH ROW
IS
begin
  -- action de 'bypass' le trigger 
  select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité

  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
    BEGIN
        v_numpac        := NVL(:new.numpac, :old.numpac);
        v_paiezad       := NVL(:new.paiezad, :old.paiezad);
        v_date_effet    := NVL(:new.date_effet, :old.date_effet);
        V_ORIGINE_CREATE := NVL(:new.ORIGINE_CREATE, :old.ORIGINE_CREATE);
        SELECT COUNT(*) INTO V_IS_T2 
        FROM DIC_ADM_CONTRAT_HISTO 
        WHERE V_ORIGINE_CREATE = 'BATCH' 
        AND NUMPAC = v_numpac 
        AND PAIEZAD = v_paiezad 
        AND ZA996 = 'A' 
        AND v_date_effet BETWEEN DATE_EFF AND DATE_SORTIE_SIT_BO;
        IF  V_IS_T2 = 0 THEN 
	        SELECT MIN(MOIS_PAIE) 
	        INTO v_periode_retro
	        FROM TGE_PERIODE_RECUEIL_PAIEZAD
	        WHERE numpac = v_numpac
	        AND paiezad  = v_paiezad
	        AND v_date_effet BETWEEN DEBUT_PERIODE_RECUEIL AND FIN_PERIODE_RECUEIL;
	        IF v_periode_retro IS NOT NULL THEN
	          :new.periode     := TO_DATE(v_periode_retro || 01, 'yyyyMMdd');
	        END IF;
	    END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Période de recueil non trouvé
        null;
    END;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    v_numpac      := nvl(:new.numpac, :old.numpac);
    v_paiezad     := nvl(:new.paiezad, :old.paiezad);
    BEGIN
        SELECT t.pacmat,nvl(t.periode_recyclage,'1'),CODE_CHRONO
        INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
        from dic_adm_contrat_SITU d, secupacmat t
        where d.numpac = v_numpac
        and d.paiezad  = v_paiezad
        and d.numpac   = t.numpac
        and d.pacmat   = t.pacmat
        and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        null;
    END;
    if v_periode_recycl = '3' then
      raise_application_error(-20000, 'CODERR=GENREC02');
    elsif v_periode_recycl = '2' then
      raise_application_error(-20000, 'CODERR=GENREC01');
    elsif v_periode_recycl = '1' then
      v_recycl            := 'N';
      --Période de recueil individuelle
 select periodeencours into moisPaie from tge_ref_pac where numpac = v_numpac;
 BEGIN
 --Période de recueil individuelle
 SELECT FIN_PERIODE_RECUEIL INTO dateFinRecueil from tge_periode_recueil_paiezad where numpac=v_numpac 
 and MOIS_PAIE=moisPaie and paiezad=v_paiezad ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 
 dateFinRecueil:=null;
 END;
 --Période de recueil génèrique
 if(dateFinRecueil  is null) then
   SELECT tablegxp ,
    A520_DONNEE ,
    A521_DONNEE ,
    A523_DONNEE into 
    nomTablegxp,A520,A521,A523
  FROM
  (
  SELECT DISTINCT c.element,
    c.tablegxp,
    c.DONNEEGXP
  FROM tge_ref_mapdo c
  WHERE C.numpac = v_numpac
  AND c.element IN ('A520','A521', 'A523')
  UNION ALL
  SELECT DISTINCT c.element,
    c.tablegxp,
    c.DONNEEGXP
  FROM tge_ref_mapdo c
  WHERE C.numpac                  ='*'
  AND c.element                  IN ('A520','A521', 'A523')
  AND (c.TABLEGXP,c.ELEMENT) NOT IN
    (SELECT a.TABLEGXP,
      a.element
    FROM tge_ref_mapdo a
    WHERE a.numpac = v_numpac
    AND A.ELEMENT IN ('A520','A521', 'A523')
    )
  ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN('A520' AS A520,'A521' AS A521, 'A523' AS A523));
  if( A520 is  not null  and A521 is not null and A523  is not null) then
    requete:='select '||A520|| ','||A521||','||A523||'  from '||nomTablegxp||' d '; 
    requete:=requete || ' where numpac='''||v_numpac||''' and paiezad='''|| v_paiezad  || ''' and pacmat='''||v_pacmat||''''; 
    if( nomTablegxp='DIC_ADM_CONTRAT_HISTO') then
 		requete:=requete || ' and sysdate BETWEEN date_eff and date_fin_bo AND rownum=1';
 	end if;
    BEGIN
    EXECUTE IMMEDIATE requete into activite,etablissement,categorie;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dateFinRecueil:=null;
    END;
  end if;
  if(activite is not null and etablissement is not null and categorie is not null) then
    BEGIN
    select 
    max(to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8),'DDMMYYYY')) into  dateFinRecueil
    from tge_ref_vrval   
    WHERE numero_de_pac = v_numpac 
    AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = to_char(to_date(moisPaie,'YYYYMM'),'MMYYYY') 
    AND CODE_TABLE = 'LTP'  
    AND IS_BETWEEN_NLS_FRENCH(LPAD(activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = 'TRUE' 
    AND IS_BETWEEN_NLS_FRENCH(LPAD(etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = 'TRUE' 
    AND IS_BETWEEN_NLS_FRENCH(LPAD(categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = 'TRUE' ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dateFinRecueil:=null;
    END;
  end if;
 end if;
 if (dateFinRecueil is null) then
    select LAST_DAY( to_date(moisPaie,'YYYYMM') ) into dateFinRecueil from dual;
 end if;
      IF DELETING THEN
        date_test_recycl := :old.periode;
		date_effet_recycl :=:old.date_effet;
      ELSE
        date_test_recycl := :new.periode;
		 IF updating THEN
		 	date_effet_recycl :=LEAST(:new.date_effet,:old.date_effet);
		 ELSE
		 	date_effet_recycl :=:new.date_effet;
		 END IF;
	  END IF;
	    IF  (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') > to_char(dateFinRecueil,'YYYYMMDD' ) ) THEN
		 date_test_recycl := TO_DATE('20991231','yyyymmdd');
      END IF;
 		if (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') <= to_char(dateFinRecueil,'YYYYMMDD' ) ) then
        if inserting or deleting then
          v_recycl := 'O';
        elsif updating then
          if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
            v_recycl                 := 'O';
          elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
            v_recycl                 := 'O';
          elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
            v_recycl                 := 'O';
          elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
            v_recycl                 := 'O';
          elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
            v_recycl                 := 'O';
          elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
            v_recycl                 := 'O';
          elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
            v_recycl                 := 'O';
          elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
            v_recycl                 := 'O';
          elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
            v_recycl                 := 'O';
          end if;
        end if;
        if v_recycl = 'O' then
          begin
            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
          when not matched then
            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
          exception
          when others then
            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;
          end;
        end if;
      end if;
    end if;
    /** Test de mise en rétro **/
    v_retro            := 'N';
    if inserting or deleting then
      v_retro := 'O';
    elsif updating then
      -- Les valeurs des colonnes clés ne peuvent pas être nulls 
      if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
        v_retro                 := 'O';
      elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
        v_retro                 := 'O';
      elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
        v_retro                 := 'O';
      elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
        v_retro                 := 'O';
      elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
        v_retro                 := 'O';
      elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
        v_retro                 := 'O';
      elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
        v_retro                 := 'O';
      elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
        v_retro                 := 'O';
      elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
        v_retro                 := 'O';
      end if;
    end if;
    if v_retro = 'O' then
      V_PERIODE := TO_CHAR(NVL(:NEW.PERIODE,:OLD.PERIODE),'YYYYMM');
      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_INCIDENTS_PAIE');
    END IF;
  /** Fin test de mise en rétro **/
  end if;
  end if;
END BEFORE EACH ROW;
end trg_tge_incidents_paie;
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_ENTITE
==
create or replace TYPE MP_CODELISTS_ESI_ENTITE FORCE AS OBJECT (CODE_ENTITE VARCHAR2(25), LIBELLE_REDUIT VARCHAR2(20), LIBELLE VARCHAR(255))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_TAB_ENTITES
==
create or replace TYPE MP_CODELISTS_ESI_TAB_ENTITES FORCE AS TABLE OF MP_CODELISTS_ESI_ENTITE
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_BUSINESSUNITS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_BUSINESSUNITS (CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT * FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_BUSINESS_UNITS'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_DEPARTMENTS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_DEPARTMENTS (CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT * FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_DEPARTMENTS'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_JOB_TITLES
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_JOB_TITLES (CODE, LIBELLE) AS 
SELECT DISTINCT FILIERE||REGROUPEMENT_METIER||METIER||QUALIFICATION AS CODE, LIBELLE FROM GA_FILIERE WHERE QUALIFICATION IS NOT NULL AND NUMPAC IN ('*',(SELECT VALVAR FROM SYS_VARSYS WHERE CODVAR='NS_CODE_PAC'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_LOCATIONS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_LOCATIONS (CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT * FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_ETABLISSEMENT'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_PAY_GRADES
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_PAY_GRADES (CODE, LIBELLE) AS 
SELECT CODE_NIVECH, LIBELLE FROM GA_NIVECHEL
##
TAG_CHARSET=@€éèç
##
ETAT_CALC_ATTENTE
=SQL IFEXIST=ETAT_CALC_ATTENTE=DOC_NAME=
alter table ETAT_CALC_ATTENTE modify DOC_NAME VARCHAR2(128)
##
TAG_CHARSET=@€éèç
##
META_DONNEE_ECRAN
=SQL IFEXIST=META_DONNEE_ECRAN=
UPDATE META_DONNEE_ECRAN SET LIBELLE_DONNEE = 'Nom d''usage' WHERE NOM_DONNEE = 'NOM' AND LIBELLE_DONNEE <> 'Nom d''usage'
##
META_DONNEE_ECRAN
=SQL IFEXIST=META_DONNEE_ECRAN=
UPDATE META_DONNEE_ECRAN SET LIBELLE_DONNEE = 'Nom de famille' WHERE NOM_DONNEE = 'NOMJF' AND LIBELLE_DONNEE <> 'Nom de famille'
##
META_DONNEE_GENERALE
=SQL IFEXIST=META_DONNEE_GENERALE=
update META_DONNEE_GENERALE set MINUSCULES_AUTORISEES='X' where NOM_DICTIONNAIRE like 'DIC_TGE_RESPA%' and type_donnee='9' and MINUSCULES_AUTORISEES='Z'
##
MP_CLI_CONSUMERAPPOID
=SQL IFEXIST=MP_CLI_CONSUMERAPPOID=
DROP TABLE MP_CLI_CONSUMERAPPOID
##
MP_CONSUMERAPPOID
=SQL IFNOTEXIST=MP_CONSUMERAPPOID=CONSUMER_APP_OID_REF=
ALTER TABLE MP_CONSUMERAPPOID ADD (CONSUMER_APP_OID_REF VARCHAR2(50 BYTE))
##
TAG_CHARSET=@€éèç
##
MP_REF_CUSTOMFIELD
=SQL IFNOTEXIST=MP_REF_CUSTOMFIELD=
CREATE TABLE MP_REF_CUSTOMFIELD (CUSTOMFIELD_PREFIX_MP VARCHAR2(50), LABEL VARCHAR2(250), SUFFIX_JSON_PATH VARCHAR2(250), CONSTRAINT MP_REF_CUSTOMFIELD_PK PRIMARY KEY (CUSTOMFIELD_PREFIX_MP))
##
MP_REF_CUSTOMFIELD
==
DELETE FROM MP_REF_CUSTOMFIELD
'workerCustomDateTime','Custom Date Time Worker','/customFieldGroup/dateTimeFields[itemID=''@DATANAME@'']/dateTimeValue'
'workerCustomDate','Custom Date Worker','/customFieldGroup/dateFields[itemID=''@DATANAME@'']/dateValue'
'workerCustomString','Custom String Worker','/customFieldGroup/stringFields[itemID=''@DATANAME@'']/stringValue'
'workerCustomIndicator','Custom Indicator Worker','/customFieldGroup/indicatorFields[itemID=''@DATANAME@'']/indicatorValue'
'workerCustomNumber','Custom Number Worker','/customFieldGroup/numberFields[itemID=''@DATANAME@'']/numberValue'
'personCustomDateTime','Custom Date Time Person','/person/customFieldGroup/dateTimeFields[itemID=''@DATANAME@'']/dateTimeValue'
'personCustomDate','Custom Date Person','/person/customFieldGroup/dateFields[itemID=''@DATANAME@'']/dateValue'
'personCustomString','Custom String Person','/person/customFieldGroup/stringFields[itemID=''@DATANAME@'']/stringValue'
'personCustomIndicator','Custom Indicator Person','/person/customFieldGroup/indicatorFields[itemID=''@DATANAME@'']/indicatorValue'
'personCustomNumber','Custom Number Person','/person/customFieldGroup/numberFields[itemID=''@DATANAME@'']/numberValue'
'workAssCustomDateTime','Custom Date Time Work Assignment','/workAssignments[0]/customFieldGroup/dateTimeFields[itemID=''@DATANAME@'']/dateTimeValue'
'workAssCustomDate','Custom Date Work Assignment','/workAssignments[0]/customFieldGroup/dateFields[itemID=''@DATANAME@'']/dateValue'
'workAssCustomString','Custom String Work Assignment','/workAssignments[0]/customFieldGroup/stringFields[itemID=''@DATANAME@'']/stringValue'
'workAssCustomIndicator','Custom Indicator Work Assignment','/workAssignments[0]/customFieldGroup/indicatorFields[itemID=''@DATANAME@'']/indicatorValue'
'workAssCustomNumber','Custom Number Work Assignment','/workAssignments[0]/customFieldGroup/numberFields[itemID=''@DATANAME@'']/numberValue'
##
TAG_CHARSET=@€éèç
##
MP_REF_CUSTOMFIELD_BY_URI
=SQL IFNOTEXIST=MP_REF_CUSTOMFIELD_BY_URI=
CREATE TABLE MP_REF_CUSTOMFIELD_BY_URI (CUSTOMFIELD_PREFIX_MP VARCHAR2(50), URI_ID VARCHAR2(250), PREFIX_JSON_PATH VARCHAR2(250), CONSTRAINT MP_REF_CUSTOMFIELD_BY_URI_PK PRIMARY KEY (CUSTOMFIELD_PREFIX_MP,URI_ID))
##
MP_REF_CUSTOMFIELD_BY_URI
==
DELETE FROM MP_REF_CUSTOMFIELD_BY_URI
'workerCustomDateTime','HrV2Workers','/workers'
'workerCustomDate','HrV2Workers','/workers'
'workerCustomString','HrV2Workers','/workers'
'workerCustomIndicator','HrV2Workers','/workers'
'workerCustomNumber','HrV2Workers','/workers'
'personCustomDateTime','HrV2Workers','/workers'
'personCustomDate','HrV2Workers','/workers'
'personCustomString','HrV2Workers','/workers'
'personCustomIndicator','HrV2Workers','/workers'
'personCustomNumber','HrV2Workers','/workers'
'workAssCustomDateTime','HrV2Workers','/workers'
'workAssCustomDate','HrV2Workers','/workers'
'workAssCustomString','HrV2Workers','/workers'
'workAssCustomIndicator','HrV2Workers','/workers'
'workAssCustomNumber','HrV2Workers','/workers'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP_ALP IS NULL
##
MP_REF_DATA_ALP
==
ALTER TABLE MP_REF_DATA_ALP DROP PRIMARY KEY
##
MP_REF_DATA_ALP
==
ALTER TABLE MP_REF_DATA_ALP ADD CONSTRAINT PK_MP_REF_DATA_ALP PRIMARY KEY (DATA_NAME_MP, DATA_NAME_MP_ALP)
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('DistributionInstructionsDepositAccountFinancialPartyNameCodeShortName','DistributionInstructionsDepositAccountFinancialPartySWIFTCode','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsDepositAccountIBAN','DistributionInstructionsPaymentMethodCodeCodeValue','DistributionInstructionsDistributionPercentage','DistributionInstructionsDepositAccountFinancialAccountAccountName','DependentsPersonBirthDate','PersonBirthOrder','DependentsPersonDeathDate','PersonLegalNameFamilyName1','PersonGenderCodeCodeValue','DependentsPersonLegalNameGivenName','PersonTaxdependentsIndicator','WorkAssignmentActualStartDate','PersonalContacts0CommunicationEmailsEmailUri','PersonBirthDate','PersonBirthPlaceCityName','PersonBirthPlaceCityName','PersonBirthPlacePostalCode','PersonBirthPlaceCountryCode','PersonBirthPlacePostalCode','PersonCitizenshipCodeValue','WorkAssignmentAssignedWorkLocationsNameCodeCodeValue','PersonLegalAddressLineFive','PersonOtherPersonalAddressesLineFive','PersonLegalAddressCountryCode','PersonOtherPersonalAddressesCountryCode','PersonDeathDate','DependentsPersonBirthDate','DependentsPersonDeathDate','PersonLegalNameFamilyName1','PersonLegalNameFamilyName2','PersonGenderCodeCodeValue','DependentsPersonLegalNameGivenName','DependentsPersonLegalNamePreferredSalutationsSalutationCodeCodeValue','PersonTaxdependentsIndicator','RelationshipTypeCodeCodeValue','PersonImmigrationDocument0DocumentId','WorkerAssigmentJobCodeCodeValue','PersonImmigrationDocument0ExpirationDate','PersonalContacts0PersonNameFamilyName','PersonLegalNameFamilyName2','PersonLegalNameGivenName','PersonGenderCodeCodeValue','PersonalContacts0PersonNameGivenName','WorkAssignmentHireDate','PersonImmigrationDocument0IssueDate','WorkAssignmentJobTitle','PersonalContacts0CommunicationLandlines0FormattedNumber','PersonCommunicationLandlinesFormattedNumber','BusinessCommunicationLandlinesFormattedNumber','PersonLegalNameFamilyName1','PersonCommunicationEmailUri','BusinessCommunicationEmailsEmailUri','PersonMaritalStatusCodeCodeValue','PersonMaritalStatusCodeEffectiveDate','PersonLegalNameMiddleName','PersonalContacts0CommunicationMobilesFormattedNumber','PersonCommunicationMobileFormattedNumber','PersonLegalAddressStreetName','PersonOtherPersonalAddressesStreetName','PersonLegalAddressBuildingNumber','PersonOtherPersonalAddressesBuildingNumber','PersonalContacts0CommunicationLandlines1FormattedNumber','WorkersWorkerDatesOriginalHireDate','WorkAssignmentPayrollFileNumber','PayrollProcessingJobsPayrollGroupCode','PersonalContacts0RelationshipTypeCodeCodeValue','PersonLegalNamePreferredSalutationsSalutationCodeCodeValue')
'DistributionInstructionsDepositAccountFinancialPartyNameCodeShortName','bankLabelCompteBancaire'
'DistributionInstructionsDepositAccountFinancialPartySWIFTCode','BICCompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBACCCompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBAPACompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA2CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA3CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA4CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA5CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA6CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA7CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA8CompteBancaire'
'DistributionInstructionsDepositAccountIBAN','IBA9CompteBancaire'
'DistributionInstructionsPaymentMethodCodeCodeValue','methodePaymentCompteBancaire'
'DistributionInstructionsDistributionPercentage','pourcentageCompteBancaire'
'DistributionInstructionsDepositAccountFinancialAccountAccountName','titulaireCompteBancaire'
'DependentsPersonBirthDate','dependentEnfantBirthDate'
'PersonBirthOrder','dependentEnfantBirthOrder'
'DependentsPersonDeathDate','dependentEnfantDeathDate'
'PersonLegalNameFamilyName1','dependentEnfantFamilyName1'
'PersonGenderCodeCodeValue','dependentEnfantGenderCode'
'DependentsPersonLegalNameGivenName','dependentEnfantGivenName'
'PersonTaxdependentsIndicator','dependentEnfantTaxDependentIndicator'
'WorkAssignmentActualStartDate','actualStartDate'
'PersonalContacts0CommunicationEmailsEmailUri','adresseMailEmergency'
'PersonBirthDate','birthDay'
'PersonBirthPlaceCityName','birthPlaceCity'
'PersonBirthPlaceCityName','birthPlaceCityEtr'
'PersonBirthPlacePostalCode','birthPlaceCodePostal'
'PersonBirthPlaceCountryCode','birthPlaceCountry'
'PersonBirthPlacePostalCode','birthPlaceDept'
'PersonCitizenshipCodeValue','citizen'
'WorkAssignmentAssignedWorkLocationsNameCodeCodeValue','codeEtab'
'PersonLegalAddressLineFive','complementAdresseFiscal'
'PersonOtherPersonalAddressesLineFive','complementAdressePerso'
'PersonLegalAddressCountryCode','countryCodeFiscal'
'PersonOtherPersonalAddressesCountryCode','countryCodePerso'
'PersonDeathDate','deathDate'
'DependentsPersonBirthDate','dependentConjointBirthDate'
'DependentsPersonDeathDate','dependentConjointDeathDate'
'PersonLegalNameFamilyName1','dependentConjointFamilyName1'
'PersonLegalNameFamilyName2','dependentConjointFamilyName2'
'PersonGenderCodeCodeValue','dependentConjointGenderCode'
'DependentsPersonLegalNameGivenName','dependentConjointGivenName'
'DependentsPersonLegalNamePreferredSalutationsSalutationCodeCodeValue','dependentConjointSalutationCode'
'PersonTaxdependentsIndicator','dependentConjointTaxDependentIndicator'
'RelationshipTypeCodeCodeValue','dependentRelationshipTypeCode'
'PersonImmigrationDocument0DocumentId','docIdImmDoc'
'WorkerAssigmentJobCodeCodeValue','emploi'
'PersonImmigrationDocument0ExpirationDate','expirationDateImmDoc'
'PersonalContacts0PersonNameFamilyName','familyName1Emergency'
'PersonLegalNameFamilyName2','familyName2'
'PersonLegalNameGivenName','firstName'
'PersonGenderCodeCodeValue','genderCode'
'PersonalContacts0PersonNameGivenName','givenNameEmergency'
'WorkAssignmentHireDate','hireDate'
'PersonImmigrationDocument0IssueDate','issueDateImmDoc'
'WorkAssignmentJobTitle','jobTitle'
'PersonalContacts0CommunicationLandlines0FormattedNumber','landLineEmergency'
'PersonCommunicationLandlinesFormattedNumber','landlinePersoNum'
'BusinessCommunicationLandlinesFormattedNumber','landlineWorkNum'
'PersonLegalNameFamilyName1','lastName'
'PersonCommunicationEmailUri','mailPerso'
'BusinessCommunicationEmailsEmailUri','mailWork'
'PersonMaritalStatusCodeCodeValue','maritalStatus'
'PersonMaritalStatusCodeEffectiveDate','maritalStatusEffectiveDate'
'PersonLegalNameMiddleName','middleName'
'PersonalContacts0CommunicationMobilesFormattedNumber','mobileEmergency'
'PersonCommunicationMobileFormattedNumber','mobilePersoNum'
'PersonLegalAddressStreetName','nomVoieAdresseFiscal'
'PersonOtherPersonalAddressesStreetName','nomVoieAdressePerso'
'PersonLegalAddressBuildingNumber','numeroVoieAdresseFiscal'
'PersonOtherPersonalAddressesBuildingNumber','numeroVoieAdressePerso'
'PersonalContacts0CommunicationLandlines1FormattedNumber','officeLineEmergency'
'WorkersWorkerDatesOriginalHireDate','originalHireDate'
'WorkAssignmentPayrollFileNumber','payrollFileNumber'
'PayrollProcessingJobsPayrollGroupCode','payrollGroupCode'
'PersonalContacts0RelationshipTypeCodeCodeValue','relationshipEmergency'
'PersonLegalNamePreferredSalutationsSalutationCodeCodeValue','titleAffixCode'
##
MP_REF_EVENTS
==
delete from MP_REF_EVENTS where EVENT in ('/events/hr/v1/worker.personal-communication.mobile.remove','/events/hr/v1/worker.personal-communication.landline.remove','/events/hr/v1/worker.personal-communication.email.remove')
'/events/hr/v1/worker.personal-communication.email.remove','3','Suppression de l''adresse mail personnelle','50307','Employee - Personal Information Email','O'
'/events/hr/v1/worker.personal-communication.landline.remove','1','Suppression du numéro fixe personnel','50305','Employee - Personal Information Landline','O'
'/events/hr/v1/worker.personal-communication.mobile.remove','2','Suppression du numéro mobile personnel','50306','Employee - Personal Information Mobile','O'
##
MP_REF_EVENTS
==
delete from MP_REF_EVENTS where EVENT in ('/events/hr/v1/worker.business-communication.mobile.add','/events/hr/v1/worker.business-communication.landline.add','/events/hr/v1/worker.business-communication.fax.add','/events/hr/v1/worker.business-communication.email.add')
'/events/hr/v1/worker.business-communication.email.add','13','Ajout de l''adresse mail professionnelle','50310','Employee - Business Information Email','O'
'/events/hr/v1/worker.business-communication.fax.add','14','Ajout du numéro de fax','50311','Employee - Business Information Fax','O'
'/events/hr/v1/worker.business-communication.landline.add','11','Ajout du numéro fixe professionnel','50308','Employee - Business Information Landline','O'
'/events/hr/v1/worker.business-communication.mobile.add','12','Ajout du numéro mobile professionnel','50309','Employee - Business Information Mobile','O'
##
MP_REF_EVENTS
==
delete from MP_REF_EVENTS where EVENT in ('/events/hr/v1/worker.business-communication.email.remove','/events/hr/v1/worker.business-communication.fax.remove','/events/hr/v1/worker.business-communication.landline.remove','/events/hr/v1/worker.business-communication.mobile.remove')
'/events/hr/v1/worker.business-communication.email.remove','13','Suppression de l''adresse mail professionnelle','50310','Employee - Business Information Email','O'
'/events/hr/v1/worker.business-communication.fax.remove','14','Suppression du numéro de fax','50311','Employee - Business Information Fax','O'
'/events/hr/v1/worker.business-communication.landline.remove','11','Suppression du numéro fixe professionnel','50308','Employee - Business Information Landline','O'
'/events/hr/v1/worker.business-communication.mobile.remove','12','Suppression du numéro mobile professionnel','50309','Employee - Business Information Mobile','O'
##
MP_REFERENTIEL
=SQL IFEXIST=MP_REFERENTIEL=NOM_TABLE_DEX=
ALTER TABLE MP_REFERENTIEL RENAME COLUMN NOM_TABLE_DEX TO TABLE_NAME_MP
##
MP_REFERENTIEL
=SQL=
DECLARE
 v_count NUMBER;
BEGIN
 SELECT COUNT(*) INTO v_count FROM USER_TAB_COLS WHERE TABLE_NAME='MP_REFERENTIEL' AND COLUMN_NAME='IDENT' AND NULLABLE='N';
 IF v_count>0 THEN
  EXECUTE_IMMEDIATE_STRING ('ALTER TABLE MP_REFERENTIEL MODIFY (IDENT NULL)',0);
 END IF;
END;
##
MP_REFERENTIEL
=SQL IF_INDEX_NOTEXIST=PK_MP_REFERENTIEL=
ALTER TABLE MP_REFERENTIEL ADD CONSTRAINT PK_MP_REFERENTIEL PRIMARY KEY (TABLE_NAME_MP)
##
MP_REFERENTIEL
==
DELETE FROM MP_REFERENTIEL WHERE TABLE_NAME_MP IN ('business-units', 'departments', 'job-titles', 'locations', 'pay-grades')
'business-units','MP_CODELISTS_ESI_BUSINESSUNITS'
'departments','MP_CODELISTS_ESI_DEPARTMENTS'
'job-titles','MP_CODELISTS_ESI_JOB_TITLES'
'locations','MP_CODELISTS_ESI_LOCATIONS'
'pay-grades','MP_CODELISTS_ESI_PAY_GRADES'
##
TAG_CHARSET=@€éèç
##
NEWS_DETAILS
=SQL IFNOTEXIST=NEWS_DETAILS=
CREATE TABLE NEWS_DETAILS (	CODE VARCHAR2(9),	TYPE VARCHAR2(12),	THEME VARCHAR2(12),	TITRE VARCHAR2(128),	DESCRIPTION VARCHAR2(512),	VERSION_RELEASE VARCHAR2(3),	VERSION_MAJEUR VARCHAR2(3),	VERSION_MINEUR VARCHAR2(3),	REPORT VARCHAR2(4),	HOTFIX VARCHAR2(8),	DATE_REPORT DATE,	VISIBILITE_CLIENT VARCHAR2(1),	VERSION_COMPLETE AS ((VERSION_RELEASE||'.'||VERSION_MAJEUR||'.'||VERSION_MINEUR||'.'||REPORT||(CASE   WHEN HOTFIX is not null THEN '.'||HOTFIX  else '' END))),	CONSTRAINT PK_NEWS_DETAILS PRIMARY KEY (CODE, VERSION_COMPLETE))
##
TAG_CHARSET=@€éèç
##
NEWS_RELEASE
=SQL IFNOTEXIST=NEWS_RELEASE=
CREATE TABLE NEWS_RELEASE (	DATE_RELEASE DATE,	VERSION_RELEASE VARCHAR2(3),	VERSION_MAJEUR VARCHAR2(3),	VERSION_MINEUR VARCHAR2(3),	REPORT VARCHAR2(4),	HOTFIX VARCHAR2(8),	VERSION_COMPLETE AS ((VERSION_RELEASE||'.'||VERSION_MAJEUR||'.'||VERSION_MINEUR||'.'||REPORT||(CASE   WHEN HOTFIX is not null THEN '.'||HOTFIX  else '' END))),	CONSTRAINT PK_NEWS_RELEASE PRIMARY KEY (VERSION_COMPLETE))
##
TAG_CHARSET=@€éèç
##
REF_DONNEE_ECRAN
=SQL IFEXIST=REF_DONNEE_ECRAN=
UPDATE REF_DONNEE_ECRAN SET LIBELLE_DONNEE = 'Nom d''usage' WHERE NOM_DONNEE = 'NOM' AND LIBELLE_DONNEE <> 'Nom d''usage'
##
REF_DONNEE_ECRAN
=SQL IFEXIST=REF_DONNEE_ECRAN=
UPDATE REF_DONNEE_ECRAN SET LIBELLE_DONNEE = 'Nom de famille' WHERE NOM_DONNEE = 'NOMJF' AND LIBELLE_DONNEE <> 'Nom de famille'
##
REF_DONNEE_GENERALE
=SQL IFEXIST=REF_DONNEE_GENERALE=
UPDATE REF_DONNEE_GENERALE SET LIBELLE_DONNEE = 'Nom d''usage' WHERE NOM_DONNEE = 'NOM' AND LIBELLE_DONNEE <> 'Nom d''usage'
##
REF_DONNEE_GENERALE
=SQL IFEXIST=REF_DONNEE_GENERALE=
UPDATE REF_DONNEE_GENERALE SET LIBELLE_DONNEE = 'Nom de famille' WHERE NOM_DONNEE = 'NOMJF' AND LIBELLE_DONNEE <> 'Nom de famille'
##
TAG_CHARSET=@€éèç
##
SIGN_GROUPE_SIGNATAIRES_DESC
=SQL IFNOTEXIST=SIGN_GROUPE_SIGNATAIRES_DESC=
create table SIGN_GROUPE_SIGNATAIRES_DESC(GROUPE_SIGNATAIRES varchar2(50) not null enable, LIBELLE varchar2(255), DESCRIPTION clob, NUMPAC varchar2(6), PRIMARY KEY (GROUPE_SIGNATAIRES))
##
STD_TABDESCCOL
==
DELETE FROM STD_TABDESCCOL WHERE IDENT='GA_EDITIONS_GAP'
'GA_EDITIONS_GAP','0','Code','O','O','O','O',NULL,NULL,NULL,'CODE','X','10','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'GA_EDITIONS_GAP','1','Libellé','N','N','O','O',NULL,NULL,NULL,'LIBELLE','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'GA_EDITIONS_GAP','2','Type de document','N','N','O','O',NULL,NULL,NULL,'TYPE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'GA_EDITIONS_GAP','3','Données salarié (O/N)','N','N','N','O',NULL,NULL,NULL,'SAL_DATA','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','4','Données contrat (O/N)','N','N','N','O',NULL,NULL,NULL,'CNT_DATA','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','5','DocServ (O/N)','N','N','N','O',NULL,NULL,NULL,'IS_DOCSERV','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','6','Asynchrone (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODE_ASYNCHRONE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'GA_EDITIONS_GAP','7','Dispo collab (O/N)','N','N','N','O',NULL,NULL,NULL,'IS_DISPO_COLLAB','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','8','Description','N','N','N','O',NULL,NULL,NULL,'DESCRIPTION','X','200','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','9','Chemin de l''image','N','N','N','O',NULL,NULL,NULL,'IMG_SPECIMEN_PATH','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','10','Nature de contrat','N','N','O','O',NULL,NULL,NULL,'NATCNT','X','5','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'GA_EDITIONS_GAP','11','Embauche (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_EMBAUCHE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'GA_EDITIONS_GAP','12','Renouvel. CDD (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_RENOUVEL_CDD','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'7','N',NULL
'GA_EDITIONS_GAP','13','Transfo. CDD/CDI (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_TRANSFO_CDD_CDI','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'8','N',NULL
'GA_EDITIONS_GAP','14','Modif. contrat (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_CONTRAT','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'9','N',NULL
'GA_EDITIONS_GAP','15','Modif. affectation (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_AFFECTATION','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'10','N',NULL
'GA_EDITIONS_GAP','16','Modif. classification (O/','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_CLASSIFICATION','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'11','N',NULL
'GA_EDITIONS_GAP','17','Modif. horaires (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_HORAIRES','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'12','N',NULL
'GA_EDITIONS_GAP','18','Modif. rémunération (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_APPOINTEMENT','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'13','N',NULL
'GA_EDITIONS_GAP','19','Modif. infos DSN (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_DSN','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'14','N',NULL
'GA_EDITIONS_GAP','20','Départ (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_DEPART','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'15','N',NULL
'GA_EDITIONS_GAP','21','Signature (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_SIGNATURE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'16','N',NULL
'GA_EDITIONS_GAP','22','Sous-type de document','N','N','O','O',NULL,NULL,NULL,'SOUSTYPE','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'17','N',NULL
##
STD_TABDESCCOL
==
DELETE FROM STD_TABDESCCOL WHERE IDENT IN ('MP_CODELISTS_ESI_BUSINESSUNITS','MP_CODELISTS_ESI_DEPARTMENTS','MP_CODELISTS_ESI_JOB_TITLES','MP_CODELISTS_ESI_LOCATIONS','MP_CODELISTS_ESI_PAY_GRADES')
'MP_CODELISTS_ESI_BUSINESSUNITS','0','Code','N','N','O','O',null,null,null,'CODE','X','25','O',null,null,null,'0','0',null,null,null,null,'1','N',null
'MP_CODELISTS_ESI_BUSINESSUNITS','1','Libellé réduit','N','N','O','O',null,null,null,'LIBELLE_REDUIT','X','20','O',null,null,null,'0','0',null,null,null,null,'2','N',null
'MP_CODELISTS_ESI_BUSINESSUNITS','2','Libellé','N','N','O','O',null,null,null,'LIBELLE','X','255','O',null,null,null,'0','0',null,null,null,null,'3','N',null
'MP_CODELISTS_ESI_DEPARTMENTS','0','Code','N','N','O','O',null,null,null,'CODE','X','25','O',null,null,null,'0','0',null,null,null,null,'1','N',null
'MP_CODELISTS_ESI_DEPARTMENTS','1','Libellé réduit','N','N','O','O',null,null,null,'LIBELLE_REDUIT','X','20','O',null,null,null,'0','0',null,null,null,null,'2','N',null
'MP_CODELISTS_ESI_DEPARTMENTS','2','Libellé','N','N','O','O',null,null,null,'LIBELLE','X','255','O',null,null,null,'0','0',null,null,null,null,'3','N',null
'MP_CODELISTS_ESI_JOB_TITLES','0','Code','N','N','O','O',null,null,null,'CODE','X','14','O',null,null,null,'0','0',null,null,null,null,'1','N',null
'MP_CODELISTS_ESI_JOB_TITLES','1','Libellé','N','N','O','O',null,null,null,'LIBELLE','X','32','O',null,null,null,'0','0',null,null,null,null,'2','N',null
'MP_CODELISTS_ESI_LOCATIONS','0','Code','N','N','O','O',null,null,null,'CODE','X','25','O',null,null,null,'0','0',null,null,null,null,'1','N',null
'MP_CODELISTS_ESI_LOCATIONS','1','Libellé réduit','N','N','O','O',null,null,null,'LIBELLE_REDUIT','X','20','O',null,null,null,'0','0',null,null,null,null,'2','N',null
'MP_CODELISTS_ESI_LOCATIONS','2','Libellé','N','N','O','O',null,null,null,'LIBELLE','X','255','O',null,null,null,'0','0',null,null,null,null,'3','N',null
'MP_CODELISTS_ESI_PAY_GRADES','0','Code','N','N','O','O',null,null,null,'CODE','X','4','O',null,null,null,'0','0',null,null,null,null,'1','N',null
'MP_CODELISTS_ESI_PAY_GRADES','1','Libellé','N','N','O','O',null,null,null,'LIBELLE','X','10','O',null,null,null,'0','0',null,null,null,null,'2','N',null
##
STD_TABIDENT
==
DELETE FROM STD_TABIDENT WHERE IDENT='GA_EDITIONS_GAP'
'GA_EDITIONS_GAP','Editions GAP','GA_EDITIONS_GAP','U',NULL,'TG','O','N','N',NULL,'0','0'
##
STD_TABIDENT
==
DELETE FROM STD_TABIDENT WHERE IDENT IN ('MP_CODELISTS_ESI_BUSINESSUNITS','MP_CODELISTS_ESI_DEPARTMENTS','MP_CODELISTS_ESI_JOB_TITLES','MP_CODELISTS_ESI_LOCATIONS','MP_CODELISTS_ESI_PAY_GRADES')
'MP_CODELISTS_ESI_BUSINESSUNITS','Liste des business units pour les codelists','MP_CODELISTS_ESI_BUSINESSUNITS','U',null,'TG','O','O','N',null,'0','0'
'MP_CODELISTS_ESI_DEPARTMENTS','Liste des departments pour les codelists','MP_CODELISTS_ESI_DEPARTMENTS','U',null,'TG','O','O','N',null,'0','0'
'MP_CODELISTS_ESI_JOB_TITLES','Liste des emplois pour les codelists','MP_CODELISTS_ESI_JOB_TITLES','U',null,'TG','O','O','N',null,'0','0'
'MP_CODELISTS_ESI_LOCATIONS','Liste des établissements pour les codelists','MP_CODELISTS_ESI_LOCATIONS','U',null,'TG','O','O','N',null,'0','0'
'MP_CODELISTS_ESI_PAY_GRADES','Liste des niveaux-échelon pour les codelists','MP_CODELISTS_ESI_PAY_GRADES','U',null,'TG','O','O','N',null,'0','0'
##
SYS_AIDE_DYN_2
==
delete from SYS_AIDE_DYN_2 where sujet = upper('Ext.adp.Modules.Signature.SuiviDocumentsEtSignatures') and CODLANG = 'fr_fr' and type='publique'
'fr_fr','EXT.ADP.MODULES.SIGNATURE.SUIVIDOCUMENTSETSIGNATURES','<h3>Filtres</h3>La liste des signataires proposée dans le filtre est constituée à partir de la liste des procédures de signature électronique restituée dans le tableau.<br><br><h3>Boutons de tableau<br></h3>Le bouton "AFFICHER" met à jour le statut d''édition. Il ne génère pas d''appel à Document Container.<br><br>Le bouton "LANCER / RELANCER LES PROCéDURES SÉLÉCTIONNÉES" lance dans Document Container les procédures sélectionnées du tableau, c''est-à-dire pour lesquelles la fusée a été activée.<br><br>Le bouton "RAFRAÎCHIR LES STATUTS" génère un appel en masse à Container afin de mettre à jour le statut pour toutes les procédures de signature électronique en cours.<br><br>L''export au format Excel des données du tableau peut être lancé grâce à l''icône Excel dans une feuille.<br><br><h3>Fonctionnement de l''écran<br></h3>Après qu''une édition avec signature électronique a été lancée, une ligne est ajoutée dans l''écran. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi n''est pas active, <br>la procédure de signature électronique est automatiquement lancée à Document Container. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi est active, <br>le document est téléchargeable pour modification avant son chargement par l''utilisateur au format PDF. <br>Le document chargé devra avoir le même nom que le document d''origine à l''extension près. <br>Cela garantit que le document est en relation avec la procédure initiée.<br>L''utilisateur devra ensuite lancer manuellement la procédure.<br><br>Avec les icônes de chaque ligne de gauche à droite, l''utilisateur peut respectivement : <br>- annuler la procédure, <br>- télécharger le document, <br>- charger un document modifié, <br>- consulter le détail de la procédure, <br>- modifier un signataire <br>- et sélectionner la procédure pour lancement.<br>','publique','2020-11-17 18:28:22.0'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where coderr in ('ABS00069','ABS00070')
'ABS00069','GTA','fr_fr','0','Vous ne pouvez pas modifier le statut de cette pièce justificative','1'
'ABS00070','GTA','fr_fr','0','Le statut est invalide','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('IMPGR044')
'IMPGR044','TGE','fr_fr',0,'La ligne du fichier excel est incomplète.',3
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR = 'GENPRE10'
'GENPRE10','GEN','fr_fr','0','Pour information, mail et téléphone professionnels ou personnels sont obligatoires en cas de signature électronique. Veuillez compléter votre saisie, le cas échéant.','2'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR ='GENWK105' AND CODMOD ='GEN' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
'GENWK105','GEN','fr_fr','0','La date d''attribution du véhicule ne peut pas être antérieure à celle du contrat. Veuillez corriger votre saisie.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('IMPEX084', 'IMPEX034')
'IMPEX084','TGE','fr_fr','0','Une erreur s''est produite pendant la suppression de la ligne d''annulation importée.','1'
'IMPEX034','TGE','fr_fr','0','Le type de l''import n''est pas correct : #1 (DV -> #2, Elément -> #3, DR -> #4, DR cotis. -> #5, Incident -> #6, Absence -> #7, GAP -> #8, GAP RETRO -> #9, Annulation -> #10).','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'STD' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('MOB00054')
'MOB00054','STD','fr_fr',0,'#1.#2 l''Organization Job #3  n''existe pas.',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and  CODERR in ('GENWK100', 'GENWK101','GENWK102','GENCNT78')
'GENWK100','GEN','fr_fr','0','Pour information, il y a une suspension de contrat toujours en cours pour ce salarié. Assurez-vous que votre action est justifiée.','2'
'GENWK101','GEN','fr_fr','0','Pour information, la période insérée est en chevauchement partiel ou total avec une période de suspension pour ce salarié.  Assurez-vous que votre action est justifiée.','2'
'GENWK102','GEN','fr_fr','0','Il y a une suspension de contrat en cours sur votre dossier, votre demande ne peut aboutir.','1'
'GENCNT78','GEN','fr_fr','0','Attention, la date de fin prévue du CDD est antérieure à la date de fin prévue de la suspension de contrat. Assurez-vous de la cohérence et faites les modifications nécessaires.','2'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR ='GENWKF13' AND CODMOD ='GEN' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
'GENWKF13','GEN','fr_fr','0','La date d''effet est antérieure à la date de paie en cours. Il est peut-être nécessaire de saisir des données de rappels.','2'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR IN ('STDTAB80','STDTAB81') AND CODMOD ='TAB' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
'STDTAB80','TAB','fr_fr','0','L''alias # n''est plus consultable depuis les API Marketplace','2'
'STDTAB81','TAB','fr_fr','0','Cet id Marketplace est déjà associé à l''alias ','2'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('EDI00098', 'EDI00099')
'EDI00098','EDI','fr_fr','0','La génération se terminera dans quelques instants. Vous serez averti lorsque le fichier sera prêt. Il sera accessible depuis l''écran Fichiers disponibles.','1'
'EDI00099','EDI','fr_fr','0','La génération est en cours, merci de patienter. Vous pouvez fermer ce slide-in, vous serez averti lorsque le fichier sera disponible','1'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Modules/ZPaie/SlideInGestionPJAbs.js'
'Modules/ZPaie/SlideInGestionPJAbs.js', 'Gérer les pièces justificatives'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE in ('Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager')
'Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager','Créer une délégation'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Modules/ZPaie/modal/ConsultationFeuilleChargeeAnnulation.jsp'
'Modules/ZPaie/modal/ConsultationFeuilleChargeeAnnulation.jsp','Consultation d''une feuille chargée de ligne d''annulation'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='Ext.adp.Modules.Signature.GroupeSignataires' and IDREQUETE in (1, 2,3)
'Ext.adp.Modules.Signature.GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC','GROUPE_SIGNATAIRES,LIBELLE,DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','NUMPAC=%1', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Description,Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','2','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC','GROUPE_SIGNATAIRES,LIBELLE,NUMPAC,DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE',NULL, '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Numéro de pac,Description, Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','3','Utilisateur','SIGN_SIGNATAIRE S, SYS_USR_CONFIG CON, SYS_USR_CONNU UC, SECUMATRIC SECU','S.AOID,S.NOM,S.PRENOM,S.EMAIL','S.AOID', 'not exists (select 1 from SIGN_GROUPE_SIGNATAIRES G where S.AOID = G.AOID and GROUPE_SIGNATAIRES = %1) and CON.LOGIN = S.AOID and SECU.MATRIC(+) = CON.REQUETEMATRIC and UC.LOGIN(+) = S.AOID and case when CON.REQUETEMATRIC is null then 1  when CON.REQUETEMATRIC is not null and (SECU.DSFCN is null or (SECU.DSFCN >= to_char(sysdate, ''yyyymmdd'') and to_char(to_date(UC.DATEFINACCES, ''dd.mm.yyyy''), ''yyyymmdd'') >= to_char(sysdate, ''yyyymmdd''))) then 1 end = 1', '0',NULL,NULL,NULL,NULL,'Login,Nom,Prénom,Email'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_Signataires' and IDREQUETE = 1
'ESG_Signataires','1','Utilisateur','SIGN_SIGNATAIRE','NOM,PRENOM,FONCTION','AOID,NOM,PRENOM,FONCTION','EXISTS   (SELECT 1   FROM     (SELECT H.LOGIN,H.SIGN_LISTE_MANDATAIRES,       H.DATE_LANCEMENT,       CASE         WHEN G.TYPE IS NOT NULL         THEN G.TYPE         WHEN A.ATTEST_ID IS NOT NULL         THEN ''A''         ELSE ''''       END AS TYPEDOC,       CASE         WHEN H.SIGN_PROCEDURE IS NULL         THEN ''N''         ELSE ''O''       END AS FILTRE_SOUMISSIGNATURE     FROM EDI_HISTO_LANCEMENTS H     LEFT OUTER JOIN EDI_DS_LANCEMENT L     ON L.ID_HISTO_LANCEMENT=H.ID_LANCEMENT     LEFT OUTER JOIN EDI_DS_STATUTS DS     ON DS.CODE_STATUT=L.STATUT     LEFT OUTER JOIN GA_EDITIONS_GAP G     ON G.CODE=L.ID_MAQUETTE     LEFT OUTER JOIN GA_ATTESTATION_TYPES A     ON A.FAMEDI                     =H.FAMEDI     AND A.CODEDI                    =H.CODEDI     WHERE H.SIGN_LISTE_MANDATAIRES IS NOT NULL     )   WHERE ((''%1'' is null OR ''%2'' is null) OR DATE_LANCEMENT BETWEEN TO_DATE(''%1'',''dd.MM.yyyy'') AND TO_DATE(''%2'',''dd.MM.yyyy''))   AND (''%1'' is null OR DATE_LANCEMENT >= TO_DATE(''%1'',''dd.MM.yyyy''))   AND (''%2'' is null OR DATE_LANCEMENT <= TO_DATE(''%2'',''dd.MM.yyyy''))   AND (''%3'' is null OR TYPEDOC                = ''%3'')   AND (''%4'' != ''O'' OR FILTRE_SOUMISSIGNATURE = ''%4'')   AND '',''     ||SIGN_LISTE_MANDATAIRES     ||'','' LIKE ''%,''     ||AOID     ||'',%''   AND LOGIN = @LOGIN@)','0','true','NOM',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_GroupeSignataires' and IDREQUETE = 1
'ESG_GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','GROUPE_SIGNATAIRES, LIBELLE','GROUPE_SIGNATAIRES, LIBELLE','exists (select 1 from SIGN_GROUPE_SIGNATAIRES S where S.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES)','0','true','GROUPE_SIGNATAIRES',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='Ext.adp.Modules.Signature.GroupeSignataires' and IDREQUETE in (1, 2)
'Ext.adp.Modules.Signature.GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','NUMPAC=%1', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Description,Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','2','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.NUMPAC,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE',null, '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Numéro de pac,Description, Rattaché dans l''arbre'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='Ext.adp.Modules.Signature.GroupeSignataires' and IDREQUETE in (1, 2)
'Ext.adp.Modules.Signature.GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','NUMPAC=%1 and @SECUPAC_SANSQUOTE@', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Description,Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','2','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.NUMPAC,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','@SECUPAC_SANSQUOTE@ or D.NUMPAC is null', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Numéro de pac,Description, Rattaché dans l''arbre'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP where nompage = 'SortieManagerRechercheDelegue'  and idrequete=1
'SortieManagerRechercheDelegue','1','Utilisateur','SECUMATRIC LEFT JOIN (Select LOGIN, REQUETEMATRIC FROM SYS_USR_CONFIG_IHM ) ON REQUETEMATRIC = MATRIC LEFT JOIN (SELECT distinct MATRICPERE FROM ORG_SUBALTERNE) ON MATRICPERE = MATRIC','LOGIN,MATRIC,NOM,PRENOM,CASE WHEN MATRICPERE IS NULL THEN ''FALSE'' ELSE ''TRUE'' END','LOGIN,MATRIC,NOM,PRENOM,CASE WHEN MATRICPERE IS NULL THEN ''FALSE'' ELSE ''TRUE'' END','(NVL(TO_DATE(REPLACE(''%2'',''DSFCN'',''%3''),''dd.mm.yyyy'')+1,TRUNC(SYSDATE,''dd''))&gt;SYSDATE OR %1 ) AND LOGIN IS NOT NULL','0',NULL,'LOGIN',NULL,'Recherche d''un delegue lors de la sortie d''un manager',NULL
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE IN ('TAB_RD_RUBRIQUE','TAB_RD_RUBRIQUE_CUM') AND IDREQUETE = 1
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_RUBRIQUE','1','Utilisateur','TGE_RESPAIE_RUBRIQUES_IHM TRR','TRR.CODERUB,REGEXP_REPLACE(TRR.LIBRUB^''<''^''< ''),TRR.CODECAISSE,TRR.NOMBRE,TRR.TAUX,TRR.MONTANT,TRR.SENS,TRR.IMPUTATION,TRR.CODERES,TRR.ORDRE,TRR.NATURERUB,TRR.TYPE,TRR.CLASSE,to_char(TRR.PERIODEPAIE^''MM.YYYY''),to_char(TRR.PERIODE_AFFECTATION^''MM.YYYY''),to_char(TRR.PERIODE_RATTACH_DEB^''DD.MM.YYYY''),to_char(TRR.PERIODE_RATTACH_FIN^''DD.MM.YYYY''),to_char(TRR.DATE_DEB_ARRET^''DD.MM.YYYY''),TRR.LIB_PERIODE_EMPLOI_2','TRR.CODERUB,TRR.LIBRUB,TRR.CODERES,TRR.IMPUTATION,TRR.CODECAISSE,TRR.NOMBRE,TRR.TAUX,TRR.MONTANT,TRR.SENS,TRR.ORDRE,TRR.NATURERUB,TRR.TYPE,TRR.CLASSE,to_char(TRR.PERIODEPAIE^''MM.YYYY''),to_char(TRR.PERIODE_AFFECTATION^''MM.YYYY''),to_char(TRR.PERIODE_RATTACH_DEB^''DD.MM.YYYY''),to_char(TRR.PERIODE_RATTACH_FIN^''DD.MM.YYYY''),to_char(TRR.DATE_DEB_ARRET^''DD.MM.YYYY''),TRR.PERIODE_TRI,TRR.LIB_PERIODE_EMPLOI_2','TRR.NUMPAC=''@GEN_NUMPAC@''¿and TRR.PACMAT=''@GEN_PACMAT@''¿and TRR.PERIODEPAIE >=DECODE(''@TRAV_PER_RUBRIQUE1@'',NULL,TRR.PERIODEPAIE,TO_DATE(''@TRAV_PER_RUBRIQUE1@'',''DD.MM.YYYY''))¿and TRR.PERIODEPAIE <=DECODE(''@TRAV_PER_RUBRIQUE2@'',NULL,TRR.PERIODEPAIE,TO_DATE(''@TRAV_PER_RUBRIQUE2@'',''DD.MM.YYYY''))¿¿and ''OK''=(CASE¿WHEN ''@ZRU_CHOIX_PLAGE@'' IS NULL¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_PLAGE@'' != ''$'' AND TRR.NATURERUB = ''@ZRU_CHOIX_PLAGE@''¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_PLAGE@'' = ''$'' AND TRR.NATURERUB IN (''B'',''S'')¿ THEN ''OK''¿ELSE ''KO'' END) ¿¿and ''OK''=(CASE¿WHEN ''@ZRU_LIBRUB@'' IS NULL¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_LIBRUB@'' = ''1'' AND (NVL(TRR.LIBRUB, ''*'') LIKE ''@ZRU_LIBRUB@%'' OR TRR.CODERUB LIKE ''@ZRU_LIBRUB@%'')¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_LIBRUB@'' = ''2'' AND (NVL(TRR.LIBRUB, ''*'') LIKE ''%%@ZRU_LIBRUB@%'' OR TRR.CODERUB LIKE ''%%@ZRU_LIBRUB@%'')¿ THEN ''OK''¿ELSE ''KO'' END)¿¿and ((''@ZRU_CHOIX_MONTANT@'' is null) or (''@ZRU_CHOIX_MONTANT@'' = ''0'') or (''@ZRU_CHOIX_MONTANT@'' = ''1''¿and  TRR.MONTANT > to_number(replace(''@ZRU_MONTANT@'',''.'','',''))) or (''@ZRU_CHOIX_MONTANT@'' = ''2''¿and TRR.MONTANT >= to_number(replace(''@ZRU_MONTANT@'',''.'','',''))) or (''@ZRU_CHOIX_MONTANT@'' = ''3''¿and TRR.MONTANT = to_number(replace(''@ZRU_MONTANT@'',''.'','',''))) or (''@ZRU_CHOIX_MONTANT@'' = ''4''¿and  TRR.MONTANT < to_number(replace(''@ZRU_MONTANT@'',''.'','',''))) or (''@ZRU_CHOIX_MONTANT@'' = ''5''¿and  TRR.MONTANT <= to_number(replace(''@ZRU_MONTANT@'',''.'','',''))))','0','false','TRR.PAIEZAD DESC,TRR.NUMCNT DESC,TRR.PERIODE_TRI DESC,TRR.CODERUB,TRR.CODERES',NULL,'Tableau rubrique détail','Code,Intitulé,Caisse,Nombre,Taux,Montant,Sens,Code imputation,Code résultat,Ordre de calcul,Nature de rubrique,Type,Classe de rubrique,Période,Période affectation,Début rattachement,Fin rattachement,Début arrêt,Période d''emploi'
'TAB_RD_RUBRIQUE_CUM','1','Utilisateur','(SELECT TRR.CODERUB,min(TRR.LIBRUB) AS LIBRUB,¿ min(TRR.CODECAISSE) AS CODECAISSE,¿ sum(TRR.NOMBRE) AS NOMBRE,¿ sum(TRR.MONTANT) AS MONTANT,¿ min(TRR.SENS) AS SENS,¿ min(TRR.NATURERUB) AS NATURERUB,¿ min(TRR.TYPE) AS TYPE,¿ min(TRR.CLASSE) AS CLASSE,¿ TRR.LIB_PERIODE_EMPLOI_2,¿ min(TRR.PAIEZAD) AS PAIEZAD,¿ min(TRR.NUMCNT) AS NUMCNT¿FROM TGE_RESPAIE_RUBRIQUES_IHM TRR¿WHERE TRR.NUMPAC=''@GEN_NUMPAC@''¿and TRR.PACMAT=''@GEN_PACMAT@''¿and TRR.PERIODEPAIE >=DECODE(''@TRAV_PER_RUBRIQUE1@'',NULL,TRR.PERIODEPAIE,TO_DATE(''@TRAV_PER_RUBRIQUE1@'',''DD.MM.YYYY''))¿and TRR.PERIODEPAIE <=DECODE(''@TRAV_PER_RUBRIQUE2@'',NULL,TRR.PERIODEPAIE,TO_DATE(''@TRAV_PER_RUBRIQUE2@'',''DD.MM.YYYY''))¿¿and ''OK''=(CASE¿WHEN ''@ZRU_CHOIX_PLAGE@'' IS NULL¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_PLAGE@'' != ''$'' AND TRR.NATURERUB = ''@ZRU_CHOIX_PLAGE@''¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_PLAGE@'' = ''$'' AND TRR.NATURERUB IN (''B'',''S'')¿ THEN ''OK''¿ELSE ''KO'' END)¿¿and ''OK''=(CASE¿WHEN ''@ZRU_LIBRUB@'' IS NULL¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_LIBRUB@'' = ''1'' AND (NVL(TRR.LIBRUB, ''*'') LIKE ''@ZRU_LIBRUB@%'' OR TRR.CODERUB LIKE ''@ZRU_LIBRUB@%'')¿ THEN ''OK''¿WHEN ''@ZRU_CHOIX_LIBRUB@'' = ''2'' AND (NVL(TRR.LIBRUB, ''*'') LIKE ''%%@ZRU_LIBRUB@%'' OR TRR.CODERUB LIKE ''%%@ZRU_LIBRUB@%'')¿ THEN ''OK''¿ELSE ''KO'' END)¿¿group by TRR.CODERUB,TRR.LIB_PERIODE_EMPLOI_2) TRR','TRR.CODERUB,REGEXP_REPLACE(TRR.LIBRUB^''<''^''< ''),TRR.CODECAISSE,TRR.NOMBRE,TRR.MONTANT,TRR.SENS,TRR.NATURERUB,TRR.TYPE,TRR.CLASSE,TRR.LIB_PERIODE_EMPLOI_2','TRR.CODERUB,TRR.LIBRUB,TRR.CODECAISSE,TRR.NOMBRE,TRR.MONTANT,TRR.SENS,TRR.NATURERUB,TRR.TYPE,TRR.CLASSE,TRR.LIB_PERIODE_EMPLOI_2','((''@ZRU_CHOIX_MONTANT@'' is null) ¿or (''@ZRU_CHOIX_MONTANT@'' = ''0'')¿or (''@ZRU_CHOIX_MONTANT@'' = ''1'' and  TRR.MONTANT > to_number(replace(''@ZRU_MONTANT@'',''.'','','')))¿or (''@ZRU_CHOIX_MONTANT@'' = ''2'' and TRR.MONTANT >= to_number(replace(''@ZRU_MONTANT@'',''.'','','')))¿or (''@ZRU_CHOIX_MONTANT@'' = ''3'' and TRR.MONTANT = to_number(replace(''@ZRU_MONTANT@'',''.'','','')))¿or (''@ZRU_CHOIX_MONTANT@'' = ''4'' and  TRR.MONTANT < to_number(replace(''@ZRU_MONTANT@'',''.'','','')))¿or (''@ZRU_CHOIX_MONTANT@'' = ''5'' and  TRR.MONTANT <= to_number(replace(''@ZRU_MONTANT@'',''.'','',''))))','0','false','TRR.PAIEZAD DESC,TRR.NUMCNT DESC,TRR.CODERUB',NULL,'Tableau rubrique cumulé','Code,Intitulé,Caisse,Nombre,Montant,Sens,Nature de rubrique,Type,Classe de rubrique,Période d''emploi'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_COT_CFE'
'TAB_RD_COT_CFE','1','Utilisateur','CFE','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code CFE - expat','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_MAL_CFE'
'TAB_RD_MAL_CFE','1','Utilisateur','CATMA','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie MALADIE CFE - expat','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_VIEIL_CFE'
'TAB_RD_VIEIL_CFE','1','Utilisateur','CATVI','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie VIEILLESSE CFE - expat','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_CODET_DETAC'
'TAB_RD_CODET_DETAC','1','Utilisateur','CODET','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie particuliers - détachés','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_POLEM_EXP'
'TAB_RD_POLEM_EXP','1','Utilisateur','POLEM','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Codes particuliers PE - expat','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_LIEU_DETAC'
'TAB_RD_LIEU_DETAC','1','Utilisateur','GA_LIDET','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Lieux détachements','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_MOTIF_EXPAT'
'TAB_RD_MOTIF_EXPAT','1','Utilisateur','GA_EXPAT','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Motifs expatriation','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'TAB_RD_TYPE_EXPAT_DETAC'
'TAB_RD_TYPE_EXPAT_DETAC','1','Utilisateur','GA_DETAC','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Type expatriation ou détachement','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE IN ('TAB_RD_PER_CUMCOTM','TAB_RD_PER_CUMCOT') AND IDREQUETE = '1'
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_PER_CUMCOT','1','Utilisateur','(select ¿to_char(dtdeb_cumcot,''DD.MM.YYYY'') as a,¿regexp_replace(to_char(dtdeb_cumcot,''Month YYYY''),''[ ]+'','' '') as b,¿to_char(dtdeb_cumcot,''YYYYMMDD'') as c¿from dic_tge_respaie_cumcot¿where numpac = ''%1'' and pacmat = ''%2'')¿union¿(select  ¿''31.12.2099'' as a,¿''Toutes'' as b, ¿''20991231'' as c from dual)','a, b, c','a, b',NULL,'0','true','3 desc',NULL,'Recherche périodes CUMCOT',NULL
'TAB_RD_PER_CUMCOTM','1','Utilisateur','(select¿to_char(dtdeb_cumcotm,''YYYY'') as a,¿to_char(dtdeb_cumcotm,''YYYY'') as b¿from dic_tge_respaie_cumcotm¿where numpac = ''%1'' and pacmat = ''%2'')¿union¿(select  ''9999'' as a,¿''Toutes'' as b¿from dual)','a, b','a, b',NULL,'0','true','1 desc',NULL,'Recherche périodes CUMCOTM',NULL
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('TAB_RD_EMPLOI_2','TAB_RD_MOTMED_1')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_MOTMED','1','Utilisateur','GA_MOTVISIT','CODE_MOTIF, LIBELLE_MOTIF','CODE_MOTIF, LIBELLE_MOTIF','(FILLER_1 = ''2'' or FILLER_1 = ''%1'')','0',NULL,'CODE_MOTIF',NULL,'Motifs de visite médicale',NULL
'TAB_RD_EMPLOI','2','Utilisateur','GA_FILIERE A, GA_CODCPN C','A.QUALIFICATION, A.LIBELLE, A.COEFFICIENT, A.CODE_CPN,A.FILIERE,A.REGROUPEMENT_METIER, A.METIER','A.QUALIFICATION , A.LIBELLE , A.COEFFICIENT , A.CODE_CPN , C.LIBELLE, A.LIBELLE,A.FILIERE,A.REGROUPEMENT_METIER, A.METIER,A.CODE_INSEE_EMPLOI','A.CODE_CPN=C.CODCPN AND QUALIFICATION is not null AND NUMPAC=''%1'' and A.FILIERE is not null   and A.REGROUPEMENT_METIER is not null and A.METIER is not null and QUALIFICATION = ''%2''','0','false','A.QUALIFICATION',NULL,'Filière',NULL
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP where NOMPAGE = 'REG_RD_WKF_INSERTION_PERIODE' AND IDREQUETE = '1'
'REG_RD_WKF_INSERTION_PERIODE','1','Administrateur','DIC_ADM_CONTRAT_HISTO','COUNT(*)','COUNT(*)','MATRIC=''%1'' AND DSA301 is not null AND (to_date(''%2'',''dd/MM/yy'')>DSA301 or to_date(''%3'',''dd/MM/yy'') >DSA301) AND (to_date(''%2'',''dd/MM/yy'') <nvl(DSFSUS,nvl(DSA302,to_date(''31/12/99'',''dd/MM/yy''))) or to_date(''%3'',''dd/MM/yy'') <nvl(DSFSUS,nvl(DSA302,to_date(''31/12/99'',''dd/MM/yy''))))','0','false',null,null,'Pour le WKF insertion de période,retourner le nombre de lignes qui chevauchent totalement ou partielement avec les dates de la période insérée','Nombre de ligne'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP where nompage = 'TAB_RD_HISTO_EMPLOI'  and idrequete=2
'TAB_RD_HISTO_EMPLOI','2','Utilisateur','(select ''@DSDCN@''  as DSDCN, ''@DSFCN@'' as DSFCN , ''@QUALPE@'' as QUALPE FROM DUAL)','DSDCN, DSFCN, QUALPE','DSDCN, DSFCN, QUALPE',null,'0',null,null,null,'Historique d''emplois','Date de début, Date de fin, Libellé emploi'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP where nompage = 'TableParametrageDetail.jsp'  and idrequete=2
'TableParametrageDetail.jsp','2','Utilisateur','MP_REFERENTIEL','TABLE_NAME_MP, NVL(IDENT^''Aucun'')','TABLE_NAME_MP, IDENT',null,'0',null,'TABLE_NAME_MP',null,'Id Table Marketplace','Id Marketplace, Alias'
##
SYS_REQUETES_JSP
=SQL IFEXIST=SYS_REQUETES_JSP=
update sys_requetes_jsp set libreq = 'Historiques des mutuelles' where nompage = 'REG_RD_TABMUT'   and idrequete=1
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API' and IDREQUETE IN ('1','2')
'TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API','1','Utilisateur','MP_CONSUMERAPPOID','CONSUMER_APP_OID,LABEL,NVL((SELECT LABEL FROM MP_REF_APP_OWNER WHERE APP_OWNER_ID=MP_CONSUMERAPPOID.CONSUMER_APP_OID_REF)^''Client'')','CONSUMER_APP_OID,LABEL,CONSUMER_APP_OID_REF',null,'0','false','CONSUMER_APP_OID','Applications consommatrices ajoutées','Applications consommatrices','Id Application,Libellé,Propriétaire'
'TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API','2','Utilisateur','MP_REF_CONSUMERAPPOID','CONSUMER_APP_OID,LABEL,(SELECT LABEL FROM MP_REF_APP_OWNER WHERE APP_OWNER_ID=MP_REF_CONSUMERAPPOID.APP_OWNER_ID)','CONSUMER_APP_OID,LABEL,APP_OWNER_ID','CONSUMER_APP_OID NOT IN (SELECT CONSUMER_APP_OID_REF FROM MP_CONSUMERAPPOID WHERE CONSUMER_APP_OID_REF IS NOT NULL)','0','false','CONSUMER_APP_OID','Applications consommatrices à ajouter','Applications consommatrices','Id Application,Libellé,Propriétaire'
##
SYS_SCH_ELEMENT
==
UPDATE SYS_SCH_ELEMENT SET TAGS='_PAS_VISIBLE_' WHERE niveau = '99' and nom_page='Modules/AdpUx/UxHelpdesk.jsp'
##
SYS_SCH_ELEMENT
==
UPDATE SYS_SCH_ELEMENT SET TAGS='_PAS_VISIBLE_' WHERE niveau = '99' and nom_page='Modules/AdpUx/UxOrganigramme.jsp'
##
SYS_SCH_JSON
==
DELETE FROM SYS_SCH_JSON WHERE NOM_PAGE = 'Modules/ZPaie/SaisieAbsencesZPaieIndExpert.jsp' AND NOM_JSON = 'SlideInGestionPJAbsJsonServlet'
'Modules/ZPaie/SaisieAbsencesZPaieIndExpert.jsp', 'SlideInGestionPJAbsJsonServlet'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager'
'Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager', 'CreationDelegationSortieManagerJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager'
'Ext.adp.Moteur.Delegation.DelegationCMD.ChoixDelegationSortieManager', null, 'DELGST04;DELGST05;DELGST15;DELGST17;DELGST18;DELGST19;DELGST21;DELGST22;STD00034', 'CreationDelegationSortieManagerJsonServlet'
##
TAG_CHARSET=@€éèç
##
SYS_STATS_REST_API_DELAY
=SQL IFNOTEXIST=SYS_STATS_REST_API_DELAY=
CREATE TABLE SYS_STATS_REST_API_DELAY (ID_TRACE NUMBER(38) NOT NULL, URI VARCHAR2(2000) NOT NULL, DATE_ACTION TIMESTAMP(6) NOT NULL, DUREE NUMBER(10), SM_TRANSACTION_ID VARCHAR2(500), CONSUMER_APP_OID VARCHAR2(500), ASSOCIATE_OID VARCHAR2(500), ROLE_CODE VARCHAR2(500), OTHER_HEADERS CLOB, PARAMETERS CLOB, HTTP_STATUT VARCHAR2(3), CONSTRAINT PK_SYS_STATS_REST_API_DELAY PRIMARY KEY (ID_TRACE))
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR='ACTIVE_SURVEILLANCE_LENTEURS_REST_API'
'SYS', 'ACTIVE_SURVEILLANCE_LENTEURS_REST_API', '5', 'Entier', 'Permet d''activer les traces liées au temps de traitement des requêtes API (UX et Marketplace) : <0 -> On trace tout, =0 -> Aucune trace, >x -> On trace les requêtes API dont le temps de traitement est supérieurs ou égal à x secondes.'
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='STD' and CODVAR IN ('TYPE_ENTITE_BUSINESS_UNITS','TYPE_ENTITE_DEPARTMENTS')
'STD', 'TYPE_ENTITE_BUSINESS_UNITS', 'BU', 'Texte', 'Code du type entité représentant les business units à retourner pour les codelists.'
'STD', 'TYPE_ENTITE_DEPARTMENTS', 'SERVICE', 'Texte', 'Code du type entité représentant les departments à retourner pour les codelists.'
##
TESTAUTO_COMMAND
=SQL IFEXIST=TESTAUTO_COMMAND=
UPDATE TESTAUTO_COMMAND SET LIBELLE = 'Rechercher et charger un collaborateur dans le bandeau à partir de son nom ou de son identifiant RH', PARAM1 = 'Nom de famille ou Id RH' WHERE COMMAND = 'FIND_COL'
##
TESTAUTO_COMMAND
==
DELETE FROM TESTAUTO_COMMAND WHERE COMMAND = 'VALID_DATE_EFF'
'VALID_DATE_EFF','Valide le composant avec la date d''effet passée en paramètre sinon à la date d''effet en cours','Date d''effet',NULL,NULL,NULL
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_LISTE
=SQL IFNOTEXIST=TGE_IMPORT_LISTE=FSED_WITH_ANNULATION=
alter table TGE_IMPORT_LISTE add FSED_WITH_ANNULATION varchar2(1) default 'N'
##
TAG_CHARSET=@€éèç
##
TGE_REF_CARTE_FSED
=SQL IFEXIST=TGE_REF_CARTE_FSED=FORMATAGE_SQL=
ALTER TABLE TGE_REF_CARTE_FSED MODIFY FORMATAGE_SQL VARCHAR2(3500 BYTE)
##
TGE_REF_CARTE_FSED
==
DELETE from TGE_REF_CARTE_FSED where CODE_CARTE in ('00','00_ALP','11','29_30_DIF_FSED','29_30_DIF_FSED_RETRO','29_30_TGE_ELEMENT_PAIE','29_30_TGE_ELEMENT_PAIE_RETRO','309','309_RETRO','30_SIMULATION_PAIE','40','40_RETRO','409','409_RETRO','40_SIMULATION_PAIE','50','509','60','60_RETRO','609','609_RETRO','60_ABSENCES','60_SIMULATION_PAIE','70','70_RETRO','70_SIMULATION_PAIE','99','ANNULATION','ANNULATION_RETRO','ANNULATION_PERIODE_EMPLOI','IJEDI','W566','W566_RETRO','WL70','WL70_RETRO') and ORIGINE_CARTE='RD'
##
TGE_REF_CARTE_FSED
'00','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','005','TGE',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'00_ALP','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','005','ALP',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00_ALP','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00_ALP','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00_ALP','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00_ALP','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00_ALP','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00_ALP','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00_ALP','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'11','RD','SELECT','001',NULL,'TGE_REF_VRVAL','NUMERO_DE_PAC','6','0','FALSE',NULL,NULL
'11','RD','SELECT','002','11',NULL,NULL,'2','0','FALSE',NULL,NULL
'11','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','004',NULL,'TGE_REF_VRVAL','CODE_TABLE','3',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,0,3)'
'11','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,4,2)'
'11','RD','SELECT','007',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','008','V',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','009',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','011',NULL,'TGE_REF_VRVAL','NUMERO_DE_LIGNE','1',NULL,'FALSE','SUBSTR(@COLONNE_CIBLE@,9,1)',NULL
'11','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','013',NULL,'TGE_REF_VRVAL','LONGUEUR_INFO','3','0','FALSE',NULL,NULL
'11','RD','SELECT','014',NULL,'TGE_REF_VRVAL','ENREGISTREMENT','86',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','015',NULL,NULL,NULL,'66',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','016',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','018','3',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','019',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'11','RD','SELECT','020',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'11','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','024',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','025',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'11','RD','SELECT','026',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL',NULL
'11','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRREP',NULL
'11','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.NUMERO_DE_PAC = TGE_REF_VRREP.NUMERO_DE_PAC',NULL
'11','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.CODE_TABLE = TGE_REF_VRREP.CODE_TABLE',NULL
'11','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.TEMOIN_VR_BASE in(''O'',''K'')',NULL
'29_30_DIF_FSED','RD','SELECT','001',NULL,'DIF_FSED','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','001',NULL,'DIF_FSED_PARTIERETRO','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','004',NULL,'DIF_FSED','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','004',NULL,'DIF_FSED_PARTIERETRO','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','007',NULL,'DIF_FSED','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','007',NULL,'DIF_FSED_PARTIERETRO','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','009',NULL,'DIF_FSED','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','009',NULL,'DIF_FSED_PARTIERETRO','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','012',NULL,'DIF_FSED','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED_RETRO','RD','SELECT','012',NULL,'DIF_FSED_PARTIERETRO','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED','RD','SELECT','013',NULL,'DIF_FSED','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','013',NULL,'DIF_FSED_PARTIERETRO','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE_DONNEE'
'29_30_DIF_FSED','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_DIF_FSED','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_DIF_FSED','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_DIF_FSED','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','021','DIF_FSED_PARTIERETRO',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_DIF_FSED','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_DIF_FSED','RD','SELECT','024',NULL,'DIF_FSED','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED_RETRO','RD','SELECT','024',NULL,'DIF_FSED_PARTIERETRO','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_DIF_FSED_RETRO','RD','SELECT','025',NULL,'DIF_FSED_PARTIERETRO','PERIODE','6',0,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_DIF_FSED','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',' TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','/*+ FULL(DIF_FSED_PARTIERETRO)*/ TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CODEOP',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CODEOP',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CLE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CLE',NULL
'29_30_DIF_FSED','RD','FROM_WITH','001',NULL,'DAC',NULL,NULL,NULL,NULL,'WITH DAC AS (select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') group by C.MATRIC,C.PACMAT,DACH.PAIEZAD)',NULL
'29_30_DIF_FSED','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED',NULL
'29_30_DIF_FSED_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO',NULL
'29_30_DIF_FSED','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_DIF_FSED','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'PAIEZAD,ELEM,CLE,CODEOP,OCC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','001',NULL,'TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','004',NULL,'TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','007',NULL,'TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','009',NULL,'TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','011',NULL,'TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','012',NULL,'TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','019',NULL,'TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','020',NULL,'TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','021',NULL,'TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','022',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','023',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','024',NULL,'TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','SELECT','025',NULL,'TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ELEMENTS_PAIE.ORIGINE is null or TGE_ELEMENTS_PAIE.ORIGINE = ''T'' or TGE_ELEMENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT is not null) ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_ELEMENTS_PAIE.ACTION_RETRO is null ',NULL
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' AND TGE_ELEMENTS_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=tge_elements_paie.idpacmat) AND TGE_ELEMENTS_PAIE.ACTION_RETRO is not null ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'309','RD','SELECT','001',NULL,'MAJELEM','PAC','6','0','FALSE',NULL,NULL
'309','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'309','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','004',NULL,'MAJELEM','MATPAIE','8','0','FALSE',NULL,NULL
'309','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'309','RD','SELECT','007',NULL,'MAJELEM','NUMERO','4','0','FALSE',NULL,NULL
'309','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','009',NULL,'MAJELEM','INDICATI','16',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','011',NULL,'MAJELEM','SENS','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','012',NULL,'MAJELEM','INFORMAT','40',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','015',NULL,NULL,NULL,'76',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','016',NULL,'MAJELEM','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'309','RD','SELECT','017',NULL,'MAJELEM','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'309','RD','SELECT','018',NULL,'MAJELEM','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'309','RD','SELECT','019',NULL,'MAJELEM','CODR','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','020','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','021',NULL,'MAJELEM','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'309','RD','SELECT','022',NULL,'MAJELEM','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'309','RD','SELECT','023',NULL,'MAJELEM','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'309','RD','SELECT','024',NULL,'MAJELEM','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','026','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','030','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM',NULL
'309','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'309_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'309','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'309_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(MAJELEM.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'309_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT ',NULL
'309','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'309_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'309','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.MATRICUL,MAJELEM.NUMERO',NULL
'30_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'30_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'30_SIMULATION_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'30_SIMULATION_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'30_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'30_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'30_SIMULATION_PAIE','RD','SELECT','021',NULL,'SIMU_TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'30_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'30_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'30_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'30_SIMULATION_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','SIMU_TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'30_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'30_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE',NULL
'30_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'30_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'30_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'30_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'40','RD','SELECT','001',NULL,'TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','004',NULL,'TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','007',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','012',NULL,'TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','016',NULL,'TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40','RD','SELECT','017',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','018',NULL,'TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40','RD','SELECT','019',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','020',NULL,'TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','022',NULL,'TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40','RD','SELECT','023',NULL,'TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40','RD','SELECT','029',NULL,'TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','031',NULL,'TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','032',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40','RD','SELECT','033',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40','RD','SELECT','034',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','035',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'40_RETRO','RD','SELECT','035',NULL,'TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','037',NULL,'TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,' TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'40','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'40','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'40','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'40','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'40','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'40','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') @@@OPERATEUR_RETRO@@@ TGE_REF_PAC.PERIODEENCOURS and TGE_INCIDENTS_PAIE.ACTION_RETRO is null ',NULL
'40_RETRO','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,' and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_INCIDENTS_PAIE.idpacmat) and NVL(TGE_INCIDENTS_PAIE.DERNIER_CODE_OPE,''M'')!=''S'' ',NULL
'40','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE = TGE_REF_PAC.PERIODEENCOURS',NULL
'40_RETRO','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'40','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'40','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET <= TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40_RETRO','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'40','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE @@@OPERATEUR_RETRO@@@ (select PERIODEENCOURS from tge_ref_pac where NUMPAC = @@@NUMPAC@@@) ',NULL
'40_RETRO','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE in (SELECT periode_retro FROM gap_trt_mois_retro g WHERE id_trt =@@@ID_TRT@@@ and G.NUMPAC=TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC and G.pacmat=TGE_PERIODE_RECUEIL_PAIEZAD.pacmat) ',NULL
'40','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'409','RD','SELECT','001',NULL,'POINTAGE','PAC','6','0','FALSE',NULL,NULL
'409','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'409','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','004',NULL,'POINTAGE','MATPAIE','8','0','FALSE',NULL,NULL
'409','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'409','RD','SELECT','007',NULL,'POINTAGE','PTJDEB','8',NULL,'FALSE','TO_CHAR(PTJDEB,''YYYYMMDD'')',NULL
'409','RD','SELECT','008',NULL,'POINTAGE','PTJFIN','8',NULL,'FALSE','TO_CHAR(PTJFIN,''YYYYMMDD'')',NULL
'409','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','016',NULL,'POINTAGE','PTJHT','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_TRAVAILLEES'
'409','RD','SELECT','017',NULL,'POINTAGE','PTJHT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','018',NULL,'POINTAGE','PTJHI','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_INCIDENT'
'409','RD','SELECT','019',NULL,'POINTAGE','PTJHI','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','020',NULL,'POINTAGE','PTJCI','5',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','022',NULL,'POINTAGE','IMP','18',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','023',NULL,'POINTAGE','DOMIMP','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','024',NULL,'POINTAGE','REF','6',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','025',NULL,'POINTAGE','DOMREF','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','027',NULL,'POINTAGE','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'409','RD','SELECT','028',NULL,'POINTAGE','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'409','RD','SELECT','029',NULL,'POINTAGE','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'409','RD','SELECT','030',NULL,'POINTAGE','CODR','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','031','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','032',NULL,'POINTAGE','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'409','RD','SELECT','033',NULL,'POINTAGE','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'409','RD','SELECT','034',NULL,'POINTAGE','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'409','RD','SELECT','035',NULL,'POINTAGE','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','037','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','041','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as TYPE_IP_FROM_TABLE',NULL
'409','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as CODE_IP_FROM_TABLE',NULL
'409','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE',NULL
'409','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'409_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'409','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'409_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(POINTAGE.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'409_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'409','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'409_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'409','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.MATRICUL',NULL
'40_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40_SIMULATION_PAIE','RD','SELECT','017',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(SIMU_TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN SIMU_TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40_SIMULATION_PAIE','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40_SIMULATION_PAIE','RD','SELECT','029',NULL,'SIMU_TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','037',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE',NULL
'40_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'50','RD','SELECT','001',NULL,'TGE_IMPUTATIONS','NUMPAC','6','0','FALSE',NULL,NULL
'50','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'50','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','004',NULL,'TGE_IMPUTATIONS','PAIEZAD','8','0','TRUE',NULL,NULL
'50','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','007',NULL,'TGE_IMPUTATIONS','NB_UNITE','15','0','TRUE',NULL,'FORMATAGE_NBRE_IMPUTATION'
'50','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','009',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','011',NULL,'TGE_IMPUTATIONS','IMPUTATION','18',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','015',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','016',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'50','RD','SELECT','017',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'50','RD','SELECT','018',NULL,'TGE_IMPUTATIONS','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'50','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','020',NULL,'TGE_IMPUTATIONS','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','021',NULL,'TGE_IMPUTATIONS','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'50','RD','SELECT','022',NULL,'TGE_IMPUTATIONS','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'50','RD','SELECT','023',NULL,'TGE_IMPUTATIONS','PERIODE','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'50','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'50','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','026',NULL,'TGE_IMPUTATIONS','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'50','RD','SELECT','030',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'50','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'50','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'50','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'50','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS',NULL
'50','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS.NUMPAC = @@@NUMPAC@@@',NULL
'50','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PAIEZAD = DAC.PAIEZAD',NULL
'50','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.DERNIER_CODE_OPE <> ''S''',NULL
'50','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_IMPUTATIONS.ORIGINE is null or TGE_IMPUTATIONS.ORIGINE = ''T'' or TGE_IMPUTATIONS.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' ))))',NULL
'50','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PERIODE <= @@@PERIODE_PAIE@@@',NULL
'50','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'509','RD','SELECT','001',NULL,'MAJIMPU','PAC','6','0','FALSE',NULL,NULL
'509','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'509','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','004',NULL,'MAJIMPU','MATPAIE','8','0','FALSE',NULL,NULL
'509','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'509','RD','SELECT','007',NULL,'MAJIMPU','NOMBRE','15','0','FALSE',NULL,NULL
'509','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','009',NULL,'MAJIMPU','CODEUTIL','3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','011',NULL,'MAJIMPU','IMPUTATI','18',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','014',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','015',NULL,'MAJIMPU','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'509','RD','SELECT','016',NULL,'MAJIMPU','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'509','RD','SELECT','017',NULL,'MAJIMPU','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'509','RD','SELECT','018',NULL,'MAJIMPU','CODR','1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','019','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','020',NULL,'MAJIMPU','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'509','RD','SELECT','021',NULL,'MAJIMPU','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'509','RD','SELECT','022',NULL,'MAJIMPU','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'509','RD','SELECT','023',NULL,'MAJIMPU','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'509','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','025','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','026',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','028','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','029',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'509','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU',NULL
'509','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'509','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'509','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'509','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'509','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'509','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.MATRICUL',NULL
'60','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'60_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'60','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'60','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'60','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'60','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'60_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'609','RD','SELECT','001',NULL,'RUBDV','PAC','6','0','FALSE',NULL,NULL
'609','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,'FORMATAGE_NUMERO_CARTE_609'
'609','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','004',NULL,'RUBDV','MATPAIE','8','0','FALSE',NULL,NULL
'609','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'609','RD','SELECT','007',NULL,'RUBDV','RUBCOD','4','0','FALSE',NULL,NULL
'609','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','009',NULL,'RUBDV','RUBMTS','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'609','RD','SELECT','010',NULL,'RUBDV','RUBMTS','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','011',NULL,'RUBDV','RUBNBR','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'609','RD','SELECT','012',NULL,'RUBDV','RUBNBR','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','013',NULL,'RUBDV','RUBTAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'609','RD','SELECT','014',NULL,'RUBDV','RUBTAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','015',NULL,'RUBDV','RUBPCT','6',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','016',NULL,'RUBDV','RUBDOM','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','018',NULL,'RUBDV','RUBSIGNE','1',NULL,'FALSE',NULL,'FORMATAGE_RUBSIGNE'
'609','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','020',NULL,'RUBDV','RUBIMPU','18',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','022',NULL,NULL,NULL,'10',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','023',NULL,NULL,NULL,'55',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','024',NULL,'RUBDV','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'609','RD','SELECT','025',NULL,'RUBDV','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'609','RD','SELECT','026',NULL,'RUBDV','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'609','RD','SELECT','027',NULL,'RUBDV','CODR','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','028','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','029',NULL,'RUBDV','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'609','RD','SELECT','030',NULL,'RUBDV','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'609','RD','SELECT','031',NULL,'RUBDV','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'609','RD','SELECT','032',NULL,'RUBDV','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'609','RD','SELECT','033',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','034','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','035',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','036',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','037',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','039','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','040',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'609','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV',NULL
'609','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'609_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'609','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'609_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO =  TO_CHAR(TO_DATE(RUBDV.PERIODE,''MMYYYY''),''YYYYMM'') ',NULL
'609','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'609_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'609','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'609_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'609','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.MATRICUL,RUBDV.RUBCOD',NULL
'60_ABSENCES','RD','SELECT','001',NULL,'TGE_ABSENCES','NUMPAC','6','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_ABSENCES','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','007',NULL,'TGE_REF_PRE','RUB_ECHANGE','4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','008',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','009',NULL,'TGE_ABSENCES','DUREE_CALC','15','0','TRUE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_ABSENCES','RD','SELECT','010',NULL,'TGE_ABSENCES','TEMOIN_DUREE_CALC','1',NULL,'FALSE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','VALEUR_CONDITIONEE(NULL;0;1)'
'60_ABSENCES','RD','SELECT','011',NULL,NULL,NULL,'110',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','012',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_ABSENCES','RD','SELECT','013',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_ABSENCES','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','016',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'60_ABSENCES','RD','SELECT','017',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_ABSENCES','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_ABSENCES','RD','SELECT','019',NULL,'TGE_ABSENCES','DATE_DEBUT','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_ABSENCES','RD','SELECT','020',NULL,'TGE_REF_PAC','PERIODEENCOURS','6',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'60_ABSENCES','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','022','TT',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','024',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_ABSENCES','RD','SELECT','026',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','027',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','distinct TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_ABSENCES','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_ABSENCES','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'60_ABSENCES','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'60_ABSENCES','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'60_ABSENCES','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'60_ABSENCES','RD','FROM','006',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.NUMPAC = TGE_REF_PRE.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'60_ABSENCES','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.ID = TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'60_ABSENCES','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.RUB_ECHANGE is not null',NULL
'60_ABSENCES','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'60_ABSENCES','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'60_ABSENCES','RD','WHERE','014',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') <= TGE_REF_PAC.PERIODEENCOURS',NULL
'60_ABSENCES','RD','WHERE','015',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'60_ABSENCES','RD','WHERE','016',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'60_ABSENCES','RD','WHERE','017',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'60_ABSENCES','RD','WHERE','018',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'60_ABSENCES','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_REF_PRE.RUB_ECHANGE',NULL
'60_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'60_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'60_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','004',NULL,'TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','027',NULL,'TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'70_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'70','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'70','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'70','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'70_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','027',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'70_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'70_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'99','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'99','RD','SELECT','002','99',NULL,NULL,'2','0','FALSE',NULL,NULL
'99','RD','SELECT','003',NULL,NULL,NULL,'12',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','004',NULL,NULL,NULL,'7','0','TRUE',NULL,'FORMATAGE_NBRE_LIGNE'
'99','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','006',NULL,NULL,NULL,'8','0','TRUE',NULL,'FORMATAGE_NBRE_CARACTERE'
'99','RD','SELECT','007',NULL,NULL,NULL,'204',NULL,'FALSE',NULL,NULL
'99','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'99','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','007','££££',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'ANNULATION','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'ANNULATION_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ), TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS(SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt = @@@ID_TRT@@@)SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,RETRO.PERIODE_RETRO AS PERIODE, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,TABLE_RETRO RETRO WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND RETRO.NUMPAC =C.NUMPAC  AND RETRO.PACMAT =C.PACMAT AND to_date(RETRO.PERIODE_RETRO,''yyyymm'') >= trunc(DACS.dsdsc,''month'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ,RETRO.PERIODE_RETRO) DAC',NULL'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and DAC.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC=@@@NUMPAC@@@)',NULL
'ANNULATION','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','001',NULL,'DELETED_PAIEZAD','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','004',NULL,'DELETED_PAIEZAD','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','007','$$$$',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','017',NULL,'DELETED_PAIEZAD','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','018',NULL,'DELETED_PAIEZAD','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC=@@@NUMPAC@@@ and (TGE_REF_PAC.MPE is not null and TGE_REF_PAC.MPE <> ''N'')',NULL
'ANNULATION_PERIODE_EMPLOI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.PAIEZAD',NULL
'IJEDI','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'IJEDI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','007','T653',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','009',NULL,'TGE_ABSENCES','DATE_DEBUT','16',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||MOTIF',NULL
'IJEDI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','012',NULL,'TGE_ABSENCES','DATE_FIN','40',NULL,'FALSE','least(TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD''),nvl(TO_CHAR(DAC.DATE_SORTIE_SIT_BO,''YYYYMMDD''),''20991231''))',NULL
'IJEDI','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'IJEDI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'IJEDI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'IJEDI','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'IJEDI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','021',NULL,'TGE_ABSENCES','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','022',NULL,'TGE_ABSENCES','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'IJEDI','RD','SELECT','023',NULL,'TGE_ABSENCES','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'IJEDI','RD','SELECT','024',NULL,'TGE_REF_PAC','PERIODEENCOURS','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''','FORMATAGE_DATE_EFFET'
'IJEDI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'IJEDI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'IJEDI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'IJEDI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'IJEDI','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'IJEDI','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'IJEDI','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.MOTIF',NULL
'IJEDI','RD','SELECT_EN_PLUS','005',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.ID',NULL
'IJEDI','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'IJEDI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'IJEDI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'IJEDI','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'IJEDI','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'IJEDI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.IJEDI in (''M'',''E'')',NULL
'IJEDI','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'IJEDI','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'IJEDI','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.MOTIF_ABS is not null',NULL
'IJEDI','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.OPTION_CONSERV_HISTO = ''A''',NULL
'IJEDI','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.ELEMENT = ''T653''',NULL
'IJEDI','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ABSENCES.DATE_DEBUT <= DAC.DSDCN and (DAC.DSDCN is null or (TGE_ABSENCES.DATE_FIN >= DAC.DSDCN))) or (TGE_ABSENCES.DATE_DEBUT >= DAC.DSDCN and (DAC.DATE_SORTIE_SIT_BO is null or (TGE_ABSENCES.DATE_DEBUT <= DAC.DATE_SORTIE_SIT_BO))))',NULL
'IJEDI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'W566','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'W566','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'W566','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','007','W566',NULL,NULL,'4','0','FALSE',NULL,NULL
'W566','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','012','200',NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','013','N',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'W566','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'W566','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'W566','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'W566','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'W566_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'W566_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'W566','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'W566','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'W566','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'W566_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'') mois from dual connect by TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'' )< @@@PERIODE_PAIE@@@),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS (SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois as periode, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND D.mois >=(select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ) AND D.mois >=TO_CHAR(DACS.dsdsc,''YYYYMM'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois ) DAC',NULL
'W566','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'W566','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'W566','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'WL70','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'WL70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'WL70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','007','WL70',NULL,NULL,'4','0','FALSE',NULL,NULL
'WL70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','012',NULL,'DAC','DTRETRO','40',NULL,'FALSE',NULL,NULL
'WL70_RETRO','RD','SELECT','012',NULL,'DAC','DSDSC','40',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'WL70','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'WL70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'WL70','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'WL70','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'WL70','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'WL70','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'WL70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC, to_char(D.mois,''yyyymm'') as periode,  MIN(DACS.DSDSC) DSDSC, MAX(DACS.DSFSC) DSFSC, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month''),''ddmmyyyy'') DTRETRO   FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'')  AND DACS.PACMAT= R.PACMAT AND DACS.DSDSC <= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm'') as periode,  TO_CHAR(MIN(DACS.DSDSC),''ddmmyyyy'') DSDSC, MAX(DACS.DSFSC) DSFSC,MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(MIN(DACS.DSDSC),''yyyymm'') MOISCOMP FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT AND DACS.PACMAT= R.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND DACS.DSDSC >= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND DACS.DSFSC >= LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')) AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'WL70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'WL70_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@ AND DAC.PERIODE >=DAC.MOISCOMP',NULL
'WL70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC='*' and ELEMENT = 'AB74'
'*','AB74','**','RD_ZAB74','DIC_ADM_CONTRAT_HISTO',null,null,null,null,null,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA22' AND DONNEEGXP = 'TDETEXP'
'*','AA22','**','TDETEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA23' AND DONNEEGXP = 'MOTEXP'
'*','AA23','**','MOTEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA22' AND DONNEEGXP = 'TDETEXP'
'*','AA22','**','TDETEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA23' AND DONNEEGXP = 'MOTEXP'
'*','AA23','**','MOTEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
update TGE_REF_MAPDO set TRTPARTICULIER = null WHERE TRTPARTICULIER LIKE '%CAD=%'
##
TGE_REF_MAPVR
==
delete from TGE_REF_MAPVR where NUMPAC = '*' and TABLEZADIG = 'DAP' and CHAMPZADIG = 'V03'
##
TGE_REF_MAPVR
==
insert into TGE_REF_MAPVR(NUMPAC, TABLEZADIG, CHAMPZADIG, TABLEGXP, DONNEEGXP, TYPEGXP, LONGUEURGXP) VALUES ('*', 'DAP', 'V03', 'TGE_REF_DAP', 'DATE_DEB_ACCORD','A','6')
##
TGE_REF_MAPVR
==
delete from TGE_REF_MAPVR where NUMPAC = '*' and TABLEZADIG = 'DAP' and CHAMPZADIG = 'V04'
##
TGE_REF_MAPVR
==
insert into TGE_REF_MAPVR(NUMPAC, TABLEZADIG, CHAMPZADIG, TABLEGXP, DONNEEGXP, TYPEGXP, LONGUEURGXP) VALUES ('*', 'DAP', 'V04', 'TGE_REF_DAP', 'DATE_FIN_ACCORD','A','6')
##
TAG_CHARSET=@€éèç		 
##
TGE_REF_PRE
=SQL IFEXIST=TGE_REF_PRE=
update tge_ref_pre set theme_cpt ='' where numpac='*' and code_incident in ('CP','J2','J3','J4')
##
UX_GS_OPTION
==
delete from UX_GS_OPTION WHERE ACCES_OPT = 'GRAPH'
'businessFeatures','GRAPH','Collaborateur','Organigramme','Modules/AdpUx/UxOrganigramme.jsp'
##
UX_PROFIL_DOCUMENTS_DEPOT
=SQL IFNOTEXIST=UX_PROFIL_DOCUMENTS_DEPOT=STATUT=
ALTER TABLE UX_PROFIL_DOCUMENTS_DEPOT ADD STATUT VARCHAR2(32)
##
TAG_CHARSET=@€éèç
##
XLS_DOCMODEL
==
delete from XLS_DOCMODEL where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 'Export annulations', 'Annulation_', 0, 0, 'TGE'
##
TAG_CHARSET=@€éèç
##
XLS_MATCHING_DATA
==
delete from XLS_MATCHING_DATA where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 0, 'matricule', 'String', 32, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 1, 'numPac', 'String', 6, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 2, 'pacMat', 'String', 8, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 3, 'codeElement', 'String', 4, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 4, 'origine', 'String', 1, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 5, 'periode', 'String', 6, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 6, 'paieZad', 'String', 8, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 7, 'erreurs', 'String', 3000, 'Y', null
##
TAG_CHARSET=@€éèç
##
XLS_MATCHING_TITLE
==
delete from XLS_MATCHING_TITLE where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 0, 'fr_fr', 'Identifiant RH'
'TGE_EXP_ANN', '20201130', 0, 1, 'fr_fr', 'Numéro de pac'
'TGE_EXP_ANN', '20201130', 0, 2, 'fr_fr', 'Matricule Paie'
'TGE_EXP_ANN', '20201130', 0, 3, 'fr_fr', 'Code annulation'
'TGE_EXP_ANN', '20201130', 0, 4, 'fr_fr', 'Origine'
'TGE_EXP_ANN', '20201130', 0, 5, 'fr_fr', 'Période'
'TGE_EXP_ANN', '20201130', 0, 6, 'fr_fr', 'Référence période d''emploi'
'TGE_EXP_ANN', '20201130', 0, 7, 'fr_fr', 'Message(s)'
##
TAG_CHARSET=@€éèç
##
XLS_SHEET_LIB
==
delete from XLS_SHEET_LIB where CODE_SHEET = 'TGE_EXP_ANN'
'TGE_EXP_ANN', 'fr_fr', 'Export annulations'
##
TAG_CHARSET=@€éèç
##
XLS_SHEET
==
delete from XLS_SHEET where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 1, 'fr.adp.com.cougar.std.modules.lib.objects.zpaie.importexport.ImpExpAnnulationXls','TGE_EXP_ANN',8, 8
##
TAG_CHARSET=@€éèç
##
CREATE_TGE_GESTIL_NAT_ETL
=SQL IFNOTEXIST=TGE_GESTIL_NAT_ETL=
CREATE TABLE TGE_GESTIL_NAT_ETL ( NUMPAC VARCHAR2(6) ,NAT VARCHAR2(8) ,ACTIF VARCHAR2(1) DEFAULT 'O' ,CONSTRAINT CK_TGE_GESTIL_NAT_ETL1 CHECK (ACTIF IN ('O', 'N')) ,CONSTRAINT PK_TGE_GESTIL_NAT_ETL PRIMARY KEY (NUMPAC,NAT) )
##
CREATE_TGE_GESTIL_CPT_PER_ETL
=SQL IFNOTEXIST=TGE_GESTIL_CPT_PER_ETL=
CREATE TABLE TGE_GESTIL_CPT_PER_ETL ( NUMPAC VARCHAR2(6) ,CPT VARCHAR2(6) ,PER VARCHAR2(6) , DIVISEUR_VAL_VARJ NUMBER(11,0) DEFAULT 1 , UNITE VARCHAR2(20) DEFAULT 'Quantité' ,ACTIF VARCHAR2(1) DEFAULT 'O' ,CONSTRAINT CK_TGE_GESTIL_CPT_PER_ETL1 CHECK (DIVISEUR_VAL_VARJ != 0) ,CONSTRAINT CK_TGE_GESTIL_CPT_PER_ETL2 CHECK (UNITE IN ('Quantité', 'Jours', 'Heures')) ,CONSTRAINT CK_TGE_GESTIL_CPT_PER_ETL3 CHECK (ACTIF IN ('O', 'N')) ,CONSTRAINT PK_TGE_GESTIL_CPT_PER_ETL PRIMARY KEY (NUMPAC, CPT, PER) )
##
CREATE_TGE_GESTIL_FAM_HOR
=SQL IFNOTEXIST=TGE_GESTIL_FAM_HOR=
CREATE TABLE TGE_GESTIL_FAM_HOR ( NUMPAC VARCHAR2(6) , FAM_NOM VARCHAR2(3) , FAM_LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_FAM_HOR PRIMARY KEY (NUMPAC, FAM_NOM) )
##
CREATE_TGE_GESTIL_HOR
=SQL IFNOTEXIST=TGE_GESTIL_HOR=
CREATE TABLE TGE_GESTIL_HOR ( NUMPAC VARCHAR2(6) , ID NUMBER(11,0) , NOM1 VARCHAR2(6) , LIB VARCHAR2(30) , FAM VARCHAR2(3) , FAM_LIB VARCHAR2(30) , TYP VARCHAR2(1) ,CONSTRAINT PK_TGE_GESTIL_HOR PRIMARY KEY (NUMPAC, ID) ,CONSTRAINT CK_TGE_GESTIL_HOR1 CHECK (NOM1 IS NOT NULL))
##
CREATE_TGE_GESTIL_CYCHOR
=SQL IFNOTEXIST=TGE_GESTIL_CYCHOR=
CREATE TABLE TGE_GESTIL_CYCHOR ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(8) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_CYCHOR PRIMARY KEY (NUMPAC, NOM) )
##
CREATE_TGE_GESTIL_LIE
=SQL IFNOTEXIST=TGE_GESTIL_LIE=
CREATE TABLE TGE_GESTIL_LIE ( NUMPAC VARCHAR2(6) , ID NUMBER(11,0) , NOM1 VARCHAR2(6) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_LIE PRIMARY KEY (NUMPAC, ID) ,CONSTRAINT CK_TGE_GESTIL_LIE1 CHECK (NOM1 IS NOT NULL))
##
CREATE_TGE_GESTIL_FAM_NAT
=SQL IFNOTEXIST=TGE_GESTIL_FAM_NAT=
CREATE TABLE TGE_GESTIL_FAM_NAT ( NUMPAC VARCHAR2(6) , FAM_NOM VARCHAR2(10) , FAM_LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_FAM_NAT PRIMARY KEY (NUMPAC, FAM_NOM) )
##
CREATE_TGE_GESTIL_NAT
=SQL IFNOTEXIST=TGE_GESTIL_NAT=
CREATE TABLE TGE_GESTIL_NAT ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , LIB VARCHAR2(30) , CDE_CORR VARCHAR2(6) , FAM_NAT VARCHAR2(10) , FAM_LIB VARCHAR2(30),CONSTRAINT PK_TGE_GESTIL_NAT PRIMARY KEY (NUMPAC, NOM) )
##
CREATE_TGE_GESTIL_LISNATD
=SQL IFNOTEXIST=TGE_GESTIL_LISNATD=
CREATE TABLE TGE_GESTIL_LISNATD ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , LIB VARCHAR2(30) , NAT VARCHAR2(6) ,CONSTRAINT PK_TGE_GESTIL_LISNATD PRIMARY KEY (NUMPAC, NOM , NAT) )
##
CREATE_TGE_GESTIL_CODD_ANOMALIE
=SQL IFNOTEXIST=TGE_GESTIL_CODD_ANOMALIE=
CREATE TABLE TGE_GESTIL_CODD_ANOMALIE ( NUMPAC VARCHAR2(6) , CLE1 VARCHAR2(20) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_CODD_ANOMALIE PRIMARY KEY (NUMPAC, CLE1) )
##
CREATE_TGE_GESTIL_CALENDAR
=SQL IFNOTEXIST=TGE_GESTIL_CALENDAR=
CREATE TABLE TGE_GESTIL_CALENDAR ( DAT_JOU DATE , JOUR VARCHAR2(2) , MOIS VARCHAR2(2) , ANNEE VARCHAR2(4) , MOISNB NUMBER(2) , JOURNB NUMBER(2) , ANNEENB NUMBER(4) , MOISANNEE VARCHAR2(9) , NUMJOURSEM NUMBER(1) , JOUR_SEM VARCHAR2(8) , CALENDAIRE NUMBER(1) , OUVRABLE NUMBER(1) , OUVRE NUMBER(1) ,CONSTRAINT PK_TGE_GESTIL_CALENDAR PRIMARY KEY (DAT_JOU) )
INSERT INTO TGE_GESTIL_CALENDAR ( DAT_JOU, JOUR, MOIS, ANNEE, JOURNB, MOISNB, ANNEENB, MOISANNEE, NUMJOURSEM, JOUR_SEM, CALENDAIRE, OUVRABLE, OUVRE ) SELECT DAT_JOU, TO_CHAR(DAT_JOU, 'DD') AS JOUR, TO_CHAR(DAT_JOU, 'MM') AS MOIS, TO_CHAR(DAT_JOU, 'YYYY') AS ANNEE, TO_NUMBER(TO_CHAR(DAT_JOU, 'DD')) AS JOURNB, TO_NUMBER(TO_CHAR(DAT_JOU, 'MM')) AS MOISNB, TO_NUMBER(TO_CHAR(DAT_JOU, 'YYYY')) AS ANNEENB, TO_CHAR(DAT_JOU, 'Month') AS MOISANNEE, TO_NUMBER(TO_CHAR(DAT_JOU, 'D')) AS NUMJOURSEM, DECODE(TO_CHAR(DAT_JOU, 'D'), 1, 'Lundi', 2, 'Mardi', 3, 'Mercredi', 4, 'Jeudi', 5, 'Vendredi', 6, 'Samedi', 7, 'Dimanche') AS JOUR_SEM, CASE WHEN TO_CHAR(DAT_JOU, 'D') IN (1,2,3,4,5,6,7) THEN 1 END AS CALENDAIRE, CASE WHEN TO_CHAR(DAT_JOU, 'D') IN (1,2,3,4,5,6) THEN 1 ELSE 0 END AS OUVRABLE, CASE WHEN TO_CHAR(DAT_JOU, 'D') IN (1,2,3,4,5) THEN 1 ELSE 0 END AS OUVRE FROM ( SELECT TRUNC(TO_DATE('31/12/1999', 'DD/MM/YYYY')) + ROWNUM AS DAT_JOU FROM DUAL CONNECT BY ROWNUM < 36526 )
##
CREATE_TGE_GESTIL_POS
=SQL IFNOTEXIST=TGE_GESTIL_POS=
CREATE TABLE TGE_GESTIL_POS ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(10) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_POS PRIMARY KEY (NUMPAC, NOM) )
##
CREATE_TGE_GESTIL_EQU
=SQL IFNOTEXIST=TGE_GESTIL_EQU=
CREATE TABLE TGE_GESTIL_EQU ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_EQU PRIMARY KEY (NUMPAC, NOM) )
##
CREATE_TGE_GESTIL_PER
=SQL IFNOTEXIST=TGE_GESTIL_PER=
CREATE TABLE TGE_GESTIL_PER ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_PER PRIMARY KEY (NUMPAC, NOM) )
##
CREATE_TGE_GESTIL_CPT
=SQL IFNOTEXIST=TGE_GESTIL_CPT=
CREATE TABLE TGE_GESTIL_CPT ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , PER VARCHAR2(6) , LIB VARCHAR2(30) ,CONSTRAINT PK_TGE_GESTIL_CPT PRIMARY KEY (NUMPAC, NOM, PER) )
##
CREATE_TGE_GESTIL_PERDAT
=SQL IFNOTEXIST=TGE_GESTIL_PERDAT=
CREATE TABLE TGE_GESTIL_PERDAT ( NUMPAC VARCHAR2(6) , NOM VARCHAR2(6) , RANG NUMBER(6,0) , DAT_DEB DATE , DAT_FIN DATE ,CONSTRAINT PK_TGE_GESTIL_PERDAT PRIMARY KEY (NUMPAC, NOM , RANG) )
##
TGE_GESTIL_MATJOU
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATJOU' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATJOU';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATJOU';
	END IF;
  
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATJOU (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_JOU DATE
		,ENR VARCHAR2(1)
		,HOR NUMBER(11,0) DEFAULT 0
		,HOR_TYP VARCHAR2(1)
		,HRS_DEBB VARCHAR2(6)
		,HRJ_DEBB NUMBER(6,0)
		,HRS_FINB VARCHAR2(6)
		,HRJ_FINB NUMBER(6,0)
		,STATUT VARCHAR2(1) DEFAULT ''O''
		,ANO1 VARCHAR2(2) DEFAULT ''##''
		,ANO2 VARCHAR2(2) DEFAULT ''##''
		,ANO3 VARCHAR2(2) DEFAULT ''##''
		,HOR_CAL NUMBER(11,0)
		,PROV_MP VARCHAR2(1)
		,PROV_PTR VARCHAR2(1)
		,HOR_MAT_P NUMBER(11,0) DEFAULT 0
		,HOR_MAT_T NUMBER(11,0) DEFAULT 0
		,HOR_MAT_R NUMBER(11,0) DEFAULT 0
		,HOR_POE_P NUMBER(11,0) DEFAULT 0
		,HOR_POE_T NUMBER(11,0) DEFAULT 0
		,CYC_EFF VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_P VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_T VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_R VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_MAT_P VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_MAT_T VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_MAT_R VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_POE_P VARCHAR2(8) DEFAULT ''CYCNRS''
		,CYC_POE_T VARCHAR2(8) DEFAULT ''CYCNRS''
		,LIEU_P NUMBER(11,0) DEFAULT 0
		,LIEU1 NUMBER(11,0) DEFAULT 0
		,LIEU2 NUMBER(11,0) DEFAULT 0
		,LIEU3 NUMBER(11,0) DEFAULT 0
		,LIEU4 NUMBER(11,0) DEFAULT 0
		,LIEU5 NUMBER(11,0) DEFAULT 0
		,NAT_THE VARCHAR2(6) DEFAULT ''CYCNRS''
		,TPS_THE VARCHAR2(8)
		,TPM_THE NUMBER(11,0)
		,TPHC_THE NUMBER(11,3)
		,OEUVRE NUMBER(1)
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
		
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATJOU ADD (
		CONSTRAINT CK_TGE_GESTIL_MATJOU1 CHECK (HOR IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU2 CHECK (STATUT IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU3 CHECK (ANO1 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU4 CHECK (ANO2 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU5 CHECK (ANO3 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU6 CHECK (HOR_MAT_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU7 CHECK (HOR_MAT_T IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU8 CHECK (HOR_MAT_R IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU9 CHECK (HOR_POE_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU10 CHECK (HOR_POE_T IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU11 CHECK (CYC_EFF IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU12 CHECK (CYC_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU13 CHECK (CYC_T IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU14 CHECK (CYC_R IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU15 CHECK (CYC_MAT_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU16 CHECK (CYC_MAT_T IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU17 CHECK (CYC_MAT_R IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU18 CHECK (CYC_POE_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU19 CHECK (CYC_POE_T IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU020 CHECK (LIEU_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU21 CHECK (LIEU1 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU22 CHECK (LIEU2 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU23 CHECK (LIEU3 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU24 CHECK (LIEU4 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU25 CHECK (LIEU5 IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOU26 CHECK (NAT_THE IS NOT NULL) )';
END;
##
IDX_TGE_GESTIL_MATJOU1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATJOU1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATJOU1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATJOU1 ON TGE_GESTIL_MATJOU (NUMPAC, MAT, DAT_JOU) LOCAL NOLOGGING';
END;
##
IDX_TGE_GESTIL_MATJOU2
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATJOU2';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATJOU2';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE INDEX IDX_TGE_GESTIL_MATJOU2 ON TGE_GESTIL_MATJOU (NUMPAC, DAT_JOU) LOCAL NOLOGGING';
END;
##
TGE_GESTIL_MATJOUD
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATJOUD' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATJOUD';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATJOUD';
	END IF;

	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATJOUD (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_JOU DATE
		,ENR VARCHAR2(1)
		,RANG NUMBER(6)
		,FNATANO VARCHAR2(1)
		,NAT_TYP VARCHAR2(1)
		,NAT VARCHAR2(6) DEFAULT ''NATNRS''
		,NAT_S VARCHAR2(6) DEFAULT ''NATNRS''
		,TPS_NAT VARCHAR2(8)
		,TPM_NAT NUMBER(11,0)
		,TPHC_NAT NUMBER(11,3)
		,HRS_DEB VARCHAR2(6)
		,HRJ_DEB NUMBER(6,0)
		,HRS_FIN VARCHAR2(6)
		,HRJ_FIN NUMBER(6,0)
		,CODPLJ VARCHAR2(1)
		,PROV_LIEU VARCHAR2(1)
		,LIEU NUMBER(11,0) DEFAULT 0
		,POS VARCHAR2(10) DEFAULT ''POSNRS''
		,EQU VARCHAR2(6) DEFAULT ''EQUNRS''
		,LIEU_P NUMBER(11,0) DEFAULT 0
		,POS_P VARCHAR2(10) DEFAULT ''POSNRS''
		,EQU_P VARCHAR2(6) DEFAULT ''EQUNRS''
		,LIEU_T NUMBER(11,0) DEFAULT 0
		,POS_T VARCHAR2(10) DEFAULT ''POSNRS''
		,EQU_T VARCHAR2(6) DEFAULT ''EQUNRS''
		,LIEU_R NUMBER(11,0) DEFAULT 0
		,POS_R VARCHAR2(10) DEFAULT ''POSNRS''
		,EQU_R VARCHAR2(6) DEFAULT ''EQUNRS''
		,QTE1 NUMBER(11,0)
		,QTE2 NUMBER(11,0)
		,PROV_EVE VARCHAR2(1)
		,DAT_DEB_EVE DATE
		,DAT_FIN_EVE DATE
		,Z2_VSTATE VARCHAR2(1)
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATJOUD ADD (
		CONSTRAINT CK_TGE_GESTIL_MATJOUD1 CHECK (NAT IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD2 CHECK (NAT_S IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD3 CHECK (LIEU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD4 CHECK (POS IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD5 CHECK (EQU IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD6 CHECK (LIEU_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD7 CHECK (POS_P IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD8 CHECK (EQU_P IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD9 CHECK (LIEU_T IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD10 CHECK (POS_T IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD11 CHECK (EQU_T IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD12 CHECK (LIEU_R IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD13 CHECK (POS_R IS NOT NULL)	
		,CONSTRAINT CK_TGE_GESTIL_MATJOUD14 CHECK (EQU_R IS NOT NULL)
	)';
END;
##
IDX_TGE_GESTIL_MATJOUD1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATJOUD1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATJOUD1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATJOUD1 ON TGE_GESTIL_MATJOUD (NUMPAC, MAT, DAT_JOU, RANG) LOCAL NOLOGGING';
END;
##
IDX_TGE_GESTIL_MATJOUD2
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATJOUD2';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATJOUD2';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE INDEX IDX_TGE_GESTIL_MATJOUD2 ON TGE_GESTIL_MATJOUD (NUMPAC, DAT_JOU) LOCAL NOLOGGING';
END;
##
TGE_GESTIL_MATCPT
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATCPT' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATCPT';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATCPT';
	END IF;
  
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATCPT (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_CPT DATE
		,DAT_FIN_CPT DATE
		,CPT VARCHAR2(6)
		,PER VARCHAR2(6)
		,FFINPER VARCHAR2(1)
		,ANNEE NUMBER(6,0)
		,NUMPER NUMBER(11,0)
		,VARJ NUMBER(11,3)
		,VAL NUMBER(11,3)
		,UNITE VARCHAR2(20) DEFAULT ''Quantité''
		,PERDAT_RANG NUMBER(6)
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATCPT ADD (
		CONSTRAINT CK_TGE_GESTIL_MATCPT_CPT1 CHECK (DAT_FIN_CPT IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATCPT_CPT2 CHECK (PERDAT_RANG IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATCPT_CPT3 CHECK (UNITE IN (''Quantité'', ''Jours'', ''Heures''))
	)';
END;
##
IDX_TGE_GESTIL_MATCPT1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATCPT1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATCPT1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATCPT1 ON TGE_GESTIL_MATCPT (NUMPAC, MAT, DAT_CPT, CPT, PER) LOCAL NOLOGGING';
END;
##
IDX_TGE_GESTIL_MATCPT2
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATCPT2';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATCPT2';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE INDEX IDX_TGE_GESTIL_MATCPT2 ON TGE_GESTIL_MATCPT (NUMPAC, DAT_CPT) LOCAL NOLOGGING';
END;
##
TGE_GESTIL_MATHOR
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATHOR' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATHOR';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATHOR';
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATHOR (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,ENR VARCHAR2(1)
		,DAT_AFF DATE
		,DAT_FIN DATE
		,FORM VARCHAR2(1)
		,CYCHOR VARCHAR2(8) DEFAULT ''CYCNRS'' 
		,HOR NUMBER(11,0) DEFAULT 0
		,P_DAT_AFF DATE
		,P_DAT_FIN DATE
		,P_CYCHOR VARCHAR2(8)
		,P_HOR NUMBER(11,0)
		,T_DAT_AFF DATE
		,T_DAT_FIN DATE
		,T_CYCHOR VARCHAR2(8)
		,T_HOR NUMBER(11,0)
		,R_DAT_AFF DATE
		,R_DAT_FIN DATE
		,R_CYCHOR VARCHAR2(8)
		,R_HOR NUMBER(11,0)
	) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATHOR ADD (
		CONSTRAINT CK_TGE_GESTIL_MATHOR1 CHECK (ENR IN (''P'',''T'',''R''))
		,CONSTRAINT CK_TGE_GESTIL_MATHOR2 CHECK (DAT_FIN IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATHOR3 CHECK (FORM IN (''C'', ''H''))
		,CONSTRAINT CK_TGE_GESTIL_MATHOR4 CHECK (CYCHOR IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATHOR5 CHECK (HOR IS NOT NULL)
	)';
END;
##
IDX_TGE_GESTIL_MATHOR1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATHOR';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATHOR';
	END IF ;
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATHOR1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATHOR1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATHOR1 ON TGE_GESTIL_MATHOR (NUMPAC, MAT, DAT_AFF) LOCAL NOLOGGING';
END;
##
TGE_GESTIL_MATLIE
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATLIE' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATLIE';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATLIE';
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATLIE (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,DAT_AFF DATE
		,DAT_FIN DATE
		,ENR VARCHAR2(1)
		,FORM VARCHAR2(1)
		,LIEU NUMBER(11) DEFAULT 0
		,POS VARCHAR2(10) DEFAULT ''POSNRS''
		,EQU VARCHAR2(6) DEFAULT ''EQUNRS''
		,P_DAT_AFF DATE
		,P_DAT_FIN DATE
		,P_LIEU NUMBER(11) DEFAULT 0
		,P_POS VARCHAR2(10) DEFAULT ''POSNRS''
		,P_EQU VARCHAR2(6) DEFAULT ''EQUNRS''
		,P_FHORPOE VARCHAR2(1)
		,P_HRS_DEB VARCHAR2(6)
		,P_HRJ_DEB NUMBER(6)
		,P_HRS_FIN VARCHAR2(6)
		,P_HRJ_FIN NUMBER(6)
		,P_POURC NUMBER(6)	
		,T_DAT_AFF DATE
		,T_DAT_FIN DATE
		,T_LIEU NUMBER(11) DEFAULT 0
		,T_POS VARCHAR2(10) DEFAULT ''POSNRS''
		,T_EQU VARCHAR2(6) DEFAULT ''EQUNRS''
		,T_FHORPOE VARCHAR2(1)
		,T_HRS_DEB VARCHAR2(6)
		,T_HRJ_DEB NUMBER(6)
		,T_HRS_FIN VARCHAR2(6)
		,T_HRJ_FIN NUMBER(6)
		,T_POURC NUMBER(6)
		,R_DAT_AFF DATE
		,R_DAT_FIN DATE
		,R_LIEU NUMBER(11) DEFAULT 0
		,R_POS VARCHAR2(10) DEFAULT ''POSNRS''
		,R_EQU VARCHAR2(6) DEFAULT ''EQUNRS''
		,R_FHORPOE VARCHAR2(1)
		,R_HRS_DEB VARCHAR2(6)
		,R_HRJ_DEB NUMBER(6)
		,R_HRS_FIN VARCHAR2(6)
		,R_HRJ_FIN NUMBER(6)
		,R_POURC NUMBER(6)
		) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATLIE ADD (
		CONSTRAINT CK_TGE_GESTIL_MATLIE1 CHECK (DAT_FIN IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE2 CHECK ( ENR IN (''P'',''T'',''R'') )
		,CONSTRAINT CK_TGE_GESTIL_MATLIE3 CHECK ( FORM IN (''L'',''P'',''E'') )
		,CONSTRAINT CK_TGE_GESTIL_MATLIE4 CHECK (LIEU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE5 CHECK (POS IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE6 CHECK (EQU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE7 CHECK (P_LIEU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE8 CHECK (P_POS IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE9 CHECK (P_EQU IS NOT NULL)		
		,CONSTRAINT CK_TGE_GESTIL_MATLIE10 CHECK (T_LIEU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE11 CHECK (T_POS IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE12 CHECK (T_EQU IS NOT NULL)			
		,CONSTRAINT CK_TGE_GESTIL_MATLIE13 CHECK (R_LIEU IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE14 CHECK (R_POS IS NOT NULL)
		,CONSTRAINT CK_TGE_GESTIL_MATLIE15 CHECK (R_EQU IS NOT NULL)	
	)';
END;
##
IDX_TGE_GESTIL_MATLIE1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATLIE';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATLIE';
	END IF ;
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATLIE1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATLIE1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATLIE1 ON TGE_GESTIL_MATLIE (NUMPAC, MAT, DAT_AFF) LOCAL NOLOGGING';
END;
##
TGE_GESTIL_MATBAD
=SQL=
DECLARE
	TABLE_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = 'TGE_GESTIL_MATBAD' AND PARTITION_NAME = 'NUMPAC_DEFAULT';
	IF TABLE_EXIST = 1 THEN
		RETURN;
	END IF;
  
	SELECT COUNT(*) INTO TABLE_EXIST FROM USER_TABLES WHERE TABLE_NAME = 'TGE_GESTIL_MATBAD';
	IF TABLE_EXIST = 1 THEN
		EXECUTE IMMEDIATE 'DROP TABLE TGE_GESTIL_MATBAD';
	END IF;
	
	EXECUTE IMMEDIATE 'CREATE TABLE TGE_GESTIL_MATBAD (
		NUMPAC VARCHAR2(6)
		,MAT VARCHAR2(8)
		,ENR VARCHAR2(1)
		,DAT_AFF DATE
		,DAT_FIN DATE
		,BADGE VARCHAR2(8)
		,LIB VARCHAR2(30)
		,CAT VARCHAR2(2)
		,AFFCPT VARCHAR2(6)
		,REGA VARCHAR2(2)
		,REGT VARCHAR2(2)
		,REGS VARCHAR2(2)
		,F_TPS_REEL VARCHAR2(1) DEFAULT ''N''
		,F_TRAIT_POE VARCHAR2(1) DEFAULT ''N''
		) PARTITION BY LIST (NUMPAC) ( PARTITION NUMPAC_DEFAULT VALUES (DEFAULT) ) NOLOGGING';
	
	EXECUTE IMMEDIATE 'ALTER TABLE TGE_GESTIL_MATBAD ADD (
		CONSTRAINT CK_TGE_GESTIL_MATBAD1 CHECK (F_TPS_REEL IN (''O'',''N''))
		,CONSTRAINT CK_TGE_GESTIL_MATBAD2 CHECK (F_TRAIT_POE IN (''O'',''N''))	
	)';
END;
##
TGE_GESTIL_MATBAD1
=SQL=
DECLARE
IDX_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATBAD';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATBAD';
	END IF ;
	SELECT COUNT(*) INTO IDX_EXIST FROM USER_INDEXES WHERE INDEX_NAME = 'IDX_TGE_GESTIL_MATBAD1';
	IF IDX_EXIST > 0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX IDX_TGE_GESTIL_MATBAD1';
	END IF ;
	EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX IDX_TGE_GESTIL_MATBAD1 ON TGE_GESTIL_MATBAD (NUMPAC, MAT, DAT_AFF) LOCAL NOLOGGING';
END;
##
CREATE_TGE_GESTIL_SQL
=SQL IFEXIST=TGE_GESTIL_SQL=
DROP TABLE TGE_GESTIL_SQL
##
CREATE_TGE_GESTIL_SQL
=SQL=
CREATE TABLE TGE_GESTIL_SQL ( TABLENAME VARCHAR2(30) , TABLEORDER NUMBER(3)  , TABLEREF NUMBER(1) , TABLESUFFIX VARCHAR2(3) , HISBISTER NUMBER(1) , ADPURGE VARCHAR2(15),STSAVE VARCHAR2(250) ,TABLESELECT CLOB ,CONSTRAINT PK_TGE_GESTIL_SQL PRIMARY KEY (TABLENAME,TABLEORDER) ,CONSTRAINT CK_TGE_GESTIL_SQL1 CHECK (TABLEREF IN (0,1)),CONSTRAINT CK_TGE_GESTIL_SQL2 CHECK (TABLESUFFIX IN ('HIS','BIS','TER')) ,CONSTRAINT CK_HISBISTER1 CHECK (HISBISTER IN (0,1)) )
##
TGE_GESTIL_SQL
==
DELETE FROM TGE_GESTIL_SQL
'TGE_GESTIL_NAT','10','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.LIB),'' ''),30,'' '') || RPAD(NVL(TRIM(AD_NAT.CDE_CORR),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.FAM_NAT),'' ''),10,'' '') || RPAD(NVL(TRIM(BO_FAM_NAT.FAM_LIB),'' ''),30,'' '')¿FROM AD_NAT¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1 ON ( T1.NAT = TRIM(AD_NAT.NOM) )¿LEFT JOIN BO_FAM_NAT ON (BO_FAM_NAT.FAM_NOM = TRIM(AD_NAT.FAM_NAT)) ¿WHERE AD_NAT.DOM = ''2'' AND T1.NUMPAC = ''$NUMPAC'' AND T1.ACTIF = ''O''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''NATNRS'',6,'' '') || RPAD(''Nature non renseignée'',30,'' '') || RPAD('''',6,'' '') || RPAD('''',10,'' '') || RPAD('''',30,'' '')¿FROM DUAL'
'TGE_GESTIL_LISNATD','20','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_LISNATD.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_LISNAT.LIB),'' ''),30,'' '') || RPAD(NVL(TRIM(AD_LISNATD.NAT),'' ''),6,'' '') ¿FROM AD_LISNATD¿JOIN AD_LISNAT ON (AD_LISNAT.DOM = AD_LISNATD.DOM AND AD_LISNAT.NOM = AD_LISNATD.NOM) ¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1 ON ( T1.NAT = TRIM(AD_LISNATD.NAT) )¿WHERE AD_LISNATD.DOM = ''2'' AND T1.NUMPAC = ''$NUMPAC'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_FAM_HOR','20','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(FAM_NOM,'' ''),3,'' '') || RPAD(NVL(TRIM(FAM_LIB),'' ''),30,'' '') FROM BO_FAM_HOR'
'TGE_GESTIL_HOR','40','1',NULL,'0',NULL,NULL,'WITH HOR AS (SELECT ''$NUMPAC'' AS NUMPAC, ID , TRIM(NOM1) AS NOM1 , LIB , TRIM(FAM) AS FAM , TYP¿FROM AD_HOR T1¿WHERE DOM = ''2'' AND DAT_EFF = (SELECT MAX(DAT_EFF) FROM AD_HOR T2 WHERE T2.DOM = T1.DOM AND T2.ID = T1.ID GROUP BY T2.ID)¿)¿SELECT RPAD(NVL(NUMPAC,'' ''),6,'' '') || TO_CHAR(NVL(ID,0),''S00000000000'') || RPAD(NVL(NOM1,'' ''),6,'' '') || RPAD(NVL(LIB,'' ''),30,'' '') || RPAD(NVL(FAM,'' ''),3,'' '') || RPAD(NVL(BO_FAM_HOR.FAM_LIB,'' ''),30,'' '') || RPAD(NVL(TYP,'' ''),1,'' '')¿FROM HOR¿LEFT JOIN BO_FAM_HOR ON (HOR.FAM = TRIM(BO_FAM_HOR.FAM_NOM))¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || ''+00000000000'' || ''HORNRS'' || RPAD(''Horaire non renseigné'',30,'' '') || RPAD(NVL('''','' ''),3,'' '') || RPAD('''',30,'' '') || RPAD('''',1,'' '')¿FROM DUAL'
'TGE_GESTIL_CYCHOR','50','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(NOM),'' ''),8,'' '') || RPAD(NVL(LIB,'' ''),30,'' '') ¿FROM AD_CYCHOR T1¿WHERE DOM = ''2'' AND DAT_EFF = (SELECT MAX(DAT_EFF) FROM AD_CYCHOR T2 WHERE T2.DOM = T1.DOM AND T2.NOM = T1.NOM  GROUP BY T2.NOM)¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''CYCNRS'',8,'' '') || RPAD(''Cycle non renseigné'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_LIE','60','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || TO_CHAR(NVL(ID,0),''S00000000000'') || RPAD(NVL(TRIM(NOM1),'' ''),6,'' '') || RPAD(NVL(TRIM(LIB),'' ''),30,'' '') ¿FROM AD_LIE¿WHERE DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || ''+00000000000'' || RPAD(''LIENRS'',6,'' '') || RPAD(''Lieu non renseigné'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_FAM_NAT','70','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(FAM_NOM,'' ''),10,'' '') || RPAD(NVL(FAM_LIB,'' ''),30,'' '') ¿FROM BO_FAM_NAT'
'TGE_GESTIL_CODD_ANOMALIE','80','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_CODD.CLE1),'' ''),20,'' '') || RPAD(NVL(AD_CODD.LIB,'' ''),30,'' '') ¿FROM AD_CODD¿WHERE AD_CODD.DOM = ''2'' AND AD_CODD.NOM = ''ANOMALIE''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''##'',20,'' '') || RPAD(''Journée sans anomalie'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_POS','90','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_POS.NOM),'' ''),10,'' '') || RPAD(NVL(AD_POS.LIB,'' ''),30,'' '') ¿FROM AD_POS¿WHERE AD_POS.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''POSNRS'',10,'' '') || RPAD(''Poste non renseigné'',30,'' '') FROM DUAL'
'TGE_GESTIL_EQU','100','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_EQU.NOM),'' ''),6,'' '') || RPAD(NVL(AD_EQU.LIB,'' ''),30,'' '') ¿FROM AD_EQU¿WHERE AD_EQU.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''EQUNRS'',6,'' '') || RPAD(''Equipe non renseignée'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_PER','110','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_PER.NOM),'' ''),6,'' '') || RPAD(NVL(AD_PER.LIB,'' ''),30,'' '') ¿FROM AD_PER¿WHERE AD_PER.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''PERNRS'',6,'' '') || RPAD(''Période non renseignée'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_PERDAT','120','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(NOM),'' ''),6,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿FROM BO_PERDAT'
'TGE_GESTIL_CPT','130','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_CPT.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_CPT.PER),'' ''),6,'' '') ||RPAD(NVL(AD_CPT.LIB,'' ''),30,'' '') ¿FROM AD_CPT¿WHERE AD_CPT.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''CPTNRS'',6,'' '') || RPAD(''PERNRS'',6,'' '') ||RPAD(''Compteur non renseigné'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_MATJOU','140','0',NULL,'1','AD_MATJOU','NUMPAC = ''$NUMPAC'' AND DAT_JOU < TO_DATE(''$DATE'',''YYYY/MM/DD'')','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU¿WHERE DOM = ''2'' AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','141','0','BIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_BIS¿WHERE DOM = ''2'' AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','142','0','HIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_HIS¿WHERE DOM = ''2'' AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','143','0','TER','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_TER¿WHERE DOM = ''2'' AND SOC = ''HRV'''
'TGE_GESTIL_MATJOUD','150','0',NULL,'1','AD_MATJOU','NUMPAC = ''$NUMPAC'' AND DAT_JOU < TO_DATE(''$DATE'',''YYYY/MM/DD'')','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = ''2'' AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','151','0','BIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_BIS AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = ''2'' AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','152','0','HIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_HIS AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = ''2'' AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','153','0','TER','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_TER AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = ''2'' AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATCPT','160','0',NULL,'1','AD_MATCPT','NUMPAC = ''$NUMPAC'' AND DAT_CPT < TO_DATE(''$DATE'',''YYYY/MM/DD'')','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(TGE_GESTIL_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN TGE_GESTIL_CPT_PER_ETL@ADPLINK_DATA ON ( TGE_GESTIL_CPT_PER_ETL.NUMPAC = ''$NUMPAC'' AND TGE_GESTIL_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND TGE_GESTIL_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=''2'' AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','161','0','BIS','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(TGE_GESTIL_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_BIS AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN TGE_GESTIL_CPT_PER_ETL@ADPLINK_DATA ON ( TGE_GESTIL_CPT_PER_ETL.NUMPAC = ''$NUMPAC'' AND TGE_GESTIL_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND TGE_GESTIL_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER )¿WHERE AD_MATCPT.DOM=''2'' AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','162','0','HIS','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(TGE_GESTIL_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_HIS AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN TGE_GESTIL_CPT_PER_ETL@ADPLINK_DATA ON ( TGE_GESTIL_CPT_PER_ETL.NUMPAC = ''$NUMPAC'' AND TGE_GESTIL_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND TGE_GESTIL_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=''2'' AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','163','0','TER','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/TGE_GESTIL_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(TGE_GESTIL_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_TER AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN TGE_GESTIL_CPT_PER_ETL@ADPLINK_DATA ON ( TGE_GESTIL_CPT_PER_ETL.NUMPAC = ''$NUMPAC'' AND TGE_GESTIL_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND TGE_GESTIL_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=''2'' AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATHOR','170','0',NULL,'0',NULL,NULL,'WITH MATHORP AS ( SELECT MAT P_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') P_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') P_DAT_FIN, ENR P_ENR, CYCHOR P_CYCHOR, HOR P_HOR FROM AD_MATHOR WHERE ENR=''P'' )¿,MATHORT AS ( SELECT MAT T_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') T_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') T_DAT_FIN, ENR T_ENR, CYCHOR T_CYCHOR, HOR T_HOR FROM AD_MATHOR WHERE ENR=''T'' )¿,MATHORR AS ( SELECT MAT R_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') R_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') R_DAT_FIN, ENR R_ENR, CYCHOR R_CYCHOR, HOR R_HOR FROM AD_MATHOR WHERE ENR=''R'' )¿,MATHORAFF AS ( ¿SELECT DISTINCT MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') DAT_AFF FROM AD_MATHOR¿UNION¿SELECT DISTINCT MAT, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'')+1 DAT_AFF FROM AD_MATHOR WHERE DAT_FIN != ''2099/12/31''¿)¿,MATHORAFFP AS (¿SELECT MATHORAFF.MAT, MATHORAFF.DAT_AFF, LEAD(MATHORAFF.DAT_AFF) OVER (PARTITION BY MATHORAFF.MAT ORDER BY MATHORAFF.DAT_AFF ) DAT_FIN , MATHORP.P_CYCHOR, MATHORP.P_HOR, MATHORP.P_ENR, MATHORP.P_DAT_AFF, MATHORP.P_DAT_FIN¿FROM MATHORAFF¿JOIN MATHORP ON ( MATHORP.P_MAT = MATHORAFF.MAT)¿WHERE MATHORAFF.DAT_AFF BETWEEN MATHORP.P_DAT_AFF AND MATHORP.P_DAT_FIN ¿)¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MATHORAFFP.MAT,'' ''),8,'' '') || RPAD(NVL(NVL(NVL(R_ENR, T_ENR), P_ENR),'' ''),1,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(NVL(MATHORAFFP.DAT_FIN-1, TO_DATE(''31/12/2099'', ''DD/MM/YYYY'')),''YYYYMMDD''),'' ''),8,'' '')  ¿|| DECODE(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATHORAFFP.P_HOR,0), ''T'', NVL(T_HOR,0), ''R'', NVL(R_HOR,0)), 0, ''C'', ''H'')¿|| RPAD(NVL(TRIM(MATHORR.R_CYCHOR), ''CYCNRS'') ,8,'' '') ¿|| TO_CHAR(TRIM(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATHORAFFP.P_HOR,0), ''T'', NVL(T_HOR,0), ''R'', NVL(R_HOR,0))),''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.P_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.P_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORAFFP.P_CYCHOR),''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(MATHORAFFP.P_HOR),0) ,''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORT.T_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORT.T_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORT.T_CYCHOR),''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(T_HOR),0) ,''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORR.R_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORR.R_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORR.R_CYCHOR), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(R_HOR),0) ,''S00000000000'')¿FROM MATHORAFFP¿LEFT OUTER JOIN MATHORT ON ( MATHORT.T_MAT = MATHORAFFP.MAT AND MATHORAFFP.DAT_AFF BETWEEN MATHORT.T_DAT_AFF AND MATHORT.T_DAT_FIN )¿LEFT OUTER JOIN MATHORR ON ( MATHORR.R_MAT = MATHORAFFP.MAT AND MATHORAFFP.DAT_AFF BETWEEN MATHORR.R_DAT_AFF AND MATHORR.R_DAT_FIN )'
'TGE_GESTIL_MATLIE','180','0',NULL,'0',NULL,NULL,'WITH MATLIEP AS ( SELECT MAT P_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) P_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) P_DAT_FIN, ENR P_ENR, LIEU P_LIEU, POS P_POS, EQU P_EQU, ¿	FHORPOE P_FHORPOE, HRS_DEB P_HRS_DEB, HRJ_DEB P_HRJ_DEB, HRS_FIN P_HRS_FIN, HRJ_FIN P_HRJ_FIN, POURC P_POURC ¿	FROM AD_MATLIE WHERE ENR=''P'' AND RANG=0 )¿, MATLIET AS ( SELECT MAT T_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) T_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) T_DAT_FIN, ENR T_ENR, LIEU T_LIEU, POS T_POS, EQU T_EQU,¿	FHORPOE T_FHORPOE, HRS_DEB T_HRS_DEB, HRJ_DEB T_HRJ_DEB, HRS_FIN T_HRS_FIN, HRJ_FIN T_HRJ_FIN, POURC T_POURC ¿	FROM AD_MATLIE WHERE ENR=''T'' AND RANG=0 )¿, MATLIER AS ( SELECT MAT R_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) R_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) R_DAT_FIN, ENR R_ENR, LIEU R_LIEU, POS R_POS, EQU R_EQU,¿	FHORPOE R_FHORPOE, HRS_DEB R_HRS_DEB, HRJ_DEB R_HRJ_DEB, HRS_FIN R_HRS_FIN, HRJ_FIN R_HRJ_FIN, POURC R_POURC ¿	FROM AD_MATLIE WHERE ENR=''R'' AND RANG=0 )¿, MATLIEAFF AS ( SELECT DISTINCT MAT, DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) DAT_AFF ¿	FROM AD_MATLIE WHERE RANG=0¿		UNION¿	SELECT DISTINCT MAT, DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) DAT_AFF ¿	FROM AD_MATLIE WHERE RANG=0 AND DAT_FIN != ''2099/12/31'')¿,MATLIEAFFP AS ( SELECT MATLIEAFF.MAT, MATLIEAFF.DAT_AFF, LEAD(MATLIEAFF.DAT_AFF) OVER (PARTITION BY MATLIEAFF.MAT ORDER BY MATLIEAFF.DAT_AFF ) DAT_FIN, MATLIEP.P_LIEU, MATLIEP.P_POS¿	, MATLIEP.P_EQU, MATLIEP.P_ENR, MATLIEP.P_DAT_AFF, MATLIEP.P_DAT_FIN, MATLIEP.P_FHORPOE, MATLIEP.P_HRS_DEB, MATLIEP.P_HRJ_DEB, MATLIEP.P_HRS_FIN, MATLIEP.P_HRJ_FIN, MATLIEP.P_POURC¿	FROM MATLIEAFF¿	LEFT OUTER JOIN MATLIEP ON ( MATLIEP.P_MAT = MATLIEAFF.MAT AND MATLIEAFF.DAT_AFF >= MATLIEP.P_DAT_AFF AND MATLIEAFF.DAT_AFF < MATLIEP.P_DAT_FIN))¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MATLIEAFFP.MAT,'' ''),8,'' '') || RPAD(NVL(TO_CHAR(MATLIEAFFP.DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| RPAD(NVL(TO_CHAR(MATLIEAFFP.DAT_FIN,''YYYYMMDDHH24MI''),''210001010000''),12,'' '')¿|| RPAD(NVL(NVL(NVL(R_ENR, T_ENR), P_ENR),'' '') ,1,'' '')  || DECODE(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATLIEAFFP.P_LIEU,0), ''T'', NVL(MATLIET.T_LIEU,0), ''R'', NVL(MATLIER.R_LIEU,0)), 0, ''P'', ''L'')¿|| TO_CHAR(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATLIEAFFP.P_LIEU,0), ''T'', NVL(MATLIET.T_LIEU,0), ''R'', NVL(MATLIER.R_LIEU,0), 0) ,''S00000000000'')¿|| RPAD(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(TRIM(MATLIEAFFP.P_POS),''POSNRS''), ''T'', NVL(TRIM(MATLIET.T_POS),''POSNRS''), ''R'', NVL(TRIM(MATLIER.R_POS),''POSNRS''), ''POSNRS''),10,'' '') ¿|| RPAD(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(TRIM(MATLIEAFFP.P_EQU),''EQUNRS''), ''T'', NVL(TRIM(MATLIET.T_EQU),''EQUNRS''), ''R'', NVL(TRIM(MATLIER.R_EQU),''EQUNRS''), ''EQUNRS''),6,'' '')¿|| RPAD(NVL(TO_CHAR(MATLIEAFFP.P_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIEAFFP.P_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIEAFFP.P_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIEAFFP.P_POS),''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIEAFFP.P_EQU),''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIEAFFP.P_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIEAFFP.P_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIEAFFP.P_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIEAFFP.P_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIEAFFP.P_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIEAFFP.P_POURC,0) ,''S000000'') ¿|| RPAD(NVL(TO_CHAR(MATLIET.T_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIET.T_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIET.T_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIET.T_POS),''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIET.T_EQU),''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIET.T_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIET.T_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIET.T_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIET.T_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIET.T_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIET.T_POURC,0) ,''S000000'') ¿|| RPAD(NVL(TO_CHAR(MATLIER.R_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIER.R_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIER.R_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIER.R_POS), ''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIER.R_EQU), ''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIER.R_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIER.R_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIER.R_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIER.R_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIER.R_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIER.R_POURC,0) ,''S000000'') ¿FROM MATLIEAFFP¿LEFT OUTER JOIN MATLIET ON ( MATLIET.T_MAT = MATLIEAFFP.MAT AND MATLIEAFFP.DAT_AFF >= MATLIET.T_DAT_AFF AND MATLIEAFFP.DAT_AFF < MATLIET.T_DAT_FIN )¿LEFT OUTER JOIN MATLIER ON ( MATLIER.R_MAT = MATLIEAFFP.MAT AND MATLIEAFFP.DAT_AFF >= MATLIER.R_DAT_AFF AND MATLIEAFFP.DAT_AFF < MATLIER.R_DAT_FIN )'
'TGE_GESTIL_MATBAD','190','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_AFF), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(BADGE,'' ''),8,'' '')¿|| RPAD(NVL(LIB,'' ''),30,'' '')¿|| RPAD(NVL(CAT,'' ''),2,'' '')¿|| RPAD(NVL(AFFCPT,'' ''),6,'' '')¿|| RPAD(NVL(REGA,'' ''),2,'' '')¿|| RPAD(NVL(REGT,'' ''),2,'' '')¿|| RPAD(NVL(REGS,'' ''),2,'' '')¿|| RPAD(NVL(F_TPS_REEL,'' ''),1,'' '')¿|| RPAD(NVL(F_TRAIT_POE,'' ''),1,'' '')¿FROM AD_MATBAD¿WHERE ENR = ''M'''
##
SYS_TRT_TOMAKE
=SQL=
DECLARE
	REC_EXIST PLS_INTEGER := 0;
BEGIN
	SELECT COUNT(*) INTO REC_EXIST FROM SYS_TRT_TOMAKE WHERE ID_TRT = 'Traitement_Bo';
	IF REC_EXIST = 1 THEN
		RETURN;
	END IF;
  	INSERT INTO SYS_TRT_TOMAKE(ID_TRT,REQUESTEDGO_OR_FREQUENCY) VALUES ('Traitement_Bo','00');
END;
##
STD_TABIDENT
==
DELETE FROM STD_TABIDENT WHERE ident in ('TGE_GESTIL_NAT_ETL','TGE_GESTIL_CPT_PER_ETL')
'TGE_GESTIL_CPT_PER_ETL','Compteurs/périodes à consolider dans ADP Link','TGE_GESTIL_CPT_PER_ETL','U',NULL,'TG','O','O','N','Couples de compteur / période Gestil à consolider dans ADP Link. Le diviseur sert à ramener le format interne de certains compteurs Gestil à des unités traditionnelles. Par exemple 1 jour est souvent compté dans le jeu d''instructions avec un facteur 1000.','0','0'
'TGE_GESTIL_NAT_ETL','Natures d''heures à consolider dans ADP Link','TGE_GESTIL_NAT_ETL','U',NULL,'TG','O','O','N','Natures d''heures Gestil à consolider dans ADP Link.','0','0'
##
STD_TABDESCCOL
==
DELETE FROM STD_TABDESCCOL WHERE ident in ('TGE_GESTIL_NAT_ETL','TGE_GESTIL_CPT_PER_ETL')
'TGE_GESTIL_CPT_PER_ETL','0','Pac','O','O','O','O',NULL,NULL,NULL,'NUMPAC','X','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'TGE_GESTIL_CPT_PER_ETL','1','Compteur','O','O','O','O',NULL,NULL,NULL,'CPT','X','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'TGE_GESTIL_CPT_PER_ETL','2','Période','O','O','O','O',NULL,NULL,NULL,'PER','X','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'TGE_GESTIL_CPT_PER_ETL','3','Diviseur','N','N','O','O',NULL,NULL,NULL,'DIVISEUR_VAL_VARJ','N','11','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'TGE_GESTIL_CPT_PER_ETL','4','Unité','N','N','O','O',NULL,NULL,NULL,'UNITE','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'TGE_GESTIL_CPT_PER_ETL','5','Actif O/N','N','N','O','O',NULL,NULL,NULL,'ACTIF','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'TGE_GESTIL_NAT_ETL','0','Pac','O','O','O','O',NULL,NULL,NULL,'NUMPAC','X','6','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'TGE_GESTIL_NAT_ETL','1','Nature d''heures','O','O','O','O',NULL,NULL,NULL,'NAT','X','8','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'TGE_GESTIL_NAT_ETL','2','Actif O/N','N','N','O','O',NULL,NULL,NULL,'ACTIF','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
##
DROP_CONSTRAINT
=SQL=
BEGIN
	FOR R IN ( SELECT TABLE_NAME , CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R' AND TABLE_NAME IN ('TGE_GESTIL_LISNATD','TGE_GESTIL_CPT','TGE_GESTIL_MATJOU','TGE_GESTIL_MATJOUD','TGE_GESTIL_MATCPT','TGE_GESTIL_MATHOR','TGE_GESTIL_MATLIE') ORDER BY TABLE_NAME ASC ,CONSTRAINT_NAME ASC )
	LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' DROP CONSTRAINT '||R.CONSTRAINT_NAME ;
	END LOOP;
END;
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_DSDAUTRAV','RD_DSFAUTRAV','TITRE_ETR') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_DSDAUTRAV','Date de début autorisation de travail','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
'*','RD_DSFAUTRAV','Date de fin autorisation de travail','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
'*','TITRE_ETR','Titre séjour étranger','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_DSDAUTRAV','RD_DSFAUTRAV','TITRE_ETR') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_DSDAUTRAV','Date de début autorisation de travail','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
'*','RD_DSFAUTRAV','Date de fin autorisation de travail','DIC_ADM_PERSO','D','dd.MM.yyyy','0',NULL,NULL,NULL,'GZ','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
'*','TITRE_ETR','Titre séjour étranger','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'959',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_DSDAUTRAV','RD_DSFAUTRAV','TITRE_ETR') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_DSDAUTRAV','*','Date de délivrance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_DSDAUTRAV_*_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSFAUTRAV','*','Date d''expiration','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_DSFAUTRAV_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','TITRE_ETR','*','Titre séjour étranger','N','hidden','TAB_RD_TYPCAR','1','Code,Libellé','TYPCAR,#OUI',NULL,'N',NULL,'VALO_TITRE_ETR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_DSDAUTRAV','RD_DSFAUTRAV','TITRE_ETR') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_DSDAUTRAV','*','Date de délivrance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_DSDAUTRAV_*_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSFAUTRAV','*','Date d''expiration','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_DSFAUTRAV_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','TITRE_ETR','*','Titre séjour étranger','N','hidden','TAB_RD_TYPCAR','1','Code,Libellé','TYPCAR,#OUI',NULL,'N',NULL,'VALO_TITRE_ETR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('CAR_ECR_ETR') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','CAR_ECR_ETR','ETR_AFFICHAGE',NULL,NULL,'N',NULL,'959',NULL,'Groupe données à saisir pour un salarié étranger ','Groupe données à saisir pour un salarié étranger.¿Si la nationalité est ''française'' le groupe n''est pas affiché.',NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('CAR_ECR_ETR') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','CAR_ECR_ETR','ETR_AFFICHAGE',NULL,NULL,'N',NULL,'959',NULL,'Groupe données à saisir pour un salarié étranger ','Groupe données à saisir pour un salarié étranger.¿Si la nationalité est ''française'' le groupe n''est pas affiché.',NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('CAR_ECR_ETR') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','CAR_ECR_ETR','#EOL_12','33',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_13','37',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_6','45','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_9','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','#LIBELLE_4','26',NULL,'FormTitreµInformations carte de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#LIBELLE_5','48','N','FormTitreµAutorisation provisoire de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','CBPRT','44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','COMCAR','47','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DEFCAR','31','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DSDCAR','34','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DSFCAR','35','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','NOCAR','30','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','ORGCAR','38','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','RD_DSDAUTRAV','49',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','RD_DSFAUTRAV','50',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','TYPCAR','28','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('CAR_ECR_ETR') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','CAR_ECR_ETR','#EOL_12','33',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_13','37',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_6','45','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','#EOL_9','29',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','#LIBELLE_4','26',NULL,'FormTitreµInformations carte de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','#LIBELLE_5','48','N','FormTitreµAutorisation provisoire de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','CBPRT','44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','COMCAR','47','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DEFCAR','31','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DSDCAR','34','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','DSFCAR','35','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','NOCAR','30','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','ORGCAR','38','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','CAR_ECR_ETR','RD_DSDAUTRAV','49',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','RD_DSFAUTRAV','50',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','CAR_ECR_ETR','TYPCAR','28','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('ETR_AFFICHAGE','RD_DSDAUTRAV_*_CTRL','RD_DSDAUTRAV_WKFEMB_CTRL','RD_DSFAUTRAV_*_OBLIG','RD_DSFAUTRAV_WKFEMB_OBLIG','VALO_TITRE_ETR') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','ETR_AFFICHAGE','AFF','Affichage conditionnel pour nationalité étrangère',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TITRE_ETR","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Les données du groupe ne sont affichées que pour les salariés de nationalité étrangère','M',NULL,'/*¿ * ETR_AFFICHAGE :¿ * Les données du groupe ne sont affichées que pour les salariés de nationalité étrangère¿ */¿¿if (DIC_DONNEES_VIRTUELLES.TITRE_ETR != "N") {¿}¿','Affichage conditionnel pour  nationalité étrangère'
'*','RD_DSDAUTRAV_*_CTRL','CTL','Contrôle sur date carte d''autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"ET_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Creer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":16},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":17},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":18},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":19},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":20},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":21},{"TYPE":"ET_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£Creer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":22},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":23},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"WAR","OPERANDE_2":"CODEERREUR£GENCNT29£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":24},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":25},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":26}]','Contrôle sur date carte d''autorisation de travail : pas postérieure à date du jour et dans contrat','N',NULL,'/*¿ * RD_DSDAUTRAV_*_CTRL :¿ * Contrôle sur date carte d''autorisation de travail : pas postérieure à date du jour et dans contrat¿ */¿¿if (DIC_ADM_PERSO.TYPCAR == vide) {¿	return;¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DATE_GT_DTJOUR(DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENDIV01", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(TMP1, DIC_ADM_PERSO.RD_DSDAUTRAV) && codeoperation == "Creer") {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(TMP1, DIC_ADM_PERSO.RD_DSDAUTRAV) && codeoperation != "Creer") {¿	WAR("GENCNT29", donneecourante);¿}¿','Contrôle sur date carte d''autorisation de travail'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','CTL','Contrôle sur date autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^DSDCN§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle sur date autorisation de travail, pas postérieure à date du jour et par rapport au contrat','N',NULL,'/*¿ * RD_DSDAUTRAV_WKFEMB_CTRL :¿ * Contrôle sur date autorisation de travail, pas postérieure à date du jour et par rapport au contrat¿ */¿¿if (DIC_ADM_PERSO.TYPCAR == vide) {¿	return;¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DATE_GT_DTJOUR(DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENDIV01", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(DIC_ADM_CONTRAT.DSDCN, DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿','Contrôle sur date autorisation de travail'
'*','RD_DSFAUTRAV_*_OBLIG','CTL','Date fin autorisation de travail obligatoire',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"LT","OPERANDE_2":"DONNEE£RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP2£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP2","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Date fin autorisation de travail obligatoire : cohérence avec la date de début de contrat et la date de début autorisation de travail','N',NULL,'/*¿ * RD_DSFAUTRAV_*_OBLIG :¿ * Date fin autorisation de travail obligatoire : cohérence avec la date de début de contrat et la date de début autorisation de travail¿ */¿¿if (DIC_ADM_PERSO.TYPCAR != vide && DIC_ADM_PERSO.RD_DSDAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV == vide) {¿		ERR("GEN00005", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DIC_ADM_PERSO.RD_DSFAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV < DIC_ADM_PERSO.RD_DSDAUTRAV) {¿		ERR("GENDIV31", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿TMP2 = TAB("REG_RD_ADM_CONTRAT", 1, 3, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && TMP1 != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, TMP1)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && TMP2 != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, TMP2)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿','Date fin autorisation de travail obligatoire'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','CTL','Contrôle date de fin autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"LT","OPERANDE_2":"DONNEE£RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSDCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSFCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSFCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle date de fin autorisation de travail : postérieure à date de début + contrôle de cohérence entre la date de début de contrat et la date de début d''autorisation de travail pour WKF Embauche','N',NULL,'/*¿ * RD_DSFAUTRAV_WKFEMB_OBLIG :¿ * Contrôle date de fin autorisation de travail : postérieure à date de début + contrôle de cohérence entre la date de début de contrat et la date de début d''autorisation de travail pour WKF Embauche¿ */¿¿if (DIC_ADM_PERSO.TYPCAR != vide && DIC_ADM_PERSO.RD_DSDAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV == vide) {¿		ERR("GEN00005", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DIC_ADM_PERSO.RD_DSFAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV < DIC_ADM_PERSO.RD_DSDAUTRAV) {¿		ERR("GENDIV31", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && DIC_ADM_CONTRAT.DSDCN != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, DIC_ADM_CONTRAT.DSDCN)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && DIC_ADM_CONTRAT.DSFCN != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, DIC_ADM_CONTRAT.DSFCN)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿','Contrôle date de fin autorisation de travail'
'*','VALO_TITRE_ETR','AUT','Valorisation code titre séjour étranger table PAYS',NULL,'959',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_PAYS_TITRE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^NATACT","RESULTAT":"DONNEE£TITRE_ETR","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation code titre séjour étranger table PAYS','O',NULL,'/*¿ * VALO_TITRE_ETR :¿ * Valorisation code titre séjour étranger table PAYS¿ */¿¿DIC_DONNEES_VIRTUELLES.TITRE_ETR = TAB("REG_RD_PAYS_TITRE", 1, 1, DIC_ADM_PERSO.NATACT);¿','Valorisation code titre séjour étranger table PAYS'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('ETR_AFFICHAGE','RD_DSDAUTRAV_*_CTRL','RD_DSDAUTRAV_WKFEMB_CTRL','RD_DSFAUTRAV_*_OBLIG','RD_DSFAUTRAV_WKFEMB_OBLIG','VALO_TITRE_ETR') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','ETR_AFFICHAGE','AFF','Affichage conditionnel pour nationalité étrangère',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TITRE_ETR","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Les données du groupe ne sont affichées que pour les salariés de nationalité étrangère','M',NULL,'/*¿ * ETR_AFFICHAGE :¿ * Les données du groupe ne sont affichées que pour les salariés de nationalité étrangère¿ */¿¿if (DIC_DONNEES_VIRTUELLES.TITRE_ETR != "N") {¿}¿','Affichage conditionnel pour  nationalité étrangère'
'*','RD_DSDAUTRAV_*_CTRL','CTL','Contrôle sur date carte d''autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"ET_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Creer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":16},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":17},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":18},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":19},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":20},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":21},{"TYPE":"ET_SI","OPERANDE_1":"@codeoperation££","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£Creer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":22},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":23},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"WAR","OPERANDE_2":"CODEERREUR£GENCNT29£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":24},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":25},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":26}]','Contrôle sur date carte d''autorisation de travail : pas postérieure à date du jour et dans contrat','N',NULL,'/*¿ * RD_DSDAUTRAV_*_CTRL :¿ * Contrôle sur date carte d''autorisation de travail : pas postérieure à date du jour et dans contrat¿ */¿¿if (DIC_ADM_PERSO.TYPCAR == vide) {¿	return;¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DATE_GT_DTJOUR(DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENDIV01", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(TMP1, DIC_ADM_PERSO.RD_DSDAUTRAV) && codeoperation == "Creer") {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(TMP1, DIC_ADM_PERSO.RD_DSDAUTRAV) && codeoperation != "Creer") {¿	WAR("GENCNT29", donneecourante);¿}¿','Contrôle sur date carte d''autorisation de travail'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','CTL','Contrôle sur date autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^DSDCN§DATE_FIN=DONNEE^RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle sur date autorisation de travail, pas postérieure à date du jour et par rapport au contrat','N',NULL,'/*¿ * RD_DSDAUTRAV_WKFEMB_CTRL :¿ * Contrôle sur date autorisation de travail, pas postérieure à date du jour et par rapport au contrat¿ */¿¿if (DIC_ADM_PERSO.TYPCAR == vide) {¿	return;¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DATE_GT_DTJOUR(DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENDIV01", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DTFIN_GT_DTDEB(DIC_ADM_CONTRAT.DSDCN, DIC_ADM_PERSO.RD_DSDAUTRAV)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSDAUTRAV);¿}¿','Contrôle sur date autorisation de travail'
'*','RD_DSFAUTRAV_*_OBLIG','CTL','Date fin autorisation de travail obligatoire',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"LT","OPERANDE_2":"DONNEE£RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP2£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP2","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Date fin autorisation de travail obligatoire : cohérence avec la date de début de contrat et la date de début autorisation de travail','N',NULL,'/*¿ * RD_DSFAUTRAV_*_OBLIG :¿ * Date fin autorisation de travail obligatoire : cohérence avec la date de début de contrat et la date de début autorisation de travail¿ */¿¿if (DIC_ADM_PERSO.TYPCAR != vide && DIC_ADM_PERSO.RD_DSDAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV == vide) {¿		ERR("GEN00005", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DIC_ADM_PERSO.RD_DSFAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV < DIC_ADM_PERSO.RD_DSDAUTRAV) {¿		ERR("GENDIV31", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿TMP1 = TAB("REG_RD_ADM_CONTRAT", 1, 2, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿TMP2 = TAB("REG_RD_ADM_CONTRAT", 1, 3, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_NUMCNT);¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && TMP1 != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, TMP1)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && TMP2 != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, TMP2)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿','Date fin autorisation de travail obligatoire'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','CTL','Contrôle date de fin autorisation de travail',NULL,'959',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£TYPCAR","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"LT","OPERANDE_2":"DONNEE£RD_DSDAUTRAV","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSDCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSFAUTRAV","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSFCN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"££","OPERATEUR":"CTL_TRUE","OPERANDE_2":"FONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSFCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle date de fin autorisation de travail : postérieure à date de début + contrôle de cohérence entre la date de début de contrat et la date de début d''autorisation de travail pour WKF Embauche','N',NULL,'/*¿ * RD_DSFAUTRAV_WKFEMB_OBLIG :¿ * Contrôle date de fin autorisation de travail : postérieure à date de début + contrôle de cohérence entre la date de début de contrat et la date de début d''autorisation de travail pour WKF Embauche¿ */¿¿if (DIC_ADM_PERSO.TYPCAR != vide && DIC_ADM_PERSO.RD_DSDAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV == vide) {¿		ERR("GEN00005", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSDAUTRAV != vide && DIC_ADM_PERSO.RD_DSFAUTRAV != vide) {¿	if (DIC_ADM_PERSO.RD_DSFAUTRAV < DIC_ADM_PERSO.RD_DSDAUTRAV) {¿		ERR("GENDIV31", DIC_ADM_PERSO.RD_DSFAUTRAV);¿	}¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && DIC_ADM_CONTRAT.DSDCN != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, DIC_ADM_CONTRAT.DSDCN)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿if (DIC_ADM_PERSO.RD_DSFAUTRAV != vide && DIC_ADM_CONTRAT.DSFCN != vide && DTFIN_GT_DTDEB(DIC_ADM_PERSO.RD_DSFAUTRAV, DIC_ADM_CONTRAT.DSFCN)) {¿	ERR("GENCNT28", DIC_ADM_PERSO.RD_DSFAUTRAV);¿}¿','Contrôle date de fin autorisation de travail'
'*','VALO_TITRE_ETR','AUT','Valorisation code titre séjour étranger table PAYS',NULL,'959',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_PAYS_TITRE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^NATACT","RESULTAT":"DONNEE£TITRE_ETR","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation code titre séjour étranger table PAYS','O',NULL,'/*¿ * VALO_TITRE_ETR :¿ * Valorisation code titre séjour étranger table PAYS¿ */¿¿DIC_DONNEES_VIRTUELLES.TITRE_ETR = TAB("REG_RD_PAYS_TITRE", 1, 1, DIC_ADM_PERSO.NATACT);¿','Valorisation code titre séjour étranger table PAYS'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('ETR_AFFICHAGE','RD_DSDAUTRAV_*_CTRL','RD_DSDAUTRAV_WKFEMB_CTRL','RD_DSFAUTRAV_*_OBLIG','RD_DSFAUTRAV_WKFEMB_OBLIG','VALO_TITRE_ETR') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','ETR_AFFICHAGE','1',NULL,'DONNEE£TITRE_ETRµVALEUR£NµNEQ',NULL,NULL,'FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','1',NULL,'DONNEE£TYPCARµ@vide££µEQ',NULL,NULL,'2','3'
'*','RD_DSDAUTRAV_*_CTRL','2','££','FIN','££','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','3',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'5','6'
'*','RD_DSDAUTRAV_*_CTRL','5','££','ERR','CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','6','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSDAUTRAV_*_CTRL','7',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#µ@codeoperation££µVALEUR£CreerµEQµ#ET#',NULL,NULL,'10','11'
'*','RD_DSDAUTRAV_*_CTRL','10','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','11','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSDAUTRAV_*_CTRL','12',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#µ@codeoperation££µVALEUR£CreerµNEQµ#ET#',NULL,NULL,'15','FIN'
'*','RD_DSDAUTRAV_*_CTRL','15','££','WAR','CODEERREUR£GENCNT29£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','1',NULL,'DONNEE£TYPCARµ@vide£µEQ',NULL,NULL,'2','3'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','2','££','FIN','££','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','3',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµ££µFONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'5','6'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','5','££','ERR','CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','6',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^DSDCN§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'8','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','8','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','1',NULL,'DONNEE£TYPCARµ@vide£µNEQµDONNEE£RD_DSDAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'3','5'
'*','RD_DSFAUTRAV_*_OBLIG','3',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µEQ',NULL,NULL,'4','5'
'*','RD_DSFAUTRAV_*_OBLIG','4','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','5',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµDONNEE£RD_DSFAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'7','9'
'*','RD_DSFAUTRAV_*_OBLIG','7',NULL,'DONNEE£RD_DSFAUTRAVµDONNEE£RD_DSDAUTRAVµLT',NULL,NULL,'8','9'
'*','RD_DSFAUTRAV_*_OBLIG','8','££','ERR','CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','9','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSFAUTRAV_*_OBLIG','10','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP2£',NULL,NULL
'*','RD_DSFAUTRAV_*_OBLIG','11',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµ@TMP1£µ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP1µCTL_TRUEµ#ET#',NULL,NULL,'14','15'
'*','RD_DSFAUTRAV_*_OBLIG','14','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','15',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµ@TMP2£µ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP2µCTL_TRUEµ#ET#',NULL,NULL,'18','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','18','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','1',NULL,'DONNEE£TYPCARµ@vide£µNEQµDONNEE£RD_DSDAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'3','5'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','3',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µEQ',NULL,NULL,'4','5'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','4','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','5',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµDONNEE£RD_DSFAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'7','9'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','7',NULL,'DONNEE£RD_DSFAUTRAVµDONNEE£RD_DSDAUTRAVµLT',NULL,NULL,'8','9'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','8','££','ERR','CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','9',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµDONNEE£DSDCNµ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSDCNµCTL_TRUEµ#ET#',NULL,NULL,'12','13'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','12','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','13',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµDONNEE£DSFCNµ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSFCNµCTL_TRUEµ#ET#',NULL,NULL,'16','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','16','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','VALO_TITRE_ETR','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_PAYS_TITRE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^NATACT','DONNEE£TITRE_ETR',NULL,NULL
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('ETR_AFFICHAGE','RD_DSDAUTRAV_*_CTRL','RD_DSDAUTRAV_WKFEMB_CTRL','RD_DSFAUTRAV_*_OBLIG','RD_DSFAUTRAV_WKFEMB_OBLIG','VALO_TITRE_ETR') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','ETR_AFFICHAGE','1',NULL,'DONNEE£TITRE_ETRµVALEUR£NµNEQ',NULL,NULL,'FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','1',NULL,'DONNEE£TYPCARµ@vide££µEQ',NULL,NULL,'2','3'
'*','RD_DSDAUTRAV_*_CTRL','2','££','FIN','££','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','3',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'5','6'
'*','RD_DSDAUTRAV_*_CTRL','5','££','ERR','CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','6','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSDAUTRAV_*_CTRL','7',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#µ@codeoperation££µVALEUR£CreerµEQµ#ET#',NULL,NULL,'10','11'
'*','RD_DSDAUTRAV_*_CTRL','10','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_*_CTRL','11','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSDAUTRAV_*_CTRL','12',NULL,'DONNEE£RD_DSDAUTRAVµ@vide££µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=@TMP1§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#µ@codeoperation££µVALEUR£CreerµNEQµ#ET#',NULL,NULL,'15','FIN'
'*','RD_DSDAUTRAV_*_CTRL','15','££','WAR','CODEERREUR£GENCNT29£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','1',NULL,'DONNEE£TYPCARµ@vide£µEQ',NULL,NULL,'2','3'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','2','££','FIN','££','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','3',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµ££µFONCTION£DATE_GT_DTJOUR£DATE=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'5','6'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','5','££','ERR','CODEERREUR£GENDIV01£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','6',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^DSDCN§DATE_FIN=DONNEE^RD_DSDAUTRAVµCTL_TRUEµ#ET#',NULL,NULL,'8','FIN'
'*','RD_DSDAUTRAV_WKFEMB_CTRL','8','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSDAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','1',NULL,'DONNEE£TYPCARµ@vide£µNEQµDONNEE£RD_DSDAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'3','5'
'*','RD_DSFAUTRAV_*_OBLIG','3',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µEQ',NULL,NULL,'4','5'
'*','RD_DSFAUTRAV_*_OBLIG','4','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','5',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµDONNEE£RD_DSFAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'7','9'
'*','RD_DSFAUTRAV_*_OBLIG','7',NULL,'DONNEE£RD_DSFAUTRAVµDONNEE£RD_DSDAUTRAVµLT',NULL,NULL,'8','9'
'*','RD_DSFAUTRAV_*_OBLIG','8','££','ERR','CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','9','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP1£',NULL,NULL
'*','RD_DSFAUTRAV_*_OBLIG','10','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_ADM_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_NUMCNT','@TMP2£',NULL,NULL
'*','RD_DSFAUTRAV_*_OBLIG','11',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµ@TMP1£µ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP1µCTL_TRUEµ#ET#',NULL,NULL,'14','15'
'*','RD_DSFAUTRAV_*_OBLIG','14','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','15',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµ@TMP2£µ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=@TMP2µCTL_TRUEµ#ET#',NULL,NULL,'18','FIN'
'*','RD_DSFAUTRAV_*_OBLIG','18','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','1',NULL,'DONNEE£TYPCARµ@vide£µNEQµDONNEE£RD_DSDAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'3','5'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','3',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µEQ',NULL,NULL,'4','5'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','4','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','5',NULL,'DONNEE£RD_DSDAUTRAVµ@vide£µNEQµDONNEE£RD_DSFAUTRAVµ@vide£µNEQµ#ET#',NULL,NULL,'7','9'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','7',NULL,'DONNEE£RD_DSFAUTRAVµDONNEE£RD_DSDAUTRAVµLT',NULL,NULL,'8','9'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','8','££','ERR','CODEERREUR£GENDIV31£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','9',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµDONNEE£DSDCNµ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSDCNµCTL_TRUEµ#ET#',NULL,NULL,'12','13'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','12','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','13',NULL,'DONNEE£RD_DSFAUTRAVµ@vide£µNEQµDONNEE£DSFCNµ@vide£µNEQµ#ET#µ££µFONCTION£DTFIN_GT_DTDEB£DATE_DEB=DONNEE^RD_DSFAUTRAV§DATE_FIN=DONNEE^DSFCNµCTL_TRUEµ#ET#',NULL,NULL,'16','FIN'
'*','RD_DSFAUTRAV_WKFEMB_OBLIG','16','££','ERR','CODEERREUR£GENCNT28£NOM_DONNEE_FOCUS=DONNEE^RD_DSFAUTRAV','£','FIN','FIN'
'*','VALO_TITRE_ETR','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_PAYS_TITRE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^NATACT','DONNEE£TITRE_ETR',NULL,NULL
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('VEH_DATEATRIB') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','VEH_DATEATRIB','Date Attribution','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'960',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('VEH_DATEATRIB') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','VEH_DATEATRIB','Date Attribution','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'960',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('VEH_DATEATRIB') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','VEH_DATEATRIB','*','Date Attribution','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTRL_DATE_ATTRIB_VEH_CONTRAT',NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('VEH_DATEATRIB') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','VEH_DATEATRIB','*','Date Attribution','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTRL_DATE_ATTRIB_VEH_CONTRAT',NULL,NULL,NULL,'N','N','N','0','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('CTRL_DATE_ATTRIB_VEH_CONTRAT') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','CTL','Contrôle de cohérence de la date d''attribution du véhicule de fonction',NULL,'960',NULL,'[{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£VEH_DATEATRIB","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£VEH_DATEATRIB","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"GT","OPERANDE_2":"DONNEE£VEH_DATEATRIB","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK105£NOM_DONNEE_FOCUS=DONNEE^VEH_DATEATRIB","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date d''attribution du véhicule de fonction doit être postérieures à la date de début de contrat','N',NULL,'/*¿ * CTRL_DATE_ATTRIB_VEH_CONTRAT :¿ * La date d''attribution du véhicule de fonction doit être postérieure à la date de début de contrat¿ */¿¿if (ECR_NWF() && DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB == vide) {¿	return;¿}¿if (DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB != vide) {¿	if (DIC_ADM_CONTRAT.DSDCN > DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB) {¿		ERR("GENWK105", DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB);¿	}¿}¿','Contrôle de cohérence de la date d''attribution du véhicule de fonction (doit être > DSDCN)'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('CTRL_DATE_ATTRIB_VEH_CONTRAT') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','CTL','Contrôle de cohérence de la date d''attribution du véhicule de fonction',NULL,'960',NULL,'[{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£VEH_DATEATRIB","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£VEH_DATEATRIB","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"GT","OPERANDE_2":"DONNEE£VEH_DATEATRIB","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK105£NOM_DONNEE_FOCUS=DONNEE^VEH_DATEATRIB","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date d''attribution du véhicule de fonction doit être postérieures à la date de début de contrat','N',NULL,'/*¿ * CTRL_DATE_ATTRIB_VEH_CONTRAT :¿ * La date d''attribution du véhicule de fonction doit être postérieure à la date de début de contrat¿ */¿¿if (ECR_NWF() && DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB == vide) {¿	return;¿}¿if (DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB != vide) {¿	if (DIC_ADM_CONTRAT.DSDCN > DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB) {¿		ERR("GENWK105", DIC_ADM_CONTRAT_HISTO.VEH_DATEATRIB);¿	}¿}¿','Contrôle de cohérence de la date d''attribution du véhicule de fonction (doit être > DSDCN)'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('CTRL_DATE_ATTRIB_VEH_CONTRAT') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','1',NULL,'£µ£µECR_NWFµDONNEE£VEH_DATEATRIBµ@vide£µEQµ#ET#',NULL,NULL,'3','4'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','3','££','FIN','££','£','FIN','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','4',NULL,'DONNEE£VEH_DATEATRIBµ@vide£µNEQ',NULL,NULL,'5','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','5',NULL,'DONNEE£DSDCNµDONNEE£VEH_DATEATRIBµGT',NULL,NULL,'6','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','6','££','ERR','CODEERREUR£GENWK105£NOM_DONNEE_FOCUS=DONNEE^VEH_DATEATRIB','£','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('CTRL_DATE_ATTRIB_VEH_CONTRAT') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','1',NULL,'£µ£µECR_NWFµDONNEE£VEH_DATEATRIBµ@vide£µEQµ#ET#',NULL,NULL,'3','4'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','3','££','FIN','££','£','FIN','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','4',NULL,'DONNEE£VEH_DATEATRIBµ@vide£µNEQ',NULL,NULL,'5','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','5',NULL,'DONNEE£DSDCNµDONNEE£VEH_DATEATRIBµGT',NULL,NULL,'6','FIN'
'*','CTRL_DATE_ATTRIB_VEH_CONTRAT','6','££','ERR','CODEERREUR£GENWK105£NOM_DONNEE_FOCUS=DONNEE^VEH_DATEATRIB','£','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_ZAB74') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_ZAB74','Echelon (IEG)','DIC_ADM_CONTRAT_HISTO','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'951',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_ZAB74') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_ZAB74','Echelon (IEG)','DIC_ADM_CONTRAT_HISTO','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'951',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_ZAB74') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_ZAB74','*','Echelon (IEG)','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_ZAB74') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_ZAB74','*','Echelon (IEG)','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
TAG_CHARSET=@€éèç
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('CTL_WKF_INSERT_PEREMP_SELECTION','CTRL_DATES_INSERTION_SUSPENSION','CTRL_DEM_ACPTE_SUSPENSION','DSA302_WKF_DEPART_ALIM') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','CTL_WKF_INSERT_PEREMP_SELECTION','CTL','Cohérence du salarié sélectionné WKF Insertion Période d''emploi  : MPE et sauf NPA',NULL,'928',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_INFO_PAC§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF46£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NATCOL","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£NPA","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£NATCOL","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£STA","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£SAFBA","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF45£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_PROCESSUS_CNT_EN_COURS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP3£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF12£NOM_DONNEE_FOCUS=@vide^§PARAM_1=@TMP3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle  de cohérence du salarié sélectionné  WKF  Insertion Période d''emploi   : _RC_- Le collaborateur (numpac/pacmat) fait déjà l''objet d''un processus expert de modifications contractuelles en cours + PAC MPE + exclusion des NPA ','N',NULL,'/*¿ * CTL_WKF_NEW_PEREMP_SELECTION :¿  * Contrôle  de cohérence du salarié sélectionné  WKF nouvelle période d''emploi  : _RC_- ¿ * Le collaborateur (numpac/pacmat) fait déjà l''objet d''un processus expert de modifications contractuelles en cours + PAC MPE + exclusion des NPA¿ */¿¿TMP1 = TAB("TAB_RD_INFO_PAC", 1, 3, DONNEE.GEN_NUMPAC);¿if ((TMP1 == vide || TMP1 == "N")) {¿	ERR("GENWKF46");¿}¿if ((DIC_ADM_CONTRAT.NATCOL == "NPA" || DIC_ADM_CONTRAT.NATCOL == "STA" && DIC_ADM_CONTRAT_HISTO.SAFBA == 0)) {¿	ERR("GENWKF45");¿}¿TMP3 = TAB("REG_RD_WKF_PROCESSUS_CNT_EN_COURS", 1, 1, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP3 != vide) {¿	ERR("GENWKF12", vide, TMP3);¿}¿','Cohérence du salarié sélectionné WKF  Insertion Période d''emploi  : MPE et sauf NPA'
'*','CTRL_DATES_INSERTION_SUSPENSION','CTL','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE','1300','928',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_INSERTION_PERIODE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_MATRIC§PARAM_2=DONNEE^DSDCN_PI§PARAM_3=DONNEE^DSFCN_PI","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"WAR","OPERANDE_2":"CODEERREUR£GENWK101£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5}]','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE : ¿si DSDCN_PI et DSFCN_PI sont supérieures à DSFSUS (fin prévue suspension) alors insertion OK¿si DSDCN_PI et DSFCN_PI sont inférieures à DSA301 (début suspension) alors insertion OK¿si non, message d''alerte','N',NULL,'/*¿ * CTRL_DATES_INSERTION_SUSPENSION :¿ * Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE : ¿ * si DSDCN_PI et DSFCN_PI sont supérieures à DSFSUS (fin prévue suspension) alors insertion OK¿ * si DSDCN_PI et DSFCN_PI sont inférieures à DSA301 (début suspension) alors insertion OK¿ * si non, message d''alerte¿ */¿¿TMP1 = TAB("REG_RD_WKF_INSERTION_PERIODE", 1, 0, DONNEE.GEN_MATRIC, DIC_DONNEES_VIRTUELLES.DSDCN_PI, DIC_DONNEES_VIRTUELLES.DSFCN_PI);¿if (TMP1 != 0) {¿	WAR("GENWK101");¿}¿','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE'
'*','CTRL_DEM_ACPTE_SUSPENSION','CTL','Contrôle si le salarié est en suspension à la date de la demande d''acompte',NULL,'928',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA301","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DATE_DEM_ACPTE","OPERATEUR":"GE","OPERANDE_2":"DONNEE£DSA301","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DATE_DEM_ACPTE","OPERATEUR":"LE","OPERANDE_2":"DONNEE£DSFSUS","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK102£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle si le salarié est en suspension à la date de la demande d''acompte : blocage','O',NULL,'/*¿ * CTRL_DEM_ACPTE_SUSPENSION :¿ * Contrôle si le salarié est en suspension à la date de la demande d''acompte : blocage¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.DSA301 == vide) {¿	return;¿}¿if (DIC_DONNEES_VIRTUELLES.DATE_DEM_ACPTE >= DIC_ADM_CONTRAT_HISTO.DSA301 && DIC_DONNEES_VIRTUELLES.DATE_DEM_ACPTE <= DIC_ADM_CONTRAT_HISTO.DSFSUS) {¿	ERR("GENWK102");¿}¿','Contrôle si le salarié est en suspension à la date de la demande d''acompte'
'*','DSA302_WKF_DEPART_ALIM','AUT','Alimentation de la date de fin de suspension dans les processus de départ',NULL,'928',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA301","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_WF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£CHOIX_MOD_ANN_DEPART","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_WF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£CHOIX_MOD_ANN_DEPART","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£DSA302","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£DSA302","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation de la date de fin de suspension (DSA302) dans les processus de départ :¿si la date de fin réelle de suspension est vide, que la date de sortie est saisie dans un processus de départ alors on aliment DSA302 (date fin réelle de supsension)','O',NULL,'/*¿ * DSA302_WKF_DEPART_ALIM :¿* Alimentation de la date de fin de suspension (DSA302) dans les processus de départ : si la date de début de suspension est renseignée, alors¿ * si la date de fin réelle de suspension est vide, que la date de sortie est saisie dans un processus de départ alors on alimente DSA302 (date fin réelle de suspension)¿ * si la date de fin réelle de suspension est renseignée, que la sortie est annulée dans un processus de départ alors on vide DSA302 (date fin réelle de suspension)¿ * si la date de de sortie est modifiée et que la date de fin réelle de suspension est déjà renseignée, alors on modifie DSA302 (date fin réelle de suspension)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.DSA301 == vide) {¿	return;¿}¿if (DIC_ADM_CONTRAT_HISTO.DSA302 == vide && DIC_ADM_CONTRAT_HISTO.DSSAD != vide) {¿	DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿}¿if (ECR_WF() && DIC_DONNEES_VIRTUELLES.CHOIX_MOD_ANN_DEPART == "A") {¿	DIC_ADM_CONTRAT_HISTO.DSA302 = vide;¿}¿if (ECR_NWF()) {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && DIC_ADM_CONTRAT_HISTO.DSSAD == vide) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = vide;¿	}¿}¿if (ECR_WF() && DIC_DONNEES_VIRTUELLES.CHOIX_MOD_ANN_DEPART == "M") {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.DSSAD) && DIC_ADM_CONTRAT_HISTO.DSSAD != DIC_ADM_CONTRAT_HISTO.DSA302) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿	}¿}¿if (ECR_NWF()) {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.DSSAD) && DIC_ADM_CONTRAT_HISTO.DSSAD != DIC_ADM_CONTRAT_HISTO.DSA302) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿	}¿}¿','Alimentation de la date de fin de suspension dans les processus de départ'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('CTL_WKF_INSERT_PEREMP_SELECTION','CTRL_DATES_INSERTION_SUSPENSION','CTRL_DEM_ACPTE_SUSPENSION','DSA302_WKF_DEPART_ALIM') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','CTL_WKF_INSERT_PEREMP_SELECTION','CTL','Cohérence du salarié sélectionné WKF Insertion Période d''emploi  : MPE et sauf NPA',NULL,'928',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_INFO_PAC§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£N","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF46£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NATCOL","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£NPA","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£NATCOL","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£STA","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£SAFBA","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF45£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_PROCESSUS_CNT_EN_COURS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP3£","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWKF12£NOM_DONNEE_FOCUS=@vide^§PARAM_1=@TMP3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle  de cohérence du salarié sélectionné  WKF  Insertion Période d''emploi   : _RC_- Le collaborateur (numpac/pacmat) fait déjà l''objet d''un processus expert de modifications contractuelles en cours + PAC MPE + exclusion des NPA ','N',NULL,'/*¿ * CTL_WKF_NEW_PEREMP_SELECTION :¿  * Contrôle  de cohérence du salarié sélectionné  WKF nouvelle période d''emploi  : _RC_- ¿ * Le collaborateur (numpac/pacmat) fait déjà l''objet d''un processus expert de modifications contractuelles en cours + PAC MPE + exclusion des NPA¿ */¿¿TMP1 = TAB("TAB_RD_INFO_PAC", 1, 3, DONNEE.GEN_NUMPAC);¿if ((TMP1 == vide || TMP1 == "N")) {¿	ERR("GENWKF46");¿}¿if ((DIC_ADM_CONTRAT.NATCOL == "NPA" || DIC_ADM_CONTRAT.NATCOL == "STA" && DIC_ADM_CONTRAT_HISTO.SAFBA == 0)) {¿	ERR("GENWKF45");¿}¿TMP3 = TAB("REG_RD_WKF_PROCESSUS_CNT_EN_COURS", 1, 1, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP3 != vide) {¿	ERR("GENWKF12", vide, TMP3);¿}¿','Cohérence du salarié sélectionné WKF  Insertion Période d''emploi  : MPE et sauf NPA'
'*','CTRL_DATES_INSERTION_SUSPENSION','CTL','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE',NULL,'928',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA301","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN_PI","OPERATEUR":"GT","OPERANDE_2":"DONNEE£DSFSUS","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSFCN_PI","OPERATEUR":"GT","OPERANDE_2":"DONNEE£DSFSUS","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£DSDCN_PI","OPERATEUR":"LT","OPERANDE_2":"DONNEE£DSA301","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSFCN_PI","OPERATEUR":"LT","OPERANDE_2":"DONNEE£DSA301","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK100£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13}]','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE : ¿si DSDCN_PI et DSFCN_PI sont supérieures à DSFSUS (fin prévue suspension) alors insertion OK¿si DSDCN_PI et DSFCN_PI sont inférieures à DSA301 (début suspension) alors insertion OK¿si non, message d''alerte','N',NULL,'/*¿ * CTRL_DATES_INSERTION_SUSPENSION :¿ * Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE : ¿ * si DSDCN_PI et DSFCN_PI sont supérieures à DSFSUS (fin prévue suspension) alors insertion OK¿ * si DSDCN_PI et DSFCN_PI sont inférieures à DSA301 (début suspension) alors insertion OK¿ * si non, message d''alerte¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.DSA301 == vide) {¿	return;¿}¿if ((DIC_DONNEES_VIRTUELLES.DSDCN_PI > DIC_ADM_CONTRAT_HISTO.DSFSUS && DIC_DONNEES_VIRTUELLES.DSFCN_PI > DIC_ADM_CONTRAT_HISTO.DSFSUS || DIC_DONNEES_VIRTUELLES.DSDCN_PI < DIC_ADM_CONTRAT_HISTO.DSA301 && DIC_DONNEES_VIRTUELLES.DSFCN_PI < DIC_ADM_CONTRAT_HISTO.DSA301)) {¿	return;¿} else {¿	ERR("GENWK100");¿}¿','Contrôle de cohérence des dates de la période insérée et des dates de suspension WKF insertion de PE'
'*','CTRL_DEM_ACPTE_SUSPENSION','CTL','Contrôle si le salarié est en suspension à la date de la demande d''acompte',NULL,'928',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA301","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DATE_DEM_ACPTE","OPERATEUR":"GE","OPERANDE_2":"DONNEE£DSA301","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DATE_DEM_ACPTE","OPERATEUR":"LE","OPERANDE_2":"DONNEE£DSFSUS","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENWK102£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle si le salarié est en suspension à la date de la demande d''acompte : blocage','O',NULL,'/*¿ * CTRL_DEM_ACPTE_SUSPENSION :¿ * Contrôle si le salarié est en suspension à la date de la demande d''acompte : blocage¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.DSA301 == vide) {¿	return;¿}¿if (DIC_DONNEES_VIRTUELLES.DATE_DEM_ACPTE >= DIC_ADM_CONTRAT_HISTO.DSA301 && DIC_DONNEES_VIRTUELLES.DATE_DEM_ACPTE <= DIC_ADM_CONTRAT_HISTO.DSFSUS) {¿	ERR("GENWK102");¿}¿','Contrôle si le salarié est en suspension à la date de la demande d''acompte'
'*','DSA302_WKF_DEPART_ALIM','AUT','Alimentation de la date de fin de suspension dans les processus de départ',NULL,'928',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA301","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_WF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£CHOIX_MOD_ANN_DEPART","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_WF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£CHOIX_MOD_ANN_DEPART","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£M","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£DSA302","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSA302","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"ISMAJ","OPERANDE_2":"££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"NEQ","OPERANDE_2":"DONNEE£DSA302","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DSA302","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation de la date de fin de suspension (DSA302) dans les processus de départ :¿si la date de fin réelle de suspension est vide, que la date de sortie est saisie dans un processus de départ alors on aliment DSA302 (date fin réelle de supsension)','O',NULL,'/*¿ * DSA302_WKF_DEPART_ALIM :¿* Alimentation de la date de fin de suspension (DSA302) dans les processus de départ : si la date de début de suspension est renseignée, alors¿ * si la date de fin réelle de suspension est vide, que la date de sortie est saisie dans un processus de départ alors on alimente DSA302 (date fin réelle de suspension)¿ * si la date de fin réelle de suspension est renseignée, que la sortie est annulée dans un processus de départ alors on vide DSA302 (date fin réelle de suspension)¿ * si la date de de sortie est modifiée et que la date de fin réelle de suspension est déjà renseignée, alors on modifie DSA302 (date fin réelle de suspension)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.DSA301 == vide) {¿	return;¿}¿if (DIC_ADM_CONTRAT_HISTO.DSA302 == vide && DIC_ADM_CONTRAT_HISTO.DSSAD != vide) {¿	DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿}¿if (ECR_WF() && DIC_DONNEES_VIRTUELLES.CHOIX_MOD_ANN_DEPART == "A") {¿	DIC_ADM_CONTRAT_HISTO.DSA302 = vide;¿}¿if (ECR_NWF()) {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && DIC_ADM_CONTRAT_HISTO.DSSAD == vide) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = vide;¿	}¿}¿if (ECR_WF() && DIC_DONNEES_VIRTUELLES.CHOIX_MOD_ANN_DEPART == "M") {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.DSSAD) && DIC_ADM_CONTRAT_HISTO.DSSAD != DIC_ADM_CONTRAT_HISTO.DSA302) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿	}¿}¿if (ECR_NWF()) {¿	if (DIC_ADM_CONTRAT_HISTO.DSA302 != vide && ISMAJ(DIC_ADM_CONTRAT_HISTO.DSSAD) && DIC_ADM_CONTRAT_HISTO.DSSAD != DIC_ADM_CONTRAT_HISTO.DSA302) {¿		DIC_ADM_CONTRAT_HISTO.DSA302 = DIC_ADM_CONTRAT_HISTO.DSSAD;¿	}¿}¿','Alimentation de la date de fin de suspension dans les processus de départ'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('CTL_WKF_INSERT_PEREMP_SELECTION','CTRL_DATES_INSERTION_SUSPENSION','CTRL_DEM_ACPTE_SUSPENSION','DSA302_WKF_DEPART_ALIM') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','CTL_WKF_INSERT_PEREMP_SELECTION','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_INFO_PAC§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC','@TMP1£',NULL,NULL
'*','CTL_WKF_INSERT_PEREMP_SELECTION','2',NULL,'@TMP1£µ@vide£µEQµ@TMP1£µVALEUR£NµEQµ#OU#',NULL,NULL,'4','5'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','4','££','ERR','CODEERREUR£GENWKF46£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','5',NULL,'DONNEE£NATCOLµVALEUR£NPAµEQµDONNEE£NATCOLµVALEUR£STAµEQµDONNEE£SAFBAµVALEUR£0µEQµ#ET#µ#OU#',NULL,NULL,'8','9'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','8','££','ERR','CODEERREUR£GENWKF45£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','9','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_PROCESSUS_CNT_EN_COURS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP3£',NULL,NULL
'*','CTL_WKF_INSERT_PEREMP_SELECTION','10',NULL,'@TMP3£µ@vide£µNEQ',NULL,NULL,'11','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','11','££','ERR','CODEERREUR£GENWKF12£NOM_DONNEE_FOCUS=@vide^§PARAM_1=@TMP3','£','FIN','FIN'
'*','CTRL_DATES_INSERTION_SUSPENSION','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_INSERTION_PERIODE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_MATRIC§PARAM_2=DONNEE^DSDCN_PI§PARAM_3=DONNEE^DSFCN_PI','@TMP1£',NULL,NULL
'*','CTRL_DATES_INSERTION_SUSPENSION','2',NULL,'@TMP1£µVALEUR£0µNEQ',NULL,NULL,'3','FIN'
'*','CTRL_DATES_INSERTION_SUSPENSION','3','££','WAR','CODEERREUR£GENWK101£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','1',NULL,'DONNEE£DSA301µ@vide£µEQ',NULL,NULL,'2','3'
'*','CTRL_DEM_ACPTE_SUSPENSION','2','££','FIN','££','£','FIN','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','3',NULL,'DONNEE£DATE_DEM_ACPTEµDONNEE£DSA301µGEµDONNEE£DATE_DEM_ACPTEµDONNEE£DSFSUSµLEµ#ET#',NULL,NULL,'5','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','5','££','ERR','CODEERREUR£GENWK102£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','DSA302_WKF_DEPART_ALIM','1',NULL,'DONNEE£DSA301µ@vide£µEQ',NULL,NULL,'2','3'
'*','DSA302_WKF_DEPART_ALIM','2','££','FIN','££','£','FIN','FIN'
'*','DSA302_WKF_DEPART_ALIM','3',NULL,'DONNEE£DSA302µ@vide£µEQµDONNEE£DSSADµ@vide£µNEQµ#ET#',NULL,NULL,'5','6'
'*','DSA302_WKF_DEPART_ALIM','5','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','6','6'
'*','DSA302_WKF_DEPART_ALIM','6',NULL,'£µ£µECR_WFµDONNEE£CHOIX_MOD_ANN_DEPARTµVALEUR£AµEQµ#ET#',NULL,NULL,'8','9'
'*','DSA302_WKF_DEPART_ALIM','8','@vide£','VAL','££','DONNEE£DSA302','9','9'
'*','DSA302_WKF_DEPART_ALIM','9',NULL,'£µ£µECR_NWF',NULL,NULL,'10','13'
'*','DSA302_WKF_DEPART_ALIM','10',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ@vide£µEQµ#ET#',NULL,NULL,'12','13'
'*','DSA302_WKF_DEPART_ALIM','12','@vide£','VAL','££','DONNEE£DSA302','13','13'
'*','DSA302_WKF_DEPART_ALIM','13',NULL,'£µ£µECR_WFµDONNEE£CHOIX_MOD_ANN_DEPARTµVALEUR£MµEQµ#ET#',NULL,NULL,'15','19'
'*','DSA302_WKF_DEPART_ALIM','15',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ££µISMAJµ#ET#µDONNEE£DSSADµDONNEE£DSA302µNEQµ#ET#',NULL,NULL,'18','19'
'*','DSA302_WKF_DEPART_ALIM','18','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','19','19'
'*','DSA302_WKF_DEPART_ALIM','19',NULL,'£µ£µECR_NWF',NULL,NULL,'20','FIN'
'*','DSA302_WKF_DEPART_ALIM','20',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ££µISMAJµ#ET#µDONNEE£DSSADµDONNEE£DSA302µNEQµ#ET#',NULL,NULL,'23','FIN'
'*','DSA302_WKF_DEPART_ALIM','23','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('CTL_WKF_INSERT_PEREMP_SELECTION','CTRL_DATES_INSERTION_SUSPENSION','CTRL_DEM_ACPTE_SUSPENSION','DSA302_WKF_DEPART_ALIM') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','CTL_WKF_INSERT_PEREMP_SELECTION','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_INFO_PAC§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^3§PARAM_1=DONNEE^GEN_NUMPAC','@TMP1£',NULL,NULL
'*','CTL_WKF_INSERT_PEREMP_SELECTION','2',NULL,'@TMP1£µ@vide£µEQµ@TMP1£µVALEUR£NµEQµ#OU#',NULL,NULL,'4','5'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','4','££','ERR','CODEERREUR£GENWKF46£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','5',NULL,'DONNEE£NATCOLµVALEUR£NPAµEQµDONNEE£NATCOLµVALEUR£STAµEQµDONNEE£SAFBAµVALEUR£0µEQµ#ET#µ#OU#',NULL,NULL,'8','9'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','8','££','ERR','CODEERREUR£GENWKF45£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','9','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_WKF_PROCESSUS_CNT_EN_COURS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP3£',NULL,NULL
'*','CTL_WKF_INSERT_PEREMP_SELECTION','10',NULL,'@TMP3£µ@vide£µNEQ',NULL,NULL,'11','FIN'
'*','CTL_WKF_INSERT_PEREMP_SELECTION','11','££','ERR','CODEERREUR£GENWKF12£NOM_DONNEE_FOCUS=@vide^§PARAM_1=@TMP3','£','FIN','FIN'
'*','CTRL_DATES_INSERTION_SUSPENSION','1',NULL,'DONNEE£DSA301µ@vide££µEQ',NULL,NULL,'2','3'
'*','CTRL_DATES_INSERTION_SUSPENSION','2','££','FIN','££','£','FIN','FIN'
'*','CTRL_DATES_INSERTION_SUSPENSION','3',NULL,'DONNEE£DSDCN_PIµDONNEE£DSFSUSµGTµDONNEE£DSFCN_PIµDONNEE£DSFSUSµGTµ#ET#µDONNEE£DSDCN_PIµDONNEE£DSA301µLTµDONNEE£DSFCN_PIµDONNEE£DSA301µLTµ#ET#µ#OU#',NULL,NULL,'7','8'
'*','CTRL_DATES_INSERTION_SUSPENSION','7','££','FIN','££','£','FIN','FIN'
'*','CTRL_DATES_INSERTION_SUSPENSION','8','££','ERR','CODEERREUR£GENWK100£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','1',NULL,'DONNEE£DSA301µ@vide£µEQ',NULL,NULL,'2','3'
'*','CTRL_DEM_ACPTE_SUSPENSION','2','££','FIN','££','£','FIN','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','3',NULL,'DONNEE£DATE_DEM_ACPTEµDONNEE£DSA301µGEµDONNEE£DATE_DEM_ACPTEµDONNEE£DSFSUSµLEµ#ET#',NULL,NULL,'5','FIN'
'*','CTRL_DEM_ACPTE_SUSPENSION','5','££','ERR','CODEERREUR£GENWK102£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','DSA302_WKF_DEPART_ALIM','1',NULL,'DONNEE£DSA301µ@vide£µEQ',NULL,NULL,'2','3'
'*','DSA302_WKF_DEPART_ALIM','2','££','FIN','££','£','FIN','FIN'
'*','DSA302_WKF_DEPART_ALIM','3',NULL,'DONNEE£DSA302µ@vide£µEQµDONNEE£DSSADµ@vide£µNEQµ#ET#',NULL,NULL,'5','6'
'*','DSA302_WKF_DEPART_ALIM','5','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','6','6'
'*','DSA302_WKF_DEPART_ALIM','6',NULL,'£µ£µECR_WFµDONNEE£CHOIX_MOD_ANN_DEPARTµVALEUR£AµEQµ#ET#',NULL,NULL,'8','9'
'*','DSA302_WKF_DEPART_ALIM','8','@vide£','VAL','££','DONNEE£DSA302','9','9'
'*','DSA302_WKF_DEPART_ALIM','9',NULL,'£µ£µECR_NWF',NULL,NULL,'10','13'
'*','DSA302_WKF_DEPART_ALIM','10',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ@vide£µEQµ#ET#',NULL,NULL,'12','13'
'*','DSA302_WKF_DEPART_ALIM','12','@vide£','VAL','££','DONNEE£DSA302','13','13'
'*','DSA302_WKF_DEPART_ALIM','13',NULL,'£µ£µECR_WFµDONNEE£CHOIX_MOD_ANN_DEPARTµVALEUR£MµEQµ#ET#',NULL,NULL,'15','19'
'*','DSA302_WKF_DEPART_ALIM','15',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ££µISMAJµ#ET#µDONNEE£DSSADµDONNEE£DSA302µNEQµ#ET#',NULL,NULL,'18','19'
'*','DSA302_WKF_DEPART_ALIM','18','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','19','19'
'*','DSA302_WKF_DEPART_ALIM','19',NULL,'£µ£µECR_NWF',NULL,NULL,'20','FIN'
'*','DSA302_WKF_DEPART_ALIM','20',NULL,'DONNEE£DSA302µ@vide£µNEQµDONNEE£DSSADµ££µISMAJµ#ET#µDONNEE£DSSADµDONNEE£DSA302µNEQµ#ET#',NULL,NULL,'23','FIN'
'*','DSA302_WKF_DEPART_ALIM','23','DONNEE£DSSAD','VAL','££','DONNEE£DSA302','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('COORD_*_NON_VIDE') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','COORD_*_NON_VIDE','CTL','Contrôle présence coordonnées tél et mail prof ou perso',NULL,'944',NULL,'[{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£MELPRO","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£NOPORT","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NOPORP","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MELPER","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"WAR","OPERANDE_2":"CODEERREUR£GENPRE10£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle présence coordonnées tél et mail prof ou perso pour message d''alerte en cas de signature électronique','N',NULL,'/*¿ * COORD_*_NON_VIDE :¿ * Contrôle présence coordonnées tél et mail prof ou perso pour message d''alerte en cas de signature électronique¿ */¿¿if (ECR_NWF()) {¿	if (DIC_ADM_PERSO.MELPRO != vide && DIC_ADM_PERSO.NOPORT != vide) {¿		return;¿	} else {¿		if (DIC_ADM_PERSO.NOPORP != vide && DIC_ADM_PERSO.MELPER != vide) {¿			return;¿		} else {¿			WAR("GENPRE10");¿		}¿	}¿}¿','Contrôle présence coordonnées tél et mail prof ou perso'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('COORD_*_NON_VIDE') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','COORD_*_NON_VIDE','CTL','Contrôle présence coordonnées tél et mail prof ou perso',NULL,'944',NULL,'[{"TYPE":"SI","OPERANDE_1":"","OPERATEUR":"ECR_NWF","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£MELPRO","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£NOPORT","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NOPORP","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MELPER","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"WAR","OPERANDE_2":"CODEERREUR£GENPRE10£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle présence coordonnées tél et mail prof ou perso pour message d''alerte en cas de signature électronique','N',NULL,'/*¿ * COORD_*_NON_VIDE :¿ * Contrôle présence coordonnées tél et mail prof ou perso pour message d''alerte en cas de signature électronique¿ */¿¿if (ECR_NWF()) {¿	if (DIC_ADM_PERSO.MELPRO != vide && DIC_ADM_PERSO.NOPORT != vide) {¿		return;¿	} else {¿		if (DIC_ADM_PERSO.NOPORP != vide && DIC_ADM_PERSO.MELPER != vide) {¿			return;¿		} else {¿			WAR("GENPRE10");¿		}¿	}¿}¿','Contrôle présence coordonnées tél et mail prof ou perso'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('COORD_*_NON_VIDE') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','COORD_*_NON_VIDE','1',NULL,'£µ£µECR_NWF',NULL,NULL,'2','FIN'
'*','COORD_*_NON_VIDE','2',NULL,'DONNEE£MELPROµ@vide£µNEQµDONNEE£NOPORTµ@vide£µNEQµ#ET#',NULL,NULL,'4','5'
'*','COORD_*_NON_VIDE','4','££','FIN','££','£','FIN','FIN'
'*','COORD_*_NON_VIDE','5',NULL,'DONNEE£NOPORPµ@vide£µNEQµDONNEE£MELPERµ@vide£µNEQµ#ET#',NULL,NULL,'7','8'
'*','COORD_*_NON_VIDE','7','££','FIN','££','£','FIN','FIN'
'*','COORD_*_NON_VIDE','8','££','WAR','CODEERREUR£GENPRE10£NOM_DONNEE_FOCUS=','£','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('COORD_*_NON_VIDE') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','COORD_*_NON_VIDE','1',NULL,'£µ£µECR_NWF',NULL,NULL,'2','FIN'
'*','COORD_*_NON_VIDE','2',NULL,'DONNEE£MELPROµ@vide£µNEQµDONNEE£NOPORTµ@vide£µNEQµ#ET#',NULL,NULL,'4','5'
'*','COORD_*_NON_VIDE','4','££','FIN','££','£','FIN','FIN'
'*','COORD_*_NON_VIDE','5',NULL,'DONNEE£NOPORPµ@vide£µNEQµDONNEE£MELPERµ@vide£µNEQµ#ET#',NULL,NULL,'7','8'
'*','COORD_*_NON_VIDE','7','££','FIN','££','£','FIN','FIN'
'*','COORD_*_NON_VIDE','8','££','WAR','CODEERREUR£GENPRE10£NOM_DONNEE_FOCUS=','£','FIN','FIN'
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'UX - Organigramme','Modules/AdpUx/UxOrganigramme.jsp',null,'false')
##
SYS_SCH_ELEMENT
==
UPDATE SYS_SCH_ELEMENT SET TAGS='_PAS_VISIBLE_' WHERE niveau = '99' and nom_page='Modules/AdpUx/UxOrganigramme.jsp'
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Modules/AdpUx/UxOrganigramme.jsp','Modules/AdpUx/UxProfile.jsp')
##
TAG_CHARSET=@€éèç
##
MP_REF_DATA_ALP_BY_URI
=SQL=
CREATE OR REPLACE VIEW MP_REF_DATA_ALP_BY_URI (DATA_NAME_MP, DATA_NAME_MP_ALP, JSON_PATH, URI_ID, URI, API_ID, API_LABEL) AS 
SELECT DA.DATA_NAME_MP, DA.DATA_NAME_MP_ALP, CASE WHEN D.SUFFIX_JSON_PATH LIKE DU.PREFIX_JSON_PATH||'%' THEN D.SUFFIX_JSON_PATH ELSE DU.PREFIX_JSON_PATH||D.SUFFIX_JSON_PATH END
, U.URI_ID, U.URI, A.API_ID, A.API_LABEL 
FROM MP_REF_DATA_BY_URI DU, MP_REF_DATA_ALP DA, MP_REF_DATA D, MP_REF_URI U, MP_REF_API A 
WHERE DU.DATA_NAME_MP=DA.DATA_NAME_MP 
AND D.DATA_NAME_MP=DA.DATA_NAME_MP 
AND DU.URI_ID=U.URI_ID 
AND U.API_ID=A.API_ID 
UNION ALL 
SELECT NULL, M.NOM_DONNEE_UX, CASE WHEN D.SUFFIX_JSON_PATH LIKE DU.PREFIX_JSON_PATH||'%' THEN D.SUFFIX_JSON_PATH ELSE DU.PREFIX_JSON_PATH||D.SUFFIX_JSON_PATH END
, U.URI_ID, U.URI, A.API_ID, A.API_LABEL 
FROM MP_REF_CUSTOMFIELD_BY_URI DU, REF_DONNEE_MAPPING_UX M, MP_REF_CUSTOMFIELD D, MP_REF_URI U, MP_REF_API A   
WHERE M.NOM_DONNEE_UX LIKE DU.CUSTOMFIELD_PREFIX_MP||'%'
AND DU.CUSTOMFIELD_PREFIX_MP=D.CUSTOMFIELD_PREFIX_MP 
AND DU.URI_ID=U.URI_ID 
AND U.API_ID=A.API_ID
##
TGE_CREATE_TRIGGER
=SQL=
BEGIN
  FOR TABLE_DIC IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME LIKE 'DIC%' AND NOT REGEXP_LIKE(TABLE_NAME,'DIC.*_[0-9]+')) LOOP
    TGE_CREATE_TRIGGER(TABLE_DIC.TABLE_NAME);
  END LOOP;
END;
