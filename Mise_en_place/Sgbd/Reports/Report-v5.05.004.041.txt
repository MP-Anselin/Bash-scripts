##
TAG_CHARSET=@€éèç
TAG_IMPORT=5.05.004.R041
##
TAG_CHARSET=@€éèç
##
HRORG_SIGNATAIRE_ENTITE
=SQL=
create or replace FUNCTION HRORG_SIGNATAIRE_ENTITE(
    p_codts          IN std_struc_arbre.codts%TYPE,
    p_codeEntite     IN std_struc_arbre.code_entite%TYPE,
    p_date           IN std_struc_entite.date_eff%TYPE)
  RETURN std_struc_arbre.aoid_signataire%TYPE
IS
  v_retour std_struc_arbre.aoid_signataire%TYPE;
  v_req VARCHAR2(4000);
BEGIN
 -- Recherche du signataire sur la branche de l'arbre  
  v_req := 'SELECT aoid_signataire';
  v_req := v_req||' FROM (';
  v_req := v_req||'   SELECT code_entite, code_ent_mere, codTs, aoid_signataire';  
  v_req := v_req||'   FROM std_struc_arbre';
  v_req := v_req||'   START WITH'; 
  v_req := v_req||'     code_entite = :1'; 
  v_req := v_req||'     AND codTs = :2';
  v_req := v_req||'     AND :3 BETWEEN date_eff AND date_fin';
  v_req := v_req||'     AND statut = ''1'''; 
  v_req := v_req||'   CONNECT BY'; 
  v_req := v_req||'   PRIOR code_ent_mere = code_entite';
  v_req := v_req||'   AND PRIOR codTs = codTs';
  v_req := v_req||'   AND :4 BETWEEN date_eff AND date_fin';
  v_req := v_req||')'; 
  v_req := v_req||' WHERE';
  v_req := v_req||'   1=1';
  v_req := v_req||'   AND aoid_signataire IS NOT NULL';
  v_req := v_req||'   AND ROWNUM = 1';
  
  BEGIN
    EXECUTE IMMEDIATE v_req INTO v_retour USING p_codeEntite, p_codts, p_date, p_date;
    
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      v_retour := '';
  END;
  RETURN v_retour;
END;
##
HRORG_SIGNATAIRE_ENTITE
=SQL=
drop function HRORG_SIGNATAIRE_ENTITE
##
TAG_CHARSET=@€éèç
##
TGE_INCIDENTS_PAIE_F1
=SQL IF_INDEX_NOTEXIST=TGE_INCIDENTS_PAIE_F1=
CREATE INDEX "TGE_INCIDENTS_PAIE_F1" ON "TGE_INCIDENTS_PAIE" (SUBSTR("MY_REGEXP_REPLACE"("CLE_IMPORT",'#\d+$',''),0,80)) 
##
TAG_CHARSET=@€éèç
##
WKF_POSS_CODEUSER
=SQL IF_INDEX_NOTEXIST=WKF_POSS_CODEUSER=
create index WKF_POSS_CODEUSER on wkf_possession (CODE_USER) online compute statistics
##
TAG_CHARSET=@€éèç
##
WKF_TRACABILITE_N1
=SQL IF_INDEX_NOTEXIST=WKF_TRACABILITE_N1=
CREATE INDEX WKF_TRACABILITE_N1 ON WKF_TRACABILITE("ETAT", "IS_VISIBLE", "DOS_FINISHED", "DATE_DEB_PREV") ONLINE COMPUTE STATISTICS
##
TAG_CHARSET=@€éèç
##
AFFECT_REQ
=SQL=
create or replace PACKAGE AFFECT_REQ
AS
  PROCEDURE maj_requetesimple(
      p_id             NUMBER,
      p_application    VARCHAR2,
      p_nomrequete     VARCHAR2,
      p_requeteecr_gsi VARCHAR2 );
  PROCEDURE principal(
      p_application VARCHAR2) ;
TYPE requeteSimple
IS
  RECORD
  (
    nomrequete     VARCHAR2(50 BYTE),
    requeteEcr_Gsi VARCHAR2(4000 BYTE));
TYPE STD_REQUETESAISIE
IS
  RECORD
  (
    bloc      VARCHAR2(999),
    etou      VARCHAR2(100),
    operateur VARCHAR2(20),
    parapres  VARCHAR2(5),
    paravant  VARCHAR2(5),
    selection VARCHAR2(100),
    valeur    VARCHAR2(100));
TYPE type_List_arr IS VARRAY(999) OF STD_REQUETESAISIE;
TYPE type_listNomRequete IS VARRAY(999)OF REQUETESIMPLE;
p_requetesimple REQUETESIMPLE;
END AFFECT_REQ;   
##
AFFECT_REQ
=SQL=
CREATE OR REPLACE PACKAGE BODY AFFECT_REQ
AS
  PROCEDURE maj_requetesimple(
      p_id             NUMBER,
      p_application    VARCHAR2,
      p_nomrequete     VARCHAR2,
      p_requeteecr_gsi VARCHAR2 )
  IS
    cpt      NUMBER;
    p_prefix NUMBER;
    p_txtreq VARCHAR2(4000);
    p_retour type_List_arr;
    p_retourReqSplit TAB_VARCHAR;
    parOuvrante   NUMBER;
    indexNomTable NUMBER;
    listParam type_List_arr;
    p_requeteSaisie STD_REQUETESAISIE;
    withClausePac NUMBER;
    noUpdate      NUMBER;
    valeurPac     VARCHAR2(20);
  BEGIN
    SELECT AVECNOMTABLE
    INTO p_prefix
    FROM REQUETEURAPP
    WHERE application =p_application ;
    /* découpage de la requete*/
    p_txtreq                    := p_requeteecr_gsi;
    p_txtreq                    := REPLACE(p_txtreq,'@@', '{{OR{{');
    p_txtreq                    :=REPLACE(p_txtreq, '##', '{{AND{{');
    p_txtreq                    := REPLACE(p_txtreq,'{{', '¿');
    IF ( p_txtreq               IS NOT NULL ) THEN
      p_retourReqSplit          := split_string_into_tab(p_txtreq, '¿');
      IF (p_retourReqSplit.COUNT >1) THEN
        listParam               := type_List_arr();
        FOR i IN 1..p_retourReqSplit.COUNT
        LOOP
          parOuvrante:=0;
          IF i mod 4  =1 THEN
            listParam.extend;
            p_requeteSaisie       := STD_REQUETESAISIE(NULL,NULL, NULL,NULL,NULL,NULL,NULL);
            IF (i                  > 0) THEN
              p_requeteSaisie.ETOU:= p_retourReqSplit(i);
            END IF ;
            p_requeteSaisie.SELECTION                       := trim (p_retourReqSplit(i+1));
            IF ( LENGTH ( trim ( p_requeteSaisie.SELECTION)) > 0 AND '('= SUBSTR ( trim ( p_requeteSaisie.SELECTION),0,1) )THEN
              p_requeteSaisie.SELECTION                     := trim (SUBSTR ( p_requeteSaisie.SELECTION ,1));
              p_requeteSaisie.PARAVANT                      := '(';
              parOuvrante                                   :=1;
            END IF;
            IF ( p_prefix                  = 1) THEN
              indexNomTable               := INSTR( p_requeteSaisie.SELECTION , '.') ;
              IF ( indexNomTable           > 0) THEN
                p_requeteSaisie.SELECTION := SUBSTR ( p_requeteSaisie.SELECTION ,indexNomTable);
              END IF ;
            END IF;
            p_requeteSaisie.OPERATEUR  := p_retourReqSplit(i                                                                                                                       + 2);
            p_requeteSaisie.VALEUR     :=trim (p_retourReqSplit(i                                                                                                                  + 3));
            IF ( parOuvrante            =1 AND LENGTH ( trim (p_requeteSaisie.VALEUR) )>0 AND ')'=SUBSTR ( TRIM (p_requeteSaisie.VALEUR ), LENGTH( trim ( p_requeteSaisie.VALEUR) )-1 , LENGTH( trim ( p_requeteSaisie.VALEUR) ))) THEN
              p_requeteSaisie.VALEUR   :=SUBSTR (trim ( p_requeteSaisie.VALEUR) , 0 , LENGTH( trim ( p_requeteSaisie.VALEUR))                                                      -1) ;
              p_requeteSaisie.PARAPRES := ')';
              parOuvrante              :=0;
            END IF;
            IF (i          =1) THEN
              listParam(1):= p_requeteSaisie;
            ELSE
              listParam(listParam.count):=p_requeteSaisie;
            END IF;
          ELSE
            CONTINUE;
          END IF;
        END LOOP;
        /*Si la requête contient une seule clause de sécurité de type Numpac = 'xxx' ou Numpac in ('xxx') et qu'elle n'est pas précédée par l'opérateur 'OR'
        on l'affecte au numpac xxx
        */
        noUpdate:=0;
        FOR k IN 1..listParam.COUNT
        LOOP         
          IF listParam(k).ETOU != 'AND' THEN
   			 noUpdate           :=1;
    		 EXIT;
 		  END IF ;
          IF trim(listParam(k).SELECTION) ='PAC' THEN
            IF (withClausePac      IS NULL )THEN
              withClausePac        := 1;
            ELSE
              withClausePac :=withClausePac+1;
            END IF;
            IF listParam(k).OPERATEUR NOT IN ( 'EQUAL','Egal à', 'IN','Dans la liste') THEN
              noUpdate :=1;
              EXIT;
            END IF;
            IF ( INSTR( listParam(k).VALEUR ,',')>0) THEN
              noUpdate                          :=1;
              EXIT;
            END IF ;
            valeurPac := listParam(k).VALEUR;
          END IF;
        END LOOP;
        IF ( withClausePac = 1 AND valeurPac IS NOT NULL AND noUpdate =0 ) THEN
          UPDATE REQUETESIMPLE
          SET NUMPAC       = valeurPac
          WHERE application=p_application
          AND NOMREQUETE   =p_nomrequete ;
          FSED.FSED_AVANCEMENT_PLSQL(p_id,'AFFECT_REC ','MAJ de la requete '||p_nomrequete);
        END IF;
      END IF;
    END IF;
  END;
  PROCEDURE principal(
      p_application VARCHAR2)
  IS
    p_id NUMBER;
    cpt  NUMBER;
    cur_1 SYS_REFCURSOR;
    sql_1 VARCHAR2(200);
    listRequete type_listNomRequete;
    p_userManagementByPac VARCHAR2(10);
  BEGIN
    SELECT GAP_TRT_SEQ_ID.nextval INTO p_id FROM DUAL;
    SELECT UPPER(valvar)
    INTO p_userManagementByPac
    FROM sys_varsys
    WHERE codvar ='USER_MANAGEMENT_BY_PAC'
    AND module   ='STD' ;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'AFFECT_REC (Begin)','Début d''affectation des requetes de sécurités aux pacs adéquats pour application: '|| p_application);
    IF (p_application IN ('SEC_LOC', 'GAP_NAT_TRT_PAIE_SEC_EXP') AND p_userManagementByPac='TRUE' ) THEN
      listRequete                                                                        := type_listNomRequete();
      sql_1                                                                              :='SELECT nomrequete, requeteecr_gsi  from requetesimple where  application = '''||p_application ||'''';
      cpt                                                                                :=0;
      OPEN cur_1 FOR sql_1;
      LOOP
        FETCH cur_1 INTO p_requetesimple;
        EXIT
      WHEN cur_1%NOTFOUND;
        cpt :=cpt+1;
        listRequete.extend;
        listRequete(cpt) :=p_requetesimple;
        begin
			maj_requetesimple(p_id, p_application, listRequete(cpt).nomRequete, listRequete(cpt).requeteEcr_GSI);
			exception
			when others then
			FSED.FSED_AVANCEMENT_PLSQL(p_id, 'AFFECT_REQ (Erreur)', listRequete(cpt).nomRequete || ' :' || SQLCODE || '-' || SQLERRM);
		end;
      END LOOP;
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'AFFECT_REC (End)','Fin d''affectation des requetes de sécurités aux pacs adéquats pour application: '|| p_application);
    ELSE
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'AFFECT_REC (End)','USER_MANAGEMENT_BY_PAC est non activée ou application n''est pas dans la liste (population, nature de traitement de paie ) ');
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    FSED.FSED_AVANCEMENT_PLSQL(p_id ,'AFFECT_REQ (Erreur)', SQLCODE||'-'||SQLERRM );
  END;
END AFFECT_REQ;
##
TAG_CHARSET=@€éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
 MatEcrit          VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --éliminer les doublons même matricule déjà écrit et même valeur
    IF MatEcrit=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
      RETURN;
    END IF;
    --on a détecté au moins une différence
    MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    --éliminer le passé et pour les historiques les doublons déjà écrits
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1
      AND ( coldteffet <> 'a.DATE_EFF' 
      OR MatARenvoyer<>MatEcrit OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') )
    THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=tab.DTEFFET;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
    IF coldteffet = 'a.DATE_EFF' THEN
    --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet.
    MatEcrit:=MatARenvoyer;
    --mémoriser la valeur de cette colonne historique
    oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
    END IF;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde s’il existe déjà dans GAP_TRT
  --une ligne pour N° d’échange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    preclemati     VARCHAR2(20);
    preclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
    coldteffet:='d.DSDCN';
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
      coldteffet :='a.DSDCN';
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable='DIC_ADM_CONTRAT' THEN
      --pour D_A_C on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
          clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        clfrom       :=clfrom||'SELECT C.NUMPAC, C.MATRIC, C.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACH.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY C.NUMPAC, C.MATRIC, C.PACMAT,DACH.PAIEZAD )) d WHERE '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup caluse where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        END IF;
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            MatEcrit     :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            preclemati   :='#';
            preclematj   :='#';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                --constitution de la clé "matricule courant" partie GAP

                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab1cle :=chr(255);
              END IF;
              IF j        <= tab2.last THEN
                --constitution de la clé "matricule" courant partie PHOTO

                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab2cle :=chr(255);
              END IF;
              --Tables avec historiques comme D_A_C_H : la clé contient des dates d'effet donc il faut adapter l'appareillage
              IF coldteffet='a.DATE_EFF' THEN
                IF i <= tab1.last AND curclemati=MatARenvoyer THEN
                  --matricule déjà détecté en différence histo, on envoie tous les historiques. Les doublons sont éliminés automatiquement.
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif j <= tab2.last AND curclematj=MatARenvoyer THEN
                  --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle < tab2cle and preclemati<>curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et c'était le 1er histo du matricule : création
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle < tab2cle AND preclemati=curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent.
                  IF difference_col( tab1(i) , tab1(i-1) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent (j) et histo gap courant (i)
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle AND preclemati<>curclematj THEN
                  --ligne gap supprimée et c'était le 1er histo du matricule : il faut forcer les valeurs à blanc sur cette date perdue.
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle > tab2cle AND preclemati=curclematj THEN
                  --ligne gap supprimée et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent avec la photo.
                  i :=i-1;
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent et histo photo courant (date d'effet=photo)
                    tab1(i).DTEFFET :=tab2(j).DTEFFET ;
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité tab1cle=tab2cle (pacmat + paiezad + date d'effet)
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              ELSE
                --Tables sans historiques comme DIC_ENFANTS ou DIC_ADM_PERSO
                IF tab1cle < tab2cle THEN
                  --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i    :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle THEN
                  --ligne supprimée car i épuisé ou clé i plus grande que clé j
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  CLOB;
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Début Rétro id_trt= '||p_id_trt);
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt||', pReq '||pReq);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO-- Erreur partition ID_'||p_id_trt);
    END ;
    
    --Insertion dans DIF_FSED_MODIF_RETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);
    pReq := 'INSERT INTO DIF_FSED_MODIF_RETRO SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
    pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') ';
    pReq := pReq ||' AND ( f.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1 )';
    pReq := pReq ||' OR exists (select 1 from dif_fsed t where t.numpac ='''||p_numpac||''' and t.id_trt ='''||p_id_trt||''' AND t.codeop=''C'' and t.ELEM =''A001'' and f.paiezad=t.paiezad and f.pacmat=t.pacmat )) ';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début remplissage DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt||', pReq '||pReq);
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- FIN insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);    
    --Insertion dans GAP_TRT_MOIS_RETRO   
    pReq := ' insert into GAP_TRT_MOIS_RETRO (id_trt,numpac,pacmat,PERIODE_RETRO)';
    pReq := pReq ||' WITH grm AS (SELECT pacmat,periode_retro FROM gap_retro_matric    g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    pReq := pReq ||'     ,gsr AS (SELECT pacmat,periode_retro FROM gap_selection_retro g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    --                 min_periode_retro : plus vieille rétro par matricule
    pReq := pReq ||' ,min_periode_retro (pacmat,min_periode) AS (';
    pReq := pReq ||' SELECT pacmat,MIN(periode_retro) FROM';
    pReq := pReq ||' (          SELECT pacmat,periode_retro FROM grm';
    pReq := pReq ||'  UNION ALL SELECT pacmat,periode_retro FROM gsr ) GROUP BY pacmat) ';
    --                 histo_retro : historique des mois où on a fait de la rétro *et* sur quels mois
    pReq := pReq ||' ,histo_retro AS (SELECT DISTINCT pacmat,periode,to_char(dteffet,''yyyymm'') as periode_retro FROM dif_fsed_histo h WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = h.numpac AND gtlm.pacmat = h.pacmat) ';
    pReq := pReq ||'       AND periode>='''||w_MIN_RETRO||''' AND to_char(dteffet,''yyyymm'')<periode';
    pReq := pReq ||'       AND  h.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1) )';
    --                 liste_mois_retro : liste exhaustive des mois rétro par matricule (mois rétro paie en cours + mois rétro dans l'historique)
    pReq := pReq ||' ,liste_mois_retro (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro      FROM grm';
    pReq := pReq ||' UNION ALL SELECT pacmat,periode_retro      FROM gsr';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode_retro FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode_retro>=mpr.min_periode)';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode       FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode      >=mpr.min_periode))';
    --                SELECT principal
    pReq := pReq ||' SELECT DISTINCT '||p_id_trt||','''||p_numpac||''',pacmat,periode_retro FROM liste_mois_retro';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt);
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    --Insertion dans DIF_FSED_PARTIERETRO 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO DIF_FSED_PARTIERETRO ';
    --WITH1 liste des vrais mois rétro
    pReq := pReq ||' WITH liste_mois_retro (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro FROM gap_trt_mois_retro WHERE numpac = '''||p_numpac||''' AND id_trt = '''||p_id_trt||''') ';
    --WITH2 même liste des vrais mois rétro mais avec la tranche des périodes précédentes (début=M+1 de la rétro précédente)
    pReq := pReq ||',tranches_mois_retro (pacmat,periode_retro,prec_periode_retro) AS ( ';
    pReq := pReq ||'       SELECT lmr.pacmat,lmr.periode_retro,NVL((SELECT to_char(add_months(to_date(MAX(lmr2.periode_retro),''yyyymm''),1),''yyyymm'') FROM liste_mois_retro lmr2 WHERE lmr2.pacmat=lmr.pacmat AND lmr2.periode_retro<lmr.periode_retro),'''||w_MIN_RETRO||''') FROM liste_mois_retro lmr)';
    --SELECT1 DIF_FSED_MODIF_RETRO
    pReq := pReq ||' SELECT '''||p_id_trt||''', tmr.periode_retro AS periode, m.numpac, m.cle, m.pacmat, m.paiezad, m.elem, m.occ, m.valeur, m.codeop, m.type_donnee, m.dteffet ';
    pReq := pReq ||' FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
    pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
    --SELECT2 DIF_FSED_HISTO sauf les lignes déjà présentes dans DIF_FSED_MODIF_RETRO
    pReq := pReq ||' UNION ALL SELECT '''||p_id_trt||''', h.periode, h.numpac, h.cle, h.pacmat, h.paiezad, h.elem, h.occ, h.valeur, h.codeop, h.type_donnee, h.dteffet ';
    pReq := pReq ||' FROM dif_fsed_histo h, liste_mois_retro lmr ';
    pReq := pReq ||' WHERE numpac = '''||p_numpac||''' AND h.pacmat=lmr.pacmat AND periode>='''||w_MIN_RETRO||''' AND h.periode=lmr.periode_retro AND NOT EXISTS ';
    pReq := pReq ||'(SELECT 1 FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
    pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
    pReq := pReq ||'   AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') <= h.periode';
    pReq := pReq ||'   AND m.pacmat = h.pacmat AND m.paiezad = h.paiezad AND m.elem = h.elem AND m.occ = h.occ )';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Fin Rétro id_trt= '||p_id_trt);
    END IF;
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
  v_existVRREP number :=0 ;
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    select count(*) into v_existVRREP from TGE_REF_VRREP where TGE_REF_VRREP.NUMERO_DE_PAC=elt_tab_11R.NUMERO_DE_PAC and TGE_REF_VRREP.CODE_TABLE=elt_tab_11R.CODE_TABLE;
	if(v_existVRREP=0) then
	tab_11R.extend;
	tab_11R(tab_11R.last)            :=elt_tab_11R;
	end if ;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;

BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  select ( (LENGTH(pLibRUB) - LENGTH(REPLACE(pLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(pLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (pLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(pLibRUB) Loop 
      if substr(pLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(pLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(pLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));
   IF LENGTH(lig.donnees)>240 THEN
 elt_tab_15.TEXTE_EXPLICATIF    := trim(SUBSTR(lig.donnees,241,400));
 ELSE elt_tab_15.TEXTE_EXPLICATIF  := '' ;
 END IF ;

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT ';
  stmtClause :=stmtClause||'/*+  BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$291F8F59" "DACH2"@"SEL$3") LEADING(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550" "T"@"SEL$2" "A"@"SEL$2") INDEX(@"SEL$B29E968D" "A"@"SEL$2" ("DIC_ADM_CONTRAT_HISTO"."NUMPAC" "DIC_ADM_CONTRAT_HISTO"."PAIEZAD" "DIC_ADM_CONTRAT_HISTO"."DATE_EFF")) BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$B29E968D" "T"@"SEL$2") NO_ACCESS(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550") BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$5" "F"@"SEL$5") USE_HASH(@"SEL$4FDF941B" "HISTO"@"SEL$1") LEADING(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4") UNNEST(@"SEL$3") */ ';
  stmtClause :=stmtClause||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT  MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT /*+ LEADING(@"SEL$C19C7BAF" "TGE"@"SEL$3" "A"@"SEL$2" "TGE_FSED_30_TEMPORARY"@"SEL$6" "CONT"@"SEL$2" "D"@"SEL$5")*/'||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null ,
tge.numpac,
tge.pacmat,
tge.PAIEZAD,
tge.MATRICULE,
tge.DATE_EFFET 
FROM TGE_IMPORT_FSED_30 TGE 

WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            reqTrace :=null;
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
            IF w_table = 'DIC_TGE_RESPAIE_UNIQUE' THEN
              R_PRESENT_FICHIER_PAIE( w_numpac , null );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
 IF reqTrace is not null then
    FSED_ERREUR(p_id , 'Trace SYS_TRC_MODIF ',p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
 END IF;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' THEN
          w_periode     := w_dateFin ;
        END IF;
        ---Mise à zero des pots de forçage des compteurs ‘I’ :Suppression des forçages sur la période recueil de la paie avant de faire les insertions
        --w_req := 'UPDATE CAD_COMPTEUR SET pot1_FJ = NULL ,pot1_FH = NULL ,pot2_FJ = NULL ,pot2_FH = NULL ,pot3_FJ = NULL ,pot3_FH = NULL ,pot4_FJ = NULL ,';
        --w_req := w_req ||' pot4_FH = NULL,pot5_FJ = NULL ,pot5_FH = NULL ,pot6_FJ = NULL ,pot6_FH = NULL ,pot7_FJ = NULL ,pot7_FH = NULL ,pot8_FJ = NULL ,pot8_FH = NULL, ';
        --w_req := w_req ||' pot9_FJ = NULL ,pot9_FH = NULL ,pot10_FJ = NULL ,pot10_FH = NULL ,pot11_FJ = NULL ,';
        --w_req := w_req ||' pot11_FH = NULL ,pot12_FJ = NULL ,pot12_FH = NULL WHERE CODE_COMPTEUR = :w_cad AND TYPEMJ =''I'' AND to_date(DJOUR,''YYYYMMDD'') BETWEEN :w_dateDed AND :w_dateFin ';
        --w_req := w_req ||' AND (MATRICULE,CODE_COMPTEUR) NOT IN (SELECT MATRICULE,CODE_COMPTEUR FROM CAD_RETP_MATRIC_CPT_DELETED) ';
        --w_req := w_req ||' AND MATRICULE IN (SELECT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac) ';
        --FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 après RAZ '||w_cad||' '||w_dateDed||' '||w_dateFin||' '||C.paiezad||' '||w_req);
        --EXECUTE immediate w_req USING w_cad,
        --w_dateDed ,
        --w_dateFin,
        --C.paiezad,
        --w_numpac ;
        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric
          INTO w_matric
          FROM DIC_ADM_CONTRAT_SITU--DIT 50818 
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      --w_dateCalcul := TO_DATE(w_moi_retour,'YYYYMM');
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
     --DSH : Les VR mises à jour et non encore envoyé à zadig(code_gestionnaire ='G' and temoin_vr_base = O: Valeurs modifiées non envoyées ou K : Echec du dernier envoi des valeurs ou E : en cours d'envoi ) ne doivent pas être supprimés
 	DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac and (code_gestionnaire <>'G' or ( code_gestionnaire ='G' and temoin_vr_base <>'O' and temoin_vr_base <>'K' and temoin_vr_base <>'E') );
    
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
DIF_FSED_HISTO_REP
=SQL=
CREATE OR REPLACE PROCEDURE DIF_FSED_HISTO_REP 
IS
 req                   CLOB;
 tab1   TAB_VARCHAR;
 table_name             VARCHAR2(50);
 aujourdhui             VARCHAR2(8);
 type_mois              NUMBER;
 test_trt               NUMBER;
 p_id                   NUMBER;
 p_periode              VARCHAR2(6);
 p_numpac         TGE_REF_PAC.numpac%TYPE;
 p_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
 p_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
 p_DEB_RETRO TGE_REF_PAC.DEB_RETRO%TYPE;
 p_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%TYPE;
 
 BEGIN

 p_id := GAP_TRT_SEQ_ID.nextval;
 FSED.FSED_AVANCEMENT(p_id,'*** Réparation DIF_FSED_HISTO start ***');

--Sauvegarde DFH à la date du jour et purge
 SELECT to_char(sysdate,'yyyymmdd') into aujourdhui from dual;
 req :='CREATE TABLE DIF_FSED_HISTO_'||aujourdhui||' AS SELECT * FROM DIF_FSED_HISTO';
 FSED.FSED_AVANCEMENT(p_id,'Sauvegarde à date du jour '||req);
 EXECUTE immediate req;
 COMMIT;
 req :='TRUNCATE TABLE dif_fsed_histo';
 FSED.FSED_AVANCEMENT(p_id,'Vidage '||req);
 EXECUTE immediate req;
 
 --Boucle sur les mois DIF_FSED_ssaamm
 FOR C in ( SELECT substr(table_name,10,length(table_name)) as periode from user_tables where table_name like 'DIF_FSED_%' and is_number(substr(table_name,10,length(table_name))) is not null order by
 substr(table_name,10,length(table_name)) asc ) 
 LOOP

table_name := 'DIF_FSED_'||C.periode ;
p_periode  := C.periode ;
req :='SELECT DISTINCT numpac from '||table_name;
EXECUTE immediate req bulk collect INTO tab1 ;

--Boucle sur les Pacs
FOR i IN tab1.first..tab1.last
 LOOP
 p_numpac := tab1(i);

 SELECT DEB_HISTO_RETRO,   DEB_RETRO,   NB_MOIS_RETRO,   PERIODEENCOURS
 INTO p_DEB_HISTO_RETRO, p_DEB_RETRO, p_NB_MOIS_RETRO, p_PERIODEENCOURS
 FROM TGE_REF_PAC WHERE NUMPAC =p_numpac;
 
 --Booléen (type_mois) 0/1/2 le mois pour ce Pac est concerné
 SELECT CASE WHEN (p_periode >  greatest(p_DEB_HISTO_RETRO,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'),-1*p_NB_MOIS_RETRO),'yyyymm')) and p_periode < p_PERIODEENCOURS) THEN 2
             WHEN (p_periode >= greatest(p_DEB_HISTO_RETRO,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'),-1*p_NB_MOIS_RETRO),'yyyymm')) and p_periode < p_PERIODEENCOURS) THEN 1
             ELSE 0 END INTO type_mois FROM dual;
IF type_mois = 0 THEN
 FSED.FSED_AVANCEMENT(p_id,'*** Période='||p_periode||' Pac='||p_numpac||' non concernée (deb_histo_retro='||p_DEB_HISTO_RETRO||' nb_mois='||p_NB_MOIS_RETRO||' periodeencours='||p_PERIODEENCOURS||')');
 ELSE
 FSED.FSED_AVANCEMENT(p_id,'*** Période='||p_periode||' Pac='||p_numpac||' : lancement du traitement');

 --Comptage des ID absents de GAP_TRT et création si nécessaire
 req :='SELECT COUNT(DISTINCT id_trt) from '||table_name||' z WHERE NOT EXISTS (SELECT 1 from gap_trt t where t.id_trt=z.id_trt)';
 EXECUTE immediate req INTO test_trt;
 IF test_trt > 0 THEN

 req :='DELETE FROM gap_trt_liste_mat WHERE id_trt IN (
 SELECT DISTINCT id_trt from '||table_name||' z
 WHERE NOT EXISTS (SELECT 1 from gap_trt t where t.id_trt=z.id_trt) )';
 FSED.FSED_AVANCEMENT(p_id,'Nettoyage préalable de GAP_TRT_LISTE_MAT ' ||req);
 EXECUTE immediate req;
 
 req :='INSERT INTO gap_trt_liste_mat (ID_TRT,NUMPAC,PACMAT,TRAITE)
 SELECT DISTINCT id_trt,'''||p_numpac||''',z.pacmat,''DIF_FSED_HISTO_REP'' from '||table_name||' z
 WHERE NOT EXISTS (SELECT 1 from gap_trt t where t.id_trt=z.id_trt)';
 FSED.FSED_AVANCEMENT(p_id,'Création des ID manquants dans GAP_TRT_LISTE_MAT ' ||req);
 EXECUTE immediate req;

 req :='INSERT INTO gap_trt_suivi (ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN)
 SELECT DISTINCT id_trt,(SELECT sysdate from dual),''PA'',''00'',''DIF_FSED_HISTO_REP'' from '||table_name||' z
 WHERE NOT EXISTS (SELECT 1 from gap_trt t where t.id_trt=z.id_trt)';
 FSED.FSED_AVANCEMENT(p_id,'Création des ID manquants dans GAP_TRT_SUIVI ' ||req);
 EXECUTE immediate req;

 req :='INSERT INTO gap_trt (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_FIN_TRT)
 SELECT DISTINCT id_trt,a.numpac,'''||p_periode||''',''0001'',a.modele,a.nature,(SELECT sysdate from dual) from '||table_name||' z,
 (SELECT numpac,modele,nature FROM TGE_SCHEMA_PRODUCTION WHERE numpac='''||p_numpac||''' AND modele||nature =
  (SELECT max(a2.modele||a2.nature) FROM TGE_SCHEMA_PRODUCTION a2 WHERE a2.numpac='''||p_numpac||''' AND a2.TYPE_PAIE=''CONTROLE'' AND a2.date_fin is null)) a
 WHERE NOT EXISTS (SELECT 1 from gap_trt t where t.id_trt=z.id_trt)';
 FSED.FSED_AVANCEMENT(p_id,'Création des ID manquants dans GAP_TRT ' ||req);
 EXECUTE immediate req;

 COMMIT;

 END IF; 

 /*Partie 1 : recopie du mois en cours.
   Comme la table a été vidée, pas besoin de DELETE préalable.*/

 req := 'INSERT INTO dif_fsed_histo
 WITH max_id_trt AS (SELECT pacmat,MAX(b.id_trt) as id_trt
 FROM TGE_SCHEMA_PRODUCTION a, GAP_TRT b, GAP_TRT_LISTE_MAT m, GAP_TRT_SUIVI c
 WHERE a.numpac                 ='''||p_numpac||'''
 AND a.TYPE_PAIE               IN (''PRECONTR'',''CONTROLE'',''RECYCLAG'',''PARTICUL'',''REGLE'',''REGLEALL'',''GAPSELMA'')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND a.numpac                   =m.numpac
 AND b.id_trt                   =c.id_trt
 AND b.id_trt                   =m.id_trt
 AND c.statut                  IN (''PA'',''EX'',''DEMSEA'')
 AND NVL(c.code_retour_zpp,''00'')=''00''
 AND b.PERIODE_PAIE             = '''||p_periode||'''
 AND b.numero_echange          <>''0000''
 GROUP BY pacmat)
 SELECT '''||p_periode||''' AS PERIODE,NUMPAC,CLE,z.PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET
 FROM '||table_name||' z, max_id_trt
 WHERE z.numpac                 ='''||p_numpac||'''
 AND z.pacmat = max_id_trt.pacmat
 AND z.id_trt = max_id_trt.id_trt';
 FSED.FSED_AVANCEMENT(p_id,'Partie 1.0 '||req);
 EXECUTE IMMEDIATE req ;

 --Les parties 2 et 3 ne sont faites qu'à partir du 2ème mois histo rétro minimum
 IF type_mois = 2 THEN

 /*Partie 2 : Cas des embauches rétro à partir de DEB_RETRO jusqu'à M-1.
   On détruit toutes les lignes de toutes les périodes comprises entre le mois rétro d’embauche et la paie en cours de rattrapage.
   Puis on insère les embauches sur la bonne période rétro. Il y a donc 1 DELETE + 1 INSERT à exécuter sur chaque mois.*/

 req :='DELETE FROM dif_fsed_histo h WHERE h.periode<'''||p_periode||''' and h.numpac='''||p_numpac ||''' AND EXISTS (
 WITH max_id_trt AS (SELECT pacmat,MAX(b.id_trt) as id_trt
 FROM TGE_SCHEMA_PRODUCTION a, GAP_TRT b, GAP_TRT_LISTE_MAT m, GAP_TRT_SUIVI c
 WHERE a.numpac                 ='''||p_numpac||'''
 AND a.TYPE_PAIE               IN (''PRECONTR'',''CONTROLE'',''RECYCLAG'',''PARTICUL'',''REGLE'',''REGLEALL'',''GAPSELMA'')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND a.numpac                   =m.numpac
 AND b.id_trt                   =c.id_trt
 AND b.id_trt                   =m.id_trt
 AND c.statut                  IN (''PA'',''EX'',''DEMSEA'')
 AND NVL(c.code_retour_zpp,''00'')=''00''
 AND b.PERIODE_PAIE             = '''||p_periode||'''
 AND b.numero_echange          <>''0000''
 GROUP BY pacmat)
 SELECT 1
 FROM '||table_name ||' z, max_id_trt
 WHERE NUMPAC='''||p_numpac ||'''
 AND h.periode>=greatest(to_char(z.dteffet,''yyyymm''),'''||p_DEB_HISTO_RETRO||''')
 AND h.paiezad=z.paiezad
 AND z.dteffet < to_date('''||p_periode||''',''yyyymm'')
 AND z.elem =''A001'' and z.codeop=''C''
 AND z.pacmat = max_id_trt.pacmat
 AND z.id_trt = max_id_trt.id_trt
 )'; 
 FSED.FSED_AVANCEMENT(p_id,'Partie 2.1 '||req);
 EXECUTE IMMEDIATE req ;

 --Validation des modifs pour pouvoir analyser les tables et la dernière requête
 COMMIT;

 req :='INSERT INTO dif_fsed_histo
 WITH max_id_trt AS (SELECT pacmat,MAX(b.id_trt) as id_trt
 FROM TGE_SCHEMA_PRODUCTION a, GAP_TRT b, GAP_TRT_LISTE_MAT m, GAP_TRT_SUIVI c
 WHERE a.numpac                 ='''||p_numpac||'''
 AND a.TYPE_PAIE               IN (''PRECONTR'',''CONTROLE'',''RECYCLAG'',''PARTICUL'',''REGLE'',''REGLEALL'',''GAPSELMA'')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND a.numpac                   =m.numpac
 AND b.id_trt                   =c.id_trt
 AND b.id_trt                   =m.id_trt
 AND c.statut                  IN (''PA'',''EX'',''DEMSEA'')
 AND NVL(c.code_retour_zpp,''00'')=''00''
 AND b.PERIODE_PAIE             = '''||p_periode||'''
 AND b.numero_echange          <>''0000''
 GROUP BY pacmat),
 dif_a001 as --dates deffet des embauches rétro
 (SELECT NUMPAC,PAIEZAD,z.ID_TRT,DTEFFET
 FROM '||table_name||' z, max_id_trt
 WHERE NUMPAC='''||p_numpac||'''
 AND dteffet < to_date('''||p_periode||''',''yyyymm'')
 AND z.elem =''A001'' and z.codeop=''C''
 AND z.pacmat = max_id_trt.pacmat
 AND z.id_trt = max_id_trt.id_trt
 )
 SELECT DISTINCT GREATEST(to_char(a.dteffet,''yyyymm''),'''||p_DEB_HISTO_RETRO||''') AS PERIODE,a.NUMPAC,CLE,PACMAT,a.PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,a.DTEFFET
 FROM dif_a001 a, '||table_name||' f
 WHERE f.numpac='''||p_numpac||'''
 AND a.paiezad=f.paiezad
 AND a.id_trt=f.id_trt';
 FSED.FSED_AVANCEMENT(p_id,'Partie 2.2 '||req);
 EXECUTE IMMEDIATE req ;

 /*Partie 3 : Corrections rétro. On détruit les éléments corrigés en rétro sur toutes les périodes comprises entre le mois rétro et la paie en cours de rattrapage.
   Puis on insère les éléments corrigés sur la bonne période rétro. Il y a donc 1 DELETE + 1 INSERT à exécuter sur chaque mois.*/

 req :='DELETE FROM dif_fsed_histo h WHERE h.periode<'''||p_periode||''' and h.numpac='''||p_numpac ||''' 
 AND h.elem IN (SELECT element FROM tge_ref_dicoz WHERE numpac='''||p_numpac||''' AND calcul_retro=1) AND EXISTS (
 WITH max_id_trt AS (SELECT pacmat,MAX(b.id_trt) as id_trt
 FROM TGE_SCHEMA_PRODUCTION a, GAP_TRT b, GAP_TRT_LISTE_MAT m, GAP_TRT_SUIVI c
 WHERE a.numpac                 ='''||p_numpac||'''
 AND a.TYPE_PAIE               IN (''PRECONTR'',''CONTROLE'',''RECYCLAG'',''PARTICUL'',''REGLE'',''REGLEALL'',''GAPSELMA'')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND a.numpac                   =m.numpac
 AND b.id_trt                   =c.id_trt
 AND b.id_trt                   =m.id_trt
 AND c.statut                  IN (''PA'',''EX'',''DEMSEA'')
 AND NVL(c.code_retour_zpp,''00'')=''00''
 AND b.PERIODE_PAIE             = '''||p_periode||'''
 AND b.numero_echange          <>''0000''
 GROUP BY pacmat)
 SELECT 1
 FROM '||table_name ||' z, max_id_trt
 WHERE NUMPAC='''||p_numpac ||'''
 AND h.periode>=greatest(to_char(z.dteffet,''yyyymm''),'''||p_DEB_HISTO_RETRO||''')
 AND h.paiezad=z.paiezad
 AND h.elem=z.elem
 AND h.occ=z.occ
 AND z.dteffet < to_date('''||p_periode||''',''yyyymm'')
 AND z.pacmat = max_id_trt.pacmat
 AND z.id_trt = max_id_trt.id_trt
 )';
 FSED.FSED_AVANCEMENT(p_id,'Partie 3.1 '||req);
 EXECUTE IMMEDIATE req ;

 --Validation des modifs pour pouvoir analyser les tables et la dernière requête
 COMMIT;

 req :='INSERT INTO dif_fsed_histo
 WITH max_id_trt AS (SELECT pacmat,MAX(b.id_trt) as id_trt
 FROM TGE_SCHEMA_PRODUCTION a, GAP_TRT b, GAP_TRT_LISTE_MAT m, GAP_TRT_SUIVI c
 WHERE a.numpac                 ='''||p_numpac||'''
 AND a.TYPE_PAIE               IN (''PRECONTR'',''CONTROLE'',''RECYCLAG'',''PARTICUL'',''REGLE'',''REGLEALL'',''GAPSELMA'')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND a.numpac                   =m.numpac
 AND b.id_trt                   =c.id_trt
 AND b.id_trt                   =m.id_trt
 AND c.statut                  IN (''PA'',''EX'',''DEMSEA'')
 AND NVL(c.code_retour_zpp,''00'')=''00''
 AND b.PERIODE_PAIE             = '''||p_periode||'''
 AND b.numero_echange          <>''0000''
 GROUP BY pacmat)
 SELECT DISTINCT GREATEST(to_char(z.dteffet,''yyyymm''),'''||p_DEB_HISTO_RETRO||''') AS PERIODE,NUMPAC,CLE,z.PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET
 FROM '||table_name||' z, max_id_trt
 WHERE z.numpac='''||p_numpac||'''
 AND elem in (SELECT element from tge_ref_dicoz where numpac='''||p_numpac||''' and calcul_retro=1)
 AND z.dteffet < to_date('''||p_periode||''',''yyyymm'')
 AND z.pacmat = max_id_trt.pacmat
 AND z.id_trt = max_id_trt.id_trt';
 FSED.FSED_AVANCEMENT(p_id,'Partie 3.2 '||req);
 EXECUTE IMMEDIATE req ;

 END IF;
 END IF;

 --Fin boucle sur les Pacs
 END LOOP;
 --Fin boucle sur les mois
 END LOOP;

 FSED.FSED_AVANCEMENT(p_id,'*** Réparation DIF_FSED end ***');

 EXCEPTION
 WHEN OTHERS THEN
 req :='Une erreur est survenue lors de la réparation de DIF_FSED_HISTO.
 Veuillez consulter la table TGE_FSED_ERREUR.
 Pour reprendre le script, adapter SSAAMMJJ et lancer ceci :
 TRUNCATE TABLE dif_fsed_histo;
 INSERT INTO dif_fsed_histo SELECT * FROM dif_fsed_histo_SSAAMMJJ;
 DROP TABLE dif_fsed_histo_SSAAMMJJ;
 CALL DIF_FSED_HISTO_REP();';
 FSED.FSED_AVANCEMENT(p_id,req);
 FSED.FSED_ERREUR(p_id,'PURGE_HISTO_DIF_FSED',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 --Validation des modifs pour pouvoir analyser les tables et la dernière requête
 COMMIT;
 raise;
 END DIF_FSED_HISTO_REP;
##
PURGE_HISTO_DIF_FSED
=SQL=
create or replace PROCEDURE PURGE_HISTO_DIF_FSED(
    p_id     IN NUMBER,
    P_NUMPAC IN VARCHAR2,
    P_PERIODEENCOURS IN TGE_REF_PAC.PERIODEENCOURS%type,
    P_DEB_RETRO IN  TGE_REF_PAC.DEB_RETRO%type,
    P_DEB_HISTO_RETRO IN TGE_REF_PAC.DEB_HISTO_RETRO%type,
    P_NB_MOIS_RETRO IN TGE_REF_PAC.NB_MOIS_RETRO%type,
    P_PERIDOE_HISTO_LIMITE IN TGE_REF_PAC.PERIODEENCOURS%type)
AS
  P_REQ     VARCHAR2(2000);
  w_isRetro NUMBER ;
  w_periode_partition TGE_REF_PAC.PERIODEENCOURS%type;
  w_subpartition_0 VARCHAR2(20);
  w_subpartition VARCHAR2(20);
  w_subpartition_del VARCHAR2(20);
BEGIN

  IF  to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
      select to_char(ADD_MONTHS(TO_DATE(P_PERIODEENCOURS,'yyyymm'),1),'yyyymm') into w_periode_partition from dual;
     FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partitions des HISTO (DEB CREAT PARTITION DIF_FSED_HISTO)','Début Création des partitions  de la table DIF_FSED_HISTO avant purge');
     
  IF is_number(P_NUMPAC)IS NOT NULL THEN 
     w_subpartition_0 := '"'||P_NUMPAC||'_000000"';
     w_subpartition :='"'||P_NUMPAC||'_'||P_PERIODEENCOURS||'"';
  ELSE
     w_subpartition_0 :=P_NUMPAC;
     w_subpartition :=P_NUMPAC||'_'||P_PERIODEENCOURS;
  END IF; 
    
    BEGIN     
      p_req := 'Alter TABLE DIF_FSED_HISTO add partition NUMPAC_'||P_NUMPAC||' VALUES('''||P_NUMPAC||''')(SUBPARTITION '||w_subpartition_0||'  VALUES LESS THAN(''000000'')) UPDATE INDEXES ';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','Création partition NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','Fin création partition NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO ');
    EXCEPTION
    WHEN OTHERS THEN
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HIST_RETRO','Partition NUMPAC_'||P_NUMPAC||'de la table DIF_FSED_HISTO existe');
    END ;
    BEGIN
      p_req := 'ALTER TABLE DIF_FSED_HISTO  MODIFY PARTITION NUMPAC_'||P_NUMPAC||' ADD SUBPARTITION '||w_subpartition||' VALUES LESS THAN ('''||w_periode_partition||''') UPDATE INDEXES';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION SOUS PARTITION DIF_FSED_HISTO','Création SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION SOUS PARTITION DIF_FSED_HISTO','Fin création SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO ');
    EXCEPTION
    WHEN OTHERS THEN
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO existe ');
    END ;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partitions des HISTO (Fin CREAT PARTITION DIF_FSED_HISTO)','Fin Créatin des partitions  de la table DIF_FSED_HISTO avant purge');
  
    --purge de DIF_FSED_HISTO 
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT Supp DIF_FSED_HISTO)','DEBUT Purge de la table DIF_FSED_HISTO  pour les periodes inférieurs à '||P_PERIDOE_HISTO_LIMITE);
    FOR K IN
    (SELECT DISTINCT periode
    FROM DIF_FSED_HISTO
    WHERE to_date(periode,'YYYYMM') <add_months(to_date(P_PERIODEENCOURS,'yyyymm'),-1*P_NB_MOIS_RETRO)
    AND NUMPAC                      =P_NUMPAC
    )
    LOOP
      IF is_number(P_NUMPAC)IS NOT NULL THEN 
        w_subpartition_del :='"'||P_NUMPAC||'_'||K.PERIODE||'"';
      ELSE
        w_subpartition_del :=P_NUMPAC||'_'||K.PERIODE;
      END IF;
      p_req := 'ALTER TABLE DIF_FSED_HISTO TRUNCATE SUBPARTITION '||w_subpartition_del||' DROP STORAGE';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED ( Supp Sous partition DIF_FSED_HISTO)','suppression sous partition '||P_NUMPAC||'_'||K.PERIODE||' de DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED ( Fin Supp Sous partition DIF_FSED_HISTO)','Fin suppression sous partition '||P_NUMPAC||'_'||K.PERIODE||' de DIF_FSED_HISTO ');
    END LOOP;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN Supp DIF_FSED_HISTO)','FIN Purge de la table DIF_FSED_HISTO  pour les periodes inférieurs à '||P_PERIDOE_HISTO_LIMITE);
    --historisation
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (Debut INSERT de DIF_FSED IN DIF_FSED_HISTO)','Remplissage  de la table DIF_FSED_HISTO à partir de DIF_FSED');
    --Merge 1
    MERGE INTO DIF_FSED_HISTO T USING
    (SELECT p_PERIODEENCOURS AS PERIODE,
      NUMPAC ,
      CLE ,
      PACMAT ,
      PAIEZAD ,
      ELEM ,
      OCC ,
      VALEUR ,
      CODEOP ,
      TYPE_DONNEE ,
      DTEFFET
    FROM DIF_FSED z
    WHERE NUMPAC = p_numpac
    AND ID_TRT   =
      (SELECT MAX (b.id_trt)
      FROM TGE_SCHEMA_PRODUCTION a,
        GAP_TRT b,
        GAP_TRT_SUIVI c,
        GAP_TRT_LISTE_MAT e,
        DIC_ADM_CONTRAT_SITU d
      WHERE a.numpac                 =p_numpac
      AND a.TYPE_PAIE               IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
      AND a.numpac                   =b.numpac
      AND a.modele                   =b.modele
      AND a.nature                   =b.nature
      AND b.id_trt                   =c.id_trt
      AND c.statut                  IN ('PA','EX','DEMSEA')
      AND NVL(c.code_retour_zpp,'00')='00'
      AND b.PERIODE_PAIE             = p_PERIODEENCOURS
      AND b.numero_echange          <>'0000'
      AND e.id_trt                   =b.id_trt
      AND d.numpac                   =e.numpac
      AND d.pacmat                   =e.pacmat
      AND z.numpac                   =e.numpac
      AND z.PAIEZAD                  =d.paiezad
      )
    )i ON (i.PERIODE= T.PERIODE AND i.NUMPAC=T.NUMPAC AND i.CLE=T.CLE AND i.PACMAT=T.PACMAT AND i.PAIEZAD=T.PAIEZAD AND i.ELEM=T.ELEM AND i.OCC=T.OCC)
  WHEN NOT MATCHED THEN
    INSERT
      (
        PERIODE,
        NUMPAC,
        CLE,
        PACMAT,
        PAIEZAD,
        ELEM,
        OCC,
        VALEUR,
        CODEOP,
        TYPE_DONNEE,
        DTEFFET
      )
      VALUES
      (
        i.PERIODE,
        i.NUMPAC,
        i.CLE,
        i.PACMAT,
        i.PAIEZAD,
        i.ELEM,
        i.OCC,
        i.VALEUR,
        i.CODEOP,
        i.TYPE_DONNEE,
        i.DTEFFET
      );
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (Fin INSERT de DIF_FSED IN DIF_FSED_HISTO)','Fin remplissage  de la table DIF_FSED_HISTO à partir de DIF_FSED ');
    --DELETE 1
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT DELETE de DIF_FSED_HISTO)','Supression de DIF_FSED_HISTO dont la référence numpac/pacmat/periode est dans DIF_FSED_PARTIERETRO par périodes ');   
    DELETE
    FROM DIF_FSED_HISTO retro
    WHERE retro.numpac=p_numpac
    AND EXISTS
        (SELECT 1
        FROM DIF_FSED_PARTIERETRO z
        WHERE z.paiezad                =retro.paiezad
        AND z.pacmat                   =retro.pacmat
        AND z.numpac                   =retro.numpac
        AND z.periode                  =retro.periode
        AND z.ID_TRT                   =
          (SELECT MAX (b.id_trt)
          FROM TGE_SCHEMA_PRODUCTION a,
            GAP_TRT b,
            GAP_TRT_SUIVI c,
            GAP_TRT_LISTE_MAT e,
            DIC_ADM_CONTRAT_SITU d
          WHERE a.numpac                 =p_numpac
          AND a.TYPE_PAIE               IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
          AND a.numpac                   =b.numpac
          AND a.modele                   =b.modele
          AND a.nature                   =b.nature
          AND b.id_trt                   =c.id_trt
          AND c.statut                  IN ('PA','EX','DEMSEA')
          AND NVL(c.code_retour_zpp,'00')='00'
          AND b.PERIODE_PAIE             = p_PERIODEENCOURS
          AND b.numero_echange          <>'0000'
          AND e.id_trt                   =b.id_trt
          AND d.numpac                   =e.numpac
          AND d.pacmat                   =e.pacmat
          AND z.numpac                   =e.numpac
          AND z.PAIEZAD                  =d.paiezad
          )
        );
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN DELETE de DIF_FSED_HISTO)','Fin Supression de DIF_FSED_HISTO');   
       --MERGE 2 
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT INSERT de DIF_FSED_PARTIERETRO IN DIF_FSED_HISTO)','Remplissage de la table DIF_FSED_HISTO à partir de DIF_FSED_PARTIERETRO ');
        MERGE INTO DIF_FSED_HISTO T USING
         (SELECT r.PERIODE AS PERIODE,
                 r.NUMPAC ,
                 r.CLE ,
                 r.PACMAT ,
                 r.PAIEZAD ,
                 r.ELEM ,
                 r.OCC ,
                 r.VALEUR ,
                 r.CODEOP ,
                 r.TYPE_DONNEE ,
                 r.DTEFFET
       FROM DIF_FSED_PARTIERETRO r
       WHERE r.NUMPAC   = p_numpac
       AND   r.ID_TRT  =
          (SELECT MAX (b.id_trt)
          FROM TGE_SCHEMA_PRODUCTION a,
            GAP_TRT b,
            GAP_TRT_SUIVI c,
            GAP_TRT_LISTE_MAT e,
            DIC_ADM_CONTRAT_SITU d
          WHERE a.numpac                 =p_numpac
          AND a.TYPE_PAIE               IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
          AND a.numpac                   =b.numpac
          AND a.modele                   =b.modele
          AND a.nature                   =b.nature
          AND b.id_trt                   =c.id_trt
          AND c.statut                  IN ('PA','EX','DEMSEA')
          AND NVL(c.code_retour_zpp,'00')='00'
          AND b.PERIODE_PAIE             = p_PERIODEENCOURS
          AND b.numero_echange          <>'0000'
          AND e.id_trt                   =b.id_trt
          AND d.numpac                   =e.numpac
          AND d.pacmat                   =e.pacmat
          AND r.numpac                   =e.numpac
          AND r.PAIEZAD                  =d.paiezad
          )
     )i ON (i.PERIODE= T.PERIODE AND i.NUMPAC=T.NUMPAC AND i.PACMAT=T.PACMAT AND i.PAIEZAD=T.PAIEZAD AND i.ELEM=T.ELEM AND i.OCC=T.OCC)
    WHEN NOT MATCHED THEN
     INSERT
      (PERIODE,
       NUMPAC,
       CLE,
       PACMAT,
       PAIEZAD,
       ELEM,
       OCC,
       VALEUR,
       CODEOP,
       TYPE_DONNEE,
       DTEFFET)
     VALUES
      (i.PERIODE,
       i.NUMPAC,
       i.CLE,
       i.PACMAT,
       i.PAIEZAD,
       i.ELEM,
       i.OCC,
       i.VALEUR,
       i.CODEOP,
       i.TYPE_DONNEE,
       i.DTEFFET);
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN INSERT de DIF_FSED_PARTIERETRO IN DIF_FSED_HISTO)','Fin remplissage de la table DIF_FSED_HISTO à partir de DIF_FSED_PARTIERETRO ');

  END IF;
  
EXCEPTION
WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED  ', 'Une erreur est survenue lors de l historisation Rétro de DIF_FSED . Veuillez consulter la table TGE_FSED_ERREUR.');
  FSED.FSED_ERREUR(p_id,'PURGE_HISTO_DIF_FSED',P_NUMPAC,SQLCODE||'-'||SQLERRM);
  raise;
END PURGE_HISTO_DIF_FSED;
##
TAG_CHARSET=@€éèç
##
DUPLIQUE_DONNEES
=SQL=
create or replace
PROCEDURE DUPLIQUE_DONNEES (p_table VARCHAR2, p_whereOldValues VARCHAR2, p_colonne1 VARCHAR2 DEFAULT NULL, p_newVal1 VARCHAR2 DEFAULT NULL, p_colonne2 VARCHAR2 DEFAULT NULL, p_newVal2 VARCHAR2 DEFAULT NULL, p_colonne3 VARCHAR2 DEFAULT NULL, p_newVal3 VARCHAR2 DEFAULT NULL, p_colonne4 VARCHAR2 DEFAULT NULL, p_newVal4 VARCHAR2 DEFAULT NULL, p_colonne5 VARCHAR2 DEFAULT NULL, p_newVal5 VARCHAR2 DEFAULT NULL, p_colonne6 VARCHAR2 DEFAULT NULL, p_newVal6 VARCHAR2 DEFAULT NULL, p_colonne7 VARCHAR2 DEFAULT NULL, p_newVal7 VARCHAR2 DEFAULT NULL, p_colonne8 VARCHAR2 DEFAULT NULL, p_newVal8 VARCHAR2 DEFAULT NULL, p_colonne9 VARCHAR2 DEFAULT NULL, p_newVal9 VARCHAR2 DEFAULT NULL) 
AS
  TYPE TYP_COL_NAME IS TABLE OF USER_TAB_COLUMNS.COLUMN_NAME%type ;
  Tabcol  TYP_COL_NAME ;
  v_reqInsert CLOB;
  v_listCols CLOB;
  v_listVals CLOB;
  v_flagCol NUMBER;
  v_tableSource VARCHAR2(100);
  v_tableCible VARCHAR2(30);
BEGIN
  IF INSTR(p_table,'-->')>0 THEN
    -- p_table est au format TABLE1-->TABLE2 : on duplique de TABLE1 dans TABLE2
    v_tableSource := SUBSTR(p_table,1,INSTR(p_table,'-->')-1);
    v_tableCible := SUBSTR(p_table,INSTR(p_table,'-->')+3);
  ELSE
    -- p_table est au format TABLE : on duplique de TABLE dans elle-même
    v_tableSource := p_table;
    v_tableCible := p_table;
  END IF;
  SELECT COLUMN_NAME BULK COLLECT Into Tabcol FROM USER_TAB_COLS WHERE UPPER(TABLE_NAME)=UPPER(v_tableCible) AND VIRTUAL_COLUMN='NO' AND HIDDEN_COLUMN='NO' AND COLUMN_ID IS NOT NULL ORDER BY COLUMN_ID;
  IF Tabcol.count>0 THEN
    FOR i IN Tabcol.first..Tabcol.last LOOP
      v_flagCol := 0;
      v_listCols := v_listCols||UPPER(Tabcol(i));
      IF UPPER(Tabcol(i))=UPPER(p_colonne1) THEN
        v_listVals := v_listVals||p_newVal1;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne2) THEN
        v_listVals := v_listVals||p_newVal2;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne3) THEN
        v_listVals := v_listVals||p_newVal3;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne4) THEN
        v_listVals := v_listVals||p_newVal4;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne5) THEN
        v_listVals := v_listVals||p_newVal5;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne6) THEN
        v_listVals := v_listVals||p_newVal6;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne7) THEN
        v_listVals := v_listVals||p_newVal7;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne8) THEN
        v_listVals := v_listVals||p_newVal8;
        v_flagCol := 1;
      END IF;
      IF UPPER(Tabcol(i))=UPPER(p_colonne9) THEN
        v_listVals := v_listVals||p_newVal9;
        v_flagCol := 1;
      END IF;
      IF v_flagCol=0 THEN
        v_listVals := v_listVals||Tabcol(i);
      END IF;
      IF i<Tabcol.last THEN
        v_listCols := v_listCols||',';
        v_listVals := v_listVals||',';
      END IF;
    END LOOP;
    v_reqInsert := 'INSERT INTO '||v_tableCible||' ('||v_listCols||') SELECT '||v_listVals||' FROM '||v_tableSource||' WHERE '||p_whereOldValues;
    EXECUTE_IMMEDIATE_STRING (v_reqInsert,0);
  END IF;
END DUPLIQUE_DONNEES;
##
TAG_CHARSET=@€éèç
##
R_PRESENT_FICHIER_PAIE
=SQL=
create or replace PROCEDURE R_PRESENT_FICHIER_PAIE( NUMPAC_TRAITEMENT IN SECUPACMAT.NUMPAC%Type , PACMAT_TRAITEMENT IN SECUPACMAT.PACMAT%Type ) IS 
PERIODEENCOURS_TRAITEMENT TGE_REF_PAC.PERIODEENCOURS%type;
BEGIN
-- récupère la periode en cours du pac
  BEGIN 
   SELECT PERIODEENCOURS into PERIODEENCOURS_TRAITEMENT from TGE_REF_PAC where NUMPAC=NUMPAC_TRAITEMENT;
   EXCEPTION
   WHEN NO_DATA_FOUND then
    RETURN;
  END;
--fait le merge ds secupacmat
MERGE INTO SECUPACMAT A
USING (
SELECT NUMPAC,
  PACMAT,
  CASE
    WHEN EXISTS
      ( WITH table_dates_eff (pacmat,paiezad,date_eff) AS
      ( SELECT DISTINCT dach2.pacmat,
        dach2.paiezad,
        MAX(date_eff) OVER(PARTITION BY dach2.pacmat,dach2.paiezad)
      FROM dic_adm_contrat_histo dach2
      WHERE dach2.numpac     = NUMPAC_TRAITEMENT
      AND dach2.pacmat       = NVL(PACMAT_TRAITEMENT,dach2.pacmat) -- si PACMAT_TRAITEMENT est renseigné, on l'utilise, sinon on neutralise le and
      AND dach2.date_eff    <= last_day(TO_DATE(PERIODEENCOURS_TRAITEMENT,'yyyymm') )
      AND dach2.date_sortie_sit_bo >= add_months( (TO_DATE(PERIODEENCOURS_TRAITEMENT,'yyyymm') ), -
        (SELECT valvar                                                                     -1
        FROM sys_varsys
        WHERE codvar ='NB_MOIS_PAIE_INIT'
        AND module   ='GAP'
        ) )
      )
    SELECT 1
    FROM dic_adm_contrat_histo dach
    INNER JOIN table_dates_eff t
    ON dach.pacmat    = t.pacmat
    AND dach.paiezad  = t.paiezad
    AND dach.date_eff = t.date_eff
    LEFT JOIN dic_tge_respaie_unique dtru
    ON dtru.numpac                     = NUMPAC_TRAITEMENT
    AND dtru.pacmat                    = dach.pacmat
    AND dtru.paiezad                   = dach.paiezad
    WHERE dach.numpac                  = NUMPAC_TRAITEMENT
    AND dach.pacmat                    = NVL(PACMAT_TRAITEMENT,dach.pacmat) -- si PACMAT_TRAITEMENT est renseigné, on l'utilise, sinon on neutralise le and
    AND sec.pacmat                     = dach.pacmat
    AND (dtru.numpac                  IS NULL
    OR ( NVL(dtru.prfpai, 'M')         != 'A'
    OR NVL(dtru.dtfpai, TO_DATE('20991231','yyyyMMdd'))    > last_day(TO_DATE(PERIODEENCOURS_TRAITEMENT,'YYYYMM') )
    OR ( dach.ZREACT                  IS NOT NULL
    AND dtru.dtfpai                   <= dach.zreact
    AND EXTRACT(YEAR FROM dach.zreact) = SUBSTR(PERIODEENCOURS_TRAITEMENT,1,4) )
    OR dtru.dtfpai                     < dach.dssad ))
      )
    THEN 'O'
    ELSE 'N'
  END PRESENT_FICHIER_PAIE
FROM SECUPACMAT SEC
WHERE numpac     = NUMPAC_TRAITEMENT
AND pacmat       = NVL(PACMAT_TRAITEMENT,pacmat) -- si PACMAT_TRAITEMENT est renseigné, on l'utilise, sinon on neutralise le and
) B
ON (A.NUMPAC = B.NUMPAC and A.PACMAT = B.PACMAT)
WHEN MATCHED THEN UPDATE SET A.PRESENT_FICHIER_PAIE = B.PRESENT_FICHIER_PAIE ;

END R_PRESENT_FICHIER_PAIE;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_TEMP
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_TEMP( p_id           IN NUMBER, p_numpac       IN VARCHAR2,
 p_pacmat       IN VARCHAR2,
 p_periode_paie IN VARCHAR2, 
 out_req OUT CLOB)
 AS
 w_Y326                 VARCHAR2(4000 BYTE);
 w_Y327                 VARCHAR2(4000 BYTE);
 w_A302                 VARCHAR2(4000 BYTE);
 w_A301                 VARCHAR2(4000 BYTE);
 w_A520                 VARCHAR2(4000 BYTE);
 w_A521                 VARCHAR2(4000 BYTE);
 w_A523                 VARCHAR2(4000 BYTE);
 periode_paie_en_cours  VARCHAR2(6);
 periode_deb_retro      VARCHAR2(6);
 optionEcp      VARCHAR2(1);
 
 A01_NOM_ELT    VARCHAR2(20);
 A02_NOM_ELT    VARCHAR2(20);
 A03_NOM_ELT    VARCHAR2(20);
 requeteMappingPivot  VARCHAR2(3000);
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP début (' || p_id || ',' || p_numpac || ',' || p_pacmat || ',' || p_periode_paie || ')');
 BEGIN
 --Alimentation des informations sur le pac
 SELECT PERIODEENCOURS, DEB_RETRO, OPTION_ECP
 INTO periode_paie_en_cours, periode_deb_retro, optionEcp
 FROM TGE_REF_PAC
 WHERE NUMPAC = p_numpac;
 --- Calcul des noms d'elements depuis tge_map_arg_elt
 select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 from (
 SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
 )
 pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));
 
 
 --Alimentation des informations sur le mapping des données
 requeteMappingPivot :='SELECT
 Y326_DONNEE ,
 Y327_DONNEE ,
 A302_DONNEE ,
 A301_DONNEE ,
 A520_DONNEE ,
 A521_DONNEE ,
 A523_DONNEE
 FROM (
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = '''|| p_numpac ||'''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 UNION ALL
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = ''*''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 AND (c.ELEMENT) NOT IN
 (
 SELECT a.element
 FROM tge_ref_mapdo a
 WHERE a.numpac = '''|| p_numpac ||'''
 AND A.ELEMENT IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 )
 ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element)
 IN(''Y326'' AS Y326 ,''Y327'' AS Y327 ,''A302'' AS A302 ,''A301'' AS A301 ,'''||A01_NOM_ELT||''' AS A520 ,'''||A02_NOM_ELT||''' AS A521,'''||A03_NOM_ELT||''' AS A523))
 ';
 EXECUTE IMMEDIATE
 requeteMappingPivot
 INTO w_Y326,
 w_Y327,
 w_A302,
 w_A301,
 w_A520,
 w_A521,
 w_A523;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP ERR : Erreurs de configuration de TGE_REF_MAPDO : NUMPAC = ''' || p_numpac || ''' AND ELEMENT in (''Y326'',''Y327'',''A302'',''A301'',''A520'',''A521'',''A523'')');
 raise;
 END;
 
 out_req := 'SELECT l.numpac, l.pacmat, l.PAIEZAD, l.is_retro, l.debut_forcee, l.fin_forcee, l.entree, l.sortie, l.retour_susp, l.depart_susp, l.debut_situ, l.fin_situ, l.DT_RECUEIL_DEB, l.DT_RECUEIL_FIN, l.retro_gc, l.MOIS_PAIE, l.DATE_DEB_PERIODE, l.DATE_FIN_PERIODE from (
 SELECT
 dach_tmp_sus.numpac,
 dach_tmp_sus.pacmat,
 dach_tmp_sus.PAIEZAD,
 dach_tmp_sus.is_retro,
 dach_tmp_sus.debut_forcee,
 dach_tmp_sus.fin_forcee,
 dach_tmp_sus.debut_situ as entree,
 dach_tmp_sus.fin_situ as sortie ,'
 || w_A302 || '+1 as retour_susp,  ' --pseudo date de retour de suspension / réembaucher
 || w_A301 || '-1 as depart_susp,  ' --pseudo date de départ en suspension
 || '
 dach_tmp_sus.debut_situ,
 dach_tmp_sus.fin_situ,
 dach_tmp_sus.DT_RECUEIL_DEB,
 dach_tmp_sus.DT_RECUEIL_FIN,
 dach_tmp_sus.retro_gc,
 dach_tmp_sus.NUMCNT,dach_tmp_sus.DATE_EFF,dach_tmp_sus.DSFCN,dach_tmp_sus.DSDCN,
 ' || w_A301 || ' AS sous_DSA301,
 ' || w_A302 || ' AS sous_DSA302,
 MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE
 FROM (
 select VR.numpac,VR.pacmat,VR.PAIEZAD,VR.NUMCNT,VR.DATE_EFF,VR.DSFCN,VR.DSDCN,VR.is_retro,VR.debut_forcee,VR.fin_forcee,VR.debut_situ,VR.fin_situ,VR.MOIS_PAIE,VR.DATE_DEB_PERIODE,VR.DATE_FIN_PERIODE,
 CASE
 WHEN TO_CHAR(VR.debut_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.debut_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_DEB,
 CASE
 WHEN TO_CHAR(VR.fin_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.fin_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_FIN,  ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 out_req := out_req || ' TGE_PERIODE_RECUEIL_PAIEZAD.retro_gc,  ';
 ELSE
 out_req := out_req || ' null as retro_gc, ';
 END IF;
 out_req := out_req || '(
 select max(dach_tmp.date_eff) from dic_adm_contrat_histo dach_tmp
 where dach_tmp.za962 is not null
 and dach_tmp.dsa301-1 <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD''))
 and nvl(dach_tmp.dsa302, dach_tmp.dsfsus)+1 >= to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 and dach_tmp.date_eff <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD'')) + 1
 and dach_tmp.numpac = VR.NUMPAC
 and dach_tmp.pacmat = VR.PACMAT
 and dach_tmp.paiezad = VR.PAIEZAD
 ) as date_eff_sus
 
 from (
 select numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE,MIN(NUMERO_DE_LIGNE) as min_NUMERO_DE_LIGNE from
 (SELECT CO.* FROM (select
 SITUATION_PAIE.numpac as numpac,
 SITUATION_PAIE.pacmat as pacmat,
 SITUATION_PAIE.PAIEZAD as paiezad,
 DIC_ADM_CONTRAT.DSDCN                 AS DSDCN,
 DIC_ADM_CONTRAT.DSFCN                 AS DSFCN,
 DIC_ADM_CONTRAT_HISTO.NUMCNT          AS NUMCNT,
 DIC_ADM_CONTRAT_HISTO.DATE_EFF        AS DATE_EFF, ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 out_req := out_req || ' CASE
 WHEN RETRO_ENTREE = ''O''
 AND RETRO_SORTIE   = ''O''
 THEN ''O''
 WHEN RETRO_ENTREE = ''O''
 THEN ''E''
 WHEN RETRO_SORTIE = ''O''
 THEN ''S''
 ELSE ''N''
 END AS is_retro, ';
 ELSE
 out_req := out_req || ' ''N'' as is_retro, ';
 END IF;
 out_req := out_req || w_Y326 || ' as debut_forcee,
 ' || w_Y327 || ' as fin_forcee,
 SITUATION_PAIE.DSDSC as debut_situ,
 SITUATION_PAIE.DSFSC as fin_situ,
 ' || w_A520 || ' as activite,
 ' || w_A521 || ' as etablissement,
 ' || w_A523 || ' as categorie,
 DIC_ADM_CONTRAT_HISTO.MOIS_PAIE,
 DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE,
 DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 FROM SITUATION_PAIE
 left join DIC_PERIODES_RECUEIL_HIS
 on DIC_PERIODES_RECUEIL_HIS.numpac = SITUATION_PAIE.numpac
 AND DIC_PERIODES_RECUEIL_HIS.paiezad = SITUATION_PAIE.paiezad
 AND DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE = ''' || p_periode_paie || '''
 inner join DIC_ADM_CONTRAT
 on DIC_ADM_CONTRAT.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT.PACMAT=SITUATION_PAIE.PACMAT
 AND DIC_ADM_CONTRAT.NUMCNT=SITUATION_PAIE.NUMCNT
 left join ( SELECT  DIC_ADM_CONTRAT_HISTO.*,C.MOIS_PAIE, C.DATE_DEB_PERIODE_PREC, C.DATE_DEB_PERIODE, C.DATE_FIN_PERIODE
 FROM (
 			SELECT DACH_MAX_DATE_EFF.NUMPAC,
              DACH_MAX_DATE_EFF.PAIEZAD,
              DACH_MAX_DATE_EFF.PACMAT,
              ''' || p_periode_paie || ''' MOIS_PAIE,
              TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(''' || p_periode_paie || ''',''yyyymm''),-1),''YYYYMM'')||''01'',''yyyymmdd'') DATE_DEB_PERIODE_PREC,
              TO_DATE(''' || p_periode_paie || '''||''01'',''yyyymmdd'') DATE_DEB_PERIODE,
              last_day(to_date(''' || p_periode_paie || '''||''01'',''yyyymmdd'')) DATE_FIN_PERIODE,
              MAX(DACH_MAX_DATE_EFF.DATE_EFF) AS max_date_eff
            FROM DIC_ADM_CONTRAT_HISTO DACH_MAX_DATE_EFF
 			WHERE DACH_MAX_DATE_EFF.NUMPAC = ''' || p_numpac || ''' ';
 IF p_pacmat IS NOT NULL THEN
 out_req := out_req || ' AND PACMAT = ''' || p_pacmat || ''' ';
 END IF;
 out_req := out_req || '  AND DACH_MAX_DATE_EFF.DATE_EFF <= last_day(TO_DATE( ''' || p_periode_paie || '''||''01'',''yyyymmdd''))
 			GROUP BY DACH_MAX_DATE_EFF.NUMPAC,
              DACH_MAX_DATE_EFF.PAIEZAD,
              DACH_MAX_DATE_EFF.PACMAT,
              ''' || p_periode_paie || ''',
              TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(''' || p_periode_paie || ''',''yyyymm''),-1),''YYYYMM'')||''01'',''yyyymmdd''),
              TO_DATE(''' || p_periode_paie || '''||''01'',''yyyymmdd''),
              last_day(to_date(''' || p_periode_paie || '''||''01'',''yyyymmdd''))
 			) C
 inner join DIC_ADM_CONTRAT_HISTO on
 DIC_ADM_CONTRAT_HISTO.NUMPAC = C.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = C.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT = C.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.DATE_EFF = C.max_date_eff
 ) DIC_ADM_CONTRAT_HISTO
 on DIC_ADM_CONTRAT_HISTO.NUMCNT=SITUATION_PAIE.NUMCNT
 AND DIC_ADM_CONTRAT_HISTO.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = SITUATION_PAIE.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT=SITUATION_PAIE.PACMAT
 WHERE (DIC_ADM_CONTRAT_HISTO.ZA750 IS NULL OR DIC_ADM_CONTRAT_HISTO.DRPAI2 != ''B'')
 AND (DIC_ADM_CONTRAT.NATCOL IS NULL OR DIC_ADM_CONTRAT.NATCOL in (''SAL'',''STA''))
 AND NVL(SITUATION_PAIE.DSFSC,TO_DATE(''20990101'',''YYYYMMDD'')) >= DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE_PREC
 AND NVL(DIC_ADM_CONTRAT_HISTO.DATE_EFF,SITUATION_PAIE.DSDSC) <= DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 ) CO
 ) COM,TGE_REF_VRVAL
 WHERE TGE_REF_VRVAL.CODE_TABLE = ''LTP''
 AND TGE_REF_VRVAL.NUMERO_DE_PAC = COM.NUMPAC
 AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = SUBSTR(COM.MOIS_PAIE,5, 2)||SUBSTR(COM.MOIS_PAIE,1, 4) ';
 
 IF optionEcp IS NOT NULL AND optionEcp = 'P' THEN
 out_req := out_req || '
 AND LPAD(COM.activite,2) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2)
 AND LPAD(COM.etablissement,5) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5)
 AND LPAD(COM.categorie,2) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2)
 ';
 ELSE
 out_req := out_req || '
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = ''TRUE''
 ';
 END IF;
 
 out_req := out_req || '
 GROUP BY numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,COM.MOIS_PAIE,COM.DATE_DEB_PERIODE,COM.DATE_FIN_PERIODE
 ) VR inner join TGE_REF_VRVAL on TGE_REF_VRVAL.NUMERO_DE_PAC = VR.NUMERO_DE_PAC AND TGE_REF_VRVAL.CODE_TABLE = VR.CODE_TABLE AND TGE_REF_VRVAL.NUMERO_DE_LIGNE = VR.min_NUMERO_DE_LIGNE
 LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD
 ON TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC      = VR.NUMPAC
 AND TGE_PERIODE_RECUEIL_PAIEZAD.PACMAT     = VR.PACMAT
 AND TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD    = VR.PAIEZAD
 AND TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE  = VR.MOIS_PAIE
 
 ) dach_tmp_sus
 LEFT JOIN DIC_ADM_CONTRAT_HISTO DIC_ADM_CONTRAT_HISTO ON
 DIC_ADM_CONTRAT_HISTO.numpac = dach_tmp_sus.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.pacmat = dach_tmp_sus.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.paiezad = dach_tmp_sus.PAIEZAD
 AND DIC_ADM_CONTRAT_HISTO.date_eff = dach_tmp_sus.date_eff_sus
 ) l
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT P
 ON l.NUMPAC = P.NUMPAC
 AND l.PACMAT = P.PACMAT
 AND l.NUMCNT = P.NUMCNT
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT_HISTO PH
 ON l.NUMPAC = PH.NUMPAC
 AND l.PACMAT = PH.PACMAT
 AND l.NUMCNT = PH.NUMCNT
 AND l.DATE_EFF = PH.DATE_EFF
 AND l.PAIEZAD = PH.PAIEZAD
 WHERE P.PACMAT IS NULL
 OR l.DSFCN IS NULL
 OR l.DSFCN >  l.DATE_FIN_PERIODE
 OR NVL(P.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(P.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR PH.PACMAT IS NULL
 OR l.sous_DSA301 IS NULL
 OR l.sous_DSA301 > l.DATE_FIN_PERIODE
 OR NVL(PH.DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(PH.DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR l.DATE_DEB_PERIODE BETWEEN l.ENTREE AND l.SORTIE
 OR l.ENTREE BETWEEN l.DATE_DEB_PERIODE AND  l.DATE_FIN_PERIODE ';
 
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP OK');
 EXCEPTION
 WHEN OTHERS THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP KO : TGE_ALIM_PERIODE_INDIV_TEMP '||SQLCODE|| SQLERRM);
 raise;
 END TGE_ALIM_PERIODE_INDIV_TEMP;
## 
TAG_CHARSET=@€éèç 
##
TGE_REGROUPE_ABS
=SQL=
CREATE OR REPLACE PROCEDURE TGE_REGROUPE_ABS(
    P_CLE_IMPORT IN VARCHAR2)
AS
BEGIN

	if (P_CLE_IMPORT like 'BATCH#%') THEN
		SYS_RECALCUL_STATS('TGE_ABSENCES');
		SYS_RECALCUL_STATS('TGE_INCIDENTS_PAIE');
	END IF;

  /*
  * Etape 1
  * Mise à jour des date de fin des absences pouvant être regroupé
  *
  */
  MERGE INTO TGE_ABSENCES USING
  (SELECT DISTINCT 
 	(SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND INC2.CODE_IP = TB1.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE,
 	NEW_DATE_FIN
 FROM (SELECT NUMPAC,
    PAIEZAD,
    CODE_IP,
    MIN(d) NEW_DATE_DEBUT,
    MAX(d) NEW_DATE_FIN
  FROM
    (SELECT INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.DATE_EFFET d,
      ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP,INC.DATE_EFFET) i
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
    substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP     != 'HP'
    AND INC.CLE_ABSENCE IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES        = ''
    OR (INC.HEURES      >= INCHP.HEURES)
    OR (PRE.UNITE        = 'J'
    AND INC.HEURES      >= 1))
    GROUP BY INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.DATE_EFFET
    )
  GROUP BY NUMPAC,
    PAIEZAD,
    CODE_IP,
    (d-i)
  )TB1) TB ON (TGE_ABSENCES.ID = TB.CLE_ABSENCE)
WHEN MATCHED THEN
  UPDATE SET TGE_ABSENCES.DATE_FIN = TB.NEW_DATE_FIN;
  /*
  * Etape 2
  * Suppresion des absences pouvant être regroupé
  *
  */
  DELETE
  FROM TGE_ABSENCES
  WHERE
  substr(REGEXP_REPLACE(TGE_ABSENCES.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND exists
    (SELECT INC.CLE_ABSENCE
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP         != 'HP'
    AND INC.CLE_ABSENCE     IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES            = ''
    OR (INC.HEURES          >= INCHP.HEURES)
    OR (PRE.UNITE            = 'J'
    AND INC.HEURES          >= 1))
    AND NOT exists (select 1 from 
      (SELECT  
 (SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND TB1.CODE_IP = INC2.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE
 FROM (SELECT 
      NUMPAC,
      PAIEZAD,
      CODE_IP,
      MIN(d) NEW_DATE_DEBUT
      FROM
        (SELECT INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET d,
          ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP,INC.DATE_EFFET) i
        FROM TGE_INCIDENTS_PAIE INC
        LEFT JOIN TGE_INCIDENTS_PAIE INCHP
        ON INC.NUMPAC      = INCHP.NUMPAC
        AND INC.PAIEZAD    = INCHP.PAIEZAD
        AND INC.DATE_EFFET = INCHP.DATE_EFFET
        AND INC.ID        != INCHP.ID
        AND INCHP.CODE_IP  = 'HP'
		AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        INNER JOIN TGE_REF_PRE PRE
        ON INC.NUMPAC   = PRE.NUMPAC
        AND INC.CODE_IP = PRE.CODE_INCIDENT
        WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        AND INC.CODE_IP     != 'HP'
        AND INC.CLE_ABSENCE IS NOT NULL
        AND (nvl(INC.HEURES,'0') = '0'
        OR INC.HEURES        = ''
        OR (INC.HEURES      >= INCHP.HEURES)
        OR (PRE.UNITE        = 'J'
        AND INC.HEURES      >= 1))
        GROUP BY INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET
        )
      GROUP BY NUMPAC,
        PAIEZAD,
        CODE_IP,
        (d-i)
      )TB1) tb2 where inc.cle_absence = tb2.cle_absence) 
       and TGE_ABSENCES.ID = INC.CLE_ABSENCE
    );
  /*
  * Etape 3
  * Mise à jour des clé absences des incidents paie liée a des absences ayant été regroupé
  *
  */
  MERGE INTO TGE_INCIDENTS_PAIE USING
  (SELECT DISTINCT INC.ID AS ID,
    MIN(ABS.ID)       AS CLE
  FROM TGE_INCIDENTS_PAIE INC
  INNER JOIN DIC_ADM_CONTRAT_SITU S
  ON S.NUMPAC   = INC.NUMPAC
  AND S.PAIEZAD = INC.PAIEZAD
  AND INC.DATE_EFFET BETWEEN S.DSDSC AND S.DSFSC
  INNER JOIN TGE_ABSENCES ABS
  ON ABS.MATRIC   = S.MATRIC
  AND INC.CODE_IP = ABS.MOTIF
  AND INC.DATE_EFFET BETWEEN ABS.DATE_DEBUT AND ABS.DATE_FIN
  WHERE NOT EXISTS
    (SELECT * FROM TGE_ABSENCES WHERE ID = INC.CLE_ABSENCE
    )
  AND substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
  AND substr(REGEXP_REPLACE(ABS.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND INC.CLE_ABSENCE            IS NOT NULL
  GROUP BY INC.ID
  ) TB ON ( TGE_INCIDENTS_PAIE.ID = TB.ID)
WHEN MATCHED THEN
  UPDATE SET TGE_INCIDENTS_PAIE.CLE_ABSENCE = TB.CLE;
END TGE_REGROUPE_ABS;
##
TAG_CHARSET=@€éèç
##
REF_HISTO_PROJET
=SQL=
CREATE OR REPLACE FORCE VIEW "REF_HISTO_PROJET" ("COMPANY_ID", "NUM_DIT", "NUM_VERSION", "ID_PROJET", "LIBELLE_PROJET", "DATE_VERSION", "USER_VERSION", "DESCRIPTION", "DATE_CREATION", "TERMINE", "AFFICHEBTN", "ENATTENTE", "RAPPORT", "AFFICHEDLSCRIPT") AS
WITH LIST_PROJ_EN_COURS AS (
  SELECT * from BATCH_LIST where PARAM_LIST like '%ID_PROJET%' AND FAMILLE = 'BATCH_GEN')  
  SELECT P.COMPANY_ID,
  P.NUM_DIT,
 (SELECT M.NUM_VERSION
 FROM REF_OBJ_MISEAUPRODUIT M
 WHERE M.COMPANY_ID = P.COMPANY_ID
 AND M.ID_PROJET    = P.ID_PROJET
 ) AS NUM_VERSION,
 P.ID_PROJET,
 P.LIBELLE_PROJET ,
 (SELECT M.DATE_VERSION
 FROM REF_OBJ_MISEAUPRODUIT M
 WHERE M.COMPANY_ID = P.COMPANY_ID
 AND M.ID_PROJET    = P.ID_PROJET
 ) AS DATE_VERSION,
 (SELECT M.USER_VERSION
 FROM REF_OBJ_MISEAUPRODUIT M
 WHERE M.COMPANY_ID = P.COMPANY_ID
 AND M.ID_PROJET    = P.ID_PROJET
 ) AS USER_VERSION ,
 P.DESCRIPTION ,
 P.DATE_CREATION,
 CASE P.TERMINE
 WHEN 'O'
 THEN 'Terminé'
 WHEN 'N'
 THEN ''
WHEN 'E' THEN 'En cours...'
 WHEN 'E1' THEN 'Etape 1/6 '
 WHEN 'E2' THEN 'Etape 2/6 '
 WHEN 'E3' THEN 'Etape 3/6 '
 WHEN 'E4' THEN 'Etape 4/6 '
 WHEN 'E5' THEN 'Etape 5/6 '
 WHEN 'E6' THEN 'Etape 6/6 '
 WHEN 'S'
 THEN 'Supprimé'
 END TERMINE,
 CASE WHEN P.TERMINE='N' THEN 'visible' ELSE 'invisible' END AFFICHEBTN,
 (SELECT
 CASE L.classe_name
 WHEN 'fr.adp.com.gxp.std.mot_tech.lib.deploiement.Traitement_bacASable'
 THEN 'Bac à Sable en attente...'
 WHEN 'fr.adp.com.gxp.std.mot_tech.lib.deploiement.Traitement_updateProduct'
 THEN 'Mise au produit en attente...'
 WHEN 'fr.adp.com.gxp.std.mot_tech.lib.deploiement.Traitement_deploiement'
 THEN 'Livraison en attente...'
 END
 FROM batch_list L,
 batch_queue B
 WHERE L.id_trt = B.id_trt
 AND L.famille  = B.famille
 AND L.famille  ='BATCH_GEN'
 AND L.id_trt in (SELECT id_trt FROM LIST_PROJ_EN_COURS)
 AND state='WAIT'
 ) AS ENATTENTE,
 (SELECT
 CASE
 WHEN NVL(LENGTH(M.RAPPORT),0) >0
 THEN 'Rapport'
 ELSE ''
 END RAPPORT
 FROM REF_OBJ_MISEAUPRODUIT M
 WHERE M.COMPANY_ID = P.COMPANY_ID
 AND M.ID_PROJET    = P.ID_PROJET
 ) AS RAPPORT,
 CASE WHEN P.TERMINE='O' THEN 'visible' ELSE 'invisible' END AFFICHEDLSCRIPT
 FROM META_PROJET P
 WHERE P.COMPANY_ID ='*'
 ORDER BY DATE_VERSION DESC,
 NUM_VERSION DESC ,
 ID_PROJET DESC
##
STD_REQUETE
==
CREATE OR REPLACE FORCE VIEW STD_REQUETE (NOMREQUETE, UTILISATEUR, APPLICATION, REQUETE, REQUETEECR_GSI, REQUETESQL_GSI, TYPE_REQUETE, TYPEREQUETE, EST_VISIBLE, KEEP_AND_IN_REQ_STRUCT) AS SELECT NOMREQUETE, UTILISATEUR, APPLICATION, REQUETE, REQUETEECR_GSI, REQUETESQL_GSI, TYPE_REQUETE, 'S' AS TYPEREQUETE, EST_VISIBLE, KEEP_AND_IN_REQ_STRUCT FROM REQUETESIMPLE
##
STD_REQUETE
==
CREATE OR REPLACE FORCE VIEW STD_REQUETE (NOMREQUETE, UTILISATEUR, APPLICATION, REQUETE, REQUETEECR_GSI, REQUETESQL_GSI, TYPE_REQUETE, TYPEREQUETE, EST_VISIBLE, KEEP_AND_IN_REQ_STRUCT, NUMPAC) AS SELECT NOMREQUETE, UTILISATEUR, APPLICATION, REQUETE, REQUETEECR_GSI, REQUETESQL_GSI, TYPE_REQUETE, 'S' AS TYPEREQUETE, EST_VISIBLE, KEEP_AND_IN_REQ_STRUCT, NUMPAC FROM REQUETESIMPLE
##
TAG_CHARSET=@€éèç
##
DIC_ADM_CONTRAT_HISTO
=SQL IFNOTEXIST=DIC_ADM_CONTRAT_HISTO=MDE=
ALTER TABLE DIC_ADM_CONTRAT_HISTO add MDE varchar2(2)
##
TAG_CHARSET=@€éèç
##
DIC_PENSION_ALIM
=SQL IFNOTEXIST=DIC_PENSION_ALIM=
CREATE TABLE DIC_PENSION_ALIM (MATRIC VARCHAR2(32 BYTE), NUMPAC VARCHAR2(6 BYTE), PACMAT VARCHAR2(8 BYTE), IDPACMAT AS (RPAD(NUMPAC,6)||PACMAT), RD_BENEF_PENS1 VARCHAR2(30 BYTE), RD_BENEF_PENS2 VARCHAR2(30 BYTE), RD_BENEF_PENS3 VARCHAR2(30 BYTE), RD_BIC_PENS1 VARCHAR2(11 BYTE), RD_BIC_PENS2 VARCHAR2(11 BYTE), RD_BIC_PENS3 VARCHAR2(11 BYTE), RD_BISTER_PENS1 VARCHAR2(1 BYTE), RD_BISTER_PENS2 VARCHAR2(1 BYTE), RD_BISTER_PENS3 VARCHAR2(1 BYTE), RD_CINSEE_PENS1 VARCHAR2(5 BYTE), RD_CINSEE_PENS2 VARCHAR2(5 BYTE), RD_CINSEE_PENS3 VARCHAR2(5 BYTE), RD_CODES_IBAN_PENS1 VARCHAR2(30 BYTE), RD_CODES_IBAN_PENS2 VARCHAR2(30 BYTE), RD_CODES_IBAN_PENS3 VARCHAR2(30 BYTE), RD_CODE_DISTRI_PENS1 VARCHAR2(32 BYTE), RD_CODE_DISTRI_PENS2 VARCHAR2(32 BYTE), RD_CODE_DISTRI_PENS3 VARCHAR2(32 BYTE), RD_CODE_POSTAL_PENS1 VARCHAR2(5 BYTE), RD_CODE_POSTAL_PENS2 VARCHAR2(5 BYTE), RD_CODE_POSTAL_PENS3 VARCHAR2(5 BYTE), RD_COMMUNE_PENS1 VARCHAR2(32 BYTE), RD_COMMUNE_PENS2 VARCHAR2(32 BYTE), RD_COMMUNE_PENS3 VARCHAR2(32 BYTE), RD_DOMBQE_PENS1 VARCHAR2(24 BYTE), RD_DOMBQE_PENS2 VARCHAR2(24 BYTE), RD_DOMBQE_PENS3 VARCHAR2(24 BYTE), RD_DSDPEN_PENS1 DATE, RD_DSDPEN_PENS2 DATE, RD_DSDPEN_PENS3 DATE, RD_IBA2_PENS1 VARCHAR2(4 BYTE), RD_IBA2_PENS2 VARCHAR2(4 BYTE), RD_IBA2_PENS3 VARCHAR2(4 BYTE), RD_IBA3_PENS1 VARCHAR2(4 BYTE), RD_IBA3_PENS2 VARCHAR2(4 BYTE), RD_IBA3_PENS3 VARCHAR2(4 BYTE), RD_IBA4_PENS1 VARCHAR2(4 BYTE), RD_IBA4_PENS2 VARCHAR2(4 BYTE), RD_IBA4_PENS3 VARCHAR2(4 BYTE), RD_IBA5_PENS1 VARCHAR2(4 BYTE), RD_IBA5_PENS2 VARCHAR2(4 BYTE), RD_IBA5_PENS3 VARCHAR2(4 BYTE), RD_IBA6_PENS1 VARCHAR2(4 BYTE), RD_IBA6_PENS2 VARCHAR2(4 BYTE), RD_IBA6_PENS3 VARCHAR2(4 BYTE), RD_IBA7_PENS1 VARCHAR2(4 BYTE), RD_IBA7_PENS2 VARCHAR2(4 BYTE), RD_IBA7_PENS3 VARCHAR2(4 BYTE), RD_IBA8_PENS1 VARCHAR2(4 BYTE), RD_IBA8_PENS2 VARCHAR2(4 BYTE), RD_IBA8_PENS3 VARCHAR2(4 BYTE), RD_IBA9_PENS1 VARCHAR2(2 BYTE), RD_IBA9_PENS2 VARCHAR2(2 BYTE), RD_IBA9_PENS3 VARCHAR2(2 BYTE), RD_IBACC_PENS1 VARCHAR2(2 BYTE), RD_IBACC_PENS2 VARCHAR2(2 BYTE), RD_IBACC_PENS3 VARCHAR2(2 BYTE), RD_IBAPA_PENS1 VARCHAR2(2 BYTE), RD_IBAPA_PENS2 VARCHAR2(2 BYTE), RD_IBAPA_PENS3 VARCHAR2(2 BYTE), RD_MNTPEN_PENS1 NUMBER(7,2), RD_MNTPEN_PENS2 NUMBER(7,2), RD_MNTPEN_PENS3 NUMBER(7,2), RD_NOM_VOIE_PENS1 VARCHAR2(32 BYTE), RD_NOM_VOIE_PENS2 VARCHAR2(32 BYTE), RD_NOM_VOIE_PENS3 VARCHAR2(32 BYTE), RD_NUMVOI_PENS1 VARCHAR2(5 BYTE), RD_NUMVOI_PENS2 VARCHAR2(5 BYTE), RD_NUMVOI_PENS3 VARCHAR2(5 BYTE), RD_REF_EXT_PENS1 VARCHAR2(24 BYTE), RD_REF_EXT_PENS2 VARCHAR2(24 BYTE), RD_REF_EXT_PENS3 VARCHAR2(24 BYTE), RD_TITBQE_PENS1 VARCHAR2(30 BYTE), RD_TITBQE_PENS2 VARCHAR2(30 BYTE), RD_TITBQE_PENS3 VARCHAR2(30 BYTE), DATE_CREATION DATE, DATE_DERNIERE_MODIF DATE, TYPE_WRITER VARCHAR2(1 BYTE), PRIMARY KEY (NUMPAC, PACMAT))
##
EDI_TEMPLATE_DOCUMENT
==
DELETE FROM EDI_TEMPLATE_DOCUMENT WHERE CODE_TEMPLATE IN ( 'HELPDESK_ECT','HELPDESK_REA','HELPDESK_CPT','HELPDESK_NEW','HELPDESK_ANU','HELPDESK_RAFFEC','HELPDESK_AFFEC')
'HELPDESK_ECT','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour,<BR><BR>La fiche n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|) est en cours de traitement.<BR><BR></SPAN>¿<TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse">¿<TBODY>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravité</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"><STRONG>|#REPAUTEUR#|</STRONG></SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><BR><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
'HELPDESK_REA','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour,<BR><BR>La fiche n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|) a été réalisée.<BR><BR></SPAN>¿<TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse">¿<TBODY>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravité</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"><STRONG>|#REPAUTEUR#|</STRONG></SPAN></TD></TR>¿<TR>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD>¿<TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><BR><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
'HELPDESK_CPT','HELPDESK_CLIENT','<span style="FONT-FAMILY: Arial">Bonjour,<br><br>Des informations compl&eacute;mentaires sont n&eacute;cessaires pour la fiche n°<span style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </span>(|#LIBFICHE#|).<br><span style="FONT-FAMILY: Arial"><br></span><table style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse"><tbody><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravit&eacute;</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></span><span style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial">|#REPAUTEUR#|</span></td></tr><tr><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</span></td><td style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><span style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</span></td></tr></tbody></table><span style="FONT-FAMILY: Arial"></span><br style="font-family: Arial;"><span style="font-family: Arial;"></span><br><span style="FONT-FAMILY: Arial">Cordialement<br></span>','HTML'
'HELPDESK_NEW','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour,<BR><BR>La fiche n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|) vient d''&ecirc;tre cr&eacute;&eacute;e par |#AUTEURFICHE#|.<BR><BR></SPAN><TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse"><TBODY><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravit&eacute;</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><BR><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
'HELPDESK_ANU','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour,<BR><BR>La fiche n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|) vient d''&ecirc;tre annul&eacute;e.<BR><BR></SPAN><TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse"><TBODY><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravit&eacute;</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"><STRONG>|#REPAUTEUR#|</STRONG></SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><BR><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
'HELPDESK_RAFFEC','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour, <BR><BR></SPAN><SPAN style="FONT-FAMILY: Arial">La fiche </SPAN><SPAN style="FONT-FAMILY: Arial">n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|)</SPAN><SPAN style="FONT-FAMILY: Arial"> vient de vous &ecirc;tre affect&eacute;e par</SPAN><SPAN style="FONT-WEIGHT: bold; FONT-SIZE: 10pt; FONT-STYLE: italic; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"> <SPAN >|#LASTUSER#|.</SPAN></SPAN><SPAN style="FONT-FAMILY: Arial"><SPAN style="COLOR: rgb(255,0,0); FONT-STYLE: italic; TEXT-DECORATION: underline"></SPAN></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse"><TBODY><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravit&eacute;</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial">|#REPAUTEUR#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><SPAN style="FONT-WEIGHT: bold; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
'HELPDESK_AFFEC','HELPDESK_CLIENT','<SPAN style="FONT-FAMILY: Arial">Bonjour, <BR><BR></SPAN><SPAN style="FONT-FAMILY: Arial">La fiche </SPAN><SPAN style="FONT-FAMILY: Arial">n°<SPAN style="FONT-WEIGHT: bold; COLOR: rgb(255,0,0); FONT-FAMILY: Arial">|#CODFICHE#| </SPAN>(|#LIBFICHE#|)</SPAN><SPAN style="FONT-FAMILY: Arial"> vient de vous &ecirc;tre affect&eacute;e par</SPAN><SPAN style="FONT-WEIGHT: bold; FONT-SIZE: 10pt; FONT-STYLE: italic; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"> <SPAN >|#LASTUSER#|.</SPAN></SPAN><SPAN style="FONT-FAMILY: Arial"><SPAN style="COLOR: rgb(255,0,0); FONT-STYLE: italic; TEXT-DECORATION: underline"></SPAN></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><TABLE style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; WIDTH: 600px; BORDER-BOTTOM: black 1px solid; BORDER-COLLAPSE: collapse"><TBODY><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Date de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DATEFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; WORD-SPACING: 0pt; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; WIDTH: 150px; BORDER-BOTTOM: black 1px solid; LETTER-SPACING: 0pt; TEXT-ALIGN: left"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Demandeur</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#AUTEURFICHE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Type de demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#TYPE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Gravit&eacute;</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#GRAVITE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Sous domaine</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#SOUSDOMAINE#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Commentaire </SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: rgb(128,0,0); FONT-FAMILY: Arial">|#REPAUTEUR#|</SPAN></TD></TR><TR><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">Rappel de la demande</SPAN></TD><TD style="BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; VERTICAL-ALIGN: top; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: Arial">|#DESCFICHE#|</SPAN></TD></TR></TBODY></TABLE><SPAN style="FONT-WEIGHT: bold; FONT-FAMILY: Arial"></SPAN><SPAN style="FONT-FAMILY: Arial"><BR></SPAN><SPAN style="FONT-FAMILY: Arial">Cordialement<BR></SPAN>','HTML'
##
TAG_CHARSET=@€éèç
##
REQUETESIMPLE
=SQL IFNOTEXIST=REQUETESIMPLE=NUMPAC=
ALTER TABLE REQUETESIMPLE ADD NUMPAC VARCHAR2(6) DEFAULT '*'
##
TAG_CHARSET=@€éèç
##
SIGN_GROUPE_SIGNATAIRES
=SQL IFNOTEXIST=SIGN_GROUPE_SIGNATAIRES=
create table SIGN_GROUPE_SIGNATAIRES(GROUPE_SIGNATAIRES varchar2(50) not null enable, AOID varchar2(32) not null enable, DEFAUT_SIGNATAIRE varchar2(1) not null enable, PRIMARY KEY (GROUPE_SIGNATAIRES, AOID))
##
TAG_CHARSET=@€éèç
##
SIGN_GROUPE_SIGNATAIRES_DESC
=SQL IFNOTEXIST=SIGN_GROUPE_SIGNATAIRES_DESC=
create table SIGN_GROUPE_SIGNATAIRES_DESC(GROUPE_SIGNATAIRES varchar2(50) not null enable, LIBELLE varchar2(255), DESCRIPTION clob, NUMPAC varchar2(6), PRIMARY KEY (GROUPE_SIGNATAIRES))
##
TAG_CHARSET=@€éèç
##
STD_STRUC_ARBRE
=SQL IFNOTEXIST=STD_STRUC_ARBRE=AOID_SIGNATAIRE=
alter table STD_STRUC_ARBRE add AOID_SIGNATAIRE varchar2(32)
##
STD_STRUC_ARBRE
=SQL IFEXIST=STD_STRUC_ARBRE=AOID_SIGNATAIRE=
alter table STD_STRUC_ARBRE drop column AOID_SIGNATAIRE
##
STD_STRUC_ARBRE
=SQL IFNOTEXIST=STD_STRUC_ARBRE=GROUPE_SIGNATAIRES=
alter table STD_STRUC_ARBRE add GROUPE_SIGNATAIRES varchar2(50)
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('GENWKF77','GENWKF78','GENWKF79','GENWKF80','GENWKF81','GENWKF82','GENWKF83','GENWKF84','GENWKF85','GENWKF86','GENWKF87','GENWKF88','GENWKF89')
'GENWKF77','GEN','fr_fr','0','Il n''y a pas de période suivante à celle que vous voulez insérer. Modifiez votre saisie ou utilisez le WKF nouvelle période d''emploi.','1'
'GENWKF78','GEN','fr_fr','0','La date de début de la période insérée ne peut pas être supérieure ou égale à la date de début de la période suivante.','1'
'GENWKF79','GEN','fr_fr','0','La date de fin de la période insérée ne peut pas être inférieure ou égale à la date de fin de la période précédente.','1'
'GENWKF80','GEN','fr_fr','0','Insertion de période non autorisée dans le passé.','1'
'GENWKF81','GEN','fr_fr','0','La date de début de la période ne doit pas être antérieure à la limite de la rétroactivité. ','1'
'GENWKF82','GEN','fr_fr','0','La date de fin de la période précédente a été ajustée à J-1 de la date de début de la période insérée.','3'
'GENWKF83','GEN','fr_fr','0','Le type de réembauche prévisionnel de la période précédente a été modifié.','3'
'GENWKF84','GEN','fr_fr','0','La date de début de la période suivante a été ajustée à J+1 de la date de fin de la période insérée.','3'
'GENWKF85','GEN','fr_fr','0','Le type de réembauche réél de la période suivante a été modifié.','3'
'GENWKF86','GEN','fr_fr','0','La période d''emploi demandée (du ''#1'' au ''#2'') est en chevauchement total avec au moins une période d''emploi : du ''#3'' au ''#4''','1'
'GENWKF87','GEN','fr_fr','0','La période d''emploi insérée est en chevauchement avec la période précédente.','2'
'GENWKF88','GEN','fr_fr','0','La période d''emploi insérée est en chevauchement avec la période suivante.','2'
'GENWKF89','GEN','fr_fr','0','La période d''emploi insérée est en chevauchement avec la période précédente et la période suivante.','2'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where coderr = 'FORDIP06'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where coderr in ('GENDIP06','GENDIP07')
'GENDIP06','GEN','fr_fr','0','La donnée ''Niveau de formation de plus élevé obtenu'' est obligatoire pour ce salarié.','1'
'GENDIP07','GEN','fr_fr','0','La donnée ''Niveau de diplôme préparé'' est obligatoire pour ce salarié.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('ESGGPS01', 'ESGGPS02', 'ESGGPS03', 'ESGGPS04', 'ESGGPS05', 'ESGGPS06', 'ESGGPS07', 'ESGGPS08', 'ESGGPS09', 'ESGGPS10', 'ESGGPS11', 'ESGGPS12', 'ESGGPS13', 'ESGGPS14', 'ESGGPS15', 'ESGGPS16', 'ESGGPS17', 'ESGGPS18')
'ESGGPS01','ESG','fr_fr','0','Veuillez sélectionner un groupe de signataires.','3'
'ESGGPS02','ESG','fr_fr','0','Voulez-vous supprimer ce(s) signataire(s) ?','3'
'ESGGPS03','ESG','fr_fr','0','Veuillez sélectionner au moins un signataire.','3'
'ESGGPS04','ESG','fr_fr','0','Problème lors de l''ajout des signataires au groupe de signataires.','1'
'ESGGPS05','ESG','fr_fr','0','Le code groupe signataires est obligatoire.','1'
'ESGGPS06','ESG','fr_fr','0','Le signataire #1 existe déjà dans le groupe de signataires #2.','3'
'ESGGPS07','ESG','fr_fr','0','Problème lors de la suppression du/des signataire(s) appartenant au groupe de signataires.','1'
'ESGGPS08','ESG','fr_fr','0','Problème lors de l''ajout du groupe de signataires.','1'
'ESGGPS09','ESG','fr_fr','0','Le groupe signataires #1 existe déjà.','1'
'ESGGPS10','ESG','fr_fr','0','Le groupe signataires #1 n''existe pas.','1'
'ESGGPS11','ESG','fr_fr','0','Voulez-vous supprimer ce groupe de signataires. Ceci va supprimer ce groupe de signataires sur toutes les entités qui lui sont associées.','3'
'ESGGPS12','ESG','fr_fr','0','Problème lors de la suppression du groupe de signataires.','3'
'ESGGPS13','ESG','fr_fr','0','Attention, la taille de l''écran empêche l''affichage des tableaux.','3'
'ESGGPS14','ESG','fr_fr','0','Les signataires suivants (#1) existent déjà dans le groupe de signataires : #2.','3'
'ESGGPS15','ESG','fr_fr','0','Ce groupe de signataires n''est associé à aucune entité d''un arbre HRO.','3'
'ESGGPS16','ESG','fr_fr','0','Etes-vous sûr de vouloir désigner ce signataire comme signataire par défaut ? Un seul signataire peut être désigné à la fois.','3'
'ESGGPS17','ESG','fr_fr','0','Problème lors de la désignation du signataire par défaut.','3'
'ESGGPS18','ESG','fr_fr','0','Ce groupe de signataires n''a pas encore de signataire par défaut désigné.','3'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'HRO' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('HROARB36')
'HROARB36','HRO','fr_fr',0,'La structure #1 n''est pas la structure juridique, vous ne pouvez pas saisir de groupe de signataires #2.',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('ESGGPS19', 'ESGGPS20', 'ESGGPS21')
'ESGGPS19','ESG','fr_fr','0','Les signataires suivants ne sont plus présents (#1), ils ne peuvent pas être ajoutés au groupe de signataires #2.','1'
'ESGGPS20','ESG','fr_fr','0','Le signataire suivant n''est plus présent (#1), il ne peut pas être ajouté au groupe de signataires #2.','1'
'ESGGPS21','ESG','fr_fr','0','Tous les signataires du groupe de signataires #1 ne sont plus présents.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('ESGCHX04', 'ESGCHX05')
'ESGCHX04','ESG','fr_fr','0','Problème lors de la récupération de l''entité du salarié.','1'
'ESGCHX05','ESG','fr_fr','0','Pas de groupe de signataires associé à l''entité juridique du salarié ou bien le groupe est vide.','1'
##
SYS_PAGES_MODAL
==
DELETE FROM SYS_PAGES_MODAL WHERE nom_page = 'Moteur/Comp/WebAdmin/visuDetailUserMonoPac.jsp'
'Moteur/Comp/WebAdmin/visuDetailUserMonoPac.jsp','Informations sur l''utilisateur'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE in('Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#C', 'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#M', 'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#D')
'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#C', 'Ajout d''un groupe de signataires'
'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#M', 'Modification d''un groupe de signataires'
'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM#D', 'Duplication d''un groupe de signataires'
##
SYS_PAGES_MODAL_RESTRICTION
==
DELETE FROM SYS_PAGES_MODAL_RESTRICTION WHERE NOM_PAGE_MODALE IN ('Modules/HelpDesk/modal/HelpDesk_Fiche.jsp','Modules/HelpDesk/modal/HelpDesk_FicheModif.jsp','Modules/HelpDesk/modal/HelpDesk_FichePrint.jsp','Modules/HelpDesk/modal/HelpDesk_Suivi.jsp')
'Modules/HelpDesk/modal/HelpDesk_Fiche.jsp','Modules/HelpDesk/HelpDesk_modale.jsp'
'Modules/HelpDesk/modal/HelpDesk_FicheModif.jsp','Modules/HelpDesk/HelpDesk_modale.jsp'
'Modules/HelpDesk/modal/HelpDesk_FichePrint.jsp','Modules/HelpDesk/HelpDesk_modale.jsp'
'Modules/HelpDesk/modal/HelpDesk_Suivi.jsp','Modules/HelpDesk/HelpDesk_modale.jsp'
##
SYS_REQUETES_JSP
==
DELETE  FROM sys_requetes_jsp where nompage= 'visuDetailUser.jsp' and idrequete in ('240','241','243')
'visuDetailUser.jsp','240','Utilisateur','(select NOMREQUETE,REQUETE from REQUETESIMPLE where APPLICATION=''SEC_LOC'' and UTILISATEUR=''DBA'' and EST_VISIBLE = 1 and numpac=@NUMPAC@ ORDER BY NOMREQUETE)','NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true',NULL,NULL,NULL,NULL
'visuDetailUser.jsp','241','Utilisateur','(select NOMREQUETE,REQUETE from REQUETESIMPLE where APPLICATION=''SEC_LOC_STR'' and UTILISATEUR=''DBA''  and numpac=@NUMPAC@ and EST_VISIBLE = 1 ORDER BY NOMREQUETE)','NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true',NULL,NULL,NULL,NULL
'visuDetailUser.jsp','243','Utilisateur','(select NOMREQUETE,REQUETE from REQUETESIMPLE where APPLICATION=''GAP_NAT_TRT_PAIE_SEC_EXP'' and UTILISATEUR=''DBA'' and EST_VISIBLE = 1  and numpac= @NUMPAC@ ORDER BY NOMREQUETE)','NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true',NULL,NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
DELETE  FROM sys_requetes_jsp where nompage= 'visuDetailUser.jsp' and idrequete in ('253','254','275')
'visuDetailUser.jsp','253','Utilisateur','(select NOMREQUETE,REQUETE,decode(numpac,''*'',''Partagé'',numpac) as numpac from REQUETESIMPLE where APPLICATION=''SEC_LOC'' and UTILISATEUR=''DBA'' and EST_VISIBLE = 1  AND @SECUPAC_SANSQUOTE@  ORDER BY NOMREQUETE)','NUMPAC,NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true','numpac,NOMREQUETE',NULL,NULL,NULL
'visuDetailUser.jsp','254','Utilisateur','(select NOMREQUETE,REQUETE,decode(numpac,''*'',''Partagé'',numpac) as numpac from REQUETESIMPLE where APPLICATION=''SEC_LOC_STR'' and UTILISATEUR=''DBA'' and EST_VISIBLE = 1 and  @SECUPAC_SANSQUOTE@ ORDER BY NOMREQUETE)','NUMPAC,NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true','numpac,NOMREQUETE',NULL,NULL,NULL
'visuDetailUser.jsp','275','Utilisateur','(select NOMREQUETE,REQUETE,decode(numpac,''*'',''Partagé'',numpac) as numpac from REQUETESIMPLE where APPLICATION=''GAP_NAT_TRT_PAIE_SEC_EXP'' and UTILISATEUR=''DBA'' and EST_VISIBLE = 1 AND @SECUPAC_SANSQUOTE@ ORDER BY NOMREQUETE)','NUMPAC,NOMREQUETE,REQUETE','NOMREQUETE',NULL,'50','true','numpac,NOMREQUETE',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP where nompage = 'TAB_RD_HISTO_PROJET'  and idrequete=1
'TAB_RD_HISTO_PROJET','1','Utilisateur','REF_HISTO_PROJET','COMPANY_ID, NUM_VERSION, ID_PROJET, LIBELLE_PROJET, DATE_VERSION, USER_VERSION, DESCRIPTION, DATE_CREATION, TERMINE, RAPPORT, AFFICHEBTN, ENATTENTE, NUM_DIT, AFFICHEDLSCRIPT','COMPANY_ID, NUM_VERSION, ID_PROJET, LIBELLE_PROJET, DATE_VERSION, USER_VERSION, DESCRIPTION, DATE_CREATION, TERMINE, RAPPORT, AFFICHEBTN, ENATTENTE, NUM_DIT, AFFICHEDLSCRIPT','1=1','0',NULL,'ID_PROJET desc','Liste des historiques des projets','historique des projets','Client ID, n° Version, Id Projet, Libellé Projet, Date, Utilisateur, Description, Date Création Projet, Statut, Rapport, Style Bouton, En Attente, DIT, Style Bouton Script'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='Ext.adp.Modules.Signature.GroupeSignataires' and IDREQUETE in (1, 2,3)
'Ext.adp.Modules.Signature.GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC','GROUPE_SIGNATAIRES,LIBELLE,DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where  A.GROUPE_SIGNATAIRES= GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','NUMPAC=%1', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Description,Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','2','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC','GROUPE_SIGNATAIRES,LIBELLE,NUMPAC,DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where  A.GROUPE_SIGNATAIRES= GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE',null, '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Numéro de pac,Description, Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','3','Utilisateur','SIGN_SIGNATAIRE S, SYS_USR_CONFIG CON, SYS_USR_CONNU UC, SECUMATRIC SECU','S.AOID,S.NOM,S.PRENOM,S.EMAIL','S.AOID', 'not exists (select 1 from SIGN_GROUPE_SIGNATAIRES G where S.AOID = G.AOID and GROUPE_SIGNATAIRES = %1) and CON.LOGIN = S.AOID and SECU.MATRIC(+) = CON.REQUETEMATRIC and UC.LOGIN(+) = S.AOID and case when CON.REQUETEMATRIC is null then 1  when CON.REQUETEMATRIC is not null and (SECU.DSFCN is null or (SECU.DSFCN >= to_char(sysdate, ''yyyymmdd'') and to_char(to_date(UC.DATEFINACCES, ''dd.mm.yyyy''), ''yyyymmdd'') >= to_char(sysdate, ''yyyymmdd''))) then 1 end = 1', '0',NULL,NULL,NULL,NULL,'Login,Nom,Prénom,Email'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_Signataires' and IDREQUETE = 1
'ESG_Signataires','1','Utilisateur','SIGN_SIGNATAIRE','NOM,PRENOM,FONCTION','AOID,NOM,PRENOM,FONCTION','EXISTS   (SELECT 1   FROM     (SELECT H.LOGIN,H.SIGN_LISTE_MANDATAIRES,       H.DATE_LANCEMENT,       CASE         WHEN G.TYPE IS NOT NULL         THEN G.TYPE         WHEN A.ATTEST_ID IS NOT NULL         THEN ''A''         ELSE ''''       END AS TYPEDOC,       CASE         WHEN H.SIGN_PROCEDURE IS NULL         THEN ''N''         ELSE ''O''       END AS FILTRE_SOUMISSIGNATURE     FROM EDI_HISTO_LANCEMENTS H     LEFT OUTER JOIN EDI_DS_LANCEMENT L     ON L.ID_HISTO_LANCEMENT=H.ID_LANCEMENT     LEFT OUTER JOIN EDI_DS_STATUTS DS     ON DS.CODE_STATUT=L.STATUT     LEFT OUTER JOIN GA_EDITIONS_GAP G     ON G.CODE=L.ID_MAQUETTE     LEFT OUTER JOIN GA_ATTESTATION_TYPES A     ON A.FAMEDI                     =H.FAMEDI     AND A.CODEDI                    =H.CODEDI     WHERE H.SIGN_LISTE_MANDATAIRES IS NOT NULL     )   WHERE ((''%1'' is null OR ''%2'' is null) OR DATE_LANCEMENT BETWEEN TO_DATE(''%1'',''dd.MM.yyyy'') AND TO_DATE(''%2'',''dd.MM.yyyy''))   AND (''%1'' is null OR DATE_LANCEMENT >= TO_DATE(''%1'',''dd.MM.yyyy''))   AND (''%2'' is null OR DATE_LANCEMENT <= TO_DATE(''%2'',''dd.MM.yyyy''))   AND (''%3'' is null OR TYPEDOC                = ''%3'')   AND (''%4'' != ''O'' OR FILTRE_SOUMISSIGNATURE = ''%4'')   AND '',''     ||SIGN_LISTE_MANDATAIRES     ||'','' LIKE ''%,''     ||AOID     ||'',%''   AND LOGIN = @LOGIN@)','0','true','NOM',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_GroupeSignataires' and IDREQUETE = 1
'ESG_GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','GROUPE_SIGNATAIRES, LIBELLE','GROUPE_SIGNATAIRES, LIBELLE','exists (select 1 from SIGN_GROUPE_SIGNATAIRES S where S.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES)','0','true','GROUPE_SIGNATAIRES',NULL,NULL,NULL
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Modules.Signature.GroupeSignataires'
'Ext.adp.Modules.Signature.GroupeSignataires', 'GroupeSignatairesJsonServlet'
'Ext.adp.Modules.Signature.GroupeSignataires', 'GroupeSignatairesCMJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Modules.Signature.SuiviDocumentsEtSignatures'
'Ext.adp.Modules.Signature.SuiviDocumentsEtSignatures', 'STD_PAGINATION_NBLIGPAGE', 'ESG00001;TGE00267', 'SuiviDocumentsEtSignaturesJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Modules.Signature.GroupeSignataires'
'Ext.adp.Modules.Signature.GroupeSignataires', null, 'ESGGPS01;ESGGPS02;ESGGPS03;ESGGPS11;ESGGPS13;ESGGPS16;', 'GroupeSignatairesJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM'
'Ext.adp.Modules.Signature.slide.GroupeSignatairesCM', 'HRO_EXP_REG_CODE_MASKRE_JS;HRO_EXP_REG_LIBELLE_MASKRE_JS;', 'STD00034;', 'GroupeSignatairesCMJsonServlet'
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='STD' and CODVAR='USER_MANAGEMENT_BY_PAC'
'STD', 'USER_MANAGEMENT_BY_PAC', 'false', 'Booléen', 'Indique si l''administration de l''écran utilisateur est décentralisé par PAC.'
##
TAG_CHARSET=@€éèç
##
TGE_REF_CARTE_FSED
=SQL IFEXIST=TGE_REF_CARTE_FSED=FORMATAGE_SQL=
ALTER TABLE TGE_REF_CARTE_FSED MODIFY FORMATAGE_SQL VARCHAR2(3500 BYTE)
##
TGE_REF_CARTE_FSED
==
DELETE from TGE_REF_CARTE_FSED where CODE_CARTE in ('00','00_ALP','11','29_30_DIF_FSED','29_30_DIF_FSED_RETRO','29_30_TGE_ELEMENT_PAIE','29_30_TGE_ELEMENT_PAIE_RETRO','309','309_RETRO','30_SIMULATION_PAIE','40','40_RETRO','409','409_RETRO','40_SIMULATION_PAIE','50','509','60','60_RETRO','609','609_RETRO','60_ABSENCES','60_SIMULATION_PAIE','70','70_RETRO','70_SIMULATION_PAIE','99','ANNULATION','ANNULATION_RETRO','ANNULATION_PERIODE_EMPLOI','IJEDI','W566','W566_RETRO','WL70','WL70_RETRO') and ORIGINE_CARTE='RD'
##
TGE_REF_CARTE_FSED
'00','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','005','TGE',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'00_ALP','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','005','ALP',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00_ALP','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00_ALP','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00_ALP','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00_ALP','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00_ALP','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00_ALP','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00_ALP','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'11','RD','SELECT','001',NULL,'TGE_REF_VRVAL','NUMERO_DE_PAC','6','0','FALSE',NULL,NULL
'11','RD','SELECT','002','11',NULL,NULL,'2','0','FALSE',NULL,NULL
'11','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','004',NULL,'TGE_REF_VRVAL','CODE_TABLE','3',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,0,3)'
'11','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,4,2)'
'11','RD','SELECT','007',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','008','V',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','009',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','011',NULL,'TGE_REF_VRVAL','NUMERO_DE_LIGNE','1',NULL,'FALSE','SUBSTR(@COLONNE_CIBLE@,9,1)',NULL
'11','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','013',NULL,'TGE_REF_VRVAL','LONGUEUR_INFO','3','0','FALSE',NULL,NULL
'11','RD','SELECT','014',NULL,'TGE_REF_VRVAL','ENREGISTREMENT','86',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','015',NULL,NULL,NULL,'66',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','016',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','018','3',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','019',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'11','RD','SELECT','020',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'11','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','024',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','025',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'11','RD','SELECT','026',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL',NULL
'11','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRREP',NULL
'11','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.NUMERO_DE_PAC = TGE_REF_VRREP.NUMERO_DE_PAC',NULL
'11','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.CODE_TABLE = TGE_REF_VRREP.CODE_TABLE',NULL
'11','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.TEMOIN_VR_BASE in(''O'',''K'')',NULL
'29_30_DIF_FSED','RD','SELECT','001',NULL,'DIF_FSED','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','001',NULL,'DIF_FSED_PARTIERETRO','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','004',NULL,'DIF_FSED','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','004',NULL,'DIF_FSED_PARTIERETRO','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','007',NULL,'DIF_FSED','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','007',NULL,'DIF_FSED_PARTIERETRO','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','009',NULL,'DIF_FSED','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','009',NULL,'DIF_FSED_PARTIERETRO','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','012',NULL,'DIF_FSED','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED_RETRO','RD','SELECT','012',NULL,'DIF_FSED_PARTIERETRO','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED','RD','SELECT','013',NULL,'DIF_FSED','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','013',NULL,'DIF_FSED_PARTIERETRO','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE_DONNEE'
'29_30_DIF_FSED','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_DIF_FSED','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_DIF_FSED','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_DIF_FSED','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','021','DIF_FSED_PARTIERETRO',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_DIF_FSED','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_DIF_FSED','RD','SELECT','024',NULL,'DIF_FSED','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED_RETRO','RD','SELECT','024',NULL,'DIF_FSED_PARTIERETRO','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_DIF_FSED_RETRO','RD','SELECT','025',NULL,'DIF_FSED_PARTIERETRO','PERIODE','6',0,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_DIF_FSED','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',' TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','/*+ FULL(DIF_FSED_PARTIERETRO)*/ TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CODEOP',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CODEOP',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CLE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CLE',NULL
'29_30_DIF_FSED','RD','FROM_WITH','001',NULL,'DAC',NULL,NULL,NULL,NULL,'WITH DAC AS (select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') group by C.MATRIC,C.PACMAT,DACH.PAIEZAD)',NULL
'29_30_DIF_FSED','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED',NULL
'29_30_DIF_FSED_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO',NULL
'29_30_DIF_FSED','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_DIF_FSED','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'PAIEZAD,ELEM,CLE,CODEOP,OCC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','001',NULL,'TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','004',NULL,'TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','007',NULL,'TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','009',NULL,'TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','011',NULL,'TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','012',NULL,'TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','019',NULL,'TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','020',NULL,'TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','021',NULL,'TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','022',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','023',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','024',NULL,'TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','SELECT','025',NULL,'TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ELEMENTS_PAIE.ORIGINE is null or TGE_ELEMENTS_PAIE.ORIGINE = ''T'' or TGE_ELEMENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT is not null) ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_ELEMENTS_PAIE.ACTION_RETRO is null ',NULL
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' AND TGE_ELEMENTS_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=tge_elements_paie.idpacmat) AND TGE_ELEMENTS_PAIE.ACTION_RETRO is not null ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'309','RD','SELECT','001',NULL,'MAJELEM','PAC','6','0','FALSE',NULL,NULL
'309','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'309','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','004',NULL,'MAJELEM','MATPAIE','8','0','FALSE',NULL,NULL
'309','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'309','RD','SELECT','007',NULL,'MAJELEM','NUMERO','4','0','FALSE',NULL,NULL
'309','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','009',NULL,'MAJELEM','INDICATI','16',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','011',NULL,'MAJELEM','SENS','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','012',NULL,'MAJELEM','INFORMAT','40',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','015',NULL,NULL,NULL,'76',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','016',NULL,'MAJELEM','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'309','RD','SELECT','017',NULL,'MAJELEM','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'309','RD','SELECT','018',NULL,'MAJELEM','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'309','RD','SELECT','019',NULL,'MAJELEM','CODR','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','020','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','021',NULL,'MAJELEM','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'309','RD','SELECT','022',NULL,'MAJELEM','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'309','RD','SELECT','023',NULL,'MAJELEM','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'309','RD','SELECT','024',NULL,'MAJELEM','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','026','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','030','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM',NULL
'309','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'309_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'309','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'309_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(MAJELEM.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'309_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT ',NULL
'309','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'309_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'309','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.MATRICUL,MAJELEM.NUMERO',NULL
'30_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'30_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'30_SIMULATION_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'30_SIMULATION_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'30_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'30_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'30_SIMULATION_PAIE','RD','SELECT','021',NULL,'SIMU_TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'30_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'30_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'30_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'30_SIMULATION_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','SIMU_TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'30_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'30_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE',NULL
'30_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'30_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'30_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'30_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'40','RD','SELECT','001',NULL,'TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','004',NULL,'TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','007',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','012',NULL,'TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','016',NULL,'TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40','RD','SELECT','017',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','018',NULL,'TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40','RD','SELECT','019',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','020',NULL,'TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','022',NULL,'TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40','RD','SELECT','023',NULL,'TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40','RD','SELECT','029',NULL,'TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','031',NULL,'TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','032',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40','RD','SELECT','033',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40','RD','SELECT','034',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','035',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'40_RETRO','RD','SELECT','035',NULL,'TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','037',NULL,'TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'/*+ LEADING(TGE_INCIDENTS_PAIE) */  TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'40','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'40','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'40','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'40','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'40','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'40','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') @@@OPERATEUR_RETRO@@@ TGE_REF_PAC.PERIODEENCOURS and TGE_INCIDENTS_PAIE.ACTION_RETRO is null ',NULL
'40_RETRO','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,' and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_INCIDENTS_PAIE.idpacmat) and NVL(TGE_INCIDENTS_PAIE.DERNIER_CODE_OPE,''M'')!=''S'' ',NULL
'40','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE = TGE_REF_PAC.PERIODEENCOURS',NULL
'40_RETRO','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'40','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'40','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET <= TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40_RETRO','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'40','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE @@@OPERATEUR_RETRO@@@ (select PERIODEENCOURS from tge_ref_pac where NUMPAC = @@@NUMPAC@@@) ',NULL
'40_RETRO','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE in (SELECT periode_retro FROM gap_trt_mois_retro g WHERE id_trt =@@@ID_TRT@@@ and G.NUMPAC=TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC and G.pacmat=TGE_PERIODE_RECUEIL_PAIEZAD.pacmat) ',NULL
'40','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'409','RD','SELECT','001',NULL,'POINTAGE','PAC','6','0','FALSE',NULL,NULL
'409','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'409','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','004',NULL,'POINTAGE','MATPAIE','8','0','FALSE',NULL,NULL
'409','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'409','RD','SELECT','007',NULL,'POINTAGE','PTJDEB','8',NULL,'FALSE','TO_CHAR(PTJDEB,''YYYYMMDD'')',NULL
'409','RD','SELECT','008',NULL,'POINTAGE','PTJFIN','8',NULL,'FALSE','TO_CHAR(PTJFIN,''YYYYMMDD'')',NULL
'409','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','016',NULL,'POINTAGE','PTJHT','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_TRAVAILLEES'
'409','RD','SELECT','017',NULL,'POINTAGE','PTJHT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','018',NULL,'POINTAGE','PTJHI','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_INCIDENT'
'409','RD','SELECT','019',NULL,'POINTAGE','PTJHI','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','020',NULL,'POINTAGE','PTJCI','5',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','022',NULL,'POINTAGE','IMP','18',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','023',NULL,'POINTAGE','DOMIMP','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','024',NULL,'POINTAGE','REF','6',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','025',NULL,'POINTAGE','DOMREF','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','027',NULL,'POINTAGE','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'409','RD','SELECT','028',NULL,'POINTAGE','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'409','RD','SELECT','029',NULL,'POINTAGE','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'409','RD','SELECT','030',NULL,'POINTAGE','CODR','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','031','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','032',NULL,'POINTAGE','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'409','RD','SELECT','033',NULL,'POINTAGE','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'409','RD','SELECT','034',NULL,'POINTAGE','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'409','RD','SELECT','035',NULL,'POINTAGE','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','037','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','041','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as TYPE_IP_FROM_TABLE',NULL
'409','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as CODE_IP_FROM_TABLE',NULL
'409','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE',NULL
'409','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'409_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'409','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'409_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(POINTAGE.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'409_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'409','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'409_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'409','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.MATRICUL',NULL
'40_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40_SIMULATION_PAIE','RD','SELECT','017',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(SIMU_TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN SIMU_TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40_SIMULATION_PAIE','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40_SIMULATION_PAIE','RD','SELECT','029',NULL,'SIMU_TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','037',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE',NULL
'40_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'50','RD','SELECT','001',NULL,'TGE_IMPUTATIONS','NUMPAC','6','0','FALSE',NULL,NULL
'50','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'50','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','004',NULL,'TGE_IMPUTATIONS','PAIEZAD','8','0','TRUE',NULL,NULL
'50','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','007',NULL,'TGE_IMPUTATIONS','NB_UNITE','15','0','TRUE',NULL,'FORMATAGE_NBRE_IMPUTATION'
'50','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','009',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','011',NULL,'TGE_IMPUTATIONS','IMPUTATION','18',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','015',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','016',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'50','RD','SELECT','017',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'50','RD','SELECT','018',NULL,'TGE_IMPUTATIONS','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'50','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','020',NULL,'TGE_IMPUTATIONS','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','021',NULL,'TGE_IMPUTATIONS','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'50','RD','SELECT','022',NULL,'TGE_IMPUTATIONS','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'50','RD','SELECT','023',NULL,'TGE_IMPUTATIONS','PERIODE','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'50','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'50','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','026',NULL,'TGE_IMPUTATIONS','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'50','RD','SELECT','030',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'50','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'50','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'50','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'50','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS',NULL
'50','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS.NUMPAC = @@@NUMPAC@@@',NULL
'50','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PAIEZAD = DAC.PAIEZAD',NULL
'50','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.DERNIER_CODE_OPE <> ''S''',NULL
'50','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_IMPUTATIONS.ORIGINE is null or TGE_IMPUTATIONS.ORIGINE = ''T'' or TGE_IMPUTATIONS.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' ))))',NULL
'50','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PERIODE <= @@@PERIODE_PAIE@@@',NULL
'50','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'509','RD','SELECT','001',NULL,'MAJIMPU','PAC','6','0','FALSE',NULL,NULL
'509','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'509','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','004',NULL,'MAJIMPU','MATPAIE','8','0','FALSE',NULL,NULL
'509','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'509','RD','SELECT','007',NULL,'MAJIMPU','NOMBRE','15','0','FALSE',NULL,NULL
'509','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','009',NULL,'MAJIMPU','CODEUTIL','3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','011',NULL,'MAJIMPU','IMPUTATI','18',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','014',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','015',NULL,'MAJIMPU','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'509','RD','SELECT','016',NULL,'MAJIMPU','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'509','RD','SELECT','017',NULL,'MAJIMPU','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'509','RD','SELECT','018',NULL,'MAJIMPU','CODR','1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','019','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','020',NULL,'MAJIMPU','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'509','RD','SELECT','021',NULL,'MAJIMPU','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'509','RD','SELECT','022',NULL,'MAJIMPU','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'509','RD','SELECT','023',NULL,'MAJIMPU','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'509','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','025','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','026',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','028','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','029',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'509','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU',NULL
'509','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'509','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'509','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'509','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'509','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'509','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.MATRICUL',NULL
'60','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'60_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'60','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'60','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'60','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'60','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'60_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'609','RD','SELECT','001',NULL,'RUBDV','PAC','6','0','FALSE',NULL,NULL
'609','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,'FORMATAGE_NUMERO_CARTE_609'
'609','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','004',NULL,'RUBDV','MATPAIE','8','0','FALSE',NULL,NULL
'609','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'609','RD','SELECT','007',NULL,'RUBDV','RUBCOD','4','0','FALSE',NULL,NULL
'609','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','009',NULL,'RUBDV','RUBMTS','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'609','RD','SELECT','010',NULL,'RUBDV','RUBMTS','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','011',NULL,'RUBDV','RUBNBR','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'609','RD','SELECT','012',NULL,'RUBDV','RUBNBR','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','013',NULL,'RUBDV','RUBTAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'609','RD','SELECT','014',NULL,'RUBDV','RUBTAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','015',NULL,'RUBDV','RUBPCT','6',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','016',NULL,'RUBDV','RUBDOM','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','018',NULL,'RUBDV','RUBSIGNE','1',NULL,'FALSE',NULL,'FORMATAGE_RUBSIGNE'
'609','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','020',NULL,'RUBDV','RUBIMPU','18',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','022',NULL,NULL,NULL,'10',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','023',NULL,NULL,NULL,'55',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','024',NULL,'RUBDV','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'609','RD','SELECT','025',NULL,'RUBDV','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'609','RD','SELECT','026',NULL,'RUBDV','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'609','RD','SELECT','027',NULL,'RUBDV','CODR','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','028','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','029',NULL,'RUBDV','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'609','RD','SELECT','030',NULL,'RUBDV','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'609','RD','SELECT','031',NULL,'RUBDV','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'609','RD','SELECT','032',NULL,'RUBDV','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'609','RD','SELECT','033',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','034','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','035',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','036',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','037',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','039','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','040',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'609','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV',NULL
'609','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'609_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'609','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'609_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO =  TO_CHAR(TO_DATE(RUBDV.PERIODE,''MMYYYY''),''YYYYMM'') ',NULL
'609','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'609_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'609','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'609_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'609','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.MATRICUL,RUBDV.RUBCOD',NULL
'60_ABSENCES','RD','SELECT','001',NULL,'TGE_ABSENCES','NUMPAC','6','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_ABSENCES','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','007',NULL,'TGE_REF_PRE','RUB_ECHANGE','4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','008',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','009',NULL,'TGE_ABSENCES','DUREE_CALC','15','0','TRUE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_ABSENCES','RD','SELECT','010',NULL,'TGE_ABSENCES','TEMOIN_DUREE_CALC','1',NULL,'FALSE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','VALEUR_CONDITIONEE(NULL;0;1)'
'60_ABSENCES','RD','SELECT','011',NULL,NULL,NULL,'110',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','012',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_ABSENCES','RD','SELECT','013',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_ABSENCES','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','016',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'60_ABSENCES','RD','SELECT','017',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_ABSENCES','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_ABSENCES','RD','SELECT','019',NULL,'TGE_ABSENCES','DATE_DEBUT','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_ABSENCES','RD','SELECT','020',NULL,'TGE_REF_PAC','PERIODEENCOURS','6',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'60_ABSENCES','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','022','TT',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','024',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_ABSENCES','RD','SELECT','026',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','027',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','distinct TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_ABSENCES','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_ABSENCES','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'60_ABSENCES','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'60_ABSENCES','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'60_ABSENCES','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'60_ABSENCES','RD','FROM','006',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.NUMPAC = TGE_REF_PRE.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'60_ABSENCES','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.ID = TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'60_ABSENCES','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.RUB_ECHANGE is not null',NULL
'60_ABSENCES','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'60_ABSENCES','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'60_ABSENCES','RD','WHERE','014',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') <= TGE_REF_PAC.PERIODEENCOURS',NULL
'60_ABSENCES','RD','WHERE','015',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'60_ABSENCES','RD','WHERE','016',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'60_ABSENCES','RD','WHERE','017',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'60_ABSENCES','RD','WHERE','018',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'60_ABSENCES','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_REF_PRE.RUB_ECHANGE',NULL
'60_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'60_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'60_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','004',NULL,'TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','027',NULL,'TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'70_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'70','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'70','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'70','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'70_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'FALSE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','027',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'70_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'70_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'99','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'99','RD','SELECT','002','99',NULL,NULL,'2','0','FALSE',NULL,NULL
'99','RD','SELECT','003',NULL,NULL,NULL,'12',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','004',NULL,NULL,NULL,'7','0','TRUE',NULL,'FORMATAGE_NBRE_LIGNE'
'99','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','006',NULL,NULL,NULL,'8','0','TRUE',NULL,'FORMATAGE_NBRE_CARACTERE'
'99','RD','SELECT','007',NULL,NULL,NULL,'204',NULL,'FALSE',NULL,NULL
'99','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'99','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','007','££££',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'ANNULATION','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'ANNULATION_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ), TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS(SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt = @@@ID_TRT@@@)SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,RETRO.PERIODE_RETRO AS PERIODE, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,TABLE_RETRO RETRO WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND RETRO.NUMPAC =C.NUMPAC  AND RETRO.PACMAT =C.PACMAT AND to_date(RETRO.PERIODE_RETRO,''yyyymm'') >= trunc(DACS.dsdsc,''month'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ,RETRO.PERIODE_RETRO) DAC',NULL'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and DAC.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC=@@@NUMPAC@@@)',NULL
'ANNULATION','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','001',NULL,'DELETED_PAIEZAD','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','004',NULL,'DELETED_PAIEZAD','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','007','$$$$',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','017',NULL,'DELETED_PAIEZAD','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','018',NULL,'DELETED_PAIEZAD','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC=@@@NUMPAC@@@ and (TGE_REF_PAC.MPE is not null and TGE_REF_PAC.MPE <> ''N'')',NULL
'ANNULATION_PERIODE_EMPLOI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.PAIEZAD',NULL
'IJEDI','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'IJEDI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','007','T653',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','009',NULL,'TGE_ABSENCES','DATE_DEBUT','16',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||MOTIF',NULL
'IJEDI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','012',NULL,'TGE_ABSENCES','DATE_FIN','40',NULL,'FALSE','least(TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD''),nvl(TO_CHAR(DAC.DATE_SORTIE_SIT_BO,''YYYYMMDD''),''20991231''))',NULL
'IJEDI','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'IJEDI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'IJEDI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'IJEDI','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'IJEDI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','021',NULL,'TGE_ABSENCES','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','022',NULL,'TGE_ABSENCES','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'IJEDI','RD','SELECT','023',NULL,'TGE_ABSENCES','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'IJEDI','RD','SELECT','024',NULL,'TGE_REF_PAC','PERIODEENCOURS','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''','FORMATAGE_DATE_EFFET'
'IJEDI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'IJEDI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'IJEDI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'IJEDI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'IJEDI','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'IJEDI','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'IJEDI','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.MOTIF',NULL
'IJEDI','RD','SELECT_EN_PLUS','005',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.ID',NULL
'IJEDI','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'IJEDI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'IJEDI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'IJEDI','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'IJEDI','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'IJEDI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.IJEDI in (''M'',''E'')',NULL
'IJEDI','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'IJEDI','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'IJEDI','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.MOTIF_ABS is not null',NULL
'IJEDI','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.OPTION_CONSERV_HISTO = ''A''',NULL
'IJEDI','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.ELEMENT = ''T653''',NULL
'IJEDI','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ABSENCES.DATE_DEBUT <= DAC.DSDCN and (DAC.DSDCN is null or (TGE_ABSENCES.DATE_FIN >= DAC.DSDCN))) or (TGE_ABSENCES.DATE_DEBUT >= DAC.DSDCN and (DAC.DATE_SORTIE_SIT_BO is null or (TGE_ABSENCES.DATE_DEBUT <= DAC.DATE_SORTIE_SIT_BO))))',NULL
'IJEDI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'W566','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'W566','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'W566','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','007','W566',NULL,NULL,'4','0','FALSE',NULL,NULL
'W566','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','012','200',NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','013','N',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'W566','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'W566','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'W566','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'W566','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'W566_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'W566_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'W566','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'W566','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'W566','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'W566_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'') mois from dual connect by TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'' )< @@@PERIODE_PAIE@@@),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS (SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois as periode, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND D.mois >=(select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ) AND D.mois >=TO_CHAR(DACS.dsdsc,''YYYYMM'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois ) DAC',NULL
'W566','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'W566','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'W566','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'WL70','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'WL70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'WL70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','007','WL70',NULL,NULL,'4','0','FALSE',NULL,NULL
'WL70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','012',NULL,'DAC','DTRETRO','40',NULL,'FALSE',NULL,NULL
'WL70_RETRO','RD','SELECT','012',NULL,'DAC','DSDSC','40',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'WL70','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'WL70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'WL70','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'WL70','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'WL70','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'WL70','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'WL70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC, to_char(D.mois,''yyyymm'') as periode,  MIN(DACS.DSDSC) DSDSC, MAX(DACS.DSFSC) DSFSC, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month''),''ddmmyyyy'') DTRETRO   FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'')  AND DACS.PACMAT= R.PACMAT AND DACS.DSDSC <= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm'') as periode,  TO_CHAR(MIN(DACS.DSDSC),''ddmmyyyy'') DSDSC, MAX(DACS.DSFSC) DSFSC,MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(MIN(DACS.DSDSC),''yyyymm'') MOISCOMP FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT AND DACS.PACMAT= R.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND DACS.DSDSC >= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND DACS.DSFSC >= LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')) AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'WL70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'WL70_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@ AND DAC.PERIODE >=DAC.MOISCOMP',NULL
'WL70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO  where NUMPAC='*' and ELEMENT = 'AB73'
'*','AB73','**','NIVFOR_APP','DIC_ADM_CONTRAT',null,null,null,null,null,'N'
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO  where NUMPAC='*' and ELEMENT = 'AB76'
'*','AB76','**','MDE','DIC_ADM_CONTRAT_HISTO',null,null,null,null,null,'N'
##
TGE_REF_MAPDO_PAIEMENT_TIERS
=SQL=
DECLARE
  listeElements TAB_VARCHAR:=TAB_VARCHAR();
BEGIN
  listeElements.extend();
  listeElements(listeElements.last):='B521';
  listeElements.extend();
  listeElements(listeElements.last):='A715';
  listeElements.extend();
  listeElements(listeElements.last):='B961';
  listeElements.extend();
  listeElements(listeElements.last):='A166';
  FOR i IN listeElements.first..listeElements.last LOOP
    FOR n IN (SELECT NUMPAC FROM TGE_REF_PAC P WHERE NOT EXISTS (SELECT 1 FROM TGE_REF_MAPDO M WHERE M.NUMPAC=P.NUMPAC AND M.ELEMENT=listeElements(i))) LOOP
      -- On duplique la ligne ayant NUMPAC = * , ELEMENT = <Element courant> et TABLEGXP != DIC_PENSION_ALIM (dans le cas où on passe le script une 2nde fois) sur un 'vrai' PAC
      DUPLIQUE_DONNEES('TGE_REF_MAPDO','NUMPAC=''*'' AND ELEMENT='''||listeElements(i)||''' AND NOT TABLEGXP=''DIC_PENSION_ALIM''','NUMPAC',''''||n.NUMPAC||'''','','','','','','','','','','','','','','','','');
    END LOOP;
  END LOOP;
END;
##
TGE_REF_MAPDO (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP)
==
DELETE FROM TGE_REF_MAPDO WHERE NUMPAC = '*' and ELEMENT IN ('A166','A715','B422','B423','B424','B521','B961','BB72','BB73','BB74','BB75','BB76','BB77','BB78','BB79','BB80','BB81','BB82','BB83','BB84','BB85','BB86','BB87','BB88','BB89','BB90','BB91','BB92','BB93','BB94','BB95','BB96')
'*','A166','**','RD_DSDPEN_PENS2','DIC_PENSION_ALIM'
'*','A715','**','RD_DSDPEN_PENS1','DIC_PENSION_ALIM'
'*','B422','**','RD_IBAPA_PENS1','DIC_PENSION_ALIM'
'*','B423','**','RD_IBAPA_PENS2','DIC_PENSION_ALIM'
'*','B424','**','RD_IBAPA_PENS3','DIC_PENSION_ALIM'
'*','B521','**','RD_MNTPEN_PENS1','DIC_PENSION_ALIM'
'*','B961','**','RD_MNTPEN_PENS2','DIC_PENSION_ALIM'
'*','BB72','**','REF_EXTERNE_OPPOS','DIC_PENSION_ALIM'
'*','BB73','**','TIT_COMPTE_OPPOS','DIC_PENSION_ALIM'
'*','BB74','**','DOMICILIATION_BANCAIRE','DIC_PENSION_ALIM'
'*','BB75','**','CODE_PAYS_IBAN','DIC_PENSION_ALIM'
'*','BB76','**','CLE_IBAN','DIC_PENSION_ALIM'
'*','BB77','**','CODES_IBAN','DIC_PENSION_ALIM'
'*','BB78','**','BIC_OPPOSITION','DIC_PENSION_ALIM'
'*','BB79','**','RD_REF_EXT_PENS1','DIC_PENSION_ALIM'
'*','BB80','**','RD_TITBQE_PENS1','DIC_PENSION_ALIM'
'*','BB81','**','RD_DOMBQE_PENS1','DIC_PENSION_ALIM'
'*','BB82','**','RD_IBACC_PENS1','DIC_PENSION_ALIM'
'*','BB83','**','RD_CODES_IBAN_PENS1','DIC_PENSION_ALIM'
'*','BB84','**','RD_BIC_PENS1','DIC_PENSION_ALIM'
'*','BB85','**','RD_REF_EXT_PENS2','DIC_PENSION_ALIM'
'*','BB86','**','RD_TITBQE_PENS2','DIC_PENSION_ALIM'
'*','BB87','**','RD_DOMBQE_PENS2','DIC_PENSION_ALIM'
'*','BB88','**','RD_IBACC_PENS2','DIC_PENSION_ALIM'
'*','BB89','**','RD_CODES_IBAN_PENS2','DIC_PENSION_ALIM'
'*','BB90','**','RD_BIC_PENS2','DIC_PENSION_ALIM'
'*','BB91','**','RD_REF_EXT_PENS3','DIC_PENSION_ALIM'
'*','BB92','**','RD_TITBQE_PENS3','DIC_PENSION_ALIM'
'*','BB93','**','RD_DOMBQE_PENS3','DIC_PENSION_ALIM'
'*','BB94','**','RD_IBACC_PENS3','DIC_PENSION_ALIM'
'*','BB95','**','RD_CODES_IBAN_PENS3','DIC_PENSION_ALIM'
'*','BB96','**','RD_BIC_PENS3','DIC_PENSION_ALIM'
##
TGE_REF_MAPTA
==
DELETE FROM TGE_REF_MAPTA WHERE NUMPAC = '*' and (ROWNUMBER = '181' OR TABLEPHY='DIC_PENSION_ALIM')
'*','181','DIC_PENSION_ALIM','AV','DIC_PENSION_ALIM','A','AVPERS','00',NULL,NULL,NULL
##
TGE_REF_MAPVR
==
delete from TGE_REF_MAPVR where numpac = '*' and tablezadig = 'MDE' and CHAMPZADIG in ('A02','V01') and TABLEGXP = 'TGE_REF_MDE'
##
TGE_REF_MAPVR
==
Insert into TGE_REF_MAPVR (NUMPAC,TABLEZADIG,CHAMPZADIG,TABLEGXP,FICHIER,DONNEEGXP,TYPEGXP,LONGUEURGXP,NBDECIMALESGXP,FORMATDATEGXP,TABLETRANS,APPELEXIT,DONNEEGXP_FIN) values ('*','MDE','A02','TGE_REF_MDE',null,'CODE_MDE','A','2',null,null,null,null,null)
##
TGE_REF_MAPVR
==
Insert into TGE_REF_MAPVR (NUMPAC,TABLEZADIG,CHAMPZADIG,TABLEGXP,FICHIER,DONNEEGXP,TYPEGXP,LONGUEURGXP,NBDECIMALESGXP,FORMATDATEGXP,TABLETRANS,APPELEXIT,DONNEEGXP_FIN) values ('*','MDE','V01','TGE_REF_MDE',null,'LIBELLE_MDE','A','32',null,null,null,null,null)
##
TAG_CHARSET=@€éèç
##
TGE_REF_MDE
=SQL IFNOTEXIST=TGE_REF_MDE=
create table TGE_REF_MDE (CODE_MDE VARCHAR2(2) NOT NULL ENABLE,LIBELLE_MDE VARCHAR2(32) NOT NULL ENABLE, PRIMARY KEY(CODE_MDE))
##
TAG_CHARSET=@€éèç
##
ALERTE_TRIG_INACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' DISABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERT_TREE
==
DELETE FROM ALERT_TREE where ALERT_ID='SIGN_HRO01'
##
ALERT_TREE (ALERT_ID,ALERT_LEAF,ALERT_TITLE,ALERT_PARENT_ID,ALERT_ORDER)
'SIGN_HRO01','1','Alerte signataire absent de l''arbre',null,'10015'
##
ALERT_PROP
==
DELETE FROM ALERT_PROP where ALERT_ID ='SIGN_HRO01'
##
ALERT_PROP (ALERT_ID,ALERT_ORDER,ALERT_DESC,PAGE_REDIRECT,INDEX_SQL,ALERT_ACTIVATE,ALERT_WKF,SQL_SELECT,SQL_FROM,SQL_WHERE_1,SQL_WHERE_2,PEOPLE_ID,STR_ID,PACMAT_ID) 
'SIGN_HRO01','3','Cette alerte vous informe que des salariés sont identifiés comme signataire d''entité dans un arbre alors qu''ils ne sont plus présents',null,'SELECT STD_STRUC_ARBRE.CODE_ENTITE as C_1,STD_STRUC_ENTITE.LIBELLE as C_2,nvl(SECUMATRIC.MATRIC,ALERT_BATCH2.ID2) AS C_3, SECUMATRIC.NOM AS C_4,SECUMATRIC.PRENOM AS C_5 FROM ALERT_BATCH2 INNER JOIN STD_STRUC_ARBRE on STD_STRUC_ARBRE.CODE_ENTITE = ALERT_BATCH2.ID3 and TO_CHAR(SYSDATE,''yyyymmdd'') BETWEEN STD_STRUC_ARBRE.DATE_EFF AND STD_STRUC_ARBRE.DATE_FIN INNER JOIN STD_STRUC_ENTITE on STD_STRUC_ENTITE.CODE_ENTITE= ALERT_BATCH2.ID3 and TO_CHAR(SYSDATE,''yyyymmdd'') BETWEEN STD_STRUC_ENTITE.DATE_EFF AND STD_STRUC_ENTITE.DATE_FIN LEFT OUTER JOIN SECUMATRIC ON SECUMATRIC.MATRIC = ALERT_BATCH2.ID1 WHERE ALERT_BATCH2.LOGIN = $LOGIN AND ALERT_BATCH2.ALERT_ID = $ALERT order by SECUMATRIC.NOM, SECUMATRIC.PRENOM','1','0','$ALERT as ALERT_ID, c.REQUETEMATRIC AS ID1, a.AOID_SIGNATAIRE AS ID2, a.CODE_ENTITE as ID3, NULL as ID4, NULL as ID5, NULL as ID6','STD_STRUC_ARBRE a, sys_usr_config c','upper(c.login) =upper(a.aoid_signataire) AND TO_CHAR(SYSDATE,''yyyymmdd'') BETWEEN a.DATE_EFF AND a.DATE_FIN AND (  c.requetematric IN (SELECT MATRIC FROM SECUMATRIC WHERE DSFCN IS NOT NULL AND DSFCN<=TO_CHAR(SYSDATE,''yyyymmdd'') ) OR  ( (select nvl(datefinacces,''20991231'') from sys_usr_connu where login = a.aoid_signataire) < to_char(sysdate,''yyyymmdd'')))',null,'0','0','0'
##
ALERT_PROFILE
==
DELETE FROM ALERT_PROFILE where ALERT_ID = 'SIGN_HRO01'
##
ALERT_PROFILE (ALERT_ID,PROFILE_ORDER,PROFILE_ID)
'SIGN_HRO01','1','-2'
##
ALERT_IDX_TREE
==
DELETE FROM ALERT_IDX_TREE where ALERT_ID='SIGN_HRO01'
##
ALERT_IDX_TREE (ALERT_ID,IDX_COL_ID,IDX_COL_LEAF,IDX_COL_DESC,IDX_PARENT_ID,IDX_PARENT_COL_ID,IDX_COL_ORDER,IDX_COL_WIDTH)
'SIGN_HRO01','1525339671222','1','Code entité','SIGN_HRO01',null,'1','0'
'SIGN_HRO01','1525339712766','1','Libellé entité','SIGN_HRO01',null,'2','0'
'SIGN_HRO01','1525339724606','1','Matricule','SIGN_HRO01',null,'3','0'
'SIGN_HRO01','1525339736606','1','Nom','SIGN_HRO01',null,'4','0'
'SIGN_HRO01','1525339746453','1','Prénom','SIGN_HRO01',null,'5','0'
##
ALERT_REDIRECT
==
DELETE FROM ALERT_REDIRECT where ALERT_ID='SIGN_HRO01'
##
ALERT_REDIRECT (ALERT_ID,PAGE_ORDER,PAGE_URI)
'SIGN_HRO01','1','Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntites'
##
ALERTE_TRIG_ACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' ENABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERTE_TRIG_INACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' DISABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERT_TREE
==
DELETE FROM ALERT_TREE where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_TREE (ALERT_ID,ALERT_LEAF,ALERT_TITLE,ALERT_PARENT_ID,ALERT_ORDER)
'SIGN_HRO01','1','Signataire absent de l''arbre',NULL,'10015'
'SIGN_HRO02','1','Signataire absent de l''entreprise',NULL,'10017'
##
ALERT_PROP
==
DELETE FROM ALERT_PROP where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_PROP (ALERT_ID,ALERT_ORDER,ALERT_DESC,PAGE_REDIRECT,INDEX_SQL,ALERT_ACTIVATE,ALERT_WKF,SQL_SELECT,SQL_FROM,SQL_WHERE_1,SQL_WHERE_2,PEOPLE_ID,STR_ID,PACMAT_ID)
'SIGN_HRO01','3','Cette alerte vous informe que des salariés sont identifiés comme signataire d''entité dans un arbre alors qu''ils ne sont plus présents',NULL,'SELECT ID1 AS C_1,  ID2 AS  C_2,  ID3 AS  C_3,  ID4 AS  C_4, ID5 AS C_5, ID6 AS C_6¿FROM alert_batch2 ¿WHERE ALERT_BATCH2.LOGIN = $LOGIN AND ALERT_BATCH2.ALERT_ID = $ALERT ','1','0','$ALERT as ALERT_ID,  arb.code_entite AS ID1,  ev.libelle_entite AS ID2,  sig.titre AS ID3,  sig.nom AS ID4,  sig.prenom AS ID5,  sig.fonction AS ID6','std_struc_arbre arb, std_struc_entite_view ev, sign_signataire sig, sys_usr_config con, sys_usr_connu uc, secumatric secu¿',' ev.code_entite = arb.code_entite AND sig.aoid = arb.aoid_signataire AND ¿con.login = sig.aoid and secu.matric(+) = con.REQUETEMATRIC AND uc.login(+) = sig.aoid AND ¿(  secu.DSFCN IS NOT NULL AND secu.DSFCN<TO_CHAR(SYSDATE,''yyyymmdd'') OR ¿   TO_CHAR(TO_DATE(uc.Datefinacces,''dd.mm.yyyy''),''yyyymmdd'') < TO_CHAR(SYSDATE,''yyyymmdd'')¿)',NULL,'0','0','0'
'SIGN_HRO02','3','Cette alerte vous informe que des salariés sont signataires alors qu''ils ne sont plus présents',NULL,'SELECT ID1 AS C_1,  ID2 AS  C_2,  ID3 AS  C_3,  ID4 AS  C_4 ¿FROM alert_batch2 ¿WHERE ALERT_BATCH2.LOGIN = $LOGIN AND ALERT_BATCH2.ALERT_ID = $ALERT ¿¿','1','0','$ALERT as ALERT_ID,  sig.titre AS ID1,  sig.nom AS ID2,  sig.prenom AS ID3,  sig.fonction AS ID4, null AS ID5, null AS ID6','sign_signataire sig, sys_usr_config con, sys_usr_connu uc, secumatric secu','con.login = sig.aoid and secu.matric(+) = con.REQUETEMATRIC AND uc.login = sig.aoid AND ¿  (  secu.DSFCN IS NOT NULL AND secu.DSFCN<TO_CHAR(SYSDATE,''yyyymmdd'') OR¿  uc.Datefinacces IS NOT NULL AND TO_CHAR(TO_DATE(uc.Datefinacces,''dd.mm.yyyy''),''yyyymmdd'') < TO_CHAR(SYSDATE,''yyyymmdd''))¿',NULL,'0','0','0'
##
ALERT_PROFILE
==
DELETE FROM ALERT_PROFILE where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_PROFILE (ALERT_ID,PROFILE_ORDER,PROFILE_ID)
'SIGN_HRO01','1','-2'
'SIGN_HRO02','1','-2'
##
ALERT_IDX_TREE
==
DELETE FROM ALERT_IDX_TREE where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_IDX_TREE (ALERT_ID,IDX_COL_ID,IDX_COL_LEAF,IDX_COL_DESC,IDX_PARENT_ID,IDX_PARENT_COL_ID,IDX_COL_ORDER,IDX_COL_WIDTH)
'SIGN_HRO01','1525339671222','1','Code entité','SIGN_HRO01',NULL,'1','0'
'SIGN_HRO01','1525339712766','1','Libellé entité','SIGN_HRO01',NULL,'2','0'
'SIGN_HRO01','1525339736606','1','Nom','SIGN_HRO01',NULL,'4','0'
'SIGN_HRO01','1525339746453','1','Prénom','SIGN_HRO01',NULL,'5','0'
'SIGN_HRO01','1527005367861','1','titre','SIGN_HRO01',NULL,'3','0'
'SIGN_HRO01','1527008928252','1','Fonction','SIGN_HRO01',NULL,'6','0'
'SIGN_HRO02','1525339736606','1','Nom','SIGN_HRO02',NULL,'2','0'
'SIGN_HRO02','1525339746453','1','Prénom','SIGN_HRO02',NULL,'3','0'
'SIGN_HRO02','1527005367861','1','titre','SIGN_HRO02',NULL,'1','0'
'SIGN_HRO02','1527062977283','1','Fonction','SIGN_HRO02',NULL,'4','0'
##
ALERT_REDIRECT
==
DELETE FROM ALERT_REDIRECT where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_REDIRECT (ALERT_ID,PAGE_ORDER,PAGE_URI)
'SIGN_HRO01','1','Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntites'
'SIGN_HRO02','1','Ext.adp.Modules.Signature.SignataireMVVM'
##
ALERTE_TRIG_ACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' ENABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERTE_TRIG_INACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' DISABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERT_TREE
==
delete from ALERT_TREE where ALERT_ID = 'SIGN_HRO01'
##
ALERT_TREE (ALERT_ID,ALERT_LEAF,ALERT_TITLE,ALERT_PARENT_ID,ALERT_ORDER)
'SIGN_HRO01','1','Signataires absents des groupe de signataires définis dans l''arbre',null,'10015'
##
ALERT_PROP
==
delete from ALERT_PROP where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_PROP (ALERT_ID,ALERT_ORDER,ALERT_DESC,PAGE_REDIRECT,INDEX_SQL,ALERT_ACTIVATE,ALERT_WKF,SQL_SELECT,SQL_FROM,SQL_WHERE_1,SQL_WHERE_2,PEOPLE_ID,STR_ID,PACMAT_ID) 
'SIGN_HRO01','3','Cette alerte vous informe que des salariés sont identifiés comme signataire d''un groupe de signataires pour une entité dans un arbre alors qu''ils ne sont plus présents',NULL,'select ¿   B.ID1 as C_1,¿   EV.LIBELLE_ENTITE as C_2,¿   B.ID2 AS C_3,¿   SIG.NOM AS C_4,¿   SIG.PRENOM as C_5,¿   SIG.FONCTION as C_6¿from ALERT_BATCH2 B¿   inner join STD_STRUC_ENTITE_VIEW EV on EV.CODE_ENTITE = B.ID1¿   left outer join SIGN_SIGNATAIRE SIG on SIG.AOID = B.ID3¿where¿  B.LOGIN  = $LOGIN¿  and B.ALERT_ID = $ALERT¿order by SIG.NOM, SIG.PRENOM','1','0','$ALERT as ALERT_ID,  ARB.CODE_ENTITE as ID1, ARB.GROUPE_SIGNATAIRES as ID2, GS.AOID as ID3, null as ID4, null as ID5, null as ID6','STD_STRUC_ARBRE ARB, SIGN_GROUPE_SIGNATAIRES GS, SYS_USR_CONFIG CON, SYS_USR_CONNU UC, SECUMATRIC SECU','ARB.GROUPE_SIGNATAIRES = GS.GROUPE_SIGNATAIRES ¿and CON.LOGIN = GS.AOID and SECU.MATRIC(+) = CON.REQUETEMATRIC and UC.LOGIN(+) = GS.AOID ¿and (SECU.DSFCN is not null and SECU.DSFCN < to_char(sysdate, ''yyyymmdd'') ¿or to_char(to_date(UC.DATEFINACCES, ''dd.mm.yyyy''), ''yyyymmdd'') < to_char(sysdate, ''yyyymmdd''))',NULL,'0','0','0'
'SIGN_HRO02','3','Cette alerte vous informe que des salariés sont signataires alors qu''ils ne sont plus présents',NULL,'select SIG.TITRE as C_1,  SIG.NOM as C_2,  SIG.PRENOM as C_3,  SIG.FONCTION as C_4 ¿from ALERT_BATCH2 B ¿   inner join SIGN_SIGNATAIRE SIG on SIG.AOID = B.ID1 ¿where B.LOGIN = $LOGIN and B.ALERT_ID = $ALERT ','1','0','$ALERT as ALERT_ID,  SIG.AOID as ID1,  null as ID2, null as ID3,  null as ID4, null as ID5, null as ID6','SIGN_SIGNATAIRE SIG, SYS_USR_CONFIG CON, SYS_USR_CONNU UC, SECUMATRIC SECU','CON.LOGIN = SIG.AOID and SECU.MATRIC(+) = CON.REQUETEMATRIC and UC.LOGIN = SIG.AOID ¿and (SECU.DSFCN is not null and SECU.DSFCN < to_char(sysdate, ''yyyymmdd'') ¿or to_char(to_date(UC.DATEFINACCES, ''dd.mm.yyyy''), ''yyyymmdd'') < to_char(sysdate, ''yyyymmdd'')) ¿',NULL,'0','0','0'
##
ALERT_IDX_TREE
==
delete from ALERT_IDX_TREE where ALERT_ID in ('SIGN_HRO01', 'SIGN_HRO02')
##
ALERT_IDX_TREE (ALERT_ID,IDX_COL_ID,IDX_COL_LEAF,IDX_COL_DESC,IDX_PARENT_ID,IDX_PARENT_COL_ID,IDX_COL_ORDER,IDX_COL_WIDTH)
'SIGN_HRO01','1525339671222','1','Code entité','SIGN_HRO01',null,'1','0'
'SIGN_HRO01','1525339712766','1','Libellé entité','SIGN_HRO01',null,'2','0'
'SIGN_HRO01','1525339724606','1','Groupe de signataires','SIGN_HRO01',null,'3','0'
'SIGN_HRO01','1525339736606','1','Nom','SIGN_HRO01',null,'4','0'
'SIGN_HRO01','1525339746453','1','Prénom','SIGN_HRO01',null,'5','0'
'SIGN_HRO01','1527008928252','1','Fonction','SIGN_HRO01',null,'6','0'
'SIGN_HRO02','1527005367861','1','Titre','SIGN_HRO02',NULL,'1','0'
'SIGN_HRO02','1525339736606','1','Nom','SIGN_HRO02',NULL,'2','0'
'SIGN_HRO02','1525339746453','1','Prénom','SIGN_HRO02',NULL,'3','0'
'SIGN_HRO02','1527062977283','1','Fonction','SIGN_HRO02',NULL,'4','0'
##
ALERT_REDIRECT
==
delete from ALERT_REDIRECT where ALERT_ID='SIGN_HRO01'
##
ALERT_REDIRECT (ALERT_ID,PAGE_ORDER,PAGE_URI)
'SIGN_HRO01','1','Ext.adp.Modules.Signature.GroupeSignataires'
##
ALERTE_TRIG_ACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' ENABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
META_DONNEE_ECRAN
==
delete from META_DONNEE_ECRAN where NOM_DONNEE = 'NIVFOR_APP' and COMPANY_ID = '*' and NOM_PAGE in ('*','WKF_MODIF_CNT_ECR3')
'*','NIVFOR_APP','*','Niveau de diplôme préparé','R_AFF_NIVFOR_APP','text','TAB_RD_NIV_FORMATION','1','Code,Libellé','NIVFOR_APP,#OUI',null,'N',null,null,null,null,null,null,null,'NIVFOR_APP_*_OBLIG',null,null,null,'N','N','N','0','0'
'*','NIVFOR_APP','WKF_MODIF_CNT_ECR3','Niveau formation le plus élevé obtenu','R_AFF_NIVFOR_APP','text','TAB_RD_NIV_FORMATION','1','Code,Libellé','NIVFOR,#OUI',null,'N',null,null,null,null,null,null,null,'NIVFOR_APP_*_OBLIG',null,null,null,'N','N','N','0','0'
##
META_DONNEE_GENERALE
==
delete from META_DONNEE_GENERALE where NOM_DONNEE = 'NIVFOR_APP' and COMPANY_ID = '*'
'*','NIVFOR_APP','Niveau de diplôme préparé','DIC_ADM_CONTRAT','X','2',null,null,null,null,'GZ','O','1271','943',null,null,null,null,'N'
##
META_GROUPE_DONNEES
==
delete from META_GROUPE_DONNEES where ID_GROUPE = 'NIVEAU_FOR_PREP' and COMPANY_ID = '*' and NOM_DONNEE = 'NIVFOR_APP'
'*','NIVEAU_FOR_PREP','NIVFOR_APP','1',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null
##
META_GROUPE_DONNEES_INFO
==
delete from META_GROUPE_DONNEES_INFO where ID_GROUPE = 'NIVEAU_FOR_PREP' and COMPANY_ID = '*'
'*','NIVEAU_FOR_PREP','AFF_NIVFOR_APP',null,null,'N',null,'943',null,'Niveau de formation préparé (pour apprentis)','Groupe pour donnée NIVFOR_APP dans onglet DSN avec affichage conditionnel',null
##
META_REGLEGESTION
==
delete from META_REGLEGESTION where ID_REGLEGESTION in ('AFF_NIVFOR_APP','NIVFOR_APP_*_OBLIG') and COMPANY_ID = '*'
'*','AFF_NIVFOR_APP','1',null,'DONNEE£ZT061µVALEUR£CAPµEQµDONNEE£ZT061µVALEUR£CDDµEQµDONNEE£ZT061µVALEUR£CDIµEQµ#OU#µDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#µ#OU#',null,null,'FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','1',null,'DONNEE£ZT061µVALEUR£CAPµEQ',null,null,'2','4'
'*','NIVFOR_APP_*_OBLIG','2',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'3','4'
'*','NIVFOR_APP_*_OBLIG','3','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','4',null,'DONNEE£ZT061µVALEUR£CDDµEQµDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#',null,null,'6','8'
'*','NIVFOR_APP_*_OBLIG','6',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'7','8'
'*','NIVFOR_APP_*_OBLIG','7','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','8',null,'DONNEE£ZT061µVALEUR£CDIµEQµDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#',null,null,'10','FIN'
'*','NIVFOR_APP_*_OBLIG','10',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'11','FIN'
'*','NIVFOR_APP_*_OBLIG','11','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
##
META_REGLEGESTION_DESC
==
delete from META_REGLEGESTION_DESC where ID_REGLEGESTION in ('AFF_NIVFOR_APP','NIVFOR_APP_*_OBLIG') and COMPANY_ID = '*'
'*','AFF_NIVFOR_APP','AFF','Affichage conditionnel du niveau de formation préparé (pour apprentis)',null,'943',null,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CAP","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDD","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDI","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.','C',null,'/*¿ * AFF_NIVFOR_APP :¿ * La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.¿ */¿¿if ((DIC_ADM_CONTRAT_HISTO.ZT061 == "CAP" || ((DIC_ADM_CONTRAT_HISTO.ZT061 == "CDD" || DIC_ADM_CONTRAT_HISTO.ZT061 == "CDI") && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)))) {¿}¿','La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.'
'*','NIVFOR_APP_*_OBLIG','CTL','Niveau de formation préparé obligatoire pour contrats apprentis',null,'943',null,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CAP","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDI","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le niveau de formation préparé par l''individu doit être renseignée pour les contrats d''apprentissage','N',null,'/*¿ * NIVFOR_APP_*_OBLIG :¿ * Le niveau de formation préparé par l''individu doit être renseignée pour les contrats d''apprentissage¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CAP") {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CDD" && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)) {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CDI" && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)) {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}','Conditions de valorisation du niveau de formation préparé par l''individu (pour CNT Apprentissage)'
##
REF_DONNEE_ECRAN
==
delete from REF_DONNEE_ECRAN where NOM_DONNEE = 'NIVFOR_APP' and COMPANY_ID = '*' and NOM_PAGE in ('*','WKF_MODIF_CNT_ECR3')
'*','NIVFOR_APP','*','Niveau de diplôme préparé','R_AFF_NIVFOR_APP','text','TAB_RD_NIV_FORMATION','1','Code,Libellé','NIVFOR_APP,#OUI',null,'N',null,null,null,null,null,null,null,'NIVFOR_APP_*_OBLIG',null,null,null,'N','N','N','0','0'
'*','NIVFOR_APP','WKF_MODIF_CNT_ECR3','Niveau formation le plus élevé obtenu','R_AFF_NIVFOR_APP','text','TAB_RD_NIV_FORMATION','1','Code,Libellé','NIVFOR,#OUI',null,'N',null,null,null,null,null,null,null,'NIVFOR_APP_*_OBLIG',null,null,null,'N','N','N','0','0'
##
REF_DONNEE_GENERALE
==
delete from REF_DONNEE_GENERALE where NOM_DONNEE = 'NIVFOR_APP' and COMPANY_ID = '*'
'*','NIVFOR_APP','Niveau de diplôme préparé','DIC_ADM_CONTRAT','X','2',null,null,null,null,'GZ','O',null,'943',null,null,null,null,'N'
##
REF_GROUPE_DONNEES
==
delete from REF_GROUPE_DONNEES where ID_GROUPE = 'NIVEAU_FOR_PREP' and COMPANY_ID = '*' and NOM_DONNEE = 'NIVFOR_APP'
'*','NIVEAU_FOR_PREP','NIVFOR_APP','1',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null
##
REF_GROUPE_DONNEES_INFO
==
delete from REF_GROUPE_DONNEES_INFO where ID_GROUPE = 'NIVEAU_FOR_PREP' and COMPANY_ID = '*'
'*','NIVEAU_FOR_PREP','AFF_NIVFOR_APP',null,null,'N',null,'943',null,'Niveau de formation préparé (pour apprentis)','Groupe pour donnée NIVFOR_APP dans onglet DSN avec affichage conditionnel',null
##
REF_REGLEGESTION
==
delete from REF_REGLEGESTION where ID_REGLEGESTION in ('AFF_NIVFOR_APP','NIVFOR_APP_*_OBLIG') and COMPANY_ID = '*'
'*','AFF_NIVFOR_APP','1',null,'DONNEE£ZT061µVALEUR£CAPµEQµDONNEE£ZT061µVALEUR£CDDµEQµDONNEE£ZT061µVALEUR£CDIµEQµ#OU#µDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#µ#OU#',null,null,'FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','1',null,'DONNEE£ZT061µVALEUR£CAPµEQ',null,null,'2','4'
'*','NIVFOR_APP_*_OBLIG','2',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'3','4'
'*','NIVFOR_APP_*_OBLIG','3','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','4',null,'DONNEE£ZT061µVALEUR£CDDµEQµDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#',null,null,'6','8'
'*','NIVFOR_APP_*_OBLIG','6',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'7','8'
'*','NIVFOR_APP_*_OBLIG','7','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
'*','NIVFOR_APP_*_OBLIG','8',null,'DONNEE£ZT061µVALEUR£CDIµEQµDONNEE£ZA700µVALEUR£20,64,65,81£µINµ#ET#',null,null,'10','FIN'
'*','NIVFOR_APP_*_OBLIG','10',null,'DONNEE£NIVFOR_APPµ@vide£µEQ',null,null,'11','FIN'
'*','NIVFOR_APP_*_OBLIG','11','££','ERR','CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP','£','FIN','FIN'
##
REF_REGLEGESTION_DESC
==
delete from REF_REGLEGESTION_DESC where ID_REGLEGESTION in ('AFF_NIVFOR_APP','NIVFOR_APP_*_OBLIG') and COMPANY_ID = '*'
'*','AFF_NIVFOR_APP','AFF','Affichage conditionnel du niveau de formation préparé (pour apprentis)',null,'943',null,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CAP","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDD","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDI","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.','C',null,'/*¿ * AFF_NIVFOR_APP :¿ * La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.¿ */¿¿if ((DIC_ADM_CONTRAT_HISTO.ZT061 == "CAP" || ((DIC_ADM_CONTRAT_HISTO.ZT061 == "CDD" || DIC_ADM_CONTRAT_HISTO.ZT061 == "CDI") && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)))) {¿}¿','La donnée NIVFOR_APP (niveau de formation préparé) est obligatoire pour les contrats d''apprentissage.'
'*','NIVFOR_APP_*_OBLIG','CTL','Niveau de formation préparé obligatoire pour contrats apprentis',null,'943',null,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CAP","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDD","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£ZT061","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£CDI","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£20,64,65,81£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£NIVFOR_APP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENDIP07£NOM_DONNEE_FOCUS=DONNEE^NIVFOR_APP","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le niveau de formation préparé par l''individu doit être renseignée pour les contrats d''apprentissage','N',null,'/*¿ * NIVFOR_APP_*_OBLIG :¿ * Le niveau de formation préparé par l''individu doit être renseignée pour les contrats d''apprentissage¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CAP") {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CDD" && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)) {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}¿if (DIC_ADM_CONTRAT_HISTO.ZT061 == "CDI" && DIC_ADM_CONTRAT_HISTO.ZA700.IN(20, 64, 65, 81)) {¿	if (DIC_ADM_CONTRAT.NIVFOR_APP == vide) {¿		ERR("GENDIP07", DIC_ADM_CONTRAT.NIVFOR_APP);¿	}¿}','Conditions de valorisation du niveau de formation préparé par l''individu (pour CNT Apprentissage)'
##
TAG_CHARSET=@€éèç
##
DIC_PERIODES_RECUEIL_HIS
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from META_DICTIONNAIRE where NOM_DICTIONNAIRE ='DIC_PERIODES_RECUEIL_HIS';
if (ligneExists = 0) then
Insert into META_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE) values ('*','DIC_PERIODES_RECUEIL_HIS','DIC_TGE_PERIODES_RECUEIL (Historisé)','PRH_MOIS_PAIE','N','P',null,'695',null,null);
Insert into REF_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE) values ('*','DIC_PERIODES_RECUEIL_HIS','DIC_TGE_PERIODES_RECUEIL (Historisé)','PRH_MOIS_PAIE','N','P',null,'695',null,null);
END IF;
END;
##
META_DONNEE_GENERALE
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from META_DONNEE_GENERALE where NOM_DICTIONNAIRE ='DIC_PERIODES_RECUEIL_HIS';
if (ligneExists = 0) then
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_MOIS_PAIE','Mois de paie ','DIC_PERIODES_RECUEIL_HIS','X','6',null,null,null,null,'GZ',null,null,'695',null,null,null,null,'N');
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_DEBUT_2','Date début période de recueil suivante','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_DEBUT_1','Date début période de recueil en cours','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_FIN_1','Date fin période de recueil en cours','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_FIN_2','Date fin période de recueil suivante','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_MOIS_PAIE','Mois de paie ','DIC_PERIODES_RECUEIL_HIS','X','6',null,null,null,null,'GZ',null,null,'695',null,null,null,null,'N');
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_DEBUT_2','Date début période de recueil suivante','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_DEBUT_1','Date début période de recueil en cours','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_FIN_1','Date fin période de recueil en cours','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','PRH_DATE_FIN_2','Date fin période de recueil suivante','DIC_PERIODES_RECUEIL_HIS','D','dd.MM.yyyy',null,null,null,null,'Z','O',null,'695',null,null,null,null,'N');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_MOIS_PAIE','ADZ_POP_PRH','Mois de paie ','O','text','PERIODES_RECUEIL','1','Mois de paie','PRH_MOIS_PAIE','NUMPAC','N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_MOIS_PAIE','*','Mois de paie ','O','span',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_DEBUT_2','*','Date début période de recueil suivante','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_FIN_1','*','Date fin période de recueil en cours','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_DEBUT_1','*','Date début période de recueil en cours','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_FIN_2','*','Date fin période de recueil suivante','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_MOIS_PAIE','ADZ_POP_PRH','Mois de paie ','O','text','PERIODES_RECUEIL','1','Mois de paie','PRH_MOIS_PAIE','NUMPAC','N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_MOIS_PAIE','*','Mois de paie ','O','span',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_DEBUT_2','*','Date début période de recueil suivante','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_FIN_1','*','Date fin période de recueil en cours','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_DEBUT_1','*','Date début période de recueil en cours','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','PRH_DATE_FIN_2','*','Date fin période de recueil suivante','N','text',null,null,null,null,null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0');
END IF;
END;
##
META_ECRAN
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from META_ECRAN where NOM_PAGE ='ADZ_POP_PRH';
if (ligneExists = 0) then
Insert into META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA) values ('*','ADZ_POP_PRH','Ajout/Modification périodes de recueil ','RD','EXP','DIC_PERIODES_RECUEIL_HIS','STD','INT','ADZ_ECR_POP_PRH','P',null,null,'695','N',null,null,null,null,null,null,null,'0','N','N',null,null);
Insert into REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA) values ('*','ADZ_POP_PRH','Ajout/Modification périodes de recueil ','RD','EXP','DIC_PERIODES_RECUEIL_HIS','STD','INT','ADZ_ECR_POP_PRH','P',null,null,'695','N',null,null,null,null,null,null,null,'0','N','N',null,null);
END IF;
END;
##
META_GROUPE_DONNEES
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from META_GROUPE_DONNEES where ID_GROUPE ='ADZ_ECR_POP_PRH';
if (ligneExists = 0) then
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_MOIS_PAIE','1',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','#EOL_1','2',null,null,null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_DEBUT_1','3',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_FIN_1','4',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','#EOL_2','5',null,null,null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_DEBUT_2','6',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_FIN_2','7',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_MOIS_PAIE','1',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','#EOL_1','2',null,null,null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_DEBUT_1','3',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_FIN_1','4',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','#EOL_2','5',null,null,null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_DEBUT_2','6',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE) values ('*','ADZ_ECR_POP_PRH','PRH_DATE_FIN_2','7',null,'FDonneeGµ',null,null,null,null,null,null,null,'N',null,null,null);
Insert into META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE) values ('*','ADZ_ECR_POP_PRH',null,null,null,'N',null,'695',null,'Périodes de recueil',null,null);
Insert into REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE) values ('*','ADZ_ECR_POP_PRH',null,null,null,'N',null,'695',null,'Périodes de recueil',null,null);
END IF;
END;
##
SYS_REQUETES_JSP
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from SYS_REQUETES_JSP where NOMPAGE ='TAB_RD_GEN_AUTO' and IDREQUETE = '55';
if (ligneExists = 0) then
Insert into SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF) values ('TAB_RD_GEN_AUTO','55','Utilisateur','DIC_PERIODES_RECUEIL_HIS','DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE,TO_CHAR(DIC_PERIODES_RECUEIL_HIS.PRH_DATE_DEBUT_1^''dd.MM.yyyy''),TO_CHAR(DIC_PERIODES_RECUEIL_HIS.PRH_DATE_FIN_1^''dd.MM.yyyy''),TO_CHAR(DIC_PERIODES_RECUEIL_HIS.PRH_DATE_DEBUT_2^''dd.MM.yyyy''),TO_CHAR(DIC_PERIODES_RECUEIL_HIS.PRH_DATE_FIN_2^''dd.MM.yyyy'')','DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE,DIC_PERIODES_RECUEIL_HIS.PRH_DATE_DEBUT_1,DIC_PERIODES_RECUEIL_HIS.PRH_DATE_FIN_1,DIC_PERIODES_RECUEIL_HIS.PRH_DATE_DEBUT_2,DIC_PERIODES_RECUEIL_HIS.PRH_DATE_FIN_2','NUMPAC=''@GEN_NUMPAC@'' AND PAIEZAD=''@GEN_PAIEZAD@''','0','false','DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE',null,'Périodes de recueil forcées','@Mois de paie,Début période recueil en cours,Fin période recueil en cours,Début période recueil suivante,Fin période recueil suivante');
END IF;
END;
##
SYS_REQUETES_JSP
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from SYS_REQUETES_JSP where NOMPAGE ='PERIODES_RECUEIL' and IDREQUETE = '1';
if (ligneExists = 0) then
Insert into SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF) values ('PERIODES_RECUEIL','1','Utilisateur','(SELECT TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,''YYYYMM''),-LEVEL+1),''YYYYMM'') AS MOIS_PAIE, NUMPAC FROM   (SELECT PERIODEENCOURS,NB_MOIS_RETRO,NUMPAC   FROM TGE_REF_PAC     )   CONNECT BY LEVEL &lt;= NB_MOIS_RETRO+1 )','MOIS_PAIE','MOIS_PAIE','NUMPAC=%1','0','false',null,null,'Périodes de recueil forcées','Mois de paie');
END IF;
END;
##
TGE_REF_MAPTA
=SQL=
DECLARE
ligneExists NUMBER;
BEGIN
select count(*) into ligneExists from TGE_REF_MAPTA where TABLEPHY ='DIC_PERIODES_RECUEIL_HIS';
if (ligneExists = 0) then
Insert into TGE_REF_MAPTA (NUMPAC,ROWNUMBER,TABLEPARAM,FICHIER,TABLEPHY,ALLERRETOUR,TABLETYPE,MOISZERO,NBMOISCONS,SENSIBLERHID,RESERVE) values ('*','180','DIC_PERIODES_RECUEIL_HIS','AV','DIC_PERIODES_RECUEIL_HIS','A','H2','00',null,null,null);
END IF;
END;
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
delete from TGE_REF_MAPDO where element in ('Y326','Y327','Y328','Y329')
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
Insert into TGE_REF_MAPDO (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP,DONNFILTRE,OPERFILTRE,VALFILTRE,TRTPARTICULIER,ENVOI_SYSTEMATIQUE,FORCABLE_ECRAN_GENERE) values ('*','Y326','**','PRH_DATE_DEBUT_1','DIC_PERIODES_RECUEIL_HIS',null,null,null,null,null,'N')
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
Insert into TGE_REF_MAPDO (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP,DONNFILTRE,OPERFILTRE,VALFILTRE,TRTPARTICULIER,ENVOI_SYSTEMATIQUE,FORCABLE_ECRAN_GENERE) values ('*','Y327','**','PRH_DATE_FIN_1','DIC_PERIODES_RECUEIL_HIS',null,null,null,null,null,'N')
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
Insert into TGE_REF_MAPDO (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP,DONNFILTRE,OPERFILTRE,VALFILTRE,TRTPARTICULIER,ENVOI_SYSTEMATIQUE,FORCABLE_ECRAN_GENERE) values ('*','Y328','**','PRH_DATE_DEBUT_2','DIC_PERIODES_RECUEIL_HIS',null,null,null,null,null,'N')
##
TGE_REF_MAPDO
=SQL IFEXIST=TGE_REF_MAPDO=
Insert into TGE_REF_MAPDO (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP,DONNFILTRE,OPERFILTRE,VALFILTRE,TRTPARTICULIER,ENVOI_SYSTEMATIQUE,FORCABLE_ECRAN_GENERE) values ('*','Y329','**','PRH_DATE_FIN_2','DIC_PERIODES_RECUEIL_HIS',null,null,null,null,null,'N')
##
DIC_PERIODES_RECUEIL_HIS
=SQL IFNOTEXIST=DIC_PERIODES_RECUEIL_HIS=
CREATE TABLE DIC_PERIODES_RECUEIL_HIS ¿   (	MATRIC VARCHAR2(32), ¿	NUMPAC VARCHAR2(6 CHAR), ¿	PAIEZAD VARCHAR2(8 CHAR), ¿	PACMAT VARCHAR2(8 CHAR), ¿	 ¿	PRH_DATE_DEBUT_1 DATE, ¿	PRH_DATE_DEBUT_2 DATE, ¿	PRH_DATE_FIN_1 DATE, ¿	PRH_DATE_FIN_2 DATE, ¿	PRH_MOIS_PAIE VARCHAR2(6 CHAR), ¿	DATE_CREATION DATE, ¿	DATE_DERNIERE_MODIF DATE, ¿	TYPE_WRITER VARCHAR2(1), ¿	 PRIMARY KEY (NUMPAC, PAIEZAD, PRH_MOIS_PAIE)¿   ¿   )  
##
PHOTO_DIC_PERIODES_RECUEIL_HIS
=SQL IFNOTEXIST=PHOTO_DIC_PERIODES_RECUEIL_HIS=
¿  CREATE TABLE PHOTO_DIC_PERIODES_RECUEIL_HIS ¿   (	NUMPAC VARCHAR2(6 CHAR), ¿	PACMAT VARCHAR2(8 CHAR), ¿	MATRIC VARCHAR2(32 CHAR), ¿	PAIEZAD VARCHAR2(8 CHAR), ¿	IDPACMAT VARCHAR2(14 CHAR), ¿	PRH_DATE_DEBUT_1 DATE, ¿	PRH_DATE_DEBUT_2 DATE, ¿	PRH_DATE_FIN_1 DATE, ¿	PRH_DATE_FIN_2 DATE, ¿	PRH_MOIS_PAIE VARCHAR2(6 CHAR), ¿	DATE_CREATION DATE, ¿	DATE_DERNIERE_MODIF DATE, ¿	 PRIMARY KEY (NUMPAC, PACMAT, PRH_MOIS_PAIE, PAIEZAD)¿   ¿   )  
##
PH_PH_DIC_PERIODES_RECUEIL_HIS
=SQL IFNOTEXIST=PH_PH_DIC_PERIODES_RECUEIL_HIS=
¿  CREATE TABLE PH_PH_DIC_PERIODES_RECUEIL_HIS ¿   (	NUMPAC VARCHAR2(6 CHAR), ¿	PACMAT VARCHAR2(8 CHAR), ¿	MATRIC VARCHAR2(32 CHAR), ¿	PAIEZAD VARCHAR2(8 CHAR), ¿	IDPACMAT VARCHAR2(14 CHAR), ¿	PRH_DATE_DEBUT_1 DATE, ¿	PRH_DATE_DEBUT_2 DATE, ¿	PRH_DATE_FIN_1 DATE, ¿	PRH_DATE_FIN_2 DATE, ¿	PRH_MOIS_PAIE VARCHAR2(6 CHAR), ¿	DATE_CREATION DATE, ¿	DATE_DERNIERE_MODIF DATE, ¿	 PRIMARY KEY (NUMPAC, PACMAT, PRH_MOIS_PAIE, PAIEZAD)¿   ¿   )  
##
DIC_PERIODES_RECUEIL_HIS
=SQL IFEXIST=DIC_PERIODES_RECUEIL_HIS=
insert into DIC_PERIODES_RECUEIL_HIS (matric,numpac,paiezad,pacmat,prh_date_debut_1,prh_date_debut_2,prh_date_fin_1,prh_date_fin_2,prh_mois_paie) select matric,numpac,paiezad,pacmat,date_debut_1,date_debut_2,date_fin_1,date_fin_2,to_char(add_months(date_debut_1,1),'yyyymm') from dic_tge_periodes_recueil a where date_debut_1 is not null and not exists (select 1 from DIC_PERIODES_RECUEIL_HIS b where b.numpac= a.numpac and b.paiezad = a.paiezad and b.prh_mois_paie = to_char(add_months(a.date_debut_1,1),'yyyymm'))
##
TAG_CHARSET=@€éèç
##
META_DONNEE_ECRAN
==
delete from META_DONNEE_ECRAN where NOM_DONNEE = 'MDE' and COMPANY_ID = '*'
##
META_DONNEE_ECRAN
==
Insert into META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','MDE','*','Mise à dispo externe d''un individu de l''ETB','N','text','TAB_RD_MDE','1','Code,Libellé','MDE,#OUI',null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0')
##
REF_DONNEE_ECRAN
==
delete from REF_DONNEE_ECRAN where NOM_DONNEE = 'MDE' and COMPANY_ID = '*'
##
REF_DONNEE_ECRAN
==
Insert into REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA) values ('*','MDE','*','Mise à dispo externe d''un individu de l''ETB','N','text','TAB_RD_MDE','1','Code,Libellé','MDE,#OUI',null,'N',null,null,null,null,null,null,null,null,null,null,null,'N','N','N','0','0')
##
META_DONNEE_GENERALE
==
delete from META_DONNEE_GENERALE where NOM_DONNEE = 'MDE' and COMPANY_ID = '*'
##
META_DONNEE_GENERALE
==
Insert into META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','MDE','Mise à dispo externe d''un individu','DIC_ADM_CONTRAT_HISTO','X','2',null,null,null,null,'GZ',null,null,'952',null,null,null,null,'N')
##
REF_DONNEE_GENERALE
==
delete from REF_DONNEE_GENERALE where NOM_DONNEE = 'MDE' and COMPANY_ID = '*'
##
REF_DONNEE_GENERALE
==
Insert into REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES) values ('*','MDE','Mise à dispo externe d''un individu','DIC_ADM_CONTRAT_HISTO','X','2',null,null,null,null,'GZ',null,null,'952',null,null,null,null,'N')
##
TAG_CHARSET=@€éèç
##
META_DICTIONNAIRE
==
DELETE FROM META_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_PENSION_ALIM') AND COMPANY_ID='*'
##
META_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_PENSION_ALIM','Pensions alimentaires',NULL,'N','M',NULL,'953',NULL,NULL
##
REF_DICTIONNAIRE
==
DELETE FROM REF_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_PENSION_ALIM') AND COMPANY_ID='*'
##
REF_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_PENSION_ALIM','Pensions alimentaires',NULL,'N','M',NULL,'953',NULL,NULL
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('CODES_IBAN','RD_BENEF_PENS1','RD_BENEF_PENS2','RD_BENEF_PENS3','RD_BIC_PENS1','RD_BIC_PENS2','RD_BIC_PENS3','RD_BISTER_PENS1','RD_BISTER_PENS2','RD_BISTER_PENS3','RD_CINSEE_PENS1','RD_CINSEE_PENS2','RD_CINSEE_PENS3','RD_CODES_IBAN_PENS1','RD_CODES_IBAN_PENS2','RD_CODES_IBAN_PENS3','RD_CODE_DISTRI_PENS1','RD_CODE_DISTRI_PENS2','RD_CODE_DISTRI_PENS3','RD_CODE_POSTAL_PENS1','RD_CODE_POSTAL_PENS2','RD_CODE_POSTAL_PENS3','RD_COMMUNE_PENS1','RD_COMMUNE_PENS2','RD_COMMUNE_PENS3','RD_DOMBQE_PENS1','RD_DOMBQE_PENS2','RD_DOMBQE_PENS3','RD_DSDPEN_PENS1','RD_DSDPEN_PENS2','RD_DSDPEN_PENS3','RD_IBA2_PENS1','RD_IBA2_PENS2','RD_IBA2_PENS3','RD_IBA3_PENS1','RD_IBA3_PENS2','RD_IBA3_PENS3','RD_IBA4_PENS1','RD_IBA4_PENS2','RD_IBA4_PENS3','RD_IBA5_PENS1','RD_IBA5_PENS2','RD_IBA5_PENS3','RD_IBA6_PENS1','RD_IBA6_PENS2','RD_IBA6_PENS3','RD_IBA7_PENS1','RD_IBA7_PENS2','RD_IBA7_PENS3','RD_IBA8_PENS1','RD_IBA8_PENS2','RD_IBA8_PENS3','RD_IBA9_PENS1','RD_IBA9_PENS2','RD_IBA9_PENS3','RD_IBACC_PENS1','RD_IBACC_PENS2','RD_IBACC_PENS3','RD_IBAPA_PENS1','RD_IBAPA_PENS2','RD_IBAPA_PENS3','RD_MNTPEN_PENS1','RD_MNTPEN_PENS2','RD_MNTPEN_PENS3','RD_NOM_VOIE_PENS1','RD_NOM_VOIE_PENS2','RD_NOM_VOIE_PENS3','RD_NUMVOI_PENS1','RD_NUMVOI_PENS2','RD_NUMVOI_PENS3','RD_REF_EXT_PENS1','RD_REF_EXT_PENS2','RD_REF_EXT_PENS3','RD_TITBQE_PENS1','RD_TITBQE_PENS2','RD_TITBQE_PENS3','REF_EXTERNE_OPPOS') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','CODES_IBAN','Codes IBAN pour Oppositions','DIC_TGE_OPPOSITIONS','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS1','Nom bénéficiaire pension1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS2','Nom bénéficiaire pension2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS3','Nom bénéficiaire pension3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS1','Code BIC pension 1','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS2','Code BIC pension 2','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS3','Code BIC pension 3','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS1','Complément du N° adresse bénéf pension 1','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS2','Complément du N° adresse bénéf pension2','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS3','Complément du N° adresse bénéf pension3','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS1','Code N° INSEE commune adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS2','Code N° INSEE commune adresse bénéf pension 2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS3','Code N° INSEE commune adresse bénéf pension 3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS1','Codes IBAN pour Pension 1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS2','Codes IBAN pour Pension 2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS3','Codes IBAN pour Pension 3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS1','CODE_DISTRIBUTEUR adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS2','CODE_DISTRIBUTEUR adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS3','CODE_DISTRIBUTEUR adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS1','CODE_POSTAL adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS2','CODE_POSTAL adresse bénéf pension 2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS3','CODE_POSTAL adresse bénéf pension 3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS1','COMMUNE adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS2','COMMUNE adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS3','COMMUNE adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS1','Domiciliation bancaire pension 1','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS2','Domiciliation bancaire pension 2','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS3','Domiciliation bancaire pension 3','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS1','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS2','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS3','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS1','CODE IBAN SOUS GROUPE2 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS2','CODE IBAN SOUS GROUPE2 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS3','CODE IBAN SOUS GROUPE2 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS1','CODE IBAN SOUS GROUPE3 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS2','CODE IBAN SOUS GROUPE3 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS3','CODE IBAN SOUS GROUPE3 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS1','CODE IBAN SOUS GROUPE4 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS2','CODE IBAN SOUS GROUPE4 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS3','CODE IBAN SOUS GROUPE4 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS1','CODE IBAN SOUS GROUPE5 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS2','CODE IBAN SOUS GROUPE5 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS3','CODE IBAN SOUS GROUPE5 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS1','CODE IBAN SOUS GROUPE6 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS2','CODE IBAN SOUS GROUPE6 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS3','CODE IBAN SOUS GROUPE6 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS1','CODE IBAN SOUS GROUPE7 Pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS2','CODE IBAN SOUS GROUPE7 Pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS3','CODE IBAN SOUS GROUPE7 Pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS1','CODE IBAN SOUS GROUPE8 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS2','CODE IBAN SOUS GROUPE8 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS3','CODE IBAN SOUS GROUPE8 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS1','CODE IBAN SOUS GROUPE9 Pension 1','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS2','CODE IBAN SOUS GROUPE9 Pension 2','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS3','CODE IBAN SOUS GROUPE9 Pension 3','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS1','CLE DE L''IBAN pension 1','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS2','CLE DE L''IBAN pension 2','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS3','CLE DE L''IBAN pension 3','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS1','CODE PAYS DE L''IBAN pension 1','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS2','CODE PAYS DE L''IBAN pension 2','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS3','CODE PAYS DE L''IBAN pension 3','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_MNTPEN_PENS1','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_MNTPEN_PENS2','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_MNTPEN_PENS3','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_NOM_VOIE_PENS1','NOM_VOIE adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NOM_VOIE_PENS2','NOM_VOIE adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NOM_VOIE_PENS3','NOM_VOIE adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS1','N° de la voie adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS2','N° de la voie adresse bénéf pension2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS3','N° de la voie adresse bénéf pension3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS1','Référence externe pour Pension 1','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS2','Référence externe pour Pension 2','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS3','Référence externe pour Pension 3','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS1','Titulaire du compte pension1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS2','Titulaire du compte pension2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS3','Titulaire du compte pension 3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','REF_EXTERNE_OPPOS','Référence externe pour Oppositions','DIC_TGE_OPPOSITIONS','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('CODES_IBAN','RD_BENEF_PENS1','RD_BENEF_PENS2','RD_BENEF_PENS3','RD_BIC_PENS1','RD_BIC_PENS2','RD_BIC_PENS3','RD_BISTER_PENS1','RD_BISTER_PENS2','RD_BISTER_PENS3','RD_CINSEE_PENS1','RD_CINSEE_PENS2','RD_CINSEE_PENS3','RD_CODES_IBAN_PENS1','RD_CODES_IBAN_PENS2','RD_CODES_IBAN_PENS3','RD_CODE_DISTRI_PENS1','RD_CODE_DISTRI_PENS2','RD_CODE_DISTRI_PENS3','RD_CODE_POSTAL_PENS1','RD_CODE_POSTAL_PENS2','RD_CODE_POSTAL_PENS3','RD_COMMUNE_PENS1','RD_COMMUNE_PENS2','RD_COMMUNE_PENS3','RD_DOMBQE_PENS1','RD_DOMBQE_PENS2','RD_DOMBQE_PENS3','RD_DSDPEN_PENS1','RD_DSDPEN_PENS2','RD_DSDPEN_PENS3','RD_IBA2_PENS1','RD_IBA2_PENS2','RD_IBA2_PENS3','RD_IBA3_PENS1','RD_IBA3_PENS2','RD_IBA3_PENS3','RD_IBA4_PENS1','RD_IBA4_PENS2','RD_IBA4_PENS3','RD_IBA5_PENS1','RD_IBA5_PENS2','RD_IBA5_PENS3','RD_IBA6_PENS1','RD_IBA6_PENS2','RD_IBA6_PENS3','RD_IBA7_PENS1','RD_IBA7_PENS2','RD_IBA7_PENS3','RD_IBA8_PENS1','RD_IBA8_PENS2','RD_IBA8_PENS3','RD_IBA9_PENS1','RD_IBA9_PENS2','RD_IBA9_PENS3','RD_IBACC_PENS1','RD_IBACC_PENS2','RD_IBACC_PENS3','RD_IBAPA_PENS1','RD_IBAPA_PENS2','RD_IBAPA_PENS3','RD_MNTPEN_PENS1','RD_MNTPEN_PENS2','RD_MNTPEN_PENS3','RD_NOM_VOIE_PENS1','RD_NOM_VOIE_PENS2','RD_NOM_VOIE_PENS3','RD_NUMVOI_PENS1','RD_NUMVOI_PENS2','RD_NUMVOI_PENS3','RD_REF_EXT_PENS1','RD_REF_EXT_PENS2','RD_REF_EXT_PENS3','RD_TITBQE_PENS1','RD_TITBQE_PENS2','RD_TITBQE_PENS3','REF_EXTERNE_OPPOS') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','CODES_IBAN','Codes IBAN pour Oppositions','DIC_TGE_OPPOSITIONS','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS1','Nom bénéficiaire pension1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS2','Nom bénéficiaire pension2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BENEF_PENS3','Nom bénéficiaire pension3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS1','Code BIC pension 1','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS2','Code BIC pension 2','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BIC_PENS3','Code BIC pension 3','DIC_PENSION_ALIM','X','11',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS1','Complément du N° adresse bénéf pension 1','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS2','Complément du N° adresse bénéf pension2','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_BISTER_PENS3','Complément du N° adresse bénéf pension3','DIC_PENSION_ALIM','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS1','Code N° INSEE commune adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS2','Code N° INSEE commune adresse bénéf pension 2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CINSEE_PENS3','Code N° INSEE commune adresse bénéf pension 3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS1','Codes IBAN pour Pension 1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS2','Codes IBAN pour Pension 2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODES_IBAN_PENS3','Codes IBAN pour Pension 3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS1','CODE_DISTRIBUTEUR adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS2','CODE_DISTRIBUTEUR adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_DISTRI_PENS3','CODE_DISTRIBUTEUR adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS1','CODE_POSTAL adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS2','CODE_POSTAL adresse bénéf pension 2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_POSTAL_PENS3','CODE_POSTAL adresse bénéf pension 3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS1','COMMUNE adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS2','COMMUNE adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_COMMUNE_PENS3','COMMUNE adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS1','Domiciliation bancaire pension 1','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS2','Domiciliation bancaire pension 2','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DOMBQE_PENS3','Domiciliation bancaire pension 3','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS1','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS2','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDPEN_PENS3','Date début pension alimentaire','DIC_PENSION_ALIM','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS1','CODE IBAN SOUS GROUPE2 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS2','CODE IBAN SOUS GROUPE2 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA2_PENS3','CODE IBAN SOUS GROUPE2 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS1','CODE IBAN SOUS GROUPE3 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS2','CODE IBAN SOUS GROUPE3 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA3_PENS3','CODE IBAN SOUS GROUPE3 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS1','CODE IBAN SOUS GROUPE4 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS2','CODE IBAN SOUS GROUPE4 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA4_PENS3','CODE IBAN SOUS GROUPE4 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS1','CODE IBAN SOUS GROUPE5 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS2','CODE IBAN SOUS GROUPE5 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA5_PENS3','CODE IBAN SOUS GROUPE5 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS1','CODE IBAN SOUS GROUPE6 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS2','CODE IBAN SOUS GROUPE6 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA6_PENS3','CODE IBAN SOUS GROUPE6 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS1','CODE IBAN SOUS GROUPE7 Pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS2','CODE IBAN SOUS GROUPE7 Pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA7_PENS3','CODE IBAN SOUS GROUPE7 Pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS1','CODE IBAN SOUS GROUPE8 pension 1','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS2','CODE IBAN SOUS GROUPE8 pension 2','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA8_PENS3','CODE IBAN SOUS GROUPE8 pension 3','DIC_PENSION_ALIM','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS1','CODE IBAN SOUS GROUPE9 Pension 1','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS2','CODE IBAN SOUS GROUPE9 Pension 2','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBA9_PENS3','CODE IBAN SOUS GROUPE9 Pension 3','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS1','CLE DE L''IBAN pension 1','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS2','CLE DE L''IBAN pension 2','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBACC_PENS3','CLE DE L''IBAN pension 3','DIC_PENSION_ALIM','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS1','CODE PAYS DE L''IBAN pension 1','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS2','CODE PAYS DE L''IBAN pension 2','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_IBAPA_PENS3','CODE PAYS DE L''IBAN pension 3','DIC_PENSION_ALIM','X','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_MNTPEN_PENS1','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_MNTPEN_PENS2','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_MNTPEN_PENS3','Pension alimentaire','DIC_PENSION_ALIM','9','5','2',NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,'G',NULL,'N'
'*','RD_NOM_VOIE_PENS1','NOM_VOIE adresse bénéf pension 1','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NOM_VOIE_PENS2','NOM_VOIE adresse bénéf pension 2','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NOM_VOIE_PENS3','NOM_VOIE adresse bénéf pension 3','DIC_PENSION_ALIM','X','32',NULL,NULL,NULL,NULL,'Z','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS1','N° de la voie adresse bénéf pension 1','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS2','N° de la voie adresse bénéf pension2','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_NUMVOI_PENS3','N° de la voie adresse bénéf pension3','DIC_PENSION_ALIM','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS1','Référence externe pour Pension 1','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS2','Référence externe pour Pension 2','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_REF_EXT_PENS3','Référence externe pour Pension 3','DIC_PENSION_ALIM','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS1','Titulaire du compte pension1','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS2','Titulaire du compte pension2','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','RD_TITBQE_PENS3','Titulaire du compte pension 3','DIC_PENSION_ALIM','X','30',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
'*','REF_EXTERNE_OPPOS','Référence externe pour Oppositions','DIC_TGE_OPPOSITIONS','X','24',NULL,NULL,NULL,NULL,'GZ','O',NULL,'953',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('CODES_IBAN','RD_BENEF_PENS1','RD_BENEF_PENS2','RD_BENEF_PENS3','RD_BIC_PENS1','RD_BIC_PENS2','RD_BIC_PENS3','RD_BISTER_PENS1','RD_BISTER_PENS2','RD_BISTER_PENS3','RD_CINSEE_PENS1','RD_CINSEE_PENS2','RD_CINSEE_PENS3','RD_CODES_IBAN_PENS1','RD_CODES_IBAN_PENS2','RD_CODES_IBAN_PENS3','RD_CODE_DISTRI_PENS1','RD_CODE_DISTRI_PENS2','RD_CODE_DISTRI_PENS3','RD_CODE_POSTAL_PENS1','RD_CODE_POSTAL_PENS2','RD_CODE_POSTAL_PENS3','RD_COMMUNE_PENS1','RD_COMMUNE_PENS2','RD_COMMUNE_PENS3','RD_DOMBQE_PENS1','RD_DOMBQE_PENS2','RD_DOMBQE_PENS3','RD_DSDPEN_PENS1','RD_DSDPEN_PENS2','RD_DSDPEN_PENS3','RD_IBA2_PENS1','RD_IBA2_PENS2','RD_IBA2_PENS3','RD_IBA3_PENS1','RD_IBA3_PENS2','RD_IBA3_PENS3','RD_IBA4_PENS1','RD_IBA4_PENS2','RD_IBA4_PENS3','RD_IBA5_PENS1','RD_IBA5_PENS2','RD_IBA5_PENS3','RD_IBA6_PENS1','RD_IBA6_PENS2','RD_IBA6_PENS3','RD_IBA7_PENS1','RD_IBA7_PENS2','RD_IBA7_PENS3','RD_IBA8_PENS1','RD_IBA8_PENS2','RD_IBA8_PENS3','RD_IBA9_PENS1','RD_IBA9_PENS2','RD_IBA9_PENS3','RD_IBACC_PENS1','RD_IBACC_PENS2','RD_IBACC_PENS3','RD_IBAPA_PENS1','RD_IBAPA_PENS2','RD_IBAPA_PENS3','RD_MNTPEN_PENS1','RD_MNTPEN_PENS2','RD_MNTPEN_PENS3','RD_NOM_VOIE_PENS1','RD_NOM_VOIE_PENS2','RD_NOM_VOIE_PENS3','RD_NUMVOI_PENS1','RD_NUMVOI_PENS2','RD_NUMVOI_PENS3','RD_REF_EXT_PENS1','RD_REF_EXT_PENS2','RD_REF_EXT_PENS3','RD_TITBQE_PENS1','RD_TITBQE_PENS2','RD_TITBQE_PENS3','REF_EXTERNE_OPPOS') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','CODES_IBAN','*','Codes IBAN pour Oppositions','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_OPPOS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS1','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS2','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS3','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS1','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS1_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS2','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS2_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS3','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS3_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS1','*','Complément du N° adresse bénéf pension 1','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS2','*','Complément du N° adresse bénéf pension2','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS3','*','Complément du N° adresse bénéf pension3','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS1','*','Code N° INSEE commune adresse bénéf pension 1','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS1_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS2','*','Code N° INSEE commune adresse bénéf pension 2','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS2_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS3','*','Code N° INSEE commune adresse bénéf pension 3','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS3_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS1','*','Codes IBAN pour Pension 1','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS2','*','Codes IBAN pour Pension 2','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS2',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS3','*','Codes IBAN pour Pension 3','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS1','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS1,RD_CINSEE_PENS1,RD_COMMUNE_PENS1','RD_CODE_POSTAL_PENS1','N',NULL,'CODE_DISTRIB_PENS1_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS1_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS2','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS2,RD_CINSEE_PENS2,RD_COMMUNE_PENS2','RD_CODE_POSTAL_PENS2','N',NULL,'CODE_DISTRIB_PENS2_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS2_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS3','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS3,RD_CINSEE_PENS3,RD_COMMUNE_PENS3','RD_CODE_POSTAL_PENS3','N',NULL,'CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS3_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS1','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS1',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS1_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS2','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS2',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS2_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS3','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS3',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS3_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS1','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS1','RD_CINSEE_PENS1','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS2','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS2','RD_CINSEE_PENS2','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS3','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS3','RD_CINSEE_PENS3','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS1','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS2','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS3','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS1','*','Date de début ','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION1_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS2','*','Date de début ','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION2_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS3','*','Date de début','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION3_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS1','*','CODE IBAN SOUS GROUPE2 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','IBA2_PENS1_BQE_OBLIG',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS2','*','CODE IBAN SOUS GROUPE2 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA2_PENS2_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS3','*','CODE IBAN SOUS GROUPE2 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA2_PENS3_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS1','*','CODE IBAN SOUS GROUPE3 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','IBA3_PENS1_BQE_OBLIG',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS2','*','CODE IBAN SOUS GROUPE3 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA3_PENS2_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS3','*','CODE IBAN SOUS GROUPE3 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA3_PENS3_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS1','*','CODE IBAN SOUS GROUPE4 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS2','*','CODE IBAN SOUS GROUPE4 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS3','*','CODE IBAN SOUS GROUPE4 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS1','*','CODE IBAN SOUS GROUPE5 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS2','*','CODE IBAN SOUS GROUPE5 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS3','*','CODE IBAN SOUS GROUPE5 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS1','*','CODE IBAN SOUS GROUPE6 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS2','*','CODE IBAN SOUS GROUPE6 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS3','*','CODE IBAN SOUS GROUPE6 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS1','*','CODE IBAN SOUS GROUPE7 Pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS2','*','CODE IBAN SOUS GROUPE7 Pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS3','*','CODE IBAN SOUS GROUPE7 Pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS1','*','CODE IBAN SOUS GROUPE8 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS2','*','CODE IBAN SOUS GROUPE8 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS3','*','CODE IBAN SOUS GROUPE8 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS1','*','CODE IBAN SOUS GROUPE9 Pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS2','*','CODE IBAN SOUS GROUPE9 Pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS3','*','CODE IBAN SOUS GROUPE9 Pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS1','*','CLE DE L''IBAN pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS1_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS2','*','CLE DE L''IBAN pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS2_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS3','*','CLE DE L''IBAN pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS3_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS1','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS1_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS2','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS2_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS3','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS3_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS1','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS2','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS3','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS1','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS2','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS3','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS1','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS2','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS3','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS1','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS2','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS3','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS1','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS1_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS2','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS2_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS3','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS3_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','REF_EXTERNE_OPPOS','*','Référence externe pour Oppositions','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('CODES_IBAN','RD_BENEF_PENS1','RD_BENEF_PENS2','RD_BENEF_PENS3','RD_BIC_PENS1','RD_BIC_PENS2','RD_BIC_PENS3','RD_BISTER_PENS1','RD_BISTER_PENS2','RD_BISTER_PENS3','RD_CINSEE_PENS1','RD_CINSEE_PENS2','RD_CINSEE_PENS3','RD_CODES_IBAN_PENS1','RD_CODES_IBAN_PENS2','RD_CODES_IBAN_PENS3','RD_CODE_DISTRI_PENS1','RD_CODE_DISTRI_PENS2','RD_CODE_DISTRI_PENS3','RD_CODE_POSTAL_PENS1','RD_CODE_POSTAL_PENS2','RD_CODE_POSTAL_PENS3','RD_COMMUNE_PENS1','RD_COMMUNE_PENS2','RD_COMMUNE_PENS3','RD_DOMBQE_PENS1','RD_DOMBQE_PENS2','RD_DOMBQE_PENS3','RD_DSDPEN_PENS1','RD_DSDPEN_PENS2','RD_DSDPEN_PENS3','RD_IBA2_PENS1','RD_IBA2_PENS2','RD_IBA2_PENS3','RD_IBA3_PENS1','RD_IBA3_PENS2','RD_IBA3_PENS3','RD_IBA4_PENS1','RD_IBA4_PENS2','RD_IBA4_PENS3','RD_IBA5_PENS1','RD_IBA5_PENS2','RD_IBA5_PENS3','RD_IBA6_PENS1','RD_IBA6_PENS2','RD_IBA6_PENS3','RD_IBA7_PENS1','RD_IBA7_PENS2','RD_IBA7_PENS3','RD_IBA8_PENS1','RD_IBA8_PENS2','RD_IBA8_PENS3','RD_IBA9_PENS1','RD_IBA9_PENS2','RD_IBA9_PENS3','RD_IBACC_PENS1','RD_IBACC_PENS2','RD_IBACC_PENS3','RD_IBAPA_PENS1','RD_IBAPA_PENS2','RD_IBAPA_PENS3','RD_MNTPEN_PENS1','RD_MNTPEN_PENS2','RD_MNTPEN_PENS3','RD_NOM_VOIE_PENS1','RD_NOM_VOIE_PENS2','RD_NOM_VOIE_PENS3','RD_NUMVOI_PENS1','RD_NUMVOI_PENS2','RD_NUMVOI_PENS3','RD_REF_EXT_PENS1','RD_REF_EXT_PENS2','RD_REF_EXT_PENS3','RD_TITBQE_PENS1','RD_TITBQE_PENS2','RD_TITBQE_PENS3','REF_EXTERNE_OPPOS') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','CODES_IBAN','*','Codes IBAN pour Oppositions','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_OPPOS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS1','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS2','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BENEF_PENS3','*','Nom du bénéficiaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'*_REMPLACE_SPECIAL_CAR_NUM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS1','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS1_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS2','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS2_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BIC_PENS3','*','Code BIC','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BIC_PENS3_*_SEPA_CONTROLE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS1','*','Complément du N° adresse bénéf pension 1','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS2','*','Complément du N° adresse bénéf pension2','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_BISTER_PENS3','*','Complément du N° adresse bénéf pension3','N','select','TAB_RD_BISTER','1',NULL,NULL,NULL,'O',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS1','*','Code N° INSEE commune adresse bénéf pension 1','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS1_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS2','*','Code N° INSEE commune adresse bénéf pension 2','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS2_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CINSEE_PENS3','*','Code N° INSEE commune adresse bénéf pension 3','N','hidden','REG_RD_CINSEE','1','Code INSEE,Commune','CINSEE','COPOST,BUDIST','N',NULL,'CINSEE_PENS3_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS1','*','Codes IBAN pour Pension 1','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS2','*','Codes IBAN pour Pension 2','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS2',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CODES_IBAN_PENS3','*','Codes IBAN pour Pension 3','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALORISATION_CODES_IBAN_PENS3',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS1','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS1,RD_CINSEE_PENS1,RD_COMMUNE_PENS1','RD_CODE_POSTAL_PENS1','N',NULL,'CODE_DISTRIB_PENS1_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS1_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS2','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS2,RD_CINSEE_PENS2,RD_COMMUNE_PENS2','RD_CODE_POSTAL_PENS2','N',NULL,'CODE_DISTRIB_PENS2_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS2_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_DISTRI_PENS3','*','Bureau distributeur','N','text','REG_RD_BUDIST','1','Bureau distributeur, Code INSEE, Commune','RD_CODE_DISTRI_PENS3,RD_CINSEE_PENS3,RD_COMMUNE_PENS3','RD_CODE_POSTAL_PENS3','N',NULL,'CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE',NULL,NULL,NULL,NULL,NULL,'CODE_DISTRIB_PENS3_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS1','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS1',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS1_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS2','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS2',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS2_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CODE_POSTAL_PENS3','*','Code postal','N','text','TAB_RD_COPOST_GEO','1','code postal,bureau distributeur','RD_CODE_POSTAL_PENS3',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CODE_POSTAL_PENS3_*_OBLIG_F',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS1','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS1','RD_CINSEE_PENS1','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS2','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS2','RD_CINSEE_PENS2','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COMMUNE_PENS3','*','Commune','N','text','REG_RD_LOCALITE','1','COMMUNE','RD_COMMUNE_PENS3','RD_CINSEE_PENS3','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS1','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS2','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DOMBQE_PENS3','*','Domiciliation bancaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS1','*','Date de début ','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION1_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS2','*','Date de début ','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION2_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDPEN_PENS3','*','Date de début','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'DATE_PENSION3_*_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS1','*','CODE IBAN SOUS GROUPE2 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','IBA2_PENS1_BQE_OBLIG',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS2','*','CODE IBAN SOUS GROUPE2 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA2_PENS2_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA2_PENS3','*','CODE IBAN SOUS GROUPE2 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA2_PENS3_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS1','*','CODE IBAN SOUS GROUPE3 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C','IBA3_PENS1_BQE_OBLIG',NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS2','*','CODE IBAN SOUS GROUPE3 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA3_PENS2_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA3_PENS3','*','CODE IBAN SOUS GROUPE3 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBA3_PENS3_BQE_OBLIG',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS1','*','CODE IBAN SOUS GROUPE4 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS2','*','CODE IBAN SOUS GROUPE4 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA4_PENS3','*','CODE IBAN SOUS GROUPE4 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS1','*','CODE IBAN SOUS GROUPE5 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS2','*','CODE IBAN SOUS GROUPE5 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA5_PENS3','*','CODE IBAN SOUS GROUPE5 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS1','*','CODE IBAN SOUS GROUPE6 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS2','*','CODE IBAN SOUS GROUPE6 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA6_PENS3','*','CODE IBAN SOUS GROUPE6 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS1','*','CODE IBAN SOUS GROUPE7 Pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS2','*','CODE IBAN SOUS GROUPE7 Pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA7_PENS3','*','CODE IBAN SOUS GROUPE7 Pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS1','*','CODE IBAN SOUS GROUPE8 pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS2','*','CODE IBAN SOUS GROUPE8 pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA8_PENS3','*','CODE IBAN SOUS GROUPE8 pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS1','*','CODE IBAN SOUS GROUPE9 Pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS2','*','CODE IBAN SOUS GROUPE9 Pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBA9_PENS3','*','CODE IBAN SOUS GROUPE9 Pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS1','*','CLE DE L''IBAN pension 1','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS1_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS2','*','CLE DE L''IBAN pension 2','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS2_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBACC_PENS3','*','CLE DE L''IBAN pension 3','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBACC_PENS3_DECLENCH_CTRL',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS1','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS1_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS2','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS2_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_IBAPA_PENS3','*','Code IBAN','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'IBAPA_PENS3_*_EXISTE',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS1','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS2','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MNTPEN_PENS3','*','Pension alimentaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS1','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS2','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NOM_VOIE_PENS3','*','Nom de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS1','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS2','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NUMVOI_PENS3','*','N° de la voie','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS1','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS2','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REF_EXT_PENS3','*','Référence externe','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS1','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS1_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS2','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS2_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TITBQE_PENS3','*','Titulaire du compte','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'TITBQE_PENS3_BENEF_DEFAUT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','REF_EXTERNE_OPPOS','*','Référence externe pour Oppositions','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('ZDR_PENSION3') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','ZDR_PENSION3',NULL,NULL,NULL,'O',NULL,'953',NULL,'Pension alimentaire 3','Pension alimentaire N°3',NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('ZDR_PENSION3') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','ZDR_PENSION3',NULL,NULL,NULL,'O',NULL,'953',NULL,'Pension alimentaire 3','Pension alimentaire N°3',NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('ZDR_PENSION3') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','ZDR_PENSION3','#EOL_1','10',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_11','56',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_12','95',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_2','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_4','20',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_6','32',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_7','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_9','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_1','17','N','FormTitreµAdresse du bénéficiaire',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_2','49',NULL,'FormTitreµCoordonnées bancaires du bénéficiaire',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_3','61',NULL,'FormTitreµDonnées IBAN-BIC',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BENEF_PENS3','13',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BIC_PENS3','97',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BISTER_PENS3','27','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CINSEE_PENS3','42',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODES_IBAN_PENS3','93',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODE_DISTRI_PENS3','38',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODE_POSTAL_PENS3','35',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_COMMUNE_PENS3','46',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_DOMBQE_PENS3','55',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_DSDPEN_PENS3','9',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA2_PENS3','69','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA3_PENS3','71','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA4_PENS3','73','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA5_PENS3','83','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA6_PENS3','85','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA7_PENS3','87','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA8_PENS3','89','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA9_PENS3','91','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBACC_PENS3','67','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBAPA_PENS3','64',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_MNTPEN_PENS3','8','N','FDonneeGµ€',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_NOM_VOIE_PENS3','31',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_NUMVOI_PENS3','25',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_REF_EXT_PENS3','59',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_TITBQE_PENS3','51',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('ZDR_PENSION3') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','ZDR_PENSION3','#EOL_1','10',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_11','56',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_12','95',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_2','15',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_4','20',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_5','28',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_6','32',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_7','39',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#EOL_9','48',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_1','17','N','FormTitreµAdresse du bénéficiaire',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_2','49',NULL,'FormTitreµCoordonnées bancaires du bénéficiaire',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','#LIBELLE_3','61',NULL,'FormTitreµDonnées IBAN-BIC',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BENEF_PENS3','13',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BIC_PENS3','97',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_BISTER_PENS3','27','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CINSEE_PENS3','42',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODES_IBAN_PENS3','93',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODE_DISTRI_PENS3','38',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_CODE_POSTAL_PENS3','35',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_COMMUNE_PENS3','46',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_DOMBQE_PENS3','55',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_DSDPEN_PENS3','9',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA2_PENS3','69','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA3_PENS3','71','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA4_PENS3','73','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA5_PENS3','83','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA6_PENS3','85','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA7_PENS3','87','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA8_PENS3','89','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBA9_PENS3','91','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBACC_PENS3','67','O','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_IBAPA_PENS3','64',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_MNTPEN_PENS3','8','N','FDonneeGµ€',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_NOM_VOIE_PENS3','31',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_NUMVOI_PENS3','25',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_REF_EXT_PENS3','59',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','ZDR_PENSION3','RD_TITBQE_PENS3','51',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('BIC_PENS3_*_SEPA_CONTROLE','CINSEE_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_OBLIG_F','CODE_POSTAL_PENS3_*_OBLIG_F','DATE_PENSION1_*_OBLIG','DATE_PENSION2_*_OBLIG','DATE_PENSION3_*_OBLIG','IBA2_PENS3_BQE_OBLIG','IBA3_PENS3_BQE_OBLIG','IBACC_PENS3_DECLENCH_CTRL','IBAPA_PENS3_*_EXISTE','TITBQE_PENS3_BENEF_DEFAUT','VALORISATION_CODES_IBAN_OPPOS','VALORISATION_CODES_IBAN_PENS1','VALORISATION_CODES_IBAN_PENS2','VALORISATION_CODES_IBAN_PENS3') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','BIC_PENS3_*_SEPA_CONTROLE','CTL','BIC controle sepa pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BIC_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BIC_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£SUBSTRING_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3§INDICE_DEBUT=VALEUR^5§INDICE_FIN=VALEUR^6","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=@TMP1","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15},{"TYPE":"SI","OPERANDE_1":"@TMP2£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":16},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":17},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES2£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":18},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":19},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":20},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£LONGUEUR_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":21},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"LT","OPERANDE_2":"VALEUR£8","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":22},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":23},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES3£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":24},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":25},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":26}]','BIC controle sepa pension 3','N',NULL,'/*¿ * BIC_PENS3_*_SEPA_CONTROLE :¿ * BIC controle sepa pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_BIC_PENS3 == vide) {¿		ERR("GENBQE03", DIC_PENSION_ALIM.RD_BIC_PENS3);¿	}¿}¿if (DIC_PENSION_ALIM.RD_BIC_PENS3 == vide) {¿	return;¿}¿TMP1 = SUBSTRING_VAL(DIC_PENSION_ALIM.RD_BIC_PENS3, 5, 6);¿TMP2 = TAB("REG_RD_SEPAPAYS", 1, 0, TMP1);¿if (TMP2 == 0) {¿	ERR("GENBQES2", DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿TMP1 = LONGUEUR_VAL(DIC_PENSION_ALIM.RD_BIC_PENS3);¿if (TMP1 < 8) {¿	ERR("GENBQES3", DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿','BIC controle sepa pension 3'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','AUT','Alimentation auto CINSEE pension 3 si unique',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"DONNEE£RD_CINSEE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"DONNEE£RD_COMMUNE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation automatique de CINSEE pension 3 si unique en fonction du CP+BUDIST','O',NULL,'/*¿ * CINSEE_PENS3_*_ALIM_SI_UNIQUE :¿ * Alimentation automatique de CINSEE pension 3 si unique en fonction du CP+BUDIST¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	TMP1 = TAB("REG_RD_NB_CINSEE", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	if (TMP1 == 1) {¿		DIC_PENSION_ALIM.RD_CINSEE_PENS3 = TAB("REG_RD_CINSEE", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿		DIC_PENSION_ALIM.RD_COMMUNE_PENS3 = TAB("REG_RD_CINSEE", 1, 1, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	}¿}¿','Alimentation auto CINSEE pension 3 si unique'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','AUT','Alimentation auto code distributeur si unique',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_CODE_DISTRI_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_CINSEE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_COMMUNE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation automatique du code distribution si unique en fonction du CP','O',NULL,'/*¿ * CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE :¿ * Alimentation automatique du code distribution si unique en fonction du CP¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	TMP1 = TAB("REG_RD_NB_BUDIST", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	if (TMP1 == 1) {¿		DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3 = TAB("REG_RD_BUDIST", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿		DIC_PENSION_ALIM.RD_CINSEE_PENS3 = TAB("REG_RD_BUDIST", 1, 1, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿		DIC_PENSION_ALIM.RD_COMMUNE_PENS3 = TAB("REG_RD_BUDIST", 1, 2, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	}¿}¿','Alimentation auto code distributeur si unique'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','CTL','Bureau distributeur obligatoire sur adresse française pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_DISTRI_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENADR54£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le bureau distributeur est obligatoire sur une Adresse française pension 3','N',NULL,'/*¿ * CODE_DISTRIB_PENS3_*_OBLIG_F :¿ * Le bureau distributeur est obligatoire sur une Adresse française pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3 == vide) {¿		ERR("GENADR54", DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	}¿}¿','Bureau distributeur obligatoire sur adresse française pension 3'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','CTL','Code postal obligatoire sur adresse française pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NOM_VOIE_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"LT","OPERANDE_2":"VALEUR£01000","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"GE","OPERANDE_2":"VALEUR£99000","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENADR71£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le Code postal est obligatoire sur une Adresse française pension 3','N',NULL,'/*¿ * CODE_POSTAL_PENS3_*_OBLIG_F :¿ * Le Code postal est obligatoire sur une Adresse française pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_NOM_VOIE_PENS3 != vide) {¿	if ((DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 < "01000" || DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 >= 99000)) {¿		ERR("GENADR71", DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	}¿}¿','Code postal obligatoire sur adresse française pension 3'
'*','DATE_PENSION1_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION1_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS1 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS1 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','DATE_PENSION2_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION2_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS2 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS2 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','DATE_PENSION3_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION3_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS3 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','IBA2_PENS3_BQE_OBLIG','CTL','IBA2 obligatoire sepa pension 3',NULL,'955',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','IBA2 obligatoire sepa pension 3','N',NULL,'/*¿ * IBA2_PENS3_BQE_OBLIG :¿ * IBA2 obligatoire sepa pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_PENSION_ALIM.RD_IBACC_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_IBA2_PENS3 == vide) {¿		ERR("GENBQE03", donneecourante);¿	}¿}¿','IBA2 obligatoire sepa pension 3'
'*','IBA3_PENS3_BQE_OBLIG','CTL','IBA3 obligatoire sepa Pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBA3_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','IBA3 obligatoire sepa Pension 3','N',NULL,'/*¿ * IBA3_PENS3_BQE_OBLIG :¿ * IBA3 obligatoire sepa Pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_PENSION_ALIM.RD_IBACC_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_IBA3_PENS3 == vide) {¿		ERR("GENBQE03", donneecourante);¿	}¿}¿','IBA3 obligatoire sepa Pension 3'
'*','IBACC_PENS3_DECLENCH_CTRL','CTL','Déclenchement du controle clé IBAN BQE pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCTL","OPERANDE_2":"FONCTION£BIC_IBAN£NOM_DONNEE_IBAPA=DONNEE^RD_IBAPA_PENS3§NOM_DONNEE_IBACC=DONNEE^RD_IBACC_PENS3§NOM_DONNEE_IBA2=DONNEE^RD_IBA2_PENS3§NOM_DONNEE_IBA3=DONNEE^RD_IBA3_PENS3§NOM_DONNEE_IBA4=DONNEE^RD_IBA4_PENS3§NOM_DONNEE_IBA5=DONNEE^RD_IBA5_PENS3§NOM_DONNEE_IBA6=DONNEE^RD_IBA6_PENS3§NOM_DONNEE_IBA7=DONNEE^RD_IBA7_PENS3§NOM_DONNEE_IBA8=DONNEE^RD_IBA8_PENS3§NOM_DONNEE_IBA9=DONNEE^RD_IBA9_PENS3§NOM_DONNEE_BIC=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclenchement du controle clé IBAN banque pension 3','N',NULL,'/*¿ * IBACC_PENS3_DECLENCH_CTRL :¿ * Déclenchement du controle clé IBAN banque pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	BIC_IBAN(DIC_PENSION_ALIM.RD_IBAPA_PENS3, DIC_PENSION_ALIM.RD_IBACC_PENS3, DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3, DIC_PENSION_ALIM.RD_IBA4_PENS3, DIC_PENSION_ALIM.RD_IBA5_PENS3, DIC_PENSION_ALIM.RD_IBA6_PENS3, DIC_PENSION_ALIM.RD_IBA7_PENS3, DIC_PENSION_ALIM.RD_IBA8_PENS3, DIC_PENSION_ALIM.RD_IBA9_PENS3, DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿','Déclenchement du controle clé IBAN BQE pension 3'
'*','IBAPA_PENS3_*_EXISTE','CTL','Code pays SEPA existe dans SEPAPAYS pour pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_IBAPA_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES1£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_IBAPA_PENS3","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS3","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA4_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA5_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA6_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA7_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA8_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA9_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£LONGUEUR_VAL£NOM_DONNEE=@TMP3","RESULTAT":"@TMP4£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP2£","OPERATEUR":"NEQ","OPERANDE_2":"@TMP4£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES4£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle existence de code pays SEPA dans la table SEPAPAYS pour pension 3','N',NULL,'/*¿ * IBAPA_PENS3_*_EXISTE :¿ * Contrôle existence de code pays SEPA dans la table SEPAPAYS pour pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS3 == vide) {¿	return;¿}¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 == vide) {¿	return;¿}¿TMP1 = TAB("REG_RD_SEPAPAYS", 1, 0, DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿if (TMP1 == 0) {¿	ERR("GENBQES1", DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿} else {¿	TMP2 = TAB("TAB_RD_SEPAPAYS", 1, 2, DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA4_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA5_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA6_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA7_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA8_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA9_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBAPA_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBACC_PENS3, TMP3);¿	TMP4 = LONGUEUR_VAL(TMP3);¿	if (TMP2 != TMP4) {¿		ERR("GENBQES4", DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿	}¿}¿','Code pays SEPA existe dans SEPAPAYS pour pension 3'
'*','TITBQE_PENS3_BENEF_DEFAUT','AUT','Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BENEF_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TITBQE_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_BENEF_PENS3","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TITBQE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation Titulaire du compte pension  à partir du bénéficiaire pension','O',NULL,'/*¿ * TITBQE_PENS3_BENEF_DEFAUT :¿ * Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_BENEF_PENS3 != vide && DIC_PENSION_ALIM.RD_TITBQE_PENS3 == vide) {¿	DIC_PENSION_ALIM.RD_TITBQE_PENS3 = DIC_PENSION_ALIM.RD_BENEF_PENS3;¿}¿','Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension'
'*','VALORISATION_CODES_IBAN_OPPOS','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Oppositions',NULL,'953',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODE_IBAN2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN3","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN4","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN5","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN6","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN7","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN8","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN9","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9pour Oppositions','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_OPPOS :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9pour Oppositions¿ */¿¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODE_IBAN2, DIC_TGE_OPPOSITIONS.CODE_IBAN3);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN4);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN5);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN6);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN7);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN8);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN9);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Oppositions'
'*','VALORISATION_CODES_IBAN_PENS1','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS1 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS1, DIC_PENSION_ALIM.RD_IBA3_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA4_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA5_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA6_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA7_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA8_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA9_PENS1);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1'
'*','VALORISATION_CODES_IBAN_PENS2','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS2 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_ADM_CONTRAT.RD_IBA2_PENS2, DIC_ADM_CONTRAT.RD_IBA3_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA4_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA5_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA6_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA7_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA8_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA9_PENS2);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2'
'*','VALORISATION_CODES_IBAN_PENS3','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS3 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA4_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA5_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA6_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA7_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA8_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA9_PENS3);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('BIC_PENS3_*_SEPA_CONTROLE','CINSEE_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_OBLIG_F','CODE_POSTAL_PENS3_*_OBLIG_F','DATE_PENSION1_*_OBLIG','DATE_PENSION2_*_OBLIG','DATE_PENSION3_*_OBLIG','IBA2_PENS3_BQE_OBLIG','IBA3_PENS3_BQE_OBLIG','IBACC_PENS3_DECLENCH_CTRL','IBAPA_PENS3_*_EXISTE','TITBQE_PENS3_BENEF_DEFAUT','VALORISATION_CODES_IBAN_OPPOS','VALORISATION_CODES_IBAN_PENS1','VALORISATION_CODES_IBAN_PENS2','VALORISATION_CODES_IBAN_PENS3') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','BIC_PENS3_*_SEPA_CONTROLE','CTL','BIC controle sepa pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BIC_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BIC_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":11},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":12},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":13},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£SUBSTRING_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3§INDICE_DEBUT=VALEUR^5§INDICE_FIN=VALEUR^6","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":14},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=@TMP1","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":15},{"TYPE":"SI","OPERANDE_1":"@TMP2£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":16},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":17},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES2£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":18},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":19},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":20},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£LONGUEUR_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":21},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"LT","OPERANDE_2":"VALEUR£8","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":22},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":23},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES3£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":24},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":25},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":26}]','BIC controle sepa pension 3','N',NULL,'/*¿ * BIC_PENS3_*_SEPA_CONTROLE :¿ * BIC controle sepa pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_BIC_PENS3 == vide) {¿		ERR("GENBQE03", DIC_PENSION_ALIM.RD_BIC_PENS3);¿	}¿}¿if (DIC_PENSION_ALIM.RD_BIC_PENS3 == vide) {¿	return;¿}¿TMP1 = SUBSTRING_VAL(DIC_PENSION_ALIM.RD_BIC_PENS3, 5, 6);¿TMP2 = TAB("REG_RD_SEPAPAYS", 1, 0, TMP1);¿if (TMP2 == 0) {¿	ERR("GENBQES2", DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿TMP1 = LONGUEUR_VAL(DIC_PENSION_ALIM.RD_BIC_PENS3);¿if (TMP1 < 8) {¿	ERR("GENBQES3", DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿','BIC controle sepa pension 3'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','AUT','Alimentation auto CINSEE pension 3 si unique',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"DONNEE£RD_CINSEE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"DONNEE£RD_COMMUNE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation automatique de CINSEE pension 3 si unique en fonction du CP+BUDIST','O',NULL,'/*¿ * CINSEE_PENS3_*_ALIM_SI_UNIQUE :¿ * Alimentation automatique de CINSEE pension 3 si unique en fonction du CP+BUDIST¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	TMP1 = TAB("REG_RD_NB_CINSEE", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	if (TMP1 == 1) {¿		DIC_PENSION_ALIM.RD_CINSEE_PENS3 = TAB("REG_RD_CINSEE", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿		DIC_PENSION_ALIM.RD_COMMUNE_PENS3 = TAB("REG_RD_CINSEE", 1, 1, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3, DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	}¿}¿','Alimentation auto CINSEE pension 3 si unique'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','AUT','Alimentation auto code distributeur si unique',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_CODE_DISTRI_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_CINSEE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"DONNEE£RD_COMMUNE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation automatique du code distribution si unique en fonction du CP','O',NULL,'/*¿ * CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE :¿ * Alimentation automatique du code distribution si unique en fonction du CP¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	TMP1 = TAB("REG_RD_NB_BUDIST", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	if (TMP1 == 1) {¿		DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3 = TAB("REG_RD_BUDIST", 1, 0, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿		DIC_PENSION_ALIM.RD_CINSEE_PENS3 = TAB("REG_RD_BUDIST", 1, 1, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿		DIC_PENSION_ALIM.RD_COMMUNE_PENS3 = TAB("REG_RD_BUDIST", 1, 2, DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	}¿}¿','Alimentation auto code distributeur si unique'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','CTL','Bureau distributeur obligatoire sur adresse française pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_DISTRI_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENADR54£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_DISTRI_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le bureau distributeur est obligatoire sur une Adresse française pension 3','N',NULL,'/*¿ * CODE_DISTRIB_PENS3_*_OBLIG_F :¿ * Le bureau distributeur est obligatoire sur une Adresse française pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3 == vide) {¿		ERR("GENADR54", DIC_PENSION_ALIM.RD_CODE_DISTRI_PENS3);¿	}¿}¿','Bureau distributeur obligatoire sur adresse française pension 3'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','CTL','Code postal obligatoire sur adresse française pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NOM_VOIE_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"LT","OPERANDE_2":"VALEUR£01000","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_CODE_POSTAL_PENS3","OPERATEUR":"GE","OPERANDE_2":"VALEUR£99000","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENADR71£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_POSTAL_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le Code postal est obligatoire sur une Adresse française pension 3','N',NULL,'/*¿ * CODE_POSTAL_PENS3_*_OBLIG_F :¿ * Le Code postal est obligatoire sur une Adresse française pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_NOM_VOIE_PENS3 != vide) {¿	if ((DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 < "01000" || DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3 >= 99000)) {¿		ERR("GENADR71", DIC_PENSION_ALIM.RD_CODE_POSTAL_PENS3);¿	}¿}¿','Code postal obligatoire sur adresse française pension 3'
'*','DATE_PENSION1_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION1_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS1 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS1 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','DATE_PENSION2_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION2_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS2 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS2 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','DATE_PENSION3_*_OBLIG','CTL','La date de début de pension est obligatoire si un montant est saisi',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DSDPEN_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','La date de début de pension est obligatoire si un montant est saisi','N',NULL,'/*¿ * DATE_PENSION3_*_OBLIG :¿ * La date de début de pension est obligatoire si un montant est saisi¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_DSDPEN_PENS3 == vide) {¿		ERR("GEN00005", donneecourante);¿	}¿}¿','La date de début de pension est obligatoire si un montant est saisi'
'*','IBA2_PENS3_BQE_OBLIG','CTL','IBA2 obligatoire sepa pension 3',NULL,'955',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','IBA2 obligatoire sepa pension 3','N',NULL,'/*¿ * IBA2_PENS3_BQE_OBLIG :¿ * IBA2 obligatoire sepa pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_PENSION_ALIM.RD_IBACC_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_IBA2_PENS3 == vide) {¿		ERR("GENBQE03", donneecourante);¿	}¿}¿','IBA2 obligatoire sepa pension 3'
'*','IBA3_PENS3_BQE_OBLIG','CTL','IBA3 obligatoire sepa Pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBA3_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','IBA3 obligatoire sepa Pension 3','N',NULL,'/*¿ * IBA3_PENS3_BQE_OBLIG :¿ * IBA3 obligatoire sepa Pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_PENSION_ALIM.RD_IBACC_PENS3 != vide) {¿	if (DIC_PENSION_ALIM.RD_IBA3_PENS3 == vide) {¿		ERR("GENBQE03", donneecourante);¿	}¿}¿','IBA3 obligatoire sepa Pension 3'
'*','IBACC_PENS3_DECLENCH_CTRL','CTL','Déclenchement du controle clé IBAN BQE pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCTL","OPERANDE_2":"FONCTION£BIC_IBAN£NOM_DONNEE_IBAPA=DONNEE^RD_IBAPA_PENS3§NOM_DONNEE_IBACC=DONNEE^RD_IBACC_PENS3§NOM_DONNEE_IBA2=DONNEE^RD_IBA2_PENS3§NOM_DONNEE_IBA3=DONNEE^RD_IBA3_PENS3§NOM_DONNEE_IBA4=DONNEE^RD_IBA4_PENS3§NOM_DONNEE_IBA5=DONNEE^RD_IBA5_PENS3§NOM_DONNEE_IBA6=DONNEE^RD_IBA6_PENS3§NOM_DONNEE_IBA7=DONNEE^RD_IBA7_PENS3§NOM_DONNEE_IBA8=DONNEE^RD_IBA8_PENS3§NOM_DONNEE_IBA9=DONNEE^RD_IBA9_PENS3§NOM_DONNEE_BIC=DONNEE^RD_BIC_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclenchement du controle clé IBAN banque pension 3','N',NULL,'/*¿ * IBACC_PENS3_DECLENCH_CTRL :¿ * Déclenchement du controle clé IBAN banque pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	BIC_IBAN(DIC_PENSION_ALIM.RD_IBAPA_PENS3, DIC_PENSION_ALIM.RD_IBACC_PENS3, DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3, DIC_PENSION_ALIM.RD_IBA4_PENS3, DIC_PENSION_ALIM.RD_IBA5_PENS3, DIC_PENSION_ALIM.RD_IBA6_PENS3, DIC_PENSION_ALIM.RD_IBA7_PENS3, DIC_PENSION_ALIM.RD_IBA8_PENS3, DIC_PENSION_ALIM.RD_IBA9_PENS3, DIC_PENSION_ALIM.RD_BIC_PENS3);¿}¿','Déclenchement du controle clé IBAN BQE pension 3'
'*','IBAPA_PENS3_*_EXISTE','CTL','Code pays SEPA existe dans SEPAPAYS pour pension 3',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_MNTPEN_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FIN","OPERANDE_2":"££","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_IBAPA_PENS3","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES1£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_IBAPA_PENS3","RESULTAT":"@TMP2£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS3","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA4_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA5_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA6_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA7_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA8_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA9_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBACC_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"@TMP3£","RESULTAT":"@TMP3£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"FCT","OPERANDE_2":"FONCTION£LONGUEUR_VAL£NOM_DONNEE=@TMP3","RESULTAT":"@TMP4£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP2£","OPERATEUR":"NEQ","OPERANDE_2":"@TMP4£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENBQES4£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle existence de code pays SEPA dans la table SEPAPAYS pour pension 3','N',NULL,'/*¿ * IBAPA_PENS3_*_EXISTE :¿ * Contrôle existence de code pays SEPA dans la table SEPAPAYS pour pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_MNTPEN_PENS3 == vide) {¿	return;¿}¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 == vide) {¿	return;¿}¿TMP1 = TAB("REG_RD_SEPAPAYS", 1, 0, DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿if (TMP1 == 0) {¿	ERR("GENBQES1", DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿} else {¿	TMP2 = TAB("TAB_RD_SEPAPAYS", 1, 2, DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA4_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA5_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA6_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA7_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA8_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBA9_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBAPA_PENS3, TMP3);¿	TMP3 = CONCAT(DIC_PENSION_ALIM.RD_IBACC_PENS3, TMP3);¿	TMP4 = LONGUEUR_VAL(TMP3);¿	if (TMP2 != TMP4) {¿		ERR("GENBQES4", DIC_PENSION_ALIM.RD_IBAPA_PENS3);¿	}¿}¿','Code pays SEPA existe dans SEPAPAYS pour pension 3'
'*','TITBQE_PENS3_BENEF_DEFAUT','AUT','Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension',NULL,'953',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_BENEF_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TITBQE_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_BENEF_PENS3","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_TITBQE_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation Titulaire du compte pension  à partir du bénéficiaire pension','O',NULL,'/*¿ * TITBQE_PENS3_BENEF_DEFAUT :¿ * Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension 3¿ */¿¿if (DIC_PENSION_ALIM.RD_BENEF_PENS3 != vide && DIC_PENSION_ALIM.RD_TITBQE_PENS3 == vide) {¿	DIC_PENSION_ALIM.RD_TITBQE_PENS3 = DIC_PENSION_ALIM.RD_BENEF_PENS3;¿}¿','Alimentation Titulaire du compte pension 3 à partir du bénéficiaire pension'
'*','VALORISATION_CODES_IBAN_OPPOS','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Oppositions',NULL,'953',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODE_IBAN2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN3","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN4","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN5","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN6","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN7","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN8","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODES_IBAN","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£CODE_IBAN9","RESULTAT":"DONNEE£CODES_IBAN","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9pour Oppositions','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_OPPOS :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9pour Oppositions¿ */¿¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODE_IBAN2, DIC_TGE_OPPOSITIONS.CODE_IBAN3);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN4);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN5);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN6);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN7);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN8);¿DIC_TGE_OPPOSITIONS.CODES_IBAN = CONCAT(DIC_TGE_OPPOSITIONS.CODES_IBAN, DIC_TGE_OPPOSITIONS.CODE_IBAN9);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Oppositions'
'*','VALORISATION_CODES_IBAN_PENS1','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS1","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS1","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS1","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS1 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS1, DIC_PENSION_ALIM.RD_IBA3_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA4_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA5_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA6_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA7_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA8_PENS1);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS1, DIC_PENSION_ALIM.RD_IBA9_PENS1);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 1'
'*','VALORISATION_CODES_IBAN_PENS2','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS2","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS2","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS2","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS2 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_ADM_CONTRAT.RD_IBA2_PENS2, DIC_ADM_CONTRAT.RD_IBA3_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA4_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA5_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA6_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA7_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA8_PENS2);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS2, DIC_ADM_CONTRAT.RD_IBA9_PENS2);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 2'
'*','VALORISATION_CODES_IBAN_PENS3','AUT','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3',NULL,'955',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBA2_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA3_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA4_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA5_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA6_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA7_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA8_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_CODES_IBAN_PENS3","OPERATEUR":"CONCAT","OPERANDE_2":"DONNEE£RD_IBA9_PENS3","RESULTAT":"DONNEE£RD_CODES_IBAN_PENS3","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3','O',NULL,'/*¿ * VALORISATION_CODES_IBAN_PENS3 :¿ * Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3¿ */¿¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_IBA2_PENS3, DIC_PENSION_ALIM.RD_IBA3_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA4_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA5_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA6_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA7_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA8_PENS3);¿DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3 = CONCAT(DIC_PENSION_ALIM.RD_CODES_IBAN_PENS3, DIC_PENSION_ALIM.RD_IBA9_PENS3);¿','Valorisation du code IBAN par concaténation code_IBAN2 à 9 pour Pension 3'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('BIC_PENS3_*_SEPA_CONTROLE','CINSEE_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_OBLIG_F','CODE_POSTAL_PENS3_*_OBLIG_F','DATE_PENSION1_*_OBLIG','DATE_PENSION2_*_OBLIG','DATE_PENSION3_*_OBLIG','IBA2_PENS3_BQE_OBLIG','IBA3_PENS3_BQE_OBLIG','IBACC_PENS3_DECLENCH_CTRL','IBAPA_PENS3_*_EXISTE','TITBQE_PENS3_BENEF_DEFAUT','VALORISATION_CODES_IBAN_OPPOS','VALORISATION_CODES_IBAN_PENS1','VALORISATION_CODES_IBAN_PENS2','VALORISATION_CODES_IBAN_PENS3') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','BIC_PENS3_*_SEPA_CONTROLE','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide££µNEQ',NULL,NULL,'2','4'
'*','BIC_PENS3_*_SEPA_CONTROLE','2',NULL,'DONNEE£RD_BIC_PENS3µ@vide££µEQ',NULL,NULL,'3','4'
'*','BIC_PENS3_*_SEPA_CONTROLE','3','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','4',NULL,'DONNEE£RD_BIC_PENS3µ@vide££µEQ',NULL,NULL,'5','6'
'*','BIC_PENS3_*_SEPA_CONTROLE','5','££','FIN','££','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','6','££','FCT','FONCTION£SUBSTRING_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3§INDICE_DEBUT=VALEUR^5§INDICE_FIN=VALEUR^6','@TMP1£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','7','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=@TMP1','@TMP2£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','8',NULL,'@TMP2£µVALEUR£0µEQ',NULL,NULL,'9','10'
'*','BIC_PENS3_*_SEPA_CONTROLE','9','££','ERR','CODEERREUR£GENBQES2£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','10','££','FCT','FONCTION£LONGUEUR_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3','@TMP1£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','11',NULL,'@TMP1£µVALEUR£8µLT',NULL,NULL,'12','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','12','££','ERR','CODEERREUR£GENBQES3£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','@TMP1£',NULL,NULL
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','3',NULL,'@TMP1£µVALEUR£1µEQ',NULL,NULL,'4','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','DONNEE£RD_CINSEE_PENS3',NULL,NULL
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','DONNEE£RD_COMMUNE_PENS3','FIN','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','@TMP1£',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','3',NULL,'@TMP1£µVALEUR£1µEQ',NULL,NULL,'4','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_CODE_DISTRI_PENS3',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_CINSEE_PENS3',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','6','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_COMMUNE_PENS3','FIN','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','2',NULL,'DONNEE£RD_CODE_DISTRI_PENS3µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','3','££','ERR','CODEERREUR£GENADR54£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_DISTRI_PENS3','£','FIN','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','1',NULL,'DONNEE£RD_NOM_VOIE_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','2',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µVALEUR£01000µLTµDONNEE£RD_CODE_POSTAL_PENS3µVALEUR£99000µGEµ#OU#',NULL,NULL,'4','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','4','££','ERR','CODEERREUR£GENADR71£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_POSTAL_PENS3','£','FIN','FIN'
'*','DATE_PENSION1_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS1µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION1_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS1µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION1_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','DATE_PENSION2_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS2µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION2_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS2µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION2_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','DATE_PENSION3_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION3_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS3µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION3_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBA2_PENS3_BQE_OBLIG','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_IBACC_PENS3µ@vide£µNEQµ#ET#',NULL,NULL,'3','FIN'
'*','IBA2_PENS3_BQE_OBLIG','3',NULL,'DONNEE£RD_IBA2_PENS3µ@vide£µEQ',NULL,NULL,'4','FIN'
'*','IBA2_PENS3_BQE_OBLIG','4','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBA3_PENS3_BQE_OBLIG','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_IBACC_PENS3µ@vide£µNEQµ#ET#',NULL,NULL,'3','FIN'
'*','IBA3_PENS3_BQE_OBLIG','3',NULL,'DONNEE£RD_IBA3_PENS3µ@vide£µEQ',NULL,NULL,'4','FIN'
'*','IBA3_PENS3_BQE_OBLIG','4','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBACC_PENS3_DECLENCH_CTRL','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','IBACC_PENS3_DECLENCH_CTRL','2','££','FCTL','FONCTION£BIC_IBAN£NOM_DONNEE_IBAPA=DONNEE^RD_IBAPA_PENS3§NOM_DONNEE_IBACC=DONNEE^RD_IBACC_PENS3§NOM_DONNEE_IBA2=DONNEE^RD_IBA2_PENS3§NOM_DONNEE_IBA3=DONNEE^RD_IBA3_PENS3§NOM_DONNEE_IBA4=DONNEE^RD_IBA4_PENS3§NOM_DONNEE_IBA5=DONNEE^RD_IBA5_PENS3§NOM_DONNEE_IBA6=DONNEE^RD_IBA6_PENS3§NOM_DONNEE_IBA7=DONNEE^RD_IBA7_PENS3§NOM_DONNEE_IBA8=DONNEE^RD_IBA8_PENS3§NOM_DONNEE_IBA9=DONNEE^RD_IBA9_PENS3§NOM_DONNEE_BIC=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','1',NULL,'DONNEE£RD_MNTPEN_PENS3µ@vide£µEQ',NULL,NULL,'2','3'
'*','IBAPA_PENS3_*_EXISTE','2','££','FIN','££','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','3',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µEQ',NULL,NULL,'4','5'
'*','IBAPA_PENS3_*_EXISTE','4','££','FIN','££','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_IBAPA_PENS3','@TMP1£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','6',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'7','8'
'*','IBAPA_PENS3_*_EXISTE','7','££','ERR','CODEERREUR£GENBQES1£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','8','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_IBAPA_PENS3','@TMP2£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','9','DONNEE£RD_IBA2_PENS3','CONCAT','DONNEE£RD_IBA3_PENS3','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','10','DONNEE£RD_IBA4_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','11','DONNEE£RD_IBA5_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','12','DONNEE£RD_IBA6_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','13','DONNEE£RD_IBA7_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','14','DONNEE£RD_IBA8_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','15','DONNEE£RD_IBA9_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','16','DONNEE£RD_IBAPA_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','17','DONNEE£RD_IBACC_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','18','££','FCT','FONCTION£LONGUEUR_VAL£NOM_DONNEE=@TMP3','@TMP4£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','19',NULL,'@TMP2£µ@TMP4£µNEQ',NULL,NULL,'20','FIN'
'*','IBAPA_PENS3_*_EXISTE','20','££','ERR','CODEERREUR£GENBQES4£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3','£','FIN','FIN'
'*','TITBQE_PENS3_BENEF_DEFAUT','1',NULL,'DONNEE£RD_BENEF_PENS3µ@vide£µNEQµDONNEE£RD_TITBQE_PENS3µ@vide£µEQµ#ET#',NULL,NULL,'3','FIN'
'*','TITBQE_PENS3_BENEF_DEFAUT','3','DONNEE£RD_BENEF_PENS3','VAL','££','DONNEE£RD_TITBQE_PENS3','FIN','FIN'
'*','VALORISATION_CODES_IBAN_OPPOS','1','DONNEE£CODE_IBAN2','CONCAT','DONNEE£CODE_IBAN3','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','2','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN4','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','3','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN5','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','4','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN6','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','5','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN7','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','6','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN8','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','7','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN9','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','1','DONNEE£RD_IBA2_PENS1','CONCAT','DONNEE£RD_IBA3_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','2','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA4_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','3','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA5_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','4','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA6_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','5','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA7_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','6','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA8_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','7','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA9_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','1','DONNEE£RD_IBA2_PENS2','CONCAT','DONNEE£RD_IBA3_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','2','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA4_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','3','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA5_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','4','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA6_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','5','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA7_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','6','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA8_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','7','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA9_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','1','DONNEE£RD_IBA2_PENS3','CONCAT','DONNEE£RD_IBA3_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','2','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA4_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','3','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA5_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','4','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA6_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','5','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA7_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','6','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA8_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','7','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA9_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('BIC_PENS3_*_SEPA_CONTROLE','CINSEE_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','CODE_DISTRIB_PENS3_*_OBLIG_F','CODE_POSTAL_PENS3_*_OBLIG_F','DATE_PENSION1_*_OBLIG','DATE_PENSION2_*_OBLIG','DATE_PENSION3_*_OBLIG','IBA2_PENS3_BQE_OBLIG','IBA3_PENS3_BQE_OBLIG','IBACC_PENS3_DECLENCH_CTRL','IBAPA_PENS3_*_EXISTE','TITBQE_PENS3_BENEF_DEFAUT','VALORISATION_CODES_IBAN_OPPOS','VALORISATION_CODES_IBAN_PENS1','VALORISATION_CODES_IBAN_PENS2','VALORISATION_CODES_IBAN_PENS3') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','BIC_PENS3_*_SEPA_CONTROLE','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide££µNEQ',NULL,NULL,'2','4'
'*','BIC_PENS3_*_SEPA_CONTROLE','2',NULL,'DONNEE£RD_BIC_PENS3µ@vide££µEQ',NULL,NULL,'3','4'
'*','BIC_PENS3_*_SEPA_CONTROLE','3','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','4',NULL,'DONNEE£RD_BIC_PENS3µ@vide££µEQ',NULL,NULL,'5','6'
'*','BIC_PENS3_*_SEPA_CONTROLE','5','££','FIN','££','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','6','££','FCT','FONCTION£SUBSTRING_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3§INDICE_DEBUT=VALEUR^5§INDICE_FIN=VALEUR^6','@TMP1£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','7','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=@TMP1','@TMP2£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','8',NULL,'@TMP2£µVALEUR£0µEQ',NULL,NULL,'9','10'
'*','BIC_PENS3_*_SEPA_CONTROLE','9','££','ERR','CODEERREUR£GENBQES2£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','10','££','FCT','FONCTION£LONGUEUR_VAL£NOM_DONNEE=DONNEE^RD_BIC_PENS3','@TMP1£',NULL,NULL
'*','BIC_PENS3_*_SEPA_CONTROLE','11',NULL,'@TMP1£µVALEUR£8µLT',NULL,NULL,'12','FIN'
'*','BIC_PENS3_*_SEPA_CONTROLE','12','££','ERR','CODEERREUR£GENBQES3£NOM_DONNEE_FOCUS=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','@TMP1£',NULL,NULL
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','3',NULL,'@TMP1£µVALEUR£1µEQ',NULL,NULL,'4','FIN'
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','DONNEE£RD_CINSEE_PENS3',NULL,NULL
'*','CINSEE_PENS3_*_ALIM_SI_UNIQUE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_CINSEE§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3§PARAM_2=DONNEE^RD_CODE_DISTRI_PENS3','DONNEE£RD_COMMUNE_PENS3','FIN','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','@TMP1£',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','3',NULL,'@TMP1£µVALEUR£1µEQ',NULL,NULL,'4','FIN'
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_CODE_DISTRI_PENS3',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^1§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_CINSEE_PENS3',NULL,NULL
'*','CODE_DISTRIB_PENS3_*_ALIM_SI_UNIQUE','6','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_BUDIST§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_CODE_POSTAL_PENS3','DONNEE£RD_COMMUNE_PENS3','FIN','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','1',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','2',NULL,'DONNEE£RD_CODE_DISTRI_PENS3µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','CODE_DISTRIB_PENS3_*_OBLIG_F','3','££','ERR','CODEERREUR£GENADR54£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_DISTRI_PENS3','£','FIN','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','1',NULL,'DONNEE£RD_NOM_VOIE_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','2',NULL,'DONNEE£RD_CODE_POSTAL_PENS3µVALEUR£01000µLTµDONNEE£RD_CODE_POSTAL_PENS3µVALEUR£99000µGEµ#OU#',NULL,NULL,'4','FIN'
'*','CODE_POSTAL_PENS3_*_OBLIG_F','4','££','ERR','CODEERREUR£GENADR71£NOM_DONNEE_FOCUS=DONNEE^RD_CODE_POSTAL_PENS3','£','FIN','FIN'
'*','DATE_PENSION1_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS1µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION1_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS1µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION1_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','DATE_PENSION2_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS2µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION2_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS2µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION2_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','DATE_PENSION3_*_OBLIG','1',NULL,'DONNEE£RD_MNTPEN_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','DATE_PENSION3_*_OBLIG','2',NULL,'DONNEE£RD_DSDPEN_PENS3µ@vide£µEQ',NULL,NULL,'3','FIN'
'*','DATE_PENSION3_*_OBLIG','3','££','ERR','CODEERREUR£GEN00005£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBA2_PENS3_BQE_OBLIG','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_IBACC_PENS3µ@vide£µNEQµ#ET#',NULL,NULL,'3','FIN'
'*','IBA2_PENS3_BQE_OBLIG','3',NULL,'DONNEE£RD_IBA2_PENS3µ@vide£µEQ',NULL,NULL,'4','FIN'
'*','IBA2_PENS3_BQE_OBLIG','4','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBA3_PENS3_BQE_OBLIG','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_IBACC_PENS3µ@vide£µNEQµ#ET#',NULL,NULL,'3','FIN'
'*','IBA3_PENS3_BQE_OBLIG','3',NULL,'DONNEE£RD_IBA3_PENS3µ@vide£µEQ',NULL,NULL,'4','FIN'
'*','IBA3_PENS3_BQE_OBLIG','4','££','ERR','CODEERREUR£GENBQE03£NOM_DONNEE_FOCUS=@donneecourante^','£','FIN','FIN'
'*','IBACC_PENS3_DECLENCH_CTRL','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','IBACC_PENS3_DECLENCH_CTRL','2','££','FCTL','FONCTION£BIC_IBAN£NOM_DONNEE_IBAPA=DONNEE^RD_IBAPA_PENS3§NOM_DONNEE_IBACC=DONNEE^RD_IBACC_PENS3§NOM_DONNEE_IBA2=DONNEE^RD_IBA2_PENS3§NOM_DONNEE_IBA3=DONNEE^RD_IBA3_PENS3§NOM_DONNEE_IBA4=DONNEE^RD_IBA4_PENS3§NOM_DONNEE_IBA5=DONNEE^RD_IBA5_PENS3§NOM_DONNEE_IBA6=DONNEE^RD_IBA6_PENS3§NOM_DONNEE_IBA7=DONNEE^RD_IBA7_PENS3§NOM_DONNEE_IBA8=DONNEE^RD_IBA8_PENS3§NOM_DONNEE_IBA9=DONNEE^RD_IBA9_PENS3§NOM_DONNEE_BIC=DONNEE^RD_BIC_PENS3','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','1',NULL,'DONNEE£RD_MNTPEN_PENS3µ@vide£µEQ',NULL,NULL,'2','3'
'*','IBAPA_PENS3_*_EXISTE','2','££','FIN','££','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','3',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µEQ',NULL,NULL,'4','5'
'*','IBAPA_PENS3_*_EXISTE','4','££','FIN','££','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','5','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^RD_IBAPA_PENS3','@TMP1£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','6',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'7','8'
'*','IBAPA_PENS3_*_EXISTE','7','££','ERR','CODEERREUR£GENBQES1£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3','£','FIN','FIN'
'*','IBAPA_PENS3_*_EXISTE','8','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^TAB_RD_SEPAPAYS§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^2§PARAM_1=DONNEE^RD_IBAPA_PENS3','@TMP2£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','9','DONNEE£RD_IBA2_PENS3','CONCAT','DONNEE£RD_IBA3_PENS3','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','10','DONNEE£RD_IBA4_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','11','DONNEE£RD_IBA5_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','12','DONNEE£RD_IBA6_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','13','DONNEE£RD_IBA7_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','14','DONNEE£RD_IBA8_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','15','DONNEE£RD_IBA9_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','16','DONNEE£RD_IBAPA_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','17','DONNEE£RD_IBACC_PENS3','CONCAT','@TMP3£','@TMP3£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','18','££','FCT','FONCTION£LONGUEUR_VAL£NOM_DONNEE=@TMP3','@TMP4£',NULL,NULL
'*','IBAPA_PENS3_*_EXISTE','19',NULL,'@TMP2£µ@TMP4£µNEQ',NULL,NULL,'20','FIN'
'*','IBAPA_PENS3_*_EXISTE','20','££','ERR','CODEERREUR£GENBQES4£NOM_DONNEE_FOCUS=DONNEE^RD_IBAPA_PENS3','£','FIN','FIN'
'*','TITBQE_PENS3_BENEF_DEFAUT','1',NULL,'DONNEE£RD_BENEF_PENS3µ@vide£µNEQµDONNEE£RD_TITBQE_PENS3µ@vide£µEQµ#ET#',NULL,NULL,'3','FIN'
'*','TITBQE_PENS3_BENEF_DEFAUT','3','DONNEE£RD_BENEF_PENS3','VAL','££','DONNEE£RD_TITBQE_PENS3','FIN','FIN'
'*','VALORISATION_CODES_IBAN_OPPOS','1','DONNEE£CODE_IBAN2','CONCAT','DONNEE£CODE_IBAN3','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','2','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN4','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','3','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN5','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','4','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN6','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','5','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN7','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','6','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN8','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_OPPOS','7','DONNEE£CODES_IBAN','CONCAT','DONNEE£CODE_IBAN9','DONNEE£CODES_IBAN',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','1','DONNEE£RD_IBA2_PENS1','CONCAT','DONNEE£RD_IBA3_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','2','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA4_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','3','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA5_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','4','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA6_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','5','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA7_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','6','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA8_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS1','7','DONNEE£RD_CODES_IBAN_PENS1','CONCAT','DONNEE£RD_IBA9_PENS1','DONNEE£RD_CODES_IBAN_PENS1',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','1','DONNEE£RD_IBA2_PENS2','CONCAT','DONNEE£RD_IBA3_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','2','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA4_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','3','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA5_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','4','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA6_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','5','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA7_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','6','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA8_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS2','7','DONNEE£RD_CODES_IBAN_PENS2','CONCAT','DONNEE£RD_IBA9_PENS2','DONNEE£RD_CODES_IBAN_PENS2',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','1','DONNEE£RD_IBA2_PENS3','CONCAT','DONNEE£RD_IBA3_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','2','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA4_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','3','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA5_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','4','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA6_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','5','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA7_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','6','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA8_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
'*','VALORISATION_CODES_IBAN_PENS3','7','DONNEE£RD_CODES_IBAN_PENS3','CONCAT','DONNEE£RD_IBA9_PENS3','DONNEE£RD_CODES_IBAN_PENS3',NULL,NULL
##
TAG_CHARSET=@€éèç
##
REQUETESIMPLE
==
CALL AFFECT_REQ.principal('SEC_LOC') 
##
REQUETESIMPLE
==
CALL AFFECT_REQ.principal('GAP_NAT_TRT_PAIE_SEC_EXP') 
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Gestion des groupes de signataires','Ext.adp.Modules.Signature.GroupeSignataires',null,'true')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Modules.Signature.GroupeSignataires','Ext.adp.Modules.Signature.SignataireMVVM')
##
RELOAD_TGE_ALIM_PERIODE_INDIV
=SQL=
DECLARE
CURSOR cur_pac IS SELECT NUMPAC,PERIODEENCOURS FROM TGE_REF_PAC;
BEGIN
  FOR current_pac IN cur_pac
  LOOP
    TGE_ALIM_PERIODE_INDIV(0, current_pac.NUMPAC, '200001', null, null);
  END LOOP;
END;
##
TAG_CHARSET=@€éèç
##
SYS_STATS_REST_API_DELAY
=SQL IFNOTEXIST=SYS_STATS_REST_API_DELAY=
CREATE TABLE SYS_STATS_REST_API_DELAY (ID_TRACE NUMBER(38) NOT NULL, URI VARCHAR2(2000) NOT NULL, DATE_ACTION TIMESTAMP(6) NOT NULL, DUREE NUMBER(10), SM_TRANSACTION_ID VARCHAR2(500), CONSUMER_APP_OID VARCHAR2(500), ASSOCIATE_OID VARCHAR2(500), ROLE_CODE VARCHAR2(500), OTHER_HEADERS CLOB, PARAMETERS CLOB, HTTP_STATUT VARCHAR2(3), CONSTRAINT PK_SYS_STATS_REST_API_DELAY PRIMARY KEY (ID_TRACE))
##
TAG_CHARSET=@€éèç
##
SYS_STATS_REST_API_DELAY_SEQUENCE
=SQL IF_SEQUENCE_NOTEXIST=SYS_STATS_REST_API_DELAY_SEQUENCE=
CREATE SEQUENCE SYS_STATS_REST_API_DELAY_SEQUENCE  START WITH 1  INCREMENT BY 1 NOCACHE NOCYCLE
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR='ACTIVE_SURVEILLANCE_LENTEURS_REST_API'
'SYS', 'ACTIVE_SURVEILLANCE_LENTEURS_REST_API', '5', 'Entier', 'Permet d''activer les traces liées au temps de traitement des requêtes API (UX et Marketplace) : <0 -> On trace tout, =0 -> Aucune trace, >x -> On trace les requêtes API dont le temps de traitement est supérieurs ou égal à x secondes.'
##
STD_TABDESCCOL
==
DELETE FROM STD_TABDESCCOL WHERE IDENT='GA_EDITIONS_GAP'
'GA_EDITIONS_GAP','0','Code','O','O','O','O',NULL,NULL,NULL,'CODE','X','10','N',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'1','N',NULL
'GA_EDITIONS_GAP','1','Libellé','N','N','O','O',NULL,NULL,NULL,'LIBELLE','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'2','N',NULL
'GA_EDITIONS_GAP','2','Type de document','N','N','O','O',NULL,NULL,NULL,'TYPE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'3','N',NULL
'GA_EDITIONS_GAP','3','Données salarié (O/N)','N','N','N','O',NULL,NULL,NULL,'SAL_DATA','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','4','Données contrat (O/N)','N','N','N','O',NULL,NULL,NULL,'CNT_DATA','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','5','DocServ (O/N)','N','N','N','O',NULL,NULL,NULL,'IS_DOCSERV','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','6','Asynchrone (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODE_ASYNCHRONE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'4','N',NULL
'GA_EDITIONS_GAP','7','Dispo collab (O/N)','N','N','N','O',NULL,NULL,NULL,'IS_DISPO_COLLAB','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','8','Description','N','N','N','O',NULL,NULL,NULL,'DESCRIPTION','X','200','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','9','Chemin de l''image','N','N','N','O',NULL,NULL,NULL,'IMG_SPECIMEN_PATH','X','100','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'0','N',NULL
'GA_EDITIONS_GAP','10','Nature de contrat','N','N','O','O',NULL,NULL,NULL,'NATCNT','X','5','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'5','N',NULL
'GA_EDITIONS_GAP','11','Embauche (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_EMBAUCHE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'6','N',NULL
'GA_EDITIONS_GAP','12','Renouvel. CDD (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_RENOUVEL_CDD','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'7','N',NULL
'GA_EDITIONS_GAP','13','Transfo. CDD/CDI (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_TRANSFO_CDD_CDI','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'8','N',NULL
'GA_EDITIONS_GAP','14','Modif. contrat (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_CONTRAT','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'9','N',NULL
'GA_EDITIONS_GAP','15','Modif. affectation (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_AFFECTATION','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'10','N',NULL
'GA_EDITIONS_GAP','16','Modif. classification (O/','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_CLASSIFICATION','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'11','N',NULL
'GA_EDITIONS_GAP','17','Modif. horaires (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_HORAIRES','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'12','N',NULL
'GA_EDITIONS_GAP','18','Modif. rémunération (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_APPOINTEMENT','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'13','N',NULL
'GA_EDITIONS_GAP','19','Modif. infos DSN (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_MODIF_DSN','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'14','N',NULL
'GA_EDITIONS_GAP','20','Départ (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_DEPART','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'15','N',NULL
'GA_EDITIONS_GAP','21','Signature (O/N)','N','N','O','O',NULL,NULL,NULL,'IS_SIGNATURE','X','1','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'16','N',NULL
'GA_EDITIONS_GAP','22','Sous-type de document','N','N','O','O',NULL,NULL,NULL,'SOUSTYPE','X','20','O',NULL,NULL,NULL,'0','0',NULL,NULL,NULL,NULL,'17','N',NULL
##
STD_TABIDENT
==
DELETE FROM STD_TABIDENT WHERE IDENT='GA_EDITIONS_GAP'
'GA_EDITIONS_GAP','Editions GAP','GA_EDITIONS_GAP','U',NULL,'TG','O','N','N',NULL,'0','0'
##
SYS_AIDE_DYN_2
==
delete from SYS_AIDE_DYN_2 where sujet = upper('Ext.adp.Modules.Signature.SuiviDocumentsEtSignatures') and CODLANG = 'fr_fr' and type='publique'
'fr_fr','EXT.ADP.MODULES.SIGNATURE.SUIVIDOCUMENTSETSIGNATURES','<h3>Filtres</h3>La liste des signataires proposée dans le filtre est constituée à partir de la liste des procédures de signature électronique restituée dans le tableau.<br><br><h3>Boutons de tableau<br></h3>Le bouton "AFFICHER" met à jour le statut d''édition. Il ne génère pas d''appel à Document Container.<br><br>Le bouton "LANCER / RELANCER LES PROCéDURES SÉLÉCTIONNÉES" lance dans Document Container les procédures sélectionnées du tableau, c''est-à-dire pour lesquelles la fusée a été activée.<br><br>Le bouton "RAFRAÎCHIR LES STATUTS" génère un appel en masse à Container afin de mettre à jour le statut pour toutes les procédures de signature électronique en cours.<br><br>L''export au format Excel des données du tableau peut être lancé grâce à l''icône Excel dans une feuille.<br><br><h3>Fonctionnement de l''écran<br></h3>Après qu''une édition avec signature électronique a été lancée, une ligne est ajoutée dans l''écran. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi n''est pas active, <br>la procédure de signature électronique est automatiquement lancée à Document Container. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi est active, <br>le document est téléchargeable pour modification avant son chargement par l''utilisateur au format PDF. <br>Le document chargé devra avoir le même nom que le document d''origine à l''extension près. <br>Cela garantit que le document est en relation avec la procédure initiée.<br>L''utilisateur devra ensuite lancer manuellement la procédure.<br><br>Avec les icônes de chaque ligne de gauche à droite, l''utilisateur peut respectivement : <br>- annuler la procédure, <br>- télécharger le document, <br>- charger un document modifié, <br>- consulter le détail de la procédure, <br>- modifier un signataire <br>- et sélectionner la procédure pour lancement.<br>','publique','2020-11-17 18:28:22.0'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='Ext.adp.Modules.Signature.GroupeSignataires' and IDREQUETE in (1, 2)
'Ext.adp.Modules.Signature.GroupeSignataires','1','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','NUMPAC=%1 and @SECUPAC_SANSQUOTE@', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Description,Rattaché dans l''arbre'
'Ext.adp.Modules.Signature.GroupeSignataires','2','Utilisateur','SIGN_GROUPE_SIGNATAIRES_DESC D','D.GROUPE_SIGNATAIRES,D.LIBELLE,D.NUMPAC,D.DESCRIPTION,case when (select count(1) from STD_STRUC_ARBRE A where A.GROUPE_SIGNATAIRES = D.GROUPE_SIGNATAIRES) > 0 then ''Oui'' else ''Non'' end','GROUPE_SIGNATAIRES,LIBELLE','@SECUPAC_SANSQUOTE@ or D.NUMPAC is null', '0',NULL,'GROUPE_SIGNATAIRES',NULL,NULL,'Groupe de signataires,Libellé,Numéro de pac,Description, Rattaché dans l''arbre'
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_40_CHEVAUCHEMENT
=SQL=
create or replace PROCEDURE TGE_CONTROLE_40_CHEVAUCHEMENT (P_LOGIN IN VARCHAR2, P_DATE_IMPORT IN VARCHAR2, P_NUMLIGNE IN VARCHAR2, P_CODLANG IN VARCHAR2) AS 
 /********************************************************************************
 Version     : V5.05.003
 *********************************************************************************/
 
 dateDebutSQL  VARCHAR2(20);                      --date fin import_absence
 dateFinSQL    VARCHAR2(20);                      --date fin import_absence
 cod_erreur    VARCHAR2(10);                      --code anomalie
 msg           VARCHAR(1000);                     --Message d'ano namlie
 typ_msg       VARCHAR2(10);                      --type de message ERROR ou WARNING
 varsys        VARCHAR2(100);                     --boolean varsys CTRL_ABS_CHEVAUCH
 ctrlWhere     VARCHAR2(2000) ;                   --requet SELECT pour controler le chevauchement
 updatesql     VARCHAR2(2000);                    --requete d'insertion de ERROR/WARNING
 C_FORMAT_DATE CONSTANT VARCHAR(10) :='YYYYMMDD'; --format date
 iterChev      NUMBER               :=0;          --compteur iteration absence chevauchante
 haveJ         NUMBER               :=0;          --boolean verifier si une absence type J a été traité
 firstMsg      NUMBER               :=0;
 haveMsg2demiJr NUMBER              :=0;
 accepte_2_demi_journee boolean:=false;
 type_demi_journee_meme_motif boolean:=false;
 
 ------- variable temporaire info abs. chevauché -------
 v_DATE_DEBUT TGE_ABSENCES.DATE_DEBUT%TYPE ;
 v_DATE_FIN TGE_ABSENCES.DATE_FIN%TYPE;
 v_FIN_MA TGE_ABSENCES.FIN_MA%TYPE;
 v_DEBUT_MA TGE_ABSENCES.DEBUT_MA%TYPE;
 v_MOTIF TGE_ABSENCES.MOTIF%TYPE;
 v_DEMI_JOURNEE TGE_REF_PRE.DEMI_JOURNEE%TYPE;
 v_duree VARCHAR2(100);
 --------------------------------------
 TYPE TGE_CTRL40_type_map_msg_error
 IS
 TABLE OF VARCHAR2(200) INDEX BY VARCHAR2(10);-- typer table temporère pour optimiser la recupération des erreurs */
 abs_chevauch SYS_REFCURSOR;                  -- cursor + variable absence chevauché
 prop_abs_encour TGE_CTRL40_prop_absence;     -- contient statut absence
 map_msg TGE_CTRL40_type_map_msg_error;       -- for optimization error
 inf_abs TGE_CTRL40_info_absence;             -- Objet de sauvegarde des propriété absence calculable
 tmp_record_cursor TGE_CTRL40_abs_row_cursor  :=TGE_CTRL40_abs_row_cursor(NULL,NULL,NULL,NULL,NULL,NULL);
 C_SQL_NON_DEMI_JOURNEE CONSTANT VARCHAR(200) :='and not exists (select 1 from tge_ref_pre pre  where absence.numpac=pre.numpac and absence.motif=pre.code_incident and pre.demi_journee =1 )';
 /************ CURSORS ************/
 -- Curseur des absence à contrôler
 CURSOR ABS_IMPORT
 IS
 SELECT absence.LOGIN,
 absence.DATE_IMPORT,
 absence.NUMLIGNE,
 absence.MATRICULE,
 absence.NUMPAC,
 absence.PACMAT,
 absence.PAIEZAD,
 absence.PERIODE,
 absence.TYPE_TRAITEMENT,
 absence.DATE_DEBUT,
 absence.DATE_FIN,
 absence.HEURES_TRAV,
 absence.TYPE_HEURE,
 absence.HEURES_IP,
 absence.CODE_IP,
 absence.CODE_IMPUTATION,
 absence.DOMAINE_IMP,
 absence.ORIGINE,
 absence.ERREURS,
 absence.STATUT,
 absence.WARNINGS,
 absence.DATE_EFFET,
 absence.FSED_PAIEZAD,
 MOT.DEMI_JOURNEE,
 mot.RUB_ECHANGE,
 mot.UNITE
 FROM TGE_IMPORT_INCIDENTS absence LEFT JOIN TGE_REF_PRE mot
 ON absence.CODE_IP=mot.CODE_INCIDENT AND mot.NUMPAC    =absence.NUMPAC WHERE LOGIN =P_LOGIN  AND DATE_IMPORT   =P_DATE_IMPORT AND mot.OPTION_CONSERV_HISTO='A';
 
 --Curseur des messages d'erreurs
 CURSOR error_msg_cursor
 IS SELECT coderr, liberr FROM sys_def_erreurs WHERE codlang=P_CODLANG AND CODMOD   ='TGE'
 AND coderr  IN ('TGE00172','TGE00184','TGE00187','TGE00188','TGE00198','TGE00185','TGE00186','TGE00197','TGE00295','TGE00296','TGE00297','TGE00298','TGE00344','TGE00345');
 
 BEGIN
 /**********DEBUT TRAITEMENT ***********/
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'CTRL_CHEVAUCHEMENT_40 DEBUT '||TO_CHAR(SYSTIMESTAMP, 'DD.MM.YYYY HH24:MI:SSxFF'));
 
 /** Alimentation des erreur en memoir **/
 FOR row_err IN error_msg_cursor LOOP
 map_msg(row_err.coderr):=row_err.liberr;
 END LOOP;
 
 --get varsys CTRL_ABS_CHEVAUCH
 --IF true inserer dans Erreur ELSE inserer dans Warning
 SELECT valvar INTO varsys FROM sys_varsys WHERE module ='TGE' AND CODVAR      ='CTRL_ABS_CHEVAUCH';
 IF upper(varsys)='TRUE' THEN  typ_msg :='erreurs'; ELSE typ_msg:='warnings'; END IF;
 
 /**************************************/
 /****  LOOP sur TGE_IMPORT_ABSENCES****/
 /**************************************/
 FOR absence IN ABS_IMPORT
 LOOP
 
 dateDebutSQL                  :='';
 dateFinSQL                    :='';
 iterChev                      :=0;
 tmp_record_cursor.DATE_DEBUT  :=absence.DATE_DEBUT;
 tmp_record_cursor.DATE_FIN    :=absence.DATE_FIN;
 tmp_record_cursor.UNITE       :=absence.UNITE;
 tmp_record_cursor.HEURES_IP   :=absence.HEURES_IP;
 tmp_record_cursor.DEMI_JOURNEE:=absence.DEMI_JOURNEE;
 tmp_record_cursor.RUB_ECHANGE :=absence.RUB_ECHANGE;
 
 -- get info absence
 inf_abs  := TGE_CTRL40_GET_INFO_ABSENCE(tmp_record_cursor,dateDebutSQL , dateFinSQL);
 
 -- calculer les états de l'absence
 prop_abs_encour :=TGE_CTRL40_GET_ETATS_ABSENCE(absence.HEURES_IP, absence.DEMI_JOURNEE, inf_abs, dateDebutSQL, dateFinSQL);
 
 /* verification date absence */
 IF dateDebutSQL IS NULL THEN dateDebutSQL := '19000102'; END IF;
 IF dateFinSQL   IS NULL THEN dateFinSQL   := '20990101'; END IF;
 
 /********************************************************/
 /* Construction de la requete controle chevauchement !! */
 /********************************************************/
 ctrlWhere :='SELECT DATE_DEBUT, DATE_FIN, FIN_MA, DEBUT_MA,MOTIF , TO_CHAR(NVL(DUREE,0)) as DUREE, DEMI_JOURNEE FROM TGE_ABSENCES absence LEFT JOIN TGE_REF_PRE mot ON absence.MOTIF=mot.CODE_INCIDENT AND mot.NUMPAC=absence.NUMPAC  WHERE MATRIC='''||absence.MATRICULE||''' AND STATUT IN (select CODE from TGE_GTA_ABS_STATUTS  where EST_ABS_ACTIVE = 1) ' ;
 ctrlWhere := ctrlWhere|| 'AND ( ( TO_DATE( ' || dateDebutSQL ||','''|| C_FORMAT_DATE ||''') between DATE_DEBUT AND DATE_FIN OR TO_DATE('||dateFinSQL||','''|| C_FORMAT_DATE ||''') between DATE_DEBUT AND DATE_FIN OR DATE_DEBUT between TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') AND TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') OR  DATE_FIN  between TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') AND TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') ) AND ';
 IF prop_abs_encour.isJourneeCompleteSurUnSeulJour   =1 OR prop_abs_encour.isEnDureeSurUnSeulJour=1 OR prop_abs_encour.isJourneCompletSurPlusieurJour=1 OR prop_abs_encour.isEnDureeSurPlusieursJour=1 THEN
 ctrlWhere :=ctrlWhere||' 1=1 ';
 ELSIF prop_abs_encour.isDemiJourneeSurUnSeulJour=1  OR prop_abs_encour.estDemiJournee=1 THEN
 ctrlWhere :=ctrlWhere||' ((DEBUT_MA=''J'' AND ( ('''|| NVL(absence.heures_ip,'0') ||'''=''0.50'' AND TO_CHAR(NVL(DUREE,0))=''14400'') OR  ''0'' = NVL(DUREE,''0'')) ) OR (DEBUT_MA in (''M'',''D'',''A'')) OR (FIN_MA in (''M'',''D'',''A'')) OR DEMI_JOURNEE = ''1'')';
 ELSIF prop_abs_encour.isMatinSurUnSeulJour =1 OR prop_abs_encour.isMatinSurPlusieursJour=1 THEN --
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA IN (''D'',''J'',''M'') AND DEBUT_MA =FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' AND FIN_MA in (''M'',''J'') AND TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') <> DATE_DEBUT ) OR (DEBUT_MA=''J'' AND FIN_MA=''M'') )';
 ELSIF prop_abs_encour.isApresMidiSurUnSeulJour      =1 OR prop_abs_encour.isApresMidiSurPlusieursJour=1 THEN--
 ctrlWhere :=ctrlWhere||' (  (DEBUT_MA in (''D'',''J'',''A'') AND DEBUT_MA= FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' AND FIN_MA=''J'') OR ( DEBUT_MA IN (''A'',''J'') and FIN_MA=''M'' and TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') <> DATE_FIN ) ) ';
 ELSIF prop_abs_encour.isStatApremdAndFinitToutJourne=1 THEN
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA in(''J'',''D'',''A'') AND DEBUT_MA= FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR (DEBUT_MA=''A'' and FIN_MA=''J'') OR ( DEBUT_MA in (''A'',''J'') AND FIN_MA=''M'' AND TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') <> DATE_FIN ) OR ( DEBUT_MA=''M'' and FIN_MA=''M'' AND DATE_FIN >  TO_DATE( '|| dateDebutSQL||' ,'''|| C_FORMAT_DATE ||''') ) )';
 ELSIF prop_abs_encour.isStartApremidiAndFinitMatin  =1 THEN
 ctrlWhere :=ctrlWhere||' ( (DEBUT_MA IN (''J'',''D'') AND DEBUT_MA=FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR ( DEBUT_MA=''M'' AND FIN_MA=''M'' AND DATE_FIN> TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''A'' AND FIN_MA=''A'' AND DATE_DEBUT > TO_DATE( '||dateFinSql||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''A'' AND FIN_MA=''M'' AND DATE_DEBUT <> TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') and DATE_FIN <> TO_DATE('||dateDebutSql ||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''J'' AND FIN_MA=''M'' AND DATE_FIN <> TO_DATE('||dateDebutSql||','''|| C_FORMAT_DATE ||''') ) )';
 ELSIF prop_abs_encour.isStartToutJourneAndFinitMatin=1 THEN
 ctrlWhere :=ctrlWhere||' ( ( DEBUT_MA IN (''J'',''D'',''M'') AND DEBUT_MA=FIN_MA '||C_SQL_NON_DEMI_JOURNEE||' ) OR ( DEBUT_MA =''A'' AND FIN_MA =''A''  AND DATE_DEBUT < TO_DATE('||dateFinSql||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA =''A'' AND FIN_MA IN (''J'',''M'') AND DATE_DEBUT <> TO_DATE('||dateFinSQL||','''|| C_FORMAT_DATE ||''') ) OR ( DEBUT_MA=''J'' AND FIN_MA=''M'' ) )';
 END IF;
 ctrlWhere :=ctrlWhere||')  ORDER BY DEBUT_MA desc';
 
 
 IF NOT prop_abs_encour.erreur=1 THEN
 --parcourir les absences en cheuvauchement pour inserer les erreurs/warnings
 OPEN abs_chevauch FOR ctrlWhere;
 LOOP
 FETCH abs_chevauch INTO v_DATE_DEBUT, v_DATE_FIN, v_FIN_MA, v_DEBUT_MA, v_MOTIF, v_duree, v_DEMI_JOURNEE;
 EXIT WHEN abs_chevauch%NOTFOUND;
 

 
 IF v_DEBUT_MA='J' OR v_FIN_MA='J' THEN haveJ:=1; END IF;
 
 iterChev :=iterChev+1;
 
 -- condition qui accepte 2 demi journée
 accepte_2_demi_journee:= iterchev<2 AND (prop_abs_encour.isDemiJourneeSurUnSeulJour=1 OR prop_abs_encour.estDemiJournee=1) AND ( ((v_duree ='14400') AND v_DEBUT_MA = 'J' AND v_DEMI_JOURNEE <> 1) OR  v_DEBUT_MA IN ('M','A') OR v_FIN_MA IN ('M','A') OR (v_DEMI_JOURNEE=1 AND v_MOTIF != absence.CODE_IP));
 -- condition qui bloque la 2éme absence typé demi_journée si même motif d'absence
 type_demi_journee_meme_motif:=prop_abs_encour.estDemiJournee=1 AND v_DEMI_JOURNEE=1 AND v_MOTIF=absence.CODE_IP;
 
 -- contrôle pour ne pas dépasser 2 demi journée dans la même journée (sauf pour la durée) et qui bloque l'import d'une 2eme absnece typée demi-journée avec le même motif.
 IF firstMsg = 0 AND (not(accepte_2_demi_journee) OR type_demi_journee_meme_motif ) THEN
 msg:=map_msg('TGE00172');
 updatesql:=' update TGE_IMPORT_INCIDENTS set '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' and date_import='''||absence.date_import||''' and numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 firstMsg:=1;
 END IF;
 IF accepte_2_demi_journee THEN
 CONTINUE;
 ELSIF haveMsg2demiJr=0 AND prop_abs_encour.isDemiJourneeSurUnSeulJour=1 AND (v_DEBUT_MA  <> 'D' OR haveJ = 1)  AND iterchev>=2 THEN
 msg:=map_msg('TGE00344');
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 haveMsg2demiJr:=1;
 GOTO MAJ_TBL_IMPORT;
 ELSIF haveMsg2demiJr=1 AND prop_abs_encour.isDemiJourneeSurUnSeulJour=1 AND iterchev>=2 THEN
 CONTINUE;
 END IF;
 IF type_demi_journee_meme_motif THEN
 msg:=map_msg('TGE00345');
 msg:=regexp_replace(msg,'#',v_MOTIF,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 GOTO MAJ_TBL_IMPORT;
 END IF;
 
 --get code erreur adéquat
 IF v_DATE_DEBUT   =v_DATE_FIN THEN
 IF    v_DEBUT_MA='D' THEN cod_erreur   :='TGE00184';
 ELSIF v_DEBUT_MA='M' THEN cod_erreur   :='TGE00187';
 ELSIF v_DEBUT_MA='A' THEN cod_erreur   :='TGE00188';
 ELSIF v_DEBUT_MA='J' THEN cod_erreur   :='TGE00198';
 END IF;
 ELSE
 IF v_DEBUT_MA   ='M' THEN
 cod_erreur   :='TGE00185';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA!='M' AND v_FIN_MA!='J' THEN cod_erreur   :='TGE00186';
 ELSIF v_DEBUT_MA='J' AND v_FIN_MA!='M' THEN cod_erreur   :='TGE00197';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA='J' THEN cod_erreur   :='TGE00295';
 ELSIF v_DEBUT_MA='A' AND v_FIN_MA='M' THEN cod_erreur   :='TGE00296';
 ELSIF v_DEBUT_MA='J' AND v_FIN_MA='M' THEN cod_erreur   :='TGE00297';
 ELSIF v_DEBUT_MA='D' THEN cod_erreur   :='TGE00298';
 END IF;
 END IF;
 
 --récupèrer message d'erreur et remplacer les paramétres
 msg:=map_msg(cod_erreur);
 msg:=regexp_replace(msg,'#',v_MOTIF,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_DEBUT,1,1);
 msg:=regexp_replace(msg,'#',v_DATE_FIN,1,1);
 
 <<MAJ_TBL_IMPORT>>
 --MAJ de l'anomalie import_absence / WARNINGS si MA=Durée
 updatesql:=' UPDATE TGE_IMPORT_INCIDENTS SET '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' AND date_import='''||absence.date_import||''' AND numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 
 END LOOP; --FIN LOOP absence chevauché
 iterChev:=0; firstMsg:=0;haveJ:=0;haveMsg2demiJr:=0;
 CLOSE abs_chevauch;
 
 ELSE
 msg :='Problem de controle de chevauchement. ';
 updatesql:=' UPDATE TGE_IMPORT_ABSENCES SET '||( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' = '|| ( CASE WHEN v_DEBUT_MA='D' AND haveJ=0 THEN 'warnings' ELSE typ_msg END) ||' || '''||REPLACE(msg,'''','''''')||'''  WHERE login='''||absence.login||''' AND date_import='''||absence.date_import||''' AND numligne='|| absence.numligne||'';
 EXECUTE_IMMEDIATE_STRING(updatesql,0);
 END IF;
 END LOOP;--FIN LOOP import_absence
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'CTRL_CHEVAUCHEMENT_40 FIN '||TO_CHAR(SYSTIMESTAMP, 'DD.MM.YYYY HH24:MI:SSxFF'));
 
 EXCEPTION
 WHEN OTHERS THEN
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END TGE_CONTROLE_40_CHEVAUCHEMENT;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : VI -> pour la validation des imports Web ou Batch, MP -> pour la validation depuis le Market Place
 P_TYPE_ACTION IN VARCHAR2)
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 doRollback boolean;
 desactiveTraitements   VARCHAR2(1000);

 BEGIN
 doRollback:=false;
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début');
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = C.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then 
  doRollback:=true;
  GOTO end_proc;
 end if ; 
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, P_TYPE_ACTION );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 if(SQLCODE='-20001') then 
   doRollback:=true;
   GOTO end_proc;
  end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 -- activer ou non les nouveaux traitements de l'import 3040
 select NVL(upper(VALVAR), ' ') into desactiveTraitements from sys_varsys where module='STD' and codvar='DESACTIVE_TRAITEMENTS_IMPORT_3040';
 IF INSTR(desactiveTraitements, 'TGE_CONTROLE_40_CHEVAUCHEMENT') < 1 THEN
	 --controle chevauchement
	 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 END IF;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT,
 ORIGINE
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT,
 ABSENCES.ORIGINE
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT,
  INCI.origine AS ORIGINE     --origine 
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ,
 TGE_REF_ORIGINE_GTA
 WHERE ABSENCES.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND ABSENCES.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20000') then 
  doRollback:=true;
  GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 IF INSTR(desactiveTraitements, 'TGE_REGROUPE_ABS') < 1 THEN
 	-- Regroupement des absences importé
 	TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 END IF;
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET ERREURS     ='',
 STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ((ERREURS  IS NULL
 AND STATUT      = 'TRAIT')
 OR (ERREURS    IS NULL
 AND STATUT      = 'TRANS'));
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ELEMENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ELEMENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 5;
 END IF;
 END IF ;

 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 <<end_proc>> 
 if(doRollback) then
  ROLLBACK;
  if(P_WITH30=1) then
    UPDATE TGE_IMPORT_ELEMENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
    end if;
  if(P_WITH40=1) then
    UPDATE TGE_IMPORT_INCIDENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
  end if;
  if(P_WITH60=1 or P_WITH70=1) then
  UPDATE TGE_IMPORT_DONNEES
  SET ERREURS =TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
  WHERE LOGIN      = P_LOGIN
  AND DATE_IMPORT  = p_date_import ;
  
  end if;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Rollback de l''import suite à une détection d''un traitement de paie en cours.');
  FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , 'Une paie est en cours d''exécution.' );
 
  end if;

 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Modules/ZPaie/modal/ConsultationFeuilleChargeeAnnulation.jsp'
'Modules/ZPaie/modal/ConsultationFeuilleChargeeAnnulation.jsp','Consultation d''une feuille chargée de ligne d''annulation'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('IMPEX084', 'IMPEX034')
'IMPEX084','TGE','fr_fr','0','Une erreur s''est produite pendant la suppression de la ligne d''annulation importée.','1'
'IMPEX034','TGE','fr_fr','0','Le type de l''import n''est pas correct : #1 (DV -> #2, Elément -> #3, DR -> #4, DR cotis. -> #5, Incident -> #6, Absence -> #7, GAP -> #8, GAP RETRO -> #9, Annulation -> #10).','1'
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_30
=SQL=
create or replace PROCEDURE TGE_CONTROLE_30 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 -- Valeurs attendues : EC/ECS -> écran création (S en mode SimuPaie),  EM/EMS -> écran modification (S en mode SimuPaie), GAP -> création en sous-marin,
 -- I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch, MP -> création depuis la Market Place
 , P_TYPE_ACTION IN VARCHAR2
 ) AS
 /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 clWhere varchar2(1000);
 -- Pour les merge, la clause where ne doit pas inclure la colonne ERREURS, on gère des clauses spécifiques
 clWhereMerge varchar2(1000);
 clWhereMergeErreur varchar2(250);
 
 req varchar2(2000);
 w_exist_element NUMBER ;
 w_err VARCHAR2(2000);
 w_param_longueur VARCHAR2(10);
 w_id_natcol varchar2(4000);
 
 BEGIN
 clwhere:='EI.login='''||p_login||''' and EI.date_import='''||P_DATE_IMPORT||''' and EI.code_element not in (''B690'',''B691'') ';
 
 if p_numligne is not null then
 	clwhere:=clwhere||' AND EI.NUMLIGNE='||p_numligne;
 end if;

 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controlées 
 clwhere:=clwhere || ' AND (EI.STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR EI.STATUT = ''TRANS'') ';
  
 clWhereMerge := clwhere;
 clWhereMergeErreur := '';
 
 IF p_type_action = 'VI' and p_login <> 'BATCH' then
   -- A la validation d'import Web, on ne va passer que sur les lignes qui ne sont pas déjà en erreur.
   -- Certaines lignes sont déjà en erreur et on ne veut pas les retraiter (sinon double message)
   clwhere := clwhere || ' and EI.ERREURS is null';
   clWhereMergeErreur := ' where EI.ERREURS is null';
 END IF;
 
 IF p_login ='BATCH' THEN 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées. Seulement pour le BATCH, car dans les autres cas il y a des contrôles
 -- qui sont fait en amont des contrôles PL/SQL (côté Java)
 	req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS = '''' WHERE '||clwhere;
 	EXECUTE_IMMEDIATE_STRING( req,0);
 	
 -- Contrôle que le collaborateur est cohérent : date effet / paiezad. En Batch, on n'utilise pas IdentifiantCollab pour récupérer les informations
 -- du collaborateur, on prend juste ce qui est dans le fichier. On doit donc contrôler que le collab existe
  	req:= 'update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS, '''||replace(get_message_erreur('STD', 'STD00046', p_codlang),'''','''''')||''',EI.MATRICULE||''|''||EI.NUMPAC||''|''||EI.PACMAT||''|''||EI.PAIEZAD||''|''||EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere;
  	req:= req || ' and EI.NUMPAC is not null and EI.PAIEZAD is not null';
  	req:= req || ' and (not exists(SELECT 1 FROM DIC_ADM_CONTRAT_SITU DACS WHERE DACS.NUMPAC=EI.NUMPAC and DACS.PAIEZAD=EI.PAIEZAD';
  	req:= req || ' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DACS.DSDSC and DACS.DSFSC))';
  	EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Met une erreur sur les lignes en doublon dans le fichier d'import
 IF p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 req :='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00032',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE  '||clwhere||' AND ';
 req := req ||' NUMLIGNE IN (select numligne from  tge_import_elements P where P.date_import ='''||P_DATE_IMPORT||''' AND  P.LOGIN='''||p_login||''' ';
 req := req ||' AND (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,code_element,nvl(INDICATIF,''XyZ''),NVL(CODE_REMPLACEMENT,''*'') )in ';
 req := req ||' (select t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,nvl(t.INDICATIF,''XyZ''),NVL(t.CODE_REMPLACEMENT,''*'') from tge_import_elements t';
 req := req ||' where t.login='''||p_login||''' and t.date_import='''||P_DATE_IMPORT||''' group by t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,t.INDICATIF,t.CODE_REMPLACEMENT having count(*)>1) )' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- On conserve la ligne dont le numLigne est le max dans la liste des doublons (on enlève le message d'erreur)
 IF p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 req :='update TGE_IMPORT_ELEMENTS EI SET ERREURS=null WHERE  '||clwhere||' AND ';
 req := req ||' NUMLIGNE IN (select numligne from  tge_import_elements P where P.date_import ='''||P_DATE_IMPORT||''' AND  P.LOGIN='''||p_login||''' ';
 req := req ||' AND (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,code_element,nvl(INDICATIF,''XyZ''),NVL(CODE_REMPLACEMENT,''*''),numligne) in ';
 req := req ||' (select t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,nvl(t.INDICATIF,''XyZ''),NVL(t.CODE_REMPLACEMENT,''*''),max(numligne) as numligne from tge_import_elements t';
 req := req ||' where t.login='''||p_login||''' and t.date_import='''||P_DATE_IMPORT||''' group by t.NUMPAC,t.PAIEZAD,t.PERIODE,t.TYPE_TRAITEMENT,t.CODE_ELEMENT,t.INDICATIF,t.CODE_REMPLACEMENT having count(*)>1) )' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 IF p_type_action = 'EC' or p_type_action = 'ECS' or p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
   -- Non existe EZ (seulement en création ou import. Les tests d'existence en modification sont exécutés en Java)
   -- Si l'élément existant a comme DERNIER_CODE_OPE = 'S', alors message ZEZ00040
   -- sinon ZEZ00030
   req :='merge into TGE_IMPORT_ELEMENTS EI using TGE_ELEMENTS_PAIE E on (';
   req := req || clwhereMerge;
   req := req ||' and E.NUMPAC = EI.NUMPAC and E.PAIEZAD = EI.PAIEZAD and E.PERIODE = EI.PERIODE';
   --req := req ||' and E.TYPE_TRAITEMENT = EI.TYPE_TRAITEMENT and E.CODE_ELEMENT = EI.CODE_ELEMENT and E.INDICATIF = EI.INDICATIF AND E.CODE_REMPLACEMENT=NVL(EI.CODE_REMPLACEMENT,''*''))';
   req := req ||' and E.TYPE_TRAITEMENT = EI.TYPE_TRAITEMENT and E.CODE_ELEMENT = EI.CODE_ELEMENT and E.INDICATIF = EI.INDICATIF AND E.CODE_REMPLACEMENT=NVL(EI.CODE_REMPLACEMENT,''*'')';
   -- On rajoute une clause sur la table TGE_IMPORT_ANNULATION car avant l'insertion il peut y avoir eu des cartes d'annulation (FSED) et donc l'élément sera supprimé
   req := req ||' and not exists (select 1 from  TGE_IMPORT_ANNULATION A where A.LOGIN = '''||P_LOGIN||''' and A.DATE_IMPORT = '''||P_DATE_IMPORT||''' and A.NUMPAC = E.NUMPAC';
   req := req ||' and A.PAIEZAD = E.PAIEZAD and A.PERIODE = E.PERIODE and A.ORIGINE = E.ORIGINE)';
   req := req ||' )';
   req := req ||' when matched then update set ERREURS ='; 
   req := req ||' case';
   req := req ||' when E.DERNIER_CODE_OPE = ''S'' then TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00040',p_codlang),'''','''''')||''',EI.CODE_ELEMENT||''|''||TGE_IMPORT_FORMATE_DATE(EI.PERIODE, EI.LOGIN, ''YYYYMM'', ''MM.YYYY'')||''|''||EI.INDICATIF,'''||p_codlang||''')';
   req := req ||' else TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00030',p_codlang),'''','''''')||''',CODE_ELEMENT||''|''||INDICATIF||''|''||TGE_IMPORT_FORMATE_DATE(PERIODE, LOGIN, ''YYYYMM'', ''MM.YYYY''),'''||p_codlang||''')';
   req := req ||' end';
   req:= req || clWhereMergeErreur;
   EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Numpac non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PaieZad non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Periode non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Type Traitement non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Code_element non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00016',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_ELEMENT is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Date d'effet non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00314',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_EFFET is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Longueur Matricule
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00089',p_codlang),'''','''''')||''',MATRICULE,'''||p_codlang||''') where '||clwhere||' AND MATRICULE is NOT null AND LENGTH (MATRICULE)>32 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur Origine
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',ORIGINE,'''||p_codlang||''') where '||clwhere||' AND ORIGINE is NOT null AND LENGTH (ORIGINE)>1 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --
 -- Longueur LOGIN (sauf pour le Batch)
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00107',p_codlang),'''','''''')||''',LOGIN,'''||p_codlang||''') where '||clwhere||' AND LOGIN!=''BATCH'' AND LENGTH (LOGIN)>32 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- date_effet/periode de paie TGE00310
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00310',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 -- permet de gérer les cas où DATE_EFFET ou PERIODE ne sont pas des dates valides
 req:= req ||' and (select case when to_date(EI.DATE_EFFET,''YYYYMMDD'') > last_day(to_date(EI.PERIODE,''YYYYMM'')) then ''O'' else ''N'' end from dual where is_date(EI.DATE_EFFET, ''YYYYMMDD'')=1 and is_date(EI.PERIODE, ''YYYYMM'')=1 ) = ''O''';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF p_type_action = 'ECS' or p_type_action = 'EMS' then
	-- En SimuPaie, on contrôle seulement l'interdiction de la saisie dans la passé : TGE00311 (il n'y a pas de passé, rétro) 
	req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00311',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	req:= req ||' where '||clwhere || ' ';
	-- permet de gérer les cas où PERIODE n'est pas une date valide 
	req:= req ||' and (select case when to_date(EI.PERIODE,''YYYYMM'') < (select to_date(P.PERIODEENCOURS,''YYYYMM'') from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC) then ''O'' else ''N'' end from dual where is_date(EI.PERIODE, ''YYYYMM'')=1 ) = ''O''';
	EXECUTE_IMMEDIATE_STRING( req,0);
 ELSE
	 -- période de paie pour les EZ : TGE00311 / ZEZ00037 / TGE00336 / TGE00337
	 req:='merge into TGE_IMPORT_ELEMENTS EI using';
	 req:= req ||' (select P1.NUMPAC, P1.PERIODEENCOURS, P1.DEB_RETRO, P1.DEB_HISTO_RETRO, P1.NB_MOIS_RETRO, ';
	 -- Pour le calcul de la limite rétro, on ne tient pas compte du max entre DEB_HISTO_RETRO et PERIODEENCOURS - NB_MOIS
	 -- car c'est le test sur la DEB_HISTO_RETRO et le message TGE00336 qui sera pris en compte
	 req:= req ||' TO_CHAR(ADD_MONTHS(TO_DATE(P1.PERIODEENCOURS, ''YYYYMM''), - P1.NB_MOIS_RETRO), ''YYYYMM'') AS LIMITE_RETRO '; 
	 req:= req ||' from TGE_REF_PAC P1) P';
	 req:= req ||' on (';
	 req:= req || clwhereMerge;
	 req:= req ||' and EI.PERIODE < P.PERIODEENCOURS';
	 req:= req ||' and ( P.DEB_RETRO IS NULL or P.PERIODEENCOURS < P.DEB_RETRO';
	 IF not p_type_action = 'GAP' then
	   -- Pour les éléments créés en sous-marin depuis la GAP, on ne teste pas le caractère CALCUL_RETRO de l'élément, ni la cohérence entre la période et la date d'effet
	   req:= req ||' or EI.PERIODE <> substr(EI.DATE_EFFET, 0, 6)';
	 END IF;
	 req:= req ||' or EI.PERIODE < P.DEB_HISTO_RETRO or EI.PERIODE < P.LIMITE_RETRO)';
	 req:= req ||' and EI.NUMPAC = P.NUMPAC)'; 
	 req:= req ||' when matched then update set EI.ERREURS = case';
	 req:= req ||' when P.DEB_RETRO is null or P.PERIODEENCOURS < P.DEB_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00311',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	 IF not p_type_action = 'GAP' then
	   req:= req ||' when EI.PERIODE <> substr(EI.DATE_EFFET, 0, 6) then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00041',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
	 END IF;
	 req:= req ||' when EI.PERIODE < P.DEB_HISTO_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00336',p_codlang),'''','''''')||''',to_char(to_date(P.DEB_HISTO_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
	 req:= req ||' when EI.PERIODE < P.LIMITE_RETRO then TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00337',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.LIMITE_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
	 req:= req ||' end';
	 req:= req || clWhereMergeErreur;
	 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Format date d'effet TGE00315
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00315',p_codlang),'''','''''')||''',EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere||' AND EI.DATE_EFFET is not null and IS_DATE(EI.DATE_EFFET,''YYYYMMDD'')=0';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- IdPacMat non vide
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00102',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND (RPAD(NUMPAC,6) || PACMAT) is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur NumPac
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',numpac,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(NUMPAC),0)>6 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur PaieZad
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',NULL,PAIEZAD) where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Format Periode
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00328',p_codlang),'''','''''')||''',PERIODE,'''||p_codlang||''') WHERE '||clwhere||' AND PERIODE is NOT null AND IS_DATE(PERIODE,''YYYYMM'')=0 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur Cle_import
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00099',p_codlang),'''','''''')||''',LOGIN || ''#'' ||DATE_IMPORT || ''#'' ||NUMLIGNE,'''||p_codlang||''') WHERE '||clwhere||' AND LOGIN IS NOT NULL AND DATE_IMPORT IS NOT NULL AND NUMLIGNE IS NOT NULL AND  LENGTH(LOGIN || ''#'' ||DATE_IMPORT || ''#'' ||NUMLIGNE) >70 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur IdPacMat
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00103',p_codlang),'''','''''')||''',RPAD(NUMPAC,6) || PACMAT,'''||p_codlang||''') WHERE '||clwhere||' AND NUMPAC   IS NOT NULL AND PACMAT IS NOT NULL AND  LENGTH(RPAD(NUMPAC,6) || PACMAT) >14 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controle NATCOL doit avoir la valeur SAL ou STA TGE00027
 select VALVAR into w_id_natcol from sys_varsys where module='STD' and codvar='ID_NATCOL';
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00027',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 req := req ||' and (select DAC.'||w_id_natcol||' from DIC_ADM_CONTRAT DAC inner join DIC_ADM_CONTRAT_SITU DACS on (DACS.NUMPAC = DAC.NUMPAC and DACS.PACMAT = DAC.PACMAT and DACS.NUMCNT = DAC.NUMCNT) where DACS.PAIEZAD = EI.PAIEZAD and DAC.NUMPAC = EI.NUMPAC';
-- Si le PAC n'est pas MPE, le couple NUMPAC/PAIEZAD ne suffit pas à déterminer un contrat, on utilise la date d'effet
 req := req ||' and case when ((select MPE from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC) = ''N'' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DAC.DSDCN and nvl(DAC.DSFCN, to_date(''20991231'', ''YYYYMMDD'')))';
 req := req ||' or (select MPE from TGE_REF_PAC P2 where P2.NUMPAC = EI.NUMPAC) <> ''N'' then 1 else 0 end = 1) not in (''SAL'', ''STA'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF p_login = 'BATCH' THEN
 -- Autorisation paiezad
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND EI.paiezad IS NOT NULL AND EI.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Chez les clients, ils n'ont pas de pac * dans TGE_DICOZ, par contre en recette interne ils n'ont que celui là (pac *). 
 -- Du coup on conserve la complexité de choisir les éléments du pac *, mais en gros, il n'y a pas de cohabitation entre les 2 gestions 
 -- (sauf en dev ce qui peut provoquer des incohérences sur les contrôles : 
 --  - Elément U101 existe sur le pac *, mais s'il y a d'autres éléments sur le pac TLSE01 mais pas U101
 --  - L'appel table va proposer U101 mais le contrôle ici va bloquer en disant que U101 n'existe pas
 
 -- Existe code_element
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00017',p_codlang),'''','''''')||''',code_element,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND EI.code_element is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT= EI.CODE_ELEMENT)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Existe type_traitement
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND  EI.type_traitement is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_TYPETRT TT where TT.CODETYPTRT = EI.TYPE_TRAITEMENT';
 req:= req || ' and (';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT = EI.TYPE_TRAITEMENT) > 0 and TT.NUMPAC = EI.NUMPAC)';
 req:= req ||   ' or';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT= EI.TYPE_TRAITEMENT) = 0 and TT.NUMPAC=''*'')';
 req:= req || ' ))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format sens
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00038',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND sens IS NOT NULL AND sens NOT IN (''+'',''-'') ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Autorisation sens (Valeur 'Aucun' attendue pour les TYPE = 'A')
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00015',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' and EI.SENS is not null and EI.SENS in (''+'',''-'') ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT= EI.CODE_ELEMENT and DZ.TYPE = ''A'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /** Début des tests sur l'INDICATIF */
 -- On fait les tests sur l'indicatif qu'en création ou import. En modification, l'indicatif ne change pas.
 IF p_type_action = 'EC' or p_type_action = 'I' or p_type_action = 'VI' or p_type_action = 'MP' THEN
 -- OCC1 > 0 et GROUPE = COT/CZR/CTM/CRA : Existe code_caisse
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00013',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null AND EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''COT'',''CZR'',''CTM'',''CRA''))';
 req:= req || ' and not exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = EI.INDICATIF)';
 EXECUTE_IMMEDIATE_STRING( req,0);

  -- OCC1 > 0 et GROUPE = TXR : Existe code_rubrique
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00334',p_codlang),'''','''''')||''',EI.INDICATIF,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null AND EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''TXR''))';
 req:= req || ' and not exists (select 1 from TGE_REF_RUBRIQUE R where R.NUMPAC = EI.NUMPAC and R.CODERUB = EI.INDICATIF)';
 EXECUTE_IMMEDIATE_STRING( req,0);

 -- OCC1 > 0 et GROUPE = COT/CZR/CTM/CRA : Caisse référence interdite si on est NewCot (TGE_REF_PAC.OLDCOT = 'N')
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND EI.INDICATIF is not null and EI.NUMPAC is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''COT'',''CZR'',''CTM'',''CRA''))';
 req:= req || ' and exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = EI.INDICATIF and RC.CODEGROUP = ''R'')';
 req:= req || ' and nvl((select P.OLDCOT from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC), ''N'') != ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - longueur attendue 6
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''MM:CCC'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null  and length(EI.INDICATIF) != 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - MM doit correspondre à un mois
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00011',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null AND EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and (IS_NUMBER(substr(EI.INDICATIF, 0, 2)) is null or IS_DATE(substr(EI.INDICATIF,0, 2),''MM'') !=1)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - CCC Existe code_caisse
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00013',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null and EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE = ''HCO'')';
 req:= req || ' and not exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = substr(EI.INDICATIF, 4))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCO : Format attendu MM:CCC - CCC Caisse référence interdite
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.INDICATIF is not null and EI.NUMPAC is not null and length(EI.INDICATIF) = 6';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.NUMPAC = EI.NUMPAC and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.OCC1 > 0 and DZ.GROUPE in (''HCO''))';
 req:= req || ' and exists (select 1 from TGE_REF_CAISSE RC where RC.NUMPAC = EI.NUMPAC and RC.CODECAISSE = substr(EI.INDICATIF, 4) and RC.CODEGROUP = ''R'')';
 req:= req || ' and nvl((select P.OLDCOT from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC), ''N'') != ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 = 0 : Format attendu SSAAMMN
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMMN'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) != 7 or IS_NUMBER(substr(EI.INDICATIF,7,1)) is null or IS_DATE(substr(EI.INDICATIF, 0, 6),''YYYYMM'') !=1 )';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 = 0 and DZ.GROUPE = ''HIS'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 = 0 : Format attendu SSAAMMN - N doit etre compris etre 1 et 9
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00012',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere;
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 = 0 and DZ.GROUPE = ''HIS'')';
 -- On gère avec un "exist/from dual" pour effectuer les tests > 1 et < 9 sans que ça plante si la valeur de "N" n'est pas un nombre valide
 req:= req || ' and exists (select 1 from dual where length(EI.INDICATIF) = 7 and (IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or to_number(substr(EI.INDICATIF, 7, 1)) < 1 or to_number(substr(EI.INDICATIF, 7, 1)) > 9))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMMN:XX'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) != 10 or IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or IS_DATE(substr(EI.INDICATIF, 0, 6),''YYYYMM'') !=1 ';
 req:= req || ' or substr(EI.INDICATIF,8,1) != '':'' or IS_NUMBER(substr(EI.INDICATIF,9,2)) is null)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX - N doit etre compris etre 1 et 9
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00012',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere;
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'')';
 -- On gère avec un "exist/from dual" pour effectuer les tests > 1 et < 9 sans que ça plante si la valeur de "N" n'est pas un nombre valide
 req:= req || ' and exists (select 1 from dual where length(EI.INDICATIF) = 10 and (IS_NUMBER(substr(EI.INDICATIF, 7, 1)) is null or to_number(substr(EI.INDICATIF, 7, 1)) < 1 or to_number(substr(EI.INDICATIF, 7, 1)) > 9))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HIS et OCC2 > 0 : Format attendu SSAAMMN:XX - XX doit être compris entre 01 et TGE_REF_DICOZ.OCC2
 -- Utilisation d'un merge afin de pouvoir utiliser DZ.OCC2 dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 AND DZ.OCC2 > 0 and DZ.GROUPE = ''HIS'' ';
 req:= req || ' and (length(EI.INDICATIF)) = 10 and IS_NUMBER(substr(EI.INDICATIF,7,1)) is not null and IS_DATE(substr(EI.INDICATIF,0,6),''YYYYMM'') !=0 and (IS_NUMBER(substr(EI.INDICATIF,9,2)) is null ';
 req:= req || ' or to_number(substr(EI.INDICATIF,9,2)) < 1 or to_number(substr(EI.INDICATIF,9,2)) > DZ.OCC2 )) ';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00013',p_codlang),'''','''''')||''',DZ.OCC2,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur; 
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''AAMM+Code Chrono'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) !=10 ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono, partie AAMM non valide
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00035',p_codlang),'''','''''')||''',''AAMM+Code Chrono|AAMM'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) = 10 and IS_DATE(substr(EI.INDICATIF, 0, 4),''YYMM'') != 1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et GROUPE = HCP ou HC2 : Format indicatif attendu AAMM+Code Chrono, Code chrono n'existe pas pour le collaborateur
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00034',p_codlang),'''','''''')||''',substr(Ei.indicatif,5),'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and length(EI.INDICATIF) = 10 and IS_DATE(substr(EI.INDICATIF, 0, 4),''YYMM'') = 1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.GROUPE in (''HCP'',''HC2''))';
 req:= req || ' and not exists (select 1 from DIC_ADM_CONTRAT_SITU where NUMPAC = EI.NUMPAC and PACMAT = EI.PACMAT and CODE_CHRONO  = substr(EI.INDICATIF, 5))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC2 = 0 et OCC1 = 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR / CRF / CAA / CPP: Format indicatif attendu SSAAMM
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00036',p_codlang),'''','''''')||''',''SSAAMM'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and IS_DATE(EI.INDICATIF,''YYYYMM'') !=1';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC2 = 0 and DZ.OCC1 = 13 and DZ.GROUPE not in (''COT'',''CZR'',''CTM'',''CRA'',''HCO'',''HIS'',''HCP'',''HC2'',''TXR'',''CRF'',''CAA'',''CPP''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_ELEMENT commence par 'R' et OCC2 = 0 et OCC1 = 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR /CRF / CAA / CPP: Format indicatif attendu compris entre (PERIODE -12 mois) et (PERIODE - 1 mois)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00035',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.CODE_ELEMENT is not null and length(EI.CODE_ELEMENT) = 4 and EI.CODE_ELEMENT like ''R%'' ';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC2 = 0 and DZ.OCC1 = 13 and DZ.GROUPE not in (''COT'',''CZR'',''CTM'',''CRA'',''HCO'',''HIS'',''HCP'',''HC2'',''TXR'',''CRF'',''CAA'',''CPP''))';
 -- permet de gérer les cas où INDICATIF n'est pas une date valide
 req:= req || ' and (select case when (to_date(EI.INDICATIF,''YYYYMM'') > add_months(to_date(EI.PERIODE,''YYYYMM''),-1) or to_date(EI.INDICATIF,''YYYYMM'') < add_months(to_date(EI.PERIODE,''YYYYMM''),-12)) then ''O'' else ''N'' end from dual where IS_DATE(EI.INDICATIF, ''YYYYMM'')=1) = ''O'' ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- OCC1 > 0 et OCC1 <> 13 et GROUPE not in COT / CZR / CTM / CRA / HCO / HIS / HCP / HC2 / TXR / CRF / CAA / CPP: Format indicatif attendu entre 1 et OCC1 
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.OCC1 dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.OCC1 > 0 and DZ.OCC1 <> 13';
 req:= req || ' and DZ.GROUPE not in (''HIS'',''HCO'',''COT'',''CZR'',''CTM'',''CRA'',''DFR'', ''HCP'', ''HC2'', ''TXR'',''CRF'',''CAA'',''CPP'')';
 req:= req || ' and (is_number(EI.INDICATIF) is null or to_number(EI.INDICATIF) < 1 or to_number(EI.INDICATIF) > DZ.OCC1))';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00014',p_codlang),'''','''''')||''',DZ.OCC1,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- GROUPE in CRF / CAA / CPP : Format indicatif attendu alphanumerique <= 2 Caractères
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00343',p_codlang),'''','''''')||''',''XX=alphanumérique'','''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and (length(EI.INDICATIF) > 2 or not regexp_like(EI.INDICATIF, ''^[a-zA-Z0-9]+$''))';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.GROUPE in (''CRF'',''CAA'',''CPP''))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 -- Fin tests sur l'indicatif
 
 -- Format valeur : longueur valide (TYPE = A ou N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00006',p_codlang),'''','''''')||''',(select distinct(oz.longueur) from tge_ref_dicoz oz where oz.element = ei.code_element and ei.numpac =oz.numpac and oz.type in (''A'',''N'',''B'')),'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req ||   ' and (';
 req:= req ||   ' ((DZ.TYPE = ''A'' or DZ.TYPE = ''B'') and length(EI.VALEUR) > DZ.LONGUEUR)';
 req:= req ||   ' or (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16) and length(EI.VALEUR) > DZ.LONGUEUR)';
 req:= req ||   ')';
 req:= req || ' )';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : nombre signé(TYPE = N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR04',p_codlang),'''','''''')||''',EI.VALEUR,'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req ||   ' and ( (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16)) or (DZ.TYPE = ''B'')) ';
 req:= req ||   ' and (regexp_like(EI.VALEUR, ''^[-+]+.*''))';
 req:= req || ' )';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : partie entière <= TGE_REF_DICOZ.LONGUEUR (TYPE =P)
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC ';
 req:= req || ' and (DZ.TYPE = ''P'' and is_number(EI.VALEUR) is not null and (((INSTR(replace(EI.VALEUR,''.'','',''),'','')-1)> DZ.LONGUEUR) or (INSTR(replace(EI.VALEUR,''.'','',''),'','')= 0 and length(EI.VALEUR) > DZ.LONGUEUR))  ) ';
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR02',p_codlang),'''','''''')||''', EI.VALEUR||''|''||DZ.LONGUEUR,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : partie décimale <= TGE_REF_DICOZ.NBDECI (TYPE =P)
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC ';
 req:= req || ' and (DZ.TYPE = ''P'' and INSTR(replace(EI.VALEUR,''.'','',''),'','') > 0 and length(EI.VALEUR)-INSTR(replace(EI.VALEUR,''.'','',''),'','')> DZ.NBDECI)'; 
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('STD','STDERR01',p_codlang),'''','''''')||''', EI.VALEUR||''|''||(DZ.NBDECI),'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- Format valeur : nombre non décimal (TYPE = N ou B)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00007',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere|| ' and EI.VALEUR is not null and (is_number(EI.VALEUR) is null or instr(EI.VALEUR, '','') > 0 or instr(EI.VALEUR, ''.'') > 0)';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC'; 
 req:= req ||   ' and (DZ.TYPE = ''B'' or (DZ.TYPE = ''N'' and (DZ.MASQUE < 1 or DZ.MASQUE > 16))))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : date ne respectant pas la longueur (TYPE = N)
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.LONGUEUR dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS EI using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC';
 req:= req || ' and EI.VALEUR is not null and DZ.TYPE = ''N'' and DZ.MASQUE>=1 AND DZ.MASQUE<=16';
 req:= req || ' and length(EI.VALEUR) != DZ.LONGUEUR';
 req:= req || ' )';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00008',p_codlang),'''','''''')||''',DZ.LONGUEUR,'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : date pas dans bon format (TYPE = N)
 -- Utilisation d'un MERGE afin de pouvoir utiliser DZ.MASQUE dans le message d'erreurs
 req:='merge into TGE_IMPORT_ELEMENTS Ei using TGE_REF_DICOZ DZ on (';
 req:= req || clwhereMerge;
 req:= req || ' and DZ.ELEMENT = Ei.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC'; 
 req:= req || ' and DZ.TYPE = ''N'' AND DZ.MASQUE >= 1 AND DZ.MASQUE <= 16';
 req:= req || ' and length(EI.VALEUR) = DZ.LONGUEUR and (';
 req:= req || ' (DZ.MASQUE =1 AND (IS_DATE(EI.VALEUR,''DDMMYYYY'')!=1 AND EI.VALEUR<>''00000000'')) OR';
 req:= req || ' (DZ.MASQUE =2 AND (IS_DATE(EI.VALEUR,''MMYYYY'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =3 AND (IS_DATE(EI.VALEUR,''YYYYMM'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =4 AND (IS_DATE(EI.VALEUR,''DD'')!=1 AND EI.VALEUR<>''00'' ) ) OR';
 req:= req || ' (DZ.MASQUE =5 AND (IS_DATE(EI.VALEUR,''MM'')!=1 AND EI.VALEUR<>''00'')) OR';
 req:= req || ' (DZ.MASQUE =6 AND (IS_DATE(EI.VALEUR,''YYYY'')!=1 AND EI.VALEUR<>''0000'' )) OR';
 req:= req || ' (DZ.MASQUE =7 AND (IS_DATE(EI.VALEUR,''YYYYMMDD'')!=1 AND EI.VALEUR<>''00000000'')) OR';
 req:= req || ' (DZ.MASQUE =8 AND (IS_DATE(EI.VALEUR,''DDMMYY'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =9 AND (IS_DATE(EI.VALEUR,''MMYY'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =10 AND (IS_DATE(EI.VALEUR,''YYMM'')!=1 AND EI.VALEUR<>''0000'' )) OR';
 req:= req || ' (DZ.MASQUE =11 AND (IS_DATE(EI.VALEUR,''YY'')!=1 AND EI.VALEUR<>''00'')) OR';
 req:= req || ' (DZ.MASQUE =12 AND (IS_DATE(EI.VALEUR,''YYMMDD'')!=1 AND EI.VALEUR<>''000000'')) OR';
 req:= req || ' (DZ.MASQUE =13 AND( IS_DATE(EI.VALEUR,''DDYY'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =14 AND (IS_DATE(EI.VALEUR,''DDMM'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =15 AND (IS_DATE(EI.VALEUR,''MMDD'')!=1 AND EI.VALEUR<>''0000'')) OR';
 req:= req || ' (DZ.MASQUE =16 AND (IS_DATE(EI.VALEUR,''MMDDYYYY'')!=1 AND EI.VALEUR<>''00000000''))';
 req:= req || '))';
 req:= req || ' when matched then update set EI.ERREURS = TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00024',p_codlang),'''','''''')||''',TGE_VALEUR_FORMAT_DATE(DZ.MASQUE),'''||p_codlang||''')';
 req:= req || clWhereMergeErreur;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format valeur : nombre attendu (TYPE = P)
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00009',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' and EI.VALEUR is not null and is_number(EI.VALEUR) is null';
 req:= req || ' and exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.NUMPAC = EI.NUMPAC and DZ.TYPE = ''P'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Controle Origine et mode_3060 : TGE00317
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00317',p_codlang),'''','''''')||''',EI.ORIGINE ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null and EI.CODE_REMPLACEMENT = ''R''';
 req:= req || ' and exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC and G.MODE_3060 <> ''R'' and G.MODE_3060 <> ''F'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF P_TYPE_ACTION = 'EM' or p_type_action = 'EMS' THEN
 -- Ce test n'est à faire qu'en modification (EM), mais pas à la création (EC ou I)
 -- Controle Origine et mode_3060 : TGE00318
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00318',p_codlang),'''','''''')||''',EI.ORIGINE ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null and nvl(EI.CODE_REMPLACEMENT, ''*'') <> ''R''';
 req:= req || ' and exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC and G.MODE_3060 <> ''W'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Mise à jour de l'élément autorisée ZEZ00005 seulement si on n'est pas en simulation
 /*      
  	 	 - Si on est en simulation
  	 	 - Si l'élément a une ORIGINE = '&'
         - sinon CODEMODIF doit être égale à 2 et :
            - soit l'élément n'est pas présent dans MAPDO
            - soit il est présent dans TGE_REF_MAPDO et il doit avoir TGE_REF_MAPDO.OCCURRENCE like '%!%' ou TGE_REF_MAPTA.ALLERRETOUR = 'R'
 */
 IF p_type_action <> 'ECS' and p_type_action <> 'EMS' then
 	req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','ZEZ00005',p_codlang),'''','''''')||''',EI.CODE_ELEMENT ,'''||p_codlang||''') where '||clwhere;
 	req:= req || ' and EI.CODE_ELEMENT is not null and (EI.ORIGINE is null or EI.ORIGINE <> ''&'') and not exists (select 1 from TGE_REF_DICOZ DZ where DZ.ELEMENT = EI.CODE_ELEMENT and DZ.CODEMODIF =''2'' ';
 	req:= req || ' and EI.NUMPAC = DZ.NUMPAC ';
 	-- L'élément n'est pas présent dans MAPDO (pour le numpac ou le pac *)
 	req:= req || ' and (DZ.ELEMENT not in (select ELEMENT from TGE_REF_MAPDO DO2 where (((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) > 0 and DO2.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) = 0 and DO2.NUMPAC = ''*''))) ';
 	-- Si l'élément est présent dans MAPDO alors TGE_REF_MAPDO.OCCURENCE doit contenir '!'
 	-- ou TGE_REF_MAPTA.ALLERRETOUR = 'R' pour être modifiable
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO DO left outer join TGE_REF_MAPTA TA on DO.TABLEGXP = TA.TABLEPARAM where DO.ELEMENT = DZ.ELEMENT ';
 	req:= req || ' and (((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) > 0 and DO.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPDO where NUMPAC = DZ.NUMPAC and ELEMENT = DZ.ELEMENT ) = 0 and DO.NUMPAC = ''*'')) ';
 	req:= req || ' and (((select count(*) from TGE_REF_MAPTA where NUMPAC = DZ.NUMPAC and TABLEPARAM = DO.TABLEGXP ) > 0 and TA.NUMPAC = DZ.NUMPAC) ';
 	req:= req || ' or ((select count(*) from TGE_REF_MAPTA where NUMPAC = DZ.NUMPAC and TABLEPARAM = DO.TABLEGXP ) = 0 and TA.NUMPAC = ''*'')) ';
 	req:= req || ' and (DO.OCCURENCE like ''%!%'' or TA.ALLERRETOUR = ''R'')) > 0 )) ';
 	req:= req || ' )';
 	EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Contrôle Origine existe pour le numPac TGE00331
 -- Ce test devra être supprimé lorsque celui associé au message TGE00321(origine est cohérente avec la GTA du collaborateur)
 -- sera intégré au contrôle PL/SQL (pour le moment fait en Java pour les saisies écrans et imports Web)
 req:='update TGE_IMPORT_ELEMENTS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00331',p_codlang),'''','''''')||''',EI.ORIGINE||''|''||EI.NUMPAC ,'''||p_codlang||''') where '||clwhere;
 req:= req || ' and EI.ORIGINE is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = EI.ORIGINE and G.NUMPAC = EI.NUMPAC)';
 EXECUTE_IMMEDIATE_STRING( req,0);
  
 -- Ecrasement de la clause Where
 clwhere:='EI.login='''||p_login||''' and EI.date_import='''||P_DATE_IMPORT||'''';
 -- Controles pour les éléments B691 et B690
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00195',p_codlang),'''','''''')||''',ei.valeur,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element=''B690'' and not exists(select * from   TGE_REF_IMPUTATION
 Ei2 where ei2.numpac in (Ei.numpac,''*'') and ei2.codeimp=ei.valeur )  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --
 req:='update TGE_IMPORT_ELEMENTS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00193',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element=''B691'' and exists(select * from
 (select date_import,login,numpac,paiezad, code_element, sum(to_number(replace(valeur,''.'','',''))) as somme from TGE_IMPORT_ELEMENTS Ei2 where code_element=''B691'' AND IS_NUMBER(VALEUR) is not null  group by  date_import,login,numpac,paiezad, code_element) tmp where   ei.date_import  =tmp.date_import  AND ei.login =tmp.login and somme<>100 and ei.numpac =tmp.numpac
 AND ei.paiezad  =tmp.paiezad)  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --
 req:='update TGE_IMPORT_ELEMENTS Ei SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00194',p_codlang),'''','''''')||''',CODE_ELEMENT||''|''||INDICATIF,'''||p_codlang||''')';
 req:= req || ' where '||clwhere||' AND code_element in (''B690'',''B691'') and not exists(select * from TGE_REF_MAPDO d where code_element=ELEMENT and indicatif=occurence and (d.numpac=Ei.numpac or d.numpac=''*''))  ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
    	-- On remonte l'erreur à l'application
 		raise;
	END IF;
 END TGE_CONTROLE_30;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_30
=SQL=
create or replace PROCEDURE TGE_IMPORT_30
(
    P_LOGIN       IN VARCHAR2 ,
    P_DATE_IMPORT IN VARCHAR2 ,
    P_ROLE        IN VARCHAR2 ,
    -- Origine écran
    P_ORIGINE     IN VARCHAR2 ,
    P_VALIDATION  IN VARCHAR2 ,
    P_WITH30      IN VARCHAR2 ,
    P_CODLANG     IN VARCHAR2,
    -- Valeurs attendues : EC -> écran création, EM -> écran modification, GAP -> création en sous-marin, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
    P_TYPE_ACTION IN VARCHAR2 ,
    P_DATE_MAJ    IN SYS_TRC_MODIF.DATEMAJ%type )
AS
  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  req CLOB;
  reqvalues CLOB;
  reqInsert CLOB;
  dateMaj SYS_TRC_MODIF.datemaj%type;
BEGIN
  v_start       := DBMS_UTILITY.GET_TIME;
  IF P_DATE_MAJ IS NULL THEN
    SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
  ELSE
    dateMaj:= P_DATE_MAJ;
  END IF;
  IF ( P_WITH30 =1) THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
      TGE_CONTROLE_30 (p_login, p_date_import, NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_30 - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
  END IF;
  IF p_validation = 1 THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion TGE_ELEMENTS_PAIE');
      INSERT
      INTO TGE_ELEMENTS_PAIE
        (
          NUMPAC ,
          PAIEZAD ,
          PERIODE ,
          TYPE_TRAITEMENT ,
          CODE_ELEMENT ,
          INDICATIF ,
          ORIGINE ,
          SENS ,
          VALEUR ,
          DERNIER_CODE_OPE ,
          LOGIN_MAJ ,
          DATE_MAJ ,
          CLE_IMPORT ,
          IDPACMAT,
          type_writer,
          CODE_REMPLACEMENT,
          DATE_EFFET,
         ACTION_RETRO,
         ACTION_RETRO_DATE
        )
      SELECT E.NUMPAC ,
        PAIEZAD ,
        PERIODE ,
        TYPE_TRAITEMENT ,
        CODE_ELEMENT ,
        UPPER (NVL(INDICATIF,'*')) AS INDICATIF,
        ORIGINE ,
        SENS ,
        VALEUR ,
        'C' ,
        p_login ,
        TO_CHAR (sysdate, 'YYYYMMDDHH24MI') ,
        CASE
          WHEN 'VI' = P_TYPE_ACTION
          THEN P_LOGIN
            ||'#'
            ||P_DATE_IMPORT
            ||'#'
            ||NUMLIGNE
          ELSE NULL
        END AS CLE_IMPORT,
        CASE
          WHEN E.NUMPAC IS NOT NULL
          AND PACMAT    IS NOT NULL
          THEN RPAD(E.NUMPAC,6)
            || PACMAT
          ELSE ' '
        END AS IDPACMAT,
        CASE
          WHEN (SELECT O.MODE_T2
              ||'#'
              ||O.ENVOI_MODE_R
            FROM TGE_REF_ORIGINE_GTA O
            WHERE O.NUMPAC     = E.NUMPAC
            AND O.CODE_ORIGINE = E.ORIGINE) = 'R#N'
          THEN 'N'
          ELSE NULL
        END AS TYPE_WRITER,
        NVL(E.CODE_REMPLACEMENT,'*') AS CODE_REMPLACEMENT,
        TO_DATE(E.DATE_EFFET,'YYYYMMDD') AS DATE_EFFET,
        -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
        -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
        -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
        case
        	when  E.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = E.NUMPAC)
         	then '*'
         	else NULL
        end as ACTION_RETRO,
        NULL as ACTION_RETRO_DATE
                             
      FROM TGE_IMPORT_ELEMENTS E
      WHERE LOGIN           =P_LOGIN
      AND CODE_ELEMENT NOT IN ('B690','B691')
      AND DATE_IMPORT       = p_date_import
      AND ((ERREURS        IS NULL
      AND STATUT            = 'TRAIT')
      OR (ERREURS          IS NOT NULL
      AND STATUT            = 'TRANS'));
      
      -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
      update TGE_ELEMENTS_PAIE set 
      	ACTION_RETRO = 'C',
      	ACTION_RETRO_DATE = DATE_MAJ
      where ACTION_RETRO = '*';
      
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  ' ||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidElement - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH' or SQLCODE=-20001) THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
    
    IF P_TYPE_ACTION = 'VI' THEN
      --- Gestion de la trace : on enregistre une trace généréale lors d'un import car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_ELEMENTS_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_ELEMENT_PAIE', 'CARTE=30&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Batch/Web 30','C',NULL,NULL,NULL,NULL);
    ELSIF P_TYPE_ACTION = 'MP' THEN
    	--- Gestion de la trace : on enregistre une trace généréale lors d'une saisie depuis la Market Place car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_ELEMENTS_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_ELEMENT_PAIE_MP', 'LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Market Place 30','C',NULL,NULL,NULL,NULL);
    END IF;
    
    -- Mise à jour de la column RETRO_GC de la table TGE_PERIODE_RECUEIL_PAIEZAD
    -- si la "full" rétroactivité n'est pas activé sur le pac
    UPDATE TGE_PERIODE_RECUEIL_PAIEZAD R
    SET R.RETRO_GC =
      (SELECT E.VALEUR
      FROM TGE_ELEMENTS_PAIE E
      WHERE R.NUMPAC     = E.NUMPAC
      AND R.PAIEZAD      = E.PAIEZAD
      AND R.MOIS_PAIE    = E.PERIODE
      AND E.CODE_ELEMENT = 'WG96'
      )
    WHERE (R.NUMPAC, R.PAIEZAD, R.MOIS_PAIE) IN
      (SELECT e2.numpac,
        e2.paiezad,
        e2.periode
      FROM TGE_IMPORT_ELEMENTS E2
      WHERE e2.login     = P_LOGIN
      AND e2.date_import = p_date_import
      AND ((e2.ERREURS  IS NULL
      AND e2.STATUT     IN ('TRAIT','FIN'))
      OR (e2.ERREURS    IS NOT NULL
      AND e2.STATUT      = 'TRANS'))
      AND EXISTS (SELECT 'ACTIVE_RETRO_GC'
	 	FROM TGE_REF_PAC
	 	WHERE NUMPAC = e2.NUMPAC
	 		AND (DEB_RETRO IS NULL OR DEB_RETRO > e2.periode)
	 	)
      );
    ----------------------------------------------------------------------------
    
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_ELEMENTS');
    -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   	UPDATE TGE_IMPORT_ELEMENTS
   	SET STATUT ='TRANS'
   	WHERE LOGIN = P_LOGIN
   	AND DATE_IMPORT = p_date_import
   	AND (ERREURS IS NOT NULL
   	AND STATUT = 'TRAIT')
   	AND CODE_ELEMENT NOT IN ('B690','B691');
	
   	-- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
    UPDATE TGE_IMPORT_ELEMENTS
    SET STATUT ='FIN'
    WHERE LOGIN = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND ERREURS IS NULL
    AND CODE_ELEMENT NOT IN ('B690','B691');
       
    -- Suppression des lignes dans dans DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début DELETE FROM dic_tge_imputations_perm');
    DELETE
    FROM DIC_TGE_IMPUTATIONS_PERM A
    WHERE (A.NUMPAC,A.PAIEZAD) IN
      (SELECT B.NUMPAC,
        B.paiezad
      FROM TGE_IMPORT_ELEMENTS B
      WHERE B.CODE_ELEMENT >='B690'
      AND B.CODE_ELEMENT   <='B691'
      AND B.CODE_ELEMENT   IS NOT NULL
      AND B.ERREURS        IS NULL
      AND B.DATE_IMPORT     = p_date_import
      AND B.LOGIN           = P_LOGIN
      GROUP BY LOGIN,
        NUMPAC,
        PAIEZAD,
        DATE_IMPORT,
        INDICATIF
      HAVING COUNT(DISTINCT B.CODE_ELEMENT ) >1
      ) ;
    -- Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE');
    FOR b_numpac IN
    (SELECT DISTINCT numpac
    FROM TGE_IMPORT_ELEMENTS
    WHERE LOGIN       = P_LOGIN
    AND DATE_IMPORT   = p_date_import
    AND ERREURS      IS NULL
    AND code_ELEMENT IN ('B690','B691')
    )
    LOOP
      req      :='insert into DIC_TGE_IMPUTATIONS_PERM p(numpac,paiezad,MATRIC,pacmat';
      reqInsert:='select numpac,paiezad,MATRICULE,pacmat,';
      reqvalues:= ' from (select numpac,paiezad,MATRICULE,pacmat,code_element||''#''||indicatif as el, valeur';
      reqvalues:= reqvalues|| ' from TGE_IMPORT_ELEMENTS b where login='''||p_login||''' and date_import='''||P_DATE_IMPORT||''' and code_element in (''B690'',''B691'')  )';


      reqvalues:= reqvalues|| '  pivot (max(valeur)   for(el) in (';
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion DIC_TGE_IMPUTATIONS_PERM');
      FOR cur IN
      (SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     =b_numpac.numpac
      UNION
      SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     ='*'
      )
      LOOP
        req           :=req||','||cur.DONNEEGXP;
        reqvalues     := reqvalues||''''||cur.element||'#'||cur.occurence ||''' as '|| cur.DONNEEGXP||',';
        IF cur.element ='B690' THEN
          reqInsert   := reqInsert||cur.DONNEEGXP ||',';
        ELSE
          reqInsert:= reqInsert||' IS_NUMBER(replace('||cur.DONNEEGXP ||','','',''.'')) as '||cur.DONNEEGXP ||' ,';
        END IF;
        IF P_LOGIN = 'BATCH' THEN
          SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPUTATION_PAIE', 'CARTE=30&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE||'&ELEMENT='||cur.element||'&DONNEEGXP='||cur.DONNEEGXP, 'Import Batch 30 B690/B691','C',NULL,NULL,NULL,NULL);
        END IF;
      END LOOP;
      reqvalues:= SUBSTR(reqvalues,1,LENGTH(reqvalues)-1)||'))  ';
      reqvalues:= reqvalues|| ' b where   exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||'''  and c.date_import='''||P_DATE_IMPORT||'''  and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B690''   and ERREURs is  null)
      and  exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||''' and c.date_import='''||P_DATE_IMPORT||''' and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B691''  and ERREURs is  null) ';
      reqInsert:= SUBSTR(reqInsert,1,LENGTH(reqInsert)-1);
      req      :=req||')  ';
      req      :=req||reqInsert|| reqvalues;
       EXECUTE_IMMEDIATE_STRING( req,0);
    END LOOP;
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
    UPDATE TGE_IMPORT_LISTE
    SET NBLIGNES_ERR =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      AND ERREURS    IS NOT NULL
      ),
      NBLIGNES_IMP =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      ),
      STATUT        ='TRANS'
    WHERE LOGIN     = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND TYPE        = 2;
    -- Inscription en recyclage
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Inscription en recyclage');
  END IF;
END TGE_IMPORT_30;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : VI -> pour la validation des imports Web ou Batch, MP -> pour la validation depuis le Market Place
 P_TYPE_ACTION IN VARCHAR2)
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 doRollback boolean;
 desactiveTraitements   VARCHAR2(1000);

 BEGIN
 doRollback:=false;
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début');
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = C.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 and A.ERREURS is null
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 and a.erreurs is null
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then 
  doRollback:=true;
  GOTO end_proc;
 end if ; 
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, P_TYPE_ACTION );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 if(SQLCODE='-20001') then 
   doRollback:=true;
   GOTO end_proc;
  end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 -- activer ou non les nouveaux traitements de l'import 3040
 select NVL(upper(VALVAR), ' ') into desactiveTraitements from sys_varsys where module='STD' and codvar='DESACTIVE_TRAITEMENTS_IMPORT_3040';
 IF INSTR(desactiveTraitements, 'TGE_CONTROLE_40_CHEVAUCHEMENT') < 1 THEN
	 --controle chevauchement
	 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 END IF;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT,
 ORIGINE
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT,
 ABSENCES.ORIGINE
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT,
  INCI.origine AS ORIGINE     --origine 
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ,
 TGE_REF_ORIGINE_GTA
 WHERE ABSENCES.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND ABSENCES.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20000') then 
  doRollback:=true;
  GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 IF INSTR(desactiveTraitements, 'TGE_REGROUPE_ABS') < 1 THEN
 	-- Regroupement des absences importé
 	TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 END IF;
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_LISTE');
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 5;
 
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 0;
 
 
 
 END IF;
 END IF ;

 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 <<end_proc>> 
 if(doRollback) then
  ROLLBACK;
  if(P_WITH30=1) then
    UPDATE TGE_IMPORT_ELEMENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
    end if;
  if(P_WITH40=1) then
    UPDATE TGE_IMPORT_INCIDENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
  end if;
  if(P_WITH60=1 or P_WITH70=1) then
  UPDATE TGE_IMPORT_DONNEES
  SET ERREURS =TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
  WHERE LOGIN      = P_LOGIN
  AND DATE_IMPORT  = p_date_import ;
  
  end if;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Rollback de l''import suite à une détection d''un traitement de paie en cours.');
  FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , 'Une paie est en cours d''exécution.' );
 
  end if;

 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_6070
=SQL=
create or replace PROCEDURE TGE_IMPORT_6070 
(
  P_LOGIN IN VARCHAR2 
, P_DATE_IMPORT IN VARCHAR2 
, P_ROLE IN VARCHAR2 -- pour les traces
  -- Origine écran
, P_ORIGINE IN VARCHAR2  -- pour les traces
, P_VALIDATION IN VARCHAR2 
, P_WITH60 IN VARCHAR2 
, P_WITH70 IN VARCHAR2 
, P_CODLANG IN VARCHAR2 
-- Valeurs attendues : EC -> écran création, EM -> écran modification, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
, P_TYPE_ACTION IN VARCHAR2
) AS 

  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  dateMaj SYS_TRC_MODIF.datemaj%type;
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
 IF  ( P_WITH60 =1  OR P_WITH70 = 1) THEN
    BEGIN
      TGE_CONTROLE_DONNEE_PAIE (p_login,p_date_import,NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_DONNEE_PAIE - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
  	    raise;
  	  END IF;
    END ;
 END IF;
 IF p_validation = 1 THEN
   BEGIN
   	 INSERT INTO TGE_DONNEES_PAIE (NUMPAC                 ,
                                 PAIEZAD                    ,
                                 PERIODE                    ,
                                 TYPE_TRAITEMENT            ,
                                 TYPE_DONNEE                ,
                                 CODE_RUBRIQUE              ,
                                 CODE_CAISSE                ,
                                 NO_SEQUENCE                ,
                                 SENS                       ,
                                 CODE_IMPUTATION            ,
                                 ORIGINE                    ,
                                 NOMBRE                     ,
                                 TAUX                       ,
                                 MONTANT                    ,
                                 POURCENTAGE                ,
                                 DOMAINE_PRCTE              ,
                                 DERNIER_CODE_OPE           ,
                                 LOGIN_MAJ                  ,
                                 DATE_MAJ                   ,
                                 CLE_IMPORT                 ,
                                 IDPACMAT                   ,
                                 PERIODE_RATTACH_DEB        ,
                                 PERIODE_RATTACH_FIN        ,
                                 DATE_DEB_ARRET             ,
                                 PERIODE_AFFECTATION        ,
                                 TYPE_WRITER                ,
                                 CODE_REMPLACEMENT			,
                                 DATE_EFFET           		,
                                 ACTION_RETRO				,
                                 ACTION_RETRO_DATE
                                 )
                                 
              SELECT                   DONNEES.NUMPAC,
                                       DONNEES.PAIEZAD,
                                       DONNEES.PERIODE,
                                       DONNEES.TYPE_TRAITEMENT,
                                       DONNEES.TYPE_DONNEE,
                                       DONNEES.CODE_RUBRIQUE,
                                       DONNEES.CODE_CAISSE,
                                       is_number(DONNEES.NO_SEQUENCE+DONNEES.CMPT),
                                       DONNEES.SENS,
                                       DONNEES.CODE_IMPUTATION,
                                       DONNEES.ORIGINE,
                                       is_number(DONNEES.NOMBRE),
                                       is_number(DONNEES.TAUX),
                                       is_number(DONNEES.MONTANT),
                                       is_number(DONNEES.POURCENTAGE),
                                       DONNEES.DOMAINE_PRCTE,
                                       DONNEES.DERNIER_CODE_OPE,
                                       DONNEES.LOGIN_MAJ,
                                       DONNEES.DATE_MAJ,
                                       DONNEES.CLE_IMPORT,
                                       DONNEES.IDPACMAT,
                                       DONNEES.PERIODE_RATTACH_DEB,
                                       DONNEES.PERIODE_RATTACH_FIN,
                                       DONNEES.DATE_DEB_ARRET,
                                       DONNEES.PERIODE_AFFECTATION,
                                       DONNEES.TYPE_WRITER,
                                       DONNEES.CODE_REMPLACEMENT,
                                       DONNEES.DATE_EFFET,
                                       DONNEES.ACTION_RETRO,
                                       DONNEES.ACTION_RETRO_DATE
              FROM    
              (SELECT            dense_rank() over (partition by tg.NUMPAC,tg.PAIEZAD,tg.PERIODE,tg.TYPE_TRAITEMENT,tg.TYPE_DONNEE,tg.CODE_RUBRIQUE,tg.CODE_CAISSE order by tg.NUMLIGNE desc)  as CMPT,     
                                 TG.NUMPAC,
                                 TG.PAIEZAD,
                                 TG.PERIODE,
                                 TG.TYPE_TRAITEMENT,
                                 TG.TYPE_DONNEE ,
                                 TG.CODE_RUBRIQUE,
                                 NVL(TG.CODE_CAISSE,'*') AS CODE_CAISSE,
                            (select NVL(max(tp.no_sequence),0 )
                             from TGE_DONNEES_PAIE tp
                             where tp.NUMPAC=tg.NUMPAC
                             AND tp.PAIEZAD=tg.PAIEZAD
                             AND tp.PERIODE =tg.PERIODE
                             AND tp.TYPE_TRAITEMENT =tg.TYPE_TRAITEMENT
                             AND tp.TYPE_DONNEE = tg.TYPE_DONNEE
                             AND tp.CODE_RUBRIQUE =tg.code_rubrique
                             AND tp.CODE_CAISSE=NVL(tg.code_caisse,'*')) AS no_sequence,
                             TG.SENS,
                             TG.CODE_IMPUTATION,
                             TG.ORIGINE,
                             TG.NOMBRE                     ,
                             TG.TAUX                       ,
                             TG.MONTANT                    ,
                             TG.POURCENTAGE                ,
                             TG.DOMAINE_PRCTE              ,
                             'C'  AS   DERNIER_CODE_OPE ,
                             P_LOGIN AS LOGIN_MAJ,
                             TO_CHAR (sysdate, 'YYYYMMDDHH24MI') AS DATE_MAJ,
                             -- Pour les DV/DR, on va stocker une clé d'import même lorsque l'on vient de l'écran
                             -- afin de pouvoir retrouver la ligne créée et le no_sequence (pour les traces)
                             P_LOGIN||'#'||P_DATE_IMPORT||'#'||NUMLIGNE AS CLE_IMPORT,
                             CASE
                               WHEN TG.NUMPAC IS NOT NULL
                               AND TG.PACMAT  IS NOT NULL
                               THEN RPAD(TG.NUMPAC,6)|| TG.PACMAT
                               ELSE ' '
                             END AS IDPACMAT,
                             to_date(TG.PERIODE_RATTACH_DEB, 'YYYYMMDD') as PERIODE_RATTACH_DEB,
                             to_date(TG.PERIODE_RATTACH_FIN, 'YYYYMMDD') as PERIODE_RATTACH_FIN,
                             to_date(TG.DATE_DEB_ARRET, 'YYYYMMDD') as DATE_DEB_ARRET,
                             to_date(TG.PERIODE_AFFECTATION, 'YYYYMMDD') as PERIODE_AFFECTATION,
                             case 
                               when (select O.MODE_T2||'#'||O.ENVOI_MODE_R from TGE_REF_ORIGINE_GTA O where O.NUMPAC = TG.NUMPAC and O.CODE_ORIGINE = TG.ORIGINE) = 'R#N'
      						   then 'N'
      						   else NULL
                             end as TYPE_WRITER,
                             TG.CODE_REMPLACEMENT,
                             to_date(TG.DATE_EFFET,'YYYYMMDD') as DATE_EFFET,
                             -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
                             -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
                             -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
                             case
                             	when  TG.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = TG.NUMPAC)
                             	then '*'
                             	else NULL
                             end as ACTION_RETRO,
                             NULL as ACTION_RETRO_DATE
                             
          FROM               TGE_IMPORT_DONNEES  TG
          WHERE              TG.LOGIN            = P_LOGIN 
          AND                TG.DATE_IMPORT      = P_DATE_IMPORT
          AND ((TG.ERREURS   IS NULL
          AND TG.STATUT  = 'TRAIT')
          OR (TG.ERREURS  IS NULL
          AND TG.STATUT   = 'TRANS')))DONNEES;
          
          -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
          update TGE_DONNEES_PAIE set 
          	ACTION_RETRO = 'C',
          	ACTION_RETRO_DATE = DATE_MAJ
          where ACTION_RETRO = '*';
   END ;
   
   IF P_TYPE_ACTION = 'VI' THEN
     --- Gestion de la trace : on enregistre une trace généréale lors d'un import car on ne peut pas gérer de trace individuelle
     TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT, 'Trace SYS_TRC_MODIF : insertion TGE_DONNEES_PAIE');
     SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_DONNEE_ELT_PAIE', 'CARTE=60/70&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
       'Import Batch/Web 60/70','C',null,null,null,null);
   ELSIF P_TYPE_ACTION = 'MP' THEN
    	--- Gestion de la trace : on enregistre une trace généréale lors d'une saisie depuis la Market Place car on ne peut pas gérer de trace individuelle 
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_DONNEES_PAIE');
      SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPORT_DONNEE_ELT_PAIE', 'LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Market Place 60/70','C',NULL,NULL,NULL,NULL);
   END IF;
   
   TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_DONNEES');
   -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT = 'TRANS'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND (ERREURS IS NOT NULL
   AND STATUT = 'TRAIT');
	 
   -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT ='FIN'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND ERREURS IS NULL;
   
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
	-- DV
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '1'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '1'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '1';
	-- DR
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '3'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '3'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '3';
	-- DR Cotis
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '4'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '4'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '4';
   
 END IF ;
EXCEPTION
  WHEN OTHERS THEN
  w_err := ' '||w_err|| sqlerrm;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidDonneePaie - Erreur : ' || w_err);
  IF (P_LOGIN != 'BATCH' or SQLCODE='-20001') THEN
  	-- On remonte l'erreur à l'application
    raise;
  END IF;
END TGE_IMPORT_6070;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_LISTE
=SQL IFNOTEXIST=TGE_IMPORT_LISTE=FSED_WITH_ANNULATION=
alter table TGE_IMPORT_LISTE add FSED_WITH_ANNULATION varchar2(1) default 'N'
##
TAG_CHARSET=@€éèç
##
XLS_DOCMODEL
==
delete from XLS_DOCMODEL where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 'Export annulations', 'Annulation_', 0, 0, 'TGE'
##
TAG_CHARSET=@€éèç
##
XLS_MATCHING_DATA
==
delete from XLS_MATCHING_DATA where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 0, 'matricule', 'String', 32, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 1, 'numPac', 'String', 6, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 2, 'pacMat', 'String', 8, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 3, 'codeElement', 'String', 4, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 4, 'origine', 'String', 1, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 5, 'periode', 'String', 6, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 6, 'paieZad', 'String', 8, 'Y', null
'TGE_EXP_ANN', '20201130', 0, 7, 'erreurs', 'String', 3000, 'Y', null
##
TAG_CHARSET=@€éèç
##
XLS_MATCHING_TITLE
==
delete from XLS_MATCHING_TITLE where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 0, 'fr_fr', 'Identifiant RH'
'TGE_EXP_ANN', '20201130', 0, 1, 'fr_fr', 'Numéro de pac'
'TGE_EXP_ANN', '20201130', 0, 2, 'fr_fr', 'Matricule Paie'
'TGE_EXP_ANN', '20201130', 0, 3, 'fr_fr', 'Code annulation'
'TGE_EXP_ANN', '20201130', 0, 4, 'fr_fr', 'Origine'
'TGE_EXP_ANN', '20201130', 0, 5, 'fr_fr', 'Période'
'TGE_EXP_ANN', '20201130', 0, 6, 'fr_fr', 'Référence période d''emploi'
'TGE_EXP_ANN', '20201130', 0, 7, 'fr_fr', 'Message(s)'
##
TAG_CHARSET=@€éèç
##
XLS_SHEET
==
delete from XLS_SHEET where CODDOC = 'TGE_EXP_ANN' and DTEFFET = '20201130'
'TGE_EXP_ANN', '20201130', 0, 1, 'fr.adp.com.cougar.std.modules.lib.objects.zpaie.importexport.ImpExpAnnulationXls','TGE_EXP_ANN',8, 8
##
TAG_CHARSET=@€éèç
##
XLS_SHEET_LIB
==
delete from XLS_SHEET_LIB where CODE_SHEET = 'TGE_EXP_ANN'
'TGE_EXP_ANN', 'fr_fr', 'Export annulations'
## 
TAG_CHARSET=@€éèç 
##
TGE_REGROUPE_ABS
=SQL=
CREATE OR REPLACE PROCEDURE TGE_REGROUPE_ABS(
    P_CLE_IMPORT IN VARCHAR2)
AS
BEGIN

	if (P_CLE_IMPORT like 'BATCH#%') THEN
		SYS_RECALCUL_STATS('TGE_ABSENCES');
		SYS_RECALCUL_STATS('TGE_INCIDENTS_PAIE');
	END IF;

  /*
  * Etape 1
  * Mise à jour des date de fin des absences pouvant être regroupé
  *
  */
  MERGE INTO TGE_ABSENCES USING
  (SELECT DISTINCT 
 	(SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND INC2.ORIGINE = TB1.ORIGINE AND INC2.CODE_IP = TB1.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE,
 	NEW_DATE_FIN,ORIGINE
 FROM (SELECT  NUMPAC,
    PAIEZAD,
    CODE_IP,
    MIN(d) NEW_DATE_DEBUT,
    MAX(d) NEW_DATE_FIN,
    ORIGINE
  FROM
    (SELECT INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.ORIGINE ,
      INC.DATE_EFFET d,  
      ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP, INC.ORIGINE, INC.DATE_EFFET) i
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ORIGINE = INCHP.ORIGINE
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
    substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP     != 'HP'
    AND INC.CLE_ABSENCE IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES        = ''
    OR (INC.HEURES      >= INCHP.HEURES)
    OR (PRE.UNITE        = 'J'
    AND INC.HEURES      >= 1))
    GROUP BY INC.NUMPAC,
      INC.PAIEZAD,
      INC.CODE_IP,
      INC.ORIGINE,
      INC.DATE_EFFET
    )
  GROUP BY NUMPAC,
    PAIEZAD,
    CODE_IP,
    ORIGINE	,
    (d-i)
   
  )TB1) TB ON (TGE_ABSENCES.ID = TB.CLE_ABSENCE and TGE_ABSENCES.ORIGINE = TB.ORIGINE)
WHEN MATCHED THEN
  UPDATE SET TGE_ABSENCES.DATE_FIN = TB.NEW_DATE_FIN;
  /*
  * Etape 2
  * Suppresion des absences pouvant être regroupé
  *
  */
  DELETE
  FROM TGE_ABSENCES
  WHERE
  substr(REGEXP_REPLACE(TGE_ABSENCES.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND exists
    (SELECT 1
    FROM TGE_INCIDENTS_PAIE INC
    LEFT JOIN TGE_INCIDENTS_PAIE INCHP
    ON INC.NUMPAC      = INCHP.NUMPAC
    AND INC.PAIEZAD    = INCHP.PAIEZAD
    AND INC.DATE_EFFET = INCHP.DATE_EFFET
    AND INC.ID        != INCHP.ID
    AND INCHP.CODE_IP  = 'HP'
	AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    INNER JOIN TGE_REF_PRE PRE
    ON INC.NUMPAC   = PRE.NUMPAC
    AND INC.CODE_IP = PRE.CODE_INCIDENT
    WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
    AND INC.CODE_IP         != 'HP'
    AND INC.CLE_ABSENCE     IS NOT NULL
    AND (nvl(INC.HEURES,'0') = '0'
    OR INC.HEURES            = ''
    OR (INC.HEURES          >= INCHP.HEURES)
    OR (PRE.UNITE            = 'J'
    AND INC.HEURES          >= 1))
    AND NOT exists (select 1 from 
      (SELECT  
 (SELECT MIN(CLE_ABSENCE) FROM TGE_INCIDENTS_PAIE INC2 WHERE INC2.NUMPAC = TB1.NUMPAC AND INC2.PAIEZAD = TB1.PAIEZAD AND INC2.DATE_EFFET = TB1.NEW_DATE_DEBUT AND INC2.ORIGINE = TB1.ORIGINE AND TB1.CODE_IP = INC2.CODE_IP and substr(REGEXP_REPLACE(INC2.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT) AS CLE_ABSENCE
 FROM (SELECT 
      NUMPAC,
      PAIEZAD,
      CODE_IP,
      MIN(d) NEW_DATE_DEBUT,
      ORIGINE  
      FROM
        (SELECT INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET d,
          INC.ORIGINE ,
          ROW_NUMBER() OVER(ORDER BY INC.NUMPAC,INC.PAIEZAD,INC.CODE_IP,INC.ORIGINE,INC.DATE_EFFET) i
        FROM TGE_INCIDENTS_PAIE INC
        LEFT JOIN TGE_INCIDENTS_PAIE INCHP
        ON INC.NUMPAC      = INCHP.NUMPAC
        AND INC.PAIEZAD    = INCHP.PAIEZAD
        AND INC.DATE_EFFET = INCHP.DATE_EFFET
        AND INC.ID        != INCHP.ID
        AND INCHP.CODE_IP  = 'HP'
		AND substr(REGEXP_REPLACE(INCHP.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        INNER JOIN TGE_REF_PRE PRE
        ON INC.NUMPAC   = PRE.NUMPAC
        AND INC.CODE_IP = PRE.CODE_INCIDENT
        WHERE 
		substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
        AND INC.CODE_IP     != 'HP'
        AND INC.CLE_ABSENCE IS NOT NULL
        AND (nvl(INC.HEURES,'0') = '0'
        OR INC.HEURES        = ''
        OR (INC.HEURES      >= INCHP.HEURES)
        OR (PRE.UNITE        = 'J'
        AND INC.HEURES      >= 1))
        GROUP BY INC.NUMPAC,
          INC.PAIEZAD,
          INC.CODE_IP,
          INC.DATE_EFFET,
          INC.ORIGINE
        )
      GROUP BY NUMPAC,
        PAIEZAD,
        CODE_IP,
        (d-i),
        ORIGINE
      )TB1) tb2 where inc.cle_absence = tb2.cle_absence) 
       and TGE_ABSENCES.ID = INC.CLE_ABSENCE
    );
  /*
  * Etape 3
  * Mise à jour des clé absences des incidents paie liée a des absences ayant été regroupé
  *
  */
  MERGE INTO TGE_INCIDENTS_PAIE USING
  (SELECT DISTINCT INC.ID AS ID,
    MIN(ABS.ID)       AS CLE
  FROM TGE_INCIDENTS_PAIE INC
  INNER JOIN DIC_ADM_CONTRAT_SITU S
  ON S.NUMPAC   = INC.NUMPAC
  AND S.PAIEZAD = INC.PAIEZAD
  AND INC.DATE_EFFET BETWEEN S.DSDSC AND S.DSFSC
  INNER JOIN TGE_ABSENCES ABS
  ON ABS.MATRIC   = S.MATRIC
  AND INC.CODE_IP = ABS.MOTIF
  AND INC.DATE_EFFET BETWEEN ABS.DATE_DEBUT AND ABS.DATE_FIN
  AND INC.ORIGINE = ABS.ORIGINE
  WHERE NOT EXISTS
    (SELECT 1 FROM TGE_ABSENCES WHERE ID = INC.CLE_ABSENCE
    )
  AND substr(REGEXP_REPLACE(INC.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT
  AND substr(REGEXP_REPLACE(ABS.CLE_IMPORT,'#\d+$',''),0,80) = P_CLE_IMPORT   
  AND INC.CLE_ABSENCE            IS NOT NULL
  GROUP BY INC.ID
  ) TB ON ( TGE_INCIDENTS_PAIE.ID = TB.ID)
WHEN MATCHED THEN
  UPDATE SET TGE_INCIDENTS_PAIE.CLE_ABSENCE = TB.CLE;
END TGE_REGROUPE_ABS;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_ABSENCES
=SQL=
create or replace PROCEDURE TGE_CONTROLE_ABSENCES ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 ) AS
 /********************************************************************************
Version     : V5.05.000
*********************************************************************************/
 cNumeric_Characters varchar2(40);
 cNLS_NUMERIC_CHARACTERS varchar2(40);
 clWhereLoginDate varchar2(1000);
 clWhere varchar2(1000);
 req varchar2(2000);
 w_err VARCHAR2(2000);
 BEGIN
 SELECT TRIM(VALUE) INTO cNLS_NUMERIC_CHARACTERS FROM nls_session_parameters where PARAMETER = 'NLS_NUMERIC_CHARACTERS';
 
 clwhereLoginDate:='login='''||p_login||''' and date_import='''||P_DATE_IMPORT||'''';
 --Ajout clause incident
 clwhere:=clWhereLoginDate||' and ( exists ( (SELECT ri.CODE_INCIDENT FROM TGE_REF_PRE ri WHERE ri.numpac = ii.numpac AND  ri.OPTION_CONSERV_HISTO = ''A'' and CODE_IP=ri.CODE_INCIDENT) )OR ';
 clwhere:=clwhere||' exists (SELECT ri.CODE_INCIDENT FROM TGE_REF_PRE ri WHERE ri.numpac=''*''  and CODE_IP=ri.CODE_INCIDENT AND ri.OPTION_CONSERV_HISTO = ''A'' ';
 clwhere:=clwhere||' AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rt2 WHERE rt2.numpac=ii.numpac and  CODE_IP=rt2.CODE_INCIDENT ))) ';
 if p_numligne is not null then
 clwhere:=clwhere||' AND NUMLIGNE='||p_numligne;
 end if;
 /*Champs obligatoires*/
 --contenuMotif(p_absence.motif, arrErreurs);ToolsTge_controles.contenu(p_motif, "TGE00142", p_arrErreurs);CODE_IP
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00142',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IP is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenuDate_debut(p_absence.date_debut, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00108", new String[] {}));
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00108',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenuDate_fin(p_absence.date_fin, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00109", new String[] {}));
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00109',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where  '||clwhere||' AND DATE_FIN is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --contenu numpac  ToolsTge_controles.contenuNumPac(p_absence.numPac, arrErreurs); TGE00077
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /* Contrôles format */
 --controleFormatMatricule(p_absence.matric, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00089", new String[] {}));--MATRIC
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00089',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND MATRICULE is NOT NULL AND LENGTH(MATRICULE)>32';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --controleFormatMotif(p_absence.motif, arrErreurs);p_arrErreurs.add(new GxpErreurWithParams("TGE00143", new String[] {}));MOTIF
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00143',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND (CODE_IP IS NOT NULL AND LENGTH(CODE_IP) > 2)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ToolsTge_controles.controleFormatNumPac(p_absence.numPac, arrErreurs);TGE00072
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',NUMPAC,'''||p_codlang||''') where '||clwhere||' AND NUMPAC IS NOT NULL AND LENGTH(NUMPAC)>6';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 /* Contrôles métier */
 --Format date fin et date
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',date_debut||''|''||date_fin,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT IS NOT NULL AND DATE_FIN IS NOT NULL '||
 ' AND  (IS_DATE(date_debut, ''YYYYMMdd'')=0 OR IS_DATE(date_fin, ''YYYYMMdd'')=0)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --date_debut> date_fin
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',date_debut||''|''||date_fin,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT IS NOT NULL AND DATE_FIN IS NOT NULL '||
 ' AND  DATE_DEBUT>DATE_FIN  AND IS_DATE(date_debut, ''YYYYMMdd'')=1 AND  IS_DATE(date_fin, ''YYYYMMdd'')=1 AND  '||clwhere;
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controlePlageSiDuree: n'est pas valable puisque debut_ma ='D' et fin_ma tjrs

 --controleAbsenceInPeriodeActivite(p_absence, arrErreurs); verification de la négation "TGE00148"
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00148',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')where '||clwhere;
 req:= req || ' AND EXISTS ( SELECT 1
 FROM DIC_ADM_CONTRAT dac, dic_adm_contrat_histo dach
 WHERE dac.numpac=dach.numpac and dac.numpac=ii.numpac
 AND dac.pacmat=dach.pacmat and dac.pacmat=ii.pacmat
 AND dac.numcnt=dach.numcnt 
 AND ii.date_debut <=TO_CHAR(dach.date_sortie_sit_bo,''yyyymmdd'')
 AND ii.date_fin  > TO_CHAR(dac.dsfcn,''yyyymmdd'')
 AND dac.DSFCN<dach.DATE_SORTIE_SIT_BO)';
 EXECUTE_IMMEDIATE_STRING( req,0);

 ---controleExistenceMotif TGE00161
 req:='update TGE_IMPORT_INCIDENTS  ii  SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00161',p_codlang),'''','''''')||''',CODE_IP||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clWhereLoginDate||' AND II.CODE_IP IS NOT NULL ';
 req:= req || ' AND NOT (';
 req:= req ||   '(exists(SELECT p.CODE_INCIDENT FROM TGE_REF_PRE P WHERE p.numpac=II.numpac AND p.CODE_INCIDENT=II.CODE_IP  and II.CODE_IP= p.CODE_INCIDENT))';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT p.CODE_INCIDENT FROM TGE_REF_PRE P WHERE p.numpac=''*'' and II.CODE_IP= p.CODE_INCIDENT AND p.CODE_INCIDENT=II.CODE_IP AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rt2 WHERE rt2.numpac=II.numpac)))';
 req:= req || ')  ' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 --ToolsTge_controles.controleAutorisationMatric(p_loginOrLoginDelegator, p_absence.matric, arrErreurs);STD00014
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00014',p_codlang),'''','''''')||''',MATRICULE,'''||p_codlang||''') where '||clwhere||
 'AND MATRICULE IS NOT NULL and NOT exists (select S.MATRIC  from SECUPACMAT S, DIC_ADM_CONTRAT C where  C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT and S.MATRIC =ii.MATRICULE)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controlerMotifInAllNumPac TGE00161
 req:='update TGE_IMPORT_INCIDENTS  ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00161',p_codlang),'''','''''')||''',CODE_IP||''|''||NUMPAC,'''||p_codlang||''')';
 req:= req || ' where '||clwhereLoginDate|| ' AND MATRICULE IS NOT NULL AND NUMPAC IS NOT NULL AND (DATE_DEBUT IS NOT NULL OR DATE_FIN IS NOT NULL)';
 req:= req || ' and II.CODE_IP IS NOT NULL and exists ';
 -- Récupération de la liste des numPac pour lesquels le code incident n'existe pas
 req:= req || ' (select NUMPAC from TGE_REF_PAC where ( NUMPAC not in (select NUMPAC from TGE_REF_PRE where code_incident = ii.code_IP) and not exists (select * from TGE_REF_PRE where code_incident = ii.code_IP  and NUMPAC = ''*''))';
 req:= req || ' and NUMPAC in (select distinct C.NUMPAC from   DIC_ADM_CONTRAT C where  C.MATRIC = ii.matricule and  C.DSDCN  <= to_DATE(ii.date_debut,''YYYYMMDD'') and (C.DSFCN >= TO_DATE(ii.date_fin,''YYYYMMDD'')  or C.DSFCN is null ))'||
 ')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controle Période de recueil
 END TGE_CONTROLE_ABSENCES;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_40
=SQL=
create or replace PROCEDURE TGE_CONTROLE_40 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 , P_ISFSED in NUMBER
 ) AS
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
 cNumeric_Characters varchar2(40);
 cNLS_NUMERIC_CHARACTERS varchar2(40);
 clWhere varchar2(1000);
 req varchar2(2000);
 w_exist_incident VARCHAR2(2000);
 w_err VARCHAR2(2000);
 
 /* Objets utilisés pour le contrôle sur la somme des heures réalisées */
 -- Objet contenant un tableau des lignes par collaborateur par jour avec les sommes des heures réalisées déjà créées (TGE_INCIDENTS_PAIE) et des heures réalisées ajoutées par l'import
 TYPE T_REC IS RECORD (
 numpac varchar2(6),
 paiezad varchar2(8),
 date_effet date,
 somme_heures number,
 somme_heures_trav_import number);
 TYPE typ_tab IS table of T_REC;
 tab typ_tab ;
 -- Plus petite et plus grande date de l'import
 v_dateMinImport varchar2(8);
 v_dateMaxImport varchar2(8);
 varsys varchar2(100);
 
 BEGIN
 
 SELECT substr(TRIM(VALUE),length(TRIM(VALUE)))  INTO cNLS_NUMERIC_CHARACTERS FROM nls_session_parameters where PARAMETER = 'NLS_NUMERIC_CHARACTERS';
 
 clwhere:='login='''||p_login||''' and date_import='''||p_date_import||'''';
 if p_numligne is not null then
 clwhere:=clwhere||' AND NUMLIGNE='||p_numligne;
 end if;
 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controler
 clwhere:=clwhere || ' AND (STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR STATUT = ''TRANS'')';
 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées
 IF p_login='BATCH' THEN
 req:='update TGE_IMPORT_INCIDENTS I SET ERREURS = '''' WHERE '||clwhere;
EXECUTE_IMMEDIATE_STRING (req,0);
 END IF;
 
 -- Numpac non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- TYPE_TRAITEMENT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00108',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00109',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_FIN is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- NUMPAC controle format
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',NUMPAC,'''||p_codlang||''') where '||clwhere||' AND  NVL(LENGTH(NUMPAC),0)>6 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 ---controleLigneImportIncidentVide(TGE_IMPORT_INCIDENTS_sgbd p_importIncident, ArrayList<GxpErreurWithParams> p_arrErreurs)INCI0025
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0025',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IP is null AND HEURES_IP IS NULL AND HEURES_TRAV IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD >8 cara
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',PAIEZAD,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00083',p_codlang),'''','''''')||''',PERIODE||''|yyyyMM'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(PERIODE ,''yyyyMM'') =0)' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00110',p_codlang),'''','''''')||''',DATE_DEBUT||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(DATE_DEBUT ,''yyyyMMdd'') =0) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00111',p_codlang),'''','''''')||''',DATE_FIN||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND IS_DATE(DATE_FIN ,''yyyyMMdd'') =0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_TRAV controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00112',p_codlang),'''','''''')||''',HEURES_TRAV,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_TRAV, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_IP controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00113',p_codlang),'''','''''')||''',HEURES_IP,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_IP, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE
 req:='update TGE_IMPORT_INCIDENTS INC SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00331',p_codlang),'''','''''')||''',INC.ORIGINE||''|''||INC.NUMPAC ,'''||p_codlang||''') WHERE '||clwhere;
 req:= req || ' and INC.ORIGINE is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_ORIGINE_GTA G where G.CODE_ORIGINE = INC.ORIGINE and G.NUMPAC = INC.NUMPAC)';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE (lig 1968)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (ORIGINE IS NOT NULL AND LENGTH(ORIGINE) >1) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE
  IF P_LOGIN ='BATCH' THEN 
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') OR (ORIGINE is null)) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  else if P_ISFSED=1 then
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') OR (ORIGINE is null)) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  END IF;
  END IF;
 
 -- CONTROLES EXISTENCES
 -- TYPE_TRAITEMENT (Lig 1971)
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' WHERE '||clwhere||' AND ii.TYPE_TRAITEMENT IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists  (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=ii.numpac and ii.type_traitement =RT.CODETYPTRT) )';
 req:= req || ' OR ';
 req:= req ||   '( exists (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=''*'' AND RT.codetyptrt= ii.type_traitement and ii.type_traitement =RT.CODETYPTRT AND NOT EXISTS (SELECT 1 FROM TGE_REF_TYPETRT RT2 WHERE RT2.NUMPAC=ii.numpac)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IMPUTATION (Lig 1972)
 
 select valvar into varsys from sys_varsys where module='TGE' and CODVAR='CTRL_CODE_IMPUTATION_EXISTE';
 if upper(varsys)<>'FALSE' then
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00012',p_codlang),'''','''''')||''',ii.code_imputation||''|''||ii.numPac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' and ii.code_imputation<>''*'' AND  ii.code_imputation IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac = ii.numpac and ri.codeimp=ii.code_imputation))';
 req:= req || ' OR ';
 req:= req ||   '(exists  (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac=''*'' AND  ri.codeimp=ii.code_imputation and ri.codeimp= ii.code_imputation AND NOT EXISTS (SELECT 1 FROM TGE_REF_IMPUTATION rt2 WHERE rt2.numpac=ii.numpac and rt2.codeimp= ii.code_imputation)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 end if;
 
 -- CODE_IP (Lig 1973)INCI0012
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0012',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.code_ip IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac ) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac=''*'' AND rp.code_incident=ii.code_ip AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rp2 WHERE rp2.numpac=ii.numpac and ii.code_ip=rp2.code_incident)))';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Contrôles spécifiques
 -- Date_Debut Date_Fin (lig 1977)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') WHERE '||clwhere||' AND  date_debut > date_fin ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- HEURES_TRAV TYPE_HEURE (lig 1978)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00114',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NOT NULL AND type_heure NOT IN (''T'',''R'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00115',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NULL AND type_heure IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IP HEURE_IP (lig 1979)
 /*req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00138',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_ip IS NOT NULL AND heures_ip IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);*/
 
 -- DOMAINE_IMP ligne 1980
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00119',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (DOMAINE_IMP IS NOT NULL AND CODE_IMPUTATION IS NULL) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00120',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NOT NULL AND domaine_imp != ''H'' AND domaine_imp !=''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00121',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NULL AND domaine_imp != ''H'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00122',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_ip IS NOT NULL AND heures_trav IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00136',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NULL AND heures_ip IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ctrl if heure contenuHeures(String p_heures, String p_type_ip, ArrayList<GxpErreurWithParams> p_arrErreurs) INCI0024
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0024',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND (((Ii.heures_ip IS NOT NULL OR Ii.code_ip is not null ) AND Ii.code_ip = ''HP'' AND II.heures_ip is null)
     OR (ii.HEURES_TRAV is null  AND ii.type_heure  in (''T'',''R''))
     ) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ToolsTge_controles.controleAutorisationPaieZad(p_loginUserOrDelegator, p_unIncident.numPac, p_unIncident.paieZad, arrErreurs);STD00049
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.paiezad IS NOT NULL AND ii.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleHoraireTheorique(p_unIncident, arrErreurs, p_transac); INCI0020 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0020',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.code_imputation IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleDateDebutFin(p_code_ip,p_date_debut,p_date_fin,p_arrErreurs); TGE00226 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','TGE00226',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.DATE_FIN !=  ii.DATE_DEBUT ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleCode_ip; INCI0027 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0027',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.type_heure != ''T'' AND  ii.type_heure != ''R''  AND (ii.CODE_IP =''HP'' OR ii.CODE_IP =''HT'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie en demi journée DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00264',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' AND ii.DATE_DEBUT is not null and ii.DATE_FIN is not null  and ii.DATE_DEBUT!=ii.DATE_FIN ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)=0.5 ';
 
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie du volume different de 0 ou 1 DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii  SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00265',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')'; 
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)!=0 AND is_number(ii.HEURES_IP)!=1  AND is_number(ii.HEURES_IP)!=0.5 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Bloquer les imports carte 40 sur des périodes antérieures à la date de limite de rétro
 req:='MERGE INTO TGE_IMPORT_INCIDENTS II USING ';
 req:= req ||' (SELECT NUMPAC, PERIODEENCOURS, DEB_RETRO, DEB_HISTO_RETRO, NB_MOIS_RETRO, ';
 req:= req ||'  GREATEST(NVL(DEB_HISTO_RETRO, ''190001''), (TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM''))) AS LIMITE_RETRO ';
 req:= req ||' FROM TGE_REF_PAC ) P';
 req:= req ||' ON (';
 req:= req || clwhere;
 req:= req ||' AND II.NUMPAC = P.NUMPAC';
 req:= req ||' AND II.PERIODE < P.PERIODEENCOURS';
 req:= req ||' AND ( P.DEB_RETRO IS NOT NULL AND P.DEB_RETRO <= P.PERIODEENCOURS';
 req:= req ||' ) ) WHEN MATCHED THEN UPDATE SET II.ERREURS = CASE';
 req:= req ||' WHEN II.PERIODE < P.DEB_HISTO_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00336',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.DEB_HISTO_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' WHEN II.PERIODE < P.LIMITE_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00337',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.LIMITE_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' END WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 -- Bloquer en mode non rétro les imports carte 40 sur des périodes antérieures à la période en cours
 req := 'MERGE INTO TGE_IMPORT_INCIDENTS II USING TGE_REF_PAC P ON( '|| clwhere;
 req := req || ' AND II.NUMPAC = P.NUMPAC';
 req := req || ' AND P.PERIODEENCOURS IS NOT NULL ';
 req := req || ' AND (P.DEB_RETRO > P.PERIODEENCOURS OR P.DEB_RETRO IS NULL) ';
 req := req || ' AND II.PERIODE < P.PERIODEENCOURS) ';
 req := req || ' WHEN MATCHED THEN UPDATE ';
 req := req || ' SET II.ERREURS = TGE_GET_MESSAGE_ERREUR(II.ERREURS, ''' || replace(get_message_erreur('TGE', 'TGE00351', p_codlang), '''', '''''') || ''', NULL, ''' || p_codlang || ''')';
 req := req || ' WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
 		-- On remonte l'erreur à l'application
  		raise;
  	END IF;
 END TGE_CONTROLE_40;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : VI -> pour la validation des imports Web ou Batch, MP -> pour la validation depuis le Market Place
 P_TYPE_ACTION IN VARCHAR2)
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 doRollback boolean;
 desactiveTraitements   VARCHAR2(1000);

 BEGIN
 doRollback:=false;
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début');
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = C.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 and A.ERREURS is null
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 and a.erreurs is null
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then 
  doRollback:=true;
  GOTO end_proc;
 end if ; 
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, P_TYPE_ACTION );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 if(SQLCODE='-20001') then 
   doRollback:=true;
   GOTO end_proc;
  end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 -- activer ou non les nouveaux traitements de l'import 3040
 select NVL(upper(VALVAR), ' ') into desactiveTraitements from sys_varsys where module='STD' and codvar='DESACTIVE_TRAITEMENTS_IMPORT_3040';
 IF INSTR(desactiveTraitements, 'TGE_CONTROLE_40_CHEVAUCHEMENT') < 1 THEN
	 --controle chevauchement
	 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 END IF;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT,
 ORIGINE
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT,
 ABSENCES.ORIGINE
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT,
  INCI.origine AS ORIGINE     --origine 
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ,
 TGE_REF_ORIGINE_GTA
 WHERE ABSENCES.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND ABSENCES.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20000') then 
  doRollback:=true;
  GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 IF INSTR(desactiveTraitements, 'TGE_REGROUPE_ABS') < 1 THEN
 	-- Regroupement des absences importé
 	TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 END IF;
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_LISTE');
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 5;
 
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_ANNULATION');
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 0;
 
 
 
 END IF;
 END IF ;

 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 <<end_proc>> 
 if(doRollback) then
  ROLLBACK;
  if(P_WITH30=1) then
    UPDATE TGE_IMPORT_ELEMENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
    end if;
  if(P_WITH40=1) then
    UPDATE TGE_IMPORT_INCIDENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
  end if;
  if(P_WITH60=1 or P_WITH70=1) then
  UPDATE TGE_IMPORT_DONNEES
  SET ERREURS =TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
  WHERE LOGIN      = P_LOGIN
  AND DATE_IMPORT  = p_date_import ;
  
  end if;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Rollback de l''import suite à une détection d''un traitement de paie en cours.');
  FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , 'Une paie est en cours d''exécution.' );
 
  end if;

 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
