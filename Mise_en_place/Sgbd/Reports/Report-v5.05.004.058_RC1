##
TAG_IMPORT=5.05.004.R058_RC1
##
TAG_CHARSET=@€éèç
##
BUILD_TABLE_INDEX
=SQL=
create or replace FUNCTION "BUILD_TABLE_INDEX"( p_codts IN std_struc_arbre.codts%TYPE ,p_date_eff IN std_struc_arbre.date_eff%TYPE ,p_date_fin IN std_struc_arbre.date_fin%TYPE ) RETURN INTEGER IS retour INTEGER; 
req CLOB;

BEGIN
 
 req:=' insert into STD_STRUC_INDEX (CODTS, LAST_ENTITE, DATE_EFF, DATE_FIN, NIV_TECH, IDX_CODE_ENTITE, NIV1, NIV2, NIV3, NIV4, NIV5, NIV6, NIV7, NIV8, NIV9, NIV10,';
 req:=req||'NIV11, NIV12, NIV13, NIV14, NIV15, NIV16, NIV17, NIV18, NIV19, NIV20, NIV21, NIV22, NIV23, NIV24, NIV25, NIV26, NIV27, NIV28, NIV29, NIV30, NIV31, NIV32, NIV33,';
 req:=req||'NIV34, NIV35, NIV36, NIV37, NIV38, NIV39, NIV40)';
 req:=req||' select '||p_codts||',code_entite,'''||p_date_eff||''','''||p_date_fin||''',niv_tech,chaine_entite,';
 req:=req||'NVL(';
      -- Si un code entité est défini pour le niveau, on le prend
 req:=req||' trim(SUBSTR(CHAINE_ENTITE, 1, 25))';
      -- S'il n'y a pas de code entité défini, mais par contre qu'il y a des codes entités définis après ce niveau, alors on écrit @NON_AFFECTE@
 req:=req||',NVL2( trim(SUBSTR(CHAINE_ENTITE, 26)) ,''@NON_AFFECTE@''';
      -- Sinon on met null
 req:=req||',''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 26, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 51)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 51, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 76)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 76, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 101)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 101, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 126)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 126, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 151)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 151, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 176)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 176, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 201)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 201, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 226)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 226, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 251)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 251, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 276)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 276, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 301)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 301, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 326)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 326, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 351)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 351, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 376)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 376, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 401)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 401, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 426)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 426, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 451)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 451, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 476)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 476, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 501)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 501, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 526)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 526, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 551)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 551, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 576)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 576, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 601)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 601, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 626)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 626, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 651)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 651, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 676)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 676, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 701)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 701, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 726)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 726, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 751)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 751, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 776)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 776, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 801)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 801, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 826)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 826, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 851)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 851, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 876)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 876, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 901)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 901, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 926)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 926, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 951)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
 req:=req||'NVL( trim(SUBSTR(CHAINE_ENTITE, 951, 25)) ,NVL2( trim(SUBSTR(CHAINE_ENTITE, 976)) ,''@NON_AFFECTE@'' ,''@VIDE@'' ) ),';
      -- Dernier niveau pas besoin de regarder s'il y a des codes entités après
 req:=req||'NVL(trim(SUBSTR(CHAINE_ENTITE, 976, 25)),''@VIDE@'')';
 req:=req||' from ( ';
 req:=req||' with ARBRE(CODE_ENTITE, CID, TYPE_ENTITE, NIVEAU, NB_OCC_MEME_TYPE, CODE_ENT_MERE, TYPE_ENTITE_MERE, NIVEAU_ENTITE_MERE, NB_OCC_ENTITE_MERE, NB_OCC_MEME_TYPE_MERE, CHAINE_ENTITE, NIV_TECH, CODTS) as (';
 req:=req||'  select';
 req:=req||'   A.CODE_ENTITE';
 req:=req||'   , E.CID';
 req:=req||'   , E.TYPE_ENTITE';
 req:=req||'   , N.NIVEAU';
 req:=req||'   , 1 as NB_OCC_MEME_TYPE';
 req:=req||'   , A.CODE_ENT_MERE';
 req:=req||'   , (';
 req:=req||'     select TYPE_ENTITE';
 req:=req||'     from STD_STRUC_ENTITE E1';
 req:=req||'     where E1.CODE_ENTITE = A.CODE_ENT_MERE';
 req:=req||'     and A.DATE_EFF between E1.DATE_EFF and E1.DATE_FIN';
 -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie : jointure arbre/entité
 req:=req||'     and E1.CID = (select VALVAR from SYS_VARSYS where CODVAR =''NS_CLIENT_ID'')';
 req:=req||'   ) as TYPE_ENTITE_MERE';
 req:=req||'   , 0 as NIVEAU_ENTITE_MERE';
 req:=req||'   , 0 as NB_OCC_ENTITE_MERE';
 req:=req||'   , 0 as NB_OCC_MEME_TYPE_MERE'; -- Calcule le nombre d'entité de même type qui se suivent (pour les occurrences multiples)
 req:=req||'   , RPAD('' '',(25*(n.niveau-1)))||RPAD(a.code_entite,25)';
 req:=req||'   , N.NIVEAU as NIV_TECH';
 req:=req||'   , a.codts';
 req:=req||'  from';
 req:=req||'   STD_STRUC_ARBRE A';
 req:=req||'   , STD_STRUC_ENTITE E';
 req:=req||'   , STD_STRUC_NIV N';
 req:=req||'  where';
 req:=req||'   A.CODTS = '||p_codts;
 req:=req||'   and A.CODE_ENT_MERE is null';
 req:=req||'   and '''||p_date_eff||''' between A.DATE_EFF and A.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between E.DATE_EFF and E.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between N.DATE_EFF and N.DATE_FIN';
 req:=req||'   and A.CODE_ENTITE = E.CODE_ENTITE';
 -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie : jointure arbre/entité
 req:=req||'   and E.CID = (select VALVAR from SYS_VARSYS where CODVAR =''NS_CLIENT_ID'')';
 req:=req||'   and E.TYPE_ENTITE = N.TYPE_ENTITE';
 req:=req||'   and A.CODTS = N.CODTS';
 req:=req||'   and A.STATUT = ''1''';
 req:=req||' union all';
 req:=req||'  select';
 req:=req||'   A.CODE_ENTITE';
 req:=req||'   , E.CID';
 req:=req||'   , E.TYPE_ENTITE';
 req:=req||'   , N.NIVEAU';
 req:=req||'   , case';
 req:=req||'      when E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'       then RECUR.NB_OCC_MEME_TYPE + 1';
 req:=req||'      else 1';
 req:=req||'   end as NB_OCC_MEME_TYPE';
 req:=req||'   , A.CODE_ENT_MERE';
 req:=req||'   , (';
 req:=req||'     select TYPE_ENTITE';
 req:=req||'     from STD_STRUC_ENTITE E1';
 req:=req||'     where';
 req:=req||'      E1.CODE_ENTITE = A.CODE_ENT_MERE';
 req:=req||'      and A.DATE_EFF between E1.DATE_EFF and E1.DATE_FIN';
 -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie : jointure arbre/entité
 req:=req||'     and E1.CID = (select VALVAR from SYS_VARSYS where CODVAR =''NS_CLIENT_ID'')';
 req:=req||'   ) as TYPE_ENTITE_MERE';
 req:=req||'   , RECUR.NIVEAU as NIVEAU_ENTITE_MERE';
 req:=req||'   , NIM.NB_OCCURRENCES as NB_OCC_ENTITE_MERE';
 req:=req||'   , RECUR.NB_OCC_MEME_TYPE as NB_OCC_MEME_TYPE_MERE';
 req:=req||'   , case';
 -- L'entité mère n'a pas d'occurrences multiples : l'écart entre les entités mère et fille correspond à la différence entre le niveau de l'entité mère et celui de la fille
 req:=req||'      when NIM.NB_OCCURRENCES = 1';
 req:=req||'       then CHAINE_ENTITE||RPAD('' '',(25*((N.NIVEAU - RECUR.NIVEAU)-1)))||RPAD(A.CODE_ENTITE,25)';
 -- L'entité mère a des occurrences multiples et l'entité mère et fille sont de même type : il n'y a pas d'écart entre les codes entité
 req:=req||'      when NIM.NB_OCCURRENCES > 1 and E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'       then CHAINE_ENTITE||RPAD(A.CODE_ENTITE, 25)';
 -- Les autres cas : on calcule l'écart entre l'entité mère et sa fille à partir du nombre d'occurrences de l'entité mère, du nombre d'occurrences de même type de l'entité mère,
 -- du niveau de l'entité fille, du niveau de l'entité mère et du nombre d'occurrences de l'entité mère
 req:=req||'      else CHAINE_ENTITE||RPAD('' '',(25*(NIM.NB_OCCURRENCES - RECUR.NB_OCC_MEME_TYPE + (N.NIVEAU - RECUR.NIVEAU - NIM.NB_OCCURRENCES))))||RPAD(A.CODE_ENTITE, 25)';
 req:=req||'   end';
 req:=req||'   ,case';
 req:=req||'     when E.TYPE_ENTITE = RECUR.TYPE_ENTITE';
 req:=req||'      then RECUR.NB_OCC_MEME_TYPE + N.NIVEAU';
 req:=req||'     else N.NIVEAU';
 req:=req||'   end as NIV_TECH';
 req:=req||'   , A.CODTS';
 req:=req||'  from';
 req:=req||'   STD_STRUC_ARBRE A';
 req:=req||'   , STD_STRUC_ENTITE E';
 req:=req||'   , STD_STRUC_NIV N';
 req:=req||'   , STD_STRUC_ENTITE EM';
 req:=req||'   , STD_STRUC_NIV_INFO NIM';
 req:=req||'   ,ARBRE RECUR';
 req:=req||'  where';
 req:=req||'   A.CODTS = RECUR.CODTS';
 req:=req||'   and A.CODE_ENT_MERE = RECUR.CODE_ENTITE';
 -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie : jointure arbre/entité ?
 req:=req||'   and E.CID = RECUR.CID';
 req:=req||'   and '''||p_date_eff||''' between A.DATE_EFF and A.DATE_FIN ';
 req:=req||'   and '''||p_date_eff||''' between E.DATE_EFF and E.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between N.DATE_EFF and N.DATE_FIN';
 req:=req||'   and '''||p_date_eff||''' between EM.DATE_EFF and EM.DATE_FIN';
 req:=req||'   and A.CODE_ENTITE = E.CODE_ENTITE';
 req:=req||'   and E.TYPE_ENTITE = N.TYPE_ENTITE';
 req:=req||'   and A.CODTS = N.CODTS';
 req:=req||'   and EM.CODE_ENTITE = A.CODE_ENT_MERE';
 -- TODO VRI : ZEU FE, il faudra gérer le CID lors du traitement de cette partie : jointure arbre/entité
 req:=req||'   and EM.CID = (select VALVAR from SYS_VARSYS where CODVAR =''NS_CLIENT_ID'')';
 req:=req||'   and A.CODTS = NIM.CODTS';
 req:=req||'   and EM.TYPE_ENTITE = NIM.TYPE_ENTITE';
 req:=req||' )';
 req:=req||' select * from arbre )';
 req:=req||' ';
 
 EXECUTE_IMMEDIATE_STRING(req,0) ;
 
 retour := retour +SQL%ROWCOUNT;
 return retour ;
 END BUILD_TABLE_INDEX;
##
TAG_CHARSET=@€éèç
##
HRORG_IS_ENTITE_FILLE_HERITEE
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_IS_ENTITE_FILLE_HERITEE(
      p_codts  IN std_struc_arbre.codts%TYPE,
      p_entite IN std_struc_entite.code_entite%TYPE,
      p_date   IN std_struc_entite.date_eff%TYPE,
      p_cid   IN std_struc_entite.cid%TYPE)
    RETURN VARCHAR2
  IS
    v_lien_codts std_struc_type.lien_codts%TYPE;
    v_type_entite std_struc_entite.type_entite%TYPE;
    v_niveau std_struc_niv.niveau%TYPE;
    v_type_entite_fille std_struc_entite.type_entite%TYPE;
    v_count NUMBER;
  BEGIN
    /* On vérifie que la structure hérite d'une autre structure */
    SELECT lien_codts INTO v_lien_codts FROM std_struc_type WHERE codts=p_codts;
    IF (v_lien_codts IS NULL) THEN
      RETURN '0';
    END IF;
    /* On récupère le type d'entité de l'entité */
    SELECT type_entite
    INTO v_type_entite
    FROM std_struc_entite
    WHERE code_entite=p_entite
   	AND cid = p_cid
    AND p_date BETWEEN date_eff AND date_fin;
    /* On récupère le niveau de l'entité dans la structure */
    SELECT niveau
    INTO v_niveau
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND type_entite=v_type_entite;
    /* On récupère le type d'entité fille de l'entité */
    SELECT type_entite
    INTO v_type_entite_fille
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND niveau=v_niveau+1;
    /* On regarde si le lien type entité <-> type entité fille existe (directement ou indirectement) dans la structure mère */
    SELECT COUNT(*)
    INTO v_count
    FROM std_struc_niv n1,
      std_struc_niv n2
    WHERE n1.codts    =v_lien_codts
    AND n1.type_entite=v_type_entite
    AND n2.codts      =v_lien_codts
    AND n2.type_entite=v_type_entite_fille
    AND n1.niveau     <n2.niveau
    AND p_date BETWEEN n1.date_eff AND n1.date_fin
    AND p_date BETWEEN n2.date_eff AND n2.date_fin;
    IF (v_count=0) THEN
      RETURN '0';
    END IF;
    RETURN '1';
  EXCEPTION
  WHEN OTHERS THEN
    RETURN '0' ;
  END HRORG_IS_ENTITE_FILLE_HERITEE ;
##
TAG_CHARSET=@€éèç
##
HRORG_IS_ENTITE_MERE_HERITEE
=SQL=
CREATE OR REPLACE
  FUNCTION HRORG_IS_ENTITE_MERE_HERITEE(
      p_codts  IN std_struc_arbre.codts%TYPE,
      p_entite IN std_struc_entite.code_entite%TYPE,
      p_date   IN std_struc_entite.date_eff%TYPE,
      p_cid   IN std_struc_entite.cid%TYPE)
    RETURN VARCHAR2
  IS
    v_lien_codts std_struc_type.lien_codts%TYPE;
    v_type_entite std_struc_entite.type_entite%TYPE;
    v_niveau std_struc_niv.niveau%TYPE;
    v_type_entite_mere std_struc_entite.type_entite%TYPE;
    v_count NUMBER;
  BEGIN
    /* On vérifie que la structure hérite d'une autre structure */
    SELECT lien_codts INTO v_lien_codts FROM std_struc_type WHERE codts=p_codts;
    IF (v_lien_codts IS NULL) THEN
      RETURN '0';
    END IF;
    /* On récupère le type d'entité de l'entité */
    SELECT type_entite
    INTO v_type_entite
    FROM std_struc_entite
    WHERE code_entite=p_entite
    AND cid = p_cid
    AND p_date BETWEEN date_eff AND date_fin;
    /* On récupère le niveau de l'entité dans la structure */
    SELECT niveau
    INTO v_niveau
    FROM std_struc_niv
    WHERE codts=p_codts
    AND p_date BETWEEN date_eff AND date_fin
    AND type_entite=v_type_entite;
    IF (v_niveau   =1) THEN
      /* On regarde si le type d'entité existe dans la structure mère */
      SELECT COUNT(*)
      INTO v_count
      FROM std_struc_niv
      WHERE codts    =v_lien_codts
      AND type_entite=v_type_entite
      AND p_date BETWEEN date_eff AND date_fin;
    ELSE
      /* On récupère le type d'entité mère de l'entité */
      SELECT type_entite
      INTO v_type_entite_mere
      FROM std_struc_niv
      WHERE codts=p_codts
      AND p_date BETWEEN date_eff AND date_fin
      AND niveau=v_niveau-1;
      /* On regarde si le lien type entité <-> type entité mère existe (directement ou indirectement) dans la structure mère */
      SELECT COUNT(*)
      INTO v_count
      FROM std_struc_niv n1,
        std_struc_niv n2
      WHERE n1.codts    =v_lien_codts
      AND n1.type_entite=v_type_entite_mere
      AND n2.codts      =v_lien_codts
      AND n2.type_entite=v_type_entite
      AND n1.niveau     <n2.niveau
      AND p_date BETWEEN n1.date_eff AND n1.date_fin
      AND p_date BETWEEN n2.date_eff AND n2.date_fin;
    END IF;
    IF (v_count=0) THEN
      RETURN '0';
    END IF;
    RETURN '1';
  EXCEPTION
  WHEN OTHERS THEN
    RETURN '0' ;
  END HRORG_IS_ENTITE_MERE_HERITEE ;
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_GET_TAB_ENTITES
=SQL=
CREATE OR REPLACE FUNCTION MP_CODELISTS_ESI_GET_TAB_ENTITES(p_TYPE_ENTITE VARCHAR2, p_CODVAR_TYPE_ENTITE VARCHAR2 DEFAULT NULL) RETURN MP_CODELISTS_ESI_TAB_ENTITES AS 
  v_retour MP_CODELISTS_ESI_TAB_ENTITES := MP_CODELISTS_ESI_TAB_ENTITES();
  v_TYPE_ENTITE VARCHAR2(15);
BEGIN
  v_TYPE_ENTITE := p_TYPE_ENTITE;
  IF v_TYPE_ENTITE IS NULL AND p_CODVAR_TYPE_ENTITE IS NOT NULL THEN
    SELECT VALVAR INTO v_TYPE_ENTITE FROM (SELECT VALVAR FROM SYS_VARSYS WHERE CODVAR=p_CODVAR_TYPE_ENTITE ORDER BY CASE WHEN MODULE='SYS' THEN 3 WHEN MODULE='STD' THEN 2 ELSE 1 END, MODULE) WHERE ROWNUM=1;
  END IF;
  IF v_TYPE_ENTITE IS NULL THEN
    RETURN v_retour;
  END IF;
  FOR une_entite IN (SELECT CID, CODE_ENTITE, LIBELLE_REDUIT, LIBELLE FROM STD_STRUC_ENTITE WHERE TYPE_ENTITE=v_TYPE_ENTITE AND TO_CHAR(SYSDATE,'yyyymmdd') BETWEEN DATE_EFF AND DATE_FIN)
  LOOP
    v_retour.extend;
    v_retour(v_retour.count) := MP_CODELISTS_ESI_ENTITE(une_entite.CID, une_entite.CODE_ENTITE, une_entite.LIBELLE_REDUIT, une_entite.LIBELLE);
  END LOOP;
  RETURN v_retour;
END MP_CODELISTS_ESI_GET_TAB_ENTITES;
##
PHOTO_CONFORME
=SQL=
CREATE OR REPLACE FUNCTION PHOTO_CONFORME RETURN TAB_ERR AS 
	retour TAB_ERR := TAB_ERR();
	libelle_erreur VARCHAR2(50);
	nb_photo INTEGER;
	nb INTEGER;
BEGIN
	FOR une_ligne IN (SELECT DISTINCT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH
					FROM USER_TAB_COLS
                    WHERE COLUMN_NAME != 'TYPE_WRITER'
                    AND ( TABLE_NAME NOT LIKE 'PH_PH_%'
                    OR TABLE_NAME NOT LIKE 'PHOTO_%'))
	LOOP
		SELECT DISTINCT count(*) INTO nb_photo FROM USER_TAB_COLS WHERE TABLE_NAME = 'PHOTO_'||une_ligne.TABLE_NAME;
		IF nb_photo != 0 THEN
			SELECT DISTINCT count(*) INTO nb 
			FROM USER_TAB_COLS 
			WHERE TABLE_NAME = 'PHOTO_'||une_ligne.TABLE_NAME 
			AND COLUMN_NAME = une_ligne.COLUMN_NAME;
			
			IF nb = 0 THEN
				libelle_erreur := 'Colonne manquante';
				retour.extend;
				retour(retour.count) := TYP_ERR(une_ligne.TABLE_NAME, une_ligne.COLUMN_NAME, libelle_erreur);
			ELSE
				SELECT DISTINCT count(*) INTO nb 
				FROM USER_TAB_COLS 
				WHERE TABLE_NAME = 'PHOTO_'||une_ligne.TABLE_NAME 
				AND COLUMN_NAME = une_ligne.COLUMN_NAME
				AND DATA_TYPE = une_ligne.DATA_TYPE;
				IF nb = 0 THEN
					libelle_erreur := 'Type incohérent';
					retour.extend;
					retour(retour.count) := TYP_ERR(une_ligne.TABLE_NAME, une_ligne.COLUMN_NAME, libelle_erreur);
				ELSE
					SELECT DISTINCT count(*) INTO nb
					FROM USER_TAB_COLS 
					WHERE TABLE_NAME = 'PHOTO_'||une_ligne.TABLE_NAME 
					AND COLUMN_NAME = une_ligne.COLUMN_NAME
					AND DATA_TYPE = une_ligne.DATA_TYPE
					AND DATA_LENGTH = une_ligne.DATA_LENGTH;
					IF nb = 0 THEN
						libelle_erreur := 'Taille différente';
						retour.extend;
					retour(retour.count) := TYP_ERR(une_ligne.TABLE_NAME, une_ligne.COLUMN_NAME, libelle_erreur);
					END IF;
				END IF;
			END IF;
		END IF;
	END LOOP;
	
	FOR une_table IN (SELECT tablephy FROM TGE_REF_MAPTA TA WHERE 1=1 AND TA.allerretour in ('A','2') 
	and 'PHOTO_'||tablephy not in (select table_name from user_tables))
	LOOP 
	    IF nb > 0 THEN
	       libelle_erreur := 'Table PHOTO inexistante';
	       retour.extend;
	       retour(retour.count) := TYP_ERR(une_table.tablephy, 'ALL', libelle_erreur);
	    END IF; 
	END LOOP;
	
	FOR une_table IN (SELECT tablephy FROM TGE_REF_MAPTA TA WHERE 1=1 AND TA.allerretour in ('A','2') 
	and 'PH_PH_'||tablephy not in (select table_name from user_tables))
	LOOP 
	    IF nb > 0 THEN
	       libelle_erreur := 'Table PH_PH inexistante';
	       retour.extend;
	       retour(retour.count) := TYP_ERR(une_table.tablephy, 'ALL', libelle_erreur);
	    END IF; 
	END LOOP;
	
	RETURN retour;
END PHOTO_CONFORME;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le NUMPAC, ni le PACMAT, ni le NUMCNT
  IF UPDATING AND (NOT v_ligOld.NUMPAC=v_ligNew.NUMPAC OR NOT v_ligOld.PACMAT=v_ligNew.PACMAT OR NOT v_ligOld.NUMCNT=v_ligNew.NUMCNT) THEN
    -- Message d''erreur --> On interdit la mise à jour du NUMPAC, du PACMAT et du NUMCNT : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes NUMPAC, PACMAT et NUMCNT n''''est pas autorisée : vous devez supprimer puis recréer le contrat'');
  END IF;
  -- On vérifie qu''on ne modifie pas le RHID et qu''il n''est pas vide
  IF (INSERTING OR UPDATING) AND v_ligNew.MATRIC IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne MATRIC doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT v_ligOld.MATRIC=v_ligNew.MATRIC THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne MATRIC n''''est pas autorisée'');
  END IF;
  -- On vérifie qu''on ne modifie pas la date de début de contrat et qu''elle n''est pas vide
  IF (INSERTING OR UPDATING) AND v_ligNew.DSDCN IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne DSDCN doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT v_ligOld.DSDCN=v_ligNew.DSDCN THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne DSDCN n''''est pas autorisée'');
  END IF;
  
  IF INSERTING THEN
    -- On regarde si le couple NUMPAC/PACMAT existe dans SECUPACMAT (premier contrat du couple ?), et si un NUMPAC temporaire est positionné pour le MATRIC (premier contrat du MATRIC ?)
    BEGIN
      SELECT NVL(MATRIC,''NO_MATRIC'') INTO v_matricForPacmat FROM SECUPACMAT WHERE NUMPAC=v_ligNew.NUMPAC AND PACMAT=v_ligNew.PACMAT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN v_matricForPacmat:=NULL;
      WHEN OTHERS THEN RAISE;
    END;
    IF v_matricForPacmat IS NULL THEN
      v_nbLig:=0;
    ELSE
      IF NOT v_matricForPacmat=v_ligNew.MATRIC THEN
        -- Le couple NUMPAC/PACMAT existe pour un autre MATRIC
        RAISE_APPLICATION_ERROR(-20000,''Erreur lors de l''''attribution du PACMAT pour le matricule ''||v_ligNew.MATRIC||'' sur le PAC ''||v_ligNew.NUMPAC||'' : le PACMAT ''||v_ligNew.PACMAT||'' est déjà associé au matricule ''||v_matricForPacmat);
      END IF;
      v_nbLig:=1;
    END IF;
    IF v_nbLig=0 THEN
      -- Premier contrat pour le couple NUMPAC/PACMAT : on insère dans SECUPACMAT (ou on met à jour la ligne ayant un NUMPAC temporaire, si elle existe)
      SELECT COUNT(*) INTO v_nbLig FROM SECUPACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=v_ligNew.MATRIC;
      IF v_nbLig=1 THEN
        -- Il y a un couple NUMPAC/PACMAT temporaire dans SECUPACMAT pour ce MATRIC : on le met à jour
        UPDATE SECUPACMAT SET NUMPAC=v_ligNew.NUMPAC, PACMAT=v_ligNew.PACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=v_ligNew.MATRIC;
      ELSE
        -- On insère le couple NUMPAC/PACMAT dans SECUPACMAT
        INSERT INTO SECUPACMAT (NUMPAC, PACMAT, MATRIC) VALUES (v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.MATRIC);
        v_doMajPerso := 1;
      END IF;
    ELSE
        IF v_nbLig = 1 THEN
            update SECUPACMAT set FLAG_MASQUAGE_RGPD = 0 where NUMPAC = v_ligNew.NUMPAC and PACMAT = v_ligNew.PACMAT;
        END IF;
    END IF;
    -- Si la colonne NUMCNT_ORIGINE est vide, on la valorise avec NUMCNT
    IF v_ligNew.NUMCNT_ORIGINE IS NULL THEN
      :NEW.NUMCNT_ORIGINE := v_ligNew.NUMCNT;
      v_ligNew.NUMCNT_ORIGINE := :NEW.NUMCNT_ORIGINE;
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF insérés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligNew.MATRIC, v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;
    
   IF NOT tabRefPacByNumpac.exists(v_ligNew.NUMPAC) THEN
       SELECT * INTO tabRefPacByNumpac(v_ligNew.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = v_ligNew.NUMPAC;
   END IF;
   
   	v_date_debut_periode_paie := to_date(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS || ''01'',''YYYYMMDD''); 

   	IF v_ligNew.DSDCN < v_date_debut_periode_paie THEN
    	:NEW.ENTREE_RETRO := ''O'';
   	ELSE
	   	:NEW.ENTREE_RETRO := ''N'';
    END IF;
    v_ligNew.ENTREE_RETRO := :NEW.ENTREE_RETRO;

    IF v_ligNew.DSFCN < v_date_debut_periode_paie THEN
    	:NEW.SORTIE_RETRO := ''O'';
   	ELSE
	   	:NEW.SORTIE_RETRO := ''N'';
    END IF;
    v_ligNew.SORTIE_RETRO := :NEW.SORTIE_RETRO;

    
  ELSIF UPDATING AND (NOT UPDATING(''DATE_EFF_CONTRAT'') AND NOT UPDATING(''CURRENT_PAIEZAD'')) THEN
    -- On considère que c''est une "vraie" mise à jour si ce n''est pas de la mise à jour de DATE_EFF_CONTRAT ou CURRENT_PAIEZAD
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF modifiés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligNew.MATRIC, v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;

    IF UPDATING(''DSFCN'') THEN
       IF NOT tabRefPacByNumpac.exists(v_ligOld.NUMPAC) THEN
         SELECT * INTO tabRefPacByNumpac(v_ligOld.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = v_ligOld.NUMPAC;
       END IF;
    	v_date_debut_periode_paie := to_date(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS || ''01'',''YYYYMMDD''); 
    	IF v_ligNew.DSFCN < v_date_debut_periode_paie THEN
    		:NEW.SORTIE_RETRO := ''O'';
    	ELSE
	    	:NEW.SORTIE_RETRO := ''N'';
    	END IF;
    	v_ligNew.SORTIE_RETRO := :NEW.SORTIE_RETRO;
    END IF;
  ELSIF DELETING THEN
    IF (v_listNumpacPacmatToDelete IS NULL OR INSTR(v_listNumpacPacmatToDelete, '',''||v_ligOld.NUMPAC||v_ligOld.PACMAT||'','')<=0) THEN
      -- On liste les couples NUMPAC/PACMAT supprimés pour les traiter par la suite
      v_NUMPAC_PACMAT.MATRIC:=v_ligOld.MATRIC;
      v_NUMPAC_PACMAT.NUMPAC:=v_ligOld.NUMPAC;
      v_NUMPAC_PACMAT.PACMAT:=v_ligOld.PACMAT;
      IF v_TAB_NUMPAC_PACMAT IS NULL THEN
        v_TAB_NUMPAC_PACMAT:=TAB_NUMPAC_PACMAT_TO_DELETE(v_NUMPAC_PACMAT);
      ELSE
        v_TAB_NUMPAC_PACMAT.EXTEND();
        v_TAB_NUMPAC_PACMAT(v_TAB_NUMPAC_PACMAT.last):=v_NUMPAC_PACMAT;
      END IF;
      v_listNumpacPacmatToDelete := v_listNumpacPacmatToDelete||v_ligOld.NUMPAC||v_ligOld.PACMAT||'','';
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF supprimés
    v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligOld.MATRIC, v_ligOld.NUMPAC, v_ligOld.PACMAT, v_ligOld.NUMCNT, v_ligOld.DSDCN);
    v_cles_idx_contrat.extend;
    v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
  END IF;
';
END TRG_CONTRAT_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
SYS_TRC_MODIF_PK
=IF_INDEX_EXIST=SYS_TRC_MODIF_PK=
DROP INDEX SYS_TRC_MODIF_PK;
##
TAG_CHARSET=@€éèç
##
SYS_TRC_MODIF_PK4
=SQL=
DECLARE
     existIndex NUMBER;
     indexNameToDrop VARCHAR2(4000);
     req VARCHAR2(4000);
BEGIN
    -- Chez certains clients, l'index a été supprimé pour pouvoir enregistrer des doublons, il faut le remettre
    select count(*) into existIndex from all_constraints where constraint_name = 'SYS_TRC_MODIF_PK4';
    
    IF (existIndex = 0) THEN 
        -- Si l'index "SYS_TRC_MODIF_PK4" n'existe pas, il faut : 
        -- supprimer les doublons qui pourraient exister
        -- recréer l'index pour les clés primaires SYS_TRC_MODIF_PK4
        req := 'delete from SYS_TRC_MODIF';
        req:= req || ' where ROWID in (';
        req:= req ||   ' select ROWID';
        req:= req ||   ' from (';
        req:= req ||     ' select ROWID, LOGIN || DATEMAJ || KEYS_VALUES || ACTION, ROW_NUMBER ( ) OVER ( PARTITION BY LOGIN || DATEMAJ || KEYS_VALUES || ACTION ';
        req:= req ||       ' ORDER BY LOGIN || DATEMAJ || KEYS_VALUES || ACTION ) num_ligne';
        req:= req ||     ' from SYS_TRC_MODIF';
        req:= req ||   ') t2';
        req:= req ||   ' where num_ligne > 1';
        req:= req || ')';
        execute immediate req;
        
        -- Chez certains clients, un autre index non unique a été créé, on le supprime 
        BEGIN
            select index_name into indexNameToDrop from user_indexes i 
            -- Recherche d'un index sur la table SYS_TRC_MODIF
            where table_name='SYS_TRC_MODIF' 
            -- Qui porte sur 4 colonnes
            and (select count(*) from user_ind_columns ic where i.index_name=ic.index_name)=4 
            -- LOGIN
            and exists (select 1 from user_ind_columns ic where i.index_name=ic.index_name and column_name='LOGIN') 
            -- DATEMAJ
            and exists (select 1 from user_ind_columns ic where i.index_name=ic.index_name and column_name='DATEMAJ') 
            -- KEYS_VALUES
            and exists (select 1 from user_ind_columns ic where i.index_name=ic.index_name and column_name='KEYS_VALUES') 
            -- ACTION
            and exists (select 1 from user_ind_columns ic where i.index_name=ic.index_name and column_name='ACTION');
        EXCEPTION 
            WHEN OTHERS THEN indexNameToDrop:=NULL;
        END;
        IF indexNameToDrop IS NOT NULL THEN
            execute immediate 'drop index '||indexNameToDrop;
        END IF;
        
        -- Création de la pk
        execute immediate 'alter table SYS_TRC_MODIF add constraint SYS_TRC_MODIF_PK4 primary key (LOGIN, DATEMAJ, KEYS_VALUES, ACTION)';
    END IF;
END;
##
TAG_CHARSET=@€éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
 MatEcrit          VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --éliminer les doublons même matricule déjà écrit et même valeur
    IF MatEcrit=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
      RETURN;
    END IF;
    --on a détecté au moins une différence
    MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    --éliminer le passé et pour les historiques les doublons déjà écrits
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1
      AND ( coldteffet <> 'a.DATE_EFF' 
      OR MatARenvoyer<>MatEcrit OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') )
    THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=tab.DTEFFET;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
    IF coldteffet = 'a.DATE_EFF' THEN
    --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet.
    MatEcrit:=MatARenvoyer;
    --mémoriser la valeur de cette colonne historique
    oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
    END IF;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
IF p_table ='DIC_ADM_CONTRAT_SITU' THEN 
    v_typeTable :='z';
ELSE

  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
END IF;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t , 
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde s’il existe déjà dans GAP_TRT
  --une ligne pour N° d’échange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    preclemati     VARCHAR2(20);
    preclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
    w_mpe          varchar2(1);
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --lire le type de MPE (N=rien,M=MPE,C=CSCP)
    select mpe into w_mpe from tge_ref_pac where numpac=p_numpac ;
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
 if w_mpe='C' THEN
 coldteffet:='d.DSDSC';
 ELSE
 coldteffet:='d.DSDCN';
END IF;
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
     if w_mpe='C' THEN
     coldteffet :='d.DSDSC';
      ELSE
      coldteffet :='a.DSDCN';
    END IF;
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --champ "cle" cas particulier de D_A_C_S
    IF p_nomTable ='DIC_ADM_CONTRAT_SITU' THEN
      coldatecle :='DSDSC';
      coldteffet :='a.DSDSC';
      cles       :=cles||'||''#''||to_char(a.DSDSC,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF p_TABLETYPE='H2' AND p_nomTable ='DIC_PERIODES_RECUEIL_HIS' THEN
      clwhereDate :=clwhereDate||' and to_char(a.'||coldatecle||',''yyyymm'')='''||p_periode||'''';
      END IF;
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable in ('DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_SITU') THEN
      --pour D_A_C et D_A_C_S on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
        	IF coldatecle is not null THEN
        		clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,greatest(a.'||coldatecle||','||coldteffet||') as dteffet,'||coldtfin;
        	ELSE
          		clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
          	END IF;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        if w_mpe='C' THEN 
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, PAIEZAD, DATE_EFF) AS ( SELECT DACH2.PACMAT, DACH2.PAIEZAD , MAX(DATE_EFF) ';
        ELSE
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        END IF;
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        if w_mpe='C' THEN 
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') GROUP BY DACH2.NUMPAC, DACH2.PACMAT, DACH2.PAIEZAD ) ';
        ELSE
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        END IF;
        if w_mpe='C' THEN
        clfrom       :=clfrom||'SELECT DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACS.PAIEZAD, MIN(DACS.DSDSC) DSDSC,MIN(C.DSDCN) DSDCN , MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        ELSE
        clfrom       :=clfrom||'SELECT DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACS.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        END IF;
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        if w_mpe='C' THEN
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND DACH.PACMAT = T.PACMAT AND DACH.PAIEZAD = T.PAIEZAD AND DACH.DATE_EFF = T.DATE_EFF AND C.NUMCNT = DACS.NUMCNT AND DACS.PACMAT = T.PACMAT AND DACS.PAIEZAD = T.PAIEZAD AND DACS.PAIEZAD = DACH.PAIEZAD ';
        ELSE
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        END IF;
        if w_mpe='C' and p_nomTable ='DIC_ADM_CONTRAT' THEN
         --jointure forcée entre DAC et DACS pour les situations contractuelles
          clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, DACS.PAIEZAD )) d WHERE d.dsdsc between a.dsdcn AND nvl(a.dsfcn,to_date(''20991231'',''yyyymmdd'')) AND ';
        ELSE
          clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY DACS.NUMPAC, DACS.MATRIC, DACS.PACMAT, DACS.PAIEZAD )) d WHERE '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
        END IF;
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';          
          if w_mpe='C' THEN 
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
          else
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';                   
          end if;

        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          if w_mpe='C' THEN 
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          else
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          end if;
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          if w_mpe='C' THEN 
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(REPLACE(REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C'),'DIC_ADM_CONTRAT_SITU DACS','PHOTO_DIC_ADM_CONTRAT_SITU DACS'),'DIC_ADM_CONTRAT_HISTO DACH','PHOTO_DIC_ADM_CONTRAT_HISTO DACH')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';          
          else
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
          end if;
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup clause where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        END IF;
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            MatEcrit     :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            preclemati   :='#';
            preclematj   :='#';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                --constitution de la clé "matricule courant" partie GAP

                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab1cle :=chr(255);
              END IF;
              IF j        <= tab2.last THEN
                --constitution de la clé "matricule" courant partie PHOTO

                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab2cle :=chr(255);
              END IF;
              --Tables avec historiques comme D_A_C_H : la clé contient des dates d'effet donc il faut adapter l'appareillage
              IF coldteffet='a.DATE_EFF' THEN
                IF i <= tab1.last AND curclemati=MatARenvoyer THEN
                  --matricule déjà détecté en différence histo, on envoie tous les historiques. Les doublons sont éliminés automatiquement.
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif j <= tab2.last AND curclematj=MatARenvoyer THEN
                  --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle < tab2cle and preclemati<>curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et c'était le 1er histo du matricule : création
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle < tab2cle AND preclemati=curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent.
                  IF difference_col( tab1(i) , tab1(i-1) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent (j) et histo gap courant (i)
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle AND preclemati<>curclematj THEN
                  --ligne gap supprimée et c'était le 1er histo du matricule : il faut forcer les valeurs à blanc sur cette date perdue.
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle > tab2cle AND preclemati=curclematj THEN
                  --ligne gap supprimée et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent avec la photo.
                  i :=i-1;
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent et histo photo courant (date d'effet=photo)
                    tab1(i).DTEFFET :=tab2(j).DTEFFET ;
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité tab1cle=tab2cle (pacmat + paiezad + date d'effet)
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              ELSE
                --Tables sans historiques comme DIC_ENFANTS ou DIC_ADM_PERSO
                IF tab1cle < tab2cle THEN
                  --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i    :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle THEN
                  --ligne supprimée car i épuisé ou clé i plus grande que clé j
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  CLOB;
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Début Rétro id_trt= '||p_id_trt);
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt||', pReq '||pReq);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO-- Erreur partition ID_'||p_id_trt);
    END ;
    
    --Insertion dans DIF_FSED_MODIF_RETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);
    pReq := 'INSERT INTO DIF_FSED_MODIF_RETRO SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') ';
 	pReq := pReq ||' AND  f.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1 )';
 	pReq := pReq ||' UNION  SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') '; 
 	pReq := pReq ||' AND  exists (select 1 from dif_fsed t where t.numpac ='''||p_numpac||''' and t.id_trt ='''||p_id_trt||''' AND t.codeop=''C'' and t.ELEM =''A001'' and f.numpac = t.numpac AND f.id_trt = t.id_trt and f.paiezad=t.paiezad and f.pacmat=t.pacmat ) ';
 	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début remplissage DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt||', pReq '||pReq);
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- FIN insertion DIF_FSED_MODIF_RETRO-- CALCUL DE STATISTIQUES: ID_'||p_id_trt);
	DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED_MODIF_RETRO',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4, partname => 'ID_'||p_id_trt||'');    
    --Insertion dans GAP_TRT_MOIS_RETRO
    pReq := ' insert into GAP_TRT_MOIS_RETRO (id_trt,numpac,pacmat,PERIODE_RETRO)';
    pReq := pReq ||' WITH grm AS (SELECT pacmat,periode_retro FROM gap_retro_matric    g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    pReq := pReq ||'     ,gsr AS (SELECT pacmat,periode_retro FROM gap_selection_retro g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    --                 min_periode_retro : plus vieille rétro par matricule
    pReq := pReq ||' ,min_periode_retro (pacmat,min_periode) AS (';
    pReq := pReq ||' SELECT pacmat,MIN(periode_retro) FROM';
    pReq := pReq ||' (          SELECT pacmat,periode_retro FROM grm';
    pReq := pReq ||'  UNION ALL SELECT pacmat,periode_retro FROM gsr ) GROUP BY pacmat) ';
    --                 histo_retro : historique des mois où on a fait de la rétro *et* sur quels mois
    pReq := pReq ||' ,histo_retro AS (SELECT DISTINCT pacmat,periode,to_char(dteffet,''yyyymm'') as periode_retro FROM dif_fsed_histo h WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = h.numpac AND gtlm.pacmat = h.pacmat) ';
    pReq := pReq ||'       AND periode>='''||w_MIN_RETRO||''' AND to_char(dteffet,''yyyymm'')<periode';
    pReq := pReq ||'       AND  h.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1) )';
    --                 liste_mois_retro_pacmat : liste exhaustive des mois rétro par matricule (mois rétro paie en cours + mois rétro dans l'historique)
    pReq := pReq ||' ,liste_mois_retro_pacmat (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro      FROM grm';
    pReq := pReq ||' UNION ALL SELECT pacmat,periode_retro      FROM gsr';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode_retro FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode_retro>=mpr.min_periode)';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode       FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode      >=mpr.min_periode))';
    --                SELECT principal
    pReq := pReq ||' SELECT DISTINCT '||p_id_trt||','''||p_numpac||''',pacmat,periode_retro FROM liste_mois_retro_pacmat';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => SYS_CONTEXT('USERENV', 'SESSION_SCHEMA'), TABNAME => 'GAP_TRT_MOIS_RETRO', METHOD_OPT => 'FOR ALL COLUMNS SIZE 254', ESTIMATE_PERCENT => 100, CASCADE => TRUE, DEGREE => 4);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt);
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    --Insertion dans DIF_FSED_PARTIERETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion LISTE_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO LISTE_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro) select id_trt,numpac,pacmat,periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro) AS ( ';
	pReq := pReq ||'       SELECT '''||p_id_trt||''',numpac,pacmat,periode_retro FROM gap_trt_mois_retro WHERE numpac = '''||p_numpac||''' AND id_trt = '''||p_id_trt||''') ';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro from liste_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete LISTE_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion TRANCHES_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO TRANCHES_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH tranches_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) AS ( ';
	pReq := pReq ||' SELECT '''||p_id_trt||''',lmr.numpac,lmr.pacmat,lmr.periode_retro,NVL((SELECT to_char(add_months(to_date(MAX(lmr2.periode_retro),''yyyymm''),1),''yyyymm'') FROM liste_mois_retro lmr2 WHERE lmr2.numpac = lmr.numpac and lmr2.pacmat=lmr.pacmat AND lmr2.periode_retro<lmr.periode_retro),'''||w_MIN_RETRO||''') FROM liste_mois_retro lmr where lmr.id_trt = '''||p_id_trt||''')';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from tranches_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete TRANCHES_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO DIF_FSED_PARTIERETRO ';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_envoi_systematique(elem) AS( ';
	pReq := pReq ||' SELECT ELEMENT FROM TGE_REF_MAPDO WHERE ''*''= decode (numpac,'''||p_numpac||''',''*'',numpac) AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O'' )';
	--SELECT1 DIF_FSED_MODIF_RETRO
	pReq := pReq ||' SELECT '''||p_id_trt||''', tmr.periode_retro AS periode, m.numpac, m.cle, m.pacmat, m.paiezad, m.elem, m.occ, m.valeur, m.codeop, m.type_donnee, m.dteffet ';
	pReq := pReq ||' FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' and m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat ';
	pReq := pReq ||' AND  ( ' ;
	pReq := pReq ||' greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||' OR  substr(m.elem,0,1)>''W'' OR Exists (select * from liste_envoi_systematique les  where m.elem=les.elem ) ';
	pReq := pReq ||' ) ' ;
	--SELECT2 DIF_FSED_HISTO sauf les lignes déjà présentes dans DIF_FSED_MODIF_RETRO
	pReq := pReq ||' UNION ALL SELECT '''||p_id_trt||''', h.periode, h.numpac, h.cle, h.pacmat, h.paiezad, h.elem, h.occ, h.valeur, h.codeop, h.type_donnee, h.dteffet ';
	pReq := pReq ||' FROM dif_fsed_histo h, liste_mois_retro lmr ';
	pReq := pReq ||' WHERE h.numpac = '''||p_numpac||''' AND lmr.id_trt = '''||p_id_trt||''' AND h.numpac = lmr.numpac and h.pacmat=lmr.pacmat AND periode>='''||w_MIN_RETRO||''' AND h.periode=lmr.periode_retro  ';
	pReq := pReq ||' AND  substr(h.elem,0,1)<''W'' AND NOT Exists (select * from liste_envoi_systematique les  where h.elem=les.elem ) ';
	pReq := pReq ||' AND NOT EXISTS  (SELECT 1 FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||'   AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') <= h.periode';
	pReq := pReq ||'   AND m.numpac = h.numpac and m.pacmat = h.pacmat AND m.paiezad = h.paiezad AND m.elem = h.elem AND m.occ = h.occ )';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Fin Rétro id_trt= '||p_id_trt);
	END IF;
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
  v_existVRREP number :=0 ;
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    select count(*) into v_existVRREP from TGE_REF_VRREP where TGE_REF_VRREP.NUMERO_DE_PAC=elt_tab_11R.NUMERO_DE_PAC and TGE_REF_VRREP.CODE_TABLE=elt_tab_11R.CODE_TABLE;
	if(v_existVRREP=0) then
	tab_11R.extend;
	tab_11R(tab_11R.last)            :=elt_tab_11R;
	end if ;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;
wLibRUB            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  wLibRUB := REPLACE(pLibRUB,'£','#');
  select ( (LENGTH(wLibRUB) - LENGTH(REPLACE(wLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (wLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(wLibRUB) Loop 
      if substr(wLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(wLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));
  elt_tab_15.CSCP        		 := trim(SUBSTR(lig.donnees,164,1));
   IF LENGTH(lig.donnees)>240 THEN
 elt_tab_15.TEXTE_EXPLICATIF    := trim(SUBSTR(lig.donnees,241,400));
 ELSE elt_tab_15.TEXTE_EXPLICATIF  := '' ;
 END IF ;

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%'  and elt_tab_15.LIBRUB not like '%£%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      elt_tab_17DMF.CSCP    		:= trim(SUBSTR(lig.donnees,137,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' OR w_type_retour='RT' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT ';
  stmtClause :=stmtClause||'/*+  BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$291F8F59" "DACH2"@"SEL$3") LEADING(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550" "T"@"SEL$2" "A"@"SEL$2") INDEX(@"SEL$B29E968D" "A"@"SEL$2" ("DIC_ADM_CONTRAT_HISTO"."NUMPAC" "DIC_ADM_CONTRAT_HISTO"."PAIEZAD" "DIC_ADM_CONTRAT_HISTO"."DATE_EFF")) BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$B29E968D" "T"@"SEL$2") NO_ACCESS(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550") BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$5" "F"@"SEL$5") USE_HASH(@"SEL$4FDF941B" "HISTO"@"SEL$1") LEADING(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4") UNNEST(@"SEL$3") */ ';
  stmtClause :=stmtClause||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT  MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT /*+ LEADING(@"SEL$C19C7BAF" "TGE"@"SEL$3" "A"@"SEL$2" "TGE_FSED_30_TEMPORARY"@"SEL$6" "CONT"@"SEL$2" "D"@"SEL$5")*/'||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null ,
tge.numpac,
tge.pacmat,
tge.PAIEZAD,
tge.MATRICULE,
tge.DATE_EFFET 
FROM TGE_IMPORT_FSED_30 TGE 

WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            reqTrace :=null;
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
            IF w_table = 'DIC_TGE_RESPAIE_UNIQUE' THEN
              R_PRESENT_FICHIER_PAIE( w_numpac , null );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
 IF reqTrace is not null then
    FSED_ERREUR(p_id , 'Trace SYS_TRC_MODIF ',p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
 END IF;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
    W_IS_T1_LIKE_DECIDIUM SYS_VARSYS.VALVAR%TYPE;
    w_DSDSC DIC_ADM_CONTRAT_SITU.DSDSC%TYPE;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  --T1 LIKE DECIDECIDIUM 
  BEGIN 
  SELECT upper(NVL(VALVAR,'FALSE'))
  INTO W_IS_T1_LIKE_DECIDIUM
  FROM SYS_VARSYS 
  WHERE codvar='IS_T1_LIKE_DECIDIUM'
  AND MODULE='GTA';
  Exception 
   WHEN OTHERS THEN 
   W_IS_T1_LIKE_DECIDIUM :='FALSE';
    FSED_AVANCEMENT(p_id,'Warning : la varsys IS_T1_LIKE_DECIDIUM n existe pas ');
  END;
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        END IF; 
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateFin ;
        END IF;

        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric,DSDSC
          INTO w_matric,w_DSDSC
          FROM DIC_ADM_CONTRAT_SITU
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='TRUE' THEN 
        w_dateDed := w_periode ;
        END IF;
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed,w_DSDSC,w_unit);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    ELSE 
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF; 
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
   IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
    ELSE 
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  MERGE CAD_MATRIC_DATEVALID');
    merge INTO
    (SELECT MATRICULE,CODE_COMPTEUR,DATE_EFFET,UNITE_TENUE,DATE_DEB_PER,DATE_FIN_PER ,
    DATE_FIN_ACQUIS,DATE_DEB_ACQUIS,MAJ_CONTRAT,VISUHOUJ FROM CAD_MATRIC_DATEVALID ) a
    USING
    (SELECT distinct i.Matricule , i.Code_Compteur,
    to_char(i.DATE_DEBUT,'YYYYMMDD') as DATE_DEB , i.unite FROM TABLE(tab_DATEVALID) i ) b
    ON (a.Matricule =b.Matricule AND a.Code_Compteur=b.Code_Compteur and a.DATE_EFFET=to_char(w_periode,'YYYYMMDD'))
    WHEN NOT matched THEN
    INSERT
    (a.Matricule,a.Code_Compteur,a.DATE_EFFET ,a.UNITE_TENUE,a.DATE_DEB_PER,a.DATE_FIN_PER ,
    a.DATE_FIN_ACQUIS,a.DATE_DEB_ACQUIS,a.MAJ_CONTRAT,a.VISUHOUJ
    --DATE_DEB_PER ,DATE_DEB_ACQUIS = DACS.DSDSC ,MAJ_CONTRAT =N  ,VISUHOUJ ='H' si unite ='H' sinon 'J'
     ) VALUES
     (b.Matricule,b.Code_Compteur,to_char(w_periode,'YYYYMMDD'),b.unite,b.DATE_DEB,'21991231','21991231',b.DATE_DEB,'N',decode(b.unite, 'H', 'H', 'J')
    )
    when matched then
    UPDATE set a.UNITE_TENUE =b.unite ,a.DATE_DEB_PER =b.DATE_DEB ,a.DATE_FIN_PER='21991231' ,
    a.DATE_FIN_ACQUIS='21991231',a.DATE_DEB_ACQUIS=b.DATE_DEB,a.MAJ_CONTRAT='N',a.VISUHOUJ=decode(b.unite, 'H', 'H', 'J');
  END IF;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
     --DSH : Les VR mises à jour et non encore envoyé à zadig(code_gestionnaire ='G' and temoin_vr_base = O: Valeurs modifiées non envoyées ou K : Echec du dernier envoi des valeurs ou E : en cours d'envoi ) ne doivent pas être supprimés
 	DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac and (code_gestionnaire <>'G' or ( code_gestionnaire ='G' and temoin_vr_base <>'O' and temoin_vr_base <>'K' and temoin_vr_base <>'E') );
    
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 
 OR( carte_00 =false and (tab_11V IS NOT NULL OR tab_11R IS NOT NULL  OR tab_11D IS NOT NULL OR tab_11D1 IS NOT NULL 
 OR tab_15 IS NOT NULL OR tab_15_lib IS NOT NULL OR tab_17CR IS NOT NULL OR tab_17DMF IS NOT NULL))
THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
TAG_CHARSET=@€éèç
##
BUILD_INDEX_DEFRAG
=SQL=
create or replace PROCEDURE "BUILD_INDEX_DEFRAG" (p_retour OUT INTEGER)
AS
/**
 * Procédure de "défragmentation" de la table STD_STRUC_INDEX qui consiste en :
 * - la recopie des données dans une table temporaire (sans aucun index, ni pk) STD_STRUC_INDEX_DEFRAG
 * - le truncate de la table STD_STRUC_INDEX
 * - la recopie des données depuis STD_STRUC_INDEX_DEFRAG vers STD_STRUC_INDEX
 * - le recalcul des statistiques
 * La procédure retourne 1 si la défragmentation a pu être lancée, 0 sinon dans le paramètre p_retour
 * Afin d'éviter la concurrence entre cette procédure et la procédure BUILD_INDEX,
 * on utilise un codTs bidon -99 dans la table BUILD_INDEX_LOCK
 * 
 * A la fin de la défragmentation, on appelle également la procédure HRORG_CONSOLIDE_AFFECTATION qui permet de consolider la table STD_STRUC_AFFECTATION
 */
  v_codTs99   INTEGER := NULL;
  v_codTsLock INTEGER := NULL;
BEGIN
  p_retour := 0;
  
  -- Récupération si une structure est déjà lockée ou un traitement de défragmentation
  BEGIN
    SELECT codTs_lock
    INTO v_codTsLock
    FROM build_index_lock
    WHERE codTs_lock > 0
    AND ROWNUM = 1;
  EXCEPTION
    -- Aucune structure lockée
  WHEN NO_DATA_FOUND THEN
    v_codTsLock := NULL;
  END; 
  
  IF v_codTsLock IS NULL THEN
    -- Récupération si le codTs -99 existe déjà dans la table de lock
    BEGIN
      SELECT codTs
      INTO v_codTs99
      FROM build_index_lock
      WHERE codTs = -99;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Pas de ligne pour le codTs -99
      v_codTs99 := NULL;
    END;
    
    -- Lock dans la table BUILD_INDEX_LOCK
    IF v_codTs99 IS NULL THEN
      INSERT INTO build_index_lock (codTs, codTs_lock)
      values (-99, 1);
    ELSE
      UPDATE build_index_lock
      SET codTs_lock = 1
      WHERE codTs = -99;
    END IF;
    COMMIT; -- Commite de l'insert/update du lock
    
    -- Vidage d'abord de la table de défragmentation
    EXECUTE_IMMEDIATE_STRING('truncate table STD_STRUC_INDEX_DEFRAG',0);
      
    -- Copie dans la table temporaire
    INSERT INTO std_struc_index_defrag
    SELECT * FROM std_struc_index;
    
    -- Truncate de STD_STRUC_INDEX (pour éliminer la fragmentation de la table) 
    EXECUTE_IMMEDIATE_STRING('truncate table STD_STRUC_INDEX',0);
     
    -- Recopie dans STD_STRUC_INDEX
    INSERT INTO std_struc_index
    SELECT * FROM std_struc_index_defrag;
    
    COMMIT;
    
    -- Recacul des statistiques
    SYS_RECALCUL_STATS('std_struc_index');
    
    -- Truncate de STD_STRUC_INDEX_DEFRAG
    EXECUTE_IMMEDIATE_STRING('truncate table STD_STRUC_INDEX_DEFRAG',0);
    
    -- Déclocke 
    UPDATE build_index_lock
    SET codTs_lock = 0
    WHERE codTs = -99;
    COMMIT;
    
    -- Si des build ont été tentés pendant ce traitement, on les lance à la suite
    BEGIN
      FOR tabCodTsLock IN (
        SELECT codTs, date_eff
        FROM build_index_lock
        WHERE codTs_lock > 0)
      LOOP
        -- On commence par délocker la structure
        UPDATE build_index_lock
        SET codTs_lock = 0
        WHERE codTs = tabCodTsLock.codTs;
        COMMIT;
        -- Puis on lance le traitement de build
        BUILD_INDEX(tabCodTsLock.codTs, tabCodTsLock.date_eff);
      END LOOP;
    END;
    
    p_retour := 1;
    
    BEGIN
    	-- Appel à la consolidation des données dans la table STD_STRUC_AFFECTATION
	    EXECUTE_IMMEDIATE_STRING('call HRORG_CONSOLIDE_AFFECTATION()',0);
  	EXCEPTION WHEN OTHERS THEN
  		p_retour := 2;
  	END;
  	
  END IF;
EXCEPTION
WHEN OTHERS THEN
  -- Une exception a été lancé, on déclock la structure
  UPDATE build_index_lock 
  SET codTs_lock = 0 
  WHERE codTs = -99;
  COMMIT;
  
  
END BUILD_INDEX_DEFRAG;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
  type PERIODE2 IS RECORD
 (
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE,
  NUMCNT DIC_ADM_CONTRAT_SITU.NUMCNT%TYPE,
  DATE_SORTIE_SIT_BO DIC_ADM_CONTRAT_HISTO.DATE_SORTIE_SIT_BO%TYPE,
  DATE_EFF VARCHAR2(10) );
 type PERIODE_TAB2 IS TABLE OF PERIODE2 INDEX BY BINARY_INTEGER;
 tab_retro2 PERIODE_TAB2;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  -- Pour les simulations de départ, on autorise le calcul des périodes de recueil pour un mois dans le futur
  IF( p_periode_paie     <= periode_paie_en_cours OR p_dosNumForSimu IS NOT NULL) THEN
    IF p_dosNumForSimu IS NOT NULL THEN
      periode_recalcul   := p_periode_paie;
    ELSIF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
 		IF w_pacmat IS NOT NULL THEN
 			req              := req||'AND NVL(R.PACMAT, P.PACMAT) = '''||w_pacmat||'''';
 		END IF;
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
		-- Le calcul des périodes de recueil doit lancer le calcul des HP, CALC_HP.principal, lorsqu'une modification est détectée sur la date de début ou de fin de génération HP. 
         TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL CALC_HP.principal');
         req              := 'WITH TPRP2  AS ( select NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS MOIS_PAIE , NVL(R.NUMPAC, P.NUMPAC) AS NUMPAC ,NVL(R.PACMAT, P.PACMAT) AS PACMAT,NVL(R.PAIEZAD, P.PAIEZAD) AS PAIEZAD ';
         req              := req||'from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
         req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P '; 
         req              := req||'ON R.NUMPAC = P.NUMPAC '; 
         req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
         req              := req||'AND R.PAIEZAD = P.PAIEZAD '; 
         req              := req||'AND R.PACMAT = P.PACMAT ';
         req              := req||'WHERE (P.MOIS_PAIE IS NULL ';
         req              := req||'OR R.MOIS_PAIE IS NULL ';
         req              := req||'OR P.DEBUT_PER_GENERATION_HP != R.DEBUT_PER_GENERATION_HP '; 
         req              := req||'OR P.FIN_PER_GENERATION_HP  != R.FIN_PER_GENERATION_HP)) ';
         req              := req||'select S.NUMPAC, S.PACMAT, TPRP2.MOIS_PAIE AS PERIODE, S.CODE_CHRONO , S.PAIEZAD , S.NUMCNT , H.DATE_SORTIE_SIT_BO , TO_CHAR( TO_DATE(TPRP2.MOIS_PAIE,''YYYYMM''),''DD/MM/YYYY'') AS DATE_EFF FROM TPRP2 ';
         req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
         req              := req||'ON S.NUMPAC = TPRP2.NUMPAC ';
         req              := req||'AND S.PAIEZAD = TPRP2.PAIEZAD ';
         req              := req||'AND S.PACMAT = TPRP2.PACMAT ';
         req              := req||'INNER JOIN ( SELECT DISTINCT ';
         req              := req||'TPRP2.MOIS_PAIE, ';
         req              := req||'dach_max_date_eff.numpac, ';
         req              := req||'dach_max_date_eff.paiezad, ';
         req              := req||'dach_max_date_eff.pacmat, ';
         req              := req||'MAX(dach_max_date_eff.date_eff) ';
         req              := req||'OVER(PARTITION BY dach_max_date_eff.numpac, dach_max_date_eff.paiezad, dach_max_date_eff.pacmat) AS date_eff ';
         req              := req||'FROM dic_adm_contrat_histo dach_max_date_eff ';
         req              := req||'INNER JOIN TPRP2  ON ';
         req              := req||'dach_max_date_eff.numpac = TPRP2.numpac ';
         req              := req||'AND dach_max_date_eff.paiezad = TPRP2.paiezad ';
         req              := req||'AND dach_max_date_eff.pacmat = TPRP2.pacmat ';
         req              := req||'WHERE dach_max_date_eff.date_eff <= last_day(to_date(TPRP2.MOIS_PAIE, ''YYYYMM'')) ';
         req              := req||') C on  ';
         req              := req||'C.NUMPAC = S.NUMPAC ';
         req              := req||'AND C.paiezad = S.paiezad ';
         req              := req||'AND C.PACMAT = S.PACMAT ';
         req              := req||'AND C.MOIS_PAIE = TPRP2.MOIS_PAIE ';
         req              := req||'INNER join DIC_ADM_CONTRAT_HISTO H  ';
         req              := req||'ON H.NUMPAC = S.NUMPAC ';
         req              := req||'AND H.PAIEZAD = S.PAIEZAD ';        
         req              := req||'AND H.PACMAT = S.PACMAT ';
         req              := req||'AND H.NUMCNT = S.NUMCNT ';
         req              := req||'AND H.DATE_EFF = C.date_eff ';
         req              := req||'WHERE  ';
         req              := req||'TPRP2.MOIS_PAIE >= ''' || periode_recalcul_deb || '''  ';
         req              := req||'AND TPRP2.NUMPAC = ''' || p_numpac || '''  ';
         IF w_pacmat IS NOT NULL THEN
           req              := req||'AND TPRP2.PACMAT = '''||w_pacmat||'''  ';
         END IF ;
         EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro2;
         IF tab_retro2.exists(1) THEN
           FOR i IN tab_retro2.first..tab_retro2.last  
           LOOP
             BEGIN
               TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro2(i).NUMPAC, tab_retro2(i).PACMAT, tab_retro2(i).PERIODE,  tab_retro2(i).CODE_CHRONO,  tab_retro2(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
             EXCEPTION
             WHEN OTHERS THEN
               TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PERIODE||''',  '''||tab_retro2(i).CODE_CHRONO||''',  '''||tab_retro2(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
             END;
             BEGIN
	           -- TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','CALC_HP.principal('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PERIODE||''',  '''||tab_retro2(i).CODE_CHRONO||''',  '''||tab_retro2(i).PAIEZAD||''','''||tab_retro2(i).DATE_SORTIE_SIT_BO||''','''||tab_retro2(i).DATE_EFF||''','''||tab_retro2(i).NUMCNT||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
               CALC_HP.principal(tab_retro2(i).NUMPAC, tab_retro2(i).PACMAT, tab_retro2(i).PAIEZAD,  tab_retro2(i).NUMCNT,  tab_retro2(i).DATE_EFF,  tab_retro2(i).DATE_SORTIE_SIT_BO, 'proc_TGE_ALIM_PERIODE_INDIV',1);
             EXCEPTION
             WHEN OTHERS THEN
               TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : CALC_HP.principal('''||tab_retro2(i).NUMPAC||''', '''||tab_retro2(i).PACMAT||''', '''||tab_retro2(i).PAIEZAD||''',  '''||tab_retro2(i).NUMCNT||''',  '''||tab_retro2(i).DATE_EFF||''', '''||tab_retro2(i).DATE_SORTIE_SIT_BO||''', ''proc_TGE_ALIM_PERIODE_INDIV'',1) '||SQLCODE||' '||SQLERRM);
             END;
           END LOOP;
         END IF;	
		 EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPDATE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE pour forcer le passage dans le trigger et le recalcul de la colonne PERIODE avec la bonne valeur
		 -- On cible les incidents dont la colonne PERIODE ne correspond pas à la valeur qu'elle devrait avoir (MOIS_PAIE de TGE_PERIODE_RECUEIL_PAIEZAD pour la période de recueil incluant la DATE_EFFET de l'incident)
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE, TYPE_WRITER=''''R'''' ';
			req              := req|| ' WHERE ID IN ( ';
			req            	 := req|| '   select I.ID from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| '   INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| '   ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| '   AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| '   AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| '   WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			req            	 := req|| '   AND TO_CHAR(I.PERIODE, ''''YYYYMM'''') != P.MOIS_PAIE '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| '   AND P.PACMAT = '''''||w_pacmat||'''''  ';
			END IF;
			req            	 := req|| ' )  '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK : ''||SQL%ROWCOUNT||'' ligne(s) mise(s) à jour'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_30
=SQL=
create or replace PROCEDURE TGE_IMPORT_30
(
    P_LOGIN       IN VARCHAR2 ,
    P_DATE_IMPORT IN VARCHAR2 ,
    P_ROLE        IN VARCHAR2 ,
    -- Origine écran
    P_ORIGINE     IN VARCHAR2 ,
    P_VALIDATION  IN VARCHAR2 ,
    P_WITH30      IN VARCHAR2 ,
    P_CODLANG     IN VARCHAR2,
    -- Valeurs attendues : EC -> écran création, EM -> écran modification, GAP -> création en sous-marin, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
    P_TYPE_ACTION IN VARCHAR2 ,
    P_DATE_MAJ    IN SYS_TRC_MODIF.DATEMAJ%type)
AS
  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  req CLOB;
  reqvalues CLOB;
  reqInsert CLOB;
  dateMaj SYS_TRC_MODIF.datemaj%type;
  functionnalityTrace VARCHAR2(250);
BEGIN
  v_start       := DBMS_UTILITY.GET_TIME;
  IF P_DATE_MAJ IS NULL THEN
    SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
  ELSE
    dateMaj:= P_DATE_MAJ;
  END IF;
  IF ( P_WITH30 =1) THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
      TGE_CONTROLE_30 (p_login, p_date_import, NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_30 - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
  END IF;
  IF p_validation = 1 THEN
    BEGIN
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion TGE_ELEMENTS_PAIE');
      INSERT
      INTO TGE_ELEMENTS_PAIE
        (
          NUMPAC ,
          PAIEZAD ,
          PERIODE ,
          TYPE_TRAITEMENT ,
          CODE_ELEMENT ,
          INDICATIF ,
          ORIGINE ,
          SENS ,
          VALEUR ,
          DERNIER_CODE_OPE ,
          LOGIN_MAJ ,
          DATE_MAJ ,
          CLE_IMPORT ,
          IDPACMAT,
          type_writer,
          CODE_REMPLACEMENT,
          DATE_EFFET,
         ACTION_RETRO,
         ACTION_RETRO_DATE
        )
      SELECT E.NUMPAC ,
        PAIEZAD ,
        PERIODE ,
        TYPE_TRAITEMENT ,
        CODE_ELEMENT ,
        UPPER (NVL(INDICATIF,'*')) AS INDICATIF,
        ORIGINE ,
        SENS ,
        VALEUR ,
        'C' ,
        p_login ,
        TO_CHAR (sysdate, 'YYYYMMDDHH24MI') ,
        CASE
          WHEN 'VI' = P_TYPE_ACTION or 'MP' = P_TYPE_ACTION
          -- Pour les EZ, on va stocker une clé d'import en import et en MP
		  -- afin de pouvoir retrouver la ligne créée pour les traces
          THEN P_LOGIN
            ||'#'
            ||P_DATE_IMPORT
            ||'#'
            ||NUMLIGNE
          ELSE NULL
        END AS CLE_IMPORT,
        CASE
          WHEN E.NUMPAC IS NOT NULL
          AND PACMAT    IS NOT NULL
          THEN RPAD(E.NUMPAC,6)
            || PACMAT
          ELSE ' '
        END AS IDPACMAT,
        CASE
          WHEN (SELECT O.MODE_T2
              ||'#'
              ||O.ENVOI_MODE_R
            FROM TGE_REF_ORIGINE_GTA O
            WHERE O.NUMPAC     = E.NUMPAC
            AND O.CODE_ORIGINE = E.ORIGINE) = 'R#N'
          THEN 'N'
          ELSE NULL
        END AS TYPE_WRITER,
        NVL(E.CODE_REMPLACEMENT,'*') AS CODE_REMPLACEMENT,
        TO_DATE(E.DATE_EFFET,'YYYYMMDD') AS DATE_EFFET,
        -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
        -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
        -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
        case
        	when  E.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = E.NUMPAC)
         	then '*'
         	else NULL
        end as ACTION_RETRO,
        NULL as ACTION_RETRO_DATE
                             
      FROM TGE_IMPORT_ELEMENTS E
      WHERE LOGIN           =P_LOGIN
      AND CODE_ELEMENT NOT IN ('B690','B691')
      AND DATE_IMPORT       = p_date_import
      AND ((ERREURS        IS NULL
      AND STATUT            = 'TRAIT')
      OR (ERREURS          IS NOT NULL
      AND STATUT            = 'TRANS'));
      
      -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
      update TGE_ELEMENTS_PAIE set 
      	ACTION_RETRO = 'C',
      	ACTION_RETRO_DATE = DATE_MAJ
      where ACTION_RETRO = '*';
      
    EXCEPTION
    WHEN OTHERS THEN
      w_err := SQLCODE;
      w_err := w_err||'  ' ||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidElement - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH' or SQLCODE=-20001) THEN
      	-- On remonte l'erreur à l'application
      	raise;
      END IF;
    END ;
        
    --- Gestion de la trace pour les imports ou la MarketPlace : on enregistre une trace pour chaque ligne de l'import qui n'est pas en erreur
    IF P_TYPE_ACTION = 'VI' or P_TYPE_ACTION = 'MP' THEN
    	functionnalityTrace := 'IMPORT_ELEMENT_PAIE';
    	IF P_TYPE_ACTION = 'MP' THEN
    		functionnalityTrace := 'IMPORT_ELEMENT_PAIE_MP';
    	END IF;
    	
      	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début SYS_TRC_MODIF pour insertion EZ');
      	
		insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
	  		NAMES_VALUES_HAVE_CHANGED, AFTER_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
			select EI.LOGIN, SYSDATE, '3', functionnalityTrace, 
			-- KEY_VALUES
			'numPac='||E.NUMPAC||'&paieZad='||E.PAIEZAD||'&periode='||E.PERIODE||'&type_traitement='||E.TYPE_TRAITEMENT||'&code_element='||E.CODE_ELEMENT||'&indicatif='||E.INDICATIF||'&'||'code_remplacement='||E.CODE_REMPLACEMENT,
			-- SHORT_NAME : on gère si c'est un élément de remplacement ou non
			'Ajout d''un EZ' || decode(E.CODE_REMPLACEMENT, '*', '', ' rempl.'), 
			-- ACTION
			'C',
			-- NAMES_VALUES_HAVE_CHANGED 
			'numPac^paieZad^periode^type_traitement^code_element^indicatif^valeur^origine^dernier_code_ope^login_maj^date_maj^idPacMat^code_remplacement^date_effet^cle_import',
			-- AFTER_CHANGE
			E.NUMPAC||'^'||E.PAIEZAD||'^'||E.PERIODE||'^'||E.TYPE_TRAITEMENT||'^'||E.CODE_ELEMENT||'^'||E.INDICATIF||'^'||E.VALEUR
			||'^'||E.ORIGINE||'^'||E.DERNIER_CODE_OPE||'^'||E.LOGIN_MAJ||'^'||E.DATE_MAJ||'^'||E.IDPACMAT||'^'||E.CODE_REMPLACEMENT
			||'^'||E.DATE_EFFET||'^'||E.CLE_IMPORT,
			-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
			E.NUMPAC, EI.PACMAT, E.PAIEZAD, EI.MATRICULE, E.DATE_EFFET
		from TGE_ELEMENTS_PAIE E inner join TGE_IMPORT_ELEMENTS EI on E.CLE_IMPORT = EI.LOGIN||'#'||EI.DATE_IMPORT||'#'||EI.NUMLIGNE
		where EI.LOGIN = P_LOGIN and EI.DATE_IMPORT = P_DATE_IMPORT;
    END IF;
    
    -- Mise à jour de la column RETRO_GC de la table TGE_PERIODE_RECUEIL_PAIEZAD
    -- si la "full" rétroactivité n'est pas activé sur le pac
    UPDATE TGE_PERIODE_RECUEIL_PAIEZAD R
    SET R.RETRO_GC =
      (SELECT E.VALEUR
      FROM TGE_ELEMENTS_PAIE E
      WHERE R.NUMPAC     = E.NUMPAC
      AND R.PAIEZAD      = E.PAIEZAD
      AND R.MOIS_PAIE    = E.PERIODE
      AND E.CODE_ELEMENT = 'WG96'
      )
    WHERE (R.NUMPAC, R.PAIEZAD, R.MOIS_PAIE) IN
      (SELECT e2.numpac,
        e2.paiezad,
        e2.periode
      FROM TGE_IMPORT_ELEMENTS E2
      WHERE e2.login     = P_LOGIN
      AND e2.date_import = p_date_import
      AND ((e2.ERREURS  IS NULL
      AND e2.STATUT     IN ('TRAIT','FIN'))
      OR (e2.ERREURS    IS NOT NULL
      AND e2.STATUT      = 'TRANS'))
      AND EXISTS (SELECT 'ACTIVE_RETRO_GC'
	 	FROM TGE_REF_PAC
	 	WHERE NUMPAC = e2.NUMPAC
	 		AND (DEB_RETRO IS NULL OR DEB_RETRO > e2.periode)
	 	)
      );
    ----------------------------------------------------------------------------
    
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_ELEMENTS');
    -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   	UPDATE TGE_IMPORT_ELEMENTS
   	SET STATUT ='TRANS'
   	WHERE LOGIN = P_LOGIN
   	AND DATE_IMPORT = p_date_import
   	AND (ERREURS IS NOT NULL
   	AND STATUT = 'TRAIT')
   	AND CODE_ELEMENT NOT IN ('B690','B691');
	
   	-- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
    UPDATE TGE_IMPORT_ELEMENTS
    SET STATUT ='FIN'
    WHERE LOGIN = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND ERREURS IS NULL
    AND CODE_ELEMENT NOT IN ('B690','B691');
       
    -- Suppression des lignes dans dans DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début DELETE FROM dic_tge_imputations_perm');
    DELETE
    FROM DIC_TGE_IMPUTATIONS_PERM A
    WHERE (A.NUMPAC,A.PAIEZAD) IN
      (SELECT B.NUMPAC,
        B.paiezad
      FROM TGE_IMPORT_ELEMENTS B
      WHERE B.CODE_ELEMENT >='B690'
      AND B.CODE_ELEMENT   <='B691'
      AND B.CODE_ELEMENT   IS NOT NULL
      AND B.ERREURS        IS NULL
      AND B.DATE_IMPORT     = p_date_import
      AND B.LOGIN           = P_LOGIN
      GROUP BY LOGIN,
        NUMPAC,
        PAIEZAD,
        DATE_IMPORT,
        INDICATIF
      HAVING COUNT(DISTINCT B.CODE_ELEMENT ) >1
      ) ;
    -- Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Ajout dans la table  DIC_TGE_IMPUTATION_PERMANENTE');
    FOR b_numpac IN
    (SELECT DISTINCT numpac
    FROM TGE_IMPORT_ELEMENTS
    WHERE LOGIN       = P_LOGIN
    AND DATE_IMPORT   = p_date_import
    AND ERREURS      IS NULL
    AND code_ELEMENT IN ('B690','B691')
    )
    LOOP
      req      :='insert into DIC_TGE_IMPUTATIONS_PERM p(numpac,paiezad,MATRIC,pacmat';
      reqInsert:='select numpac,paiezad,MATRICULE,pacmat,';
      reqvalues:= ' from (select numpac,paiezad,MATRICULE,pacmat,code_element||''#''||indicatif as el, valeur';
      reqvalues:= reqvalues|| ' from TGE_IMPORT_ELEMENTS b where login='''||p_login||''' and date_import='''||P_DATE_IMPORT||''' and code_element in (''B690'',''B691'')  )';


      reqvalues:= reqvalues|| '  pivot (max(valeur)   for(el) in (';
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion DIC_TGE_IMPUTATIONS_PERM');
      FOR cur IN
      (SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     =b_numpac.numpac
      UNION
      SELECT ELEMENT,
        occurence,
        DOnneegxp,
        tablegxp
      FROM tge_ref_mapdo
      WHERE element IN ('B690','B691')
      AND numpac     ='*'
      )
      LOOP
        req           :=req||','||cur.DONNEEGXP;
        reqvalues     := reqvalues||''''||cur.element||'#'||cur.occurence ||''' as '|| cur.DONNEEGXP||',';
        IF cur.element ='B690' THEN
          reqInsert   := reqInsert||cur.DONNEEGXP ||',';
        ELSE
          reqInsert:= reqInsert||' IS_NUMBER(replace('||cur.DONNEEGXP ||','','',''.'')) as '||cur.DONNEEGXP ||' ,';
        END IF;
        IF P_LOGIN = 'BATCH' THEN
          SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','IMPUTATION_PAIE', 'CARTE=30&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE||'&ELEMENT='||cur.element||'&DONNEEGXP='||cur.DONNEEGXP, 'Import Batch 30 B690/B691','C',NULL,NULL,NULL,NULL);
        END IF;
      END LOOP;
      reqvalues:= SUBSTR(reqvalues,1,LENGTH(reqvalues)-1)||'))  ';
      reqvalues:= reqvalues|| ' b where   exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||'''  and c.date_import='''||P_DATE_IMPORT||'''  and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B690''   and ERREURs is  null)
      and  exists (select 1 from TGE_IMPORT_ELEMENTS c where c.login='''||p_login||''' and c.date_import='''||P_DATE_IMPORT||''' and b.numpac=c.numpac and b.paiezad=c.paiezad and c.code_element=''B691''  and ERREURs is  null) ';
      reqInsert:= SUBSTR(reqInsert,1,LENGTH(reqInsert)-1);
      req      :=req||')  ';
      req      :=req||reqInsert|| reqvalues;
       EXECUTE_IMMEDIATE_STRING( req,0);
    END LOOP;
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
    UPDATE TGE_IMPORT_LISTE
    SET NBLIGNES_ERR =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      AND ERREURS    IS NOT NULL
      ),
      NBLIGNES_IMP =
      (SELECT COUNT(*)
      FROM TGE_IMPORT_ELEMENTS
      WHERE LOGIN     = P_LOGIN
      AND DATE_IMPORT = p_date_import
      ),
      STATUT        ='TRANS'
    WHERE LOGIN     = P_LOGIN
    AND DATE_IMPORT = p_date_import
    AND TYPE        = '2';
    -- Inscription en recyclage
    TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Inscription en recyclage');
  END IF;
END TGE_IMPORT_30;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_WITH50      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : VI -> pour la validation des imports Web ou Batch, MP -> pour la validation depuis le Market Place
 P_TYPE_ACTION IN VARCHAR2)
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 doRollback boolean;
 desactiveTraitements   VARCHAR2(1000);

 BEGIN
 doRollback:=false;
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début ' || P_LOGIN || '-' || P_DATE_IMPORT || '-' || P_ROLE || '-' || P_ORIGINE || '-' || P_VALIDATION || '-' || P_WITH30 || '-' || P_WITH40|| '-' || P_WITH60|| '-' || P_WITH70|| '-' || P_WITH50|| '-' || P_ISFSED || '-' || P_CODLANG || '-' || P_TYPE_ACTION);
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 
 -- Suppression dans TGE_ABSENCES
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = C.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 and A.ERREURS is null
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 and a.erreurs is null
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 -- Suppression dans TGE_INCIDENTS_PAIE sur la colonne PERIODE
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
-- Suppression dans TGE_INCIDENTS_PAIE sur la colonne PERIODE_INIT
DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode_init
 );

DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode_init
 );
 
 -- Gestion de l'annulation pour les éléments de paie et les données variables (on pourra rajouter les autres types si on veut)
 TGE_IMPORT_CARTE_ANNULATION(P_LOGIN, P_DATE_IMPORT);
 
  -- Suppression dans TGE_IMPUTATIONS
  
 DELETE
 FROM TGE_IMPUTATIONS p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')));
 
 DELETE
 FROM TGE_IMPUTATIONS p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and a.erreurs is null
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')));
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then 
  doRollback:=true;
  GOTO end_proc;
 end if ; 
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 IF P_WITH50 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début carte 50');
 TGE_IMPORT_50 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH50 , P_CODLANG, P_TYPE_ACTION, datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_50 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH50, w_err );
 --UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20001') then
 doRollback:=true;
 GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, P_TYPE_ACTION );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 if(SQLCODE='-20001') then 
   doRollback:=true;
   GOTO end_proc;
  end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 -- activer ou non les nouveaux traitements de l'import 3040
 select NVL(upper(VALVAR), ' ') into desactiveTraitements from sys_varsys where module='STD' and codvar='DESACTIVE_TRAITEMENTS_IMPORT_3040';
 IF INSTR(desactiveTraitements, 'TGE_CONTROLE_40_CHEVAUCHEMENT') < 1 THEN
	 --controle chevauchement
	 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 END IF;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT,
 ORIGINE,
 CODE_IMPUTATION
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT,
 ABSENCES.ORIGINE,
 ABSENCES.CODE_IMPUTATION
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT,
  INCI.origine AS ORIGINE,     --origine 
  CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation-- code_imputation
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ,
 TGE_REF_ORIGINE_GTA
 WHERE ABSENCES.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND ABSENCES.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
--UN TRAITEMENT DE PAIE EST EN COURS
 if(SQLCODE='-20000') then 
  doRollback:=true;
  GOTO end_proc;
 end if ;
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 IF INSTR(desactiveTraitements, 'TGE_REGROUPE_ABS') < 1 THEN
 	-- Regroupement des absences importé
 	TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 END IF;
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_LISTE');
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = '5';
 
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_ANNULATION');
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_ANNULATION
 SET STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS  IS NULL;
 
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ANNULATION
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = '0';
 
 
 
 END IF;
 END IF ;

 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 <<end_proc>> 
 if(doRollback) then
  ROLLBACK;
  if(P_WITH30=1) then
    UPDATE TGE_IMPORT_ELEMENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
    end if;
  if(P_WITH40=1) then
    UPDATE TGE_IMPORT_INCIDENTS
    SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
    WHERE LOGIN      = P_LOGIN
    AND DATE_IMPORT  = p_date_import ;
  end if;
  if(P_WITH50=1) then
 UPDATE TGE_IMPORT_IMPUTATIONS
 SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
 WHERE LOGIN      = P_LOGIN
 AND DATE_IMPORT  = p_date_import ;
 end if;
  if(P_WITH60=1 or P_WITH70=1) then
  UPDATE TGE_IMPORT_DONNEES
  SET ERREURS =TGE_GET_MESSAGE_ERREUR(ERREURS,replace(get_message_erreur('TGE','TGE00352',p_codlang),'',''),NULL,p_codlang)
  WHERE LOGIN      = P_LOGIN
  AND DATE_IMPORT  = p_date_import ;
  
  end if;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Rollback de l''import suite à une détection d''un traitement de paie en cours.');
  FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , 'Une paie est en cours d''exécution.' );
 
  end if;

 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_6070
=SQL=
create or replace PROCEDURE TGE_IMPORT_6070 
(
  P_LOGIN IN VARCHAR2 
, P_DATE_IMPORT IN VARCHAR2 
, P_ROLE IN VARCHAR2 -- pour les traces
  -- Origine écran
, P_ORIGINE IN VARCHAR2  -- pour les traces
, P_VALIDATION IN VARCHAR2 
, P_WITH60 IN VARCHAR2 
, P_WITH70 IN VARCHAR2 
, P_CODLANG IN VARCHAR2 
-- Valeurs attendues : EC -> écran création, EM -> écran modification, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
, P_TYPE_ACTION IN VARCHAR2
) AS 

  w_err   VARCHAR2(2000);
  v_start NUMBER;
  v_stop  NUMBER;
  dateMaj SYS_TRC_MODIF.datemaj%type;
  functionnalityTrace VARCHAR2(250);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
 IF  ( P_WITH60 =1  OR P_WITH70 = 1) THEN
    BEGIN
      TGE_CONTROLE_DONNEE_PAIE (p_login,p_date_import,NULL, p_codlang, P_TYPE_ACTION);
    EXCEPTION
    WHEN OTHERS THEN
      w_err := w_err||'  '||sqlerrm;
      TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_DONNEE_PAIE - Erreur : ' || w_err);
      IF (P_LOGIN != 'BATCH') THEN
      	-- On remonte l'erreur à l'application
  	    raise;
  	  END IF;
    END ;
 END IF;
 IF p_validation = 1 THEN
   BEGIN
   	 INSERT INTO TGE_DONNEES_PAIE (NUMPAC                 ,
                                 PAIEZAD                    ,
                                 PERIODE                    ,
                                 TYPE_TRAITEMENT            ,
                                 TYPE_DONNEE                ,
                                 CODE_RUBRIQUE              ,
                                 CODE_CAISSE                ,
                                 NO_SEQUENCE                ,
                                 SENS                       ,
                                 CODE_IMPUTATION            ,
                                 ORIGINE                    ,
                                 NOMBRE                     ,
                                 TAUX                       ,
                                 MONTANT                    ,
                                 POURCENTAGE                ,
                                 DOMAINE_PRCTE              ,
                                 DERNIER_CODE_OPE           ,
                                 LOGIN_MAJ                  ,
                                 DATE_MAJ                   ,
                                 CLE_IMPORT                 ,
                                 IDPACMAT                   ,
                                 PERIODE_RATTACH_DEB        ,
                                 PERIODE_RATTACH_FIN        ,
                                 DATE_DEB_ARRET             ,
                                 PERIODE_AFFECTATION        ,
                                 TYPE_WRITER                ,
                                 CODE_REMPLACEMENT			,
                                 DATE_EFFET           		,
                                 ACTION_RETRO				,
                                 ACTION_RETRO_DATE
                                 )
                                 
              SELECT                   DONNEES.NUMPAC,
                                       DONNEES.PAIEZAD,
                                       DONNEES.PERIODE,
                                       DONNEES.TYPE_TRAITEMENT,
                                       DONNEES.TYPE_DONNEE,
                                       DONNEES.CODE_RUBRIQUE,
                                       DONNEES.CODE_CAISSE,
                                       is_number(DONNEES.NO_SEQUENCE+DONNEES.CMPT),
                                       DONNEES.SENS,
                                       DONNEES.CODE_IMPUTATION,
                                       DONNEES.ORIGINE,
                                       is_number(DONNEES.NOMBRE),
                                       is_number(DONNEES.TAUX),
                                       is_number(DONNEES.MONTANT),
                                       is_number(DONNEES.POURCENTAGE),
                                       DONNEES.DOMAINE_PRCTE,
                                       DONNEES.DERNIER_CODE_OPE,
                                       DONNEES.LOGIN_MAJ,
                                       DONNEES.DATE_MAJ,
                                       DONNEES.CLE_IMPORT,
                                       DONNEES.IDPACMAT,
                                       DONNEES.PERIODE_RATTACH_DEB,
                                       DONNEES.PERIODE_RATTACH_FIN,
                                       DONNEES.DATE_DEB_ARRET,
                                       DONNEES.PERIODE_AFFECTATION,
                                       DONNEES.TYPE_WRITER,
                                       DONNEES.CODE_REMPLACEMENT,
                                       DONNEES.DATE_EFFET,
                                       DONNEES.ACTION_RETRO,
                                       DONNEES.ACTION_RETRO_DATE
              FROM    
              (SELECT            dense_rank() over (partition by tg.NUMPAC,tg.PAIEZAD,tg.PERIODE,tg.TYPE_TRAITEMENT,tg.TYPE_DONNEE,tg.CODE_RUBRIQUE,tg.CODE_CAISSE order by tg.NUMLIGNE desc)  as CMPT,     
                                 TG.NUMPAC,
                                 TG.PAIEZAD,
                                 TG.PERIODE,
                                 TG.TYPE_TRAITEMENT,
                                 TG.TYPE_DONNEE ,
                                 TG.CODE_RUBRIQUE,
                                 NVL(TG.CODE_CAISSE,'*') AS CODE_CAISSE,
                            (select NVL(max(tp.no_sequence),0 )
                             from TGE_DONNEES_PAIE tp
                             where tp.NUMPAC=tg.NUMPAC
                             AND tp.PAIEZAD=tg.PAIEZAD
                             AND tp.PERIODE =tg.PERIODE
                             AND tp.TYPE_TRAITEMENT =tg.TYPE_TRAITEMENT
                             AND tp.TYPE_DONNEE = tg.TYPE_DONNEE
                             AND tp.CODE_RUBRIQUE =tg.code_rubrique
                             AND tp.CODE_CAISSE=NVL(tg.code_caisse,'*')) AS no_sequence,
                             TG.SENS,
                             TG.CODE_IMPUTATION,
                             TG.ORIGINE,
                             TG.NOMBRE                     ,
                             TG.TAUX                       ,
                             TG.MONTANT                    ,
                             TG.POURCENTAGE                ,
                             TG.DOMAINE_PRCTE              ,
                             'C'  AS   DERNIER_CODE_OPE ,
                             P_LOGIN AS LOGIN_MAJ,
                             TO_CHAR (sysdate, 'YYYYMMDDHH24MI') AS DATE_MAJ,
                             -- Pour les DV/DR, on va stocker une clé d'import même lorsque l'on vient de l'écran
                             -- afin de pouvoir retrouver la ligne créée et le no_sequence (pour les traces)
                             P_LOGIN||'#'||P_DATE_IMPORT||'#'||NUMLIGNE AS CLE_IMPORT,
                             CASE
                               WHEN TG.NUMPAC IS NOT NULL
                               AND TG.PACMAT  IS NOT NULL
                               THEN RPAD(TG.NUMPAC,6)|| TG.PACMAT
                               ELSE ' '
                             END AS IDPACMAT,
                             to_date(TG.PERIODE_RATTACH_DEB, 'YYYYMMDD') as PERIODE_RATTACH_DEB,
                             to_date(TG.PERIODE_RATTACH_FIN, 'YYYYMMDD') as PERIODE_RATTACH_FIN,
                             to_date(TG.DATE_DEB_ARRET, 'YYYYMMDD') as DATE_DEB_ARRET,
                             to_date(TG.PERIODE_AFFECTATION, 'YYYYMMDD') as PERIODE_AFFECTATION,
                             case 
                               when (select O.MODE_T2||'#'||O.ENVOI_MODE_R from TGE_REF_ORIGINE_GTA O where O.NUMPAC = TG.NUMPAC and O.CODE_ORIGINE = TG.ORIGINE) = 'R#N'
      						   then 'N'
      						   else NULL
                             end as TYPE_WRITER,
                             TG.CODE_REMPLACEMENT,
                             to_date(TG.DATE_EFFET,'YYYYMMDD') as DATE_EFFET,
                             -- Gestion Action Retro : pour ne pas bousiller les perfs, on va positionner une valeur '*' dans actionRetro et null dans actionRetroDate
                             -- et ensuite avec une requête d'update mettre à jour la valeur de actionRetro et actionRetroDate.
                             -- On évite ainsi de faire 2 sous-select sur TGE_REF_PAC ou une jointure globale pour récupérer TGE_REF_PAC.PERIODEENCOURS
                             case
                             	when  TG.PERIODE < (select PAC.PERIODEENCOURS from TGE_REF_PAC PAC where PAC.NUMPAC = TG.NUMPAC)
                             	then '*'
                             	else NULL
                             end as ACTION_RETRO,
                             NULL as ACTION_RETRO_DATE
                             
          FROM               TGE_IMPORT_DONNEES  TG
          WHERE              TG.LOGIN            = P_LOGIN 
          AND                TG.DATE_IMPORT      = P_DATE_IMPORT
          AND ((TG.ERREURS   IS NULL
          AND TG.STATUT  = 'TRAIT')
          OR (TG.ERREURS  IS NULL
          AND TG.STATUT   = 'TRANS')))DONNEES;
          
          -- Gestion Action Retro : si création d'une ligne rétro, on sauvegarde qu'il s'agit d'une création comme première action et la date à laquelle elle a eu lieu
          update TGE_DONNEES_PAIE set 
          	ACTION_RETRO = 'C',
          	ACTION_RETRO_DATE = DATE_MAJ
          where ACTION_RETRO = '*';
   END ;
   
   	--- Gestion de la trace pour les imports ou la MarketPlace : on enregistre une trace pour chaque ligne de l'import qui n'est pas en erreur
	IF P_TYPE_ACTION = 'VI' or P_TYPE_ACTION = 'MP' THEN
		functionnalityTrace := 'IMPORT_DONNEE_ELT_PAIE';
    	IF P_TYPE_ACTION = 'MP' THEN
			functionnalityTrace := 'IMPORT_DONNEE_ELT_PAIE_MP';
    	END IF;
    	
      	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début SYS_TRC_MODIF pour insertion DV/DR');
      	
		insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
	  		NAMES_VALUES_HAVE_CHANGED, AFTER_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
			select DI.LOGIN, SYSDATE, '3', functionnalityTrace, 
			-- KEY_VALUES
			'numPac='||D.NUMPAC||'&paieZad='||D.PAIEZAD||'&periode='||D.PERIODE||'&type_traitement='||D.TYPE_TRAITEMENT||'&type_donnee='||D.TYPE_DONNEE||'&code_rubrique='||D.CODE_RUBRIQUE||'&code_caisse='||D.CODE_CAISSE||'&no_sequence='||D.NO_SEQUENCE,
			-- SHORT_NAME : on gère le type de donnée DV/DR /DR Cotis et si c'est du remplacement ou non
			'Ajout d''une ' || decode(D.TYPE_DONNEE, '1', 'DV', '2', 'DR', 'DR cotis.') || decode(nvl(D.CODE_REMPLACEMENT, '*'), '*', '', ' rempl.'),
			-- ACTION
			'C',
			-- NAMES_VALUES_HAVE_CHANGED 
			'numPac^paieZad^periode^type_traitement^type_donnee^code_rubrique^code_caisse^no_sequence^sens^code_imputation^nombre^taux^montant^pourcentage^domaine_prcte^periode_rattach_deb^periode_rattach_fin^date_deb_arret^periode_affectation^origine^dernier_code_ope^login_maj^date_maj^code_remplacement^date_effet^idPacMat^cle_import',
			-- AFTER_CHANGE
			D.NUMPAC||'^'||D.PAIEZAD||'^'||D.PERIODE||'^'||D.TYPE_TRAITEMENT||'^'||D.TYPE_DONNEE||'^'||D.CODE_RUBRIQUE||'^'||D.CODE_CAISSE
			||'^'||D.NO_SEQUENCE||'^'||D.SENS||'^'||D.CODE_IMPUTATION||'^'||D.NOMBRE||'^'||D.TAUX||'^'||D.MONTANT||'^'||D.POURCENTAGE
			||'^'||D.DOMAINE_PRCTE||'^'||D.PERIODE_RATTACH_DEB||'^'||D.PERIODE_RATTACH_FIN||'^'||D.DATE_DEB_ARRET||'^'||D.PERIODE_AFFECTATION
			||'^'||D.ORIGINE||'^'||D.DERNIER_CODE_OPE||'^'||D.LOGIN_MAJ||'^'||D.DATE_MAJ
			||'^'||D.CODE_REMPLACEMENT||'^'||D.DATE_EFFET||'^'||D.IDPACMAT||'^'||D.CLE_IMPORT,
			-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
			D.NUMPAC, DI.PACMAT, D.PAIEZAD, DI.MATRICULE, D.DATE_EFFET
			from TGE_DONNEES_PAIE D inner join TGE_IMPORT_DONNEES DI on D.CLE_IMPORT = DI.LOGIN||'#'||DI.DATE_IMPORT||'#'||DI.NUMLIGNE
			where DI.LOGIN = P_LOGIN and DI.DATE_IMPORT = P_DATE_IMPORT;
	END IF;
   
   TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPORT_DONNEES');
   -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT = 'TRANS'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND (ERREURS IS NOT NULL
   AND STATUT = 'TRAIT');
	 
   -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
   UPDATE TGE_IMPORT_DONNEES
   SET STATUT ='FIN'
   WHERE LOGIN = P_LOGIN
   AND DATE_IMPORT = p_date_import
   AND ERREURS IS NULL;
   
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début UPDATE TGE_IMPORT_LISTE');
	-- DV
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '1'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '1'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '1';
	-- DR
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '3'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '3'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '3';
	-- DR Cotis
	UPDATE TGE_IMPORT_LISTE
	SET NBLIGNES_ERR =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND ERREURS    IS NOT NULL
	  AND TYPE_IMPORT = '4'
	  ),
	  NBLIGNES_IMP =
	  (SELECT COUNT(*)
	  FROM TGE_IMPORT_DONNEES
	  WHERE LOGIN     = P_LOGIN
	  AND DATE_IMPORT = p_date_import
	  AND TYPE_IMPORT = '4'
	  ),
	  STATUT        ='TRANS'
	WHERE LOGIN     = P_LOGIN
	AND DATE_IMPORT = p_date_import
	AND TYPE = '4';
   
 END IF ;
EXCEPTION
  WHEN OTHERS THEN
  w_err := ' '||w_err|| sqlerrm;
  TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidDonneePaie - Erreur : ' || w_err);
  IF (P_LOGIN != 'BATCH' or SQLCODE='-20001') THEN
  	-- On remonte l'erreur à l'application
    raise;
  END IF;
END TGE_IMPORT_6070;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_CARTE_ANNULATION
=SQL=
create or replace PROCEDURE TGE_IMPORT_CARTE_ANNULATION( P_LOGIN IN VARCHAR2, P_DATE_IMPORT IN VARCHAR2)
 AS
 

BEGIN
	/*
	 * ELEMENTS DE PAIE
	 */
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début SYS_TRC_MODIF pour annulation EZ');
	-- On trace l'annulation des éléments (TGE_REF_TYPES_GTA.MATRIC_GTA = PACMAT)
	insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
		NAMES_VALUES_HAVE_CHANGED, BEFORE_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
	select distinct A.LOGIN, SYSDATE, '3', 'IMPORT_ELEMENT_PAIE', 
	-- KEY_VALUES
	'numPac='||E.NUMPAC||'&paieZad='||E.PAIEZAD||'&periode='||E.PERIODE||'&type_traitement='||E.TYPE_TRAITEMENT||
	'&code_element='||E.CODE_ELEMENT||'&indicatif='||E.INDICATIF||'&'||'code_remplacement='||E.CODE_REMPLACEMENT,
	-- SHORT_NAME : on gère si c'est un élément de remplacement ou non
	'Suppression d''un EZ' || decode(E.CODE_REMPLACEMENT, '*', '', ' rempl.'),
	-- ACTION
	'S',
	-- NAMES_VALUES_HAVE_CHANGED 
	'numPac^paieZad^periode^type_traitement^code_element^indicatif^valeur^origine^dernier_code_ope^login_maj^date_maj^idPacMat^code_remplacement^date_effet^cle_import',
	-- BEFORE_CHANGE
	E.NUMPAC||'^'||E.PAIEZAD||'^'||E.PERIODE||'^'||E.TYPE_TRAITEMENT||'^'||E.CODE_ELEMENT||'^'||E.INDICATIF||'^'||E.VALEUR
	||'^'||E.ORIGINE||'^'||E.DERNIER_CODE_OPE||'^'||E.LOGIN_MAJ||'^'||E.DATE_MAJ||'^'||E.IDPACMAT
	||'^'||E.CODE_REMPLACEMENT||'^'||E.DATE_EFFET||'^'||E.CLE_IMPORT,
	-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
	E.NUMPAC, A.PACMAT, E.PAIEZAD, A.MATRICULE, E.DATE_EFFET
	from TGE_ELEMENTS_PAIE E, TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	where A.LOGIN = P_LOGIN
	and A.DATE_IMPORT = P_DATE_IMPORT
	and A.NUMPAC = E.NUMPAC
	and GTA.NUMPAC = E.NUMPAC
	and A.ERREURS is null
	and GTA.CODE_GTA =(select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	and nvl(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
	and A.PAIEZAD = E.PAIEZAD
	and(exists (
		select C.PAIEZAD
		from DIC_ADM_CONTRAT_SITU C
		where C.NUMPAC = A.NUMPAC
		and C.NUMPAC = E.NUMPAC
		and C.PAIEZAD = E.PAIEZAD
		and C.PACMAT = A.PACMAT
		)
	)
	and A.ORIGINE =E.ORIGINE
	and A.PERIODE = E.PERIODE
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where A.ORIGINE = CODE_ORIGINE
			and NUMPAC = E.NUMPAC
			and CODE_ORIGINE = E.ORIGINE
			and MODE_3060 != 'F'
			)
		and E.CODE_REMPLACEMENT = 'R'
		)
		or E.CODE_REMPLACEMENT = '*'
	);
	
	-- On trace l'annulation des éléments (TGE_REF_TYPES_GTA.MATRIC_GTA = PAIEZAD)
	insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
		NAMES_VALUES_HAVE_CHANGED, BEFORE_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
	select distinct A.LOGIN, SYSDATE, '3', 'IMPORT_ELEMENT_PAIE', 
	-- KEY_VALUES
	'numPac='||E.NUMPAC||'&paieZad='||E.PAIEZAD||'&periode='||E.PERIODE||'&type_traitement='||E.TYPE_TRAITEMENT||
	'&code_element='||E.CODE_ELEMENT||'&indicatif='||E.INDICATIF||'&'||'code_remplacement='||E.CODE_REMPLACEMENT,
	-- SHORT_NAME : on gère si c'est un élément de remplacement ou non
	'Suppression d''un EZ' || decode(E.CODE_REMPLACEMENT, '*', '', ' rempl.'),
	-- ACTION
	'S',
	-- NAMES_VALUES_HAVE_CHANGED 
	'numPac^paieZad^periode^type_traitement^code_element^indicatif^valeur^origine^dernier_code_ope^login_maj^date_maj^idPacMat^code_remplacement^date_effet^pacMat^cle_import',
	-- BEFORE_CHANGE
	E.NUMPAC||'^'||E.PAIEZAD||'^'||E.PERIODE||'^'||E.TYPE_TRAITEMENT||'^'||E.CODE_ELEMENT||'^'||E.INDICATIF||'^'||E.VALEUR
	||'^'||E.ORIGINE||'^'||E.DERNIER_CODE_OPE||'^'||E.LOGIN_MAJ||'^'||E.DATE_MAJ||'^'||E.IDPACMAT
	||'^'||E.CODE_REMPLACEMENT||'^'||E.DATE_EFFET||'^'||A.PACMAT||'^'||E.CLE_IMPORT,
	-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
	E.NUMPAC, A.PACMAT, E.PAIEZAD, A.MATRICULE, E.DATE_EFFET
	from TGE_ELEMENTS_PAIE E, TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	where A.LOGIN = P_LOGIN
	and A.DATE_IMPORT = P_DATE_IMPORT
	and A.NUMPAC = E.NUMPAC
	and GTA.NUMPAC = E.NUMPAC
	and A.ERREURS is null
	and GTA.CODE_GTA =(select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	and nvl(GTA.MATRIC_GTA,'PAIEZAD')='PAIEZAD'
	and A.PAIEZAD = E.PAIEZAD
	and A.ORIGINE =E.ORIGINE
	and A.PERIODE = E.PERIODE
	and (
		(exists (
	    	select 1
	        from TGE_REF_ORIGINE_GTA 
	        where A.ORIGINE = CODE_ORIGINE
	        and NUMPAC = E.NUMPAC
	        and CODE_ORIGINE = E.ORIGINE
	        and MODE_3060 != 'F'
	        )
		and E.CODE_REMPLACEMENT = 'R'
	    )
		or E.CODE_REMPLACEMENT = '*'
	);
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début annulation EZ'); 
	-- Suppression dans TGE_ELEMENTS_PAIE des cartes d'annulation (TGE_REF_TYPES_GTA.MATRIC_GTA = PACMAT)
	delete from TGE_ELEMENTS_PAIE E
	where exists(
		select 1
		from TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
		where A.LOGIN = P_LOGIN
		and A.DATE_IMPORT = P_DATE_IMPORT
		and A.NUMPAC = E.NUMPAC
		and GTA.NUMPAC = E.NUMPAC
		and A.ERREURS is null
		and GTA.CODE_GTA = (select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
		and nvl(GTA.MATRIC_GTA,'PAIEZAD') = 'PACMAT'
		and A.PAIEZAD = E.PAIEZAD
		and (exists (
			select C.PAIEZAD
			from DIC_ADM_CONTRAT_SITU C
			where C.NUMPAC = A.NUMPAC
			and C.NUMPAC = E.NUMPAC
			and C.PAIEZAD = E.PAIEZAD
			and C.PACMAT = A.PACMAT
			)
		)
		and A.ORIGINE = E.ORIGINE
		and A.PERIODE = E.PERIODE
	)
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where NUMPAC = E.NUMPAC
			and CODE_ORIGINE = E.ORIGINE
			and MODE_3060 != 'F'
			)
		and E.CODE_REMPLACEMENT = 'R'
		)
		or E.CODE_REMPLACEMENT = '*'
	);
	--Suppression dans TGE_ELEMENTS_PAIE des cartes d'annulation (TGE_REF_TYPES_GTA.MATRIC_GTA = PAIZAD)
	delete from TGE_ELEMENTS_PAIE E
	where exists (
		select 1
		from TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	 	where A.LOGIN = P_LOGIN
	 	and A.DATE_IMPORT = P_DATE_IMPORT
	 	and A.NUMPAC = E.NUMPAC
	 	and GTA.NUMPAC = E.NUMPAC
	 	and A.ERREURS is null
	 	and GTA.CODE_GTA = (select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	 	and nvl(GTA.MATRIC_GTA,'PAIEZAD') = 'PAIEZAD'
	 	and A.PAIEZAD = E.PAIEZAD
	 	and A.ORIGINE= E.ORIGINE
	 	and A.PERIODE = E.PERIODE
	)
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where NUMPAC = E.NUMPAC
			and CODE_ORIGINE = E.ORIGINE
			and MODE_3060 != 'F'
			)
		and E.CODE_REMPLACEMENT = 'R'
		)
		or E.CODE_REMPLACEMENT = '*'
	);
	
	/**
	 * DONNEES DE PAIE
	 */
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début SYS_TRC_MODIF pour annulation DV/DR');
	-- On trace l'annulation des données de paie (TGE_REF_TYPES_GTA.MATRIC_GTA = PACMAT)
	insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
		NAMES_VALUES_HAVE_CHANGED, BEFORE_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
	select distinct A.LOGIN, SYSDATE, '3', 'IMPORT_DONNEE_ELT_PAIE', 
	-- KEY_VALUES
	'numPac='||D.NUMPAC||'&paieZad='||D.PAIEZAD||'&periode='||D.PERIODE||'&type_traitement='||D.TYPE_TRAITEMENT
	||'&type_donnee='||D.TYPE_DONNEE||'&code_rubrique='||D.CODE_RUBRIQUE||'&code_caisse='||D.CODE_CAISSE||'&no_sequence='||D.NO_SEQUENCE,
	-- SHORT_NAME : on gère si c'est une DV, DR, DR Cotis. et si elle est de remplacement ou non
	'Suppression d''une ' || decode(D.TYPE_DONNEE, '1', 'DV', '2', 'DR', 'DR cotis.') || decode(D.CODE_REMPLACEMENT, '*', '', ' rempl.'),
	-- ACTION
	'S',
	-- NAMES_VALUES_HAVE_CHANGED 
	'numPac^paieZad^periode^type_traitement^type_donnee^code_rubrique^code_caisse^no_sequence^sens^code_imputation^nombre^taux^montant^pourcentage^domaine_prcte^periode_rattach_deb^periode_rattach_fin^date_deb_arret^periode_affectation^origine^dernier_code_ope^login_maj^date_maj^code_remplacement^date_effet^idPacMat^cle_import',
	-- BEFORE_CHANGE
	D.NUMPAC||'^'||D.PAIEZAD||'^'||D.PERIODE||'^'||D.TYPE_TRAITEMENT||'^'||D.TYPE_DONNEE||'^'||D.CODE_RUBRIQUE||'^'||D.CODE_CAISSE
	||'^'||D.NO_SEQUENCE||'^'||D.SENS||'^'||D.CODE_IMPUTATION||'^'||D.NOMBRE||'^'||D.TAUX||'^'||D.MONTANT||'^'||D.POURCENTAGE
	||'^'||D.DOMAINE_PRCTE||'^'||D.PERIODE_RATTACH_DEB||'^'||D.PERIODE_RATTACH_FIN||'^'||D.DATE_DEB_ARRET||'^'||D.PERIODE_AFFECTATION
	||'^'||D.ORIGINE||'^'||D.DERNIER_CODE_OPE||'^'||D.LOGIN_MAJ||'^'||D.DATE_MAJ
	||'^'||D.CODE_REMPLACEMENT||'^'||D.DATE_EFFET||'^'||D.IDPACMAT||'^'||D.CLE_IMPORT,
	-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
	D.NUMPAC, A.PACMAT, D.PAIEZAD, A.MATRICULE, D.DATE_EFFET
	from TGE_DONNEES_PAIE D, TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	where A.LOGIN = P_LOGIN
	and A.DATE_IMPORT = P_DATE_IMPORT
	and A.NUMPAC = D.NUMPAC
	and GTA.NUMPAC = D.NUMPAC
	and A.ERREURS is null
	and GTA.CODE_GTA =(select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	and nvl(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
	and A.PAIEZAD = D.PAIEZAD
	and(exists (
		select C.PAIEZAD
		from DIC_ADM_CONTRAT_SITU C
		where C.NUMPAC = A.NUMPAC
		and C.NUMPAC = D.NUMPAC
		and C.PAIEZAD = D.PAIEZAD
		and C.PACMAT = A.PACMAT
		)
	)
	and A.ORIGINE = D.ORIGINE
	and A.PERIODE = D.PERIODE
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where A.ORIGINE = CODE_ORIGINE
			and NUMPAC = D.NUMPAC
			and CODE_ORIGINE = D.ORIGINE
			and MODE_3060 != 'F'
			)
		and D.CODE_REMPLACEMENT ='R'
		)
		or D.CODE_REMPLACEMENT is null
	);
	
	-- On trace l'annulation des données de paie (TGE_REF_TYPES_GTA.MATRIC_GTA = PAIEZAD)
	insert into SYS_TRC_MODIF (LOGIN, DATEMAJ, ROLE, FUNCTIONNALITY, KEYS_VALUES, SHORT_NAME, ACTION, 
		NAMES_VALUES_HAVE_CHANGED, BEFORE_CHANGE, NUMPAC, PACMAT, PAIEZAD, MATRIC, DATE_EFFET)
	select distinct A.LOGIN, SYSDATE, '3', 'IMPORT_DONNEE_ELT_PAIE', 
	-- KEY_VALUES
	'numPac='||D.NUMPAC||'&paieZad='||D.PAIEZAD||'&periode='||D.PERIODE||'&type_traitement='||D.TYPE_TRAITEMENT||'&type_donnee='||D.TYPE_DONNEE||'&code_rubrique='||D.CODE_RUBRIQUE||'&code_caisse='||D.CODE_CAISSE||'&no_sequence='||D.NO_SEQUENCE,
	-- SHORT_NAME : on gère si c'est une DV, DR, DR Cotis. et si elle est de remplacement ou non
	'Suppression d''un ' || decode(D.TYPE_DONNEE, '1', 'DV', '2', 'DR', 'DR cotis.') ||  decode(D.CODE_REMPLACEMENT, '*', '', ' rempl.'),
	-- ACTION
	'S',
	-- NAMES_VALUES_HAVE_CHANGED 
	'numPac^paieZad^periode^type_traitement^type_donnee^code_rubrique^code_caisse^no_sequence^sens^code_imputation^nombre^taux^montant^pourcentage^domaine_prcte^periode_rattach_deb^periode_rattach_fin^date_deb_arret^periode_affectation^origine^dernier_code_ope^login_maj^date_maj^code_remplacement^date_effet^idPacMat^cle_import',
	-- BEFORE_CHANGE
	D.NUMPAC||'^'||D.PAIEZAD||'^'||D.PERIODE||'^'||D.TYPE_TRAITEMENT||'^'||D.TYPE_DONNEE||'^'||D.CODE_RUBRIQUE||'^'||D.CODE_CAISSE
	||'^'||D.NO_SEQUENCE||'^'||D.SENS||'^'||D.CODE_IMPUTATION||'^'||D.NOMBRE||'^'||D.TAUX||'^'||D.MONTANT||'^'||D.POURCENTAGE
	||'^'||D.DOMAINE_PRCTE||'^'||D.PERIODE_RATTACH_DEB||'^'||D.PERIODE_RATTACH_FIN||'^'||D.DATE_DEB_ARRET||'^'||D.PERIODE_AFFECTATION
	||'^'||D.ORIGINE||'^'||D.DERNIER_CODE_OPE||'^'||D.LOGIN_MAJ||'^'||D.DATE_MAJ
	||'^'||D.CODE_REMPLACEMENT||'^'||D.DATE_EFFET||'^'||D.IDPACMAT||'^'||D.CLE_IMPORT,
	-- NUMPAC / PACMAT / PAIEZAD / MATRIC / DATE_EFFET
	D.NUMPAC, A.PACMAT, D.PAIEZAD, A.MATRICULE, D.DATE_EFFET
	from TGE_DONNEES_PAIE D, TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	where A.LOGIN = P_LOGIN
	and A.DATE_IMPORT = P_DATE_IMPORT
	and A.NUMPAC = D.NUMPAC
	and GTA.NUMPAC = D.NUMPAC
	and A.ERREURS is null
	and GTA.CODE_GTA =(select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	and nvl(GTA.MATRIC_GTA,'PAIEZAD')='PAIEZAD'
	and A.PAIEZAD = D.PAIEZAD
	and A.ORIGINE =D.ORIGINE
	and A.PERIODE = D.PERIODE
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where A.ORIGINE = CODE_ORIGINE
			and NUMPAC = D.NUMPAC
			and CODE_ORIGINE = D.ORIGINE
			and MODE_3060 != 'F'
			)
		and D.CODE_REMPLACEMENT ='R'
		)
		or D.CODE_REMPLACEMENT is null
	);
	TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Début SYS_TRC_MODIF pour annulation DV/DR');
	-- Suppression dans TGE_DONNEES_PAIE des cartes d'annulation (TGE_REF_TYPES_GTA.MATRIC_GTA = PACMAT)
	delete from TGE_DONNEES_PAIE D
	where exists(
		select 1
		from TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
		where A.LOGIN = P_LOGIN
		and A.DATE_IMPORT = P_DATE_IMPORT
		and A.NUMPAC = D.NUMPAC
		and GTA.NUMPAC = D.NUMPAC
		and A.ERREURS is null
		and GTA.CODE_GTA = (select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
		and nvl(GTA.MATRIC_GTA,'PAIEZAD') = 'PACMAT'
		and A.PAIEZAD = D.PAIEZAD
		and (exists (
			select C.PAIEZAD
			from DIC_ADM_CONTRAT_SITU C
			where C.NUMPAC = A.NUMPAC
			and C.NUMPAC = D.NUMPAC
			and C.PAIEZAD = D.PAIEZAD
			and C.PACMAT = A.PACMAT
			)
		)
		and A.ORIGINE = D.ORIGINE
		and A.PERIODE = D.PERIODE
	)
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where NUMPAC = D.NUMPAC
			and CODE_ORIGINE = D.ORIGINE
			and MODE_3060 != 'F'
			)
		and D.CODE_REMPLACEMENT = 'R'
		)
		or D.CODE_REMPLACEMENT is null
	);
	--Suppression dans TGE_DONNEES_PAIE des cartes d'annulation (TGE_REF_TYPES_GTA.MATRIC_GTA = PAIZAD)
	delete from TGE_DONNEES_PAIE D
	where exists (
		select 1
		from TGE_IMPORT_ANNULATION A, TGE_REF_TYPES_GTA GTA
	 	where A.LOGIN = P_LOGIN
	 	and A.DATE_IMPORT = P_DATE_IMPORT
	 	and A.NUMPAC = D.NUMPAC
	 	and GTA.NUMPAC = D.NUMPAC
	 	and A.ERREURS is null
	 	and GTA.CODE_GTA = (select CODE_GTA from TGE_REF_ORIGINE_GTA where NUMPAC = A.NUMPAC and CODE_ORIGINE = A.ORIGINE)
	 	and nvl(GTA.MATRIC_GTA,'PAIEZAD') = 'PAIEZAD'
	 	and A.PAIEZAD = D.PAIEZAD
	 	and A.ORIGINE= D.ORIGINE
	 	and A.PERIODE = D.PERIODE
	)
	and (
		(exists (
			select 1
			from TGE_REF_ORIGINE_GTA 
			where NUMPAC = D.NUMPAC
			and CODE_ORIGINE = D.ORIGINE
			and MODE_3060 != 'F'
			)
		and D.CODE_REMPLACEMENT = 'R'
		)
		or D.CODE_REMPLACEMENT is null
	);
	 
 END TGE_IMPORT_CARTE_ANNULATION;
##
TAG_CHARSET=@€éèç
##
ORG_CM_ENTITE_OPEN_TO_NIV
=SQL=
create or replace
TRIGGER "ORG_CM_ENTITE_OPEN_TO_NIV" AFTER INSERT OR UPDATE
ON STD_STRUC_ENTITE_OPEN FOR EACH ROW
declare 
-- trigger qui modifie dans la table de niveau appropriée les dates d'ouverture et de fermeture
derNiv       NUMBER        :=0 ;
codts  NUMBER        :=0 ;
LE$trop_long exception ;
pragma exception_init( LE$trop_long, -12899 ) ;
BEGIN
-- recuperation du niveau
   begin 
    select Sn.niveau,Sn.CODTS into derNiv,codts from  std_struc_entite se, std_struc_niv sn 
    where se.type_entite=sn.type_entite 
     and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin 
       and se.code_entite=:new.CODE_ENTITE;
      --dbms_output.put_line('derNiv : '||derNiv);
      --FIXME utiliser la procédure trace_dbms_output()
     exception
     when no_data_found then
     --dbms_output.put_line('ici'||derNiv);
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
     when others then
     --dbms_output.put_line('pas de niveau');
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
    end;
      --dbms_output.put_line('autre begin');
      --FIXME utiliser la procédure trace_dbms_output()
   BEGIN
         if derNiv =1 then 
  --mise à jour dans NIV1
           --dbms_output.put_line('avant update niv1 : '||:new.DATE_OUV);
           --FIXME utiliser la procédure trace_dbms_output()
           update NIV1 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV1=:new.CODE_ENTITE ;
          end if;
           if derNiv =2 then 
  --mise à jour dans NIV2
            update NIV2 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV2=:new.CODE_ENTITE ;
         end if;
  --mise à jour dans NIV3
         if derNiv =3 then 
            update NIV3 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV3=:new.CODE_ENTITE ;
       end if;
         --insertion dans NIV4
    if derNiv =4 then 
            update NIV4 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV4=:new.CODE_ENTITE ;
        end if;
  --mise à jour dans NIV5
    if derNiv =5 then 
            update NIV5 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV5=:new.CODE_ENTITE ;
      end if;
  --mise à jour dans NIV6
           if derNiv =6 then 
            update NIV6 set DATE_OUV=:new.DATE_OUV,DATE_FERM=:new.DATE_FERM where CODTS=codts and CODNIV6=:new.CODE_ENTITE ;
     end if;
      exception
when LE$trop_long then
  --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
  --FIXME utiliser la procédure trace_dbms_output()
  NULL;
  When OTHERS then
   --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
   --FIXME utiliser la procédure trace_dbms_output()
   null;
end ;
END;
##
ORG_CM_ENTITE_OPEN_TO_NIV
=SQL=
DROP TRIGGER ORG_CM_ENTITE_OPEN_TO_NIV
##
TAG_CHARSET=@€éèç
##
ORG_C_ARBRE_TO_NIV
=SQL=
create or replace
TRIGGER "ORG_C_ARBRE_TO_NIV" BEFORE INSERT 
ON STD_STRUC_ARBRE FOR EACH ROW
declare 
-- trigger qui créer dans la table de niveau et la table adresse appropriée l'occurrence correspondante à une insertion dans STD_STRUC_ARBRE
  dateouv VARCHAR2(8) := '';
  dateferm VARCHAR2(8) := '';
  lib VARCHAR2(255) := '';
  derniv NUMBER := 0;
  codniv1 VARCHAR2(10) := '';
  codniv2 VARCHAR2(10) := '';
  codniv3 VARCHAR2(10) := '';
  codniv4 VARCHAR2(10) := '';
  idAdr VARCHAR2(25) := '';
  sirenAdr VARCHAR2(14) := '';
  nicAdr VARCHAR2(5) := '';
  sigleAdr VARCHAR2(20) := '';
  comAdr VARCHAR2(50) := '';
  numvoiAdr VARCHAR2(4) := '';
  bisterAdr VARCHAR2(1) := '';
  typvoiAdr VARCHAR2(3) := '';
  nomvoiAdr VARCHAR2(35) := '';
  cinseeAdr VARCHAR2(6) := '';
  bourgAdr VARCHAR2(30) := '';
  copostAdr VARCHAR2(5) := '';
  budistAdr VARCHAR2(30) := '';
  noteleAdr VARCHAR2(20) := '';
  nofaxAdr VARCHAR2(20) := '';
  emailAdr VARCHAR2(50) := '';
  copaysAdr VARCHAR2(3) := '';
  typstrAdr VARCHAR2(4) := '';
  table_mutante EXCEPTION;
  pragma exception_init(table_mutante,   -4091);
  le$trop_long EXCEPTION;
  pragma exception_init(le$trop_long,   -12899);
BEGIN
-- si l'occurrence de STD_STRUC_ARBRE est à la date du jour on va tenter la création dans une table de niveau
  if to_char(SYSDATE,'yyyymmdd') between :new.date_eff and :new.date_fin then
-- recuperation du niveau
    begin 
      select Sn.niveau,se.id_adresse,se.SIREN,se.NIC into derNiv,idAdr,sirenAdr,nicAdr from  std_struc_entite se, std_struc_niv sn
      where sn.codts=:new.CODTS and se.type_entite=sn.type_entite and se.code_entite=:new.CODE_ENTITE
      and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
      and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin ;
      --dbms_output.put_line('derNiv : '||derNiv);
      --dbms_output.put_line('adresse id : '||idAdr);
      --FIXME utiliser la procédure trace_dbms_output()
    exception
     when no_data_found then
       --dbms_output.put_line('pas de donnée trouvée');
       --FIXME utiliser la procédure trace_dbms_output()
       NULL;
     when others then
       --dbms_output.put_line('pas de niveau'||derNiv);
       --FIXME utiliser la procédure trace_dbms_output()
       NULL;
    end;
    begin 
      select date_ouv,date_ferm into dateouv,dateferm from STD_STRUC_ENTITE_OPEN WHERE CODE_ENTITE=:new.CODE_ENTITE ;
    exception
     when no_data_found then
      --dbms_output.put_line('Date ouv : '||dateouv||'Date ferm : '||dateferm);
      --FIXME utiliser la procédure trace_dbms_output()
      NULL;
    end;
    begin 
      select libelle into lib from STD_STRUC_ENTITE WHERE CODE_ENTITE=:new.CODE_ENTITE AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN  ;
      --dbms_output.put_line('libelle : '||lib);
      --FIXME utiliser la procédure trace_dbms_output()
    exception
      when no_data_found then
        --dbms_output.put_line('pas de donnée trouvée libellé : '||lib);
        --FIXME utiliser la procédure trace_dbms_output()
        NULL;
      when others then
        --dbms_output.put_line('problème recherche libellé : '||lib);
        --FIXME utiliser la procédure trace_dbms_output()
        NULL;
    end;
    begin 
       --dbms_output.put_line('Recherche des informations de l''adresse : ');
       --FIXME utiliser la procédure trace_dbms_output()
       if idAdr is not null then
        select SIGLE,COMADR,NUMVOI,BISTER,TYPVOI,NOMVOI,CINSEE,BOURG,COPOST,BUDIST,COPAYS,NOTELE,NOFAX,EMAIL into  sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr , cinseeAdr, bourgAdr,copostAdr, budistAdr,copaysAdr,  noteleAdr, nofaxAdr ,  emailAdr    from  STD_ADRESSE WHERE ID_ADRESSE=idAdr;
       --dbms_output.put_line('identifiant adresse : '||idAdr||' comadr : '||COMADR);
       --FIXME utiliser la procédure trace_dbms_output()
       end if;
    exception
       when no_data_found then
         --dbms_output.put_line('pas de donnée trouvée adresse'||idAdr);
         --FIXME utiliser la procédure trace_dbms_output()
         NULL;
       when others then
         --dbms_output.put_line('problème recherche adresse : '||idAdr);
         --FIXME utiliser la procédure trace_dbms_output()
         NULL;
       end;
    BEGIN
         if derNiv =1 then 
  --insertion dans NIV1
            if lib is not null then
             insert into NIV1 (CODTS,CODNIV1,LIBNIV1,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV1 (CODTS,CODNIV1,LIBNIV1,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
              if ( idAdr is not null or sirenAdr is not null or nicAdr is not null)   then
                 --dbms_output.put_line('Création dans la table adresses : '||idAdr);
                 --FIXME utiliser la procédure trace_dbms_output()
               insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,:new.CODE_ENTITE,'','','','','',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;

         end if;
        if derNiv =2 then 
  --insertion dans NIV2
            if lib is not null then
             insert into NIV2 (CODTS,CODNIV1,CODNIV2,LIBNIV2,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,:new.CODE_ENT_MERE,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV2 (CODTS,CODNIV1,CODNIV2,LIBNIV2,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,:new.CODE_ENT_MERE,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
             if ( idAdr is not null or sirenAdr is not null or nicAdr is not null)   then
               insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,:new.CODE_ENT_MERE,:new.CODE_ENTITE,'','','','',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;
         end if;
   --insertion dans NIV3
         if derNiv =3 then
         BEGIN 
           select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= :new.CODE_ENT_MERE AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
          EXCEPTION
          WHEN TABLE_MUTANTE THEN 
            --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;    
          END ;
             if lib is not null then
             insert into NIV3 (CODTS,CODNIV1,CODNIV2,CODNIV3,LIBNIV3,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,:new.CODE_ENT_MERE,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV3 (CODTS,CODNIV1,CODNIV2,CODNIV3,LIBNIV3,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,:new.CODE_ENT_MERE,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
              if ( idAdr is not null or sirenAdr is not null or nicAdr is not null)   then
              insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,codniv1,:new.CODE_ENT_MERE,:new.CODE_ENTITE,'','','',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;
        end if;
         --insertion dans NIV4
    if derNiv =4 then 
          begin
            select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= :new.CODE_ENT_MERE AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
          EXCEPTION
          WHEN TABLE_MUTANTE THEN 
            --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;    
          END ;
             --dbms_output.put_line('codniv1 : '||codniv1);
             --dbms_output.put_line('codniv2 : '||codniv2);
             --FIXME utiliser la procédure trace_dbms_output()
              if lib is not null then
             insert into NIV4 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,LIBNIV4,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,:new.CODE_ENT_MERE,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV4 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,LIBNIV4,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,:new.CODE_ENT_MERE,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
              if ( idAdr is not null or sirenAdr is not null or nicAdr is not null)   then
              insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,codniv1,codniv2,:new.CODE_ENT_MERE,:new.CODE_ENTITE,'','',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;
        end if;
         --insertion dans NIV5
    if derNiv =5 then
      begin
            select CODE_ENT_MERE into codniv3 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= :new.CODE_ENT_MERE AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            --dbms_output.put_line('codniv1 : '||codniv1);
            --dbms_output.put_line('codniv2 : '||codniv2);
            --dbms_output.put_line('codniv3 : '||codniv3);
            --FIXME utiliser la procédure trace_dbms_output()
          EXCEPTION
          WHEN TABLE_MUTANTE THEN 
            --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;    
          END ;
             if lib is not null then
             insert into NIV5 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,LIBNIV5,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,codniv3,:new.CODE_ENT_MERE,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV5 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,LIBNIV5,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,codniv3,:new.CODE_ENT_MERE,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
             if ( idAdr is not null or sirenAdr is not null or nicAdr is not null)   then
               insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,codniv1,codniv2,codniv3,:new.CODE_ENT_MERE,:new.CODE_ENTITE,'',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;
        end if;
         --insertion dans NIV6
           if derNiv =6 then 
           begin
           select CODE_ENT_MERE into codniv4 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= :new.CODE_ENT_MERE AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv3 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv4 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=:new.CODTS and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
            --dbms_output.put_line('codniv1 : '||codniv1);
            --dbms_output.put_line('codniv2 : '||codniv2);
            --dbms_output.put_line('codniv3 : '||codniv3);
            --dbms_output.put_line('codniv4 : '||codniv4);
            --FIXME utiliser la procédure trace_dbms_output()
          EXCEPTION
          WHEN TABLE_MUTANTE THEN 
            --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;    
          END ;
           if lib is not null then
             insert into NIV6 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,LIBNIV6,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,codniv3,codniv4,:new.CODE_ENT_MERE,:new.CODE_ENTITE,SUBSTR(lib,0,100),dateouv,dateferm,0);
            else
            insert into NIV6 (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,LIBNIV6,DATE_OUV,DATE_FERM,EST_PREV ) values (:new.CODTS,codniv1,codniv2,codniv3,codniv4,:new.CODE_ENT_MERE,:new.CODE_ENTITE,null,dateouv,dateferm,0);
            end if;
             if (idAdr is not null or sirenAdr is not null or nicAdr is not null ) then
              insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (:new.CODTS,codniv1,codniv2,codniv3,codniv4,:new.CODE_ENT_MERE,:new.CODE_ENTITE,sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,sirenAdr,nicAdr,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
            end if;
       end if;
    exception
    when LE$trop_long then
      --dbms_output.put_line('Une des colonnes de NIV1 dans la liste n''a pas la taille attendue : CODNIV1 - '||:new.CODE_ENTITE||' DATE_OUV - '||dateouv||' DATE_FERM - '||dateferm);
      --FIXME utiliser la procédure trace_dbms_output()
      NULL;
    When OTHERS then
      --dbms_output.put_line('Problème sur requête de recherche de niveau');
      --dbms_output.put_line( 'Code    erreur : ' || to_char( SQLCODE )) ;
      --dbms_output.put_line( 'libellé erreur : ' || to_char( SQLERRM )) ; 
      null;
     end ;
  end if;
END;
##
ORG_C_ARBRE_TO_NIV
=SQL=
DROP TRIGGER ORG_C_ARBRE_TO_NIV
##
TAG_CHARSET=@€éèç
##
ORG_M_ADRESSE_TO_ADR
=SQL=
create or replace
TRIGGER "ORG_M_ADRESSE_TO_ADR" AFTER UPDATE
ON STD_ADRESSE FOR EACH ROW
declare 
-- trigger qui modifie dans la table adresse les infos si besoin
  existeValeur  NUMBER :=0;
    codniv1 VARCHAR2(10) := '';
  codniv2 VARCHAR2(10) := '';
  codniv3 VARCHAR2(10) := '';
  codniv4 VARCHAR2(10) := '';
 codniv5 VARCHAR2(10) := '';

 TYPE LIG_ADRESSE IS RECORD
 ( derNiv NUMBER ,
      codts NUMBER ,
      entite  VARCHAR2(25) ,
      siren VARCHAR2(14) ,
      nic  VARCHAR2(5)
     );
    rec_adr LIG_ADRESSE ;
   Cursor C_Adr is select SN.NIVEAU ,SN.CODTS,SE.CODE_ENTITE,SE.SIREN,SE.NIC  from  std_struc_entite se, std_struc_niv sn ,STD_STRUC_ARBRE SA
    where sn.codts=SA.CODTS and se.type_entite=sn.type_entite and se.code_entite=SA.CODE_ENTITE
     and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between SA.date_eff and SA.date_fin 
    and se.ID_ADRESSE=:new.ID_ADRESSE;
 Begin
  --dbms_output.put_line('début curseur ');
  --FIXME utiliser la procédure trace_dbms_output() 
    Open C_Adr ;
    Loop
   Fetch C_Adr into rec_adr ;
     Exit when C_Adr%NOTFOUND ;
        --dbms_output.put_line('enregistrement ');
        --FIXME utiliser la procédure trace_dbms_output() 
              begin 
               --dbms_output.put_line('Avant mise à jour adresse : '||:new.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
           if rec_adr.derNiv=1 then 
               --update ou insertion de l'adresse pour niveau 1
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV1=rec_adr.entite and (codniv2 ='' or codniv2 is null) ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,rec_adr.entite,'','','','','',:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV1=rec_adr.entite and (codniv2 ='' or codniv2 is null) ;            
                  end if;
          end if;
          if rec_adr.derNiv=2 then 
               --update ou insertion de l'adresse pour niveau 2
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV2=rec_adr.entite and (codniv3 ='' or codniv3 is null) ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     NULL;
                      BEGIN 
                         select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= rec_adr.entite AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                      EXCEPTION
                      WHEN OTHERS THEN 
                          --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
                          --FIXME utiliser la procédure trace_dbms_output()
                          NULL;    
                  END ;
                  insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,codniv1,rec_adr.entite,'','','','',:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV2=rec_adr.entite and (codniv3 ='' or codniv3 is null) ;            
                  end if;
          end if;
          if rec_adr.derNiv=3 then 
               --update ou insertion de l'adresse pour niveau 2
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV3=rec_adr.entite and (codniv4 ='' or codniv4 is null) ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     NULL;
                      BEGIN 
                         select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                     EXCEPTION
                      WHEN OTHERS THEN 
                          --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
                          --FIXME utiliser la procédure trace_dbms_output()
                          NULL;    
                  END ;
                  insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,codniv1,codniv2,rec_adr.entite,'','','',:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV3=rec_adr.entite and (codniv4 ='' or codniv4 is null) ;            
                  end if;
          end if;
          if rec_adr.derNiv=4 then 
               --update ou insertion de l'adresse pour niveau 2
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV4=rec_adr.entite and (codniv5 ='' or codniv5 is null) ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     NULL;
                      BEGIN 
                         select CODE_ENT_MERE into codniv3 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= rec_adr.entite AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                     EXCEPTION
                      WHEN OTHERS THEN 
                          --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
                          --FIXME utiliser la procédure trace_dbms_output()
                          NULL;
                  END ;
                  insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,codniv1,codniv2,codniv3,rec_adr.entite,'','',:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV4=rec_adr.entite and (codniv5 ='' or codniv5 is null) ;            
                  end if;
          end if;
         if rec_adr.derNiv=5 then 
               --update ou insertion de l'adresse pour niveau 2
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV5=rec_adr.entite and (codniv6 ='' or codniv6 is null) ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     NULL;
                      BEGIN 
                         select CODE_ENT_MERE into codniv4 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= rec_adr.entite AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv3 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv4 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                     EXCEPTION
                      WHEN OTHERS THEN 
                          --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
                          --FIXME utiliser la procédure trace_dbms_output()
                          NULL;    
                  END ;
                  insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,codniv1,codniv2,codniv3,codniv4,rec_adr.entite,'',:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV5=rec_adr.entite and (codniv6 ='' or codniv6 is null) ;            
                  end if;
          end if;
         if rec_adr.derNiv=6 then 
               --update ou insertion de l'adresse pour niveau 2
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV6=rec_adr.entite  ;
                exception
                   when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     NULL;
                      BEGIN 
                         select CODE_ENT_MERE into codniv5 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= rec_adr.entite AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv4 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv5 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv3 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv4 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv2 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv3 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                         select CODE_ENT_MERE into codniv1 from STD_STRUC_ARBRE where CODTS=rec_adr.codts and CODE_ENTITE= codniv2 AND  to_char(SYSDATE,'yyyymmdd') between DATE_EFF and DATE_FIN ;
                     EXCEPTION
                      WHEN OTHERS THEN 
                          --DBMS_OUTPUT.PUT_LINE('Fausse alerte');
                          --FIXME utiliser la procédure trace_dbms_output()
                          NULL;    
                  END ;
                  insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (rec_adr.codts,codniv1,codniv2,codniv3,codniv4,codniv5,rec_adr.entite,:new.SIGLE,:new.COMADR,:new.NUMVOI,:new.BISTER,:new.TYPVOI,:new.NOMVOI,:new.CINSEE,:new.BOURG,:new.COPOST,:new.BUDIST,:new.NOTELE,rec_adr.siren,rec_adr.nic,:new.NOFAX,:new.EMAIL,:new.COPAYS,'');            
                end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                    --dbms_output.put_line('Update adresse ');
                    --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=:new.SIGLE,CPLADR=:new.COMADR,NUMV=:new.NUMVOI,BTQ=:new.BISTER,TYPV=:new.TYPVOI,NOMV=:new.NOMVOI,INSEE=:new.CINSEE,COM=:new.BOURG,CP=:new.COPOST,DISTRI=:new.BUDIST,TEL=:new.NOTELE,SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX=:new.NOFAX,EMAIL=:new.EMAIL,CODP=:new.COPAYS,TYPSTR=''  where CODTS=rec_adr.codts and CODNIV6=rec_adr.entite  ;            
                  end if;
          end if;
          exception
  When OTHERS then
    --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
    --dbms_output.put_line( 'Code    erreur : ' || to_char( SQLCODE )) ;
    --dbms_output.put_line( 'libellé erreur : ' || to_char( SQLERRM )) ; 
    --dbms_output.put_line('problème de mise à jour de l''adresse');
    --FIXME utiliser la procédure trace_dbms_output()
    NULL;
            end;
       End loop ;
         --dbms_output.put_line('fin curseur ');
         --FIXME utiliser la procédure trace_dbms_output() 
  End ;
##
ORG_M_ADRESSE_TO_ADR
=SQL=
DROP TRIGGER ORG_M_ADRESSE_TO_ADR
##
TAG_CHARSET=@€éèç
##
ORG_M_ENTITE_TO_NIV
=SQL=
create or replace
TRIGGER "ORG_M_ENTITE_TO_NIV" AFTER UPDATE
ON STD_STRUC_ENTITE FOR EACH ROW
declare 
-- trigger qui modifie dans la table de niveau appropriée le libellé
derNiv NUMBER        :=0 ;
codts  NUMBER        :=0 ;
  sigleAdr VARCHAR2(20) := '';
  comAdr VARCHAR2(50) := '';
  numvoiAdr VARCHAR2(4) := '';
  bisterAdr VARCHAR2(1) := '';
  typvoiAdr VARCHAR2(3) := '';
  nomvoiAdr VARCHAR2(35) := '';
  cinseeAdr VARCHAR2(6) := '';
  bourgAdr VARCHAR2(30) := '';
  copostAdr VARCHAR2(5) := '';
  budistAdr VARCHAR2(30) := '';
  noteleAdr VARCHAR2(20) := '';
  nofaxAdr VARCHAR2(20) := '';
  emailAdr VARCHAR2(50) := '';
  copaysAdr VARCHAR2(3) := '';
  typstrAdr VARCHAR2(4) := '';
  existeValeur  NUMBER :=0;
LE$trop_long exception ;
pragma exception_init( LE$trop_long, -12899 ) ;
BEGIN
-- si l'occurrence de STD_STRUC_ENTITE est à la date du jour on va tenter la mise à jour dans une table de niveau
 if to_char(SYSDATE,'yyyymmdd') between :new.date_eff and :new.date_fin then
-- recuperation du niveau
   begin 
    select Sn.niveau,SA.CODTS into derNiv,codts from  std_struc_niv sn ,STD_STRUC_ARBRE SA
    where sn.codts=SA.CODTS and sn.type_entite=:new.TYPE_ENTITE and SA.CODE_ENTITE=:new.CODE_ENTITE
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between SA.date_eff and SA.date_fin ;
      --dbms_output.put_line('derNiv : '||derNiv);
      --FIXME utiliser la procédure trace_dbms_output()
     exception
     when no_data_found then
     --dbms_output.put_line('ici'||derNiv);
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
     when others then
     --dbms_output.put_line('pas de niveau');
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
    end;
  -- recuperation infos adresse
       begin 
       if :new.ID_ADRESSE !='' then
        select SIGLE,COMADR,NUMVOI,BISTER,TYPVOI,NOMVOI,CINSEE,BOURG,COPOST,BUDIST,COPAYS,NOTELE,NOFAX,EMAIL into  sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr , cinseeAdr, bourgAdr,copostAdr, budistAdr,copaysAdr,  noteleAdr, nofaxAdr ,  emailAdr    from  STD_ADRESSE WHERE ID_ADRESSE=:new.ID_ADRESSE;
      --dbms_output.put_line('identifiant adresse : '||:new.ID_ADRESSE);
      --FIXME utiliser la procédure trace_dbms_output()
       end if;
    exception
       when no_data_found then
       --dbms_output.put_line('pas de donnée trouvée adresse'||:new.ID_ADRESSE);
       --FIXME utiliser la procédure trace_dbms_output()
       NULL;
       when others then
        --dbms_output.put_line('problème recherche adresse : '||:new.ID_ADRESSE);
        --FIXME utiliser la procédure trace_dbms_output()
        NULL;
    end;
      --dbms_output.put_line('autre begin');
      --FIXME utiliser la procédure trace_dbms_output()
   BEGIN
         if derNiv =1 then 
  --mise à jour dans NIV1
           --dbms_output.put_line('avant update niv1 : '||:new.LIBELLE);
           --FIXME utiliser la procédure trace_dbms_output()
               if :new.LIBELLE is not null then
                 update NIV1 set LIBNIV1=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV1=:new.CODE_ENTITE ;
                    else
                update NIV1 set LIBNIV1='' where CODTS=codts and CODNIV1=:new.CODE_ENTITE ;
             end if;
               begin 
               --dbms_output.put_line('Avant mise à jour adresse : '||:new.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
               if ( :new.ID_ADRESSE is not null or :new.SIREN is not null or :new.NIC is not null)   then
              --update ou insertion
                begin
                    select CODTS into existeValeur from std_adrstr where CODTS=codts and CODNIV1=:new.CODE_ENTITE and (codniv2 ='' or codniv2 is null) ;
                                     exception
             when no_data_found then
                     --dbms_output.put_line('Insere adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                     insert into STD_ADRSTR (CODTS,CODNIV1,CODNIV2,CODNIV3,CODNIV4,CODNIV5,CODNIV6,SIGLE,CPLADR,NUMV,BTQ,TYPV,NOMV,INSEE,COM,CP,DISTRI,TEL,SIREN,NIC,FAX,EMAIL,CODP,TYPSTR) values (codts,:new.CODE_ENTITE,'','','','','',sigleAdr,comAdr,numvoiAdr,bisterAdr,typvoiAdr,nomvoiAdr,cinseeAdr,bourgAdr,copostAdr,budistAdr,noteleAdr,:new.SIREN,:new.NIC,nofaxAdr,emailAdr,copaysAdr,typstrAdr);            
             end;
                --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
                --FIXME utiliser la procédure trace_dbms_output()
                 if ( existeValeur is not null and existeValeur>0) then
                     --dbms_output.put_line('Update adresse ');
                     --FIXME utiliser la procédure trace_dbms_output()
                    update STD_ADRSTR set SIGLE=sigleAdr,CPLADR=comAdr,NUMV=numvoiAdr,BTQ=bisterAdr,TYPV=typvoiAdr,NOMV=nomvoiAdr,INSEE=cinseeAdr,COM=bourgAdr,CP=copostAdr,DISTRI=budistAdr,TEL=noteleAdr,SIREN=:new.SIREN,NIC=:new.NIC,FAX=nofaxAdr,EMAIL=emailAdr,CODP=copaysAdr,TYPSTR=typstrAdr  where CODTS=codts and CODNIV1=:new.CODE_ENTITE and (codniv2 ='' or codniv2 is null) ;            
                  end if;
             else
               --dbms_output.put_line('Delete adresse ');
               --FIXME utiliser la procédure trace_dbms_output()
              delete from STD_ADRSTR where CODTS=codts and CODNIV1=:new.CODE_ENTITE and (codniv2 ='' or codniv2 is null) ;
            end if;
               exception
  When OTHERS then
    --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
    --dbms_output.put_line( 'Code    erreur : ' || to_char( SQLCODE )) ;
    --dbms_output.put_line( 'libellé erreur : ' || to_char( SQLERRM )) ; 
    --dbms_output.put_line('problème de mise à jour de l''adresse');
    --FIXME utiliser la procédure trace_dbms_output()
    NULL;
            end;
           end if;
           if derNiv =2 then 
  --mise à jour dans NIV2
               if :new.LIBELLE is not null then
                 update NIV2 set LIBNIV2=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV2=:new.CODE_ENTITE ;
                    else
                update NIV2 set LIBNIV2='' where CODTS=codts and CODNIV2=:new.CODE_ENTITE ;
             end if;
         end if;
  --mise à jour dans NIV3
         if derNiv =3 then 
               if :new.LIBELLE is not null then
                 update NIV3 set LIBNIV3=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV3=:new.CODE_ENTITE ;
                    else
                update NIV3 set LIBNIV3='' where CODTS=codts and CODNIV3=:new.CODE_ENTITE ;
             end if;
      end if;
         --insertion dans NIV4
    if derNiv =4 then 
               if :new.LIBELLE is not null then
                 update NIV4 set LIBNIV4=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV4=:new.CODE_ENTITE ;
                    else
                update NIV4 set LIBNIV4='' where CODTS=codts and CODNIV4=:new.CODE_ENTITE ;
             end if;
       end if;
  --mise à jour dans NIV5
    if derNiv =5 then 
               if :new.LIBELLE is not null then
                 update NIV5 set LIBNIV5=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV5=:new.CODE_ENTITE ;
                    else
                update NIV5 set LIBNIV5='' where CODTS=codts and CODNIV5=:new.CODE_ENTITE ;
             end if;
     end if;
  --mise à jour dans NIV6
           if derNiv =6 then 
              if :new.LIBELLE is not null then
                 update NIV6 set LIBNIV6=SUBSTR(:new.LIBELLE,0,100) where CODTS=codts and CODNIV6=:new.CODE_ENTITE ;
                    else
                update NIV6 set LIBNIV6='' where CODTS=codts and CODNIV6=:new.CODE_ENTITE ;
             end if;
     end if;
      exception
when LE$trop_long then
  --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
  --FIXME utiliser la procédure trace_dbms_output()
  NULL;
  When OTHERS then
   --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
   --FIXME utiliser la procédure trace_dbms_output()
   null;
end ;
end if;
END;
##
ORG_M_ENTITE_TO_NIV
=SQL=
DROP TRIGGER ORG_M_ENTITE_TO_NIV
##
TAG_CHARSET=@€éèç
##
ORG_S_ADRESSE_TO_ADR
=SQL=
create or replace
TRIGGER "ORG_S_ADRESSE_TO_ADR" AFTER DELETE
ON STD_ADRESSE FOR EACH ROW
declare 
-- trigger qui supprime dans la table adresse ou mets à blanc les infos si besoin
  existeValeur  NUMBER :=0;
 TYPE LIG_ADRESSE IS RECORD
 ( derNiv NUMBER ,
      codts NUMBER ,
      entite  VARCHAR2(25) ,
      siren VARCHAR2(14) ,
      nic  VARCHAR2(5)
     );
    rec_adr LIG_ADRESSE ;
   Cursor C_Adr is select SN.NIVEAU ,SN.CODTS,SE.CODE_ENTITE,SE.SIREN,SE.NIC  from  std_struc_entite se, std_struc_niv sn ,STD_STRUC_ARBRE SA
    where sn.codts=SA.CODTS and se.type_entite=sn.type_entite and se.code_entite=SA.CODE_ENTITE
     and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between SA.date_eff and SA.date_fin 
    and se.ID_ADRESSE=:old.ID_ADRESSE;
 Begin
  --dbms_output.put_line('début curseur ');
  --FIXME utiliser la procédure trace_dbms_output() 
    Open C_Adr ;
    Loop
   Fetch C_Adr into rec_adr ;
     Exit when C_Adr%NOTFOUND ;
       begin 
        --dbms_output.put_line('enregistrement ');
        --FIXME utiliser la procédure trace_dbms_output() 
          if rec_adr.derNiv=1 then 
        --mise à jour dans NIV1
               --dbms_output.put_line('Avant mise à jour adresse : '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV1=rec_adr.entite and (codniv2 ='' or codniv2 is null) ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV1=rec_adr.entite and (codniv2 ='' or codniv2 is null) ;            
                  end if;
              end if;
          if rec_adr.derNiv=2 then 
         --mise à jour de adresse pour niveau 2
               --dbms_output.put_line('Avant mise à jour adresse niveau 2 : '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV2=rec_adr.entite and (codniv3 ='' or codniv3 is null) ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV2=rec_adr.entite and (codniv3 ='' or codniv3 is null) ;            
                  end if;
              end if;
          if rec_adr.derNiv=3 then 
           --mise à jour de adresse pour niveau 3
               --dbms_output.put_line('Avant mise à jour adresse niv 3: '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV3=rec_adr.entite and (codniv4 ='' or codniv4 is null) ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV3=rec_adr.entite and (codniv4 ='' or codniv4 is null) ;            
                  end if;
              end if;
         if rec_adr.derNiv=4 then 
           --mise à jour de adresse pour niveau 4
               --dbms_output.put_line('Avant mise à jour adresse niv4: '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV4=rec_adr.entite and (codniv5 ='' or codniv5 is null) ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV4=rec_adr.entite and (codniv5 ='' or codniv5 is null) ;            
                  end if;
              end if;
         if rec_adr.derNiv=5 then 
          --mise à jour de adresse pour niveau 5
               --dbms_output.put_line('Avant mise à jour adresse niv5 : '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV5=rec_adr.entite and (codniv6 ='' or codniv6 is null) ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV5=rec_adr.entite and (codniv6 ='' or codniv6 is null) ;            
                  end if;
              end if;
         if rec_adr.derNiv=6 then 
        --mise à jour de adresse pour niveau 6
               --dbms_output.put_line('Avant mise à jour adresse niv6 : '||:old.ID_ADRESSE);
               --FIXME utiliser la procédure trace_dbms_output()
              --suppression ou mise à blanc des champs autres que siren ou nic
                if (rec_adr.siren is null and rec_adr.nic is null ) then 
                     delete from STD_ADRSTR where CODTS=rec_adr.codts and CODNIV6=rec_adr.entite ;            
                else
                    update STD_ADRSTR set SIGLE='',CPLADR='',NUMV='',BTQ='',TYPV='',NOMV='',INSEE='',COM='',CP='',DISTRI='',TEL='',SIREN=rec_adr.siren,NIC=rec_adr.nic,FAX='',EMAIL='',CODP='',TYPSTR=''  where CODTS=rec_adr.codts and CODNIV6=rec_adr.entite ;            
                  end if;
              end if;
    exception
      When OTHERS then
          --dbms_output.put_line('Code type structure existe dans adresse : '||existeValeur);
          --dbms_output.put_line( 'Code    erreur : ' || to_char( SQLCODE )) ;
          --dbms_output.put_line( 'libellé erreur : ' || to_char( SQLERRM )) ; 
          --dbms_output.put_line('problème de mise à jour de l''adresse');
          --FIXME utiliser la procédure trace_dbms_output()
          NULL;
      end;
    End loop ;
         --dbms_output.put_line('fin curseur ');
         --FIXME utiliser la procédure trace_dbms_output() 
  End ;
##
ORG_S_ADRESSE_TO_ADR
=SQL=
DROP TRIGGER ORG_S_ADRESSE_TO_ADR
##
TAG_CHARSET=@€éèç
##
ORG_S_ARBRE_TO_NIV
=SQL=
create or replace
TRIGGER "ORG_S_ARBRE_TO_NIV" AFTER DELETE
ON STD_STRUC_ARBRE FOR EACH ROW
declare 
-- trigger qui modifie dans la table de niveau appropriée les dates d'ouverture et de fermeture
derNiv       NUMBER        :=0 ;
BEGIN
-- si l'occurrence de STD_STRUC_ARBRE est à la date du jour on va tenter la création dans une table de niveau
 if to_char(SYSDATE,'yyyymmdd') between :old.date_eff and :old.date_fin then
-- recuperation du niveau
 begin 
    --dbms_output.put_line('ici'||derNiv);
    --FIXME utiliser la procédure trace_dbms_output()
    select Sn.niveau into derNiv from  std_struc_entite se, std_struc_niv sn 
    where sn.codts=:old.CODTS and se.type_entite=sn.type_entite and se.code_entite=:old.CODE_ENTITE
     and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin ;
    --dbms_output.put_line('niveau : '||derNiv);
    --FIXME utiliser la procédure trace_dbms_output()
    exception
     when no_data_found then
     --dbms_output.put_line('ici'||derNiv);
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
     when others then
     --dbms_output.put_line('pas de niveau');
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
    end;
   BEGIN
      --dbms_output.put_line('code entite : '||:old.CODE_ENTITE);
      --dbms_output.put_line('derNiv : '||derNiv);
      --FIXME utiliser la procédure trace_dbms_output()
         if derNiv =1 then 
  --suppression dans NIV1
           delete from NIV1 where CODTS=:old.CODTS and CODNIV1=:old.CODE_ENTITE ;
          end if;
           if derNiv =2 then 
  --suppression dans NIV2
           delete from NIV2 where CODTS=:old.CODTS and CODNIV2=:old.CODE_ENTITE ;
         end if;
  --suppression dans NIV3
         if derNiv =3 then 
           delete from NIV3 where CODTS=:old.CODTS and CODNIV3=:old.CODE_ENTITE ;
       end if;
   --suppression dans NIV4
    if derNiv =4 then 
           delete from NIV4 where CODTS=:old.CODTS and CODNIV4=:old.CODE_ENTITE ;
        end if;
  --suppression dans NIV5
    if derNiv =5 then 
           delete from NIV5 where CODTS=:old.CODTS and CODNIV5=:old.CODE_ENTITE ;
      end if;
  --suppression dans NIV6
           if derNiv =6 then 
           delete from NIV6 where CODTS=:old.CODTS and CODNIV6=:old.CODE_ENTITE ;
     end if;
      exception
  When OTHERS then
   --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
   --FIXME utiliser la procédure trace_dbms_output()
   null;
end ;
end if;
END;
##
ORG_S_ARBRE_TO_NIV
=SQL=
DROP TRIGGER ORG_S_ARBRE_TO_NIV
##
TAG_CHARSET=@€éèç
##
ORG_S_ENTITE_OPEN_TO_NIV
=SQL=
create or replace
TRIGGER "ORG_S_ENTITE_OPEN_TO_NIV" AFTER DELETE
ON STD_STRUC_ENTITE_OPEN FOR EACH ROW
declare 
-- trigger qui modifie dans la table de niveau appropriée les dates d'ouverture et de fermeture
derNiv       NUMBER        :=0 ;
codts  NUMBER        :=0 ;
BEGIN
-- recuperation du niveau
      --dbms_output.put_line('code entite avant : '||:old.CODE_ENTITE);
      --FIXME utiliser la procédure trace_dbms_output()
 begin 
    select Sn.niveau,Sn.CODTS into derNiv,codts from  std_struc_entite se, std_struc_niv sn 
    where se.type_entite=sn.type_entite 
     and to_char(SYSDATE,'yyyymmdd') between se.date_eff and se.date_fin 
    and to_char(SYSDATE,'yyyymmdd') between sn.date_eff and sn.date_fin 
       and se.code_entite=:old.CODE_ENTITE;
     exception
     when no_data_found then
     --dbms_output.put_line('ici'||derNiv);
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
     when others then
     --dbms_output.put_line('pas de niveau');
     --FIXME utiliser la procédure trace_dbms_output()
     NULL;
    end;
   BEGIN
      --dbms_output.put_line('code entite : '||:old.CODE_ENTITE);
      --dbms_output.put_line('derNiv : '||derNiv);
      --FIXME utiliser la procédure trace_dbms_output()
         if derNiv =1 then 
  --mise à jour dans NIV1
           update NIV1 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV1=:old.CODE_ENTITE ;
          end if;
           if derNiv =2 then 
  --mise à jour dans NIV2
            update NIV2 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV2=:old.CODE_ENTITE ;
         end if;
  --mise à jour dans NIV3
         if derNiv =3 then 
            update NIV3 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV3=:old.CODE_ENTITE ;
       end if;
         --insertion dans NIV4
    if derNiv =4 then 
            update NIV4 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV4=:old.CODE_ENTITE ;
        end if;
  --mise à jour dans NIV5
    if derNiv =5 then 
            update NIV5 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV5=:old.CODE_ENTITE ;
      end if;
  --mise à jour dans NIV6
           if derNiv =6 then 
            update NIV6 set DATE_OUV='',DATE_FERM='' where CODTS=codts and CODNIV6=:old.CODE_ENTITE ;
     end if;
      exception
  When OTHERS then
   --dbms_output.put_line('problème de mise à jour lié à non existance probable dans table de niveau');
   --FIXME utiliser la procédure trace_dbms_output()
   null;
end ;
END;
##
ORG_S_ENTITE_OPEN_TO_NIV
=SQL=
DROP TRIGGER ORG_S_ENTITE_OPEN_TO_NIV
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_ENTITE
==
create or replace TYPE MP_CODELISTS_ESI_ENTITE FORCE AS OBJECT (CID VARCHAR2(32), CODE_ENTITE VARCHAR2(25), LIBELLE_REDUIT VARCHAR2(20), LIBELLE VARCHAR(255))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_BUSINESSUNITS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_BUSINESSUNITS (CID, CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT CID, CODE_ENTITE, LIBELLE_REDUIT, LIBELLE FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_BUSINESS_UNITS'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_DEPARTMENTS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_DEPARTMENTS (CID, CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT CID, CODE_ENTITE, LIBELLE_REDUIT, LIBELLE FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_DEPARTMENTS'))
##
TAG_CHARSET=@€éèç
##
MP_CODELISTS_ESI_LOCATIONS
=SQL=
CREATE OR REPLACE FORCE VIEW MP_CODELISTS_ESI_LOCATIONS (CID, CODE, LIBELLE_REDUIT, LIBELLE) AS 
SELECT CID, CODE_ENTITE, LIBELLE_REDUIT, LIBELLE FROM TABLE(MP_CODELISTS_ESI_GET_TAB_ENTITES('', 'TYPE_ENTITE_ETABLISSEMENT'))
##
TAG_CHARSET=@€éèç
##
STD_NIVEAUX
==
CREATE OR REPLACE FORCE VIEW "STD_NIVEAUX" ("NIV", "CODNIV1", "LIBNIV1", "CODNIV2", "LIBNIV2", "CODNIV3", "LIBNIV3", "CODNIV4", "LIBNIV4", "CODNIV5", "LIBNIV5", "CODNIV6", "LIBNIV6", "CODTS", "DATE_OUV", "DATE_FERM", "EST_PREV", "NUMV", "NOMV", "COM", "CP", "SIGLE", "DISTRI", "SIREN", "NIC", "BTQ", "TYPV", "ETAT") AS   ( SELECT '1' AS niv, n.CODNIV1 , n.libniv1 , '' AS codniv2 , '' AS libniv2 , '' AS codniv3 , '' AS libniv3 , '' AS codniv4 , '' AS libniv4 , '' AS codniv5 , '' AS libniv5 , '' AS codniv6 , '' AS libniv6 , n.CODTS , DATE_OUV , DATE_FERM , EST_PREV , (SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 IS NULL) AS TYPV , ( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv1 n UNION ALL SELECT '2' AS niv, n.CODNIV1 , (SELECT LIBNIV1 FROM niv1 WHERE niv1.codniv1=n.codniv1 AND niv1.codts = n.codts) AS libniv1 , n.CODNIV2 , n.libniv2 , '' AS codniv3, '' AS libniv3, '' AS codniv4, '' AS libniv4, '' AS codniv5, '' AS libniv5, '' AS codniv6, '' AS libniv6, n.CODTS , DATE_OUV , DATE_FERM , EST_PREV , (SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 IS NULL) AS TYPV , ( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv2 n UNION ALL SELECT '3' AS niv, n.CODNIV1 , (SELECT LIBNIV1 FROM niv1 WHERE niv1.codniv1=n.codniv1 AND niv1.codts = n.codts) AS libniv1, n.CODNIV2 , (SELECT LIBNIV2 FROM niv2 WHERE niv2.codniv1=n.codniv1 AND niv2.codniv2 = n.codniv2 AND niv2.codts = n.codts) AS libniv2 , n.CODNIV3 , n.libniv3 , '' AS codniv4, '' AS libniv4, '' AS codniv5, '' AS libniv5, '' AS codniv6, '' AS libniv6, n.CODTS , DATE_OUV , DATE_FERM , EST_PREV ,(SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 IS NULL) AS TYPV , ( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv3 n UNION ALL SELECT '4' AS niv, n.CODNIV1 , (SELECT LIBNIV1 FROM niv1 WHERE niv1.codniv1=n.codniv1 AND niv1.codts = n.codts) AS libniv1, n.CODNIV2 , (SELECT LIBNIV2 FROM niv2 WHERE niv2.codniv1=n.codniv1 AND niv2.codniv2 = n.codniv2 AND niv2.codts = n.codts) AS libniv2, n.CODNIV3 , (SELECT LIBNIV3 FROM niv3 WHERE niv3.codniv1=n.codniv1 AND niv3.codniv2 = n.codniv2 AND niv3.codniv3 = n.codniv3 AND niv3.codts = n.codts) AS libniv3 , n.CODNIV4 , n.libniv4 , '' AS codniv5, '' AS libniv5, '' AS codniv6, '' AS libniv6, n.CODTS , DATE_OUV , DATE_FERM , EST_PREV , (SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 IS NULL) AS TYPV ,( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv4 n UNION ALL SELECT '5' AS niv, n.CODNIV1 , (SELECT LIBNIV1 FROM niv1 WHERE niv1.codniv1=n.codniv1 AND niv1.codts = n.codts) AS libniv1, n.CODNIV2 , (SELECT LIBNIV2 FROM niv2 WHERE niv2.codniv1=n.codniv1 AND niv2.codniv2 = n.codniv2 AND niv2.codts = n.codts) AS libniv2, n.CODNIV3 , (SELECT LIBNIV3 FROM niv3 WHERE niv3.codniv1=n.codniv1 AND niv3.codniv2 = n.codniv2 AND niv3.codniv3 = n.codniv3 AND niv3.codts = n.codts) AS libniv3, n.CODNIV4 , (SELECT LIBNIV4 FROM niv4 WHERE niv4.codniv1=n.codniv1 AND niv4.codniv2 = n.codniv2 AND niv4.codniv3 = n.codniv3 AND niv4.codniv4 = n.codniv4 AND niv4.codts = n.codts) AS libniv4 , n.CODNIV5 , n.libniv5 , '' AS codniv6, '' AS libniv6, n.CODTS , DATE_OUV , DATE_FERM , EST_PREV ,(SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 IS NULL) AS TYPV ,( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv5 n UNION ALL SELECT '6' AS niv, n.CODNIV1 , (SELECT LIBNIV1 FROM niv1 WHERE niv1.codniv1=n.codniv1 AND niv1.codts = n.codts) AS libniv1, n.CODNIV2 , (SELECT LIBNIV2 FROM niv2 WHERE niv2.codniv1=n.codniv1 AND niv2.codniv2 = n.codniv2 AND niv2.codts = n.codts) AS libniv2, n.CODNIV3 , (SELECT LIBNIV3 FROM niv3 WHERE niv3.codniv1=n.codniv1 AND niv3.codniv2 = n.codniv2 AND niv3.codniv3 = n.codniv3 AND niv3.codts = n.codts) AS libniv3, n.CODNIV4 , (SELECT LIBNIV4 FROM niv4 WHERE niv4.codniv1=n.codniv1 AND niv4.codniv2 = n.codniv2 AND niv4.codniv3 = n.codniv3 AND niv4.codniv4 = n.codniv4 AND niv4.codts = n.codts) AS libniv4, n.CODNIV5 , (SELECT LIBNIV5 FROM niv5 WHERE niv5.codniv1=n.codniv1 AND niv5.codniv2 = n.codniv2 AND niv5.codniv3 = n.codniv3 AND niv5.codniv4 = n.codniv4 AND niv5.codniv5 = n.codniv5 AND niv5.codts = n.codts) AS libniv5, n.CODNIV6 , n.LIBNIV6 , n.CODTS , DATE_OUV , DATE_FERM , EST_PREV , (SELECT MAX(NUMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS NUMV, (SELECT MAX(NOMV) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS NOMV, (SELECT MAX(COM) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS COM, (SELECT MAX(CP) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS CP, (SELECT MAX(SIGLE) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS SIGLE, (SELECT MAX(DISTRI) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS DISTRI, (SELECT MAX(SIREN) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS SIREN, (SELECT MAX(NIC) FROM STD_ADRSTR ad WHERE ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS NIC, (SELECT LIB FROM BTQ b,STD_ADRSTR ad WHERE b.COD=ad.BTQ AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS BTQ , (SELECT t.LIBELLE FROM STD_TYPE_VOIE t,STD_ADRSTR ad WHERE t.CODE=ad.TYPV AND ad.CODTS = n.CODTS AND ad.codniv1 = n.CODNIV1 AND ad.CODNIV2 = n.CODNIV2 AND ad.CODNIV3 = n.CODNIV3 AND ad.CODNIV4 = n.CODNIV4 AND ad.CODNIV5 = n.CODNIV5 AND ad.CODNIV6 = n.CODNIV6) AS TYPV ,( CASE WHEN Date_ouv <TO_CHAR(sysdate,'yyyymmdd') AND (date_Ferm>TO_CHAR(sysdate,'yyyymmdd') OR date_ferm IS NULL) THEN 'O' ELSE 'F' END) AS Etat FROM niv6 n)
##
STD_NIVEAUX
==
drop view STD_NIVEAUX
##
TAG_CHARSET=@€éèç
##
STD_STRUC_ENTITE_BO
=SQL=
create or replace view std_struc_entite_bo
as(
select e.*, o.date_ouv, o.date_ferm, 
case when to_date(date_ouv,'yyyymmdd')>sysdate then 'P' when to_date(nvl(date_ferm,'20991231'),'yyyymmdd')<sysdate then 'F' else 'O' end as statut_open
from std_struc_entite e, std_struc_entite_open o 
where e.cid = o.cid and e.code_entite=o.code_entite
union all
select '@NON_AFFECTE@','19000101','20991231', null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,'O'
from dual
union all
select '@VIDE@','19000101','20991231', null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,
null,null,null,'O'
from dual)
##
TAG_CHARSET=@€éèç
##
STD_STRUC_ENTITE_VIEW
==
CREATE OR REPLACE FORCE VIEW "STD_STRUC_ENTITE_VIEW" ("CID", "CODE_ENTITE", "LIBELLE_ENTITE") AS (SELECT CID, CODE_ENTITE,LIBELLE FROM STD_STRUC_ENTITE WHERE TO_CHAR(SYSDATE,'yyyymmdd') BETWEEN DATE_EFF AND DATE_FIN)
##
MP_MAPPING_EVENT_DATA
==
DELETE FROM MP_MAPPING_EVENT_DATA WHERE EVENT='worker.workAssignment.modify' AND NOM_DONNEE_DEX_OU_EVENT in ('managerId','originalHireDate')
'worker.workAssignment.modify','managerId','N','D','N'
'worker.workAssignment.modify','originalHireDate','N','D','N'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('DependentsPersonDisabledIndicator','DependentsPersonChildSupportIndicator','DependentsPersonProfessionTypeCodeCodeValue','DependentsPersonSocialInsuranceProgramsHealthInsuranceCoveragePeriodStartDate','DependentsPersonSocialInsuranceProgramsHealthInsuranceCoveragePeriodEndDate')
'DependentsPersonDisabledIndicator','dependentEnfantDisabledIndicator'
'DependentsPersonChildSupportIndicator','dependentEnfantChildSupportIndicator'
'DependentsPersonProfessionTypeCodeCodeValue','dependentConjointProfessionTypeCode'
'DependentsPersonSocialInsuranceProgramsHealthInsuranceCoveragePeriodStartDate','dependentConjointHealthInsuranceStartDate'
'DependentsPersonSocialInsuranceProgramsHealthInsuranceCoveragePeriodEndDate','dependentConjointHealthInsuranceEndDate'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE (DATA_NAME_MP,DATA_NAME_MP_ALP) IN (('PersonLegalAddressCityName','cityNameFiscal'),('PersonOtherPersonalAddressesCityName','cityNamePerso'),('WorkAssignmentCustomFieldGroupCodeFieldsContractTypeCodeValue','typeContrat'))
'PersonLegalAddressCityName','cityNameFiscal'
'PersonOtherPersonalAddressesCityName','cityNamePerso'
'WorkAssignmentCustomFieldGroupCodeFieldsContractTypeCodeValue','typeContrat'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkAssignmentExpectedTerminationDate','PersonLegalAddressLineOne','PersonOtherPersonalAddressesLineOne','PersonLegalAddressLineTwo','PersonOtherPersonalAddressesLineTwo','PersonLegalAddressLineThree','PersonOtherPersonalAddressesLineThree','PersonLegalAddressLineFour','PersonOtherPersonalAddressesLineFour')
'WorkAssignmentExpectedTerminationDate','expectedTerminationDate'
'PersonLegalAddressLineOne','ligne1Fiscal'
'PersonOtherPersonalAddressesLineOne','ligne1Perso'
'PersonLegalAddressLineTwo','ligne2Fiscal'
'PersonOtherPersonalAddressesLineTwo','ligne2Perso'
'PersonLegalAddressLineThree','ligne3Fiscal'
'PersonOtherPersonalAddressesLineThree','ligne3Perso'
'PersonLegalAddressLineFour','ligne4Fiscal'
'PersonOtherPersonalAddressesLineFour','ligne4Perso'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP = 'DistributionInstructionsDistributionAmountAmountValue'
'DistributionInstructionsDistributionAmountAmountValue','montantCompteBancaire'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkAssignmentsDefaultCustomFieldGroupDateFieldsEndProbationDateDateValue','WorkAssignmentsDefaultCustomFieldGroupDateFieldsFixedTermContractInitialTerminationDateDateValue','WorkAssignmentCustomFieldGroupCodeFieldsRehireTypeCodeValue')
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsEndProbationDateDateValue','endProbationDate'
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsFixedTermContractInitialTerminationDateDateValue','initialCddTerminationDate'
'WorkAssignmentCustomFieldGroupCodeFieldsRehireTypeCodeValue','TypeReembauche'
##
TAG_CHARSET=@€éèç
##
MP_REF_STD_CUSTOMFIELD
=SQL IFNOTEXIST=MP_REF_STD_CUSTOMFIELD=
CREATE TABLE MP_REF_STD_CUSTOMFIELD (CUSTOMFIELD_ID VARCHAR2(500), STD_CUSTOMFIELD_ID VARCHAR2(500))
##
MP_REF_STD_CUSTOMFIELD
==
DELETE FROM MP_REF_STD_CUSTOMFIELD WHERE CUSTOMFIELD_ID IN ('typeContrat','TypeReembauche','initialCddTerminationDate')
'typeContrat', 'contractType'
'TypeReembauche', 'rehireType'
'initialCddTerminationDate', 'fixedTermContractInitialTerminationDate'
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV1=
drop table NIV1
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV2=
drop table NIV2
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV3=
drop table NIV3
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV4=
drop table NIV4
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV5=
drop table NIV5
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=NIV6=
drop table NIV6
##
SECUPACMAT
=SQL IFNOTEXIST=SECUPACMAT=FLAG_MASQUAGE_RGPD=
ALTER  TABLE SECUPACMAT ADD FLAG_MASQUAGE_RGPD NUMBER DEFAULT 0
##
SECUPACMAT
=SQL IFNOTEXIST=SECUPACMAT=FORCER_AFFICHAGE_RGPD=
ALTER  TABLE SECUPACMAT ADD FORCER_AFFICHAGE_RGPD NUMBER
##
TAG_CHARSET=@€éèç
##
NIV1
=SQL IFEXIST=STD_ADRSTR=
drop table STD_ADRSTR
##
STD_ICON
==
DELETE FROM STD_ICON WHERE ID = 'shopping-marketplace'
'shopping-marketplace'
##
STD_STRUC_ENTITE
=SQL IFNOTEXIST=STD_STRUC_ENTITE=CID=
alter table STD_STRUC_ENTITE add CID varchar2(32)
##
STD_STRUC_ENTITE
=SQL=
update STD_STRUC_ENTITE set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
STD_STRUC_ENTITE
=SQL=
alter table STD_STRUC_ENTITE drop primary key
##
STD_STRUC_ENTITE
=SQL=
alter table STD_STRUC_ENTITE add constraint STD_STRUC_ENTITE_PK primary key (CODE_ENTITE, DATE_EFF, CID)
##
TAG_CHARSET=@€éèç
##
STD_STRUC_ENTITE_INFO
=SQL IFNOTEXIST=STD_STRUC_ENTITE_INFO=CID=
alter table STD_STRUC_ENTITE_INFO add CID varchar2(32)
##
STD_STRUC_ENTITE_INFO
=SQL=
update STD_STRUC_ENTITE_INFO set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
STD_STRUC_ENTITE_INFO
=SQL=
alter table STD_STRUC_ENTITE_INFO drop primary key
##
STD_STRUC_ENTITE_INFO
=SQL=
alter table STD_STRUC_ENTITE_INFO add constraint STD_STRUC_ENTITE_INFO_PK primary key (CODE_ENTITE, CID)
##
TAG_CHARSET=@€éèç
##
STD_STRUC_ENTITE_OPEN
=SQL IFNOTEXIST=STD_STRUC_ENTITE_OPEN=CID=
alter table STD_STRUC_ENTITE_OPEN add CID varchar2(32)
##
STD_STRUC_ENTITE_OPEN
=SQL=
update STD_STRUC_ENTITE_OPEN set CID = nvl((select VALVAR from SYS_VARSYS where CODVAR = 'NS_CLIENT_ID'), '*') where CID is null
##
STD_STRUC_ENTITE_OPEN
=SQL=
alter table STD_STRUC_ENTITE_OPEN drop primary key
##
STD_STRUC_ENTITE_OPEN
=SQL=
alter table STD_STRUC_ENTITE_OPEN add constraint STD_STRUC_ENTITE_OPEN_PK primary key (CODE_ENTITE, CID)
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'FDSP0003' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
'FDSP0003','STD','fr_fr','0','Vous consultez actuellement les livrables de paie des traitements du #1 au #2','1'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR IN ('GENMAN01','GENMAN02','GENMAN03') AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
'GENMAN01','GEN','fr_fr','0','La date de fin du mandat est postérieure à la date de fin prévue du CDD.¿Veuillez modifier la date de début du mandat.','1'
'GENMAN02','GEN','fr_fr','0','La date de début du mandat ne peut pas être antérieure à la date de début du contrat.','1'
'GENMAN03','GEN','fr_fr','0','La date de fin du mandat ne peut pas être postérieure à la date de fin du contrat.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('GAPMG01', 'GAPMG02','GAPMG03')
'GAPMG01','TGE','fr_fr','0','Suppression des matricules réalisée avec succès','1'
'GAPMG02','TGE','fr_fr','0','Erreur lors de la suppression des matricules.','3'
'GAPMG03','TGE','fr_fr','0','Aucun matricule séléctionné','3'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'HRO' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and  CODERR in ('HRO00035', 'HRO00036', 'HRO00009') 
'HRO00035','HRO','fr_fr','0','Le cid n''est pas renseigné.','1'
'HRO00036','HRO','fr_fr','0','Le cid ne peut excéder 32 caractères.','1'
'HRO00009','HRO','fr_fr','0','La valeur de ce champ est invalide, elle doit être au format : #1.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'API' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR IN ('API00003','API00010','API00011','API00012','API00013','API00014','API00015','API00016','API00017','API00018','API00019','API00020','API00021')
'API00003', 'API', 'fr_fr', 0, 'Veuillez indiquer l''identifiant de l''application consommatrice à #.', 1
'API00010', 'API', 'fr_fr', 0, 'Cet utilisateur n''existe pas, ou n''est pas associé à une application consommatrice.', 1
'API00011', 'API', 'fr_fr', 0, 'Impossible de déterminer le client.', 1
'API00012', 'API', 'fr_fr', 0, 'L''id de l''application est obligatoire.', 1
'API00013', 'API', 'fr_fr', 0, 'Cet id d''application existe déjà dans la base.', 1
'API00014', 'API', 'fr_fr', 0, 'L''application ''#'' n''existe pour aucun partenaire.', 1
'API00015', 'API', 'fr_fr', 0, 'Le libellé de l''application est obligatoire.', 1
'API00016', 'API', 'fr_fr', 0, 'Une application d''un partenaire porte le même libellé.', 1
'API00017', 'API', 'fr_fr', 0, 'Il existe une application portant le même libellé.', 1
'API00018', 'API', 'fr_fr', 0, 'Erreur lors de l''enregistrement de l''application consommatrice.', 1
'API00019', 'API', 'fr_fr', 0, 'L''origine est obligatoire pour utiliser les URIs de l''API Pay Data Input. Les autres URIs ont été enregistrées.', 1
'API00020', 'API', 'fr_fr', 0, 'L''id de l''application ne doit pas contenir plus de 50 caractères.', 1
'API00021', 'API', 'fr_fr', 0, 'Le libellé de l''application ne doit pas contenir plus de 250 caractères.', 1
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('Btn_Supp','Col_GestNom','Col_Pacmat','Col_MatNom','Col_MatPrenom','Btn_ClearFilter','Msg_Supp','Conf_Supp') 
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Btn_Supp','Supprimer la sélection'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Col_GestNom','Nom du gestionnaire'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Col_Pacmat','Matricule paie'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Col_MatNom','Nom'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Col_MatPrenom','Prénom'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Btn_ClearFilter','Effacer les filtres'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_Supp','Suppresion de matricule'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Conf_Supp','Etes-vous sûr de vouloir supprimer ces matricules ?'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ParamEcranDyn.GestionDesProjetsMVVM' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('GestionProjet.ImportParamUxEnCours')
'Ext.adp.Moteur.ParamEcranDyn.GestionDesProjetsMVVM','fr_fr', 'GestionProjet.ImportParamUxEnCours','L''import de paramétrage MonADP modèle est en cours.'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('Msg_TitreSelect','Msg_QuestSelect','Msg_TitreDeselect','Msg_QuestDeselect','Msg_PageCour','Msg_ToutSel','Msg_Annuler','Msg_NbMax_Depasse','Msg_NbMax_Confirm','Btn_AnnuleSelection') 
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_TitreSelect','Sélectionner'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_QuestSelect','Voulez-vous sélectionner ?'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_TitreDeselect','Annuler la séléction'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_QuestDeselect','Voulez vous annuler la séléction de toutes lignes ou seulement celles de la page courante ?'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_PageCour','Page courante'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_ToutSel','Tout'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_Annuler','Annuler'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbMax_Depasse','Vous ne pouvez pas sélectionner plus que #1 matricules !'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Msg_NbMax_Confirm','Le nombre de matricule séléctionnés est supérieur au nombre maximale de séléctions autorisés.<br>Seuls les #1 premiers matricules vont être séléctionnées.<br> Souhaitez vous continuer ?'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat','fr_fr','Btn_AnnuleSelection','Annuler la sélection'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE in('Ext.adp.Tests.Accessibilite.AccessibiliteExempleC', 'Ext.adp.Tests.Accessibilite.AccessibiliteExempleM')
'Ext.adp.Tests.Accessibilite.AccessibiliteExempleC', 'Ajout Accessibilite Exemple'
'Ext.adp.Tests.Accessibilite.AccessibiliteExempleM', 'Modification Accessibilite Exemple'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat', 'Autres gestionnaires'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API' and IDREQUETE IN ('1','2')
'TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API','1','Utilisateur','MP_CONSUMERAPPOID','CONSUMER_APP_OID,LABEL,NVL((SELECT O.LABEL FROM MP_REF_APP_OWNER O^MP_REF_CONSUMERAPPOID C WHERE C.CONSUMER_APP_OID=MP_CONSUMERAPPOID.CONSUMER_APP_OID_REF AND O.APP_OWNER_ID=C.APP_OWNER_ID)^''Client'')','CONSUMER_APP_OID,LABEL,CONSUMER_APP_OID_REF','%1','0','false','CONSUMER_APP_OID','Applications consommatrices ajoutées','Applications consommatrices','Id Application,Libellé,Propriétaire'
'TAB_RD_GESTION_APPLICATIONS_CONSOMMATRICES_API','2','Utilisateur','MP_REF_CONSUMERAPPOID','CONSUMER_APP_OID,LABEL,(SELECT LABEL FROM MP_REF_APP_OWNER WHERE APP_OWNER_ID=MP_REF_CONSUMERAPPOID.APP_OWNER_ID)','CONSUMER_APP_OID,LABEL,APP_OWNER_ID','CONSUMER_APP_OID NOT IN (SELECT CONSUMER_APP_OID_REF FROM MP_CONSUMERAPPOID WHERE CONSUMER_APP_OID_REF IS NOT NULL AND %1)','0','false','CONSUMER_APP_OID','Applications consommatrices à ajouter','Applications consommatrices','Id Application,Libellé,Propriétaire'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='MultiGestListePacmat.js' and IDREQUETE = '1'
'MultiGestListePacmat.js','1','Utilisateur','(with gestionnaires as (SELECT login GEST_LOGIN, nom ||'' ''||prenom GEST_NOM FROM (SELECT login, nom, prenom FROM secumatric     s, sys_usr_config c 		WHERE s.matric = c.requetematric UNION ALL SELECT login, nomfam AS nom, prenom FROM sys_usr_externe )) SELECT nvl(ge.GEST_NOM, g.login) GEST_NOM, g.login GEST_LOGIN, g.PACMAT PACMAT, UPPER(SECUPACMAT.NOM) as NOM,  UPPER(SECUPACMAT.PRENOM) as PRENOM from GAP_SELECTION_PACMAT g, SECUPACMAT, gestionnaires ge where g.NUMPAC = SECUPACMAT.NUMPAC and g.PACMAT = SECUPACMAT.PACMAT and ge.gest_login(+) = g.login and g.NOMTRAITEMENT= %1 and g.NUMPAC= %2 and g.LOGIN not like %3)','GEST_NOM, GEST_LOGIN, PACMAT, NOM, PRENOM',null,'PACMAT IN ( select pacmat from secumatric where @SECUALL_SANSQUOTE@)','0',null,null,null,'Liste des matricules des autres gestionnaires','NOM GESTIONNAIRE, LOGIN, MATRICULE, NOM, PRENOM'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExemple' and NOM_JSON = 'AccessibiliteExempleJsonServlet'
'Ext.adp.Tests.Accessibilite.AccessibiliteExemple', 'AccessibiliteExempleJsonServlet'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExemple' and NOM_JSON = 'AccessibiliteExempleCJsonServlet'
'Ext.adp.Tests.Accessibilite.AccessibiliteExemple', 'AccessibiliteExempleCJsonServlet'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExemple' and NOM_JSON = 'AccessibiliteExempleMJsonServlet'
'Ext.adp.Tests.Accessibilite.AccessibiliteExemple', 'AccessibiliteExempleMJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExemple'
'Ext.adp.Tests.Accessibilite.AccessibiliteExemple',NULL,NULL,'AccessibiliteExempleJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExempleC'
'Ext.adp.Tests.Accessibilite.AccessibiliteExempleC','HRO_PAGINATION_NBLIGPAGE;HRO_EXP_REG_CODE_MASKRE_JS;HRO_EXP_REG_LIBELLE_MASKRE_JS;SYS_LONGUEUR_MATRIC','HRO00004;HRO00022;HRO00023;HROENT02;HROENT03;HROENT08;HROENT09;HROENT27;HROENT28;HROENT29;HROENT30;HROENT39;HROCTL29;STD00031;STD00032;STD00033;STD00034','AccessibiliteExempleCJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Tests.Accessibilite.AccessibiliteExempleM'
'Ext.adp.Tests.Accessibilite.AccessibiliteExempleM','HRO_PAGINATION_NBLIGPAGE;HRO_EXP_REG_CODE_MASKRE_JS;HRO_EXP_REG_LIBELLE_MASKRE_JS;SYS_LONGUEUR_MATRIC','HRO00004;HRO00022;HRO00023;HROENT02;HROENT03;HROENT08;HROENT09;HROENT27;HROENT28;HROENT29;HROENT30;HROENT39;HROCTL29;STD00031;STD00032;STD00033;STD00034','AccessibiliteExempleMJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat'
'Ext.adp.MainDesk.view.eastregion.multiGestionnaires.MultiGestListePacmat',null,'GAPMG01;GAPMG02;GAPMG03','TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where nom_page='Ext.adp.Modules.Structures.Parametrage.GestionTypesEntite.TypeEntiteCM'
'Ext.adp.Modules.Structures.Parametrage.GestionTypesEntite.TypeEntiteCM','HRO_PAGINATION_NBLIGPAGE;HRO_EXP_REG_CODE_MASKRE_JS;HRO_EXP_REG_LIBELLE_MASKRE_JS;SYS_LONGUEUR_MATRIC', 'HRO00004;HRO00022;HRO00023;HROENT02;HROENT03;HROENT08;HROENT09;HROENT27;HROENT28;HROENT29;HROENT30;HROENT39;HROCTL29;STD00031;STD00032;STD00033;STD00034;HROTPE21;', 'TypeEntiteCMJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where nom_page='Ext.adp.Modules.DEX.CreateCode'
'Ext.adp.Modules.DEX.CreateCode',NULL, 'API00012;API00015;API00020;API00021;', 'GestionApplicationConsommatriceAPIJsonServlet'
##
SYS_SERVICELET
==
delete from SYS_SERVICELET where TYP='J' and SYNONYME='AccessibiliteExempleJsonServlet' 
'J','AccessibiliteExempleJsonServlet','fr.adp.com.gxp.std.mot_met.lib.accessibilite.AccessibiliteExempleJsonServlet','O'
##
SYS_SERVICELET
==
delete from SYS_SERVICELET where TYP='J' and SYNONYME='AccessibiliteExempleCJsonServlet' 
'J','AccessibiliteExempleCJsonServlet','fr.adp.com.gxp.std.mot_met.lib.accessibilite.AccessibiliteExempleCJsonServlet','O'
##
SYS_SERVICELET
==
delete from SYS_SERVICELET where TYP='J' and SYNONYME='AccessibiliteExempleMJsonServlet' 
'J','AccessibiliteExempleMJsonServlet','fr.adp.com.gxp.std.mot_met.lib.accessibilite.AccessibiliteExempleMJsonServlet','O'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE TYP='J' and SYNONYME='MultiGestListePacmatJsonServlet' 
'J','MultiGestListePacmatJsonServlet','fr.adp.com.gxp.std.modules.lib.servicelet.gap.traitement.MultiGestListePacmatJsonServlet','O'
##
SYS_SERVICELET
==
delete from SYS_SERVICELET where TYP = 'S' AND SYNONYME = 'GestionNivStructServiceLet'
##
SYS_SERVICELET
==
delete from SYS_SERVICELET where TYP = 'S' AND SYNONYME = 'SearchPackServiceLet'
##
SYS_VARSYS
==
call ADM_ADD_OR_UPDATE_VARSYS ('SYS', 'URL_OCN', '','Texte', 'URL de connexion à OrgChart Now. Si la valeur est vide OrgChart Now n''est pas activé. Si la valeur est https://eu1.orgchartnow.com/ OrgChart Now est activé.')
##
SYS_VARSYS
=SQL=
UPDATE SYS_VARSYS SET VALVAR = null WHERE CODVAR = 'URL_OCN' AND MODULE = 'SYS' AND instr(nvl((select VALVAR from SYS_VARSYS WHERE CODVAR = 'ACTIVE_BETA_FEATURES' AND MODULE = 'SYS'),'-'), 'OCN') = 0
##
SYS_VARSYS
==
call ADM_ADD_OR_UPDATE_VARSYS ('STD', 'PUBLICA_LOGO', '','Texte', 'URL d''accès au logo affiché sur le bureau à droite du logo ADP. A noter que la sécurité ADP bloque l''accès à certaines URL sur le Web.')
##
SYS_VARSYS
==
call ADM_ADD_OR_UPDATE_VARSYS ('SYS', 'ENVOI_ACE', 'false','Booléen', 'Variable indiquant si le traitement export des droits ACE doit être exécuté après la fin du traitement OptiSecu')
##
sys_varsys
==
UPDATE SYS_VARSYS SET DESCRIPTION = 'Libellé de l''application visible en titre de fenêtre et lors de l''ajout d''un favori dans le navigateur.' WHERE CODVAR = 'DEFAULT_SITE_NAME' AND MODULE = 'WWW'
##
sys_varsys
==
UPDATE SYS_VARSYS SET DESCRIPTION = 'Variable permettant d''indiquer sur le bureau l''environnement utilisé (Staging, Recette). Il ne faut pas la renseigner en environnement de production.' WHERE CODVAR = 'ENVIRONNEMENT' AND MODULE = 'WWW'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE NUMPAC='*' AND ELEMENT IN ('BB72','BB73','BB74','BB75','BB76','BB77','BB78')
'*','BB72','01','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB72','02','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB72','03','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB72','04','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB72','05','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB72','06','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB72','07','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB72','08','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB72','09','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB72','10','REF_EXTERNE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB73','01','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB73','02','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB73','03','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB73','04','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB73','05','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB73','06','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB73','07','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB73','08','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB73','09','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB73','10','TIT_COMPTE_OPPOS','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB74','01','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB74','02','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB74','03','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB74','04','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB74','05','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB74','06','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB74','07','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB74','08','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB74','09','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB74','10','DOMICILIATION_BANQUE','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB75','01','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB75','02','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB75','03','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB75','04','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB75','05','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB75','06','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB75','07','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB75','08','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB75','09','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB75','10','CODE_PAYS_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB76','01','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB76','02','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB76','03','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB76','04','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB76','05','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB76','06','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB76','07','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB76','08','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB76','09','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB76','10','CLE_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB77','01','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB77','02','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB77','03','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB77','04','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB77','05','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB77','06','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB77','07','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB77','08','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB77','09','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB77','10','CODES_IBAN','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
'*','BB78','01','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','01',null,null,'N'
'*','BB78','02','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','02',null,null,'N'
'*','BB78','03','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','03',null,null,'N'
'*','BB78','04','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','04',null,null,'N'
'*','BB78','05','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','05',null,null,'N'
'*','BB78','06','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','06',null,null,'N'
'*','BB78','07','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','07',null,null,'N'
'*','BB78','08','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','08',null,null,'N'
'*','BB78','09','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','09',null,null,'N'
'*','BB78','10','BIC_OPPOSITION','DIC_TGE_OPPOSITIONS','NUM_OPPOSITION','=','10',null,null,'N'
##
TAG_CHARSET=@€éèç
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_CNT_WKF_MOD_SELECT_EVT_MOBINT','RD_MODIF_CONTRACT_AFF_MOBINT',NULL,NULL,'N',NULL,'1188',NULL,'Sous-groupe évt mobilité internationale','Groupe contenant la case de sélection pour le choix de l''évt  mobilité internationale avec affichage conditionné au type de contrat.',NULL,'1','1'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
=IF_ROW_NOTEXIST=
'*','RD_CNT_WKF_MOD_SELECT_EVT_MOBINT','RD_MODIF_CONTRACT_AFF_MOBINT',NULL,NULL,'N',NULL,'1188',NULL,'Sous-groupe évt mobilité internationale','Groupe contenant la case de sélection pour le choix de l''évt  mobilité internationale avec affichage conditionné au type de contrat.',NULL,'1','1'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
=IF_ROW_NOTEXIST=
'*','RD_CNT_WKF_MOD_SELECT_EVT_MOBINT','RD_EVT_CHGT_MOBINT','1','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
=IF_ROW_NOTEXIST=
'*','RD_CNT_WKF_MOD_SELECT_EVT_MOBINT','RD_EVT_CHGT_MOBINT','1','N','FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
TAG_CHARSET=@€éèç
##
SYS_ACCUEIL_UPDATE
=SQL=
update SYS_ACCUEIL set code_cadre = code_cadre+2 where login = '*' AND code_regroup = '-5'
##
SYS_ACCUEIL_GRAPH_UPDATE
=SQL=
update SYS_ACCUEIL_GRAPH set code_cadre = code_cadre+2 where login = '*' AND code_regroup = '-5'
##
SYS_ACCUEIL_LIENS_UPDATE
=SQL=
update SYS_ACCUEIL_LIENS set code_cadre = code_cadre+2 where login = '*' AND code_regroup = '-5'
##
SYS_ACCUEIL (LOGIN,CODE_REGROUP,CODE_CADRE,ACTIF,LIBELLE,TYPE_CADRE,ETENDU,COLUMN_FLEX)
'*','-5','0','O','Bienvenue sur la recette ONE UX !','-4','N','1'
'*','-5','1','N','Liens rapides','-14','N','2'
##
SYS_ACCUEIL_LIENS (LOGIN,CODE_REGROUP,CODE_CADRE,ORDRE,TYPE,LIEN,LIBELLE,DESCRIPTIF,MESSAGE_ACCUEIL,ICON)
'*','-5','0','1','I','ACC_ONEUX','Bandeau accueil Expert OLD JSP','FFFFFF,100%','<div style="font-size: 16px;"><b><font face="arial" style="font-size: x-large; color: rgb(0, 0, 128);">Bienvenue </font></b><br></div>','fa-link'
'*','-5','1','1','E','http://www.google.com','Google','google',NULL,'fa-google'
'*','-5','1','2','E','https://apps.adp.com/fr-FR/home','Shop marketplace','Shop marketplace',NULL,'shopping-marketplace'
'*','-5','1','3','I','Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','Contrat courant',NULL,NULL,'fa-handshake-o'
'*','-5','1','4','I','Ext.adp.Modules.RD.STD.EXP.ETC.ETC','Etat civil',NULL,NULL,'fa-id-badge'
'*','-5','1','5','I','Ext.adp.Modules.RD.STD.EXP.ENF_TAB.ENF_TAB','Enfants',NULL,NULL,'fa-odnoklassniki'
'*','-5','1','6','I','Modules/Workflow/WkfRedirectSujet.jsp?Wkf_Id=50000','Embauche',NULL,NULL,'icon-add-new-hire'
'*','-5','1','7','I','Modules/Workflow/WkfRedirectSujet.jsp?Wkf_Id=50100','Départ',NULL,NULL,'fa-external-link-square'
'*','-5','1','8','I','Modules/Workflow/WkfRedirectSujet.jsp?Wkf_Id=50200','Modifications contractuelles',NULL,NULL,'icon-enter-emp-changes'
'*','-5','1','9','I','Ext.adp.Modules.ZPaie.DonneesElementPaie','Données variables et rappels',NULL,NULL,'icon-adp-payments-euro'
'*','-5','1','10','I','Modules/Structures/Parametrage/GestionStructures.jsp','Gestion des structures',NULL,NULL,'fa-building-o'
'*','-5','1','11','I','Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntites','Gestion de l''arbre des entités',NULL,NULL,'icon-chart-tree'
'*','-5','1','12','I','Ext.adp.ZPaie.ImportGap','Import GAP',NULL,NULL,'icon-import'
'*','-5','1','13','I','Modules/ZPaie/PilotageOperationsPaie.jsp','Pilotage des opérations de paie',NULL,NULL,'icon-run'
'*','-5','1','14','I','Ext.adp.Moteur.FichiersVisualisables.FichiersVisualisablesExpert','Fichiers disponibles',NULL,NULL,'icon-file-def'
'*','-5','1','15','I','Moteur/Trace/TracesInterpreterExpert.jsp','Traces',NULL,NULL,'icon-translations'
##
SYS_IMG_BIBLIOTHEQUE (NOM,CHEMIN,TYPE,ORDRE,EXTERNE)
'ACC_ONEUX','ONEUX/oneux_growth.png','PUB','2','N'
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Test Exemple Accessibilite','Ext.adp.Tests.Accessibilite.AccessibiliteExemple',null,'true')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Tests.Accessibilite.AccessibiliteExemple','Ext.adp.Modules.Structures.Parametrage.GestionDonneesHROSalarie.GestionDonneesHROSalarie')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Moteur.Comp.WebAdmin.DocServer.GestionChampsFusion.ExportChampsFusionDocserver','Moteur/Comp/WebAdmin/DocServer/GestionModelesDocServer.jsp')
##
ADM_SUPPRIME_NOM_PAGE
==
CALL ADM_SUPPRIME_NOM_PAGE('Moteur/Comp/WebAdmin/GestionNivStruct.jsp')
