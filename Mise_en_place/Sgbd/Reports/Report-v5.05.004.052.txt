##
TAG_IMPORT=5.05.004.R052
##
TAG_CHARSET=@€éèç
##
EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION
=SQL=
CREATE OR REPLACE FUNCTION EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(
  p_LOGIN IN VARCHAR2 DEFAULT NULL,
  p_START_DATE IN VARCHAR2 DEFAULT NULL,
  p_END_DATE IN VARCHAR2 DEFAULT NULL,
  p_TYPE_DOC IN VARCHAR2 DEFAULT NULL,
  p_ONLY_PROC_SIGN IN VARCHAR2 DEFAULT 'N',
  p_SIGNATAIRE IN VARCHAR2 DEFAULT NULL,
  p_EDITEUR IN VARCHAR2 DEFAULT NULL
) RETURN EDI_HISTO_LANCEMENTS_SUIVI_TABLE IS

  v_count NUMBER;
  v_MODE_ADMIN VARCHAR2(10);
  v_EDITEUR VARCHAR2(100);
  v_CODTS_JUR VARCHAR2(4000);
  v_ID_SECU_POP NUMBER;
  v_ID_SECU_STRUCT_JUR NUMBER;
  v_ID_SECU_PAC NUMBER;
  retour EDI_HISTO_LANCEMENTS_SUIVI_TABLE;

BEGIN

  SELECT MIN(VALVAR) INTO v_CODTS_JUR FROM SYS_VARSYS WHERE CODVAR='STRUCTURE_JUR';
  IF v_CODTS_JUR IS NULL THEN
    v_CODTS_JUR := 1;
  END IF;
  v_count := 0;
  v_ID_SECU_POP := -1;
  v_ID_SECU_STRUCT_JUR := -1;
  v_ID_SECU_PAC := -1;
  IF p_LOGIN IS NOT NULL THEN
    SELECT COUNT(*) INTO v_count FROM SYS_SCH_PROFIL_P E, SYS_USR_PROFIL U WHERE E.CODE_PROFIL=U.CODE_PROFIL AND LOGIN = p_LOGIN AND NOM_PAGE = 'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin';
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_POP FROM SYS_SEC_RESOLUE_POP_REQ WHERE LOGIN=p_LOGIN;
    EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_STRUCT_JUR FROM SYS_SEC_RESOLUE_STRUCT_REQ WHERE LOGIN=p_LOGIN AND CODTS=v_CODTS_JUR;
    EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN
      SELECT ID_SECU INTO v_ID_SECU_PAC FROM SYS_SEC_RESOLUE_PAC_REQ WHERE LOGIN=p_LOGIN;
    EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF;
  v_MODE_ADMIN := 'false';
  IF v_count>0 THEN
    v_MODE_ADMIN := 'true';
  END IF;

  v_EDITEUR := p_EDITEUR;
  IF v_MODE_ADMIN='false' THEN
    IF v_EDITEUR='|#ME#|' THEN
      v_EDITEUR := p_LOGIN;
    ELSE
      v_EDITEUR := '';
    END IF;
  END IF;

  SELECT EDI_HISTO_LANCEMENTS_SUIVI_RECORD(
    ID_LANCEMENT, 
    CODEDI, 
    FAMEDI, 
    LOGIN, 
    DATE_LANCEMENT, 
    MATRIC, 
    DATE_EFF, 
    CHEMIN_FICHIER, 
    ID_DOC_CONTAINER, 
    SIGN_LISTE_MANDATAIRES, 
    SIGN_PROCEDURE, 
    SIGN_DATE_FIN, 
    SIGN_MANDATAIRES, 
    SIGN_CONTRACTANT, 
    DATE_STATUTS, 
    IS_BILLED, 
    IS_PAPERLESS, 
    IS_DIGIPOSTE, 
    BENEFICIAIRE, 
    SEXE, 
    EMAIL, 
    TELEPHONE, 
    TRI_BENEFICIAIRE, 
    CONTRAT, 
    TRI_CONTRAT, 
    FILTRE_CONTRAT, 
    ETABLISSEMENT, 
    MAQUETTE, 
    STATUTEDITION, 
    FILTRE_STATUTEDITION, 
    DATECREATION, 
    TRI_DATECREATION, 
    DATEFIN, 
    TRI_DATEFIN, 
    SIGNATURE, 
    FILTRE_SIGNATURE, 
    DATEACTUALISATION, 
    TRI_DATEACTUALISATION, 
    EXTENSIONFICHIER, 
    FILTRE_SOUMISSIGNATURE, 
    FILTRE_SIGN_LISTE_MANDATAIRES, 
    TYPEDOC, 
    DISPLAY_ECRAN_SUIVI, 
    ALLOW_EDIT, 
    IS_AUTORIZED
  ) 

  BULK COLLECT INTO retour

  FROM (
    SELECT 
      ID_LANCEMENT, 
      CODEDI, 
      FAMEDI, 
      LOGIN, 
      DATE_LANCEMENT, 
      MATRIC, 
      DATE_EFF, 
      CHEMIN_FICHIER, 
      ID_DOC_CONTAINER, 
      SIGN_LISTE_MANDATAIRES, 
      SIGN_PROCEDURE, 
      SIGN_DATE_FIN, 
      SIGN_MANDATAIRES, 
      SIGN_CONTRACTANT, 
      DATE_STATUTS, 
      IS_BILLED, 
      IS_PAPERLESS, 
      IS_DIGIPOSTE, 
      BENEFICIAIRE, 
      SEXE, 
      EMAIL, 
      TELEPHONE, 
      TRI_BENEFICIAIRE, 
      CONTRAT, 
      TRI_CONTRAT, 
      FILTRE_CONTRAT, 
      ETABLISSEMENT, 
      MAQUETTE, 
      STATUTEDITION, 
      FILTRE_STATUTEDITION, 
      DATECREATION, 
      TRI_DATECREATION, 
      DATEFIN, 
      TRI_DATEFIN, 
      SIGNATURE, 
      FILTRE_SIGNATURE, 
      DATEACTUALISATION, 
      TRI_DATEACTUALISATION, 
      EXTENSIONFICHIER, 
      FILTRE_SOUMISSIGNATURE, 
      FILTRE_SIGN_LISTE_MANDATAIRES, 
      TYPEDOC, 
      -- DISPLAY_ECRAN_SUIVI
      --   On affiche l'édition sur l'écran de suivi si :
      --   - On n'a pas de login pour faire le test
      --   OU
      --   - Le login a accès à l'écran en mode Admin et le bénéficiaire est autorisé par la sécu
      --   OU
      --   - L'utilisateur connecté a effectué l'édition
      --   OU
      --   - Une procédure de signature est en cours et le login est signataire
      CASE 
        WHEN p_LOGIN IS NULL THEN 'O' 
        WHEN LOGIN=p_LOGIN THEN 'O' 
        WHEN v_MODE_ADMIN = 'true' AND IS_AUTORIZED='O' THEN 'O' 
        WHEN ','||SIGN_LISTE_MANDATAIRES||',' LIKE '%,'||p_LOGIN||',%' AND ID_DOC_CONTAINER IS NOT NULL THEN 'O' 
        ELSE 'N' 
      END AS DISPLAY_ECRAN_SUIVI, 
      -- ALLOW_EDIT
      --   On peut éditer une procédure (annuler, charger un document, modifier les coordonnées des signataires, ou lancer) si :
      --   - On n'a pas de login pour faire le test
      --   OU
      --   - Le login a accès à l'écran en mode Admin et le bénéficiaire est autorisé par la sécu
      --   OU
      --   - L'utilisateur connecté a effectué l'édition
      CASE 
        WHEN p_LOGIN IS NULL THEN 'O' 
        WHEN v_MODE_ADMIN = 'true' AND IS_AUTORIZED='O' THEN 'O' 
        WHEN LOGIN=p_LOGIN THEN 'O' 
        ELSE 'N' 
      END AS ALLOW_EDIT, 
      IS_AUTORIZED
    FROM (
      SELECT H.ID_LANCEMENT, 
        H.CODEDI, 
        H.FAMEDI, 
        H.LOGIN, 
        H.DATE_LANCEMENT, 
        H.MATRIC, 
        H.DATE_EFF, 
        H.CHEMIN_FICHIER, 
        H.ID_DOC_CONTAINER, 
        H.SIGN_LISTE_MANDATAIRES, 
        H.SIGN_PROCEDURE, 
        H.SIGN_DATE_FIN, 
        H.SIGN_MANDATAIRES, 
        H.SIGN_CONTRACTANT, 
        H.DATE_STATUTS, 
        H.IS_BILLED, 
        H.IS_PAPERLESS, 
        H.IS_DIGIPOSTE, 
        -- BENEFICIAIRE
        '('||H.MATRIC||') '||H.NOM||' '||H.PRENOM AS BENEFICIAIRE, 
        H.SEXE, 
        H.EMAIL, 
        H.TELEPHONE, 
        -- TRI_BENEFICIAIRE
        H.MATRIC AS TRI_BENEFICIAIRE, 
        -- CONTRAT
        CASE 
          WHEN H.DATE_DEB_CNT IS NULL THEN NULL 
          WHEN H.DATE_FIN_CNT IS NULL THEN 'A partir du '||TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy') 
          ELSE 'Du '||TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy')||' au '||TO_CHAR(H.DATE_FIN_CNT, 'dd.mm.yyyy') 
        END AS CONTRAT, 
        -- TRI_CONTRAT
        H.DATE_DEB_CNT AS TRI_CONTRAT, 
        -- FILTRE_CONTRAT
        TO_CHAR(H.DATE_DEB_CNT, 'dd.mm.yyyy') AS FILTRE_CONTRAT, 
        -- ETABLISSEMENT
        E.LIBELLE_ENTITE AS ETABLISSEMENT, 
        -- MAQUETTE
        CASE 
          WHEN G.LIBELLE IS NULL THEN A.ATTEST_LIBELLE 
          ELSE G.LIBELLE 
        END AS MAQUETTE, 
        -- STATUTEDITION
        --   Pas de statut dans EDI_DS_LANCEMENT --> Edition Jasper
        --   SIGN_PROCEDURE vide --> Edition Jasper non soumis à signature : on retourne
        --   le statut 03 (Document généré)
        --   SIGN_PROCEDURE renseignée --> Edition Jasper soumis à signature : on retourne
        --   le statut 06 (Document soumis à signature)
        CASE 
          WHEN L.STATUT IS NULL AND H.SIGN_PROCEDURE IS NULL THEN 'Document récupéré' 
          WHEN L.STATUT IS NULL THEN 'Document soumis à signature' 
          ELSE DS.LIBELLE_STATUT 
        END AS STATUTEDITION, 
        -- FILTRE_STATUTEDITION
        CASE 
          WHEN L.STATUT IS NULL AND H.SIGN_PROCEDURE IS NULL THEN '03' 
          WHEN L.STATUT IS NULL THEN '06' 
          ELSE L.STATUT 
        END AS FILTRE_STATUTEDITION, 
        -- DATECREATION
        TO_CHAR(H.DATE_LANCEMENT, 'dd.mm.yyyy') AS DATECREATION, 
        -- TRI_DATECREATION
        H.DATE_LANCEMENT AS TRI_DATECREATION, 
        -- DATEFIN
        TO_CHAR(H.SIGN_DATE_FIN, 'dd.mm.yyyy') AS DATEFIN, 
        -- TRI_DATEFIN
        H.SIGN_DATE_FIN AS TRI_DATEFIN, 
        -- SIGNATURE
        --   On ne retourne pas le libellé du statut G (Génération en cours)
        CASE 
          WHEN H.SIGN_PROCEDURE='G' THEN NULL 
          ELSE PS.LIBELLE_STATUT 
        END AS SIGNATURE, 
        -- FILTRE_SIGNATURE
        H.SIGN_PROCEDURE AS FILTRE_SIGNATURE, 
        -- DATEACTUALISATION
        CASE 
          WHEN H.DATE_STATUTS IS NULL THEN NULL 
          ELSE TO_CHAR(H.DATE_STATUTS, 'dd.mm.yyyy')||' à '||TO_CHAR(H.DATE_STATUTS, 'hh24:mi:ss') 
        END AS DATEACTUALISATION, 
        -- TRI_DATEACTUALISATION
        H.DATE_STATUTS AS TRI_DATEACTUALISATION, 
        -- EXTENSIONFICHIER
        UPPER(SUBSTR(CHEMIN_FICHIER, INSTR(CHEMIN_FICHIER, '.', -1)+1)) AS EXTENSIONFICHIER, 
        -- FILTRE_SOUMISSIGNATURE
        CASE 
          WHEN H.SIGN_PROCEDURE IS NULL THEN 'N' 
          ELSE 'O' 
        END AS FILTRE_SOUMISSIGNATURE, 
        -- FILTRE_SIGN_LISTE_MANDATAIRES
        ','||H.SIGN_LISTE_MANDATAIRES||',' AS FILTRE_SIGN_LISTE_MANDATAIRES, 
        -- TYPEDOC
        CASE 
          WHEN G.TYPE IS NOT NULL THEN G.TYPE 
          WHEN A.ATTEST_ID IS NOT NULL THEN 'A' 
          ELSE '' 
        END AS TYPEDOC, 
        -- IS_AUTORIZED
        --   Application de la sécurité :
        --   - Population PACMAT, si NUMPAC/PACMAT
        --   - Population MATRIC, si pas de NUMPAC/PACMAT mais un MATRIC
        --   - Structure juridique, si pas de NUMPAC/PACMAT ni de MATRIC, mais un ETABLISSEMENT
        --   - PAC si pas de NUMPAC/PACMAT ni de MATRIC ni de ETABLISSEMENT, mais un NUMPAC
        CASE 
          WHEN H.NUMPAC IS NOT NULL AND H.PACMAT IS NOT NULL 
            --AND (H.NUMPAC,H.PACMAT) IN (SELECT NUMPAC,PACMAT FROM SYS_SEC_RESOLUE_POP_PAC WHERE ID_SECU=v_ID_SECU_POP) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_POP_PAC WHERE ID_SECU=v_ID_SECU_POP AND NUMPAC=H.NUMPAC AND PACMAT=H.PACMAT) 
          THEN 'O' 
          WHEN (H.NUMPAC IS NULL OR H.PACMAT IS NULL) AND H.MATRIC IS NOT NULL 
            --AND H.MATRIC IN (SELECT MATRIC FROM SYS_SEC_RESOLUE_POP_MAT WHERE ID_SECU=v_ID_SECU_POP) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_POP_MAT WHERE ID_SECU=v_ID_SECU_POP AND MATRIC=H.MATRIC) 
          THEN 'O' 
          WHEN (H.NUMPAC IS NULL OR H.PACMAT IS NULL) AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NOT NULL 
            --AND H.ETABLISSEMENT IN (SELECT CODE_ENTITE FROM SYS_SEC_RESOLUE_STRUCT WHERE ID_SECU=v_ID_SECU_STRUCT_JUR AND CODTS=v_CODTS_JUR) 
             AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_STRUCT WHERE ID_SECU=v_ID_SECU_STRUCT_JUR AND CODTS=v_CODTS_JUR AND CODE_ENTITE=H.ETABLISSEMENT) 
          THEN 'O' 
          WHEN H.NUMPAC IS NOT NULL AND H.PACMAT IS NULL AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NULL 
            --AND H.NUMPAC IN (SELECT NUMPAC FROM SYS_SEC_RESOLUE_PAC WHERE ID_SECU=v_ID_SECU_PAC) 
            AND EXISTS (SELECT 1 FROM SYS_SEC_RESOLUE_PAC WHERE ID_SECU=v_ID_SECU_PAC AND NUMPAC=H.NUMPAC) 
          THEN 'O' 
          WHEN H.NUMPAC IS NULL AND H.PACMAT IS NULL AND H.MATRIC IS NULL AND H.ETABLISSEMENT IS NULL THEN 'O' 
          ELSE 'N' 
        END AS IS_AUTORIZED 
      FROM 
        EDI_HISTO_LANCEMENTS H 
        LEFT OUTER JOIN STD_STRUC_ENTITE_VIEW E ON E.CODE_ENTITE=H.ETABLISSEMENT 
        LEFT OUTER JOIN EDI_DS_LANCEMENT L ON L.ID_HISTO_LANCEMENT=H.ID_LANCEMENT 
        LEFT OUTER JOIN EDI_DS_STATUTS DS ON DS.CODE_STATUT=L.STATUT 
        LEFT OUTER JOIN GA_EDITIONS_GAP G ON G.CODE=L.ID_MAQUETTE 
        LEFT OUTER JOIN GA_ATTESTATION_TYPES A ON A.FAMEDI=H.FAMEDI AND A.CODEDI=H.CODEDI 
        LEFT OUTER JOIN SIGN_PROCEDURE_STATUTS PS ON PS.CODE_STATUT=H.SIGN_PROCEDURE 
    ) 
  )
  WHERE 1=1 
    -- Filtre sur la date de lancement
    AND TRUNC(DATE_LANCEMENT,'dd') BETWEEN TO_DATE(NVL(p_START_DATE,'01.01.1901'),'dd.MM.yyyy') AND TO_DATE(NVL(p_END_DATE,'31.12.2099'),'dd.MM.yyyy') 
    -- Filtre sur le type de document 
    AND NVL(TYPEDOC,'_AUCUN_') = NVL(p_TYPE_DOC,NVL(TYPEDOC,'_AUCUN_')) 
    --  Filtre sur les documents soumis à signature électronique
    AND (NVL(p_ONLY_PROC_SIGN,'N') != 'O' OR FILTRE_SOUMISSIGNATURE = 'O') 
    -- Filtre sur un signataire
    AND (p_SIGNATAIRE is null OR ','||SIGN_LISTE_MANDATAIRES||',' LIKE '%,'||p_SIGNATAIRE||',%') 
    -- Filtre sur un éditeur
    AND LOGIN=NVL(v_EDITEUR,LOGIN);

  RETURN retour;
 
END EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION;
##
TAG_CHARSET=@€éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
 MatEcrit          VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --éliminer les doublons même matricule déjà écrit et même valeur
    IF MatEcrit=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
      RETURN;
    END IF;
    --on a détecté au moins une différence
    MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    --éliminer le passé et pour les historiques les doublons déjà écrits
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1
      AND ( coldteffet <> 'a.DATE_EFF' 
      OR MatARenvoyer<>MatEcrit OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') )
    THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=tab.DTEFFET;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
    IF coldteffet = 'a.DATE_EFF' THEN
    --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet.
    MatEcrit:=MatARenvoyer;
    --mémoriser la valeur de cette colonne historique
    oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
    END IF;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde s’il existe déjà dans GAP_TRT
  --une ligne pour N° d’échange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    preclemati     VARCHAR2(20);
    preclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
    coldteffet:='d.DSDCN';
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
      coldteffet :='a.DSDCN';
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF p_TABLETYPE='H2' AND p_nomTable ='DIC_PERIODES_RECUEIL_HIS' THEN
      clwhereDate :=clwhereDate||' and to_char(a.'||coldatecle||',''yyyymm'')='''||p_periode||'''';
      END IF;
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable='DIC_ADM_CONTRAT' THEN
      --pour D_A_C on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
          clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        clfrom       :=clfrom||'SELECT C.NUMPAC, C.MATRIC, C.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACH.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY C.NUMPAC, C.MATRIC, C.PACMAT,DACH.PAIEZAD )) d WHERE '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup caluse where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        END IF;
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            MatEcrit     :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            preclemati   :='#';
            preclematj   :='#';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                --constitution de la clé "matricule courant" partie GAP

                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab1cle :=chr(255);
              END IF;
              IF j        <= tab2.last THEN
                --constitution de la clé "matricule" courant partie PHOTO

                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab2cle :=chr(255);
              END IF;
              --Tables avec historiques comme D_A_C_H : la clé contient des dates d'effet donc il faut adapter l'appareillage
              IF coldteffet='a.DATE_EFF' THEN
                IF i <= tab1.last AND curclemati=MatARenvoyer THEN
                  --matricule déjà détecté en différence histo, on envoie tous les historiques. Les doublons sont éliminés automatiquement.
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif j <= tab2.last AND curclematj=MatARenvoyer THEN
                  --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle < tab2cle and preclemati<>curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et c'était le 1er histo du matricule : création
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle < tab2cle AND preclemati=curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent.
                  IF difference_col( tab1(i) , tab1(i-1) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent (j) et histo gap courant (i)
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle AND preclemati<>curclematj THEN
                  --ligne gap supprimée et c'était le 1er histo du matricule : il faut forcer les valeurs à blanc sur cette date perdue.
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle > tab2cle AND preclemati=curclematj THEN
                  --ligne gap supprimée et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent avec la photo.
                  i :=i-1;
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent et histo photo courant (date d'effet=photo)
                    tab1(i).DTEFFET :=tab2(j).DTEFFET ;
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité tab1cle=tab2cle (pacmat + paiezad + date d'effet)
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              ELSE
                --Tables sans historiques comme DIC_ENFANTS ou DIC_ADM_PERSO
                IF tab1cle < tab2cle THEN
                  --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i    :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle THEN
                  --ligne supprimée car i épuisé ou clé i plus grande que clé j
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  CLOB;
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Début Rétro id_trt= '||p_id_trt);
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt||', pReq '||pReq);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO-- Erreur partition ID_'||p_id_trt);
    END ;
    
    --Insertion dans DIF_FSED_MODIF_RETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);
    pReq := 'INSERT INTO DIF_FSED_MODIF_RETRO SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') ';
 	pReq := pReq ||' AND  f.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1 )';
 	pReq := pReq ||' UNION  SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
 	pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') '; 
 	pReq := pReq ||' AND  exists (select 1 from dif_fsed t where t.numpac ='''||p_numpac||''' and t.id_trt ='''||p_id_trt||''' AND t.codeop=''C'' and t.ELEM =''A001'' and f.numpac = t.numpac AND f.id_trt = t.id_trt and f.paiezad=t.paiezad and f.pacmat=t.pacmat ) ';
 	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début remplissage DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt||', pReq '||pReq);
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- FIN insertion DIF_FSED_MODIF_RETRO-- CALCUL DE STATISTIQUES: ID_'||p_id_trt);
	DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED_MODIF_RETRO',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4, partname => 'ID_'||p_id_trt||'');    
    --Insertion dans GAP_TRT_MOIS_RETRO   
    pReq := ' insert into GAP_TRT_MOIS_RETRO (id_trt,numpac,pacmat,PERIODE_RETRO)';
    pReq := pReq ||' WITH grm AS (SELECT pacmat,periode_retro FROM gap_retro_matric    g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    pReq := pReq ||'     ,gsr AS (SELECT pacmat,periode_retro FROM gap_selection_retro g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    --                 min_periode_retro : plus vieille rétro par matricule
    pReq := pReq ||' ,min_periode_retro (pacmat,min_periode) AS (';
    pReq := pReq ||' SELECT pacmat,MIN(periode_retro) FROM';
    pReq := pReq ||' (          SELECT pacmat,periode_retro FROM grm';
    pReq := pReq ||'  UNION ALL SELECT pacmat,periode_retro FROM gsr ) GROUP BY pacmat) ';
    --                 histo_retro : historique des mois où on a fait de la rétro *et* sur quels mois
    pReq := pReq ||' ,histo_retro AS (SELECT DISTINCT pacmat,periode,to_char(dteffet,''yyyymm'') as periode_retro FROM dif_fsed_histo h WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = h.numpac AND gtlm.pacmat = h.pacmat) ';
    pReq := pReq ||'       AND periode>='''||w_MIN_RETRO||''' AND to_char(dteffet,''yyyymm'')<periode';
    pReq := pReq ||'       AND  h.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1) )';
    --                 liste_mois_retro_pacmat : liste exhaustive des mois rétro par matricule (mois rétro paie en cours + mois rétro dans l'historique)
    pReq := pReq ||' ,liste_mois_retro_pacmat (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro      FROM grm';
    pReq := pReq ||' UNION ALL SELECT pacmat,periode_retro      FROM gsr';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode_retro FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode_retro>=mpr.min_periode)';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode       FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode      >=mpr.min_periode))';
    --                SELECT principal
    pReq := pReq ||' SELECT DISTINCT '||p_id_trt||','''||p_numpac||''',pacmat,periode_retro FROM liste_mois_retro_pacmat';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt);
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    --Insertion dans DIF_FSED_PARTIERETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion LISTE_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO LISTE_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro) select id_trt,numpac,pacmat,periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro) AS ( ';
	pReq := pReq ||'       SELECT '''||p_id_trt||''',numpac,pacmat,periode_retro FROM gap_trt_mois_retro WHERE numpac = '''||p_numpac||''' AND id_trt = '''||p_id_trt||''') ';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro from liste_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete LISTE_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion TRANCHES_MOIS_RETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO TRANCHES_MOIS_RETRO (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from (';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH tranches_mois_retro_pacmat (id_trt,numpac,pacmat,periode_retro,prec_periode_retro) AS ( ';
	pReq := pReq ||' SELECT '''||p_id_trt||''',lmr.numpac,lmr.pacmat,lmr.periode_retro,NVL((SELECT to_char(add_months(to_date(MAX(lmr2.periode_retro),''yyyymm''),1),''yyyymm'') FROM liste_mois_retro lmr2 WHERE lmr2.numpac = lmr.numpac and lmr2.pacmat=lmr.pacmat AND lmr2.periode_retro<lmr.periode_retro),'''||w_MIN_RETRO||''') FROM liste_mois_retro lmr where lmr.id_trt = '''||p_id_trt||''')';
	pReq := pReq ||' select id_trt,numpac,pacmat,periode_retro,prec_periode_retro from tranches_mois_retro_pacmat)';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- requete TRANCHES_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO DIF_FSED_PARTIERETRO ';
	--WITH1 liste des vrais mois rétro
	pReq := pReq ||' WITH liste_envoi_systematique(elem) AS( ';
	pReq := pReq ||' SELECT ELEMENT FROM TGE_REF_MAPDO WHERE ''*''= decode (numpac,'''||p_numpac||''',''*'',numpac) AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O'' )';
	--SELECT1 DIF_FSED_MODIF_RETRO
	pReq := pReq ||' SELECT '''||p_id_trt||''', tmr.periode_retro AS periode, m.numpac, m.cle, m.pacmat, m.paiezad, m.elem, m.occ, m.valeur, m.codeop, m.type_donnee, m.dteffet ';
	pReq := pReq ||' FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' and m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat ';
	pReq := pReq ||' AND  ( ' ;
	pReq := pReq ||' greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||' OR  substr(m.elem,0,1)>''W'' OR Exists (select * from liste_envoi_systematique les  where m.elem=les.elem ) ';
	pReq := pReq ||' ) ' ;
	--SELECT2 DIF_FSED_HISTO sauf les lignes déjà présentes dans DIF_FSED_MODIF_RETRO
	pReq := pReq ||' UNION ALL SELECT '''||p_id_trt||''', h.periode, h.numpac, h.cle, h.pacmat, h.paiezad, h.elem, h.occ, h.valeur, h.codeop, h.type_donnee, h.dteffet ';
	pReq := pReq ||' FROM dif_fsed_histo h, liste_mois_retro lmr ';
	pReq := pReq ||' WHERE h.numpac = '''||p_numpac||''' AND lmr.id_trt = '''||p_id_trt||''' AND h.numpac = lmr.numpac and h.pacmat=lmr.pacmat AND periode>='''||w_MIN_RETRO||''' AND h.periode=lmr.periode_retro  ';
	pReq := pReq ||' AND  substr(h.elem,0,1)<''W'' AND NOT Exists (select * from liste_envoi_systematique les  where h.elem=les.elem ) ';
	pReq := pReq ||' AND NOT EXISTS  (SELECT 1 FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
	pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.id_trt = tmr.id_trt AND m.numpac = tmr.numpac and m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
	pReq := pReq ||'   AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') <= h.periode';
	pReq := pReq ||'   AND m.numpac = h.numpac and m.pacmat = h.pacmat AND m.paiezad = h.paiezad AND m.elem = h.elem AND m.occ = h.occ )';
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt||', pReq '||pReq);
	EXECUTE_IMMEDIATE_STRING( pReq,0);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);
	FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Fin Rétro id_trt= '||p_id_trt);
	END IF;
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
  v_existVRREP number :=0 ;
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    select count(*) into v_existVRREP from TGE_REF_VRREP where TGE_REF_VRREP.NUMERO_DE_PAC=elt_tab_11R.NUMERO_DE_PAC and TGE_REF_VRREP.CODE_TABLE=elt_tab_11R.CODE_TABLE;
	if(v_existVRREP=0) then
	tab_11R.extend;
	tab_11R(tab_11R.last)            :=elt_tab_11R;
	end if ;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;
wLibRUB            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  wLibRUB := REPLACE(pLibRUB,'£','#');
  select ( (LENGTH(wLibRUB) - LENGTH(REPLACE(wLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (wLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(wLibRUB) Loop 
      if substr(wLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(wLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));
  elt_tab_15.CSCP        		 := trim(SUBSTR(lig.donnees,164,1));
   IF LENGTH(lig.donnees)>240 THEN
 elt_tab_15.TEXTE_EXPLICATIF    := trim(SUBSTR(lig.donnees,241,400));
 ELSE elt_tab_15.TEXTE_EXPLICATIF  := '' ;
 END IF ;

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%'  and elt_tab_15.LIBRUB not like '%£%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      elt_tab_17DMF.CSCP    		:= trim(SUBSTR(lig.donnees,137,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT ';
  stmtClause :=stmtClause||'/*+  BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$291F8F59" "DACH2"@"SEL$3") LEADING(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550" "T"@"SEL$2" "A"@"SEL$2") INDEX(@"SEL$B29E968D" "A"@"SEL$2" ("DIC_ADM_CONTRAT_HISTO"."NUMPAC" "DIC_ADM_CONTRAT_HISTO"."PAIEZAD" "DIC_ADM_CONTRAT_HISTO"."DATE_EFF")) BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$B29E968D" "T"@"SEL$2") NO_ACCESS(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550") BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$5" "F"@"SEL$5") USE_HASH(@"SEL$4FDF941B" "HISTO"@"SEL$1") LEADING(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4") UNNEST(@"SEL$3") */ ';
  stmtClause :=stmtClause||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT  MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT /*+ LEADING(@"SEL$C19C7BAF" "TGE"@"SEL$3" "A"@"SEL$2" "TGE_FSED_30_TEMPORARY"@"SEL$6" "CONT"@"SEL$2" "D"@"SEL$5")*/'||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null ,
tge.numpac,
tge.pacmat,
tge.PAIEZAD,
tge.MATRICULE,
tge.DATE_EFFET 
FROM TGE_IMPORT_FSED_30 TGE 

WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            reqTrace :=null;
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
            IF w_table = 'DIC_TGE_RESPAIE_UNIQUE' THEN
              R_PRESENT_FICHIER_PAIE( w_numpac , null );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
 IF reqTrace is not null then
    FSED_ERREUR(p_id , 'Trace SYS_TRC_MODIF ',p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
 END IF;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
    W_IS_T1_LIKE_DECIDIUM SYS_VARSYS.VALVAR%TYPE;
    w_DSDSC DIC_ADM_CONTRAT_SITU.DSDSC%TYPE;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  --T1 LIKE DECIDECIDIUM 
  BEGIN 
  SELECT upper(NVL(VALVAR,'FALSE'))
  INTO W_IS_T1_LIKE_DECIDIUM
  FROM SYS_VARSYS 
  WHERE codvar='IS_T1_LIKE_DECIDIUM'
  AND MODULE='GTA';
  Exception 
   WHEN OTHERS THEN 
   W_IS_T1_LIKE_DECIDIUM :='FALSE';
    FSED_AVANCEMENT(p_id,'Warning : la varsys IS_T1_LIKE_DECIDIUM n existe pas ');
  END;
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        END IF; 
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' AND W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN
          w_periode     := w_dateFin ;
        END IF;

        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric,DSDSC
          INTO w_matric,w_DSDSC
          FROM DIC_ADM_CONTRAT_SITU
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        --T1 LIKE DECIDECIDIUM 
        IF W_IS_T1_LIKE_DECIDIUM ='TRUE' THEN 
        w_dateDed := w_periode ;
        END IF;
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed,w_DSDSC,w_unit);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    ELSE 
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF; 
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
   IF W_IS_T1_LIKE_DECIDIUM ='FALSE' THEN 
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
    ELSE 
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  MERGE CAD_MATRIC_DATEVALID');
    merge INTO
    (SELECT MATRICULE,CODE_COMPTEUR,DATE_EFFET,UNITE_TENUE,DATE_DEB_PER,DATE_FIN_PER ,
    DATE_FIN_ACQUIS,DATE_DEB_ACQUIS,MAJ_CONTRAT,VISUHOUJ FROM CAD_MATRIC_DATEVALID ) a
    USING
    (SELECT distinct i.Matricule , i.Code_Compteur,
    to_char(i.DATE_DEBUT,'YYYYMMDD') as DATE_DEB , decode (i.unite, 'H', 'H', 'J') as unite FROM TABLE(tab_DATEVALID) i ) b
    ON (a.Matricule =b.Matricule AND a.Code_Compteur=b.Code_Compteur and a.DATE_EFFET=to_char(w_periode,'YYYYMMDD'))
    WHEN NOT matched THEN
    INSERT
    (a.Matricule,a.Code_Compteur,a.DATE_EFFET ,a.UNITE_TENUE,a.DATE_DEB_PER,a.DATE_FIN_PER ,
    a.DATE_FIN_ACQUIS,a.DATE_DEB_ACQUIS,a.MAJ_CONTRAT,a.VISUHOUJ
    --DATE_DEB_PER ,DATE_DEB_ACQUIS = DACS.DSDSC ,MAJ_CONTRAT =N  ,VISUHOUJ ='H' si unite ='H' sinon 'J'
     ) VALUES
     (b.Matricule,b.Code_Compteur,to_char(w_periode,'YYYYMMDD'),b.unite,b.DATE_DEB,'21991231','21991231',b.DATE_DEB,'N','H'
    )
    when matched then
    UPDATE set a.UNITE_TENUE =b.unite ,a.DATE_DEB_PER =b.DATE_DEB ,a.DATE_FIN_PER='21991231' ,
    a.DATE_FIN_ACQUIS='21991231',a.DATE_DEB_ACQUIS=b.DATE_DEB,a.MAJ_CONTRAT='N',a.VISUHOUJ='H';
  END IF;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
     --DSH : Les VR mises à jour et non encore envoyé à zadig(code_gestionnaire ='G' and temoin_vr_base = O: Valeurs modifiées non envoyées ou K : Echec du dernier envoi des valeurs ou E : en cours d'envoi ) ne doivent pas être supprimés
 	DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac and (code_gestionnaire <>'G' or ( code_gestionnaire ='G' and temoin_vr_base <>'O' and temoin_vr_base <>'K' and temoin_vr_base <>'E') );
    
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 
 OR( carte_00 =false and (tab_11V IS NOT NULL OR tab_11R IS NOT NULL  OR tab_11D IS NOT NULL OR tab_11D1 IS NOT NULL 
 OR tab_15 IS NOT NULL OR tab_15_lib IS NOT NULL OR tab_17CR IS NOT NULL OR tab_17DMF IS NOT NULL))
THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_50
=SQL=
create or replace PROCEDURE TGE_CONTROLE_50 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
  -- Valeurs attendues : EC/ECS -> écran création (S en mode SimuPaie),  EM/EMS -> écran modification (S en mode SimuPaie), GAP -> création en sous-marin,
 -- I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch, MP -> création depuis la Market Place
 , P_TYPE_ACTION IN VARCHAR2
 ) AS
 /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 clWhere varchar2(1000);
 -- Pour les merge, la clause where ne doit pas inclure la colonne ERREURS, on gère des clauses spécifiques
 clWhereMerge varchar2(1000);
 clWhereMergeErreur varchar2(250);
 
 req varchar2(2000);
 w_exist_element NUMBER ;
 w_err VARCHAR2(2000);
 w_param_longueur VARCHAR2(10);
 w_id_natcol varchar2(4000);
 
 BEGIN
 clwhere:='EI.login='''||p_login||''' and EI.date_import='''||P_DATE_IMPORT||'''';
 
 if p_numligne is not null then
 	clwhere:=clwhere||' AND EI.NUMLIGNE='||p_numligne;
 end if;

 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controlées 
 clwhere:=clwhere || ' AND (EI.STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR EI.STATUT = ''TRANS'') ';
  
 clWhereMerge := clwhere;
 clWhereMergeErreur := '';
  IF p_type_action = 'VI' and p_login <> 'BATCH' then
   -- A la validation d'import Web, on ne va passer que sur les lignes qui ne sont pas déjà en erreur.
   -- Certaines lignes sont déjà en erreur et on ne veut pas les retraiter (sinon double message)
   clwhere := clwhere || ' and EI.ERREURS is null';
   clWhereMergeErreur := ' where EI.ERREURS is null';
 END IF;
 
 IF p_login ='BATCH' THEN 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées. Seulement pour le BATCH, car dans les autres cas il y a des contrôles
 -- qui sont fait en amont des contrôles PL/SQL (côté Java)
 	req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS = '''' WHERE '||clwhere;
 	EXECUTE_IMMEDIATE_STRING( req,0);
 	
 -- Contrôle que le collaborateur est cohérent : date effet / paiezad. En Batch, on n'utilise pas IdentifiantCollab pour récupérer les informations
 -- du collaborateur, on prend juste ce qui est dans le fichier. On doit donc contrôler que le collab existe
  	req:= 'update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS, '''||replace(get_message_erreur('STD', 'STD00046', p_codlang),'''','''''')||''',EI.MATRICULE||''|''||EI.NUMPAC||''|''||EI.PACMAT||''|''||EI.PAIEZAD||''|''||EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere;
  	req:= req || ' and EI.NUMPAC is not null and EI.PAIEZAD is not null';
  	req:= req || ' and (not exists(SELECT 1 FROM DIC_ADM_CONTRAT_SITU DACS WHERE DACS.NUMPAC=EI.NUMPAC and DACS.PAIEZAD=EI.PAIEZAD';
  	req:= req || ' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DACS.DSDSC and DACS.DSFSC))';
  	EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
   -- Numpac non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PaieZad non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Periode non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Type Traitement non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Date d'effet non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00314',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_EFFET is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- Code imputation non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00009',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IMPUTATION is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
   -- Nombre unité non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZIM00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NOMBRE_UNITE is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);

 -- Longueur Origine
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',ORIGINE,'''||p_codlang||''') where '||clwhere||' AND ORIGINE is NOT null AND LENGTH (ORIGINE)>1 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 --
 -- Longueur LOGIN (sauf pour le Batch)
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00107',p_codlang),'''','''''')||''',LOGIN,'''||p_codlang||''') where '||clwhere||' AND LOGIN!=''BATCH'' AND LENGTH (LOGIN)>32 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- date_effet/periode de paie TGE00310
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00310',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 -- permet de gérer les cas où DATE_EFFET ou PERIODE ne sont pas des dates valides
 req:= req ||' and (select case when to_date(EI.DATE_EFFET,''YYYYMMDD'') > last_day(to_date(EI.PERIODE,''YYYYMM'')) then ''O'' else ''N'' end from dual where is_date(EI.DATE_EFFET, ''YYYYMMDD'')=1 and is_date(EI.PERIODE, ''YYYYMM'')=1 ) = ''O''';
 EXECUTE_IMMEDIATE_STRING( req,0);
  
 -- Format date d'effet TGE00315
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00315',p_codlang),'''','''''')||''',EI.DATE_EFFET,'''||p_codlang||''') where '||clwhere||' AND EI.DATE_EFFET is not null and IS_DATE(EI.DATE_EFFET,''YYYYMMDD'')=0';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- IdPacMat non vide
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00102',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND (RPAD(NUMPAC,6) || PACMAT) is null ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur NumPac
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',numpac,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(NUMPAC),0)>6 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Longueur PaieZad
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',NULL,PAIEZAD) where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8 ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 -- Format PERIODE_PAIE
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00328',p_codlang),'''','''''')||''',PERIODE,'''||p_codlang||''') WHERE '||clwhere||' AND PERIODE is NOT null AND IS_DATE(PERIODE,''YYYYMM'')=0 ';
 EXECUTE_IMMEDIATE_STRING( req,0);

 -- Longueur IdPacMat
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00103',p_codlang),'''','''''')||''',RPAD(NUMPAC,6) || PACMAT,'''||p_codlang||''') WHERE '||clwhere||' AND NUMPAC   IS NOT NULL AND PACMAT IS NOT NULL AND  LENGTH(RPAD(NUMPAC,6) || PACMAT) >14 ';
 EXECUTE_IMMEDIATE_STRING( req,0);

 -- Format nombre_unité
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZIM000NU',p_codlang),'''','''''')||''',NOMBRE_UNITE,'''||p_codlang||''') WHERE '||clwhere||' AND NOMBRE_UNITE   IS NOT NULL AND IS_NUMBER(NOMBRE_UNITE) IS  NULL   ';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Format nombre_unité Partie décimale/Partie entiere
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','ZIM00015',p_codlang),'''','''''')||''',NOMBRE_UNITE,'''||p_codlang||''') where '||clwhere||' AND NOMBRE_UNITE is not null ';
 req := req ||' and ((is_number(NOMBRE_UNITE) is not null and (length(trunc(is_number(NOMBRE_UNITE))) > 11';
 req := req ||' or (mod(is_number(NOMBRE_UNITE), 1) > 0 and length(substr(mod(is_number(NOMBRE_UNITE),1), instr(mod(is_number(NOMBRE_UNITE), 1),'','')+1)) > 4))))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- controle NATCOL doit avoir la valeur SAL ou STA TGE00027
 select VALVAR into w_id_natcol from sys_varsys where module='STD' and codvar='ID_NATCOL';
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00027',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere;
 req := req ||' and (select DAC.'||w_id_natcol||' from DIC_ADM_CONTRAT DAC inner join DIC_ADM_CONTRAT_SITU DACS on (DACS.NUMPAC = DAC.NUMPAC and DACS.PACMAT = DAC.PACMAT and DACS.NUMCNT = DAC.NUMCNT) where DACS.PAIEZAD = EI.PAIEZAD and DAC.NUMPAC = EI.NUMPAC';
-- Si le PAC n'est pas MPE, le couple NUMPAC/PAIEZAD ne suffit pas à déterminer un contrat, on utilise la date d'effet
 req := req ||' and case when ((select MPE from TGE_REF_PAC P where P.NUMPAC = EI.NUMPAC) = ''N'' and TO_DATE(EI.DATE_EFFET, ''YYYYMMDD'') between DAC.DSDCN and nvl(DAC.DSFCN, to_date(''20991231'', ''YYYYMMDD'')))';
 req := req ||' or (select MPE from TGE_REF_PAC P2 where P2.NUMPAC = EI.NUMPAC) <> ''N'' then 1 else 0 end = 1) not in (''SAL'', ''STA'')';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 IF p_login = 'BATCH' THEN
 -- Autorisation paiezad
 req:='update TGE_IMPORT_IMPUTATIONS EI SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad||''|''||numpac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND EI.paiezad IS NOT NULL AND EI.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =EI.numpac and C.CURRENT_PAIEZAD =EI.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
 EXECUTE_IMMEDIATE_STRING( req,0);
 END IF;
 
 -- Il ne doit pas y avoir de pac * dans la table TGE_REF_DICOZ
 
 -- Existe type_traitement
 req:='update TGE_IMPORT_IMPUTATIONS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND  EI.type_traitement is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_TYPETRT TT where TT.CODETYPTRT = EI.TYPE_TRAITEMENT';
 req:= req || ' and (';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT = EI.TYPE_TRAITEMENT) > 0 and TT.NUMPAC = EI.NUMPAC)';
 req:= req ||   ' or';
 req:= req ||   ' ((select count(*) from TGE_REF_TYPETRT TT2 where TT2.NUMPAC = EI.NUMPAC and TT2.CODETYPTRT= EI.TYPE_TRAITEMENT) = 0 and TT.NUMPAC=''*'')';
 req:= req || ' ))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- Existe code_imputation
 req:='update TGE_IMPORT_IMPUTATIONS EI set EI.ERREURS=TGE_GET_MESSAGE_ERREUR(EI.ERREURS,'''||replace(get_message_erreur('TGE','TGE003CI',p_codlang),'''','''''')||''',CODE_IMPUTATION,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND  EI.CODE_IMPUTATION is not null';
 req:= req || ' and not exists (select 1 from TGE_REF_IMPUTATION I where I.CODEIMP = EI.CODE_IMPUTATION';
 req:= req || ' and (';
 req:= req ||   ' ((select count(*) from TGE_REF_IMPUTATION I2 where I2.NUMPAC = EI.NUMPAC and I2.CODEIMP = EI.CODE_IMPUTATION) > 0 and I.NUMPAC = EI.NUMPAC)';
 req:= req ||   ' or';
 req:= req ||   ' ((select count(*) from TGE_REF_IMPUTATION I2 where I2.NUMPAC = EI.NUMPAC and I2.CODEIMP= EI.CODE_IMPUTATION) = 0 and I.NUMPAC=''*'')';
 req:= req || ' ))';
 EXECUTE_IMMEDIATE_STRING( req,0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
    	-- On remonte l'erreur à l'application
 		raise;
	END IF;
 END TGE_CONTROLE_50; 
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_50
=SQL=
create or replace PROCEDURE TGE_IMPORT_50 (
 P_LOGIN       IN VARCHAR2 ,
 P_DATE_IMPORT IN VARCHAR2 ,
 P_ROLE        IN VARCHAR2 ,
 -- Origine écran
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN VARCHAR2 ,
 P_WITH50      IN VARCHAR2 ,
 P_CODLANG     IN VARCHAR2,
 -- Valeurs attendues : EC -> écran création, EM -> écran modification, GAP -> création en sous-marin, I --> pour le préchargement des imports Web, VI -> pour la validation des imports Web ou Batch
 P_TYPE_ACTION IN VARCHAR2 ,
 P_DATE_MAJ    IN SYS_TRC_MODIF.DATEMAJ%type )
 AS
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 req CLOB;
 reqvalues CLOB;
 reqInsert CLOB;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 BEGIN
 v_start       := DBMS_UTILITY.GET_TIME;
 IF P_DATE_MAJ IS NULL THEN
 SELECT CURRENT_TIMESTAMP INTO dateMaj FROM dual;
 ELSE
 dateMaj:= P_DATE_MAJ;
 END IF;
 IF ( P_WITH50 =1) THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 50');
 TGE_CONTROLE_50 (p_login, p_date_import, NULL, p_codlang, P_TYPE_ACTION);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'imp:TGE_CONTROLE_50 - Erreur : ' || w_err);
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 IF p_validation = 1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion TGE_IMPUTATIONS');
 INSERT
 INTO TGE_IMPUTATIONS
 (
 NUMPAC,
PAIEZAD,
PERIODE,
TYPE_TRAITEMENT,
IMPUTATION,
NO_SEQUENCE,
ORIGINE,
NB_UNITE,
DERNIER_CODE_OPE,
LOGIN_MAJ,
DATE_MAJ,
IDPACMAT,
TYPE_WRITER,
DATE_EFFET,
CLE_IMPORT
 )
 select 
 IMPU.NUMPAC,
 IMPU.PAIEZAD,
 IMPU.PERIODE,
 IMPU.TYPE_TRAITEMENT,
 IMPU.CODE_IMPUTATION,
 is_number(IMPU.NO_SEQUENCE+IMPU.CMPT),
 IMPU.ORIGINE,
 IS_NUMBER(IMPU.NOMBRE_UNITE),
 IMPU.DERNIER_CODE_OPE,
 IMPU.LOGIN_MAJ,
 IMPU.DATE_MAJ,
 IMPU.IDPACMAT,
 IMPU.TYPE_WRITER,
 IMPU.DATE_EFFET,
 IMPU.CLE_IMPORT
 from (SELECT             dense_rank() over (partition by NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,CODE_IMPUTATION  order by NUMLIGNE desc)  as CMPT,
 NUMPAC ,
 PAIEZAD ,
 PERIODE ,
 TYPE_TRAITEMENT ,
 CODE_IMPUTATION ,
 (SELECT NVL(MAX(NO_SEQUENCE),0)
 FROM TGE_IMPUTATIONS
 WHERE NUMPAC = I.NUMPAC
 AND PAIEZAD =I.PAIEZAD
 AND PERIODE = I.PERIODE
 AND TYPE_TRAITEMENT = I.TYPE_TRAITEMENT
 AND IMPUTATION = I.CODE_IMPUTATION ) as NO_SEQUENCE,
 ORIGINE,
 NOMBRE_UNITE,
 'C' as DERNIER_CODE_OPE,
 P_LOGIN as LOGIN_MAJ,
 TO_CHAR (sysdate, 'YYYYMMDDHH24MI') as DATE_MAJ,
 CASE
 WHEN I.NUMPAC IS NOT NULL
 AND PACMAT    IS NOT NULL
 THEN RPAD(I.NUMPAC,6)
 || PACMAT
 ELSE ' '
 END AS IDPACMAT,
 CASE
 WHEN (SELECT O.MODE_T2
 ||'#'
 ||O.ENVOI_MODE_R
 FROM TGE_REF_ORIGINE_GTA O
 WHERE O.NUMPAC     = I.NUMPAC
 AND O.CODE_ORIGINE = I.ORIGINE) = 'R#N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_WRITER,
 TO_DATE(I.DATE_EFFET,'YYYYMMDD') AS DATE_EFFET,
  CASE
          WHEN 'VI' = P_TYPE_ACTION
          THEN P_LOGIN
            ||'#'
            ||P_DATE_IMPORT
            ||'#'
            ||NUMLIGNE
          ELSE NULL
        END AS CLE_IMPORT
 FROM TGE_IMPORT_IMPUTATIONS I
 WHERE LOGIN           =P_LOGIN
 AND DATE_IMPORT       = p_date_import
 AND ((ERREURS        IS NULL
 AND STATUT            = 'TRAIT')
 OR (ERREURS          IS NOT NULL
 AND STATUT            = 'TRANS')))IMPU;
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'ValidImputation - Erreur : ' || w_err);
 IF (P_LOGIN != 'BATCH' or SQLCODE=-20001) THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END;
 
 IF P_TYPE_ACTION = 'VI' THEN
 --- Gestion de la trace : on enregistre une trace généréale lors d'un import car on ne peut pas gérer de trace individuelle
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_IMPUTATIONS');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','TGE_IMPUTATIONS', 'CARTE=50&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE, 'Import Batch/Web 50','C',NULL,NULL,NULL,NULL);
 END IF;
 
 ----------------------------------------------------------------------------
 
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début update TGE_IMPUTATIONS');
 UPDATE TGE_IMPORT_IMPUTATIONS
 SET ERREURS           ='',
 STATUT              ='FIN'
 WHERE LOGIN           = P_LOGIN
 AND DATE_IMPORT       = p_date_import
 AND ((ERREURS        IS NULL
 AND STATUT            = 'TRAIT')
 OR (ERREURS          IS NOT NULL
 AND STATUT            = 'TRANS'));
 END IF ;
 END TGE_IMPORT_50;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_ABSENCES
=SQL=
CREATE OR REPLACE TRIGGER TRG_TGE_ABSENCES AFTER INSERT OR UPDATE ON TGE_ABSENCES FOR EACH ROW 
BEGIN
	IF INSERTING THEN
		DBMS_OUTPUT.PUT_LINE('SUBMIT'||:NEW.ID);
		INSERT INTO MP_EVENTS M (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF) VALUES (:NEW.MATRIC,'timeOffRequest.submit',:NEW.ID,'C',CURRENT_TIMESTAMP); 
	ELSIF UPDATING AND :OLD.STATUT !='N' AND :NEW.STATUT ='N' AND :OLD.WKF_DOSNUM IS NOT NULL  THEN 
		DBMS_OUTPUT.PUT_LINE('CANCEL'||:OLD.ID);
		INSERT INTO MP_EVENTS M (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF) VALUES (:OLD.MATRIC,'timeOffRequest.cancel',:OLD.ID,'S',CURRENT_TIMESTAMP); 
	END IF;
END;
##
TAG_CHARSET=@€éèç
##
EDI_HISTO_LANCEMENTS_SUIVI_TABLE
=SQL IF_TYPE_EXIST=EDI_HISTO_LANCEMENTS_SUIVI_TABLE=
DROP TYPE EDI_HISTO_LANCEMENTS_SUIVI_TABLE
##
EDI_HISTO_LANCEMENTS_SUIVI_RECORD
==
CREATE OR REPLACE TYPE EDI_HISTO_LANCEMENTS_SUIVI_RECORD IS OBJECT (ID_LANCEMENT NUMBER, CODEDI NUMBER, FAMEDI VARCHAR2(50), LOGIN VARCHAR2(32), DATE_LANCEMENT DATE, MATRIC VARCHAR2(32), DATE_EFF DATE, CHEMIN_FICHIER VARCHAR2(512), ID_DOC_CONTAINER VARCHAR2(24), SIGN_LISTE_MANDATAIRES VARCHAR2(100), SIGN_PROCEDURE VARCHAR2(1), SIGN_DATE_FIN DATE, SIGN_MANDATAIRES VARCHAR2(1), SIGN_CONTRACTANT VARCHAR2(1), DATE_STATUTS DATE, IS_BILLED VARCHAR2(1), IS_PAPERLESS VARCHAR2(1), IS_DIGIPOSTE VARCHAR2(1), BENEFICIAIRE VARCHAR2(200), SEXE VARCHAR2(1), EMAIL VARCHAR2(50), TELEPHONE VARCHAR2(50), TRI_BENEFICIAIRE VARCHAR2(32), CONTRAT VARCHAR2(50), TRI_CONTRAT DATE, FILTRE_CONTRAT VARCHAR2(10), ETABLISSEMENT VARCHAR2(255), MAQUETTE VARCHAR2(200), STATUTEDITION VARCHAR2(100), FILTRE_STATUTEDITION VARCHAR2(2), DATECREATION VARCHAR2(10), TRI_DATECREATION DATE, DATEFIN VARCHAR2(10), TRI_DATEFIN DATE, SIGNATURE VARCHAR2(100), FILTRE_SIGNATURE VARCHAR2(1), DATEACTUALISATION VARCHAR2(50), TRI_DATEACTUALISATION DATE, EXTENSIONFICHIER VARCHAR2(512), FILTRE_SOUMISSIGNATURE CHAR(1), FILTRE_SIGN_LISTE_MANDATAIRES VARCHAR2(120), TYPEDOC VARCHAR2(1), DISPLAY_ECRAN_SUIVI VARCHAR2(1), ALLOW_EDIT VARCHAR2(1), IS_AUTORIZED VARCHAR2(1));
##
EDI_HISTO_LANCEMENTS_SUIVI_TABLE
==
CREATE OR REPLACE TYPE EDI_HISTO_LANCEMENTS_SUIVI_TABLE IS TABLE OF EDI_HISTO_LANCEMENTS_SUIVI_RECORD;
##
TAG_CHARSET=@€éèç
##
EDI_HISTO_LANCEMENTS_SUIVI_TABLE
==
CREATE OR REPLACE TYPE EDI_HISTO_LANCEMENTS_SUIVI_TABLE IS TABLE OF EDI_HISTO_LANCEMENTS_SUIVI_RECORD;
##
TAG_CHARSET=@€éèç
##
GA_SAF99
=SQL IFNOTEXIST=GA_SAF99=TAUX_ABATTEMENT=
ALTER TABLE GA_SAF99 ADD (TAUX_ABATTEMENT NUMBER(11,4))
##
MP_REF_EVENTS
==
update MP_REF_EVENTS set op_num=50203 where event='/events/hr/v1/worker.work-assignment.modify' and nvl(op_num,50210)=50210
##
SYS_AIDE_DYN_2
==
delete from SYS_AIDE_DYN_2 where sujet = upper('Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin') and CODLANG = 'fr_fr' and type='publique'
'fr_fr','EXT.ADP.MODULES.SIGNATURE.SUIVIDOCUMENTSETSIGNATURESADMIN','<h3>Filtres</h3>La liste des signataires proposée dans le filtre est constituée à partir de la liste des procédures de signature électronique restituée dans le tableau.<br><br><h3>Boutons de tableau<br></h3>Le bouton "AFFICHER" met à jour le statut d''édition. Il ne génère pas d''appel à Document Container.<br><br>Le bouton "LANCER / RELANCER LES PROCéDURES SÉLÉCTIONNÉES" lance dans Document Container les procédures sélectionnées du tableau, c''est-à-dire pour lesquelles la fusée a été activée.<br><br>Le bouton "RAFRAÎCHIR LES STATUTS" génère un appel en masse à Container afin de mettre à jour le statut pour toutes les procédures de signature électronique en cours.<br><br>L''export au format Excel des données du tableau peut être lancé grâce à l''icône Excel dans une feuille.<br><br><h3>Fonctionnement de l''écran<br></h3>Après qu''une édition avec signature électronique a été lancée, une ligne est ajoutée dans l''écran. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi n''est pas active, <br>la procédure de signature électronique est automatiquement lancée à Document Container. <br><br>Quand l''édition est terminée et que l''option de modification avant envoi est active, <br>le document est téléchargeable pour modification avant son chargement par l''utilisateur au format PDF. <br>Le document chargé devra avoir le même nom que le document d''origine à l''extension près. <br>Cela garantit que le document est en relation avec la procédure initiée.<br>L''utilisateur devra ensuite lancer manuellement la procédure.<br><br>Avec les icônes de chaque ligne de gauche à droite, l''utilisateur peut respectivement : <br>- annuler la procédure, <br>- télécharger le document, <br>- charger un document modifié, <br>- consulter le détail de la procédure, <br>- modifier un signataire <br>- et sélectionner la procédure pour lancement.<br>','publique','2020-11-17 18:28:22.0'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR IN ('ESGSGN23','ESGSGN24') AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0 AND CODMOD ='ESG'
'ESGSGN23', 'ESG', 'fr_fr', 0, 'Vous n''êtes pas autorisé à # cette procédure', 1
'ESGSGN24', 'ESG', 'fr_fr', 0, 'Vous n''êtes pas autorisé à # ce signataire', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'API' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('API00009')
'API00009', 'API', 'fr_fr', 0, 'Le cas d''utilisation n''existe pas.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('GENAPP07')
'GENAPP07', 'GEN', 'fr_fr', 0, 'Quand le salarie est diminué, le type d''évolution "collectif" n''est pas cohérent. Si le type d''évolution est "individuel", alors le motif doit être soit un changement d''horaire, soit un déclassement. Veuillez corriger votre saisie.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('GENAPP03', 'GENWK116')
'GENAPP03', 'GEN', 'fr_fr', 0, 'Quand la date d''effet est égale à la date de début de contrat, vous ne devez modifier que le salaire car ce n''est pas une augmentation. Veuillez corriger votre saisie : pas de motif d''augmentation et pas de type d''évolution de rémunération. ', 1
'GENWK116', 'GEN', 'fr_fr', 0, 'La date d''effet de la modification est égale à la date de début du contrat. Dans ce cas, il ne peut pas y avoir d''augmentation de rémunération mais juste une modification du salaire. Cette action n''est pas possible via le WKF. Elle doit être réalisée sur contrat courant.', 1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR IN ('IMPGR039') AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0 AND CODMOD ='TGE'
'IMPGR039', 'TGE', 'fr_fr', 0, 'La propagation n''a pas été effectuée : <br>', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('GENHOR49','GENHOR50','GENHOR51')
'GENHOR49','GEN','fr_fr','0','Pour un salarié à temps partiel avec maintien de cotisations à temps plein, veuillez renseigner le motif du maintien.','1'
'GENHOR50','GEN','fr_fr','0','Pour un salarié à temps partiel,  veuillez vous assurer que les options de  maintien des cotisations à temps plein doivent être cochées ou non. Si oui, vous devrez également renseigner le motif de ce maintien.','2'
'GENHOR51','GEN','fr_fr','0','Si les options de maintien de cotisations sont cochées, le salarié doit être à temps partiel et le motif du maintien est obligatoire, veuillez corriger vos saisies.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('IMPEX085', 'IMPEX034')
'IMPEX085','TGE','fr_fr','0','Une erreur s''est produite pendant la suppression de la ligne d''imputation importée.','1'
'IMPEX034','TGE','fr_fr','0','Le type de l''import n''est pas correct : #1 (DV -> #2, Elément -> #3, DR -> #4, DR cotis. -> #5, Incident -> #6, Absence -> #7, GAP -> #8, GAP RETRO -> #9, Annulation -> #10, Imputation -> #11).','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('IMPEX086', 'IMPEX087')
'IMPEX086','TGE','fr_fr','0','L''imputation a été modifiée depuis l''import, impossible de la supprimer.','1'
'IMPEX087','TGE','fr_fr','0','L''imputation n''a pas été créée, elle ne peut donc pas être supprimée.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE003HS', 'TGE003DS', 'TGE003NU','ZIM000NU','ZIM00015')
'TGE003HS','TGE','fr_fr','0','L''heure de saisie n''est pas correcte #1 .','1'
'TGE003DS','TGE','fr_fr','0','La date de saisie n''est pas correcte #1 .','1'
'TGE003NU','TGE','fr_fr','0','Le nombre d''unités n''est pas valide #1 .','1'
'ZIM000NU','TGE','fr_fr','0','Le nombre d''unités n''est pas un nombre valide : #1 .','1'
'ZIM00015','TGE','fr_fr','0','Le nombre d''unités n''est pas un nombre valide : #1 (11 entiers et 4 décimaux).','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE003CI')
'TGE003CI','TGE','fr_fr','0','Le code imputation saisi #1 n''existe pas.','1'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'DOCSE101' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0 AND CODMOD ='ADM'
'DOCSE101','ADM','fr_fr','0','Une maquette ne peut pas contenir plusieurs paragraphes ''Style'' si ceux-ci ne sont pas tous conditionnés.','1'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GENWK116' AND CODLANG = 'fr_fr' AND CODMOD ='GEN'
'GENWK116','GEN','fr_fr','0','Seule la dernière occurrence de la période d''emploi peut être supprimée.','1'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('dateEffComp', 'label_dateEffComp','paramAppel')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'dateEffComp','Composant date d''effet'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'label_dateEffComp','Composant date d''effet'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'paramAppel','paramètre d''appel'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('label_dateEffComp')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_dateEffComp','Composant date d''effet'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Ext.adp.MainDesk.view.eastregion.slideDateEffet.DateEffetDetails'
'Ext.adp.MainDesk.view.eastregion.slideDateEffet.DateEffetDetails', 'Détails des données modifiées'
##
SYS_PAGES_MODAL
==
DELETE FROM SYS_PAGES_MODAL WHERE NOM_PAGE  = 'Modules/ZPaie/modal/ConsultationFeuilleChargeeImputations.jsp'
'Modules/ZPaie/modal/ConsultationFeuilleChargeeImputations.jsp','Consulter une feuille chargée d''imputations'
##
SYS_PAGES_MODAL
==
delete from SYS_PAGES_MODAL where NOM_PAGE = 'Ext.adp.Modules.ZPaie.modal.ExportImputations'
'Ext.adp.Modules.ZPaie.modal.ExportImputations', 'Génération d''une feuille de travail d''imputations'
##
SYS_PAGES_MODAL_RESTRICTION
==
DELETE FROM SYS_PAGES_MODAL_RESTRICTION WHERE NOM_PAGE_MODALE IN ('Ext.adp.Modules.ZPaie.modal.ExportImputations')
'Ext.adp.Modules.ZPaie.modal.ExportImputations','Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'TAB_RD_PRIMES' and IDREQUETE in(1)
'TAB_RD_PRIMES',1,'Utilisateur','GA_ZWPRIMES','CODE_PRIME,LIBELLE,CODE_RUBRIQUE_ZADIG,TYPE','CODE_PRIME,LIBELLE,CODE_RUBRIQUE_ZADIG,TYPE',NULL,0,NULL,'CODE_PRIME','Recherche d''une prime en fonction du code prime. Ramène code rubrique zadig, libellé et type.','Recherche d''une prime',NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_Signataires' and IDREQUETE = 1
'ESG_Signataires','1','Utilisateur','SIGN_SIGNATAIRE','NOM,PRENOM,FONCTION','AOID,NOM,PRENOM,FONCTION','EXISTS (SELECT 1 FROM EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(@LOGIN@,''%5'',''%1'',''%2'',''%3'',''%4'',''%6'',''%7'') T WHERE T.DISPLAY_ECRAN_SUIVI=''O'' AND '',''||T.SIGN_LISTE_MANDATAIRES||'','' LIKE ''%,''||SIGN_SIGNATAIRE.AOID||'',%'')','0','true','NOM,AOID',NULL,NULL,NULL
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE='TAB_RD_CATAFP' AND IDREQUETE=1
'TAB_RD_CATAFP','1','Utilisateur','GA_SAF99','CODE_CATAFP,LIBELLE_CATAFP,TAUX_ABATTEMENT','CODE_CATAFP,LIBELLE_CATAFP,TAUX_ABATTEMENT',NULL,'0','false','CODE_CATAFP',NULL,'Catégorie salarié avec abattement',NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_Signataires' and IDREQUETE = 2
'ESG_Signataires','2','Utilisateur','SYS_USR_CONFIG_IHM','NOM,PRENOM','LOGIN,NOM,PRENOM','EXISTS (SELECT 1 FROM EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(@LOGIN@,''%5'',''%1'',''%2'',''%3'',''%4'',''%6'',''%7'') T WHERE T.DISPLAY_ECRAN_SUIVI=''O'' AND T.LOGIN=SYS_USR_CONFIG_IHM.LOGIN)','0','true','NOM,LOGIN',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'RechercheImputationTGE' and IDREQUETE in(4)
'RechercheImputationTGE',4,'Utilisateur','TGE_REF_IMPUTATION I','I.NUMPAC,I.CODEIMP,I.LIBIMP','I.NUMPAC,I.CODEIMP,I.LIBIMP',NULL,0,NULL,'I.NUMPAC,I.CODEIMP,I.LIBIMP',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='ESG_Signataires' and IDREQUETE IN (1,2)
'ESG_Signataires','1','Utilisateur','SIGN_SIGNATAIRE','NOM,PRENOM,FONCTION','AOID,NOM,PRENOM,FONCTION','EXISTS (SELECT 1 FROM EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(@LOGIN@,''%1'',''%2'',''%3'',''%4'',''%5'',''%6'') T WHERE T.DISPLAY_ECRAN_SUIVI=''O'' AND '',''||T.SIGN_LISTE_MANDATAIRES||'','' LIKE ''%,''||SIGN_SIGNATAIRE.AOID||'',%'')','0','true','NOM,AOID',NULL,NULL,NULL
'ESG_Signataires','2','Utilisateur','SYS_USR_CONFIG_IHM','NOM,PRENOM','LOGIN,NOM,PRENOM','EXISTS (SELECT 1 FROM EDI_HISTO_LANCEMENTS_SUIVI_FUNCTION(@LOGIN@,''%1'',''%2'',''%3'',''%4'',''%5'',''%6'') T WHERE T.DISPLAY_ECRAN_SUIVI=''O'' AND T.LOGIN=SYS_USR_CONFIG_IHM.LOGIN)','0','true','NOM,LOGIN',NULL,NULL,NULL
##
SYS_SCH_JSON
==
DELETE FROM SYS_SCH_JSON WHERE NOM_PAGE = 'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportAbsencesJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportElementsJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportIncidentsJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportImputationsJsonServlet'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin' 
'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin', 'SuiviDocumentsEtSignaturesJsonServlet' 
'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin', 'DetailSignatureJsonServlet'
'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin', 'SignataireCMJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin'
'Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin', 'STD_PAGINATION_NBLIGPAGE', 'ESG00001;TGE00267', 'SuiviDocumentsEtSignaturesJsonServlet'
##
SYS_SCH_PROFIL_P
==
DELETE FROM SYS_SCH_PROFIL_P WHERE NOM_PAGE in ('Ext.adp.Modules.Signature.SuiviDocumentsEtSignatures','Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin','Ext.adp.Modules.Signature.OptionSignatureExtjs','Ext.adp.Modules.Signature.GroupeSignataires','Ext.adp.Modules.Signature.SignataireMVVM') and CODE_PROFIL in ('-2')
'-2','Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin','E'
'-2','Ext.adp.Modules.Signature.OptionSignatureExtjs','E'
'-2','Ext.adp.Modules.Signature.GroupeSignataires','E'
'-2','Ext.adp.Modules.Signature.SignataireMVVM','E'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE SYNONYME = 'BqeOcrInterpreteur'
'I','BqeOcrInterpreteur','fr.adp.com.gxp.std.modules.lib.servicelet.gap.interpreteur.BqeOcrInterpreteur','O'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE TYP='S' and SYNONYME='ConsultationFeuilleChargeeImpuServiceLet' 
'S','ConsultationFeuilleChargeeImpuServiceLet','fr.adp.com.gxp.std.modules.lib.servicelet.zpaie.ConsultationFeuilleChargeeImpuServiceLet','O'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE TYP='J' and SYNONYME='ZTGEExportImputationsJsonServlet' 
'J','ZTGEExportImputationsJsonServlet','fr.adp.com.gxp.std.modules.lib.servicelet.zpaie.ZTGEExportImputationsJsonServlet','O'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE synonyme = 'MajOccuModeSuppInterpreteur'
'I','MajOccuModeSuppInterpreteur','fr.adp.com.gxp.std.modules.lib.servicelet.gap.interpreteur.MajOccuModeSuppInterpreteur','O'
##
SYS_VARSYS
==   
DELETE SYS_VARSYS WHERE  CODVAR IN ('AJAX_DEFAULT_TIMEOUT','AJAX_WKF_TIMEOUT','AJAX_POPUP_TIMEOUT')
##
TGE_IMPORT_IMPUTATIONS
=SQL IFNOTEXIST=TGE_IMPORT_IMPUTATIONS=
CREATE TABLE TGE_IMPORT_IMPUTATIONS (LOGIN VARCHAR2(32), DATE_IMPORT VARCHAR2(200), NUMLIGNE NUMBER  , MATRICULE VARCHAR2(32), NUMPAC VARCHAR2(6), PAIEZAD VARCHAR2(8), PACMAT VARCHAR2(8), CODE_ENREGISTREMENT VARCHAR2(2), CLE VARCHAR2(1), NOMBRE_UNITE NUMBER(11,4) , CODE_UNITE VARCHAR2(3), CODE_IMPUTATION VARCHAR2(18), CODE_ANNULATION VARCHAR2(1), CODE_CHRONOLOGIQUE VARCHAR2(6), ORIGINE VARCHAR2(1), CODE_REMPLACEMENT VARCHAR2(1), CODE_UTILISATEUR VARCHAR2(8), DATE_SAISIE VARCHAR2(8) , HEURE_SAISIE VARCHAR2(6), DATE_EFFET VARCHAR2(8) , PERIODE VARCHAR2(6), PERIODE_EFFET VARCHAR2(8), TYPE_TRAITEMENT VARCHAR2(2), POPULATION VARCHAR2(3), CLASSE_DISTRIB VARCHAR2(3), TYPE_PAIE VARCHAR2(1), CODE_MONNAIE VARCHAR2(1), DONNEE_RETRO VARCHAR2(1), ERREURS VARCHAR2(3000), STATUT VARCHAR2(8), WARNINGS VARCHAR2(3000), FSED_PAIEZAD VARCHAR2(8),PRIMARY KEY (LOGIN,DATE_IMPORT,NUMLIGNE))
##
TGE_IMPORT_IMPUTATIONS
=SQL=
DECLARE
NOMBRE_UNITE_TYPE VARCHAR(10);
BEGIN
EXECUTE IMMEDIATE 'SELECT data_type  FROM user_tab_cols WHERE table_name = ''TGE_IMPORT_IMPUTATIONS'' AND column_name = ''NOMBRE_UNITE''' into NOMBRE_UNITE_TYPE ;
IF(NOMBRE_UNITE_TYPE='NUMBER') THEN
 EXECUTE IMMEDIATE 'CREATE TABLE TGE_IMPORT_IMPUTATIONS_2
   ( LOGIN VARCHAR2(32) NOT NULL ENABLE, 
	DATE_IMPORT VARCHAR2(200) NOT NULL ENABLE, 
	NUMLIGNE NUMBER NOT NULL ENABLE, 
	MATRICULE VARCHAR2(32), 
	NUMPAC VARCHAR2(6), 
	PAIEZAD VARCHAR2(8), 
	PACMAT VARCHAR2(8), 
	CODE_ENREGISTREMENT VARCHAR2(2), 
	CLE VARCHAR2(1),
	NOMBRE_UNITE VARCHAR2(500), 
	CODE_UNITE VARCHAR2(3), 
	CODE_IMPUTATION VARCHAR2(18), 
	CODE_ANNULATION VARCHAR2(1), 
	CODE_CHRONOLOGIQUE VARCHAR2(6), 
	ORIGINE VARCHAR2(1), 
	CODE_REMPLACEMENT VARCHAR2(1), 
	CODE_UTILISATEUR VARCHAR2(8), 
	DATE_SAISIE VARCHAR2(8) , 
	HEURE_SAISIE VARCHAR2(6), 
	DATE_EFFET VARCHAR2(8) , 
	PERIODE VARCHAR2(6), 
	PERIODE_EFFET VARCHAR2(8), 
	TYPE_TRAITEMENT VARCHAR2(2), 
	POPULATION VARCHAR2(3), 
	CLASSE_DISTRIB VARCHAR2(3), 
	TYPE_PAIE VARCHAR2(1), 
	CODE_MONNAIE VARCHAR2(1), 
	DONNEE_RETRO VARCHAR2(1), 
	ERREURS VARCHAR2(3000), 
	STATUT VARCHAR2(8), 
	WARNINGS VARCHAR2(3000), 
	FSED_PAIEZAD VARCHAR2(8),
	PRIMARY KEY (LOGIN,DATE_IMPORT,NUMLIGNE))';
	 
 EXECUTE IMMEDIATE 'INSERT INTO TGE_IMPORT_IMPUTATIONS_2 ( LOGIN , 
	DATE_IMPORT , 
	NUMLIGNE , 
	MATRICULE , 
	NUMPAC , 
	PAIEZAD , 
	PACMAT , 
	CODE_ENREGISTREMENT , 
	CLE ,
	NOMBRE_UNITE , 
	CODE_UNITE , 
	CODE_IMPUTATION , 
	CODE_ANNULATION , 
	CODE_CHRONOLOGIQUE , 
	ORIGINE , 
	CODE_REMPLACEMENT , 
	CODE_UTILISATEUR , 
	DATE_SAISIE , 
	HEURE_SAISIE , 
	DATE_EFFET , 
	PERIODE , 
	PERIODE_EFFET , 
	TYPE_TRAITEMENT , 
	POPULATION , 
	CLASSE_DISTRIB , 
	TYPE_PAIE , 
	CODE_MONNAIE , 
	DONNEE_RETRO , 
	ERREURS , 
	STATUT , 
	WARNINGS , 
	FSED_PAIEZAD ) (SELECT LOGIN , 
	DATE_IMPORT , 
	NUMLIGNE , 
	MATRICULE , 
	NUMPAC , 
	PAIEZAD , 
	PACMAT , 
	CODE_ENREGISTREMENT , 
	CLE ,
	TO_CHAR(NOMBRE_UNITE), 
	CODE_UNITE , 
	CODE_IMPUTATION , 
	CODE_ANNULATION , 
	CODE_CHRONOLOGIQUE , 
	ORIGINE , 
	CODE_REMPLACEMENT , 
	CODE_UTILISATEUR , 
	DATE_SAISIE , 
	HEURE_SAISIE , 
	DATE_EFFET , 
	PERIODE , 
	PERIODE_EFFET , 
	TYPE_TRAITEMENT , 
	POPULATION , 
	CLASSE_DISTRIB , 
	TYPE_PAIE , 
	CODE_MONNAIE , 
	DONNEE_RETRO , 
	ERREURS , 
	STATUT , 
	WARNINGS , 
	FSED_PAIEZAD from TGE_IMPORT_IMPUTATIONS)' ;
	 
  EXECUTE IMMEDIATE 'RENAME  TGE_IMPORT_IMPUTATIONS TO  TGE_IMPORT_IMPUTATIONS_tmp' ;
  EXECUTE IMMEDIATE 'RENAME TGE_IMPORT_IMPUTATIONS_2  to  TGE_IMPORT_IMPUTATIONS' ;
  EXECUTE IMMEDIATE 'DROP TABLE TGE_IMPORT_IMPUTATIONS_tmp';
  EXECUTE IMMEDIATE 'COMMIT';
END IF ;
END;
##
TGE_IMPUTATIONS
=SQL IFEXIST=TGE_IMPUTATIONS=NB_UNITE=
ALTER TABLE TGE_IMPUTATIONS MODIFY NB_UNITE NUMBER(15,4)
##
TGE_IMPUTATIONS
=SQL IFNOTEXIST=TGE_IMPUTATIONS=CLE_IMPORT=
ALTER TABLE TGE_IMPUTATIONS ADD CLE_IMPORT VARCHAR2(70)
##
TAG_CHARSET=@€éèç
##
TGE_REF_CARTE_FSED
=SQL IFEXIST=TGE_REF_CARTE_FSED=FORMATAGE_SQL=
ALTER TABLE TGE_REF_CARTE_FSED MODIFY FORMATAGE_SQL VARCHAR2(3500 BYTE)
##
TGE_REF_CARTE_FSED
==
DELETE from TGE_REF_CARTE_FSED where CODE_CARTE in ('00','00_ALP','11','29_30_DIF_FSED','29_30_DIF_FSED_RETRO','29_30_TGE_ELEMENT_PAIE','29_30_TGE_ELEMENT_PAIE_RETRO','309','309_RETRO','30_SIMULATION_PAIE','40','40_RETRO','409','409_RETRO','40_SIMULATION_PAIE','50','509','60','60_RETRO','609','609_RETRO','60_ABSENCES','60_SIMULATION_PAIE','70','70_RETRO','70_SIMULATION_PAIE','99','ANNULATION','ANNULATION_RETRO','ANNULATION_PERIODE_EMPLOI','IJEDI','W566','W566_RETRO','WL70','WL70_RETRO') and ORIGINE_CARTE='RD'
##
TGE_REF_CARTE_FSED
'00','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','005','TGE',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'00_ALP','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','005','ALP',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00_ALP','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00_ALP','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00_ALP','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00_ALP','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00_ALP','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00_ALP','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00_ALP','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'11','RD','SELECT','001',NULL,'TGE_REF_VRVAL','NUMERO_DE_PAC','6','0','FALSE',NULL,NULL
'11','RD','SELECT','002','11',NULL,NULL,'2','0','FALSE',NULL,NULL
'11','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','004',NULL,'TGE_REF_VRVAL','CODE_TABLE','3',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,0,3)'
'11','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,3,5)'
'11','RD','SELECT','007',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','008','V',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','009',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','011',NULL,'TGE_REF_VRVAL','NUMERO_DE_LIGNE','1',NULL,'FALSE','SUBSTR(@COLONNE_CIBLE@,9,1)',NULL
'11','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','013',NULL,'TGE_REF_VRVAL','LONGUEUR_INFO','3','0','FALSE',NULL,NULL
'11','RD','SELECT','014',NULL,'TGE_REF_VRVAL','ENREGISTREMENT','86',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','015',NULL,NULL,NULL,'66',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','016',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','018','3',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','019',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'11','RD','SELECT','020',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'11','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','024',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','025',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'11','RD','SELECT','026',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL',NULL
'11','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRREP',NULL
'11','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.NUMERO_DE_PAC = TGE_REF_VRREP.NUMERO_DE_PAC',NULL
'11','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.CODE_TABLE = TGE_REF_VRREP.CODE_TABLE',NULL
'11','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.TEMOIN_VR_BASE in(''O'',''K'')',NULL
'29_30_DIF_FSED','RD','SELECT','001',NULL,'DIF_FSED','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','001',NULL,'DIF_FSED_PARTIERETRO','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','004',NULL,'DIF_FSED','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','004',NULL,'DIF_FSED_PARTIERETRO','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','007',NULL,'DIF_FSED','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','007',NULL,'DIF_FSED_PARTIERETRO','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','009',NULL,'DIF_FSED','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','009',NULL,'DIF_FSED_PARTIERETRO','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','012',NULL,'DIF_FSED','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED_RETRO','RD','SELECT','012',NULL,'DIF_FSED_PARTIERETRO','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED','RD','SELECT','013',NULL,'DIF_FSED','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','013',NULL,'DIF_FSED_PARTIERETRO','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE_DONNEE'
'29_30_DIF_FSED','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_DIF_FSED','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_DIF_FSED','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_DIF_FSED','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','021','DIF_FSED_PARTIERETRO',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_DIF_FSED','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_DIF_FSED','RD','SELECT','024',NULL,'DIF_FSED','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED_RETRO','RD','SELECT','024',NULL,'DIF_FSED_PARTIERETRO','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_DIF_FSED_RETRO','RD','SELECT','025',NULL,'DIF_FSED_PARTIERETRO','PERIODE','6',0,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_DIF_FSED','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',' TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','/*+ FULL(DIF_FSED_PARTIERETRO)*/ TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CODEOP',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CODEOP',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CLE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CLE',NULL
'29_30_DIF_FSED','RD','FROM_WITH','001',NULL,'DAC',NULL,NULL,NULL,NULL,'WITH DAC AS (select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') group by C.MATRIC,C.PACMAT,DACH.PAIEZAD)',NULL
'29_30_DIF_FSED','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED',NULL
'29_30_DIF_FSED_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO',NULL
'29_30_DIF_FSED','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_DIF_FSED','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'PAIEZAD,ELEM,CLE,CODEOP,OCC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','001',NULL,'TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','004',NULL,'TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','007',NULL,'TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','009',NULL,'TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','011',NULL,'TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','012',NULL,'TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','019',NULL,'TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','020',NULL,'TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','021',NULL,'TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','022',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','023',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','024',NULL,'TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','SELECT','025',NULL,'TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ELEMENTS_PAIE.ORIGINE is null or TGE_ELEMENTS_PAIE.ORIGINE = ''T'' or TGE_ELEMENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT is not null) ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_ELEMENTS_PAIE.ACTION_RETRO is null ',NULL
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' AND TGE_ELEMENTS_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=tge_elements_paie.idpacmat) AND TGE_ELEMENTS_PAIE.ACTION_RETRO is not null ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'309','RD','SELECT','001',NULL,'MAJELEM','PAC','6','0','FALSE',NULL,NULL
'309','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'309','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','004',NULL,'MAJELEM','MATPAIE','8','0','FALSE',NULL,NULL
'309','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'309','RD','SELECT','007',NULL,'MAJELEM','NUMERO','4','0','FALSE',NULL,NULL
'309','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','009',NULL,'MAJELEM','INDICATI','16',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','011',NULL,'MAJELEM','SENS','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','012',NULL,'MAJELEM','INFORMAT','40',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','015',NULL,NULL,NULL,'76',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','016',NULL,'MAJELEM','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'309','RD','SELECT','017',NULL,'MAJELEM','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'309','RD','SELECT','018',NULL,'MAJELEM','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'309','RD','SELECT','019',NULL,'MAJELEM','CODR','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','020','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','021',NULL,'MAJELEM','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'309','RD','SELECT','022',NULL,'MAJELEM','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'309','RD','SELECT','023',NULL,'MAJELEM','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'309','RD','SELECT','024',NULL,'MAJELEM','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','026','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','030','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM',NULL
'309','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'309_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'309','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'309_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(MAJELEM.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'309_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT ',NULL
'309','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'309_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'309','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.MATRICUL,MAJELEM.NUMERO',NULL
'30_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'30_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'30_SIMULATION_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'30_SIMULATION_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'30_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'30_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'30_SIMULATION_PAIE','RD','SELECT','021',NULL,'SIMU_TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'30_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'30_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'30_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'30_SIMULATION_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','SIMU_TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'30_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'30_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE',NULL
'30_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'30_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'30_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'30_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'40','RD','SELECT','001',NULL,'TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','004',NULL,'TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','007',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','012',NULL,'TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','016',NULL,'TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40','RD','SELECT','017',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','018',NULL,'TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40','RD','SELECT','019',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','020',NULL,'TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','022',NULL,'TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40','RD','SELECT','023',NULL,'TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40','RD','SELECT','029',NULL,'TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','031',NULL,'TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','032',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40','RD','SELECT','033',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40','RD','SELECT','034',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','035',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'40_RETRO','RD','SELECT','035',NULL,'TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','037',NULL,'TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'  /*+ opt_param(''_optimizer_push_pred_cost_based'',''false'') */ TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) group by DACH2.PACMAT,DACH2.NUMCNT,DACH2.NUMPAC ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'40','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'40','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'40','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'40','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'40','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'40','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') @@@OPERATEUR_RETRO@@@ TGE_REF_PAC.PERIODEENCOURS and TGE_INCIDENTS_PAIE.ACTION_RETRO is null ',NULL
'40_RETRO','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,' and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_INCIDENTS_PAIE.idpacmat) and NVL(TGE_INCIDENTS_PAIE.DERNIER_CODE_OPE,''M'')!=''S'' ',NULL
'40','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE = TGE_REF_PAC.PERIODEENCOURS',NULL
'40_RETRO','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'40','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'40','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET <= TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40_RETRO','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'40','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ ',NULL
'40_RETRO','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE in (SELECT periode_retro FROM gap_trt_mois_retro g WHERE id_trt =@@@ID_TRT@@@ and G.NUMPAC=TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC and G.pacmat=TGE_PERIODE_RECUEIL_PAIEZAD.pacmat) ',NULL
'40','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'409','RD','SELECT','001',NULL,'POINTAGE','PAC','6','0','FALSE',NULL,NULL
'409','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'409','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','004',NULL,'POINTAGE','MATPAIE','8','0','FALSE',NULL,NULL
'409','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'409','RD','SELECT','007',NULL,'POINTAGE','PTJDEB','8',NULL,'FALSE','TO_CHAR(PTJDEB,''YYYYMMDD'')',NULL
'409','RD','SELECT','008',NULL,'POINTAGE','PTJFIN','8',NULL,'FALSE','TO_CHAR(PTJFIN,''YYYYMMDD'')',NULL
'409','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','016',NULL,'POINTAGE','PTJHT','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_TRAVAILLEES'
'409','RD','SELECT','017',NULL,'POINTAGE','PTJHT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','018',NULL,'POINTAGE','PTJHI','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_INCIDENT'
'409','RD','SELECT','019',NULL,'POINTAGE','PTJHI','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','020',NULL,'POINTAGE','PTJCI','5',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','022',NULL,'POINTAGE','IMP','18',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','023',NULL,'POINTAGE','DOMIMP','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','024',NULL,'POINTAGE','REF','6',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','025',NULL,'POINTAGE','DOMREF','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','027',NULL,'POINTAGE','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'409','RD','SELECT','028',NULL,'POINTAGE','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'409','RD','SELECT','029',NULL,'POINTAGE','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'409','RD','SELECT','030',NULL,'POINTAGE','CODR','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','031','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','032',NULL,'POINTAGE','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'409','RD','SELECT','033',NULL,'POINTAGE','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'409','RD','SELECT','034',NULL,'POINTAGE','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'409','RD','SELECT','035',NULL,'POINTAGE','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','037','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','041','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as TYPE_IP_FROM_TABLE',NULL
'409','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as CODE_IP_FROM_TABLE',NULL
'409','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE',NULL
'409','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'409_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'409','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'409_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(POINTAGE.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'409_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'409','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'409_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'409','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.MATRICUL',NULL
'40_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40_SIMULATION_PAIE','RD','SELECT','017',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(SIMU_TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN SIMU_TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40_SIMULATION_PAIE','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40_SIMULATION_PAIE','RD','SELECT','029',NULL,'SIMU_TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','037',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE',NULL
'40_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'50','RD','SELECT','001',NULL,'TGE_IMPUTATIONS','NUMPAC','6','0','FALSE',NULL,NULL
'50','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'50','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','004',NULL,'TGE_IMPUTATIONS','PAIEZAD','8','0','TRUE',NULL,NULL
'50','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','007',NULL,'TGE_IMPUTATIONS','NB_UNITE','15','0','TRUE',NULL,'FORMATAGE_NBRE_IMPUTATION'
'50','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','009',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','011',NULL,'TGE_IMPUTATIONS','IMPUTATION','18',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','015',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','016',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'50','RD','SELECT','017',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'50','RD','SELECT','018',NULL,'TGE_IMPUTATIONS','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'50','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','020',NULL,'TGE_IMPUTATIONS','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','021',NULL,'TGE_IMPUTATIONS','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'50','RD','SELECT','022',NULL,'TGE_IMPUTATIONS','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'50','RD','SELECT','023',NULL,'TGE_IMPUTATIONS','PERIODE','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'50','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'50','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','026',NULL,'TGE_IMPUTATIONS','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'50','RD','SELECT','030',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'50','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'50','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'50','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'50','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS',NULL
'50','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS.NUMPAC = @@@NUMPAC@@@',NULL
'50','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PAIEZAD = DAC.PAIEZAD',NULL
'50','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.DERNIER_CODE_OPE <> ''S''',NULL
'50','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_IMPUTATIONS.ORIGINE is null or TGE_IMPUTATIONS.ORIGINE = ''T'' or TGE_IMPUTATIONS.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' ))))',NULL
'50','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PERIODE <= @@@PERIODE_PAIE@@@',NULL
'50','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'509','RD','SELECT','001',NULL,'MAJIMPU','PAC','6','0','FALSE',NULL,NULL
'509','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'509','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','004',NULL,'MAJIMPU','MATPAIE','8','0','FALSE',NULL,NULL
'509','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'509','RD','SELECT','007',NULL,'MAJIMPU','NOMBRE','15','0','FALSE',NULL,NULL
'509','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','009',NULL,'MAJIMPU','CODEUTIL','3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','011',NULL,'MAJIMPU','IMPUTATI','18',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','014',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','015',NULL,'MAJIMPU','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'509','RD','SELECT','016',NULL,'MAJIMPU','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'509','RD','SELECT','017',NULL,'MAJIMPU','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'509','RD','SELECT','018',NULL,'MAJIMPU','CODR','1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','019','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','020',NULL,'MAJIMPU','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'509','RD','SELECT','021',NULL,'MAJIMPU','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'509','RD','SELECT','022',NULL,'MAJIMPU','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'509','RD','SELECT','023',NULL,'MAJIMPU','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'509','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','025','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','026',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','028',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','029','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','030',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'509','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU',NULL
'509','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'509','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'509','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'509','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'509','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'509','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.MATRICUL',NULL
'60','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'60_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'60','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'60','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'60','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'60','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'60_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'609','RD','SELECT','001',NULL,'RUBDV','PAC','6','0','FALSE',NULL,NULL
'609','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,'FORMATAGE_NUMERO_CARTE_609'
'609','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','004',NULL,'RUBDV','MATPAIE','8','0','FALSE',NULL,NULL
'609','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'609','RD','SELECT','007',NULL,'RUBDV','RUBCOD','4','0','FALSE',NULL,NULL
'609','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','009',NULL,'RUBDV','RUBMTS','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'609','RD','SELECT','010',NULL,'RUBDV','RUBMTS','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','011',NULL,'RUBDV','RUBNBR','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'609','RD','SELECT','012',NULL,'RUBDV','RUBNBR','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','013',NULL,'RUBDV','RUBTAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'609','RD','SELECT','014',NULL,'RUBDV','RUBTAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','015',NULL,'RUBDV','RUBPCT','6',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','016',NULL,'RUBDV','RUBDOM','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','018',NULL,'RUBDV','RUBSIGNE','1',NULL,'FALSE',NULL,'FORMATAGE_RUBSIGNE'
'609','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','020',NULL,'RUBDV','RUBIMPU','18',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','022',NULL,NULL,NULL,'10',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','023',NULL,NULL,NULL,'55',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','024',NULL,'RUBDV','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'609','RD','SELECT','025',NULL,'RUBDV','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'609','RD','SELECT','026',NULL,'RUBDV','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'609','RD','SELECT','027',NULL,'RUBDV','CODR','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','028','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','029',NULL,'RUBDV','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'609','RD','SELECT','030',NULL,'RUBDV','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'609','RD','SELECT','031',NULL,'RUBDV','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'609','RD','SELECT','032',NULL,'RUBDV','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'609','RD','SELECT','033',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','034','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','035',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','036',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','037',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','039','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','040',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'609','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV',NULL
'609','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'609_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'609','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'609_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO =  TO_CHAR(TO_DATE(RUBDV.PERIODE,''MMYYYY''),''YYYYMM'') ',NULL
'609','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'609_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'609','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'609_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'609','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.MATRICUL,RUBDV.RUBCOD',NULL
'60_ABSENCES','RD','SELECT','001',NULL,'TGE_ABSENCES','NUMPAC','6','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_ABSENCES','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','007',NULL,'TGE_REF_PRE','RUB_ECHANGE','4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','008',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','009',NULL,'TGE_ABSENCES','DUREE_CALC','15','0','TRUE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_ABSENCES','RD','SELECT','010',NULL,'TGE_ABSENCES','TEMOIN_DUREE_CALC','1',NULL,'FALSE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','VALEUR_CONDITIONEE(NULL;0;1)'
'60_ABSENCES','RD','SELECT','011',NULL,NULL,NULL,'110',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','012',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_ABSENCES','RD','SELECT','013',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_ABSENCES','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','016',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'60_ABSENCES','RD','SELECT','017',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_ABSENCES','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_ABSENCES','RD','SELECT','019',NULL,'TGE_ABSENCES','DATE_DEBUT','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_ABSENCES','RD','SELECT','020',NULL,'TGE_REF_PAC','PERIODEENCOURS','6',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'60_ABSENCES','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','022','TT',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','024',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_ABSENCES','RD','SELECT','026',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','027',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','distinct TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_ABSENCES','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_ABSENCES','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'60_ABSENCES','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'60_ABSENCES','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'60_ABSENCES','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'60_ABSENCES','RD','FROM','006',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.NUMPAC = TGE_REF_PRE.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'60_ABSENCES','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.ID = TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'60_ABSENCES','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.RUB_ECHANGE is not null',NULL
'60_ABSENCES','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'60_ABSENCES','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'60_ABSENCES','RD','WHERE','014',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') <= TGE_REF_PAC.PERIODEENCOURS',NULL
'60_ABSENCES','RD','WHERE','015',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'60_ABSENCES','RD','WHERE','016',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'60_ABSENCES','RD','WHERE','017',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'60_ABSENCES','RD','WHERE','018',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'60_ABSENCES','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_REF_PRE.RUB_ECHANGE',NULL
'60_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'60_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'60_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','004',NULL,'TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','027',NULL,'TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'70_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'70','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'70','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'70','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'70_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','027',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'70_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'70_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'99','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'99','RD','SELECT','002','99',NULL,NULL,'2','0','FALSE',NULL,NULL
'99','RD','SELECT','003',NULL,NULL,NULL,'12',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','004',NULL,NULL,NULL,'7','0','TRUE',NULL,'FORMATAGE_NBRE_LIGNE'
'99','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','006',NULL,NULL,NULL,'8','0','TRUE',NULL,'FORMATAGE_NBRE_CARACTERE'
'99','RD','SELECT','007',NULL,NULL,NULL,'204',NULL,'FALSE',NULL,NULL
'99','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'99','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','007','££££',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'ANNULATION','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'ANNULATION_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ), TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS(SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt = @@@ID_TRT@@@)SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,RETRO.PERIODE_RETRO AS PERIODE, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,TABLE_RETRO RETRO WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND RETRO.NUMPAC =C.NUMPAC  AND RETRO.PACMAT =C.PACMAT AND to_date(RETRO.PERIODE_RETRO,''yyyymm'') >= trunc(DACS.dsdsc,''month'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ,RETRO.PERIODE_RETRO) DAC',NULL'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and DAC.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC=@@@NUMPAC@@@)',NULL
'ANNULATION','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','001',NULL,'DELETED_PAIEZAD','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','004',NULL,'DELETED_PAIEZAD','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','007','$$$$',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','017',NULL,'DELETED_PAIEZAD','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','018',NULL,'DELETED_PAIEZAD','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC=@@@NUMPAC@@@ and (TGE_REF_PAC.MPE is not null and TGE_REF_PAC.MPE <> ''N'')',NULL
'ANNULATION_PERIODE_EMPLOI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.PAIEZAD',NULL
'IJEDI','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'IJEDI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','007','T653',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','009',NULL,'TGE_ABSENCES','DATE_DEBUT','16',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||MOTIF',NULL
'IJEDI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','012',NULL,'TGE_ABSENCES','DATE_FIN','40',NULL,'FALSE','least(TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD''),nvl(TO_CHAR(DAC.DATE_SORTIE_SIT_BO,''YYYYMMDD''),''20991231''))',NULL
'IJEDI','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'IJEDI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'IJEDI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'IJEDI','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'IJEDI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','021',NULL,'TGE_ABSENCES','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','022',NULL,'TGE_ABSENCES','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'IJEDI','RD','SELECT','023',NULL,'TGE_ABSENCES','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'IJEDI','RD','SELECT','024',NULL,'TGE_REF_PAC','PERIODEENCOURS','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''','FORMATAGE_DATE_EFFET'
'IJEDI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'IJEDI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'IJEDI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'IJEDI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'IJEDI','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'IJEDI','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'IJEDI','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.MOTIF',NULL
'IJEDI','RD','SELECT_EN_PLUS','005',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.ID',NULL
'IJEDI','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'IJEDI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'IJEDI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'IJEDI','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'IJEDI','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'IJEDI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.IJEDI in (''M'',''E'')',NULL
'IJEDI','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'IJEDI','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'IJEDI','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.MOTIF_ABS is not null',NULL
'IJEDI','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.OPTION_CONSERV_HISTO = ''A''',NULL
'IJEDI','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.ELEMENT = ''T653''',NULL
'IJEDI','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ABSENCES.DATE_DEBUT <= DAC.DSDCN and (DAC.DSDCN is null or (TGE_ABSENCES.DATE_FIN >= DAC.DSDCN))) or (TGE_ABSENCES.DATE_DEBUT >= DAC.DSDCN and (DAC.DATE_SORTIE_SIT_BO is null or (TGE_ABSENCES.DATE_DEBUT <= DAC.DATE_SORTIE_SIT_BO))))',NULL
'IJEDI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'W566','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'W566','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'W566','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','007','W566',NULL,NULL,'4','0','FALSE',NULL,NULL
'W566','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','012','200',NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','013','N',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'W566','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'W566','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'W566','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'W566','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'W566_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'W566_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'W566','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'W566','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'W566','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'W566_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'') mois from dual connect by TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'' )< @@@PERIODE_PAIE@@@),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS (SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois as periode, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND D.mois >=(select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ) AND D.mois >=TO_CHAR(DACS.dsdsc,''YYYYMM'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois ) DAC',NULL
'W566','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'W566','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'W566','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'WL70','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'WL70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'WL70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','007','WL70',NULL,NULL,'4','0','FALSE',NULL,NULL
'WL70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','012',NULL,'DAC','DTRETRO','40',NULL,'FALSE',NULL,NULL
'WL70_RETRO','RD','SELECT','012',NULL,'DAC','DSDSC','40',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'WL70','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'WL70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'WL70','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'WL70','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'WL70','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'WL70','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'WL70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC, to_char(D.mois,''yyyymm'') as periode,  MIN(DACS.DSDSC) DSDSC, MAX(DACS.DSFSC) DSFSC, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month''),''ddmmyyyy'') DTRETRO   FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'')  AND DACS.PACMAT= R.PACMAT AND DACS.DSDSC <= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm'') as periode,  TO_CHAR(MIN(DACS.DSDSC),''ddmmyyyy'') DSDSC, MAX(DACS.DSFSC) DSFSC,MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(MIN(DACS.DSDSC),''yyyymm'') MOISCOMP FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT AND DACS.PACMAT= R.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND DACS.DSDSC >= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND DACS.DSFSC >= LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')) AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'WL70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'WL70_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@ AND DAC.PERIODE >=DAC.MOISCOMP',NULL
'WL70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE element = 'B520' AND NUMPAC = '*'
'*','B520','**','RD_TXAFP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
WKF_BRANCH_GEN
==
delete from WKF_BRANCH_GEN WHERE TR_NUM IN ('55100','55110','55120','55200','55210')
'5510','Valider','5520','55100','1','false','true','true','false','false','20211012120621','false',null	
'5510','Annuler','5530','55110','1','false','true','true','false','false','20211012120653','false',null	
'5520','Renvoi','5510','55210','1','false','false','true','false','false','20211012120928','false',null	
'5510','Supprimer','5530','55120','1','false','true','true','false','false','20211012120741','false',null	
'5520','Default','5530','55200','1','false','true','true','false','false','20211012120853','false',null	
##
WKF_BRANCH_GEN
==
delete from WKF_BRANCH_GEN WHERE OP_EMET_NUM = 50203 AND CODE_RETOUR='Valider' AND OP_DEST_NUM = 50200
'50203','Valider','50200','50205','19','false','true','true','false','false','20220121160317','false',null
##
WKF_OP_ROLE
==
delete from WKF_OP_ROLE WHERE OP_NUM IN ('5510','5520','5530')
'5510','3','*'
'5520','3','*'
'5530','3','*'
##
WKF_OPERATIONS
==
delete from WKF_OPERATIONS WHERE PROC_NUM = '5500'
'5510','5500','Evts contract','Evènements contractuels','5','5','I'	'true','false','false',null,'_PARAM_DYN_','false','false','false','20211012010101','false','0','false',null,null,null,null,null,'false','ASC','0','true'
'5520','5500','Accepte modif','Accepter les modifications','5','0','N','false','false','false',null,'_PARAM_DYN_','false','false','false','20211012010101','false','0','false',null,null,null,null,null,'false',null,'0','true'
'5530','5500','Fin évts contract.','Fin processus évènements contractuels','0','0','F','true','false','true','fr.adp.com.gxp.std.mot_met.lib.objects.workflow.WkfMetierGeneriqueObj',null,'false','false','false','20211012010101','false','0','false',null,null,null,null,null,'false',null,'0','false'
##
WKF_OPERATIONS
==
delete from WKF_OPERATIONS WHERE OP_NUM = 50203
'50203','5002','INITMODCNTAPI','Initialiser la modification contractuelle depuis l''API','0','0','I','true','true','false',null,'_PARAM_DYN_','false','false','false','20220121155837','false','0','false',null,null,null,null,null,'false',null,'0','true'
##
WKF_OPERATIONS
==
update WKF_OPERATIONS O1 set OP_DATECREA = (select TO_CHAR(TO_DATE(OP_DATECREA, 'DD/MM/YY'), 'YYYYMMDDHH24MISS') from WKF_OPERATIONS O2 where O2.OP_NUM = O1.OP_NUM) where IS_DATE(OP_DATECREA, 'DD/MM/YY')=1
##
WKF_PROCESSUS
==
delete from WKF_PROCESSUS WHERE PROC_NUM = '5500'
'5500','Evènements contractuels','0','20211012115229','false','0','fr.adp.com.gxp.std.mot_met.lib.objects.workflow.WkfMetierGeneriqueObj','false','DBA','true',null,'61'
##
WKF_TRANSITIONS
==
delete from WKF_TRANSITIONS WHERE PROC_NUM = '5500'
'55100','5500','T55100 vers (Accepter les modifications)'
'55110','5500','T55110 vers (Fin processus modifications contractuelles)'
'55120','5500','T55120 vers (Fin processus modifications contractuelles)'
'55200','5500','T55200 vers (Fin processus modifications contractuelles)'
'55210','5500','T55210 vers (Modifications contractuelles)'
##
WKF_TRANSITIONS
==
delete from WKF_TRANSITIONS WHERE TR_NUM = 50205
'50205','5002','T50205 vers (Init)'
##
XLS_DOCMODEL
==
delete from XLS_DOCMODEL where CODDOC = 'TGE_EXP_IMP' and DTEFFET = '20211130'
'TGE_EXP_IMP', '20211130', 'Export imputations', 'Imputation_', 0, 0, 'TGE'
##
XLS_DOCMODEL
==
delete from XLS_DOCMODEL where CODDOC = 'TGE_EXP_IMP_I' and DTEFFET = '20211130'
'TGE_EXP_IMP_I', '20211130', 'Export imputations', 'Imputation_', 0, 0, 'TGE'
##
XLS_MATCHING_DATA
==
delete from XLS_MATCHING_DATA where CODDOC = 'TGE_EXP_IMP' and DTEFFET = '20211130'
'TGE_EXP_IMP', '20211130', 0, 0, 'matricule', 'String', 32, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 1, 'numpac', 'String', 6, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 2, 'pacmat', 'String', 8, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 3, 'paiezad', 'String', 8, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 4, 'codeImputation', 'String', 18, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 5, 'codeUnite', 'String', 3, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 6, 'nombreUnite', 'String', 500, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 7, 'origine', 'String', 1, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 8, 'typeTraitement', 'String', 2, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 9, 'periode', 'String', 6, 'Y', null
'TGE_EXP_IMP', '20211130', 0, 10, 'erreurs', 'String', 3000, 'Y', null
##
XLS_MATCHING_DATA
==
delete from XLS_MATCHING_DATA where CODDOC = 'TGE_EXP_IMP_I' and DTEFFET = '20211130'
'TGE_EXP_IMP_I', '20211130', 0, 0, 'numpac', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 1, 'codeEnregistrement', 'String', 18, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 2, 'paiezad', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 3, 'cle', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 4, 'nombreUnite', 'String', 500, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 5, 'codeUnite', 'String', 3, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 6, 'codeImputation', 'String', 18, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 7, 'codeAnnulation', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 8, 'pacmat', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 9, 'codeChronologique', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 10, 'origine', 'String', 1, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 11, 'codeRemplacement', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 12, 'codeUtilisateur', 'String', 8, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 13, 'dateSaisie', 'String', 10, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 14, 'heureSaisie', 'String', 10, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 15, 'dateEffet', 'String', 10, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 16, 'periode', 'String', 7, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 17, 'periodeEffet', 'String', 7, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 18, 'typeTraitement', 'String', 2, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 19, 'population', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 20, 'classeDistrib', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 21, 'typePaie', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 22, 'codeMonnaie', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 23, 'donneeRetro', 'String', 6, 'Y', null
'TGE_EXP_IMP_I', '20211130', 0, 24, 'erreurs', 'String', 3000, 'Y', null
##
XLS_MATCHING_TITLE
==
delete from XLS_MATCHING_TITLE where CODDOC = 'TGE_EXP_IMP' and DTEFFET = '20211130'
'TGE_EXP_IMP', '20211130', 0, 0, 'fr_fr', 'Identifiant RH'
'TGE_EXP_IMP', '20211130', 0, 1, 'fr_fr', 'Numéro de pac'
'TGE_EXP_IMP', '20211130', 0, 2, 'fr_fr', 'Matricule RH'
'TGE_EXP_IMP', '20211130', 0, 3, 'fr_fr', 'Matricule Paie'
'TGE_EXP_IMP', '20211130', 0, 4, 'fr_fr', 'Code imputation'
'TGE_EXP_IMP', '20211130', 0, 5, 'fr_fr', 'Code unité'
'TGE_EXP_IMP', '20211130', 0, 6, 'fr_fr', 'Nombre unités'
'TGE_EXP_IMP', '20211130', 0, 7, 'fr_fr', 'Origine'
'TGE_EXP_IMP', '20211130', 0, 8, 'fr_fr', 'Type de traitement'
'TGE_EXP_IMP', '20211130', 0, 9, 'fr_fr', 'Période'
'TGE_EXP_IMP', '20211130', 0, 10, 'fr_fr', 'Message(s)'
##
XLS_MATCHING_TITLE
==
delete from XLS_MATCHING_TITLE where CODDOC = 'TGE_EXP_IMP_I' and DTEFFET = '20211130'
'TGE_EXP_IMP_I', '20211130', 0, 0, 'fr_fr', 'Numéro de pac'
'TGE_EXP_IMP_I', '20211130', 0, 1, 'fr_fr', 'CODE ENREGISTREMENT'
'TGE_EXP_IMP_I', '20211130', 0, 2, 'fr_fr', 'Matricule Paie'
'TGE_EXP_IMP_I', '20211130', 0, 3, 'fr_fr', 'CLE'
'TGE_EXP_IMP_I', '20211130', 0, 4, 'fr_fr', 'Nombre Unites'
'TGE_EXP_IMP_I', '20211130', 0, 5, 'fr_fr', 'Code Unité'
'TGE_EXP_IMP_I', '20211130', 0, 6, 'fr_fr', 'Code Imputation'
'TGE_EXP_IMP_I', '20211130', 0, 7, 'fr_fr', 'Code Annulation'
'TGE_EXP_IMP_I', '20211130', 0, 8, 'fr_fr', 'MATRICULE RH'
'TGE_EXP_IMP_I', '20211130', 0, 9, 'fr_fr', 'Code Chronologique'
'TGE_EXP_IMP_I', '20211130', 0, 10, 'fr_fr', 'Code Origine'
'TGE_EXP_IMP_I', '20211130', 0, 11, 'fr_fr', 'Code Remplacement'
'TGE_EXP_IMP_I', '20211130', 0, 12, 'fr_fr', 'Code Utilisateur'
'TGE_EXP_IMP_I', '20211130', 0, 13, 'fr_fr', 'Date saisie'
'TGE_EXP_IMP_I', '20211130', 0, 14, 'fr_fr', 'Heure saisie'
'TGE_EXP_IMP_I', '20211130', 0, 15, 'fr_fr', 'Date effet'
'TGE_EXP_IMP_I', '20211130', 0, 16, 'fr_fr', 'Période d''emploi'
'TGE_EXP_IMP_I', '20211130', 0, 17, 'fr_fr', 'Periode effet'
'TGE_EXP_IMP_I', '20211130', 0, 18, 'fr_fr', 'Type de traitement'
'TGE_EXP_IMP_I', '20211130', 0, 19, 'fr_fr', 'POPULATION'
'TGE_EXP_IMP_I', '20211130', 0, 20, 'fr_fr', 'Classe distrib'
'TGE_EXP_IMP_I', '20211130', 0, 21, 'fr_fr', 'Type paie'
'TGE_EXP_IMP_I', '20211130', 0, 22, 'fr_fr', 'code monnaie'
'TGE_EXP_IMP_I', '20211130', 0, 23, 'fr_fr', 'donnée retro'
'TGE_EXP_IMP_I', '20211130', 0, 24, 'fr_fr', 'Message(s)'
##
XLS_SHEET
==
delete from XLS_SHEET where CODDOC = 'TGE_EXP_IMP' and DTEFFET = '20211130'
'TGE_EXP_IMP', '20211130', 0, 1, 'fr.adp.com.cougar.std.modules.lib.objects.zpaie.importexport.ImpExpImputationsXls','TGE_EXP_IMP',11, 11
##
XLS_SHEET
==
delete from XLS_SHEET where CODDOC = 'TGE_EXP_IMP_I' and DTEFFET = '20211130'
'TGE_EXP_IMP_I', '20211130', 0, 1, 'fr.adp.com.cougar.std.modules.lib.objects.zpaie.importexport.ImportExportImputationsXls','TGE_EXP_IMP_I',24, 24
##
XLS_SHEET_LIB
==
delete from XLS_SHEET_LIB where CODE_SHEET = 'TGE_EXP_IMP'
'TGE_EXP_IMP', 'fr_fr', 'Export imputations'
##
XLS_SHEET_LIB
==
delete from XLS_SHEET_LIB where CODE_SHEET = 'TGE_EXP_IMP_I'
'TGE_EXP_IMP_I', 'fr_fr', 'Export imputations'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_TXAFP') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_TXAFP','Taux abattement frais prof','DIC_ADM_CONTRAT_HISTO','9','7','4',NULL,NULL,NULL,'GZ','O',NULL,'1126',NULL,NULL,'G',NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_TXAFP') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_TXAFP','Taux abattement frais prof','DIC_ADM_CONTRAT_HISTO','9','7','4',NULL,NULL,NULL,'GZ','O',NULL,'1126',NULL,NULL,'G',NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_TXAFP') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_TXAFP','*','Taux abattement frais prof','N','span',NULL,NULL,'Code,Libellé',NULL,NULL,'N',NULL,NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_TXAFP') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_TXAFP','*','Taux abattement frais prof','N','span',NULL,NULL,'Code,Libellé',NULL,NULL,'N',NULL,NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_Z_IBAN_LG','RD_Z_IBAN_LG_OPP','RD_Z_IBAN_LG_PENS1','RD_Z_IBAN_LG_PENS2','RD_Z_IBAN_LG_PENS3','RD_Z_IBAPA','RD_Z_IBAPA_OPP','RD_Z_IBAPA_PENS1','RD_Z_IBAPA_PENS2','RD_Z_IBAPA_PENS3') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_Z_IBAN_LG','Zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_OPP','Oppositions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS1','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS2','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS3','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA','Zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_OPP','Oppositions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS1','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS2','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS3','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_Z_IBAN_LG','RD_Z_IBAN_LG_OPP','RD_Z_IBAN_LG_PENS1','RD_Z_IBAN_LG_PENS2','RD_Z_IBAN_LG_PENS3','RD_Z_IBAPA','RD_Z_IBAPA_OPP','RD_Z_IBAPA_PENS1','RD_Z_IBAPA_PENS2','RD_Z_IBAPA_PENS3') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_Z_IBAN_LG','Zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_OPP','Oppositions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS1','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS2','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAN_LG_PENS3','Pensions : zone travail Longueur IBAN selon Pays','DIC_DONNEES_VIRTUELLES','N','2',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA','Zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_OPP','Oppositions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS1','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS2','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_Z_IBAPA_PENS3','Pansions : zone de travail CODE PAYS DE L''IBAN','DIC_DONNEES_VIRTUELLES','X','2',NULL,NULL,NULL,NULL,'Z','O',NULL,'1138',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_Z_IBAN_LG','RD_Z_IBAN_LG_OPP','RD_Z_IBAN_LG_PENS1','RD_Z_IBAN_LG_PENS2','RD_Z_IBAN_LG_PENS3','RD_Z_IBAPA','RD_Z_IBAPA_OPP','RD_Z_IBAPA_PENS1','RD_Z_IBAPA_PENS2','RD_Z_IBAPA_PENS3') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_Z_IBAN_LG','*','Zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_OPP','*','Oppositions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS1','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS2','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS3','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA','*','Zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA,#NON,RD_Z_IBAN_LG','IBAPA','N',NULL,'RD_VALO_TRAV_IBAPA',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_OPP','*','Oppositions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_OPP,#NON,RD_Z_IBAN_LG_OPP','CODE_PAYS_IBAN','N',NULL,'RD_VALO_TRAV_IBAPA_OPP',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS1','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS1,#NON,RD_Z_IBAN_LG_PENS1','RD_IBAPA_PENS1','N',NULL,'RD_VALO_TRAV_IBAPA_PENS1',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS2','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS2,#NON,RD_Z_IBAN_LG_PENS2','RD_IBAPA_PENS2','N',NULL,'RD_VALO_TRAV_IBAPA_PENS2',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS3','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS3,#NON,RD_Z_IBAN_LG_PENS3','RD_IBAPA_PENS3','N',NULL,'RD_VALO_TRAV_IBAPA_PENS3',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_Z_IBAN_LG','RD_Z_IBAN_LG_OPP','RD_Z_IBAN_LG_PENS1','RD_Z_IBAN_LG_PENS2','RD_Z_IBAN_LG_PENS3','RD_Z_IBAPA','RD_Z_IBAPA_OPP','RD_Z_IBAPA_PENS1','RD_Z_IBAPA_PENS2','RD_Z_IBAPA_PENS3') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_Z_IBAN_LG','*','Zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_OPP','*','Oppositions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS1','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS2','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAN_LG_PENS3','*','Pensions : zone travail Longueur IBAN selon Pays','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA','*','Zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA,#NON,RD_Z_IBAN_LG','IBAPA','N',NULL,'RD_VALO_TRAV_IBAPA',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_OPP','*','Oppositions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_OPP,#NON,RD_Z_IBAN_LG_OPP','CODE_PAYS_IBAN','N',NULL,'RD_VALO_TRAV_IBAPA_OPP',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS1','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS1,#NON,RD_Z_IBAN_LG_PENS1','RD_IBAPA_PENS1','N',NULL,'RD_VALO_TRAV_IBAPA_PENS1',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS2','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS2,#NON,RD_Z_IBAN_LG_PENS2','RD_IBAPA_PENS2','N',NULL,'RD_VALO_TRAV_IBAPA_PENS2',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_Z_IBAPA_PENS3','*','Pansions : zone de travail CODE PAYS DE L''IBAN','N','span','TAB_RD_SEPAPAYS','1',NULL,'RD_Z_IBAPA_PENS3,#NON,RD_Z_IBAN_LG_PENS3','RD_IBAPA_PENS3','N',NULL,'RD_VALO_TRAV_IBAPA_PENS3',NULL,NULL,'RD_MODE_MASQUE_DONNEE_TRAV',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_AFF_BQE_CODE_IBA5','RD_AFF_BQE_CODE_IBA6','RD_AFF_BQE_CODE_IBA7','RD_AFF_BQE_CODE_IBA8','RD_AFF_BQE_IBA5','RD_AFF_BQE_IBA5_PENS1','RD_AFF_BQE_IBA5_PENS2','RD_AFF_BQE_IBA5_PENS3','RD_AFF_BQE_IBA6','RD_AFF_BQE_IBA6_PENS1','RD_AFF_BQE_IBA6_PENS2','RD_AFF_BQE_IBA6_PENS3','RD_AFF_BQE_IBA7','RD_AFF_BQE_IBA7_PENS1','RD_AFF_BQE_IBA7_PENS2','RD_AFF_BQE_IBA7_PENS3','RD_AFF_BQE_IBA8','RD_AFF_BQE_IBA8_PENS1','RD_AFF_BQE_IBA8_PENS2','RD_AFF_BQE_IBA8_PENS3','RD_MODE_MASQUE_DONNEE_TRAV','RD_VALO_TRAV_IBAPA','RD_VALO_TRAV_IBAPA_OPP','RD_VALO_TRAV_IBAPA_PENS1','RD_VALO_TRAV_IBAPA_PENS2','RD_VALO_TRAV_IBAPA_PENS3') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_AFF_BQE_CODE_IBA5','AFF','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP£","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP£","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA5 :¿ * Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 16)) {¿}¿','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA6','AFF','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA6 :¿ * Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 20)) {¿}¿','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA7','AFF','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA7 :¿ * Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 24)) {¿}¿','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA8','AFF','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA8 :¿ * Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 28)) {¿}¿','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5','AFF','Affichage code IBA5 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5 :¿ * Affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 16)) {¿}¿','Affichage code IBA5 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS1','AFF','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS1 :¿ * Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 16)) {¿}¿','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS2','AFF','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS2 :¿ * Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 16)) {¿}¿','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS3','AFF','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS3 :¿ * Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 16)) {¿}¿','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6','AFF','Affichage code IBA6 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6 :¿ * Affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 20)) {¿}¿','Affichage code IBA6 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS1','AFF','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS1 :¿ * Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 20)) {¿}¿','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS2','AFF','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS2 :¿ * Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 20)) {¿}¿','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS3','AFF','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS3 :¿ * Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 20)) {¿}¿','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7','AFF','Affichage code IBA7 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7 :¿ * Affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 24)) {¿}¿','Affichage code IBA7 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS1','AFF','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS1 :¿ * Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS1 affiché et obligatoire¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 24)) {¿}¿','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS2','AFF','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS2 :¿ * Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 24)) {¿}¿','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS3','AFF','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS3 :¿ * Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 24)) {¿}¿','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8','AFF','Affichage code IBA8 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8 :¿ * Affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 28)) {¿}¿','Affichage code IBA8 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS1','AFF','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1£","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS1 :¿ * Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS1 affiché et obligatoire¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 28)) {¿}¿','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS2','AFF','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS2 :¿ * Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 28)) {¿}¿','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS3','AFF','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS3 :¿ * Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 28)) {¿}¿','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN'
'*','RD_MODE_MASQUE_DONNEE_TRAV','AFF','Non affichage de données de travail',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"VALEUR£1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Non affichage de données de travail','C',NULL,'/*¿ * RD_MODE_MASQUE_DONNEE_TRAV :¿ * Non affichage de données de travail¿ */¿¿if (1 == vide) {¿}¿','Non affichage de données de travail'
'*','RD_VALO_TRAV_IBAPA','AUT','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£IBAPA","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£IBAPA","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA :¿ * Valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_BANQUE.IBAPA != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA = DIC_BANQUE.IBAPA;¿}¿','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_OPP','AUT','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£CODE_PAYS_IBAN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODE_PAYS_IBAN","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_OPP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_OPP :¿ * Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_TGE_OPPOSITIONS.CODE_PAYS_IBAN != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_OPP = DIC_TGE_OPPOSITIONS.CODE_PAYS_IBAN;¿}¿','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS1','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS1 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS1 = DIC_PENSION_ALIM.RD_IBAPA_PENS1;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS2','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS2 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS2 = DIC_PENSION_ALIM.RD_IBAPA_PENS2;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS3','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS3 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS3 = DIC_PENSION_ALIM.RD_IBAPA_PENS3;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_AFF_BQE_CODE_IBA5','RD_AFF_BQE_CODE_IBA6','RD_AFF_BQE_CODE_IBA7','RD_AFF_BQE_CODE_IBA8','RD_AFF_BQE_IBA5','RD_AFF_BQE_IBA5_PENS1','RD_AFF_BQE_IBA5_PENS2','RD_AFF_BQE_IBA5_PENS3','RD_AFF_BQE_IBA6','RD_AFF_BQE_IBA6_PENS1','RD_AFF_BQE_IBA6_PENS2','RD_AFF_BQE_IBA6_PENS3','RD_AFF_BQE_IBA7','RD_AFF_BQE_IBA7_PENS1','RD_AFF_BQE_IBA7_PENS2','RD_AFF_BQE_IBA7_PENS3','RD_AFF_BQE_IBA8','RD_AFF_BQE_IBA8_PENS1','RD_AFF_BQE_IBA8_PENS2','RD_AFF_BQE_IBA8_PENS3','RD_MODE_MASQUE_DONNEE_TRAV','RD_VALO_TRAV_IBAPA','RD_VALO_TRAV_IBAPA_OPP','RD_VALO_TRAV_IBAPA_PENS1','RD_VALO_TRAV_IBAPA_PENS2','RD_VALO_TRAV_IBAPA_PENS3') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_AFF_BQE_CODE_IBA5','AFF','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP£","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP£","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA5 :¿ * Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 16)) {¿}¿','Oppositions : affichage code IBA5 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA6','AFF','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA6 :¿ * Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 20)) {¿}¿','Oppositions : affichage code IBA6 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA7','AFF','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA7 :¿ * Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 24)) {¿}¿','Oppositions : affichage code IBA7 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_CODE_IBA8','AFF','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_OPP","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_CODE_IBA8 :¿ * Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire¿ */¿¿if ((DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_OPP > 28)) {¿}¿','Oppositions : affichage code IBA8 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5','AFF','Affichage code IBA5 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5 :¿ * Affichage code IBA5 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors IBA5 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 16)) {¿}¿','Affichage code IBA5 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS1','AFF','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS1 :¿ * Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 16)) {¿}¿','Affichage code IBA5_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS2','AFF','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS2 :¿ * Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 16)) {¿}¿','Affichage code IBA5_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA5_PENS3','AFF','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£16","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA5_PENS3 :¿ * Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA5_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 16)) {¿}¿','Affichage code IBA5_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6','AFF','Affichage code IBA6 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6 :¿ * Affichage code IBA6 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 20, alors IBA6 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 20)) {¿}¿','Affichage code IBA6 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS1','AFF','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS1 :¿ * Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 20)) {¿}¿','Affichage code IBA6_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS2','AFF','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS2 :¿ * Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS1 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 20)) {¿}¿','Affichage code IBA6_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA6_PENS3','AFF','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£20","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA6_PENS3 :¿ * Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA6_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 20)) {¿}¿','Affichage code IBA6_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7','AFF','Affichage code IBA7 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7 :¿ * Affichage code IBA7 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 24, alors IBA7 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 24)) {¿}¿','Affichage code IBA7 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS1','AFF','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS1 :¿ * Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS1 affiché et obligatoire¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 24)) {¿}¿','Affichage code IBA7_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS2','AFF','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS2 :¿ * Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 24)) {¿}¿','Affichage code IBA7_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA7_PENS3','AFF','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£24","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA7_PENS3 :¿ * Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA7_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 24)) {¿}¿','Affichage code IBA7_PENS3 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8','AFF','Affichage code IBA8 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ECRBQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£BQE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£MODPAI_BQE","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£V","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8 :¿ * Affichage code IBA8 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 28, alors IBA8 affiché et obligatoire¿ */¿¿if (DIC_BANQUE.ECRBQE == "BQE" && DIC_BANQUE.MODPAI_BQE == "V" && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG > 28)) {¿}¿','Affichage code IBA8 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS1','AFF','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1£","OPERATEUR":"NEQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"EQ","OPERANDE_2":"@vide££","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS1","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS1 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS1 :¿ * Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS1 affiché et obligatoire¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide && (DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS1 > 28)) {¿}¿','Affichage code IBA8_PENS1 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS2','AFF','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS2","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS2 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS2 :¿ * Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS2 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS2 > 28)) {¿}¿','Affichage code IBA8_PENS2 et obligatoire selon longueur IBAN'
'*','RD_AFF_BQE_IBA8_PENS3','AFF','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£RD_Z_IBAN_LG_PENS3","OPERATEUR":"GT","OPERANDE_2":"VALEUR£28","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS3 affiché et obligatoire','M',NULL,'/*¿ * RD_AFF_BQE_IBA8_PENS3 :¿ * Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN : si longueur IBAN supérieur à 16, alors  IBA8_PENS3 affiché et obligatoire¿ */¿¿if ((DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide && DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 == vide || DIC_DONNEES_VIRTUELLES.RD_Z_IBAN_LG_PENS3 > 28)) {¿}¿','Affichage code IBA8_PENS3 et obligatoire selon longueur IBAN'
'*','RD_MODE_MASQUE_DONNEE_TRAV','AFF','Non affichage de données de travail',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"VALEUR£1","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Non affichage de données de travail','C',NULL,'/*¿ * RD_MODE_MASQUE_DONNEE_TRAV :¿ * Non affichage de données de travail¿ */¿¿if (1 == vide) {¿}¿','Non affichage de données de travail'
'*','RD_VALO_TRAV_IBAPA','AUT','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£IBAPA","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£IBAPA","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA :¿ * Valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_BANQUE.IBAPA != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA = DIC_BANQUE.IBAPA;¿}¿','Valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_OPP','AUT','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£CODE_PAYS_IBAN","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£CODE_PAYS_IBAN","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_OPP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_OPP :¿ * Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_TGE_OPPOSITIONS.CODE_PAYS_IBAN != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_OPP = DIC_TGE_OPPOSITIONS.CODE_PAYS_IBAN;¿}¿','Oppositions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS1','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS1","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS1","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS1 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS1 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS1 = DIC_PENSION_ALIM.RD_IBAPA_PENS1;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS2','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS2","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS2","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS2 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS2 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS2 = DIC_PENSION_ALIM.RD_IBAPA_PENS2;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
'*','RD_VALO_TRAV_IBAPA_PENS3','AUT','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays',NULL,'1138',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_IBAPA_PENS3","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_Z_IBAPA_PENS3","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)','O',NULL,'/*¿ * RD_VALO_TRAV_IBAPA_PENS3 :¿ * Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays (table GA_SEPAPAYS)¿ */¿¿if (DIC_PENSION_ALIM.RD_IBAPA_PENS3 != vide) {¿	DIC_DONNEES_VIRTUELLES.RD_Z_IBAPA_PENS3 = DIC_PENSION_ALIM.RD_IBAPA_PENS3;¿}¿','Pensions : valorisation zone travail IBAPA pour récup longueur IBAN selon pays'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_AFF_BQE_CODE_IBA5','RD_AFF_BQE_CODE_IBA6','RD_AFF_BQE_CODE_IBA7','RD_AFF_BQE_CODE_IBA8','RD_AFF_BQE_IBA5','RD_AFF_BQE_IBA5_PENS1','RD_AFF_BQE_IBA5_PENS2','RD_AFF_BQE_IBA5_PENS3','RD_AFF_BQE_IBA6','RD_AFF_BQE_IBA6_PENS1','RD_AFF_BQE_IBA6_PENS2','RD_AFF_BQE_IBA6_PENS3','RD_AFF_BQE_IBA7','RD_AFF_BQE_IBA7_PENS1','RD_AFF_BQE_IBA7_PENS2','RD_AFF_BQE_IBA7_PENS3','RD_AFF_BQE_IBA8','RD_AFF_BQE_IBA8_PENS1','RD_AFF_BQE_IBA8_PENS2','RD_AFF_BQE_IBA8_PENS3','RD_MODE_MASQUE_DONNEE_TRAV','RD_VALO_TRAV_IBAPA','RD_VALO_TRAV_IBAPA_OPP','RD_VALO_TRAV_IBAPA_PENS1','RD_VALO_TRAV_IBAPA_PENS2','RD_VALO_TRAV_IBAPA_PENS3') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_AFF_BQE_CODE_IBA5','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPP£µ@vide££µEQµDONNEE£RD_Z_IBAN_LG_OPP£µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA6','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide£µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA7','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide£µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA8','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide££µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£16µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£20µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£24µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£24µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£28µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1£µ@vide££µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide££µEQµDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£28µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_MODE_MASQUE_DONNEE_TRAV','1',NULL,'VALEUR£1µ@vide£µEQ',NULL,NULL,'FIN','FIN'
'*','RD_VALO_TRAV_IBAPA','1',NULL,'DONNEE£IBAPAµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA','2','DONNEE£IBAPA','VAL','££','DONNEE£RD_Z_IBAPA','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_OPP','1',NULL,'DONNEE£CODE_PAYS_IBANµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_OPP','2','DONNEE£CODE_PAYS_IBAN','VAL','££','DONNEE£RD_Z_IBAPA_OPP','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS1','2','DONNEE£RD_IBAPA_PENS1','VAL','££','DONNEE£RD_Z_IBAPA_PENS1','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS2','2','DONNEE£RD_IBAPA_PENS2','VAL','££','DONNEE£RD_Z_IBAPA_PENS2','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS3','2','DONNEE£RD_IBAPA_PENS3','VAL','££','DONNEE£RD_Z_IBAPA_PENS3','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_AFF_BQE_CODE_IBA5','RD_AFF_BQE_CODE_IBA6','RD_AFF_BQE_CODE_IBA7','RD_AFF_BQE_CODE_IBA8','RD_AFF_BQE_IBA5','RD_AFF_BQE_IBA5_PENS1','RD_AFF_BQE_IBA5_PENS2','RD_AFF_BQE_IBA5_PENS3','RD_AFF_BQE_IBA6','RD_AFF_BQE_IBA6_PENS1','RD_AFF_BQE_IBA6_PENS2','RD_AFF_BQE_IBA6_PENS3','RD_AFF_BQE_IBA7','RD_AFF_BQE_IBA7_PENS1','RD_AFF_BQE_IBA7_PENS2','RD_AFF_BQE_IBA7_PENS3','RD_AFF_BQE_IBA8','RD_AFF_BQE_IBA8_PENS1','RD_AFF_BQE_IBA8_PENS2','RD_AFF_BQE_IBA8_PENS3','RD_MODE_MASQUE_DONNEE_TRAV','RD_VALO_TRAV_IBAPA','RD_VALO_TRAV_IBAPA_OPP','RD_VALO_TRAV_IBAPA_PENS1','RD_VALO_TRAV_IBAPA_PENS2','RD_VALO_TRAV_IBAPA_PENS3') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_AFF_BQE_CODE_IBA5','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPP£µ@vide££µEQµDONNEE£RD_Z_IBAN_LG_OPP£µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA6','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide£µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA7','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide£µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_CODE_IBA8','1',NULL,'DONNEE£RD_Z_IBAN_LG_OPPµ@vide££µEQµDONNEE£RD_Z_IBAN_LG_OPPµVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£16µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA5_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£16µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£20µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA6_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£20µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£24µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide£µEQµDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£24µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA7_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£24µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8','1',NULL,'DONNEE£ECRBQEµVALEUR£BQEµEQµDONNEE£MODPAI_BQEµVALEUR£VµEQµ#ET#µDONNEE£RD_Z_IBAN_LGµ@vide£µEQµDONNEE£RD_Z_IBAN_LGµVALEUR£28µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1£µ@vide££µNEQµDONNEE£RD_Z_IBAN_LG_PENS1µ@vide££µEQµDONNEE£RD_Z_IBAN_LG_PENS1µVALEUR£28µGTµ#OU#µ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS2µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS2µVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_AFF_BQE_IBA8_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQµDONNEE£RD_Z_IBAN_LG_PENS3µ@vide£µEQµ#ET#µDONNEE£RD_Z_IBAN_LG_PENS3µVALEUR£28µGTµ#OU#',NULL,NULL,'FIN','FIN'
'*','RD_MODE_MASQUE_DONNEE_TRAV','1',NULL,'VALEUR£1µ@vide£µEQ',NULL,NULL,'FIN','FIN'
'*','RD_VALO_TRAV_IBAPA','1',NULL,'DONNEE£IBAPAµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA','2','DONNEE£IBAPA','VAL','££','DONNEE£RD_Z_IBAPA','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_OPP','1',NULL,'DONNEE£CODE_PAYS_IBANµ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_OPP','2','DONNEE£CODE_PAYS_IBAN','VAL','££','DONNEE£RD_Z_IBAPA_OPP','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS1','1',NULL,'DONNEE£RD_IBAPA_PENS1µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS1','2','DONNEE£RD_IBAPA_PENS1','VAL','££','DONNEE£RD_Z_IBAPA_PENS1','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS2','1',NULL,'DONNEE£RD_IBAPA_PENS2µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS2','2','DONNEE£RD_IBAPA_PENS2','VAL','££','DONNEE£RD_Z_IBAPA_PENS2','FIN','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS3','1',NULL,'DONNEE£RD_IBAPA_PENS3µ@vide£µNEQ',NULL,NULL,'2','FIN'
'*','RD_VALO_TRAV_IBAPA_PENS3','2','DONNEE£RD_IBAPA_PENS3','VAL','££','DONNEE£RD_Z_IBAPA_PENS3','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('DOT_IMMAT','DOT_MARQUE','POURC_VEH_ACHETE','POURC_VEH_LOUE','W_POURC_VEH_ACHETE','W_POURC_VEH_LOUE') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','DOT_IMMAT','Immatriculation','DIC_DOTATI','X','20',NULL,NULL,NULL,NULL,'Z','O',NULL,'870',NULL,NULL,NULL,NULL,'N',NULL
'*','DOT_MARQUE','Marque','DIC_DOTATI','X','20',NULL,NULL,NULL,NULL,'Z','O',NULL,'870',NULL,NULL,NULL,NULL,'N',NULL
'*','POURC_VEH_ACHETE','Véhicule de fonction : % véhicule acheté','DIC_DONNEES_VIRTUELLES','9','2','2',NULL,NULL,NULL,'GZ','O',NULL,'1098',NULL,NULL,'Y',NULL,'N',NULL
'*','POURC_VEH_LOUE','Véhicule de fonction : % véhicule loué','DIC_DONNEES_VIRTUELLES','9','2','2',NULL,NULL,NULL,'GZ','O',NULL,'1098',NULL,NULL,'Y',NULL,'N',NULL
'*','W_POURC_VEH_ACHETE','Véhicule de fonction : forçage % véhicule acheté','DIC_ADM_CONTRAT_HISTO','9','2','0',NULL,NULL,NULL,'GZ','N',NULL,'877',NULL,NULL,'Y',NULL,'N',NULL
'*','W_POURC_VEH_LOUE','Véhicule de fonction : forçage % véhicule loué','DIC_ADM_CONTRAT_HISTO','9','2','0',NULL,NULL,NULL,'GZ','N',NULL,'877',NULL,NULL,'Y',NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('DOT_IMMAT','DOT_MARQUE','POURC_VEH_ACHETE','POURC_VEH_LOUE','W_POURC_VEH_ACHETE','W_POURC_VEH_LOUE') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','DOT_IMMAT','Immatriculation','DIC_DOTATI','X','20',NULL,NULL,NULL,NULL,'Z','O',NULL,'870',NULL,NULL,NULL,NULL,'N',NULL
'*','DOT_MARQUE','Marque','DIC_DOTATI','X','20',NULL,NULL,NULL,NULL,'Z','O',NULL,'870',NULL,NULL,NULL,NULL,'N',NULL
'*','POURC_VEH_ACHETE','Véhicule de fonction : % véhicule acheté','DIC_DONNEES_VIRTUELLES','9','2','2',NULL,NULL,NULL,'GZ','O',NULL,'1098',NULL,NULL,'Y',NULL,'N',NULL
'*','POURC_VEH_LOUE','Véhicule de fonction : % véhicule loué','DIC_DONNEES_VIRTUELLES','9','2','2',NULL,NULL,NULL,'GZ','O',NULL,'1098',NULL,NULL,'Y',NULL,'N',NULL
'*','W_POURC_VEH_ACHETE','Véhicule de fonction : forçage % véhicule acheté','DIC_ADM_CONTRAT_HISTO','9','2','0',NULL,NULL,NULL,'GZ','N',NULL,'877',NULL,NULL,'Y',NULL,'N',NULL
'*','W_POURC_VEH_LOUE','Véhicule de fonction : forçage % véhicule loué','DIC_ADM_CONTRAT_HISTO','9','2','0',NULL,NULL,NULL,'GZ','N',NULL,'877',NULL,NULL,'Y',NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('DOT_IMMAT','DOT_MARQUE','POURC_VEH_ACHETE','POURC_VEH_LOUE','W_POURC_VEH_ACHETE','W_POURC_VEH_LOUE') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','DOT_IMMAT','*','Immatriculation','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','DOT_MARQUE','*','Marque','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','POURC_VEH_ACHETE','*','Véhicule de fonction : % véhicule acheté','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','POURC_VEH_LOUE','*','Véhicule de fonction : % véhicule loué','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','W_POURC_VEH_ACHETE','*','Forçage :','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTL_POURC_AVNAT_VOITURE',NULL,NULL,NULL,'N','N','N','0','0'
'*','W_POURC_VEH_LOUE','*','Forçage :','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTL_POURC_AVNAT_VOITURE',NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('DOT_IMMAT','DOT_MARQUE','POURC_VEH_ACHETE','POURC_VEH_LOUE','W_POURC_VEH_ACHETE','W_POURC_VEH_LOUE') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','DOT_IMMAT','*','Immatriculation','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','DOT_MARQUE','*','Marque','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','POURC_VEH_ACHETE','*','Véhicule de fonction : % véhicule acheté','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','POURC_VEH_LOUE','*','Véhicule de fonction : % véhicule loué','N','hidden',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','W_POURC_VEH_ACHETE','*','Forçage :','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTL_POURC_AVNAT_VOITURE',NULL,NULL,NULL,'N','N','N','0','0'
'*','W_POURC_VEH_LOUE','*','Forçage :','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'CTL_POURC_AVNAT_VOITURE',NULL,NULL,NULL,'N','N','N','0','0'
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('DOT_ECR_VEHICULE') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
'*','DOT_ECR_VEHICULE','AFF_DOTATION_VEHICULE',NULL,NULL,'N',NULL,'1112',NULL,'sous groupe écran dotation pour véhicule de fonction','sous groupe écran dotation pour véhicule de fonction',NULL,'1',NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('DOT_ECR_VEHICULE') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
'*','DOT_ECR_VEHICULE','AFF_DOTATION_VEHICULE',NULL,NULL,'N',NULL,'1112',NULL,'sous groupe écran dotation pour véhicule de fonction','sous groupe écran dotation pour véhicule de fonction',NULL,'1',NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('DOT_ECR_VEHICULE') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','DOT_ECR_VEHICULE','#EOL_3','14','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','DOT_ECR_VEHICULE','RD_DOT_IMMAT','16',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','DOT_ECR_VEHICULE','RD_DOT_MARQUE','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('DOT_ECR_VEHICULE') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','DOT_ECR_VEHICULE','#EOL_3','14','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','DOT_ECR_VEHICULE','RD_DOT_IMMAT','16',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','DOT_ECR_VEHICULE','RD_DOT_MARQUE','18',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('AFF_DOTATION_VEHICULE','CTL_POURC_AVNAT_VOITURE') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','AFF_DOTATION_VEHICULE','AFF','Affichage données véhicule de fonction',NULL,'870',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DOTATI","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£VFON","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage données véhicule de fonction selon code dotation','M',NULL,'/*¿ * AFF_DOTATION_VEHICULE :¿ * Affichage données véhicule de fonction selon code dotation¿ */¿¿if (DIC_DOTATI.DOTATI == "VFON") {¿}¿','Affichage données véhicule de fonction selon code dotation'
'*','CTL_POURC_AVNAT_VOITURE','CTL','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction',NULL,'871',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"CONCAT","OPERANDE_2":"VALEUR£A","RESULTAT":"@TMPP_ACHETE£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"CONCAT","OPERANDE_2":"VALEUR£A","RESULTAT":"@TMPP_LOUE£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPP_ACHETE£","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"IN","OPERANDE_2":"VALEUR£0,99£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£POURC_VEH_ACHETE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_ACHETE","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPP_LOUE£","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"IN","OPERANDE_2":"VALEUR£0,99£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£POURC_VEH_LOUE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_LOUE","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction','O',NULL,'/*¿ * CTL_POURC_AVNAT_VOITURE :¿ * Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction¿ */¿¿TMPP_ACHETE = CONCAT(DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE, "A");¿TMPP_LOUE = CONCAT(DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE, "A");¿if (TMPP_ACHETE != "A" && (DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE.IN(0, 99) || DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE == DIC_ADM_CONTRAT_HISTO.POURC_VEH_ACHETE)) {¿	ERR("GENCNT37", DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE);¿}¿if (TMPP_LOUE != "A" && (DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE.IN(0, 99) || DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE == DIC_ADM_CONTRAT_HISTO.POURC_VEH_LOUE)) {¿	ERR("GENCNT37", DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE);¿}¿','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('AFF_DOTATION_VEHICULE','CTL_POURC_AVNAT_VOITURE') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','AFF_DOTATION_VEHICULE','AFF','Affichage données véhicule de fonction',NULL,'870',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DOTATI","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£VFON","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage données véhicule de fonction selon code dotation','M',NULL,'/*¿ * AFF_DOTATION_VEHICULE :¿ * Affichage données véhicule de fonction selon code dotation¿ */¿¿if (DIC_DOTATI.DOTATI == "VFON") {¿}¿','Affichage données véhicule de fonction selon code dotation'
'*','CTL_POURC_AVNAT_VOITURE','CTL','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction',NULL,'871',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"CONCAT","OPERANDE_2":"VALEUR£A","RESULTAT":"@TMPP_ACHETE£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"CONCAT","OPERANDE_2":"VALEUR£A","RESULTAT":"@TMPP_LOUE£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPP_ACHETE£","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"IN","OPERANDE_2":"VALEUR£0,99£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_ACHETE","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£POURC_VEH_ACHETE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_ACHETE","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPP_LOUE£","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£A","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"IN","OPERANDE_2":"VALEUR£0,99£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£W_POURC_VEH_LOUE","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£POURC_VEH_LOUE","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_LOUE","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction','O',NULL,'/*¿ * CTL_POURC_AVNAT_VOITURE :¿ * Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction¿ */¿¿TMPP_ACHETE = CONCAT(DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE, "A");¿TMPP_LOUE = CONCAT(DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE, "A");¿if (TMPP_ACHETE != "A" && (DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE.IN(0, 99) || DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE == DIC_ADM_CONTRAT_HISTO.POURC_VEH_ACHETE)) {¿	ERR("GENCNT37", DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_ACHETE);¿}¿if (TMPP_LOUE != "A" && (DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE.IN(0, 99) || DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE == DIC_ADM_CONTRAT_HISTO.POURC_VEH_LOUE)) {¿	ERR("GENCNT37", DIC_ADM_CONTRAT_HISTO.W_POURC_VEH_LOUE);¿}¿','Contrôle du pourcentage forcé pour avantage voiture - véhicule de fonction'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('AFF_DOTATION_VEHICULE','CTL_POURC_AVNAT_VOITURE') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','AFF_DOTATION_VEHICULE','1',NULL,'DONNEE£DOTATIµVALEUR£VFONµEQ',NULL,NULL,'FIN','FIN'
'*','CTL_POURC_AVNAT_VOITURE','1','DONNEE£W_POURC_VEH_ACHETE','CONCAT','VALEUR£A','@TMPP_ACHETE£',NULL,NULL
'*','CTL_POURC_AVNAT_VOITURE','2','DONNEE£W_POURC_VEH_LOUE','CONCAT','VALEUR£A','@TMPP_LOUE£',NULL,NULL
'*','CTL_POURC_AVNAT_VOITURE','3',NULL,'@TMPP_ACHETE£µVALEUR£AµNEQµDONNEE£W_POURC_VEH_ACHETEµVALEUR£0,99£µINµDONNEE£W_POURC_VEH_ACHETEµDONNEE£POURC_VEH_ACHETEµEQµ#OU#µ#ET#',NULL,NULL,'6','7'
'*','CTL_POURC_AVNAT_VOITURE','6','££','ERR','CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_ACHETE','£','FIN','FIN'
'*','CTL_POURC_AVNAT_VOITURE','7',NULL,'@TMPP_LOUE£µVALEUR£AµNEQµDONNEE£W_POURC_VEH_LOUEµVALEUR£0,99£µINµDONNEE£W_POURC_VEH_LOUEµDONNEE£POURC_VEH_LOUEµEQµ#OU#µ#ET#',NULL,NULL,'10','FIN'
'*','CTL_POURC_AVNAT_VOITURE','10','££','ERR','CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_LOUE','£','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('AFF_DOTATION_VEHICULE','CTL_POURC_AVNAT_VOITURE') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','AFF_DOTATION_VEHICULE','1',NULL,'DONNEE£DOTATIµVALEUR£VFONµEQ',NULL,NULL,'FIN','FIN'
'*','CTL_POURC_AVNAT_VOITURE','1','DONNEE£W_POURC_VEH_ACHETE','CONCAT','VALEUR£A','@TMPP_ACHETE£',NULL,NULL
'*','CTL_POURC_AVNAT_VOITURE','2','DONNEE£W_POURC_VEH_LOUE','CONCAT','VALEUR£A','@TMPP_LOUE£',NULL,NULL
'*','CTL_POURC_AVNAT_VOITURE','3',NULL,'@TMPP_ACHETE£µVALEUR£AµNEQµDONNEE£W_POURC_VEH_ACHETEµVALEUR£0,99£µINµDONNEE£W_POURC_VEH_ACHETEµDONNEE£POURC_VEH_ACHETEµEQµ#OU#µ#ET#',NULL,NULL,'6','7'
'*','CTL_POURC_AVNAT_VOITURE','6','££','ERR','CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_ACHETE','£','FIN','FIN'
'*','CTL_POURC_AVNAT_VOITURE','7',NULL,'@TMPP_LOUE£µVALEUR£AµNEQµDONNEE£W_POURC_VEH_LOUEµVALEUR£0,99£µINµDONNEE£W_POURC_VEH_LOUEµDONNEE£POURC_VEH_LOUEµEQµ#OU#µ#ET#',NULL,NULL,'10','FIN'
'*','CTL_POURC_AVNAT_VOITURE','10','££','ERR','CODEERREUR£GENCNT37£NOM_DONNEE_FOCUS=DONNEE^W_POURC_VEH_LOUE','£','FIN','FIN'
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('VEH_DATEACHAT') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','VEH_DATEACHAT','Date achat','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('VEH_DATEACHAT') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','VEH_DATEACHAT','Date achat','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('VEH_DATEACHAT') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','VEH_DATEACHAT','*','Date achat','R_RD_DATE_ACHAT_VEH_OBLIG','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('VEH_DATEACHAT') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','VEH_DATEACHAT','*','Date achat','R_RD_DATE_ACHAT_VEH_OBLIG','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CARB_EMPLOYEUR','RD_VEH_CARBANN_PERS') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_CARB_EMPLOYEUR','Carburant pris en charge employeur','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_VEH_CARBANN_PERS','Frais carburant utilisé à des fins personnelles','DIC_ADM_CONTRAT_HISTO','9','5','2',NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,'Y',NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CARB_EMPLOYEUR','RD_VEH_CARBANN_PERS') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_CARB_EMPLOYEUR','Carburant pris en charge employeur','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_VEH_CARBANN_PERS','Frais carburant utilisé à des fins personnelles','DIC_ADM_CONTRAT_HISTO','9','5','2',NULL,NULL,NULL,'GZ','O',NULL,'1135',NULL,NULL,'Y',NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CARB_EMPLOYEUR','RD_VEH_CARBANN_PERS') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CARB_EMPLOYEUR','*','Carburant pris en charge employeur','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_VEH_CARBANN_PERS','*','Frais carburant utilisé à des fins personnelles','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALO_AVNMENS_VEHICULE_CNT',NULL,NULL,'RD_AFF_VEH_CARBURANT',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CARB_EMPLOYEUR','RD_VEH_CARBANN_PERS') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CARB_EMPLOYEUR','*','Carburant pris en charge employeur','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_VEH_CARBANN_PERS','*','Frais carburant utilisé à des fins personnelles','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'VALO_AVNMENS_VEHICULE_CNT',NULL,NULL,'RD_AFF_VEH_CARBURANT',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_AFF_VEH_CARBURANT','RD_DATE_ACHAT_VEH_OBLIG') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_AFF_VEH_CARBURANT','AFF','Affichage conditionnel pour les carburants (véhicule fonction)',NULL,'1135',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CARB_EMPLOYEUR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£VEH_LOYMENS","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.','M',NULL,'/*¿ * RD_AFF_VEH_CARBURANT :¿ * Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_CARB_EMPLOYEUR == "O" && DIC_ADM_CONTRAT_HISTO.VEH_LOYMENS != vide) {¿}¿','Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.'
'*','RD_DATE_ACHAT_VEH_OBLIG','AFF','Véh de fonct : date d''achat et prix d''achat remisé sont obligatoires si  immat et/ou marque saisis',NULL,'1135',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£VEH_IMMAT","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£VEH_MARQUE","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis','M',NULL,'/*¿ * RD_DATE_ACHAT_VEH_OBLIG :¿ * Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.VEH_IMMAT != vide || DIC_ADM_CONTRAT_HISTO.VEH_MARQUE != vide) {¿}¿','Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_AFF_VEH_CARBURANT','RD_DATE_ACHAT_VEH_OBLIG') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_AFF_VEH_CARBURANT','AFF','Affichage conditionnel pour les carburants (véhicule fonction)',NULL,'1135',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_CARB_EMPLOYEUR","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£VEH_LOYMENS","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.','M',NULL,'/*¿ * RD_AFF_VEH_CARBURANT :¿ * Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_CARB_EMPLOYEUR == "O" && DIC_ADM_CONTRAT_HISTO.VEH_LOYMENS != vide) {¿}¿','Affichage conditionnel pour les les carburants (véhicule fonction) : affichés si carburant pris en charge par employeur et loyer mensuel renseigné.'
'*','RD_DATE_ACHAT_VEH_OBLIG','AFF','Véh de fonct : date d''achat et prix d''achat remisé sont obligatoires si  immat et/ou marque saisis',NULL,'1135',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£VEH_IMMAT","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£VEH_MARQUE","OPERATEUR":"NEQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis','M',NULL,'/*¿ * RD_DATE_ACHAT_VEH_OBLIG :¿ * Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.VEH_IMMAT != vide || DIC_ADM_CONTRAT_HISTO.VEH_MARQUE != vide) {¿}¿','Véhicule de fonction : la date d''achat et le prix d''achat remisé sont obligatoires si immat et/ou marque saisis'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_AFF_VEH_CARBURANT','RD_DATE_ACHAT_VEH_OBLIG') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_AFF_VEH_CARBURANT','1',NULL,'DONNEE£RD_CARB_EMPLOYEURµVALEUR£OµEQµDONNEE£VEH_LOYMENSµ@vide£µNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_DATE_ACHAT_VEH_OBLIG','1',NULL,'DONNEE£VEH_IMMATµ@vide£µNEQµDONNEE£VEH_MARQUEµ@vide£µNEQµ#OU#',NULL,NULL,'FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_AFF_VEH_CARBURANT','RD_DATE_ACHAT_VEH_OBLIG') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_AFF_VEH_CARBURANT','1',NULL,'DONNEE£RD_CARB_EMPLOYEURµVALEUR£OµEQµDONNEE£VEH_LOYMENSµ@vide£µNEQµ#ET#',NULL,NULL,'FIN','FIN'
'*','RD_DATE_ACHAT_VEH_OBLIG','1',NULL,'DONNEE£VEH_IMMATµ@vide£µNEQµDONNEE£VEH_MARQUEµ@vide£µNEQµ#OU#',NULL,NULL,'FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_UX_REVUE','UX param WKF Revue','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'1116',NULL,NULL,'O',NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_UX_REVUE','UX param WKF Revue','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'1116',NULL,NULL,'O',NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_UX_REVUE','*','UX param WKF Revue','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_UX_REVUE','*','UX param WKF Revue','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_REGLE_UX_PARAM_REVUE') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_REGLE_UX_PARAM_REVUE','AUT','UX règle valorisation du paramètres workflow revue',NULL,'1116',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_UX_REVUE","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"@wkfparamPARAM_UX_REVREQ£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0}]','UX règle valorisation du paramètres workflow revue','O',NULL,'/*¿ * RD_REGLE_UX_PARAM_REVUE :¿ * UX règle valorisation du paramètres workflow revue¿ */¿¿wkfparamPARAM_UX_REVREQ = DIC_DONNEES_VIRTUELLES.RD_UX_REVUE;¿','UX règle valorisation du paramètres workflow revue'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_REGLE_UX_PARAM_REVUE') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_REGLE_UX_PARAM_REVUE','AUT','UX règle valorisation du paramètres workflow revue',NULL,'1116',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£RD_UX_REVUE","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"@wkfparamPARAM_UX_REVREQ£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0}]','UX règle valorisation du paramètres workflow revue','O',NULL,'/*¿ * RD_REGLE_UX_PARAM_REVUE :¿ * UX règle valorisation du paramètres workflow revue¿ */¿¿wkfparamPARAM_UX_REVREQ = DIC_DONNEES_VIRTUELLES.RD_UX_REVUE;¿','UX règle valorisation du paramètres workflow revue'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_REGLE_UX_PARAM_REVUE') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_REGLE_UX_PARAM_REVUE','1','DONNEE£RD_UX_REVUE','VAL','££','@wkfparamPARAM_UX_REVREQ£',NULL,NULL
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_REGLE_UX_PARAM_REVUE') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_REGLE_UX_PARAM_REVUE','1','DONNEE£RD_UX_REVUE','VAL','££','@wkfparamPARAM_UX_REVREQ£',NULL,NULL
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_UX_RECAP_REMB_INDTRP','RD_UX_WKF_RECAP_CONTACT_URG') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,DEGRE_LIBERTE,IS_VISIBLE)
'*','RD_UX_RECAP_REMB_INDTRP',NULL,NULL,NULL,'N',NULL,'946',NULL,'Groupe de données récapitulatif wkf UX TRP','Groupe de données récapitulatif wkf Modifications contractuelles',NULL,NULL,'0'
'*','RD_UX_WKF_RECAP_CONTACT_URG',NULL,NULL,NULL,'N',NULL,'946',NULL,'UX contact urgence','affichage pour récap',NULL,NULL,'0'
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_UX_RECAP_REMB_INDTRP','RD_UX_WKF_RECAP_CONTACT_URG') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,DEGRE_LIBERTE,IS_VISIBLE)
'*','RD_UX_RECAP_REMB_INDTRP',NULL,NULL,NULL,'N',NULL,'946',NULL,'Groupe de données récapitulatif wkf UX TRP','Groupe de données récapitulatif wkf Modifications contractuelles',NULL,NULL,'0'
'*','RD_UX_WKF_RECAP_CONTACT_URG',NULL,NULL,NULL,'N',NULL,'946',NULL,'UX contact urgence','affichage pour récap',NULL,NULL,'0'
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_UX_RECAP_REMB_INDTRP','RD_UX_WKF_RECAP_CONTACT_URG') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_UX_RECAP_REMB_INDTRP','#EOL_1','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','#EOL_2','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','#GROUPE_1','4',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','RD_UX_REVUE','6',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#EOL_1','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#EOL_2','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#GROUPE_3','3',NULL,'RD_PRE_PERS_VISU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','RD_UX_REVUE','5',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_UX_RECAP_REMB_INDTRP','RD_UX_WKF_RECAP_CONTACT_URG') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_UX_RECAP_REMB_INDTRP','#EOL_1','5',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','#EOL_2','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','#GROUPE_1','4',NULL,'GD_EDITION_DATE_EFFET',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_RECAP_REMB_INDTRP','RD_UX_REVUE','6',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#EOL_1','4',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#EOL_2','6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','#GROUPE_3','3',NULL,'RD_PRE_PERS_VISU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_UX_WKF_RECAP_CONTACT_URG','RD_UX_REVUE','5',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_UX_REVUE','UX param WKF Revue','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'954',NULL,NULL,'O',NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_UX_REVUE','UX param WKF Revue','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'954',NULL,NULL,'O',NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_UX_REVUE','*','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_UX_REVUE','GEN_PAGE_RECAP_50908_NCTJZNIZ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_UX_REVUE','GEN_PAGE_RECAP_63015_CXVSBCID','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_UX_REVUE','GEN_PAGE_RECAP_90203_WA3MSAB7','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_UX_REVUE') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_UX_REVUE','*','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_UX_REVUE','GEN_PAGE_RECAP_50908_NCTJZNIZ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_UX_REVUE','GEN_PAGE_RECAP_63015_CXVSBCID','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
'*','RD_UX_REVUE','GEN_PAGE_RECAP_90203_WA3MSAB7','Commentaire Expert','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,'RD_REGLE_UX_PARAM_REVUE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','1','0'
##
TAG_CHARSET=@€éèç
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','AUT','Alimentation de DTDEB avec dernière situation forçage avant affichage',NULL,'1032',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD","RESULTAT":"DONNEE£DTDEB_CUMIPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£01.01.1901","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DTDEB_CUMIPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£01.01.1901","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£TRAV_DTDEB_HISTO","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD","RESULTAT":"DONNEE£TRAV_DTDEB_HISTO","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation de DTDEB avec dernière situation forçage avant affichage','O',NULL,'/*¿ * DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION :¿ * Alimentation de DTDEB avec dernière situation forçage avant affichage¿ */¿¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide) {¿    // Première interrogation pour le NUMPAC / PAIEZAD : on va chercher la 1ère date à interroger pour l''onglet Cumuls¿	DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA = TAB("REG_RD_DTDEB_CUMIPA_MAX", 2, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PAIEZAD);¿}¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide) {¿    // Pour éviter le message "Veuillez réinterroger car la valeur de la donnée XXX (clé d''interrogation) n''a pas été prise en compte"¿	DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA = "01.01.1901";¿}¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide || DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == "01.01.1901") {¿    DIC_DONNEES_VIRTUELLES.TRAV_DTDEB_HISTO = "";¿}¿else {¿    // On alimente la date affichée dans l''onglet Période¿    DIC_DONNEES_VIRTUELLES.TRAV_DTDEB_HISTO = TAB("REG_RD_DTDEB_CUMIPA_MAX", 2, 1, DONNEE.GEN_NUMPAC, DONNEE.GEN_PAIEZAD);¿}','Alimentation de DTDEB avec dernière situation forçage avant affichage'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','AUT','Alimentation de DTDEB avec dernière situation forçage avant affichage',NULL,'1032',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD","RESULTAT":"DONNEE£DTDEB_CUMIPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£01.01.1901","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£DTDEB_CUMIPA","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":1,"PAR_FERM":0},{"TYPE":"OU_SI","OPERANDE_1":"DONNEE£DTDEB_CUMIPA","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£01.01.1901","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£TRAV_DTDEB_HISTO","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD","RESULTAT":"DONNEE£TRAV_DTDEB_HISTO","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation de DTDEB avec dernière situation forçage avant affichage','O',NULL,'/*¿ * DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION :¿ * Alimentation de DTDEB avec dernière situation forçage avant affichage¿ */¿¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide) {¿    // Première interrogation pour le NUMPAC / PAIEZAD : on va chercher la 1ère date à interroger pour l''onglet Cumuls¿	DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA = TAB("REG_RD_DTDEB_CUMIPA_MAX", 2, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PAIEZAD);¿}¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide) {¿    // Pour éviter le message "Veuillez réinterroger car la valeur de la donnée XXX (clé d''interrogation) n''a pas été prise en compte"¿	DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA = "01.01.1901";¿}¿if (DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == vide || DIC_TGE_RESPAIE_CUMIPA.DTDEB_CUMIPA == "01.01.1901") {¿    DIC_DONNEES_VIRTUELLES.TRAV_DTDEB_HISTO = "";¿}¿else {¿    // On alimente la date affichée dans l''onglet Période¿    DIC_DONNEES_VIRTUELLES.TRAV_DTDEB_HISTO = TAB("REG_RD_DTDEB_CUMIPA_MAX", 2, 1, DONNEE.GEN_NUMPAC, DONNEE.GEN_PAIEZAD);¿}','Alimentation de DTDEB avec dernière situation forçage avant affichage'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','1',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQ',NULL,NULL,'2','3'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD','DONNEE£DTDEB_CUMIPA','3','3'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','3',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQ',NULL,NULL,'4','5'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','4','VALEUR£01.01.1901','VAL','££','DONNEE£DTDEB_CUMIPA','5','5'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','5',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQµDONNEE£DTDEB_CUMIPAµVALEUR£01.01.1901µEQµ#OU#',NULL,NULL,'7','8'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','7','VALEUR£','VAL','££','DONNEE£TRAV_DTDEB_HISTO','FIN','FIN'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','8','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD','DONNEE£TRAV_DTDEB_HISTO','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','1',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQ',NULL,NULL,'2','3'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','2','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD','DONNEE£DTDEB_CUMIPA','3','3'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','3',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQ',NULL,NULL,'4','5'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','4','VALEUR£01.01.1901','VAL','££','DONNEE£DTDEB_CUMIPA','5','5'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','5',NULL,'DONNEE£DTDEB_CUMIPAµ@vide£µEQµDONNEE£DTDEB_CUMIPAµVALEUR£01.01.1901µEQµ#OU#',NULL,NULL,'7','8'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','7','VALEUR£','VAL','££','DONNEE£TRAV_DTDEB_HISTO','FIN','FIN'
'*','DTDEB_CUMIPA_ZIP_DERNIERE_SITUATION','8','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DTDEB_CUMIPA_MAX§ID_REQUETE=VALEUR^2§ID_COL=VALEUR^1§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PAIEZAD','DONNEE£TRAV_DTDEB_HISTO','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_FCN_ECR_CPLT_FCTU') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_FCN_ECR_CPLT_FCTU','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1069',NULL,'Complément FCTU (données pôle emploi)',NULL,NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_FCN_ECR_CPLT_FCTU') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_FCN_ECR_CPLT_FCTU','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1069',NULL,'Complément FCTU (données pôle emploi)',NULL,NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_FCN_ECR_CPLT_FCTU') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_FCN_ECR_CPLT_FCTU','#EOL_1','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','#EOL_2','25',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','#LIBELLE_1','3','N','FormTitreµComplément FCTU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','CASAS','21','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','CSTAPA','22','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','RECAPE','50','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','SENET','24','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_FCN_ECR_CPLT_FCTU') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_FCN_ECR_CPLT_FCTU','#EOL_1','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','#EOL_2','25',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','#LIBELLE_1','3','N','FormTitreµComplément FCTU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','CASAS','21','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','CSTAPA','22','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','RECAPE','50','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
'*','RD_FCN_ECR_CPLT_FCTU','SENET','24','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
*_GROUPE_DONNEES_INFO
=SQL=
DECLARE
  existColMeta NUMBER := 0;
  existColRef NUMBER := 0;
  triggerDisabled NUMBER := 0;
BEGIN
  SELECT COUNT(*) INTO existColMeta FROM USER_TAB_COLS WHERE TABLE_NAME='META_GROUPE_DONNEES_INFO' AND COLUMN_NAME='IS_VISIBLE';
  SELECT COUNT(*) INTO existColRef FROM USER_TAB_COLS WHERE TABLE_NAME='META_GROUPE_DONNEES_INFO' AND COLUMN_NAME='IS_VISIBLE';
  IF existColMeta=1 OR existColRef=1 THEN
    EXECUTE_IMMEDIATE_STRING('ALTER TRIGGER TRG_ALTER_META DISABLE',0);
    triggerDisabled := 1;
  END IF;
  IF existColMeta=1 THEN
    EXECUTE_IMMEDIATE_STRING('alter table meta_groupe_donnees_info modify IS_VISIBLE default 1',0);
  END IF;
  IF existColRef=1 THEN
    EXECUTE_IMMEDIATE_STRING('alter table ref_groupe_donnees_info modify IS_VISIBLE default 1',0);
  END IF;
  IF triggerDisabled = 1 THEN
    EXECUTE_IMMEDIATE_STRING('ALTER TRIGGER TRG_ALTER_META ENABLE',0);
  END IF;
EXCEPTION WHEN OTHERS THEN 
  IF triggerDisabled = 1 THEN
    EXECUTE_IMMEDIATE_STRING('ALTER TRIGGER TRG_ALTER_META ENABLE',0);
  END IF;
  RAISE;
END;
##
*_GROUPE_DONNEES_INFO
=SQL IFEXIST=META_GROUPE_DONNEES_INFO=IS_VISIBLE=
UPDATE META_GROUPE_DONNEES_INFO SET IS_VISIBLE = 1 where IS_VISIBLE is null
##
*_GROUPE_DONNEES_INFO
=SQL IFEXIST=REF_GROUPE_DONNEES_INFO=IS_VISIBLE=
UPDATE REF_GROUPE_DONNEES_INFO SET IS_VISIBLE = 1 where IS_VISIBLE is null
##
TAG_CHARSET=@€éèç
##
META_ECRAN
==
DELETE FROM META_ECRAN WHERE NOM_PAGE IN ('RD_INIT_MODCNT_FROM_API') AND COMPANY_ID='*'
##
META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA,ONGLET_VERTICAL)
'*','RD_INIT_MODCNT_FROM_API','Initialisation de l''embauche depuis l''API','RD','EXP',NULL,'WKF',NULL,'RD_DONNEES_MODCNT_FROM_API','W',NULL,NULL,'1133','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_ECRAN
==
DELETE FROM REF_ECRAN WHERE NOM_PAGE IN ('RD_INIT_MODCNT_FROM_API') AND COMPANY_ID='*'
##
REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA,ONGLET_VERTICAL)
'*','RD_INIT_MODCNT_FROM_API','Initialisation de l''embauche depuis l''API','RD','EXP',NULL,'WKF',NULL,'RD_DONNEES_MODCNT_FROM_API','W',NULL,NULL,'1133','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_DONNEES_MODCNT_FROM_API') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
'*','RD_DONNEES_MODCNT_FROM_API',NULL,NULL,NULL,NULL,NULL,'1133',NULL,'Données de modification contract reçues de l''API','Données de modification contract reçues de l''API',NULL,NULL,'1'
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_DONNEES_MODCNT_FROM_API') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE,IS_VISIBLE,DEGRE_LIBERTE)
'*','RD_DONNEES_MODCNT_FROM_API',NULL,NULL,NULL,NULL,NULL,'1133',NULL,'Données de modification contract reçues de l''API','Données de modification contract reçues de l''API',NULL,NULL,'1'
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_DONNEES_MODCNT_FROM_API') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_1','1',NULL,'CNT_WKF_MOD_OP1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_2','2',NULL,'AF2_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_3','3',NULL,'CLA_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_4','4',NULL,'HOZ_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_5','5',NULL,'APP_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFAFF','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFCLA','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFCNT','6',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFHOR','9',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFREM','10',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','TRAV_DSDEFFET','11',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_DONNEES_MODCNT_FROM_API') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE,TITRE_CMP_SORTIE_MANAGER,DEFAULT_VALUE_SORTIE_MANAGER)
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_1','1',NULL,'CNT_WKF_MOD_OP1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_2','2',NULL,'AF2_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_3','3',NULL,'CLA_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_4','4',NULL,'HOZ_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','#GROUPE_5','5',NULL,'APP_WKF_MODIF',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFAFF','7',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFCLA','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFCNT','6',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFHOR','9',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','MODIFREM','10',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
'*','RD_DONNEES_MODCNT_FROM_API','TRAV_DSDEFFET','11',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_ALIM_TRAV_DSDEFFET_DEFAULT') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_ALIM_TRAV_DSDEFFET_DEFAULT','AUT','Valorisation de la zone de travail de la date d''effet du contrat dans WKF',NULL,'0',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£GEN_DATE_EFF","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£TRAV_DSDEFFET","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation de la zone de travail TRAV_DSDEFFET à partir de la date d''effet courante du contrat dans WKF','N',NULL,'/*¿ * RD_ALIM_TRAV_DSDEFFET_DEFAULT :¿ * Valorisation de la zone de travail TRAV_DSDEFFET à partir de la date d''effet courante du contrat dans WKF¿ */¿¿DIC_DONNEES_VIRTUELLES.TRAV_DSDEFFET = DONNEE.GEN_DATE_EFF;¿','Valorisation de la zone de travail de la date d''effet du contrat dans WKF'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_ALIM_TRAV_DSDEFFET_DEFAULT') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_ALIM_TRAV_DSDEFFET_DEFAULT','AUT','Valorisation de la zone de travail de la date d''effet du contrat dans WKF',NULL,'0',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"DONNEE£GEN_DATE_EFF","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£TRAV_DSDEFFET","PAR_OUVR":0,"PAR_FERM":0}]','Valorisation de la zone de travail TRAV_DSDEFFET à partir de la date d''effet courante du contrat dans WKF','N',NULL,'/*¿ * RD_ALIM_TRAV_DSDEFFET_DEFAULT :¿ * Valorisation de la zone de travail TRAV_DSDEFFET à partir de la date d''effet courante du contrat dans WKF¿ */¿¿DIC_DONNEES_VIRTUELLES.TRAV_DSDEFFET = DONNEE.GEN_DATE_EFF;¿','Valorisation de la zone de travail de la date d''effet du contrat dans WKF'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_ALIM_TRAV_DSDEFFET_DEFAULT') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_ALIM_TRAV_DSDEFFET_DEFAULT','1','DONNEE£GEN_DATE_EFF','VAL','££','DONNEE£TRAV_DSDEFFET',NULL,NULL
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_ALIM_TRAV_DSDEFFET_DEFAULT') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_ALIM_TRAV_DSDEFFET_DEFAULT','1','DONNEE£GEN_DATE_EFF','VAL','££','DONNEE£TRAV_DSDEFFET',NULL,NULL
##
META_WKF_OPERATION_ECRANS_INFO
==
DELETE FROM META_WKF_OPERATION_ECRANS_INFO WHERE OP_NUM IN ('50203') AND COMPANY_ID='*'
##
META_WKF_OPERATION_ECRANS_INFO (COMPANY_ID,OP_NUM,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,ID_GROUPE_ECRITURE,BTN_SUPPRIMER_MASQUER,BTN_SUPPRIMER_LIBELLE,BTN_PAUSE_MASQUER,BTN_PAUSE_LIBELLE,BTN_VALIDER_LIBELLE,BTN_RENVOIDOSSIER_CODERETOUR,BTN_RENVOIDOSSIER_LIBELLE,BLOQUE_VALID_SI_AUCUNE_MODIF,PERSONNALISE,BTN_COMPINFO_AFFICHER,BTN_COMPINFO_LIBELLE,BTN_SUPPRIMER_DONNEE_COMM,BTN_SUPPRIMER_ERR_COMM_VID,BTN_RENVOIDOSSIER_DONNEE_COMM,BTN_RENVOIDOSSIER_ERR_COMM_VID,SIMULATION_DE_PAIE)
'*','50203',NULL,'1133',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
REF_WKF_OPERATION_ECRANS_INFO
==
DELETE FROM REF_WKF_OPERATION_ECRANS_INFO WHERE OP_NUM IN ('50203') AND COMPANY_ID='*'
##
REF_WKF_OPERATION_ECRANS_INFO (COMPANY_ID,OP_NUM,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,ID_GROUPE_ECRITURE,BTN_SUPPRIMER_MASQUER,BTN_SUPPRIMER_LIBELLE,BTN_PAUSE_MASQUER,BTN_PAUSE_LIBELLE,BTN_VALIDER_LIBELLE,BTN_RENVOIDOSSIER_CODERETOUR,BTN_RENVOIDOSSIER_LIBELLE,BLOQUE_VALID_SI_AUCUNE_MODIF,PERSONNALISE,BTN_COMPINFO_AFFICHER,BTN_COMPINFO_LIBELLE,BTN_SUPPRIMER_DONNEE_COMM,BTN_SUPPRIMER_ERR_COMM_VID,BTN_RENVOIDOSSIER_DONNEE_COMM,BTN_RENVOIDOSSIER_ERR_COMM_VID,SIMULATION_DE_PAIE)
'*','50203',NULL,'1133',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
META_WKF_OPERATION_ECRANS
==
DELETE FROM META_WKF_OPERATION_ECRANS WHERE OP_NUM IN ('50203') AND COMPANY_ID='*'
##
META_WKF_OPERATION_ECRANS (COMPANY_ID,OP_NUM,ORDRE,TYPE_ECRAN,ECRAN_NOM_PAGE,ECRAN_ID_REGLEGESTION_COND,IS_RECHERCHE_EMBAUCHE,RECHERCHE_REQUETE_NOMPAGE,RECHERCHE_REQUETE_IDREQUETE,IS_RECAP_COMPARATIF,RECAP_PROPOSE_PROPAG,RECHERCHE_ID_GROUPE_LECTURE,LIBELLE_BOUTON_EDITION,RECAP_ID_GROUPE_1,RECAP_AUTO,RECAP_ID_GROUPE_2,RECHERCHE_ID_REGLEGESTION_CTL,RECHERCHE_NOM_JSONSERVICELET,NOM_SERVICELET,NB_NIV_SS_GROUPE_AFF_CONDITION,ID_GEN_PAGE,LIBELLE_ECRAN_RECAP,ECRAN_NOM_PAGE_ALTERNATIF,DONNEE_CODE_EDITION)
'*','50203','1','PARAM','RD_INIT_MODCNT_FROM_API',NULL,'N',NULL,NULL,'N','N',NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
REF_WKF_OPERATION_ECRANS
==
DELETE FROM REF_WKF_OPERATION_ECRANS WHERE OP_NUM IN ('50203') AND COMPANY_ID='*'
##
REF_WKF_OPERATION_ECRANS (COMPANY_ID,OP_NUM,ORDRE,TYPE_ECRAN,ECRAN_NOM_PAGE,ECRAN_ID_REGLEGESTION_COND,IS_RECHERCHE_EMBAUCHE,RECHERCHE_REQUETE_NOMPAGE,RECHERCHE_REQUETE_IDREQUETE,IS_RECAP_COMPARATIF,RECAP_PROPOSE_PROPAG,RECHERCHE_ID_GROUPE_LECTURE,LIBELLE_BOUTON_EDITION,RECAP_ID_GROUPE_1,RECAP_AUTO,RECAP_ID_GROUPE_2,RECHERCHE_ID_REGLEGESTION_CTL,RECHERCHE_NOM_JSONSERVICELET,NOM_SERVICELET,NB_NIV_SS_GROUPE_AFF_CONDITION,ID_GEN_PAGE,LIBELLE_ECRAN_RECAP,ECRAN_NOM_PAGE_ALTERNATIF,DONNEE_CODE_EDITION)
'*','50203','1','PARAM','RD_INIT_MODCNT_FROM_API',NULL,'N',NULL,NULL,'N','N',NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Superviser les processus documents et signatures','Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin',null,'true')
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.Modules.Signature.SuiviDocumentsEtSignaturesAdmin','Ext.adp.Modules.Signature.OptionSignatureExtjs')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/modal/ExportImputations.jsp','Ext.adp.Modules.ZPaie.modal.ExportImputations')
##
SYS_VARSYS
=SQL=
DECLARE
varsysok NUMBER;
BEGIN
select count(*) into varsysok from sys_varsys where module ='STD' and codvar ='IS_ICONE_COMPARAISON';
if (varsysok = 0) then
insert into sys_varsys values ('STD', 'IS_ICONE_COMPARAISON','true','Booléen', 'Cette varsys conditionne l''affichage de l''icône de comparaison dans le composant date d''effet. True si le client veut afficher l''icône, false s''il souhaite la masquer en attendant une solution définitive.');
END IF;
END;
##
TGE_REF_CARTE_29
==
create or replace view TGE_REF_CARTE_29 as select * from ( select 'B050' CODE_ELEMENT,'**' INDICATIF from dual union all select 'A275' CODE_ELEMENT,'**' INDICATIF from dual union all select 'BA50' CODE_ELEMENT,'**' INDICATIF from dual union all select 'A456' CODE_ELEMENT,'**' INDICATIF from TGE_REF_PAC where  MPE in ('O','S') union all select 'A457' CODE_ELEMENT,substr(enregistrement,1,2) INDICATIF from tge_ref_vrval where code_table like '%DFR%' and substr(enregistrement,35,1)='D' and substr(enregistrement,1,2)<>'99' union all select 'A458' CODE_ELEMENT,substr(enregistrement,1,2) INDICATIF from tge_ref_vrval where code_table like '%DFR%' and substr(enregistrement,35,1)='D' and substr(enregistrement,1,2)<>'99'order by CODE_ELEMENT ) 
##
TAG_CHARSET=@€éèç
##
COMPARE_DICO_HISTO
=SQL=
/*********************************************************
Permet de comparer deux lignes d'un dictionnaire historisé
*********************************************************/
create or replace FUNCTION COMPARE_DICO_HISTO (
NOM_DICO IN VARCHAR2,
MATRIC IN VARCHAR2,
NUMPAC IN VARCHAR2,
PACMAT IN VARCHAR2,
PAIEZAD_CLE1 IN VARCHAR2,
DATE_EFFET_CLE1 IN VARCHAR2,
PAIEZAD_CLE2 IN VARCHAR2,
DATE_EFFET_CLE2 IN VARCHAR2,
TYPE_CLE IN VARCHAR2
)
RETURN COMPARE_DICO_HISTO_TAB
AS
retour COMPARE_DICO_HISTO_TAB := COMPARE_DICO_HISTO_TAB();

--gestion du curseur et du retour
TYPE refCursor IS REF CURSOR;
cur_val refCursor;

NOM_DONNEE VARCHAR2(20);
LIB_DONNEE VARCHAR2(50);
VALEUR_SELECT VARCHAR2(100);
VALEUR_PREC VARCHAR2(100);

--variables pour la requête
WHERE1 VARCHAR2(4000);
WHERE2 VARCHAR2(4000);
query CLOB;
PREMIER NUMBER;
COLS CLOB;
COLS_AS CLOB;

table_dico_exist number;

BEGIN    
    --on vérifie que le dictionnaire existe
    SELECT COUNT(*) INTO  table_dico_exist FROM USER_TABLES WHERE TABLE_NAME = NOM_DICO;
    IF table_dico_exist > 0 THEN
        --on génére les clause where en fonction du type de clé de l'écran        
        IF upper(type_cle) like 'N' THEN
            /** Ecran de type matricule de paie (NUMPAC/PACMAT) */
            WHERE1 := 'NUMPAC = '''|| NUMPAC ||''' AND PACMAT = '''|| PACMAT ||''' AND TO_DATE('''|| DATE_EFFET_CLE1 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN';
            WHERE2 := 'NUMPAC = '''|| NUMPAC ||''' AND PACMAT = '''|| PACMAT ||''' AND TO_DATE('''|| DATE_EFFET_CLE2 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN';                                    
        ELSIF upper(type_cle) like 'M' THEN 
            /** Ecran de type période d'emploi (NUMPAC/PAIEZAD) */
            WHERE1 := 'PAIEZAD = '''|| PAIEZAD_CLE1 ||''' AND PACMAT = '''|| PACMAT ||''' AND TO_DATE('''|| DATE_EFFET_CLE1 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN';
            WHERE2 := 'PAIEZAD = '''|| PAIEZAD_CLE2 ||''' AND PACMAT = '''|| PACMAT ||''' AND TO_DATE('''|| DATE_EFFET_CLE2 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN';
        ELSE
            /** Ecran de type matricule RHID (MATRIC) : type_cle = R ou R%*/
            WHERE1 := 'MATRIC = '''|| MATRIC ||''' AND TO_DATE('''|| DATE_EFFET_CLE1 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN';
            WHERE2 := 'MATRIC = '''|| MATRIC ||''' AND TO_DATE('''|| DATE_EFFET_CLE2 ||''',''DD.MM.YYYY'') BETWEEN DATE_EFF AND DATE_FIN'; 
        END IF;


        PREMIER := 0;
        COLS := '';
        COLS_AS := '';
        FOR col IN (SELECT COLUMN_NAME,DATA_TYPE FROM USER_TAB_COLS UTC WHERE TABLE_NAME = NOM_DICO)
        LOOP
            IF PREMIER = 0 THEN
                PREMIER := 1;
            ELSE
                COLS := COLS||',';
            COLS_AS := COLS_AS||',';
            END IF;
            COLS_AS := COLS_AS||col.COLUMN_NAME||' AS '''||col.COLUMN_NAME||'''';
    
            IF col.DATA_TYPE = 'DATE' THEN
                COLS := COLS||' TO_CHAR('||col.COLUMN_NAME||',''DD.MM.YYYY'') AS '||col.COLUMN_NAME;
            ELSIF col.DATA_TYPE = 'NUMBER' THEN
                COLS := COLS||'REGEXP_REPLACE(TO_CHAR('||col.COLUMN_NAME||'),''^,'',''0,'') AS '||col.COLUMN_NAME;
            ELSE
                COLS := COLS||col.COLUMN_NAME;
            END IF;
        END LOOP;
    
        query := 'SELECT a.COLONNE,a.COLONNE as LIB_DONNEE, a.VALEUR,b.VALEUR FROM (';
        --------------
        query := query ||' SELECT * FROM (';
        query := query ||' SELECT ';
        query := query ||' '||COLS;
        query := query ||' FROM '||NOM_DICO;
        query := query ||' WHERE '||WHERE1;
        query := query ||' ) UNPIVOT INCLUDE NULLS ( VALEUR FOR COLONNE IN (';
        query := query ||' '||COLS_AS;
        query := query ||' ))';
        query := query ||') a INNER JOIN (';
        --------------
        query := query ||' SELECT * FROM (';
        query := query ||' SELECT ';
        query := query ||' '||COLS;
        query := query ||' FROM '||NOM_DICO;
        query := query ||' WHERE '||WHERE2;
        query := query ||' ) UNPIVOT INCLUDE NULLS ( VALEUR FOR COLONNE IN (';
        query := query ||' '||COLS_AS;
        query := query ||' ))';
        query := query ||') b ON a.COLONNE = b.COLONNE';
        query := query ||' WHERE NVL(a.VALEUR,''NULL'') != NVL(b.VALEUR,''NULL'')';
    
    
        OPEN cur_val  FOR  query;
        LOOP
            FETCH cur_val INTO nom_donnee ,lib_donnee, valeur_prec, valeur_select ;
            EXIT WHEN cur_val%NOTFOUND ;
            retour.extend();
            retour(retour.last):= COMPARE_DICO_HISTO_LIGNE(nom_donnee, lib_donnee, valeur_prec, valeur_select);
        END LOOP;
    END IF;
	RETURN retour;
END COMPARE_DICO_HISTO;
##
TAG_CHARSET=@€éèç
##
DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE
=SQL=
create or replace
PROCEDURE DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE (pTableAModifier VARCHAR2, pTableGxp VARCHAR2, pListeElements TAB_VARCHAR) AS
p_whereOldValues VARCHAR(1000) := '' ;
BEGIN
 FOR i IN pListeElements.first..pListeElements.last LOOP
     IF pTableGxp IS NOT NULL THEN
       p_whereOldValues := 'NUMPAC=''*'' AND ELEMENT='''||pListeElements(i)||''' AND NOT TABLEGXP='''||pTableGxp||'''';
     ELSE
        p_whereOldValues := 'NUMPAC=''*'' AND ELEMENT='''||pListeElements(i)||'''' ;  
     END IF ;
     FOR n IN (SELECT NUMPAC FROM TGE_REF_PAC P WHERE NOT EXISTS (SELECT 1 FROM TGE_REF_MAPDO M WHERE M.NUMPAC=P.NUMPAC AND M.ELEMENT=pListeElements(i))) LOOP
      -- On duplique la ligne ayant NUMPAC = * , ELEMENT = <Element courant> et TABLEGXP != DIC_PENSION_ALIM (dans le cas où on passe le script une 2nde fois) sur un 'vrai' PAC
       DUPLIQUE_DONNEES(pTableAModifier,p_whereOldValues,'NUMPAC',''''||n.NUMPAC||'''','','','','','','','','','','','','','','','','');
     END LOOP;
  END LOOP;
END DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  -- Pour les simulations de départ, on autorise le calcul des périodes de recueil pour un mois dans le futur
  IF( p_periode_paie     <= periode_paie_en_cours OR p_dosNumForSimu IS NOT NULL) THEN
    IF p_dosNumForSimu IS NOT NULL THEN
      periode_recalcul   := p_periode_paie;
    ELSIF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
 		IF w_pacmat IS NOT NULL THEN
 			req              := req||'AND NVL(R.PACMAT, P.PACMAT) = '''||w_pacmat||'''';
 		END IF;
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
			EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);
		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPDATE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE pour forcer le passage dans le trigger et le recalcul de la colonne PERIODE avec la bonne valeur
		 -- On cible les incidents dont la colonne PERIODE ne correspond pas à la valeur qu'elle devrait avoir (MOIS_PAIE de TGE_PERIODE_RECUEIL_PAIEZAD pour la période de recueil incluant la DATE_EFFET de l'incident)
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE, TYPE_WRITER=''''R'''' ';
			req              := req|| ' WHERE ID IN ( ';
			req            	 := req|| '   select I.ID from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| '   INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| '   ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| '   AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| '   AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| '   WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			req            	 := req|| '   AND TO_CHAR(I.PERIODE, ''''YYYYMM'''') != P.MOIS_PAIE '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| '   AND P.PACMAT = '''''||w_pacmat||'''''  ';
			END IF;
			req            	 := req|| ' )  '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK : ''||SQL%ROWCOUNT||'' ligne(s) mise(s) à jour'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER
=SQL=
CREATE OR REPLACE PROCEDURE TGE_CREATE_TRIGGER(NOM_TABLE IN VARCHAR2)
AS
  PROC CLOB;
  PROC_MP_NOTIF CLOB;
  populateLigOld CLOB;
  populateLigNew CLOB;
  v_typeTable VARCHAR(1);
  is_aller_ou_allerretour_mapta NUMBER;
  table_exist                   NUMBER;
  type_writer_exists            NUMBER;
BEGIN

  -- Exclusion de DACS, le trigger est en dur.
  IF upper(NOM_TABLE) = 'DIC_ADM_CONTRAT_SITU' THEN
    RETURN;
  END IF;
  
  -- On teste si la table existe bien
  SELECT COUNT(*)
  INTO table_exist
  FROM user_tables
  WHERE table_name = nom_table;
  IF table_exist = 0 THEN
    RETURN;
  END IF;

  SELECT COUNT(*)
  INTO is_aller_ou_allerretour_mapta
  FROM tge_ref_mapta
  WHERE 
    tablephy = nom_table
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
      --Ajout du type 'I'
    AND allerretour                                   IN ('A', '2','I');

  PROC_MP_NOTIF := TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE);

  -- Si on n'est ni sur une table qui part en paie, ni sur une table qui génère des notifications Marketplace, ni sur DIC_ADM_PERSO, DIC_ADM_PERSO_HISTO, DIC_ADM_CONTRAT ou DIC_ADM_CONTRAT_HISTO, on ne génère pas de trigger
  IF is_aller_ou_allerretour_mapta = 0 AND nom_table NOT IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') AND PROC_MP_NOTIF IS NULL THEN
    RETURN;
  END IF;

  -- Si la colonne TYPE_WRITER n'existe pas, on la crée
  SELECT COUNT(*)
  INTO type_writer_exists
  FROM user_tab_cols
  WHERE column_name     = 'TYPE_WRITER'
  AND table_name        = NOM_TABLE;
  IF type_writer_exists = 0 THEN
     EXECUTE_IMMEDIATE_STRING(  'ALTER TABLE ' || NOM_TABLE || ' ADD (TYPE_WRITER VARCHAR2(1 BYTE))',0);
  END IF;

  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  PROC        := 'CREATE OR REPLACE TRIGGER TRG_' || NOM_TABLE || ' FOR INSERT OR UPDATE OR DELETE ON '||NOM_TABLE||' COMPOUND TRIGGER 
v_matric varchar2(32);
v_numpac varchar2(6); 
v_pacmat varchar2(8); 
v_paiezad varchar2(8);
v_type_writer varchar2(1); 
v_bypass_trigger number; 
v_bypass_DACH number; 
v1_bypass_DACH number;
TYPE periodeTabType is  table of TGE_REF_PAC.PERIODEENCOURS%TYPE ; 
periodeTab periodeTabType := periodeTabType();    
idxPeriodesIndiv NUMBER;
v_ligOld '||nom_table||'%ROWTYPE;
v_ligNew '||nom_table||'%ROWTYPE;
v_periode varchar2(6);
tabRefPacByNumpac ALIM_IDX.T_REF_PAC_BY_NUMPAC; 
';
  IF nom_table='DIC_PERIODES_RECUEIL_HIS' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    PROC :=PROC||'
listJobMasseAsync varchar2(4000);
listJobMasseAsyncTab TAB_VARCHAR:=TAB_VARCHAR();
v_jobAsyncMasseIdx NUMBER;
';
  END IF;

  IF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
    PROC :=PROC||'
TYPE paiezadPacPeriodModifedType IS  TABLE OF TGE_PAC_PAIEZAD_PERIOD_RETRO  INDEX BY VARCHAR2(15);
paiezadPacPeriodModifed paiezadPacPeriodModifedType ;
idx  VARCHAR2(15);
';
  ELSE 
    PROC :=PROC||'
idx NUMBER;
';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
    PROC          :=PROC||' 
v_listMatricToUpdate CLOB := NULL; 
v_nbMatricToUpdate NUMBER := 0;
v_countSecNav NUMBER := -1;
';
    IF nom_table   ='DIC_ADM_PERSO' THEN
      PROC        :=PROC||'
v_listMatricToDelete CLOB := NULL; 
v_nbMatricToDelete NUMBER := 0;
';
    ELSIF nom_table='DIC_ADM_CONTRAT' THEN
      PROC        :=PROC||'
v_date_debut_periode_paie DATE :=NULL; 
v_nbLig NUMBER; 
v_doMajPerso NUMBER := 0; 
TYPE NUMPAC_PACMAT_TO_DELETE IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE); 
TYPE TAB_NUMPAC_PACMAT_TO_DELETE IS TABLE OF NUMPAC_PACMAT_TO_DELETE; 
v_NUMPAC_PACMAT NUMPAC_PACMAT_TO_DELETE; 
v_TAB_NUMPAC_PACMAT TAB_NUMPAC_PACMAT_TO_DELETE; 
v_listNumpacPacmatToDelete CLOB := '',''; 
';
    ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC        :=PROC||'
v_dsdcn DIC_ADM_CONTRAT.DSDCN%TYPE; 
v_date_eff DIC_ADM_CONTRAT_HISTO.DATE_EFF%TYPE;
v_natcol DIC_ADM_CONTRAT.NATCOL%TYPE; 

TYPE paiezadTabType is table of DIC_ADM_CONTRAT_HISTO.PAIEZAD%TYPE ; 
TYPE numpacTabType is  table of DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE ; 
paiezadTab paiezadTabType := paiezadTabType(); 
numpacTab numpacTabType := numpacTabType(); 

TYPE T_TRAITEMENT_PERIODES_INDIV IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(100);
-- Ce tableau indexé contient plusieurs chose :
-- + Une entrée avec un code PAC + un PAIEZAD --> Un flag permettant de savoir si le couple NUMPAC/PAIEZAD a déjà été traité
-- + Une entrée avec un code PAC --> La période en cours du PAC
tabTrtPeriodesIndividuelles T_TRAITEMENT_PERIODES_INDIV;
in_calc_hp T_TRAITEMENT_PERIODES_INDIV;
TYPE calcHpTabType is  table of T_TRAITEMENT_PERIODES_INDIV ; 
calcHpTab calcHpTabType := calcHpTabType();
 
TYPE T_COMPARAISON_VAL_OLD_NEW IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(20);
tabValToCompare T_COMPARAISON_VAL_OLD_NEW;
TYPE PRESENTDIC_PACMAT IS RECORD 
(NUMPAC  varchar2(6),PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE);
TYPE TAB_PRESENTDIC_PACMAT IS TABLE OF PRESENTDIC_PACMAT INDEX BY VARCHAR2(14);
indexTabPresFicPacmat varchar2(14);
tabPresenceFichierPacmat TAB_PRESENTDIC_PACMAT;
alimPeriodesIndiv boolean;
';
    END IF;

    IF nom_table='DIC_ADM_CONTRAT' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC     :=PROC||'
v_actionIdx VARCHAR2(1);
v_lanceRecalculHp boolean;
v_isDeleting  NUMBER ;
v_jobIdx NUMBER;
v_cle_idx_contrat T_CLE_IDX_CONTRAT_HISTO; 
v_cles_idx_contrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
';
    END IF;

    IF nom_table='DIC_ADM_PERSO' OR nom_table='DIC_ADM_CONTRAT' THEN
      PROC     :=PROC||'
v_matricForPacmat VARCHAR2(32); 
TYPE T_LOCKED_MATRIC IS TABLE OF VARCHAR2(1) INDEX BY VARCHAR2(32);
tabLockedMatric T_LOCKED_MATRIC;
';
    END IF;
  END IF;

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      :=PROC||' 
BEFORE STATEMENT IS BEGIN
 select count(*) into v_bypass_DACH from bypass_trg_DACH_on_session;
END BEFORE STATEMENT;
';
  END IF;

  PROC        := PROC || '  
BEFORE EACH ROW IS BEGIN
' ;

  populateLigOld := NULL;
  populateLigNew := NULL;
  FOR liste_cols_table IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=NOM_TABLE AND COLUMN_ID IS NOT NULL ORDER BY COLUMN_NAME) 
  LOOP
    populateLigOld := populateLigOld||'
v_ligOld.'||liste_cols_table.COLUMN_NAME||' := :OLD.'||liste_cols_table.COLUMN_NAME||';';

        populateLigNew := populateLigNew||'
v_ligNew.'||liste_cols_table.COLUMN_NAME||' := :NEW.'||liste_cols_table.COLUMN_NAME||';';
  END LOOP;

  PROC      := PROC || '
IF INSERTING THEN 
 -- On initialise le ''OLD'' (car :OLD n''existe pas, en insertion)
 v_ligOld := ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- En insertion dans DIC_ADM_CONTRAT_HISTO, on considère que le 'OLD' c'est l'histo précédent (celui qui est en train d'être splitté)
    PROC      := PROC || 'GET_CONTRAT_HISTO_HORS_TRANSAC(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DATE_EFF-1, TRUE); ';
  ELSE
    PROC      := PROC || 'NULL; ';
  END IF;
  PROC      := PROC || '
ELSE' || populateLigOld || '
END IF;
IF DELETING THEN 
 -- On initialise le ''NEW'' (car :NEW n''existe pas, en suppression)
 v_ligNew := ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- En suppression dans DIC_ADM_CONTRAT_HISTO, on considère que le 'NEW' c'est l'histo précédent (dont les données vont remplacer celles de l'histo qui est supprimée)
    PROC      := PROC || 'GET_CONTRAT_HISTO_HORS_TRANSAC(:OLD.NUMPAC, :OLD.PACMAT, :OLD.NUMCNT, :OLD.DATE_EFF-1, TRUE); ';
  ELSE
    PROC      := PROC || 'NULL; ';
  END IF;
  PROC      := PROC || '
ELSE' || populateLigNew || '
END IF;
';

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      := PROC || ' IF (v_bypass_DACH > 0) THEN null; else ';
  END IF;

  PROC          := PROC || ' 
if (v_bypass_trigger > 0) then 
 v_type_writer := ''N''; 
else 
 IF DELETING THEN 
  v_type_writer :=NVL(v_ligOld.type_writer,''O''); 
 ELSE 
  v_type_writer :=NVL(v_ligNew.type_writer,''O''); 
  -- On remet TYPE_WRITER à NULL pour qu''il ne soit pas considéré comme ''N'' lors des futurs update n''incluant pas cette colonne 
  :NEW.type_writer := NULL; 
  v_ligNew.type_writer := :NEW.type_writer; 
 END IF; 
END IF; 
v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC);
';

  IF v_typeTable = 'z' THEN
    PROC := PROC||' 
v_numpac := nvl(v_ligNew.numpac,v_ligOld.numpac);
IF DELETING THEN
 v_paiezad := v_ligOld.paiezad;
ELSE
 v_paiezad := v_ligNew.paiezad;
END IF; ';
  ELSIF v_typeTable='p' THEN
    PROC := PROC||' 
v_numpac := nvl(v_ligNew.numpac,v_ligOld.numpac);
v_pacmat := nvl(v_ligNew.pacmat,v_ligOld.pacmat); ';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
    PROC      := PROC || '
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND v_countSecNav=-1 THEN
 SELECT COUNT(*) INTO v_countSecNav FROM SECUPACMAT_TMP WHERE MATRIC=''SECNAV'';
 IF v_countSecNav>0 THEN
  RAISE_APPLICATION_ERROR(-20000,''CODERR=GENREC03'');
 END IF;
END IF;
';
  END IF;

  IF nom_table ='DIC_ADM_PERSO' OR nom_table ='DIC_ADM_CONTRAT' THEN
    -- On récupère le MATRIC et on teste si on l'a déjà traité
    PROC      := PROC || ' 
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND NOT tabLockedMatric.exists(v_matric) THEN';

    -- En cas de modification de DAP, on lock les tables qui la mette à jour par trigger (DAPH, DAC, DACS et DACH)
    -- En cas de modification de DAC, on lock les tables qui la mette à jour par trigger (DACS et DACH)
    IF nom_table ='DIC_ADM_PERSO' THEN
      -- DAPH et DAC uniquement pour DAP
      PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_PERSO_HISTO SET MATRIC=MATRIC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
    END IF;

    -- DACs et DACH uniquement pour les 2 (DAP et DAC)
    PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_CONTRAT_SITU SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd'') WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT_HISTO SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
        

    -- On stocke le MATRIC pour indiquer qu'on l'a déjà traité
    PROC      := PROC || ' 
tabLockedMatric(v_matric) := ''O'';
END IF;';

  END IF;

  IF nom_table   ='DIC_ADM_PERSO' THEN
    PROC        :=PROC||TRG_PERSO_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
    PROC        :=PROC||TRG_PERSO_HISTO_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_CONTRAT' THEN
    PROC        :=PROC||TRG_CONTRAT_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    PROC        :=PROC||TRG_CONTRAT_HISTO_BEFORE_ROW();
  END IF;

  IF is_aller_ou_allerretour_mapta > 0 THEN
    PROC := PROC||TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE);
  END IF;

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      := PROC || '
END IF ;
';
  END IF;

  PROC := PROC||PROC_MP_NOTIF;

  PROC :=PROC||' 
END BEFORE EACH ROW;';

  IF nom_table IN ('DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
    PROC      :=PROC||' AFTER EACH ROW IS BEGIN ';
    IF nom_table   = 'DIC_ADM_CONTRAT_HISTO' THEN
      PROC      := PROC|| TRG_CONTRAT_HISTO_AFTER_ROW();
    ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
      PROC      := PROC|| DIC_PERIOD_REC_HISTO_AFTER_ROW();
    END IF;
    PROC      :=PROC||' END AFTER EACH ROW;';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
    PROC          :=PROC||' AFTER STATEMENT IS BEGIN';
    IF nom_table   ='DIC_ADM_PERSO' THEN
      PROC        :=PROC||TRG_PERSO_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
      PROC        :=PROC||TRG_PERSO_HISTO_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_CONTRAT' THEN
      PROC        :=PROC||TRG_CONTRAT_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC        :=PROC||TRG_CONTRAT_HISTO_AFTER_STMNT();
    ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
      PROC        :=PROC||DIC_PERIODES_REC_H_AFTER_STMNT();
    END IF;
    PROC:=PROC||'END AFTER STATEMENT;';
  END IF;

  PROC :=PROC||' END TRG_'||NOM_TABLE||';';
  
  EXECUTE_IMMEDIATE_STRING( PROC,0);
END TGE_CREATE_TRIGGER;
##
TAG_CHARSET=@€éèç
##
TGE_RETRO_INSCRIPTION
=SQL=
CREATE OR REPLACE PROCEDURE TGE_RETRO_INSCRIPTION(
  P_NUMPAC IN VARCHAR2,
  P_PACMAT IN VARCHAR2,
  P_PERIODE_RETRO IN VARCHAR2,
  P_CODE_CHRONO IN VARCHAR2,
  P_PAIEZAD IN VARCHAR2,
  P_TABLE_MAJ IN VARCHAR2)
AS
  V_EXIST_TGE_MODIF_PACMAT_RETRO NUMBER;
  V_GAP_RETRO_MATRIC_UPDATE      NUMBER;
  V_PERIODE_RETRO_A_INSERE       VARCHAR2(20);
  V_DATE_LIMITE_RETRO            VARCHAR2(20);
  V_PERIODEENCOURS               VARCHAR2(6);
BEGIN
  V_PERIODE_RETRO_A_INSERE := P_PERIODE_RETRO;
  SELECT PERIODEENCOURS, GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, 'YYYYMM'), -NB_MOIS_RETRO), 'YYYYMM'),NVL( PREMIERE_PAIE, '190101')) 
  INTO V_PERIODEENCOURS, V_DATE_LIMITE_RETRO
  FROM TGE_REF_PAC T
  LEFT JOIN SECUPACMAT S ON S.NUMPAC=T.NUMPAC AND S.PACMAT = P_PACMAT
  WHERE DEB_HISTO_RETRO IS NOT NULL 
  AND NB_MOIS_RETRO IS NOT NULL 
  AND T.NUMPAC = P_NUMPAC;
  IF (P_PERIODE_RETRO<V_DATE_LIMITE_RETRO) THEN
  V_PERIODE_RETRO_A_INSERE := V_DATE_LIMITE_RETRO;
  END IF;
  IF (V_PERIODE_RETRO_A_INSERE>= V_PERIODEENCOURS) THEN
  RETURN;
  END IF;
  SELECT COUNT(*)
  INTO V_EXIST_TGE_MODIF_PACMAT_RETRO
  FROM TGE_MODIF_PACMAT_RETRO
  WHERE NUMPAC      = P_NUMPAC
  AND PACMAT        = P_PACMAT
  AND TABLE_MAJ    	= P_TABLE_MAJ
  AND PERIODE_RETRO = V_PERIODE_RETRO_A_INSERE;
  IF (V_EXIST_TGE_MODIF_PACMAT_RETRO=0) THEN
    -- S'il n'y a pas encore de ligne dans TGE_MODIF_PACMAT_RETRO pour le NUMPAC / PACMAT / PERIODE_RETRO, on insère
    INSERT INTO TGE_MODIF_PACMAT_RETRO VALUES (
      P_NUMPAC,
      P_PACMAT,
      V_PERIODE_RETRO_A_INSERE,
      P_TABLE_MAJ,
      SYSDATE
    );
  END IF;
  SELECT COUNT(*)
  INTO V_GAP_RETRO_MATRIC_UPDATE
  FROM GAP_RETRO_MATRIC 
  WHERE NUMPAC        = P_NUMPAC
  AND PACMAT          = P_PACMAT
  AND PERIODE_RETRO   = V_PERIODE_RETRO_A_INSERE
  AND MIN_CODE_CHRONO < P_CODE_CHRONO;
  IF(V_GAP_RETRO_MATRIC_UPDATE=0) THEN
    -- S'il n'y a pas de ligne dans GAP_RETRO_MATRIC pour le NUMPAC / PACMAT / PERIODE_RETRO, et avec un CODE_CHRONO > au CODE_CHRONO qui a été modifié, on met à jour
    SELECT COUNT(*)
    INTO V_GAP_RETRO_MATRIC_UPDATE
    FROM GAP_RETRO_MATRIC 
    WHERE NUMPAC      = P_NUMPAC
    AND PACMAT        = P_PACMAT
    AND PERIODE_RETRO = V_PERIODE_RETRO_A_INSERE;
    IF(V_GAP_RETRO_MATRIC_UPDATE=0) THEN
      -- S'il n'y a pas encore de ligne dans GAP_RETRO_MATRIC pour le NUMPAC / PACMAT / PERIODE_RETRO, on insère
      INSERT INTO GAP_RETRO_MATRIC VALUES (
        P_NUMPAC,
        P_PACMAT,
        V_PERIODE_RETRO_A_INSERE,
        P_CODE_CHRONO,
        P_PAIEZAD
      );
    ELSE
      -- S'il y a déjà une ligne dans GAP_RETRO_MATRIC pour le NUMPAC / PACMAT / PERIODE_RETRO, on met à jour
      UPDATE GAP_RETRO_MATRIC SET 
        MIN_CODE_CHRONO = P_CODE_CHRONO,
        PAIEZAD_RETRO   = P_PAIEZAD
      WHERE MIN_CODE_CHRONO > P_CODE_CHRONO
      AND NUMPAC            = P_NUMPAC
      AND PACMAT            = P_PACMAT
      AND PERIODE_RETRO     = V_PERIODE_RETRO_A_INSERE;
    END IF;
  END IF;
END TGE_RETRO_INSCRIPTION;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_INCIDENTS_PAIE
=SQL=
create or replace trigger trg_tge_incidents_paie FOR
  insert or
  update or
  delete on tge_incidents_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_old_numpac       varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_old_paiezad      varchar2(8);
  v_date_effet       DATE; 
  v_periode_retro    VARCHAR2(6);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  dateFinRecueil DATE;
  --moisPaie  VARCHAR2(6);
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   DATE;
  date_effet_recycl   DATE;
  A520 VARCHAR2(32);
  A521 VARCHAR2(32);
  A523 VARCHAR2(32);
  activite VARCHAR2(32);
  etablissement VARCHAR2(32);
  categorie VARCHAR2(32);
  nomTablegxp VARCHAR2(32);
  requete CLOB;
  V_IS_T2           NUMBER;
  V_ORIGINE_CREATE  VARCHAR2(32);
  BEFORE STATEMENT IS BEGIN
    -- action de 'bypass' le trigger 
    select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;   
    v_old_numpac := 'X' ;
  END BEFORE STATEMENT;
BEFORE EACH ROW
IS
begin
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité
    v_numpac        := NVL(:new.numpac, :old.numpac);
    v_paiezad       := NVL(:new.paiezad, :old.paiezad);
    IF v_old_numpac != v_numpac THEN
     -- Récupération des info du pac    
     SELECT 
       PERIODEENCOURS,
       DEB_RETRO
     INTO
       V_PERIODEENCOURS,
       V_DEB_RETRO
     FROM TGE_REF_PAC
       WHERE NUMPAC = v_numpac; 
    end if;
    
    if deleting then
      v_type_writer := nvl(:old.type_writer, 'O');
    else
      v_type_writer := nvl(:new.type_writer, 'O');
      -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
      :new.type_writer := null;
    end if;

    if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
      --La colonne PERIODE_INIT ne peut pas être modifiée, elle doit contenir la valeur initiale de la colonne PERIODE (avant tout recalcul).
      IF INSERTING THEN
        :NEW.PERIODE_INIT := :NEW.PERIODE;
      ELSIF UPDATING THEN 
        :NEW.PERIODE_INIT := :OLD.PERIODE_INIT;
      END IF;
    
      if INSERTING or UPDATING then
        BEGIN
          IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
            v_date_effet    := NVL(:new.date_effet, :old.date_effet);
            V_ORIGINE_CREATE := NVL(:new.ORIGINE_CREATE, :old.ORIGINE_CREATE);
            SELECT COUNT(*) INTO V_IS_T2 
            FROM DIC_ADM_CONTRAT_HISTO 
            WHERE V_ORIGINE_CREATE = 'BATCH' 
            AND NUMPAC = v_numpac 
            AND PAIEZAD = v_paiezad 
            AND ZA996 = 'A' 
            AND v_date_effet BETWEEN DATE_EFF AND DATE_SORTIE_SIT_BO;
            
            IF  V_IS_T2 = 0 THEN 
              SELECT MIN(MOIS_PAIE) 
              INTO v_periode_retro
              FROM TGE_PERIODE_RECUEIL_PAIEZAD
              WHERE numpac = v_numpac
              AND paiezad  = v_paiezad
              AND v_date_effet BETWEEN DEBUT_PERIODE_RECUEIL AND FIN_PERIODE_RECUEIL;
              
              IF v_periode_retro IS NOT NULL THEN
                :new.periode     := TO_DATE(v_periode_retro || 01, 'yyyyMMdd');
              END IF;
            END IF;
          END IF;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            -- Période de recueil non trouvé
            null;
        END;
      END IF;
  
      BEGIN
        SELECT t.pacmat,nvl(t.periode_recyclage,'1'),CODE_CHRONO
        INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
        from dic_adm_contrat_SITU d, secupacmat t
        where d.numpac = v_numpac
        and d.paiezad  = v_paiezad
        and d.numpac   = t.numpac
        and d.pacmat   = t.pacmat
        and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          null;
      END;
      if v_periode_recycl = '3' then
        raise_application_error(-20000, 'CODERR=GENREC02');
      elsif v_periode_recycl = '2' then
        raise_application_error(-20000, 'CODERR=GENREC01');
      elsif v_periode_recycl = '1' then
        /** Test de mise en recyclage **/
        v_recycl            := 'N';
        --Période de recueil individuelle
        --select periodeencours into moisPaie from tge_ref_pac where numpac = v_numpac;
        BEGIN
          --Période de recueil individuelle
          SELECT FIN_PERIODE_RECUEIL INTO dateFinRecueil from tge_periode_recueil_paiezad where numpac=v_numpac 
          and MOIS_PAIE=V_PERIODEENCOURS and paiezad=v_paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          dateFinRecueil:=null;
        END;
        --Période de recueil génèrique
        if(dateFinRecueil  is null) then  
          if v_old_numpac  !=  v_numpac OR ( v_old_numpac  =  v_numpac AND A520 is null  and A521 is  null and A523  is null) THEN 
            SELECT tablegxp ,
              A520_DONNEE ,
              A521_DONNEE ,
              A523_DONNEE into 
            nomTablegxp,A520,A521,A523
            FROM
            (
            SELECT DISTINCT c.element,
              c.tablegxp,
              c.DONNEEGXP
            FROM tge_ref_mapdo c
            WHERE C.numpac = v_numpac
            AND c.element IN ('A520','A521', 'A523')
            UNION ALL
            SELECT DISTINCT c.element,
              c.tablegxp,
              c.DONNEEGXP
            FROM tge_ref_mapdo c
            WHERE C.numpac                  ='*'
            AND c.element                  IN ('A520','A521', 'A523')
            AND (c.TABLEGXP,c.ELEMENT) NOT IN
            (SELECT a.TABLEGXP,
              a.element
            FROM tge_ref_mapdo a
            WHERE a.numpac = v_numpac
            AND A.ELEMENT IN ('A520','A521', 'A523')
            )
            ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN('A520' AS A520,'A521' AS A521, 'A523' AS A523));
          end if; 
          if( A520 is  not null  and A521 is not null and A523  is not null) then
            requete:='select '||A520|| ','||A521||','||A523||'  from '||nomTablegxp||' d '; 
            requete:=requete || ' where numpac='''||v_numpac||''' and paiezad='''|| v_paiezad  || ''' and pacmat='''||v_pacmat||''''; 
            if( nomTablegxp='DIC_ADM_CONTRAT_HISTO') then
              requete:=requete || ' and sysdate BETWEEN date_eff and date_fin_bo AND rownum=1';
            end if;
            BEGIN
              EXECUTE IMMEDIATE requete into activite,etablissement,categorie;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              dateFinRecueil:=null;
            END;
          end if;
          if(activite is not null and etablissement is not null and categorie is not null) then
            BEGIN
              select 
                max(to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8),'DDMMYYYY')) into  dateFinRecueil
              from tge_ref_vrval   
              WHERE numero_de_pac = v_numpac 
              AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = to_char(to_date(V_PERIODEENCOURS,'YYYYMM'),'MMYYYY') 
              AND CODE_TABLE = 'LTP'  
              AND IS_BETWEEN_NLS_FRENCH(LPAD(activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = 'TRUE' 
              AND IS_BETWEEN_NLS_FRENCH(LPAD(etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = 'TRUE' 
              AND IS_BETWEEN_NLS_FRENCH(LPAD(categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = 'TRUE' ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                dateFinRecueil:=null;
            END;
          end if;
        end if;
        if (dateFinRecueil is null) then
          select LAST_DAY( to_date(V_PERIODEENCOURS,'YYYYMM') ) into dateFinRecueil from dual;
        end if;
        IF DELETING THEN
          date_test_recycl := :old.periode;
          date_effet_recycl :=:old.date_effet;
        ELSE
          date_test_recycl := :new.periode;
          IF updating THEN
            date_effet_recycl :=LEAST(:new.date_effet,:old.date_effet);
          ELSE
            date_effet_recycl :=:new.date_effet;
          END IF;
        END IF;
        IF  (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') > to_char(dateFinRecueil,'YYYYMMDD' ) ) THEN
          date_test_recycl := TO_DATE('20991231','yyyymmdd');
        END IF;
        if (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') <= to_char(dateFinRecueil,'YYYYMMDD' ) ) then
          if inserting or deleting then
            v_recycl := 'O';
          elsif updating then
            if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
              v_recycl                 := 'O';
            elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
              v_recycl                 := 'O';
            elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
              v_recycl                 := 'O';
            elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
              v_recycl                 := 'O';
            elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
              v_recycl                 := 'O';
            elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
              v_recycl                 := 'O';
            elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
              v_recycl                 := 'O';
            elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
              v_recycl                 := 'O';
            elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
              v_recycl                 := 'O';
            end if;
          end if;
          if v_recycl = 'O' then
            begin
              merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
            when not matched then
              insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
            exception
            when others then
              --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
              --FIXME utiliser la procédure trace_dbms_output()
              NULL;
            end;
          end if;
        end if;
      end if; /** Fin test de mise en recyclage **/
      -- Si TYPE_WRITER = 'R', on bypass la mise en rétro (le code appelant devra le faire lui-même si nécessaire)
      IF v_type_writer <> 'R' AND V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
        /** Test de mise en rétro **/
        v_retro            := 'N';
        if inserting or deleting then
          v_retro := 'O';
        elsif updating then
          -- Les valeurs des colonnes clés ne peuvent pas être nulls 
          if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
            v_retro                 := 'O';
          elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
            v_retro                 := 'O';
          elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
            v_retro                 := 'O';
          elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
            v_retro                 := 'O';
          elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
            v_retro                 := 'O';
          elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
            v_retro                 := 'O';
          elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
            v_retro                 := 'O';
          elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
            v_retro                 := 'O';
          elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
            v_retro                 := 'O';
          end if;
        end if;
        if v_retro = 'O' then
          V_PERIODE := TO_CHAR(NVL(:NEW.PERIODE,:OLD.PERIODE),'YYYYMM');
          TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_INCIDENTS_PAIE');
        END IF;
      END IF; /** Fin test de mise en rétro **/
    end if; /** Fin test v_type_writer <> N et M **/
    v_old_numpac  :=  v_numpac; 
  end if; /** Fin test v_bypass_trigger **/
END BEFORE EACH ROW;
end trg_tge_incidents_paie;
##
TAG_CHARSET=@€éèç
##
REF_DONNEE_MAPPING_API_IHM
=SQL=
CREATE OR REPLACE VIEW REF_DONNEE_MAPPING_API_IHM (NOM_DONNEE_UX, NOM_DONNEE, CONDITION, LIBELLE_DONNEE_DEFAUT) AS 
SELECT NOM_DONNEE_UX, NOM_DONNEE, CONDITION, NULL FROM REF_DONNEE_MAPPING_UX 
UNION ALL 
SELECT NOM_DONNEE_UX, NOM_DONNEE, CONDITION, NULL FROM REF_DONNEE_MAPPING_API_CLI 
WHERE NOM_DONNEE IS NOT NULL AND NOM_DONNEE_UX NOT IN (SELECT NOM_DONNEE_UX FROM REF_DONNEE_MAPPING_UX) 
UNION ALL 
SELECT 'managerId', 'MATRICPERE', NULL, 'Manager' FROM DUAL 
UNION ALL 
SELECT 'actualStartDate', 'DATE_EFF', NULL, 'Date d''effet' FROM DUAL 
UNION ALL 
SELECT 'payrollFileNumber', 'PACMAT', NULL, 'Date d''effet' FROM DUAL 
UNION ALL 
SELECT 'workerStatus', 'STATUT', NULL, 'Statut (actif / inactif)' FROM DUAL 
UNION ALL 
SELECT 'formattedName', 'NOM,PRENOM', NULL, 'Nom + Prénom' FROM DUAL 
UNION ALL 
SELECT 'strucAffectationId', 'CODE_ENTITE', NULL, 'Affectation hiérarchique' FROM DUAL 
UNION ALL 
SELECT 'weeklyHours', 'HORAIRE_HEBDO', NULL, 'Horaire hebdomadaire' FROM DUAL 
UNION ALL 
SELECT 'monthlyHours', 'HORAIRE_MENSUEL', NULL, 'Horaire mensuel' FROM DUAL 
##
TGE_REF_CARTE_29
==
create or replace view TGE_REF_CARTE_29 as select * from ( select 'B050' CODE_ELEMENT,'**' INDICATIF from dual union all select 'A275' CODE_ELEMENT,'**' INDICATIF from dual union all select 'BA50' CODE_ELEMENT,'**' INDICATIF from dual union all select 'A456' CODE_ELEMENT,'**' INDICATIF from TGE_REF_PAC where  MPE in ('O','S') union all select 'A457' CODE_ELEMENT,substr(enregistrement,1,2) INDICATIF from tge_ref_vrval where code_table like '%DFR%' and substr(enregistrement,35,1)='D' and substr(enregistrement,1,2)<>'99' union all select 'A458' CODE_ELEMENT,substr(enregistrement,1,2) INDICATIF from tge_ref_vrval where code_table like '%DFR%' and substr(enregistrement,35,1)='D' and substr(enregistrement,1,2)<>'99'order by CODE_ELEMENT ) 
##
TAG_CHARSET=@€éèç
##
DIC_ADM_CONTRAT_SITU
=SQL IFNOTEXIST=DIC_ADM_CONTRAT_SITU=MOTIF_CHANGE_SITU=
ALTER TABLE DIC_ADM_CONTRAT_SITU ADD MOTIF_CHANGE_SITU VARCHAR2(2)
##
TAG_CHARSET=@€éèç
##
GA_MOTIF_CHANG_SITU
=SQL IFNOTEXIST=GA_MOTIF_CHANG_SITU=
CREATE TABLE GA_MOTIF_CHANG_SITU(MOTIF_CHANGE_SITU VARCHAR2 (2) NOT NULL,  LIBELLE VARCHAR2(255) NOT NULL, CONSTRAINT GA_MOTIF_CHANG_SITU_PK PRIMARY KEY (MOTIF_CHANGE_SITU))
##
GA_MOTIF_CHANG_SITU (MOTIF_CHANGE_SITU,LIBELLE)
==
DELETE FROM GA_MOTIF_CHANG_SITU WHERE MOTIF_CHANGE_SITU IN ('01','02','03','04','05','06','07')
'01','Changement de rémunération'
'02','Changement d''horaire'
'03','Changement d''établissement'
'04','Changement de rémunération et d''horaire'
'05','Changement de rémunération et d''établissement'
'06','Changement d''établissement et d''horaire'
'07','Changement de rémunération, d''horaire et d''établissement'
##
TAG_CHARSET=@€éèç
##
GA_ZWQUALITE
=SQL IFNOTEXIST=GA_ZWQUALITE=
CREATE TABLE GA_ZWQUALITE( code_Qualite  VARCHAR2(3 BYTE) NOT NULL ENABLE, libelle_Qualite VARCHAR2(50 BYTE) NOT NULL ENABLE,  PRIMARY KEY (code_Qualite) )
##
GA_ZWQUALITE
==
Delete from GA_ZWQUALITE where code_Qualite in ('101','110','240','310','330','340','350','410','411','420','480')
'101','Salarié ordinaire'
'110','Apprenti'
'240','Bûcheron'
'310','Jockey'
'330','Enseignant des établissements agricoles privés'
'340','Personnel centre de vacances '
'350','Formateur occasionnel'
'410','Adulte en stage suite à formation'
'411','Elève ETA en stage'
'420','Mandataire social'
'480','Aide à domicile en milieu rural (ADMR)'
##
TAG_CHARSET=@€éèç
##
GA_ZWSANCTIONS
=SQL IFNOTEXIST=GA_ZWSANCTIONS=
CREATE TABLE GA_ZWSANCTIONS (CODE VARCHAR2(2) PRIMARY KEY, LIBELLE VARCHAR2(50), UTILISE VARCHAR2(1))
##
GA_ZWSANCTIONS
==
DELETE FROM GA_ZWSANCTIONS WHERE CODE IN ('01','02','03','04','05','06')
'01','Blâme','O'
'02','Mise à pied disciplinaire','O'
'03','Rétrogradation','O'
'04','Mutation','O'
'05','Licenciement faute réelle et sérieuse','O'
'06','Licenciement faute grave ou lourde','O'
##
MP_MAPPING_EVENT_DATA
==
DELETE FROM MP_MAPPING_EVENT_DATA WHERE EVENT='worker.legalName.change' AND NOM_DONNEE_DEX_OU_EVENT='formattedName'
'worker.legalName.change','formattedName','O','D','N'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkersWorkerStatusCodeValue','WorkersWorkerStatusStatusCodeCodeValue','WorkAssignmentCustomFieldGroupNumberFieldsMonthlyHoursNumberValue','WorkAssignmentsDefaultCustomFieldGroupNumberFieldsWeeklyHoursNumberValue','WorkAssignmentCustomFieldGroupCodeFieldsTimeAttendanceCodeValue')
'WorkersWorkerStatusStatusCodeCodeValue','workerStatus'
'WorkAssignmentCustomFieldGroupNumberFieldsMonthlyHoursNumberValue','monthlyHours'
'WorkAssignmentsDefaultCustomFieldGroupNumberFieldsWeeklyHoursNumberValue','weeklyHours'
'WorkAssignmentCustomFieldGroupCodeFieldsTimeAttendanceCodeValue','standardHours'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationAccomodationRateAmountValue','WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationFoodRateAmountValue','WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationNTICRateAmountValue','WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationOtherRateAmountValue','WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationRateAmountValue','WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationTransportRateAmountValue')
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationAccomodationRateAmountValue','additionalRemunerationAccomodation'
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationFoodRateAmountValue','additionalRemunerationFood'
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationNTICRateAmountValue','additionalRemunerationNTIC'
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationOtherRateAmountValue','additionalRemunerationOther'
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationRateAmountValue','additionalRemuneration'
'WorkAssignmentsDefaultAdditionalRemunerationsAdditionalRemunerationTransportRateAmountValue','additionalRemunerationTransport'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkAssignmentsDefaultCustomFieldGroupNumberFieldsCoefficientNumberValue','WorkAssignmentsDefaultCustomFieldGroupDateFieldsContratProEndDateDateValue','WorkAssignmentsDefaultCustomFieldGroupDateFieldsContratProStartDateDateValue','BusinessCommunicationFaxesCountryDialing','PersonCommunicationLandlinesCountryDialing','PersonCommunicationMobileCountryDialing','BusinessCommunicationMobilesCountryDialing','WorkAssignmentsDefaultFullTimeEquivalenceRatio','WorkAssignmentsDefaultCustomFieldGroupDateStringFieldsHireTimeStringValue','WorkAssignmentsDefaultCustomFieldGroupDateFieldsIntershipAgreementDateDateValue','WorkAssignmentCustomFieldGroupCodeFieldsRecoursReasonCodeValue','WorkAssignmentsDefaultCustomFieldGroupDateFieldsOccupationalEntryDateDateValue')
'WorkAssignmentsDefaultCustomFieldGroupNumberFieldsCoefficientNumberValue','coefficient'
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsContratProEndDateDateValue','contratProEndDate'
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsContratProStartDateDateValue','contratProStartDate'
'BusinessCommunicationFaxesCountryDialing','countryDialingFaxWork'
'PersonCommunicationLandlinesCountryDialing','countryDialingLandlinePerso'
'PersonCommunicationMobileCountryDialing','countryDialingMobilePerso'
'BusinessCommunicationMobilesCountryDialing','countryDialingMobileWork'
'WorkAssignmentsDefaultFullTimeEquivalenceRatio','fullTimeEquivalenceRatio'
'WorkAssignmentsDefaultCustomFieldGroupDateStringFieldsHireTimeStringValue','hireTime'
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsIntershipAgreementDateDateValue','intershipAgreementDate'
'WorkAssignmentCustomFieldGroupCodeFieldsRecoursReasonCodeValue','recoursReason'
'WorkAssignmentsDefaultCustomFieldGroupDateFieldsOccupationalEntryDateDateValue','occupationalEntryDate'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP_ALP IN ('birthPlaceDept','birthPlaceCityEtr','rehireDate')
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP_ALP = 'remuneration'
'WorkAssignmentsDefaultBaseRemunerationMonthlyRateAmountAmountValue','remuneration'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP_ALP = 'countryDialingLandlineWork'
'BusinessCommunicationLandlinesCountryDialing','countryDialingLandlineWork'
##
MP_SECU_DATA
==
INSERT INTO MP_SECU_DATA SELECT DISTINCT CONSUMER_APP_OID, 'formattedName', URI_ID FROM MP_SECU_DATA T1 WHERE DATA_NAME_MP_ALP IN ('firstName','lastName') AND NOT EXISTS (SELECT 1 FROM MP_SECU_DATA T2 WHERE T2.CONSUMER_APP_OID=T1.CONSUMER_APP_OID AND T2.URI_ID=T1.URI_ID AND T2.DATA_NAME_MP_ALP='formattedName')
##
MP_SECU_DATA
==
INSERT INTO MP_SECU_DATA SELECT DISTINCT CONSUMER_APP_OID, 'weeklyHours', URI_ID FROM MP_SECU_DATA T1 WHERE DATA_NAME_MP_ALP = 'standardPayPeriodHours' AND NOT EXISTS (SELECT 1 FROM MP_SECU_DATA T2 WHERE T2.CONSUMER_APP_OID=T1.CONSUMER_APP_OID AND T2.URI_ID=T1.URI_ID AND T2.DATA_NAME_MP_ALP='weeklyHours')
##
MP_SECU_DATA
==
INSERT INTO MP_SECU_DATA SELECT DISTINCT CONSUMER_APP_OID, 'monthlyHours', URI_ID FROM MP_SECU_DATA T1 WHERE DATA_NAME_MP_ALP = 'standardPayPeriodHours' AND NOT EXISTS (SELECT 1 FROM MP_SECU_DATA T2 WHERE T2.CONSUMER_APP_OID=T1.CONSUMER_APP_OID AND T2.URI_ID=T1.URI_ID AND T2.DATA_NAME_MP_ALP='monthlyHours')
##
TAG_CHARSET=@€éèç
##
PHOTO_DIC_ADM_CONTRAT_SITU
=SQL IFNOTEXIST=PHOTO_DIC_ADM_CONTRAT_SITU=MOTIF_CHANGE_SITU=
ALTER TABLE PHOTO_DIC_ADM_CONTRAT_SITU ADD MOTIF_CHANGE_SITU VARCHAR2(2)
##
SECUPACMAT
=SQL IFNOTEXIST=SECUPACMAT=PREMIERE_PAIE=
ALTER TABLE SECUPACMAT ADD PREMIERE_PAIE VARCHAR2(6)
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODERR IN ('ADMPD218','ADMPD219','ADMPD220','ADMPD221','ADMPD222')
'ADMPD218','ADM','fr_fr',0,'Veuillez sélectionner une donnée',1
'ADMPD219','ADM','fr_fr',0,'Vous devez d''abord interroger une donnée',1
'ADMPD220','ADM','fr_fr',0,'Veuillez sélectionner un dictionnaire',1
'ADMPD221','ADM','fr_fr',0,'La validation des caractéristiques générales a été effectuée avec succès',1
'ADMPD222','ADM','fr_fr',0,'Le nom de la donnée a été modifié : veuillez d''abord interroger',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODERR = 'ADMPD123' AND CODLANG = 'fr_fr' AND CODMOD ='STD'
'ADMPD123','STD','fr_fr','0','La suppression d''une période d''emploi qui n''est pas la dernière est interdite.','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'API' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('API00003', 'API00004', 'API00005', 'API00006', 'API00007', 'API00008')
'API00003', 'API', 'fr_fr', 0, 'Veuillez indiquer l''identifiant de l''application consommatrice à interroger.', 1
'API00004', 'API', 'fr_fr', 0, 'Cette application consommatrice n''existe pas.', 1
'API00005', 'API', 'fr_fr', 0, 'L''export du fichier a été réalisé avec succès.', 3
'API00006', 'API', 'fr_fr', 0, 'Veuillez renseigner le code origine.', 1
'API00007', 'API', 'fr_fr', 0, 'La sécurité a été enregistrée avec succès', 3
'API00008', 'API', 'fr_fr', 0, 'La sécurité n''a pas été enregistrée.', 1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'GEN' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR = 'GENCHS16'
'GENCHS16','GEN','fr_fr','0','Veuillez noter qu''en cas de contrôle, vous devez pouvoir justifier de cette incapacité d''au moins 10%.','2'
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'RECY0001' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = '0' AND CODMOD ='TGE'
'RECY0001','TGE','fr_fr','0','Le dernier rafraichissement a eu lieu il y a moins de 2 minutes. Veuillez réessayer plus tard.','1'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.AnnulerSitu','L''action en cours va annuler une situation contractuelle.'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.SupprimerSitu','L''action en cours va supprimer une situation contractuelle.'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT','fr_fr','SuppressionDateEff.Erreur','Une erreur est survenue, veuillez contacter votre administrateur.' 
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
##
SYS_DEF_LIBELLE_ML
==
delete from SYS_DEF_LIBELLE_ML where TYPE = 'GENERIC_LABELS' and CODE_LANGUE='fr_fr' and CODE_LIBELLE in ('GENERIC_LABELS_SuppressionDateEff.AnnulerSitu', 'GENERIC_LABELS_SuppressionDateEff.SupprimerSitu', 'GENERIC_LABELS_SuppressionDateEff.Erreur')
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.AnnulerSitu','L''action en cours va annuler une situation contractuelle.'
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.SupprimerSitu','L''action en cours va supprimer une situation contractuelle.'
'GENERIC_LABELS','fr_fr','GENERIC_LABELS_SuppressionDateEff.Erreur','Une erreur est survenue, veuillez contacter votre administrateur.' 
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ( 'valeurLigneColonne' )
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideParamDonErgonomieEcran','fr_fr', 'valeurLigneColonne','(Zéro ''0'' permet de gérer la valeur automatiquement)'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE in ('Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs') and CODE_LIBELLE IN ('label_select-readonly','label_radio-readonly','label_checkbox-readonly', 'label_textarea-readonly', 'allerVersDictionnaire', 'allerVersDonnee')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_select-readonly','Liste déroulante non saisissable'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_radio-readonly','Bouton ''radio'' non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_checkbox-readonly','Case à cocher non saisissable' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'label_textarea-readonly','Non saisissable sur plusieurs lignes' 
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'allerVersDictionnaire','Aller vers ce dictionnaire'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs','fr_fr', 'allerVersDonnee','Aller vers cette donnée'
##
SYS_DEF_LIBELLE_ML
==
DELETE FROM SYS_DEF_LIBELLE_ML WHERE TYPE = 'Ext.adp.ZPaie.RETRO.INSCRIRETRO' AND CODE_LANGUE='fr_fr' AND CODE_LIBELLE IN ('warnPremierePaie')
'Ext.adp.ZPaie.RETRO.INSCRIRETRO','fr_fr', 'warnPremierePaie','Certains des salariés sélectionnés n''ont pas été inscrits en rétro car leur date de première paie est plus récente'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'TAB_RD_MOTIF_SITU_CSCP' and IDREQUETE in(1)
'TAB_RD_MOTIF_SITU_CSCP',1,'Utilisateur','GA_MOTIF_CHANG_SITU','MOTIF_CHANGE_SITU,LIBELLE','MOTIF_CHANGE_SITU,LIBELLE','',0,False,'MOTIF_CHANGE_SITU','motif de changement de situation du contrat','motif de changement de situation du contrat','MOTIF_CHANGE_SITU,LIBELLE'
##
SYS_REQUETES_JSP
==
DELETE SYS_REQUETES_JSP WHERE  IDREQUETE='1' AND NOMPAGE='TAB_RETRO_MOIS'
'TAB_RETRO_MOIS','1','Utilisateur','(select   PERIODE_RETRO, MOIS_RETRO_ACTIVE,CASE WHEN INSCRI_MANU >0 AND INSCRI_AUTO >0  THEN ''Mixte'' WHEN INSCRI_MANU >0 THEN ''Manuelle'' WHEN INSCRI_AUTO >0 THEN ''Automatique'' ELSE ''Aucune inscription''  END AS INSCRIPTION, INSCRI_MANU,INSCRI_AUTO, DECODE (CHECKED, 0, ''N'', ''O'') as CHECKED  from (    (SELECT P.PERIODE_RETRO,    CASE      WHEN T.PERIODE_RETRO IS NOT NULL      AND P.PERIODE_RETRO  >= T.PERIODE_RETRO      THEN ''N''      ELSE ''O''    END AS MOIS_RETRO_ACTIVE,    (SELECT COUNT(*)    FROM GAP_RETRO_MATRIC    WHERE NUMPAC      = ''%1''    AND PACMAT        = ''%2''    AND PERIODE_RETRO = P.PERIODE_RETRO    ) AS INSCRI_AUTO,    (SELECT COUNT(*)    FROM GAP_SELECTION_RETRO    WHERE NUMPAC      = ''%1''    AND PACMAT        = ''%2''    AND PERIODE_PAIE  = P.PERIODEENCOURS    AND PERIODE_RETRO = P.PERIODE_RETRO   ) AS INSCRI_MANU,      (SELECT COUNT(*)    FROM GAP_SELECTION_RETRO    WHERE NUMPAC      = ''%1''    AND PACMAT        = ''%2''    AND PERIODE_PAIE  = P.PERIODEENCOURS    AND PERIODE_RETRO = P.PERIODE_RETRO    AND AOID = @AOID@    ) AS CHECKED  FROM    (SELECT PERIODEENCOURS,      TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,''YYYYMM''),-LEVEL),''YYYYMM'') AS PERIODE_RETRO    FROM      (SELECT PERIODEENCOURS,        NB_MOIS_RETRO,        DEB_HISTO_RETRO FROM TGE_REF_PAC      WHERE NUMPAC = ''%1''      AND DEB_RETRO <= PERIODEENCOURS AND DEB_HISTO_RETRO  < PERIODEENCOURS      )      CONNECT BY LEVEL <= LEAST(NB_MOIS_RETRO,MONTHS_BETWEEN(TO_DATE(PERIODEENCOURS,''YYYYMM''),TO_DATE(DEB_HISTO_RETRO,''YYYYMM'')))    ) P  LEFT JOIN    (SELECT MIN(PERIODE_RETRO) AS PERIODE_RETRO    FROM GAP_RETRO_MATRIC_TRAITE    WHERE NUMPAC = ''%1''    AND PACMAT   = ''%2''    ) T  ON 1=1 WHERE P.PERIODE_RETRO >= (SELECT  NVL( PREMIERE_PAIE, ''190101'') FROM SECUPACMAT WHERE NUMPAC = ''%1'' AND PACMAT = ''%2''))  ))','PERIODE_RETRO,INSCRIPTION','PERIODE_RETRO,INSCRI_MANU,INSCRI_AUTO,CHECKED,MOIS_RETRO_ACTIVE',NULL,'0',NULL,'PERIODE_RETRO DESC',NULL,'Inscription manuelle à la rétroactivité',NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'TAB_RD_SANCTIONS' and IDREQUETE in(1)
'TAB_RD_SANCTIONS',1,'Utilisateur','GA_ZWSANCTIONS','CODE, LIBELLE','CODE, LIBELLE','UTILISE = ''O''',0,NULL,NULL,'Recherche d''une sanction en fonction du code. Ramène le libellé.','Recherche d''une sanction','LIBELLE'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'REG_RD_SALARIE_MSA' and IDREQUETE in(1)
'REG_RD_SALARIE_MSA',1,'Utilisateur','DIC_ADM_CONTRAT_HISTO,DIC_ETABLI2','count(*)',NULL,'DIC_ETABLI2.codetb_etb = DIC_ADM_CONTRAT_HISTO.codetb  and DIC_ETABLI2.organx=''M'' and  DIC_ADM_CONTRAT_HISTO.numpac=''%1'' and DIC_ADM_CONTRAT_HISTO.PACMAT=''%2'' and DIC_ADM_CONTRAT_HISTO.NUMCNT=''%3'' and DIC_ADM_CONTRAT_HISTO.DATE_EFF=''%4'' and DIC_ADM_CONTRAT_HISTO.PAIEZAD=''%5''',0,NULL,NULL,'déterminer si le salarié est rattaché à la MSA.','salarié rattaché à la MSA',NULL
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE = 'TAB_RD_QUALITE' and IDREQUETE in(1)
'TAB_RD_QUALITE','1','Utilisateur','GA_ZWQUALITE','CODE_QUALITE, LIBELLE_QUALITE','CODE_QUALITE, LIBELLE_QUALITE',NULL,'0',NULL,NULL,'Permet d''afficher la liste des codes qualités de la table GA_ZWQUALITE permet d''afficher la liste des codes qualités code','TAB_RD_QUALITE','CODE QUALITE, LIBELLE QUALITE'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE IN ( 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs', 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideCreationDonnee')
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs', 'STD_PAGINATION_NBLIGPAGE', 'ADMPD001;ADMPD008;Z2X00033;Z2X00034;ADMPD076;ADMPD047;ADMPD121;ADMPD145;ADMPD180;ADMPD181;ADMPD182;ADMPD183;ADMPD218;ADMPD219;ADMPD220;ADMPD221;ADMPD222', 'TOOLS_ML'
'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.slidein.SlideCreationDonnee', null, 'ADMPD076;ADMPD218;ADMPD219;ADMPD221', 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT', null, null, 'TOOLS_ML'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Modules.DEX.GestionApplicationConsommatricesAPI'
'Ext.adp.Modules.DEX.GestionApplicationConsommatricesAPI', null, 'API00005;API00006;API00007;API00008', 'GestionApplicationConsommatriceAPIJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Modules.DEX.GestionApplicationConsommatricesAPI_CDF'
'Ext.adp.Modules.DEX.GestionApplicationConsommatricesAPI_CDF', null, 'API00005;API00006;API00007;API00008', 'GestionApplicationConsommatriceAPIJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE = 'Ext.adp.Modules.RD.STD.EXP.CNT_COURANT.CNT_COURANT'
##
SYS_SCH_PAGE_INITIALIZER
==
delete from SYS_SCH_PAGE_INITIALIZER where NOM_PAGE =  'Ext.adp.ZPaie.RETRO.INSCRIRETRO'
'Ext.adp.ZPaie.RETRO.INSCRIRETRO', null, null, 'TOOLS_ML'
##
SYS_SCH_PROFIL_P
==
INSERT INTO SYS_SCH_PROFIL_P SELECT DISTINCT(CODE_PROFIL),'Ext.adp.MainDesk.view.eastregion.news.News','L' from SYS_SCH_PROFIL WHERE NOT EXISTS (SELECT 1 FROM SYS_SCH_PROFIL_P WHERE NOM_PAGE='Ext.adp.MainDesk.view.eastregion.news.News')
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR='URL_OCN'
'SYS', 'URL_OCN', 'https://eu1.orgchartnow.com/', 'Texte', 'URL de connexion à OrgChart Now, si la VarSys ACTIVE_BETA_FEATURES active la fonctionnalité ''OCN'''
##
TGE_REF_MAPDO_DIC_ADM_CONTRAT_HISTO
=SQL=
call DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE ('TGE_REF_MAPDO', NULL, TAB_VARCHAR('AC26'))
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE element = 'AC26' AND NUMPAC = '*'
'*','AC26','**','RD_FINESS','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_FINESS') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_FINESS','FINESS salarié','DIC_ADM_CONTRAT_HISTO','X','9',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1141',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_FINESS') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_FINESS','FINESS salarié','DIC_ADM_CONTRAT_HISTO','X','9',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1141',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_FINESS') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_FINESS','*','FINESS salarié','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_FINESS') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_FINESS','*','FINESS salarié','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_DSINIT','RD_DSINIT2','RD_DSINIT3') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_DSINIT','Date initiale reconnaissance statut OETH','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DSINIT2','Date initiale reconnaissance','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DSINIT3','Date initiale reconnaissance','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_DSINIT','RD_DSINIT2','RD_DSINIT3') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES,DEGRE_LIBERTE)
'*','RD_DSINIT','Date initiale reconnaissance statut OETH','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DSINIT2','Date initiale reconnaissance','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
'*','RD_DSINIT3','Date initiale reconnaissance','DIC_MEDICAL_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1154',NULL,NULL,NULL,NULL,'N',NULL
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_DSINIT','RD_DSINIT2','RD_DSINIT3') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_DSINIT','*','Date initiale reconnaissance statut OETH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSINIT2','*','Date initiale reconnaissance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSINIT3','*','Date initiale reconnaissance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_DSINIT','RD_DSINIT2','RD_DSINIT3') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_DSINIT','*','Date initiale reconnaissance statut OETH','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSINIT2','*','Date initiale reconnaissance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
'*','RD_DSINIT3','*','Date initiale reconnaissance','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','1','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_VALO_RENTE_ATMP') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_VALO_RENTE_ATMP','AUT','Valorisation à Oui de la rente ATMP si le statut OETH vaut 02 avec taux sup ou égal à 10%',NULL,'1154',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DOETH_STAT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£02","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TXIPP","OPERATEUR":"GE","OPERANDE_2":"VALEUR£10","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RENTE_ATMP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DOETH_STAT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£02","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TXIPP","OPERATEUR":"LT","OPERANDE_2":"VALEUR£10","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£N","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RENTE_ATMP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclaratif médical : si le statut OETH est à 02 (bénéficiaire ATMP) et que le taux IPP est supérieur ou égale à 10% alors la rente est cochée par défaut. (Il y a un message d''alerte dans ce cas pour le rappel du justificatif)','O',NULL,'/*¿ * RD_VALO_RENTE_ATMP :¿ * Déclaratif médical : si le statut OETH est à 02 (bénéficiaire ATMP) et que le taux IPP est supérieur ou égale à 10% alors la rente est cochée par défaut. (Il y a un message d''alerte dans ce cas pour le rappel du justificatif)¿ */¿¿if (DIC_MEDICAL_HISTO.RD_DOETH_STAT == "02" && DIC_MEDICAL_HISTO.RD_TXIPP >= 10) {¿	DIC_MEDICAL_HISTO.RD_RENTE_ATMP = "O";¿}¿if (DIC_MEDICAL_HISTO.RD_DOETH_STAT == "02" && DIC_MEDICAL_HISTO.RD_TXIPP < 10) {¿	DIC_MEDICAL_HISTO.RD_RENTE_ATMP = "N";¿}¿','Valorisation à Oui de la rente ATMP si le statut OETH  = 02 avec taux >=10%'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_VALO_RENTE_ATMP') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_VALO_RENTE_ATMP','AUT','Valorisation à Oui de la rente ATMP si le statut OETH vaut 02 avec taux sup ou égal à 10%',NULL,'1154',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DOETH_STAT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£02","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TXIPP","OPERATEUR":"GE","OPERANDE_2":"VALEUR£10","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£O","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RENTE_ATMP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_DOETH_STAT","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£02","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TXIPP","OPERATEUR":"LT","OPERANDE_2":"VALEUR£10","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£N","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_RENTE_ATMP","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclaratif médical : si le statut OETH est à 02 (bénéficiaire ATMP) et que le taux IPP est supérieur ou égale à 10% alors la rente est cochée par défaut. (Il y a un message d''alerte dans ce cas pour le rappel du justificatif)','O',NULL,'/*¿ * RD_VALO_RENTE_ATMP :¿ * Déclaratif médical : si le statut OETH est à 02 (bénéficiaire ATMP) et que le taux IPP est supérieur ou égale à 10% alors la rente est cochée par défaut. (Il y a un message d''alerte dans ce cas pour le rappel du justificatif)¿ */¿¿if (DIC_MEDICAL_HISTO.RD_DOETH_STAT == "02" && DIC_MEDICAL_HISTO.RD_TXIPP >= 10) {¿	DIC_MEDICAL_HISTO.RD_RENTE_ATMP = "O";¿}¿if (DIC_MEDICAL_HISTO.RD_DOETH_STAT == "02" && DIC_MEDICAL_HISTO.RD_TXIPP < 10) {¿	DIC_MEDICAL_HISTO.RD_RENTE_ATMP = "N";¿}¿','Valorisation à Oui de la rente ATMP si le statut OETH  = 02 avec taux >=10%'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_VALO_RENTE_ATMP') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_VALO_RENTE_ATMP','1',NULL,'DONNEE£RD_DOETH_STATµVALEUR£02µEQµDONNEE£RD_TXIPPµVALEUR£10µGEµ#ET#',NULL,NULL,'3','4'
'*','RD_VALO_RENTE_ATMP','3','VALEUR£O','VAL','££','DONNEE£RD_RENTE_ATMP','4','4'
'*','RD_VALO_RENTE_ATMP','4',NULL,'DONNEE£RD_DOETH_STATµVALEUR£02µEQµDONNEE£RD_TXIPPµVALEUR£10µLTµ#ET#',NULL,NULL,'6','FIN'
'*','RD_VALO_RENTE_ATMP','6','VALEUR£N','VAL','££','DONNEE£RD_RENTE_ATMP','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_VALO_RENTE_ATMP') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_VALO_RENTE_ATMP','1',NULL,'DONNEE£RD_DOETH_STATµVALEUR£02µEQµDONNEE£RD_TXIPPµVALEUR£10µGEµ#ET#',NULL,NULL,'3','4'
'*','RD_VALO_RENTE_ATMP','3','VALEUR£O','VAL','££','DONNEE£RD_RENTE_ATMP','4','4'
'*','RD_VALO_RENTE_ATMP','4',NULL,'DONNEE£RD_DOETH_STATµVALEUR£02µEQµDONNEE£RD_TXIPPµVALEUR£10µLTµ#ET#',NULL,NULL,'6','FIN'
'*','RD_VALO_RENTE_ATMP','6','VALEUR£N','VAL','££','DONNEE£RD_RENTE_ATMP','FIN','FIN'
##
SYS_SCH_ELEMENT
==
CALL ADM_CREATE_NOM_PAGE(99,'What''s new','Ext.adp.MainDesk.view.eastregion.news.News',null,'false')
##
SYS_SCH_ELEMENT
=SQL IFEXIST=SYS_SCH_ELEMENT=
UPDATE SYS_SCH_ELEMENT SET TAGS = '_PAS_VISIBLE_' where nom_page = 'Ext.adp.MainDesk.view.eastregion.news.News'
##
ADM_NEWPAGE_SYS_SCHEMAS
==
CALL ADM_NEWPAGE_SYS_SCHEMAS('Ext.adp.MainDesk.view.eastregion.news.News', 'Ext.adp.Moteur.ADP_ONLY.GestionProfil')
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Historique des projets' where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.HistoriquesDesProjetsMVVM'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des écrans'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageEcransExtjs'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des données'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDonneesExtjs'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des groupes de données'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageGroupesDonneesExtjs'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Gestion des livrables'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.GestionDesLivrablesMVVM'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Gestion des projets'	where nom_page = 'Ext.adp.Moteur.ParamEcranDyn.GestionDesProjetsMVVM'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Appels Table'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.AppelsTableAdmin'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Appel table Tools'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.AppelsTableTools'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des dictionnaires'	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.ParametrageDictionnairesExtjs'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Organisation des écrans Workflow' 	where nom_page = 'Ext.adp.Moteur.ADP_ONLY.ParamEcranDyn.WkfOperationEcransMVVM'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Historique des projets old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/HistoriquesDesProjets.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des écrans old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/ParametrageEcrans.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des données old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/ParametrageDonnees.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des groupes de données old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/ParametrageGroupesDonnees.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Gestion des livrables old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/GestionDesLivrables.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Gestion des projets old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/GestionDesprojets.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Appels Table tools old' where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/AppelTableTools.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Appels Table old'	where nom_page = 'Moteur/ADP_ONLY/Comp/WebAdmin/GestionAppelsTable.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Paramétrage des dictionnaires old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/ParametrageDictionnaires.jsp'
##
SYS_SCH_ELEMENT
==
update sys_sch_element set libelle = 'Organisation des écrans workflow old'	where nom_page = 'Moteur/ADP_ONLY/ParamEcranDyn/WkfOperationEcrans.jsp'
