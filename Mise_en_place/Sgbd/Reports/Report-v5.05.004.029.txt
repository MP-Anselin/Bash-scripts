##
TAG_CHARSET=@€éèç
TAG_IMPORT=5.05.004.R029
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_ROW
=SQL=
create or replace FUNCTION TRG_CONTRAT_HISTO_AFTER_ROW
  RETURN CLOB
AS
  v_retour CLOB;
  v_prec_donneegxp VARCHAR2(100);
  CURSOR cur_mapdo
  IS
SELECT NUMPAC,
  ELEMENT,
  DONNEEGXP
FROM TGE_REF_MAPDO
WHERE ELEMENT IN
  ( 
  SELECT 'A301' FROM dual 
  UNION ALL 
  SELECT 'A302' FROM dual 
  UNION
  SELECT  nom_elt
  FROM    tge_map_arg_elt
  WHERE   code_table = 'LTP'
  )
ORDER BY ELEMENT,
  NUMPAC DESC;
  lig_mapdo cur_mapdo%rowtype;
  lig_mapdo_prec cur_mapdo%rowtype := NULL;
BEGIN

  v_retour := ' 
v_numpac := NVL(:NEW.NUMPAC,:OLD.NUMPAC); 
v_paiezad := NVL(:NEW.paiezad,:OLD.paiezad); 
v_periode := TO_CHAR(LEAST(NVL(:NEW.date_eff,:OLD.date_eff), NVL(:OLD.date_eff,:NEW.date_eff)), ''YYYYMM'');
-- On ne traite que l''UPDATE, et on n''ajoute chaque couple NUMPAC/PAIEZAD qu''une seule fois 
IF NOT tabTrtPeriodesIndividuelles.exists(v_numpac||v_paiezad) THEN 
tabTrtPeriodesIndividuelles(v_numpac||v_paiezad) := ''O''; 
IF INSERTING OR DELETING THEN 
alimPeriodesIndiv := TRUE; 
ELSE 
alimPeriodesIndiv := FALSE; ';
  OPEN cur_mapdo;
  LOOP
    FETCH cur_mapdo INTO lig_mapdo ;
    IF lig_mapdo_prec.element IS NOT NULL AND (cur_mapdo%NOTFOUND OR NOT lig_mapdo_prec.element=lig_mapdo.element) THEN
      -- La dernière ligne traitée était la dernière ligne de mapping pour l'élément précédent
      -- Si c'était le PAC *, c'est le cas par défaut (ELSE), sinon, on continue de tester le PAC
	  
	    SELECT ':old.'  ||LISTAGG(donneegxp,'||:old.') WITHIN GROUP (ORDER BY donneegxp)
		INTO v_prec_donneegxp
		FROM
		  (SELECT numpac,
			donneegxp
		  FROM TABLE (get_gxp_trt_particulier_datas('DIC_ADM_CONTRAT_HISTO', lig_mapdo_prec.element))
		  UNION
		  SELECT lig_mapdo_prec.numpac, lig_mapdo_prec.donneegxp FROM dual
		  );

	  
      IF lig_mapdo_prec.numpac='*' THEN
        v_retour             := v_retour||' 
ELSE ';
      ELSE
        v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo_prec.numpac||''' THEN ';
      END IF;
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo_prec.element||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||lig_mapdo_prec.element||''') := '||v_prec_donneegxp||'; 
END IF; ';
     
      IF NOT lig_mapdo_prec.numpac='*' THEN
        -- Pas de ligne avec un PAC * : cas par défaut --> NULL
        
          v_retour := v_retour||' 
ELSE 
tabValToCompare(''old'||lig_mapdo_prec.element||''') := NULL; 
tabValToCompare(''new'||lig_mapdo_prec.element||''') := NULL; 
END IF; ';
        
      END IF;
    END IF;
    EXIT
  WHEN cur_mapdo%NOTFOUND;
    -- C'est la toute première ligne, ou bien la ligne précédente était la dernière ligne de mapping pour l'élément précédent
    -- On recommence un nouveau bloc IF
    IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=lig_mapdo.element THEN
              v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo.element||''') := NULL; 
tabValToCompare(''new'||lig_mapdo.element||''') := NULL; 
IF v_numpac IS NULL THEN NULL; ';
      
    END IF;
    IF NOT lig_mapdo.numpac='*' THEN
      
        v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo.numpac||''' THEN 
tabValToCompare(''old'||lig_mapdo.element||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||lig_mapdo.element||''') := '||v_prec_donneegxp||';  ';
      
    END IF;
    lig_mapdo_prec := lig_mapdo;
  END LOOP;
CLOSE cur_mapdo;
IF lig_mapdo_prec.element IS NOT NULL THEN
  -- On est passé au moins une fois dans la boucle
  lig_mapdo_prec := NULL;
  OPEN cur_mapdo;
  LOOP
    FETCH cur_mapdo INTO lig_mapdo ;
    EXIT
  WHEN cur_mapdo%NOTFOUND;
    -- C'est la toute première ligne, ou bien la ligne précédente était la dernière ligne de mapping pour l'élément précédent
    IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=lig_mapdo.element THEN
      
        v_retour := v_retour||' 
IF tabValToCompare(''new'||lig_mapdo.element||''')<>tabValToCompare(''old'||lig_mapdo.element||''') OR (tabValToCompare(''new'||lig_mapdo.element||''') IS NOT NULL AND tabValToCompare(''old'||lig_mapdo.element||''') IS NULL) OR (tabValToCompare(''new'||lig_mapdo.element||''') IS NULL AND tabValToCompare(''old'||lig_mapdo.element||''') IS NOT NULL) THEN 
alimPeriodesIndiv := TRUE; 
END IF; ';
      
    END IF;
    lig_mapdo_prec := lig_mapdo;
  END LOOP;
  CLOSE cur_mapdo;
END IF;
v_retour := v_retour||' 
END IF; 
IF alimPeriodesIndiv THEN 
  -- Modification de la date de début ou de fin de suspension : on met à jour la table des périodes individuelles 
  idxPeriodesIndiv := null;
  FOR i IN 1..paiezadTab.count LOOP
    IF numpacTab(i) = v_numpac AND paiezadTab(i) = v_paiezad THEN
      idxPeriodesIndiv := i;
      EXIT;
    END IF;
  end LOOP ;
  
  IF idxPeriodesIndiv IS NOT NULL THEN
    periodeTab(idxPeriodesIndiv) := LEAST(periodeTab(idxPeriodesIndiv), v_periode);
  ELSE
    paiezadTab.EXTEND ; 
    paiezadTab(paiezadTab.LAST) := v_paiezad; 
    numpacTab.EXTEND ; 
    numpacTab(numpacTab.LAST) := v_numpac; 
    periodeTab.EXTEND ;
    periodeTab(periodeTab.LAST) := v_periode;
  END IF;
END IF; 
END IF; 
 IF INSERTING OR  UPDATING THEN
   	in_calc_hp(''P_NUMPAC''):=NVL(:NEW.NUMPAC,:OLD.NUMPAC);
	in_calc_hp(''OLD_ZA819''):=:OLD.ZA819;
 	in_calc_hp(''NEW_ZA819''):=:NEW.ZA819;
 	in_calc_hp(''OLD_ZA820''):=:OLD.ZA820;
 	in_calc_hp(''NEW_ZA820''):=:NEW.ZA820;
 	in_calc_hp(''P_MATRIC''):=NVL(:NEW.PACMAT,:OLD.PACMAT);
 	in_calc_hp(''P_PAIEZAD''):=NVL(:NEW.PAIEZAD,:OLD.PAIEZAD);
 	in_calc_hp(''P_NUMCNT''):=TO_CHAR(NVL(:NEW.NUMCNT,:OLD.NUMCNT));
 	in_calc_hp(''DATE_DEB''):=TO_CHAR(NVL(:NEW.DATE_EFF,:OLD.DATE_EFF),''DD/MM/YYYY'');
 	in_calc_hp(''DATE_FIN_BO''):=TO_CHAR(NVL(:NEW.date_sortie_sit_bo,:OLD.date_sortie_sit_bo),''DD/MM/YYYY'');
 	in_calc_hp(''P_LOGIN'') :=''TRIGGER'';
END IF;
';
RETURN v_retour;
END TRG_CONTRAT_HISTO_AFTER_ROW;
##
CAD
=SQL=
CREATE OR REPLACE
PACKAGE CAD
AS
 FUNCTION CAD_RESOLUTION_POP_REGLES_MAJ(
 p_dteffet VARCHAR2)
 RETURN CAD_TYPE_POP_REGLES_MAJ;
 PROCEDURE CAD_CALCUL(
 matric  IN VARCHAR2 ,
 idrub   IN NUMBER ,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 );
 PROCEDURE CAD_CONTROLE_SOLDE(
 idrub  IN VARCHAR2,
 matric IN VARCHAR2 );
 PROCEDURE CAD_MAJ_VALEUR_LISTE_RUBJOUR(
 idMat         IN NUMBER,
 dtdeb         IN VARCHAR2,
 dtfin         IN VARCHAR2,
 forcage       IN VARCHAR2,
 ispreviousCAD IN VARCHAR2);
 PROCEDURE CAD_IMPORT(
 p_numseq        IN  NUMBER,
 nom_Fichier   IN VARCHAR2,
 avec_Rollback IN VARCHAR2);
 PROCEDURE CAD_ROLLBACK_IMPORT(
 numseq IN NUMBER);
 FUNCTION CAD_INTERRO_THEME(
 MATRIC       IN VARCHAR2 ,
 p_CODE_THEME IN VARCHAR2 ,
 p_DJOUR      IN VARCHAR2,
 collectif    IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME;
 FUNCTION CAD_INTERRO_THEME_COLL(
 idPop      IN NUMBER ,
 CODE_THEME IN VARCHAR2 ,
 DJOUR      IN VARCHAR2,
 collectif  IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME;
 FUNCTION CAD_SOLDE(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2 )
 RETURN NUMBER;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_AV(
 DATE_RELATIVE     IN VARCHAR2,
 DATE_COMPARAISON  IN VARCHAR2,
 DATE_VALIDITE_REL IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION CAD_CALCUL_DATE_REL_AV_FIN(
 DATE_ACQ_FIN   IN VARCHAR2,
 DATE_ACQ_DEBUT IN VARCHAR2,
 DATE_COMPARE   IN VARCHAR2,
 DATE_VAL_DEBUT IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION cad_formate_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_FIN(
 DATE_RELATIVE_FIN   IN VARCHAR2,
 DATE_RELATIVE_DEBUT IN VARCHAR2,
 DATE_COMPARE        IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION cad_calcul_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2;
 PROCEDURE CAD_BASCULE_UNIQUE(
 IDMATRIC    IN NUMBER ,
 BASCULE     IN VARCHAR2 ,
 DATEBAS     IN VARCHAR2 ,
 SUPPRESSION IN VARCHAR2);
 FUNCTION CAD_UNITE_CPT(
    MATRIC   IN VARCHAR2,
    DATEJOUR IN VARCHAR2,
    CPT      IN VARCHAR2)
    RETURN VARCHAR;
END CAD;
##
CAD
=SQL=
create or replace PACKAGE BODY CAD AS
 err_msg  VARCHAR(200);
 err_code VARCHAR(200);
 valdebug VARCHAR2(1); 
 
 FUNCTION CAD_RESOLUTION_POP_REGLES_MAJ(
 p_dteffet VARCHAR2)
 RETURN CAD_TYPE_POP_REGLES_MAJ
 AS
 retour CAD_TYPE_POP_REGLES_MAJ:=CAD_TYPE_POP_REGLES_MAJ();
 CURSOR cur
 IS
 SELECT POPULATION,
 CODE_BASCULE,
 DATE_THEO_BASCULE,
 ORDRE_A_PROPAGER
 FROM CAD_PARAM_POP_REGLES_MAJ;
 lig cur%rowtype;
 numlig  NUMBER:=0;
 DIC     VARCHAR2(8);
 NBJC    NUMBER;
 NBC     NUMBER;
 nbjours NUMBER;
 dteffet VARCHAR2(8);
 BEGIN
 IF p_dteffet IS NULL THEN
 dteffet    :=TO_CHAR(sysdate,'yyyymmdd');
 ELSE
 dteffet:=p_dteffet;
 END IF;
 OPEN cur;
 LOOP
 FETCH cur INTO lig;
 EXIT
 WHEN cur%NOTFOUND ;
 IF instr(lig.DATE_THEO_BASCULE,'DIC')>0 THEN
 DIC                               :=SUBSTR(lig.DATE_THEO_BASCULE,5,8);
 lig.DATE_THEO_BASCULE             :=REPLACE(lig.DATE_THEO_BASCULE, 'DIC='||DIC||' ','');
 NBJC                              :=to_number(SUBSTR(lig.DATE_THEO_BASCULE,6,instr(lig.DATE_THEO_BASCULE,'NBC=')-6));
 lig.DATE_THEO_BASCULE             :=REPLACE(lig.DATE_THEO_BASCULE, 'NBJC='||NBJC||' ','');
 NBC                               :=to_number(SUBSTR(lig.DATE_THEO_BASCULE,5));
 nbjours                           :=ABS(to_date(dteffet,'yyyyMMdd')-to_date(DIC,'yyyyMMdd'));
 IF (DIC                           >=dteffet) THEN
 numlig                          :=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=TO_CHAR(to_date(DIC,'yyyyMMdd'),'yyyymmdd');
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END IF;
 FOR i IN 1..nbc
 LOOP
 numlig:=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=TO_CHAR(to_date(DIC,'yyyyMMdd')+(TRUNC (nbjours/nbjc,0)+i)*nbjc,'yyyymmdd');
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END LOOP;
 ELSE
 numlig:=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=cad_formate_date_relative(lig.DATE_THEO_BASCULE, p_dteffet );
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END IF;
 END LOOP;
 CLOSE cur;
 RETURN retour;
 END;
 PROCEDURE CAD_AVANCEMENT(
 id  IN NUMBER,
 txt IN VARCHAR2)
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line   VARCHAR(32672);
 status INT;
 BEGIN
 IF valdebug='O' THEN
 INSERT INTO CAD_AVANCEMENT_proc VALUES
 (id,sysdate,txt
 );
 COMMIT;
 END IF;
 END CAD_AVANCEMENT;
 PROCEDURE CAD_AVANCEMENT_INFO
 (
 id  IN NUMBER,
 txt IN VARCHAR2
 )
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line   VARCHAR(32672);
 status INT;
 BEGIN
 IF valdebug='O' OR valdebug='I' THEN
 INSERT INTO CAD_AVANCEMENT_proc VALUES
 (id,sysdate,txt
 );
 COMMIT;
 END IF;
 END CAD_AVANCEMENT_INFO;
 PROCEDURE   CAD_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN VARCHAR2)
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line      VARCHAR(32672);
 status    INT;
 BEGIN
 INSERT INTO CAD_CALCUL_ERR (ID, PROC, PARAM, MESSAGE, DATE_ERR)
 VALUES(p_id, p_nomproc, p_idDate, p_erreur, SYSDATE);
 COMMIT;
 END CAD_ERREUR;
 PROCEDURE CAD_DEBUG
 (
 IDPOP        IN NUMBER ,
 paramREQUETE IN CLOB
 )
 AS
 ordreR NUMBER;
 BEGIN
 IF valdebug='O' THEN
 SELECT NVL(MAX(ordre),0)+1 INTO ordreR FROM cad_trace_req WHERE id=idpop;
 INSERT
 INTO cad_trace_req
 (
 id,
 date_req,
 ordre,
 requete
 )
 VALUES
 (
 idpop,
 sysdate,
 ordreR ,
 paramREQUETE
 );
 END IF;
 END CAD_DEBUG;
 FUNCTION CAD_CALCUL_JOUR_SEMAINE
 (
 JourSemaine VARCHAR2,
 numSemaine  VARCHAR2,
 annee       VARCHAR2,
 mois        VARCHAR2
 )
 RETURN VARCHAR2
 AS
 jour VARCHAR2
 (
 2
 )
 ;
 BEGIN
 IF JourSemaine   ='L' THEN
 jour          :=TO_CHAR( next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121001','yyyymmdd'),'DAY')) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='M' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121002','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='W' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121003','yyyymmdd'),'DAY') )+ (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='J' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121004','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='V' THEN
 jour          :=TO_CHAR( next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121005','yyyymmdd'),'DAY') )+ (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='S' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121006','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='D' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121001','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 END IF;
 RETURN jour;
 END CAD_CALCUL_JOUR_SEMAINE;
 FUNCTION CAD_CONDITION_NON_AFF
 (
 DATEJOUR   IN VARCHAR2 ,
 typeCalcul IN VARCHAR2 ,
 condition  IN VARCHAR2 ,
 valeur     IN VARCHAR2
 )
 RETURN NUMBER
 AS
 retour NUMBER;
 BEGIN
 retour      :=0;
 IF condition ='NEG' THEN
 IF valeur IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)<0) THEN
 retour  :=1;
 END IF;
 elsif condition='ZER' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)=0) THEN
 retour    :=1;
 END IF;
 elsif condition='IEQ' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)<=0) THEN
 retour    :=1;
 END IF;
 elsif condition='IEQD' THEN
 IF valeur   IS NULL OR valeur<=DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='SEQ' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)>=0) THEN
 retour    :=1;
 END IF;
 elsif condition='SEQD' THEN
 IF valeur   IS NULL OR valeur>=DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='INF' THEN
 IF valeur   IS NULL OR valeur<DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='SUP' THEN
 IF valeur   IS NULL OR valeur>DATEJOUR THEN
 retour    :=1;
 END IF;
 END IF;
 RETURN retour;
 END CAD_CONDITION_NON_AFF;
 FUNCTION CAD_UNITE
 (
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2
 )
 RETURN VARCHAR
 AS
 r_unite VARCHAR
 (
 1
 )
 ;
 BEGIN
 BEGIN
 SELECT unite_tenue
 INTO r_unite
 FROM
 (SELECT unite_tenue
 FROM cad_matric_datevalid a,
 CAD_PARAM_LIEN_RUB_CPT b
 WHERE a.matricule  =matric
 AND a.code_compteur=b.code_compteur
 AND a.DATE_EFFET   =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid c
 WHERE c.date_effet<=datejour
 AND c.code_compteur=a.code_compteur
 AND a.matricule    =c.matricule
 )
 AND b.rub_val_jour=rub
 ORDER BY date_effet DESC
 )
 WHERE rownum=1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 BEGIN
 SELECT unite
 INTO r_unite
 FROM
 (SELECT a.unite
 FROM CAD_PARAM_STRUCT_CPT a,
 CAD_PARAM_LIEN_RUB_CPT b
 WHERE a.code_compteur=b.code_compteur
 AND b.rub_val_jour   =rub
 ORDER BY a.code_compteur DESC
 )
 WHERE rownum=1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00056#'||matric||'#'||datejour||'#'||rub);
 END;
 END;
 IF r_unite IS NULL THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00056#'||matric||'#'||datejour||'#'||rub);
 END IF;
 RETURN r_unite;
 END CAD_UNITE;
 FUNCTION CAD_UNITE_CPT(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 CPT      IN VARCHAR2 )
 RETURN VARCHAR
 AS
 r_unite   VARCHAR(1);
 gestionHj VARCHAR(1);
 visuHouJ  VARCHAR(1);
 BEGIN
 SELECT GESTIONHJ
 INTO GESTIONHJ
 FROM CAD_PARAM_STRUCT_CPT
 WHERE code_compteur=CPT;
 IF GESTIONHJ       ='H' THEN
 r_unite         :='H';
 ELSE
 BEGIN
 SELECT
 CASE
 WHEN visuhouj='H'
 THEN 'H'
 ELSE unite_tenue
 END
 INTO r_unite
 FROM cad_matric_datevalid a
 WHERE a.matricule=matric
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<=datejour
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 )
 AND a.code_compteur=cpt
 AND rownum         =1
 ORDER BY date_effet DESC ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF r_unite IS NULL THEN
 SELECT a.unite
 INTO r_unite
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE a.code_compteur=cpt
 AND rownum           =1
 ORDER BY a.code_compteur DESC ;
 END IF;
 END;
 END IF;
 RETURN r_unite;
 END CAD_UNITE_CPT;
 PROCEDURE CAD_INIT_BASCULES(
 numSeq  IN NUMBER ,
 matric  IN VARCHAR2,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 CURSOR cur_test
 IS
 SELECT a.matricule AS MATRICULE,
 a.COMPTEUR_DEST,
 a.DATE_THEO_BASCULE,
 a.TYPE_BASCULE,
 b.matricule AS matric_cpt,
 b.djour,
 b.code_compteur,
 b.typemj,
 b.rowid_cpt,
 b.NorM
 FROM
 (SELECT DISTINCT mat.matricule AS MATRICULE,
 maj.COMPTEUR_DEST,
 bas.DATE_THEO_BASCULE,
 bas.TYPE_BASCULE
 FROM CAD_CALCUL_EN_COURS_MATRIC mat,
 CAD_REGLES_PREVUES_REALISEES bas,
 cad_param_regles_maj maj
 WHERE mat.id         = numSeq
 AND mat.matricule    =NVL(matric,mat.matricule)
 AND bas.matricule    =mat.matricule
 AND maj.code_bascule = bas.code_bascule
 AND DATE_THEO_BASCULE BETWEEN DATEDEB AND NVL(DATEfin,'20991231')
 ) a
 FULL OUTER JOIN
 (SELECT cpt.matricule,
 cpt.djour,
 cpt.code_compteur,
 cpt.rowid AS rowid_cpt,
 cpt.typemj,
 (SELECT COUNT(*)
 FROM CAD_COMPTEUR cpt2
 WHERE cpt.matricule  =cpt2.matricule
 AND cpt.code_compteur=cpt2.code_compteur
 AND cpt.djour        =cpt2.djour
 AND cpt2.typemj     IN ('M','N')
 ) AS NorM
 FROM CAD_COMPTEUR cpt,CAD_CALCUL_EN_COURS_MATRIC
 WHERE cpt.TYPEMJ  IN ('B','S')
 AND cpt.matricule= CAD_CALCUL_EN_COURS_MATRIC.matricule and CAD_CALCUL_EN_COURS_MATRIC.id = numSeq
 AND cpt.matricule=NVL(matric,cpt.matricule)
 AND djour BETWEEN DATEDEB AND NVL(DATEfin,'20991231')
 ) b
 ON a.matricule          =b.matricule
 AND a.date_theo_bascule =b.djour
 AND b.code_compteur     =a.compteur_dest
 AND a.type_bascule      =b.typemj
 WHERE djour            IS NULL
 OR djour BETWEEN DATEDEB AND NVL(DATEfin,'20991231');
 lig_test cur_test%rowtype;
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 --tableau pour update
 T_up Tab_Rowid;
 --tableau pour insert
 -- tableau pour delete
 T_del Tab_Rowid;
 T_replace Tab_Rowid;
 TYPE Type_bascules
 IS
 RECORD
 (
 matricule cad_compteur.matricule%type,
 code_compteur cad_compteur.code_compteur%type,
 djour cad_compteur.djour%type,
 typemj cad_compteur.typemj%type,
 date_maj cad_compteur.date_maj%type );
 type tab_bascules
 IS
 TABLE OF type_bascules;
 t_ins tab_bascules;
 tmpIns type_bascules;
 BEGIN
 OPEN cur_test;
 LOOP
 FETCH cur_test INTO lig_test;
 EXIT
 WHEN cur_test%NOTFOUND ;
 -- si on a la bascule dans prévue/réalisée, on met la ligne à 0 sinon on delete
 IF lig_test.matricule IS NOT NULL AND lig_test.rowid_cpt IS NULL THEN
 -- insertion
 IF t_ins              IS NULL THEN
 tmpIns.matricule    :=lig_test.matricule;
 tmpIns.code_compteur:=lig_test.compteur_dest;
 tmpIns.djour        :=lig_test.DATE_THEO_BASCULE;
 tmpIns.typemj       :=lig_test.type_bascule;
 tmpIns.date_maj     :=sysdate;
 t_ins               :=tab_bascules(tmpIns);
 ELSE
 t_ins.extend();
 t_ins(t_ins.last).matricule    :=lig_test.matricule;
 t_ins(t_ins.last).code_compteur:=lig_test.compteur_dest;
 t_ins(t_ins.last).djour        :=lig_test.DATE_THEO_BASCULE;
 t_ins(t_ins.last).typemj       :=lig_test.type_bascule;
 t_ins(t_ins.last).date_maj     :=sysdate;
 END IF;
 elsif lig_test.matricule IS NULL AND lig_test.rowid_cpt IS NOT NULL THEN
 IF lig_test.NorM        >0 THEN
 IF t_del             IS NULL THEN
 t_del              :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 t_del.extend();
 t_del(t_del.last):=lig_test.rowid_cpt;
 END IF;
 ELSE
 IF T_replace IS NULL THEN
 T_replace  :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 T_replace.extend();
 T_replace(T_replace.last):=lig_test.rowid_cpt;
 END IF;
 END IF;
 -- delete
 -- delete from cad_compteur where rowid=lig_test.rowid_cpt;
 ELSE
 IF t_up IS NULL THEN
 t_up  :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 t_up.extend();
 t_up(t_up.last):=lig_test.rowid_cpt;
 END IF;
 --update
 /* update cad_compteur set POT1_VALEURJ=null,POT1_VALEURH=null,
 POT2_VALEURJ=null,POT2_VALEURH=null,
 POT3_VALEURJ=null,POT3_VALEURH=null,
 POT4_VALEURJ=null,POT4_VALEURH=null,
 POT5_VALEURJ=null,POT5_VALEURH=null,
 POT6_VALEURJ=null,POT6_VALEURH=null,
 POT7_VALEURJ=null,POT7_VALEURH=null,
 POT8_VALEURJ=null,POT8_VALEURH=null,
 POT9_VALEURJ=null,POT9_VALEURH=null,
 POT10_VALEURJ=null,POT10_VALEURH=null,
 POT11_VALEURJ=null,POT11_VALEURH=null,
 POT12_VALEURJ=null,POT12_VALEURH=null
 where rowid=lig_test.rowid_cpt;*/
 END IF;
 END LOOP;
 CLOSE cur_test;
 IF t_up IS NOT NULL THEN
 FORALL i IN T_up.first..T_up.last
 UPDATE cad_compteur
 SET DATE_MAJ    =sysdate,
 POT1_VALEURJ  =NULL,
 POT1_VALEURH  =NULL,
 POT2_VALEURJ  =NULL,
 POT2_VALEURH  =NULL,
 POT3_VALEURJ  =NULL,
 POT3_VALEURH  =NULL,
 POT4_VALEURJ  =NULL,
 POT4_VALEURH  =NULL,
 POT5_VALEURJ  =NULL,
 POT5_VALEURH  =NULL,
 POT6_VALEURJ  =NULL,
 POT6_VALEURH  =NULL,
 POT7_VALEURJ  =NULL,
 POT7_VALEURH  =NULL,
 POT8_VALEURJ  =NULL,
 POT8_VALEURH  =NULL,
 POT9_VALEURJ  =NULL,
 POT9_VALEURH  =NULL,
 POT10_VALEURJ =NULL,
 POT10_VALEURH =NULL,
 POT11_VALEURJ =NULL,
 POT11_VALEURH =NULL,
 POT12_VALEURJ =NULL,
 POT12_VALEURH =NULL
 WHERE rowid     =t_up(i);
 END IF;
 IF T_replace IS NOT NULL THEN
 FORALL i IN T_replace.first..T_replace.last
 UPDATE cad_compteur a
 SET DATE_MAJ    =sysdate,
 typemj        ='N',
 POT1_VALEURJ  =NULL,
 POT1_VALEURH  =NULL,
 POT2_VALEURJ  =NULL,
 POT2_VALEURH  =NULL,
 POT3_VALEURJ  =NULL,
 POT3_VALEURH  =NULL,
 POT4_VALEURJ  =NULL,
 POT4_VALEURH  =NULL,
 POT5_VALEURJ  =NULL,
 POT5_VALEURH  =NULL,
 POT6_VALEURJ  =NULL,
 POT6_VALEURH  =NULL,
 POT7_VALEURJ  =NULL,
 POT7_VALEURH  =NULL,
 POT8_VALEURJ  =NULL,
 POT8_VALEURH  =NULL,
 POT9_VALEURJ  =NULL,
 POT9_VALEURH  =NULL,
 POT10_VALEURJ =NULL,
 POT10_VALEURH =NULL,
 POT11_VALEURJ =NULL,
 POT11_VALEURH =NULL,
 POT12_VALEURJ =NULL,
 POT12_VALEURH =NULL
 WHERE rowid     =T_replace(i);
 END IF;
 IF T_del IS NOT NULL THEN
 FORALL i IN T_del.first..T_del.last
 UPDATE cad_compteur a
 SET DATE_MAJ                               =sysdate
 WHERE (a.matricule,a.code_compteur,a.djour)=
 (SELECT b.matricule,
 b.code_compteur,
 b.djour
 FROM cad_compteur b
 WHERE rowid =T_del(i)
 )
 AND typemj IN ('N','M') ;
 FORALL i   IN T_del.first..T_del.last
 DELETE FROM cad_compteur WHERE rowid =T_del(i);
 END IF;
 IF t_ins IS NOT NULL THEN
 FORALL i IN t_ins.first..t_ins.last
 INSERT
 INTO CAD_COMPTEUR
 (
 matricule,
 code_compteur,
 djour,
 typemj,
 date_maj
 )
 VALUES
 (
 t_ins(i).matricule,
 t_ins(i).code_compteur,
 t_ins(i).djour,
 t_ins(i).typemj,
 t_ins(i).date_maj
 );
 END IF;
 END CAD_INIT_BASCULES;
 PROCEDURE CAD_UNIT_PROPAGATION
 (
 IDMATRIC    IN NUMBER ,
 p_matric    IN VARCHAR2,
 DATEDEB     IN VARCHAR2 ,
 DATEFIN     IN VARCHAR2 ,
 CODECPT     IN VARCHAR2 ,
 AvecBascule IN VARCHAR2
 )
 AS
 CURSOR cur_cpt
 IS
 SELECT cpt.*,
 cpt.rowid
 FROM CAD_COMPTEUR cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule   =mat.matricule
 AND mat.id            =idmatric
 AND mat.matricule     =NVL(p_matric,mat.matricule)
 AND cpt.code_compteur =codecpt
 AND cpt.djour        >=nvl(datedeb,'19000101')
 AND (cpt.djour       <=NVL(datefin,'20991231')
 OR (avecbascule       ='BASCULE'
 AND cpt.djour        <=NVL(
 (SELECT MIN(a.djour)
 FROM cad_compteur a
 WHERE a.matricule  =cpt.matricule
 AND a.code_compteur=cpt.code_compteur
 AND a.typemj NOT  IN ('B','S')
 AND a.djour        >datefin
 ),'20991231')))
 ORDER BY cpt.matricule,
 cpt.code_compteur,
 cpt.djour,
 cpt.typemj FOR UPDATE OF POT1_VALEURJ,
 POT1_VALEURH,
 POT2_VALEURJ,
 POT2_VALEURH,
 POT3_VALEURJ,
 POT3_VALEURH,
 POT4_VALEURJ,
 POT4_VALEURH,
 POT5_VALEURJ,
 POT5_VALEURH,
 POT6_VALEURJ,
 POT6_VALEURH,
 POT7_VALEURJ,
 POT7_VALEURH,
 POT8_VALEURJ,
 POT8_VALEURH,
 POT9_VALEURJ,
 POT9_VALEURH,
 POT10_VALEURJ,
 POT10_VALEURH,
 POT11_VALEURJ,
 POT11_VALEURH,
 POT12_VALEURJ,
 POT12_VALEURH ;
 lig_cpt cur_cpt%ROWTYPE;
 lig_cpt_prec cur_cpt%ROWTYPE;
 lig_cptori cur_cpt%ROWTYPE;
 TYPE TYP_tabPot is table of varchar2(3000) index by BINARY_INTEGER ;
 TYPE typ_Tab_ligcpt
 IS
 TABLE OF cur_cpt%ROWTYPE;
 Tab_ligcpt typ_Tab_ligcpt:=Typ_Tab_ligcpt();
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 T_Id Tab_Rowid;
 reqpropagation CLOB;
 ssreq CLOB;
 nbssreq                 NUMBER;
 listPotANePasPropage    VARCHAR(100):='';
 listPotANePasPropageCPT VARCHAR(100):='';
 premier                 BOOLEAN;
 dtprec                  VARCHAR(8):=DATEDEB;
 typprec                 VARCHAR(1):='B';
 listPotAPropage         VARCHAR(100);
 req                     VARCHAR2(1000);
 pos                     NUMBER:=0;
 subs                    VARCHAR2(1000);
 un_index                INT;
 requpdate               VARCHAR2(1000);
 calcul                  VARCHAR2(100);
 lig_param CAD_PARAM_CALCUL%rowtype;
 tabreqcpt TYP_tabPot;
 
 TYPE TYP_tabStruct is table of CAD_PARAM_CALCUL%rowtype index by varchar2(32) ;
 tabstructcpt  TYP_tabStruct;
 TYPE TYP_PotANePasPropageCPT is table of varchar2(1000) index by varchar2(32) ;
 tablistPotANePasPropageCPT TYP_PotANePasPropageCPT;
 TYPE TYP_PotAPropage is table of varchar2(1000) index by varchar2(32) ;
 tablistPotAPropage TYP_PotAPropage;
 
 BEGIN
 
 if not tabstructcpt.exists(codecpt) then
 SELECT *
 INTO tabstructcpt(codecpt)
 FROM CAD_PARAM_CALCUL
 WHERE code_compteur      =codecpt;
 end if;
 lig_param:=tabstructcpt(codecpt);
 
 req                     :=lig_param.REQUETES;
 
 
 listPotANePasPropageCPT :=' ' ;
 if not tablistPotANePasPropageCPT.exists(codecpt) then
 FOR x IN
 (SELECT NUM_POT
 FROM CAD_PARAM_STRUCT_POT
 WHERE code_compteur=codecpt
 AND MAJ_BATCH      ='O'
 )
 LOOP
 if  tablistPotANePasPropageCPT.exists(codecpt) then
 tablistPotANePasPropageCPT(codecpt):=tablistPotANePasPropageCPT(codecpt)||' '||x.NUM_POT||' ';
 else
 tablistPotANePasPropageCPT(codecpt):=' '||x.NUM_POT||' ';
 end if;
 END LOOP;
 end if;
 if  tablistPotANePasPropageCPT.exists(codecpt) then
 listPotANePasPropageCPT:=tablistPotANePasPropageCPT(codecpt);
 end if;
 listPotAPropage:=' ' ;
 if not tablistPotAPropage.exists(codecpt) then
 FOR x IN
 (SELECT NUM_POT
 FROM CAD_PARAM_STRUCT_POT
 WHERE code_compteur     =codecpt
 AND TYPE_VARIATION NOT IN ('S','V')
 )
 LOOP
 if tablistPotAPropage.exists(codecpt) then
 tablistPotAPropage(codecpt):=tablistPotAPropage(codecpt)||' '||x.NUM_POT||' ';
 else
 tablistPotAPropage(codecpt):=' '||x.NUM_POT||' ';
 end if;
 END LOOP;
 end if;
 if tablistPotAPropage.exists(codecpt) then
 listPotAPropage:=tablistPotAPropage(codecpt);
 end if;
 
 
 
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 
 
 
 
 lig_cptori:=lig_cpt;
 
 
 --  IF (lig_cpt_prec.matricule IS  NULL) or  lig_cpt_prec.code_compteur<>lig_cpt.code_compteur THEN
 
 
 -- end if;
 
 IF (lig_cpt_prec.matricule IS NOT NULL) AND lig_cpt_prec.matricule=lig_cpt.matricule and lig_cpt_prec.code_compteur=lig_cpt.code_compteur THEN
 -- si bascule, on ne fait pas de propagation
 IF lig_cpt.typemj NOT IN ('B','S') THEN
 IF lig_cpt.typemj      ='M' THEN
 listPotANePasPropage:=listPotANePasPropageCPT;
 ELSE
 listPotANePasPropage:=' ';
 END IF;
 -- Propagation des pots sans variations
 IF listPotAPropage <>' ' THEN
 nbssreq          :=0;
 FOR i IN 1..12
 LOOP
 IF instr(listPotAPropage,' '||i||' ')>0 AND instr(listPotANePasPropage,' '||i||' ')=0 THEN
 IF i                               =1 THEN
 lig_cpt.POT1_VALEURJ            :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH            :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0));
 elsif i                            =2 THEN
 lig_cpt.POT2_VALEURJ            :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH            :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0));
 elsif i                            =3 THEN
 lig_cpt.POT3_VALEURJ            :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH            :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0));
 elsif i                            =4 THEN
 lig_cpt.POT4_VALEURJ            :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH            :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0));
 elsif i                            =5 THEN
 lig_cpt.POT5_VALEURJ            :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH            :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0));
 elsif i                            =6 THEN
 lig_cpt.POT6_VALEURJ            :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH            :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0));
 elsif i                            =7 THEN
 lig_cpt.POT7_VALEURJ            :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH            :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0));
 elsif i                            =8 THEN
 lig_cpt.POT8_VALEURJ            :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH            :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0));
 elsif i                            =9 THEN
 lig_cpt.POT9_VALEURJ            :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH            :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0));
 elsif i                            =10 THEN
 lig_cpt.POT10_VALEURJ           :=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH           :=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0));
 elsif i                            =11 THEN
 lig_cpt.POT11_VALEURJ           :=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH           :=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0));
 elsif i                            =12 THEN
 lig_cpt.POT12_VALEURJ           :=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0));
 lig_cpt.POT12_VALEURH           :=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0));
 END IF;
 END IF;
 END LOOP;
 END IF;
 -- Propagation des variations
 nbssreq                  :=0;
 IF lig_param.POTV1       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV1||' ')=0 THEN
 IF lig_param.POTV1      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV2       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV2||' ')=0 THEN
 IF lig_param.POTV2      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV3       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV3||' ')=0 THEN
 IF lig_param.POTV3      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV4       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV4||' ')=0 THEN
 IF lig_param.POTV4      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV5       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV5||' ')=0 THEN
 IF lig_param.POTV5      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV6       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV6||' ')=0 THEN
 IF lig_param.POTV6      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 END IF;
 END IF;
 END IF;
 END IF;
 
 IF lig_cpt.djour   <=NVL(datefin,'20991231') THEN
 
 for i in 1..12 loop
 
 --pot 1 
 if i=1 then
 -- si qu'une seule commande
 if instr(lig_param.POT1,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT1 is not null and instr(lig_param.POT1,'=')>0 then
 lig_param.POT1:=replace(lig_param.POT1,'=0','=');
 if lig_param.POT1='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT1 is not null then
 lig_param.POT1:=replace(lig_param.POT1,'+0','+');
 lig_param.POT1:=replace(lig_param.POT1,'-0','-');
 if lig_param.POT1='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT1,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT1,0,instr(lig_param.POT1,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT1,instr(lig_param.POT1,';') + 1, length(lig_param.POT1));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 
 --pot 2 
 if i=2 then
 -- si qu'une seule commande
 if instr(lig_param.POT2,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT2 is not null and instr(lig_param.POT2,'=')>0 then
 lig_param.POT2:=replace(lig_param.POT2,'=0','=');
 if lig_param.POT2='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT2 is not null then
 lig_param.POT2:=replace(lig_param.POT2,'+0','+');
 lig_param.POT2:=replace(lig_param.POT2,'-0','-');
 if lig_param.POT2='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT2,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT2,0,instr(lig_param.POT2,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT2,instr(lig_param.POT2,';') + 1, length(lig_param.POT2));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 3 
 if i=3 then
 -- si qu'une seule commande
 if instr(lig_param.POT3,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT3 is not null and instr(lig_param.POT3,'=')>0 then
 lig_param.POT3:=replace(lig_param.POT3,'=0','=');
 if lig_param.POT3='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT3 is not null then
 lig_param.POT3:=replace(lig_param.POT3,'+0','+');
 lig_param.POT3:=replace(lig_param.POT3,'-0','-');
 if lig_param.POT3='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT3,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT3,0,instr(lig_param.POT3,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT3,instr(lig_param.POT3,';') + 1, length(lig_param.POT3));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 4 
 if i=4 then
 -- si qu'une seule commande
 if instr(lig_param.POT4,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT4 is not null and instr(lig_param.POT4,'=')>0 then
 lig_param.POT4:=replace(lig_param.POT4,'=0','=');
 if lig_param.POT4='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT4 is not null then
 lig_param.POT4:=replace(lig_param.POT4,'+0','+');
 lig_param.POT4:=replace(lig_param.POT4,'-0','-');
 if lig_param.POT4='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT4,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT4,0,instr(lig_param.POT4,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT4,instr(lig_param.POT4,';') + 1, length(lig_param.POT4));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 5 
 if i=5 then
 -- si qu'une seule commande
 if instr(lig_param.POT5,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT5 is not null and instr(lig_param.POT5,'=')>0 then
 lig_param.POT5:=replace(lig_param.POT5,'=0','=');
 if lig_param.POT5='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT5 is not null then
 lig_param.POT5:=replace(lig_param.POT5,'+0','+');
 lig_param.POT5:=replace(lig_param.POT5,'-0','-');
 if lig_param.POT5='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT5,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT5,0,instr(lig_param.POT5,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT5,instr(lig_param.POT5,';') + 1, length(lig_param.POT5));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 6 
 if i=6 then
 -- si qu'une seule commande
 if instr(lig_param.POT6,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT6 is not null and instr(lig_param.POT6,'=')>0 then
 lig_param.POT6:=replace(lig_param.POT6,'=0','=');
 if lig_param.POT6='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT6 is not null then
 lig_param.POT6:=replace(lig_param.POT6,'+0','+');
 lig_param.POT6:=replace(lig_param.POT6,'-0','-');
 if lig_param.POT6='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT6,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT6,0,instr(lig_param.POT6,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT6,instr(lig_param.POT6,';') + 1, length(lig_param.POT6));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 7 
 if i=7 then
 -- si qu'une seule commande
 if instr(lig_param.POT7,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT7 is not null and instr(lig_param.POT7,'=')>0 then
 lig_param.POT7:=replace(lig_param.POT7,'=0','=');
 if lig_param.POT7='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT7 is not null then
 lig_param.POT7:=replace(lig_param.POT7,'+0','+');
 lig_param.POT7:=replace(lig_param.POT7,'-0','-');
 if lig_param.POT7='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT7,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT7,0,instr(lig_param.POT7,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT7,instr(lig_param.POT7,';') + 1, length(lig_param.POT7));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 8 
 if i=8 then
 -- si qu'une seule commande
 if instr(lig_param.POT8,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT8 is not null and instr(lig_param.POT8,'=')>0 then
 lig_param.POT8:=replace(lig_param.POT8,'=0','=');
 if lig_param.POT8='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT8 is not null then
 lig_param.POT8:=replace(lig_param.POT8,'+0','+');
 lig_param.POT8:=replace(lig_param.POT8,'-0','-');
 if lig_param.POT8='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT8,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT8,0,instr(lig_param.POT8,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT8,instr(lig_param.POT8,';') + 1, length(lig_param.POT8));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 9 
 if i=9 then
 -- si qu'une seule commande
 if instr(lig_param.POT9,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT9 is not null and instr(lig_param.POT9,'=')>0 then
 lig_param.POT9:=replace(lig_param.POT9,'=0','=');
 if lig_param.POT9='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT9 is not null then
 lig_param.POT9:=replace(lig_param.POT9,'+0','+');
 lig_param.POT9:=replace(lig_param.POT9,'-0','-');
 if lig_param.POT9='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT9,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT9,0,instr(lig_param.POT9,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT9,instr(lig_param.POT9,';') + 1, length(lig_param.POT9));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 10 
 if i=10 then
 -- si qu'une seule commande
 if instr(lig_param.POT10,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT10 is not null and instr(lig_param.POT10,'=')>0 then
 lig_param.POT10:=replace(lig_param.POT10,'=0','=');
 if lig_param.POT10='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT10 is not null then
 lig_param.POT10:=replace(lig_param.POT10,'+0','+');
 lig_param.POT10:=replace(lig_param.POT10,'-0','-');
 if lig_param.POT10='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT10,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT10,0,instr(lig_param.POT10,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT10,instr(lig_param.POT10,';') + 1, length(lig_param.POT10));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 11 
 if i=11 then
 -- si qu'une seule commande
 if instr(lig_param.POT11,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT11 is not null and instr(lig_param.POT11,'=')>0 then
 lig_param.POT11:=replace(lig_param.POT11,'=0','=');
 if lig_param.POT11='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT11 is not null then
 lig_param.POT11:=replace(lig_param.POT11,'+0','+');
 lig_param.POT11:=replace(lig_param.POT11,'-0','-');
 if lig_param.POT11='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT11,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT11,0,instr(lig_param.POT11,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT11,instr(lig_param.POT11,';') + 1, length(lig_param.POT11));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
  
 
 END LOOP;
 END IF;
 
 
 if (nvl(lig_cptori.POT1_VALEURJ,0)<>nvl(lig_cpt.POT1_VALEURJ,0)
 OR nvl(lig_cptori.POT1_VALEURH,0)   <>nvl(lig_cpt.POT1_VALEURH,0)
 OR nvl(lig_cptori.POT2_VALEURJ,0)   <>nvl(lig_cpt.POT2_VALEURJ,0)
 OR nvl(lig_cptori.POT2_VALEURH,0)   <>nvl(lig_cpt.POT2_VALEURH,0)
 OR nvl(lig_cptori.POT3_VALEURJ,0)   <>nvl(lig_cpt.POT3_VALEURJ,0)
 OR nvl(lig_cptori.POT3_VALEURH,0)   <>nvl(lig_cpt.POT3_VALEURH,0)
 OR nvl(lig_cptori.POT4_VALEURJ,0)   <>nvl(lig_cpt.POT4_VALEURJ,0)
 OR nvl(lig_cptori.POT4_VALEURH ,0)  <>nvl(lig_cpt.POT4_VALEURH,0)
 OR nvl(lig_cptori.POT5_VALEURJ ,0)  <>nvl(lig_cpt.POT5_VALEURJ,0)
 OR nvl(lig_cptori.POT5_VALEURH ,0)  <>nvl(lig_cpt.POT5_VALEURH,0)
 OR nvl(lig_cptori.POT6_VALEURJ ,0)  <>nvl(lig_cpt.POT6_VALEURJ,0)
 OR nvl(lig_cptori.POT6_VALEURH ,0)  <>nvl(lig_cpt.POT6_VALEURH,0)
 OR nvl(lig_cptori.POT7_VALEURJ ,0)  <>nvl(lig_cpt.POT7_VALEURJ,0)
 OR nvl(lig_cptori.POT7_VALEURH ,0)  <>nvl(lig_cpt.POT7_VALEURH,0)
 OR nvl(lig_cptori.POT8_VALEURJ ,0)  <>nvl(lig_cpt.POT8_VALEURJ,0)
 OR nvl(lig_cptori.POT8_VALEURH ,0)  <>nvl(lig_cpt.POT8_VALEURH,0)
 OR nvl(lig_cptori.POT9_VALEURJ ,0)  <>nvl(lig_cpt.POT9_VALEURJ,0)
 OR nvl(lig_cptori.POT9_VALEURH ,0)  <>nvl(lig_cpt.POT9_VALEURH,0)
 OR nvl(lig_cptori.POT10_VALEURJ ,0) <>nvl(lig_cpt.POT10_VALEURJ,0)
 OR nvl(lig_cptori.POT10_VALEURH ,0) <>nvl(lig_cpt.POT10_VALEURH,0)
 OR nvl(lig_cptori.POT11_VALEURJ ,0) <>nvl(lig_cpt.POT11_VALEURJ,0)
 OR nvl(lig_cptori.POT11_VALEURH ,0) <>nvl(lig_cpt.POT11_VALEURH,0)
 OR nvl(lig_cptori.POT12_VALEURJ ,0) <>nvl(lig_cpt.POT12_VALEURJ,0)
 OR nvl(lig_cptori.POT12_VALEURH,0)  <>nvl(lig_cpt.POT12_VALEURH,0)) then
 
 UPDATE cad_compteur
 SET DATE_MAJ=(
 CASE
 WHEN (POT1_VALEURJ<>lig_cpt.POT1_VALEURJ
 OR POT1_VALEURH   <>lig_cpt.POT1_VALEURH
 OR POT2_VALEURJ   <>lig_cpt.POT2_VALEURJ
 OR POT2_VALEURH   <>lig_cpt.POT2_VALEURH
 OR POT3_VALEURJ   <>lig_cpt.POT3_VALEURJ
 OR POT3_VALEURH   <>lig_cpt.POT3_VALEURH
 OR POT4_VALEURJ   <>lig_cpt.POT4_VALEURJ
 OR POT4_VALEURH   <>lig_cpt.POT4_VALEURH
 OR POT5_VALEURJ   <>lig_cpt.POT5_VALEURJ
 OR POT5_VALEURH   <>lig_cpt.POT5_VALEURH
 OR POT6_VALEURJ   <>lig_cpt.POT6_VALEURJ
 OR POT6_VALEURH   <>lig_cpt.POT6_VALEURH
 OR POT7_VALEURJ   <>lig_cpt.POT7_VALEURJ
 OR POT7_VALEURH   <>lig_cpt.POT7_VALEURH
 OR POT8_VALEURJ   <>lig_cpt.POT8_VALEURJ
 OR POT8_VALEURH   <>lig_cpt.POT8_VALEURH
 OR POT9_VALEURJ   <>lig_cpt.POT9_VALEURJ
 OR POT9_VALEURH   <>lig_cpt.POT9_VALEURH
 OR POT10_VALEURJ  <>lig_cpt.POT10_VALEURJ
 OR POT10_VALEURH  <>lig_cpt.POT10_VALEURH
 OR POT11_VALEURJ  <>lig_cpt.POT11_VALEURJ
 OR POT11_VALEURH  <>lig_cpt.POT11_VALEURH
 OR POT12_VALEURJ  <>lig_cpt.POT12_VALEURJ
 OR POT12_VALEURH  <>lig_cpt.POT12_VALEURH)
 THEN sysdate
 ELSE DATE_MAJ
 END),
 POT1_VALEURJ  =lig_cpt.POT1_VALEURJ,
 POT1_VALEURH  =lig_cpt.POT1_VALEURH,
 POT2_VALEURJ  =lig_cpt.POT2_VALEURJ,
 POT2_VALEURH  =lig_cpt.POT2_VALEURH,
 POT3_VALEURJ  =lig_cpt.POT3_VALEURJ,
 POT3_VALEURH  =lig_cpt.POT3_VALEURH,
 POT4_VALEURJ  =lig_cpt.POT4_VALEURJ,
 POT4_VALEURH  =lig_cpt.POT4_VALEURH,
 POT5_VALEURJ  =lig_cpt.POT5_VALEURJ,
 POT5_VALEURH  =lig_cpt.POT5_VALEURH,
 POT6_VALEURJ  =lig_cpt.POT6_VALEURJ,
 POT6_VALEURH  =lig_cpt.POT6_VALEURH,
 POT7_VALEURJ  =lig_cpt.POT7_VALEURJ,
 POT7_VALEURH  =lig_cpt.POT7_VALEURH,
 POT8_VALEURJ  =lig_cpt.POT8_VALEURJ,
 POT8_VALEURH  =lig_cpt.POT8_VALEURH,
 POT9_VALEURJ  =lig_cpt.POT9_VALEURJ,
 POT9_VALEURH  =lig_cpt.POT9_VALEURH,
 POT10_VALEURJ =lig_cpt.POT10_VALEURJ,
 POT10_VALEURH =lig_cpt.POT10_VALEURH,
 POT11_VALEURJ =lig_cpt.POT11_VALEURJ,
 POT11_VALEURH =lig_cpt.POT11_VALEURH,
 POT12_VALEURJ =lig_cpt.POT12_VALEURJ,
 POT12_VALEURH =lig_cpt.POT12_VALEURH
 WHERE CURRENT OF cur_cpt ;
 end if;
 dtprec      :=lig_cpt.DJour;
 typprec     :=lig_cpt.typemj;
 lig_cpt_prec:=lig_cpt;
 /*  IF Tab_ligcpt     IS NULL THEN
 Tab_ligcpt      :=Typ_Tab_ligcpt(lig_cpt);
 ELSE
 Tab_ligcpt.extend();
 Tab_ligcpt(Tab_ligcpt.last):=lig_cpt;
 END IF;*/
 END LOOP;
 CLOSE cur_cpt;
 
 /* forall i in Tab_ligcpt.first..Tab_ligcpt.last
 UPDATE cad_compteur
 SET DATE_MAJ=(
 CASE
 WHEN (POT1_VALEURJ<>lig_cpt.POT1_VALEURJ
 OR POT1_VALEURH   <>Tab_ligcpt(i).POT1_VALEURH
 OR POT2_VALEURJ   <>Tab_ligcpt(i).POT2_VALEURJ
 OR POT2_VALEURH   <>Tab_ligcpt(i).POT2_VALEURH
 OR POT3_VALEURJ   <>Tab_ligcpt(i).POT3_VALEURJ
 OR POT3_VALEURH   <>Tab_ligcpt(i).POT3_VALEURH
 OR POT4_VALEURJ   <>Tab_ligcpt(i).POT4_VALEURJ
 OR POT4_VALEURH   <>Tab_ligcpt(i).POT4_VALEURH
 OR POT5_VALEURJ   <>Tab_ligcpt(i).POT5_VALEURJ
 OR POT5_VALEURH   <>Tab_ligcpt(i).POT5_VALEURH
 OR POT6_VALEURJ   <>Tab_ligcpt(i).POT6_VALEURJ
 OR POT6_VALEURH   <>Tab_ligcpt(i).POT6_VALEURH
 OR POT7_VALEURJ   <>Tab_ligcpt(i).POT7_VALEURJ
 OR POT7_VALEURH   <>Tab_ligcpt(i).POT7_VALEURH
 OR POT8_VALEURJ   <>Tab_ligcpt(i).POT8_VALEURJ
 OR POT8_VALEURH   <>Tab_ligcpt(i).POT8_VALEURH
 OR POT9_VALEURJ   <>Tab_ligcpt(i).POT9_VALEURJ
 OR POT9_VALEURH   <>Tab_ligcpt(i).POT9_VALEURH
 OR POT10_VALEURJ  <>Tab_ligcpt(i).POT10_VALEURJ
 OR POT10_VALEURH  <>Tab_ligcpt(i).POT10_VALEURH
 OR POT11_VALEURJ  <>Tab_ligcpt(i).POT11_VALEURJ
 OR POT11_VALEURH  <>Tab_ligcpt(i).POT11_VALEURH
 OR POT12_VALEURJ  <>Tab_ligcpt(i).POT12_VALEURJ
 OR POT12_VALEURH  <>Tab_ligcpt(i).POT12_VALEURH)
 THEN sysdate
 ELSE DATE_MAJ
 END),
 POT1_VALEURJ  =Tab_ligcpt(i).POT1_VALEURJ,
 POT1_VALEURH  =Tab_ligcpt(i).POT1_VALEURH,
 POT2_VALEURJ  =Tab_ligcpt(i).POT2_VALEURJ,
 POT2_VALEURH  =Tab_ligcpt(i).POT2_VALEURH,
 POT3_VALEURJ  =Tab_ligcpt(i).POT3_VALEURJ,
 POT3_VALEURH  =Tab_ligcpt(i).POT3_VALEURH,
 POT4_VALEURJ  =Tab_ligcpt(i).POT4_VALEURJ,
 POT4_VALEURH  =Tab_ligcpt(i).POT4_VALEURH,
 POT5_VALEURJ  =Tab_ligcpt(i).POT5_VALEURJ,
 POT5_VALEURH  =Tab_ligcpt(i).POT5_VALEURH,
 POT6_VALEURJ  =Tab_ligcpt(i).POT6_VALEURJ,
 POT6_VALEURH  =Tab_ligcpt(i).POT6_VALEURH,
 POT7_VALEURJ  =Tab_ligcpt(i).POT7_VALEURJ,
 POT7_VALEURH  =Tab_ligcpt(i).POT7_VALEURH,
 POT8_VALEURJ  =Tab_ligcpt(i).POT8_VALEURJ,
 POT8_VALEURH  =Tab_ligcpt(i).POT8_VALEURH,
 POT9_VALEURJ  =Tab_ligcpt(i).POT9_VALEURJ,
 POT9_VALEURH  =Tab_ligcpt(i).POT9_VALEURH,
 POT10_VALEURJ =Tab_ligcpt(i).POT10_VALEURJ,
 POT10_VALEURH =Tab_ligcpt(i).POT10_VALEURH,
 POT11_VALEURJ =Tab_ligcpt(i).POT11_VALEURJ,
 POT11_VALEURH =Tab_ligcpt(i).POT11_VALEURH,
 POT12_VALEURJ =Tab_ligcpt(i).POT12_VALEURJ,
 POT12_VALEURH =Tab_ligcpt(i).POT12_VALEURH where rowid=Tab_ligcpt(i).rowid;*/
 
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_UNIT_PROPAGATION', IDMATRIC ||','|| p_matric ||','|| DATEDEB ||','||DATEFIN ||','|| CODECPT ||','|| AvecBascule ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_PROPAGATION;
 PROCEDURE CAD_UNIT_MAJ_VALEUR_RUBJOUR(
 idMat               IN NUMBER,
 matric              IN VARCHAR2 ,
 DATEJOUR            IN VARCHAR2 ,
 rub                 IN VARCHAR2,
 unite               IN VARCHAR2,
 nbh                 IN NUMBER,
 j_cal               IN NUMBER,
 j_ouvrable          IN NUMBER,
 j_oeuvr             IN NUMBER,
 j_ouvre             IN NUMBER,
 nbjour              IN OUT NUMBER,
 nbheures            IN OUT NUMBER,
 forcage             IN VARCHAR2,
 limitazero          IN BOOLEAN,
 forcageDuResteEnFin IN VARCHAR2)
 AS
 CURSOR cur_cpt
 IS
 SELECT *
 FROM
 (SELECT a.code_compteur,
 a.pot_solde,
 a.pot_variation,
 a.min_soldej,
 a.min_soldeh,
 a.ordre
 FROM CAD_PARAM_LIEN_RUB_CPT a,
 CAD_MATRIC_DATEVALID b
 WHERE a.RUB_VAL_JOUR =rub
 AND a.code_compteur  =b.code_compteur
 AND b.matricule      =matric
 AND b.date_deb_per  <=datejour
 AND b.date_fin_per  >=datejour
 AND b.DATE_EFFET     =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid c
 WHERE c.date_effet<=datejour
 AND c.code_compteur=b.code_compteur
 AND b.matricule    =c.matricule
 AND b.date_deb_per =c.date_deb_per
 AND b.date_fin_per =c.date_fin_per
 )
 )
 ORDER BY
 CASE
 WHEN forcageDuResteEnFin='true'
 THEN ordre
 END DESC,
 CASE
 WHEN forcageDuResteEnFin='false'
 THEN ordre
 END
 --  ordre
 ;
 ligne_cpt cur_cpt%ROWTYPE;
 numpotSolde    NUMBER;
 numpotPris     NUMBER;
 pot_Var        NUMBER;
 valSoldeJ      NUMBER:=0;
 valSoldeH      NUMBER:=0;
 valVarJ        NUMBER:=0;
 valVarH        NUMBER:=0;
 valPrisJ       NUMBER:=0;
 valPrisH       NUMBER:=0;
 req            VARCHAR(2000);
 djourcpt       VARCHAR(8);
 typemjcp       VARCHAR(1);
 gestionHJ      VARCHAR(1);
 soldeJ         NUMBER :=0;
 variationJ     NUMBER :=0;
 soldeH         NUMBER :=0;
 variationH     NUMBER :=0;
 reqpropagation VARCHAR(4000);
 reqinsert      VARCHAR(4000);
 pasdeCpt       BOOLEAN;
 cptValide      BOOLEAN:=false;
 l_rowid        VARCHAR2(100);
 BEGIN
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO ligne_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 cptValide    :=true;
 IF gestionHJ IS NULL THEN
 SELECT cpt.gestionHJ
 INTO gestionHJ
 FROM CAD_PARAM_STRUCT_CPT cpt
 WHERE cpt.CODE_COMPTEUR=ligne_cpt.code_compteur;
 IF nbjour              =0 AND nbheures=0 THEN
 IF gestionHJ         ='H' THEN
 nbjour            :=0;
 nbheures          :=nbh;
 ELSE
 IF gestionHJ='A' THEN
 nbheures :=nbh;
 ELSE
 nbheures:=0;
 END IF;
 IF unite   ='C' THEN
 nbjour  :=j_cal;
 elsif unite='U' THEN
 nbjour  :=j_ouvre;
 elsif unite='S' THEN
 nbjour  :=j_ouvrable;
 elsif unite='O' THEN
 nbjour  :=j_oeuvr;
 END IF;
 END IF;
 END IF;
 END IF;
 -- Récupération du pot de variation
 SELECT
 CASE
 WHEN POTV1=ligne_cpt.pot_variation
 THEN 1
 WHEN POTV2=ligne_cpt.pot_variation
 THEN 2
 WHEN POTV3=ligne_cpt.pot_variation
 THEN 3
 WHEN POTV4=ligne_cpt.pot_variation
 THEN 4
 WHEN POTV5=ligne_cpt.pot_variation
 THEN 5
 WHEN POTV6=ligne_cpt.pot_variation
 THEN 6
 END
 INTO pot_Var
 FROM CAD_PARAM_CALCUL
 WHERE code_compteur=ligne_cpt.code_compteur;
 IF pot_Var        IS NOT NULL THEN
 -- Récupération du solde, du pris et de la variation
 req:= 'select djour,typemj,nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0), nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0),nvl(POTV'||pot_Var||'_VALEURJ,0), nvl(POTV'||pot_Var||'_VALEURH,0),nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0), nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0),rowid from CAD_COMPTEUR c where c.matricule      = :matric
 and code_COMPTEUR= :codecpt
 AND djour||typemj          =
 (SELECT MAX(c2.djour||c2.typemj)
 FROM CAD_COMPTEUR c2
 WHERE c.code_compteur=c2.code_compteur
 AND c.matricule      =c2.matricule
 AND ( c2.djour        <:datejour
 or
 (
 c2.djour=:datejour and c2.typemj<''S''
 ))) ' ;
 BEGIN
 IF ligne_cpt.pot_solde<>0 THEN
 EXECUTE immediate req INTO djourcpt,
 typemjcp,
 valSoldeJ,
 valSoldeH,
 valVarJ,
 valVarH,
 valprisJ,
 valprisH,
 l_rowid USING matric,
 ligne_cpt.code_compteur,
 datejour,
 datejour;
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 pasdeCpt:=true;
 CONTINUE;
 END;
 pasdeCpt:=false;
 -- Solde suffisant
 IF djourcpt <>datejour THEN
 valVarJ   :=0;
 valVarH   :=0;
 END IF;
 -- Si le solde est est déjà au min  et pas de forçage on ne fait rien
 IF ligne_cpt.pot_solde<>0 AND (NOT (forcage='true' AND forcageduresteenfin='true' ) AND ((gestionHJ='A' AND ( (limitazero AND (valSoldeJ<=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND (valSoldeJ<=ligne_cpt.MIN_SOLDEJ) ))) AND ( (limitazero AND (valSoldeH<=greatest(ligne_cpt.MIN_SOLDEH,0)) OR (NOT limitazero AND (valSoldeH<=ligne_cpt.MIN_SOLDEH) )))) OR (gestionHJ='J' AND (limitazero AND (valSoldeJ<=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND (valSoldeJ<=ligne_cpt.MIN_SOLDEJ) ) )) OR (gestionHJ='H' AND (limitazero AND (valSoldeH<=greatest(ligne_cpt.MIN_SOLDEH,0)) OR (NOT limitazero AND (valSoldeH<=ligne_cpt.MIN_SOLDEH) ) )))) THEN
 CONTINUE;
 -- si solde suffisant
 elsIF ligne_cpt.pot_solde=0 OR ((forcage='true' AND forcageduresteenfin='true' ) OR (gestionHJ='A' AND ( (limitazero AND valSoldeJ-(nbjour+valVarJ)>=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND valSoldeJ-(nbjour+valVarJ)>=ligne_cpt.MIN_SOLDEJ)) AND ( (limitazero AND valSoldeH-(nbheures+valVarH)>=greatest(ligne_cpt.MIN_SOLDEH,0) ) OR (NOT limitazero AND valSoldeH-(nbheures+valVarH)>=ligne_cpt.MIN_SOLDEH) ) ) OR (gestionHJ='H' AND ( (limitazero AND valSoldeH-(nbheures+valVarH)>=greatest(ligne_cpt.MIN_SOLDEH,0) ) OR (NOT limitazero AND valSoldeH-(nbheures+valVarH)>=ligne_cpt.MIN_SOLDEH) )) OR (gestionHJ='J' AND ( (limitazero AND valSoldeJ-(nbjour+valVarJ)>=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND valSoldeJ-(nbjour+valVarJ)>=ligne_cpt.MIN_SOLDEJ))) ) THEN
 -- mise à jour de la variation et sortie
 IF (djourcpt  =datejour AND (typemjcp='N' OR typemjcp='M' )) THEN
 variationJ := valVarJ+ nbjour;
 variationH := valVarH+ nbheures;
 req        :='UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=:1,POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+:2
 ,POTV'||pot_Var||'_VALEURh=:3,POT'||ligne_cpt.pot_variation||'_VALEURh=nvl(POT'||ligne_cpt.pot_variation||'_VALEURh,0)+:4
 where
 rowid=:5';
 EXECUTE immediate req USING variationJ,
 nbjour,
 variationH,
 nbheures,
 l_rowid;
 ELSE
 IF gestionHJ  ='A' OR gestionHJ='J' THEN
 variationJ := NVL(nbjour,0);
 END IF;
 IF gestionHJ  ='A' OR gestionHJ='H' THEN
 variationH := NVL(nbheures,0);
 END IF;
 IF variationJ>0 OR variationH>0 THEN
 reqinsert := 'INSERT into CAD_COMPTEUR (MATRICULE,CODE_COMPTEUR,DJOUR,TYPEMJ,date_maj,POT'||ligne_cpt.pot_variation||'_VALEURJ,POTV'||pot_Var||'_VALEURJ,POT'||ligne_cpt.pot_variation||'_VALEURH,POTV'||pot_Var||'_VALEURH)
 values ('''||matric||''','''||ligne_cpt.code_compteur||''','''||datejour||''',''N'',sysdate,:1,:2,:3,:4)';
 EXECUTE immediate reqinsert USING NVL(valPrisJ,0)+ NVL(nbjour,0),
 NVL(variationJ,0),
 NVL(valPrisH,0)+ NVL(nbheures,0),
 NVL(variationH,0) ;
 END IF;
 END IF;
 nbheures:=0;
 nbjour  :=0;
 EXIT;
 ELSE -- on n'a pas assez on prend la partie possible et on calcule le reste
 IF gestionHJ='A' OR gestionHJ='J' THEN
 IF limitazero THEN
 nbjour := nbjour - greatest(0,valSoldeJ);
 ELSE
 nbjour := nbjour - greatest(0,(valSoldeJ-ligne_cpt.MIN_SOLDEJ));
 END IF;
 END IF;
 IF limitazero THEN
 nbheures := nbheures - greatest(0,valSoldeH);
 ELSE
 nbheures := nbheures - greatest(0,(valSoldeH-ligne_cpt.MIN_SOLDEH));
 END IF;
 IF (djourcpt =datejour AND (typemjcp='N' OR typemjcp='M' )) THEN
 IF limitazero THEN
 req:= 'UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=POT'||ligne_cpt.pot_solde||'_VALEURJ-('||greatest(0,ligne_cpt.MIN_SOLDEJ)||'),POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0)-'||greatest(0,ligne_cpt.MIN_SOLDEJ)||'
 ,POTV'||pot_Var||'_VALEURH=POT'||ligne_cpt.pot_solde||'_VALEURH-('||greatest(0,ligne_cpt.MIN_SOLDEH)||'),POT'||ligne_cpt.pot_variation||'_VALEURH=nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0)-('||greatest(0,ligne_cpt.MIN_SOLDEH)||')
 where rowid=:1';
 ELSE
 req:='UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=POT'||ligne_cpt.pot_solde||'_VALEURJ-('||ligne_cpt.MIN_SOLDEJ||'),POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0)-('||ligne_cpt.MIN_SOLDEJ||')
 ,POTV'||pot_Var||'_VALEURH=POT'||ligne_cpt.pot_solde||'_VALEURH-('||ligne_cpt.MIN_SOLDEH||'),POT'||ligne_cpt.pot_variation||'_VALEURH=nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0)-('||ligne_cpt.MIN_SOLDEH||')
 where rowid=:1';
 END IF;
 EXECUTE immediate req USING l_rowid;
 ELSE
 IF gestionHJ ='A' OR gestionHJ='J' THEN
 IF limitazero THEN
 soldeJ     := greatest(0,ligne_cpt.MIN_SOLDEJ);
 variationJ :=valSoldeJ-greatest(0,ligne_cpt.MIN_SOLDEJ) ;
 ELSE
 soldeJ     := ligne_cpt.MIN_SOLDEJ;
 variationJ :=valSoldeJ-ligne_cpt.MIN_SOLDEJ ;
 END IF;
 END IF;
 IF gestionHJ ='A' OR gestionHJ='H' THEN
 IF limitazero THEN
 soldeH     :=greatest(0,ligne_cpt.MIN_SOLDEH);
 variationH :=valSoldeH-greatest(0,ligne_cpt.MIN_SOLDEH) ;
 ELSE
 soldeH     := ligne_cpt.MIN_SOLDEH;
 variationH :=valSoldeH-ligne_cpt.MIN_SOLDEH ;
 END IF;
 END IF;
 IF variationJ>0 OR variationH>0 THEN
 req       := 'INSERT into CAD_COMPTEUR (MATRICULE,CODE_COMPTEUR,DJOUR,TYPEMJ,date_maj,POT'||ligne_cpt.pot_variation||'_VALEURJ,POTV'||pot_Var||'_VALEURJ,POT'||ligne_cpt.pot_variation||'_VALEURH,POTV'||pot_Var||'_VALEURH)
 values ('''||matric||''','''||ligne_cpt.code_compteur||''','''||datejour||''',''N'',sysdate,:1,:2,:3, :4)';
 EXECUTE immediate req USING valprisJ+soldeJ+variationJ,
 variationJ,
 valprish+soldeH+variationH,
 variationH;
 END IF;
 END IF;
 END IF;
 END IF;
 END LOOP;
 CLOSE cur_cpt;
 -- si mode interactif (pas recalcul) on renvoie une erreur si le solde est insuffisant
 --    - mode recalcul : on passe en solde négatif ( que faire d'autre :1)
 --    - mode interactif : on renvoie une erreur pas assez de solde : erreur de type CAD-00001
 IF NOT limitazero AND forcage<>'true' THEN
 IF pasdecpt THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00117#'||matric||'#'||datejour||'#'||rub);
 END IF;
 IF ( nbheures>0 OR nbjour>0) THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00055#'||datejour||'#'||rub);
 END IF;
 END IF;
 IF NOT cptValide AND forcage<>'true' THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00117#'||matric||'#'||datejour||'#'||rub);
 END IF;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(idMat ,'CAD_UNIT_MAJ_VALEUR', idMat ||','|| matric ||','|| DATEJOUR ||','|| rub ||','|| unite ||','|| nbh ||','|| j_cal ||','|| j_ouvrable ||','|| j_oeuvr ||','|| j_ouvre ||','|| nbjour ||','|| nbheures ||','|| forcage ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_MAJ_VALEUR_RUBJOUR;
 PROCEDURE         CAD_MAJ_VALEUR_RUBJOUR(
 idmat           IN NUMBER,
 pmatric         IN VARCHAR2,
 dateprec        IN VARCHAR2,
 datejour        IN VARCHAR2,
 nbh             IN NUMBER,
 j_cal           IN NUMBER,
 j_ouvrable      IN NUMBER,
 j_oeuvr         IN NUMBER,
 j_ouvre         IN NUMBER,
 rub             IN VARCHAR2,
 forcage         IN VARCHAR2)
 AS
 nbjour          NUMBER:=0;
 nbheures        NUMBER:=0;
 unite           VARCHAR(1);
 dtrecalc        VARCHAR(8);
 dtdebrecalc     VARCHAR(8);
 CURSOR cur_cpt
 IS
 SELECT code_compteur, MAX(djour) AS djour
 FROM cad_compteur cpt
 WHERE djour < datejour
 AND  matricule = pmatric
 AND code_compteur IN (SELECT DISTINCT code_compteur FROM cad_param_lien_rub_cpt lien /*WHERE rub_val_jour = rub*/)
 GROUP BY code_compteur;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 nbjour := 0;
 nbheures := 0;
 unite := cad_unite(pmatric, datejour, rub);
 
 /*
 SELECT MAX(djour) INTO dtrecalc
 FROM (SELECT code_compteur, MIN(djour) AS djour
 FROM cad_compteur cpt
 WHERE djour > datejour
 AND matricule = matric
 AND code_compteur IN (SELECT code_compteur FROM cad_param_lien_rub_cpt WHERE rub_val_jour = rub)
 GROUP BY code_compteur
 );
 */
 
 BEGIN
 SELECT djour INTO dtrecalc
 FROM (SELECT TO_CHAR(ip.date_effet, 'yyyymmdd') AS djour
 FROM tge_incidents_paie     ip,
 dic_adm_contrat        dac,
 -- MONOP DIT 50818
 DIC_ADM_CONTRAT_SITU   s
 WHERE dac.matric = pmatric
 AND dac.NUMPAC=s.NUMPAC
 AND dac.PACMAT=s.PACMAT
 AND dac.NUMCNT=s.NUMCNT
 AND ip.date_effet > TO_DATE(datejour, 'yyyymmdd')
 AND ip.idpacmat = dac.idpacmat
 AND ip.paiezad = s.paiezad
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'))
 AND ip.code_ip IN (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt)
 ORDER BY ip.date_effet
 )
 WHERE ROWNUM = 1;
 EXCEPTION
 WHEN OTHERS THEN
 CAD_ERREUR(idmat ,'CAD_MAJ_VALEUR_RUBJOUR', idmat ||','|| pmatric || ',' || dateprec || ',' || datejour || ',' || nbh || ',' || j_cal || ',' || j_ouvrable || ',' || j_oeuvr || ',' || j_ouvre || ',' || rub || ',' || forcage, err_code || '-' || err_msg );
 dtrecalc := datejour;
 END;
 dtdebrecalc := datejour;
 
 /*
 IF dateprec IS NOT NULL THEN
 dtDebrecalc := DATEJOUR;
 ELSE
 SELECT MIN(djour) INTO dtDebrecalc
 FROM (SELECT code_compteur, max(DJOUR) as djour
 FROM cad_compteur cpt
 WHERE djour < datejour
 AND matricule = matric
 AND code_compteur IN (SELECT code_compteur FROM cad_param_lien_rub_cpt WHERE rub_val_jour = rub)
 GROUP BY CODE_COMPTEUR);
 END IF;
 */
 
 cad_avancement(idmat, '    Début rub : ' || datejour || ',' || rub);
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour, rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, TRUE, 'false');
 cad_avancement(idmat, '    Fin rub : ' || datejour);
 cad_avancement(idmat, '    Début calcul : ' || datejour);
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%notfound;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 --cad_avancement(idmat, '    Fin propag : ' || datejour);
 --cad_calcul(matric, idmat, dtDebrecalc, dtrecalc);
 --cad_avancement(idmat, '    Fin calcul : ' || datejour);
 IF nbjour > 0 OR nbheures > 0 THEN
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour,rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, FALSE,'false');
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%notfound;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 cad_avancement(idmat,'    Fin propag : '|| datejour);
 --cad_calcul(matric,idmat, dtDebrecalc, dtrecalc);
 END IF;
 IF (nbjour > 0 OR nbheures > 0) AND forcage = 'true' THEN
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour,rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, FALSE, 'true');
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%notfound ;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 cad_avancement(idmat, '    Fin propag : ' || datejour);
 --cad_calcul(matric, idmat, dtDebrecalc, dtrecalc);
 END IF;
 cad_calcul(pmatric, idmat, dtdebrecalc, dtrecalc);
 END CAD_MAJ_VALEUR_RUBJOUR;
 PROCEDURE CAD_MISE_A_0_VAR(
 idMat IN NUMBER,
 dtdeb IN VARCHAR2 )
 AS
 CURSOR cur_cpt
 IS
 SELECT cpt.code_compteur,
 MAX(DJOUR) AS djour,
 cpt.matricule
 FROM CAD_COMPTEUR cpt,cad_calcul_en_cours_matric d,(SELECT DISTINCT code_compteur FROM CAD_PARAM_LIEN_RUB_CPT
 ) lien
 WHERE DJOUr    <dtdeb
 and d.id=idMat
 AND cpt.MATRICULE =d.matricule
 AND cpt.CODE_COMPTEUR = lien.code_compteur
 GROUP BY cpt.CODE_COMPTEUR,
 cpt.matricule;
 lig_cpt cur_cpt%ROWTYPE;
 dtrecalc VARCHAR(8);
 BEGIN
 CAD_AVANCEMENT(idMat,'Début Mise à 0');
 -- remise à 0 des pots de variation
 CAD_AVANCEMENT(idMat,'  Début Mise à 0 des pots');
 UPDATE CAD_COMPTEUR a
 SET potv1_valeurJ=0 ,
 potv1_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv1
 );
 UPDATE CAD_COMPTEUR a
 SET potv2_valeurJ=0 ,
 potv2_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv2
 );
 UPDATE CAD_COMPTEUR a
 SET potv3_valeurJ=0 ,
 potv3_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv3
 );
 UPDATE CAD_COMPTEUR a
 SET potv4_valeurJ=0 ,
 potv4_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv4
 );
 UPDATE CAD_COMPTEUR a
 SET potv5_valeurJ=0 ,
 potv5_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv5
 );
 UPDATE CAD_COMPTEUR a
 SET potv6_valeurJ=0 ,
 potv6_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv6
 );
 CAD_AVANCEMENT(idMat,'  Fin Mise à 0 des pots');
 /*for i in 1..6
 loop*/
 -- But : Mettre à 0 seulement les pots de variations utilisées par les rubriques
 /* execute immediate 'merge into ( select * from CAD_COMPTEUR cpt where typemj<>''I'' and DJOUr >='||dtdeb||' AND MATRICULE in (select matricule from cad_calcul_en_cours_matric d where d.id='||idMat||' )) a using (select b.CODE_COMPTEUR from cad_param_lien_rub_cpt b, cad_PARAM_calcul c where  B.code_compteur=c.code_compteur
 and b.pot_variation=c.potv'||i||'  group by  b.CODE_COMPTEUR ) e on ( a.code_COMPTeur=e.code_compteur  )
 when matched then
 update set a.potv'||i||'_valeurJ=0 , a.potv'||i||'_valeurH=0,date_maj=sysdate' ;
 end loop;*/
 CAD_AVANCEMENT(idMat,'  Début propag');
 -- reprise des valeurs précédentes puis calcul
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 cad_unit_propagation(idmat,lig_cpt.matricule,lig_cpt.djour,dtdeb,lig_cpt.code_compteur,'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 CAD_AVANCEMENT(idMat,'  Fin propag');
 -- calcul jusqu'à première rubrique sinon fin ??
 /*  BEGIN
 SELECT djour
 INTO dtrecalc
 FROM
 (SELECT TO_CHAR(je.jour,'yyyymmdd') AS djour
 FROM gta_jou_contrat cnt,
 gta_jou_jouremploi je,
 gta_jou_valjour val
 WHERE je.employe_id IN
 (SELECT matricule FROM cad_calcul_en_cours_matric WHERE id=idmat
 )
 AND je.jour        >to_date(dtdeb,'yyyymmdd')
 AND je.id          =val.jour_emploi_id
 AND cnt.employe_id =je.employe_id
 AND je.code_contrat=cnt.code_contrat
 AND je.jour BETWEEN cnt.date_deb_valid AND NVL(cnt.date_fin_valid,to_date('20991231','yyyymmdd') )
 AND val.rub_val_jour IN
 (SELECT DISTINCT (RUB_VAL_JOUR) FROM CAD_PARAM_LIEN_RUB_CPT
 )
 ORDER BY je.jour
 )
 WHERE rownum=1;
 EXCEPTION
 WHEN OTHERS THEN
 dtrecalc:=NULL;
 END;*/
 CAD_AVANCEMENT(idMat,'  Début calcul suite mise à 0 ');
 CAD_CALCUL(NULL,idMat,dtdeb,NULL);
 CAD_AVANCEMENT(idMat,'  Fin calcul suite mise à 0 ');
 CAD_AVANCEMENT(idMat,'Fin Mise à 0');
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(idMat ,'CAD_MISE_A_0_VAR', idMat ||','|| dtdeb ,err_code||'-'||err_msg );
 raise;
 END CAD_MISE_A_0_VAR;
 PROCEDURE CAD_UNIT_BASCULE(
 IDMATRIC   IN NUMBER ,
 p_matric   IN VARCHAR2,
 BASCULE    IN VARCHAR2 ,
 DATEBAS    IN VARCHAR2 ,
 p_ordre    IN NUMBER,
 p_typebasc IN VARCHAR2)
 AS
 CURSOR cur_Bascule
 IS
 SELECT a.*,
 b.compteur_dest,
 b.compteur_ori,
 requetes,
 a.rowid,
 (select max(d.djour||'#'||d.typemj)  from CAD_COMPTEUR d where d.MATRICULE=a.MATRICULE and d.CODE_COMPTEUR= b.compteur_ori AND d.DJOUR||d.typemj<DATE_THEO_BASCULE||p_typebasc ) as djourFirst,
 -- (select max(typemj) from CAD_COMPTEUR d where d.code_compteur = b.compteur_ori and d.djour <(select max(e.djour)  from CAD_COMPTEUR e where e.MATRICULE=d.MATRICULE and e.CODE_COMPTEUR= d.code_compteur AND e.DJOUR||e.typemj<=DATEBAS||p_typebasc ) and d.matricule = a.matricule) as typemjFirst,
 (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=a.MATRICULE and d.CODE_COMPTEUR= b.compteur_ori AND d.DJOUR||d.typemj<=DATE_THEO_BASCULE||p_typebasc ) as djourAutre,
 p_typebasc as typemjautre
 
 FROM CAD_REGLES_PREVUES_REALISEES a,
 cad_param_regles_maj b,CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE a.code_bascule =b.code_bascule
 AND a.code_bascule   =bascule
 AND DATE_THEO_BASCULE=DATEBAS
 AND a.type_bascule   =p_typebasc
 -- and requetes is not null
 AND (ordre           =p_ordre
 OR (ordre           IS NULL
 AND p_ordre         IS NULL))
 AND a.matricule= mat.matricule
 and mat.id     =idmatric
 AND mat.matricule=NVL(p_matric,mat.matricule);
 ligneBascule cur_Bascule%ROWTYPE;
 pos  NUMBER:=0;
 subs VARCHAR2(4000);
 req CLOB;
 requpdate clob;
 djourReq  VARCHAR2(1000);
 TYPE T_REC IS RECORD (
 idRow varchar2(100),
 dte  CAD_COMPTEUR.djour%TYPE,
 typemj  CAD_COMPTEUR.typemj%TYPE );
 
 TYPE Tab_Rowid
 IS
 TABLE OF T_REC index by pls_integer;
 T_Id Tab_Rowid;
 T_IdBasc Tab_Rowid;
 code_basc_prec VARCHAR(20);
 code_dest_prec VARCHAR(20);
 code_ori_prec  VARCHAR(20);
 mat_prec       VARCHAR(20);
 type_mj_req varchar(1);
 sizeTab number;
 withdjour boolean;
 reqwithoutDate clob;
 nbdjour number;
 TYPE TYP_compteur_dest is table of varchar2(1) index by varchar2(32) ;
 tab_compteur_dest TYP_compteur_dest;
 BEGIN
 OPEN cur_Bascule;
 LOOP
 FETCH cur_Bascule INTO ligneBascule;
 
 --req              :=ligneBascule.REQUETES;
 IF code_basc_prec                                                     IS NOT NULL AND (lignebascule.code_bascule <>code_basc_prec OR cur_Bascule%NOTFOUND) THEN
 reqwithoutDate:='';
 requpdate:='';
 nbdjour:=0;
 BEGIN
 WHILE LENGTH(req) >0
 LOOP
 IF instr(req,';')>0 THEN
 subs          :=SUBSTR(req,0,instr(req,';'));
 ELSE
 subs:=req;
 END IF;
 req      :=REPLACE(req,subs,'');
 req      :=REPLACE(req,subs,'');
 IF instr(subs,'_DJOUR_')>0 THEN
 nbdjour:=nbdjour+1;
 withdjour:=true;
 subs     :=REPLACE(subs,'_DJOUR_',':date'||trunc(dbms_random.value(1,100))||' and typemj=:type'||trunc(dbms_random.value(1,100)));
 subs     :=REPLACE(subs,';','');
 -- requpdate:='update CAD_COMPTEUR ca set '||subs||' where rowid=:1' ;
 if requpdate is not null then
 requpdate:=requpdate||',';
 end if;
 requpdate:=requpdate||subs;
 else
 withdjour:=false;
 subs     :=REPLACE(subs,';','');
 if reqwithoutDate is not null then
 reqwithoutDate:=reqwithoutDate||',';
 end if;
 reqwithoutDate:=reqwithoutDate||subs;
 end if;
 
 
 -- CAD_DEBUG(idmatric,requpdate);
 /* if withdjour then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 end if;*/
 END LOOP;
 if reqwithoutDate is not null then
 reqwithoutDate:='update CAD_COMPTEUR ca set '||reqwithoutDate||' where rowid=:1' ;
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate reqwithoutDate USING t_id(i).idrow;
 end if;
 
 if requpdate is not null then
 requpdate:='update CAD_COMPTEUR ca set '||requpdate||' where rowid=:1' ;
 if nbdjour=1 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=2 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=3 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=4 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=5 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=6 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=7 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=8 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=9 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=10 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=11 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=12 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 end if;
 end if;
 
 
 FORALL i IN T_IdBasc.first..T_IdBasc.last
 UPDATE CAD_REGLES_PREVUES_REALISEES a
 SET statut        ='OK',
 DERNIERE_BASCULE=SYSTIMESTAMP
 WHERE rowid       =T_IdBasc(i).idrow;
 EXCEPTION
 WHEN OTHERS THEN
 IF T_IdBasc IS NOT NULL THEN
 FORALL i IN T_IdBasc.first..T_IdBasc.last
 UPDATE CAD_REGLES_PREVUES_REALISEES a
 SET statut        ='KO',
 DERNIERE_BASCULE=SYSTIMESTAMP
 WHERE rowid       =T_IdBasc(i).idrow;
 END IF;
 raise;
 END;
 END IF;
 EXIT
 WHEN cur_Bascule%NOTFOUND ;
 code_dest_prec := lignebascule.compteur_dest;
 code_ori_prec  := lignebascule.compteur_ori;
 mat_prec       := lignebascule.matricule ;
 IF p_typebasc                                                        ='B' THEN
 IF not tab_compteur_dest.exists(mat_prec||'#'||code_ori_prec) THEN
 -- djourReq                                                        :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR<'''||datebas||'''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule) ';
 djourReq :=substr(lignebascule.djourFirst,1,8);
 type_mj_req:=substr(lignebascule.djourFirst,10,1);
 --listecompteur_dest                                              :=listecompteur_dest||';'||mat_prec||'#'||code_dest_prec||';';
 tab_compteur_dest(mat_prec||'#'||code_dest_prec):='Y';
 ELSE
 --DBMS_OUTPUT.PUT_LINE (listecompteur_dest);
 --FIXME utiliser la procédure trace_dbms_output()
 djourReq :=lignebascule.djourAUTRE;
 type_mj_req:=lignebascule.typemjAUTRE ;
 -- djourReq :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<='''||datebas||'B''  ) and typemj=''B'' ';
 END IF;
 ELSE
 IF not tab_compteur_dest.exists(mat_prec||'#'||code_ori_prec) THEN
 -- djourReq                                                        :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<'''||datebas||'S''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule and (d.DJOUR<'''||datebas||''' or ( d.DJOUR='''||datebas||''' and typemj<>''S''))) ';
 djourReq :=substr(lignebascule.djourFirst,1,8);
 type_mj_req:=substr(lignebascule.djourFirst,10,1);
 -- listecompteur_dest                                              :=listecompteur_dest||';'||mat_prec||'#'||code_dest_prec||';';
 tab_compteur_dest(mat_prec||'#'||code_dest_prec):='Y';
 ELSE
 --djourReq :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<='''||datebas||'S''  )  and typemj=''S'' ';
 djourReq :=lignebascule.djourAUTRE;
 type_mj_req:=lignebascule.typemjAUTRE ;
 END IF;
 END IF;
 
 
 DECLARE
 CURSOR cur_cpt
 IS
 SELECT cad_compteur.*,
 rowid
 FROM cad_compteur
 WHERE TYPEMJ     =p_typebasc
 AND CODE_COMPTEUR=ligneBascule.compteur_dest
 AND DJOUR        =DATEBAS
 AND MATRICULE    =ligneBascule.matricule;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 IF code_basc_prec IS NULL OR lignebascule.code_bascule <>code_basc_prec THEN
 t_id.delete;
 T_IdBasc.delete;
 req             :=ligneBascule.REQUETES;
 if req is null then
 req:='POT1_VALEURJ=0,POT1_VALEURH=0 ;POT2_VALEURJ=0,POT2_VALEURH=0 ;POT3_VALEURJ=0,POT3_VALEURH=0 ;POT4_VALEURJ=0,POT4_VALEURH=0 ;POT5_VALEURJ=0,POT5_VALEURH=0 ;POT6_VALEURJ=0,POT6_VALEURH=0 ;POT7_VALEURJ=0,POT7_VALEURH=0 ;POT8_VALEURJ=0,POT8_VALEURH=0 ;POT9_VALEURJ=0,POT9_VALEURH=0 ;POT10_VALEURJ=0,POT10_VALEURH=0 ;POT11_VALEURJ=0,POT11_VALEURH=0 ;POT12_VALEURJ=0,POT12_VALEURH=0 ;';
 end if;
 END IF;
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 -- select max(d.djour)  into djourReq from CAD_COMPTEUR d where d.MATRICULE=lig_cpt.MATRICULE and d.CODE_COMPTEUR=lignebascule.COMPTEUR_ORI AND DJOUR<DATEBAS;
 sizeTab:=t_id.count+1;
 t_id(sizeTab).idrow:=lig_cpt.rowid;
 t_id(sizeTab).dte:=djourReq;
 t_id(sizeTab).typemj:=type_mj_req;
 sizeTab:=T_IdBasc.count+1;
 T_IdBasc(sizeTab).idrow:=lignebascule.rowid;
 
 END LOOP;
 CLOSE cur_cpt;
 code_basc_prec := lignebascule.code_bascule;
 
 END;
 END LOOP;
 CLOSE cur_Bascule;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  :=SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_UNIT_BASCULE', IDMATRIC||','|| p_matric||','|| BASCULE ||','|| DATEBAS ||','|| p_ordre ||','|| p_typebasc ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_BASCULE;
 PROCEDURE CAD_UNIT_CALCUL(
 IDMATRIC   IN NUMBER ,
 p_MATRIC   IN VARCHAR2 ,
 DATEDEB    IN VARCHAR2 ,
 DATEFIN    IN VARCHAR2,
 AvecBacule IN VARCHAR2)
 AS
 CURSOR tabRequetes
 IS
 SELECT cptcal.CODE_COMPTEUR
 FROM CAD_CALCUL_EN_COURS_CPT cptcal
 WHERE cptcal.id =IDMATRIC
 /* AND cptcal.code_compteur IN
 (SELECT code_compteur
 FROM cad_compteur cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule=mat.matricule
 AND mat.id         =cptcal.id
 AND mat.matricule  =NVL(p_matric,mat.matricule)
 AND djour BETWEEN datedeb AND NVL(datefin,'20991231')
 ) */
 ;
 lignesRequetes tabRequetes%ROWTYPE;
 pos              NUMBER:=0;
 subs             VARCHAR2(1000);
 req              VARCHAR2(1000);
 requpdate        VARCHAR2(1000);
 cptPrec          VARCHAR2(20);
 reqpropagation   VARCHAR(4000);
 numpot           VARCHAR(2);
 listPotVariation VARCHAR(100):='';
 listPotAPropage  VARCHAR(100);
 un_index         INT;
 nbcounter        NUMBER;
 nbcounterFin     NUMBER;
 tdeb             TIMESTAMP;
 tfin             TIMESTAMP;
 debcalc          NUMBER;
 fincalc          NUMBER;
 totalcalc        NUMBER:=0;
 BEGIN
 OPEN tabRequetes;
 LOOP
 FETCH tabRequetes INTO lignesRequetes;
 EXIT
 WHEN tabRequetes%NOTFOUND ;
 --propagation
 IF cptprec IS NULL OR cptprec <>lignesRequetes.CODE_COMPTEUR THEN
 CAD_AVANCEMENT(idmatric,'Propag var du cpt '||lignesRequetes.CODE_COMPTEUR||' du '||datedeb||' au '|| datefin);
 CAD_UNIT_PROPAGATION(idmatric,p_matric,datedeb,datefin,lignesRequetes.CODE_COMPTEUR,AvecBacule);
 cptprec:=lignesRequetes.CODE_COMPTEUR;
 END IF;
 END LOOP;
 CLOSE tabRequetes;
 END CAD_UNIT_CALCUL;
 PROCEDURE CAD_CALCUL_MATRIC(
 numSeq  IN NUMBER ,
 matric  IN VARCHAR2,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 idCpt        NUMBER:=numSeq ;
 dateprec     VARCHAR2(8);
 typeBascPrec VARCHAR2(1);
 typeBasc     VARCHAR2(1);
 DATEBASC     VARCHAR2(8);
 CURSOR tabBasculesDeLaPop
 IS
 SELECT DISTINCT bpr.code_bascule,
 '' AS MATRICULE,
 bpr.DATE_THEO_BASCULE,
 ''   AS STATUT,
 NULL AS derniere_bascule,
 bpr.ordre,
 NULL AS MAJ_CONTRAT,
 bpr.type_bascule
 FROM CAD_REGLES_PREVUES_REALISEES bpr ,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE bpr.matricule=mat.matricule
 AND mat.id         =numseq
 AND bpr.date_theo_bascule BETWEEN DATEDEB AND NVL(datefin,'20991231')
 AND bpr.matricule=NVL(matric,bpr.matricule)
 ORDER BY bpr.DATE_THEO_BASCULE,
 bpr.type_bascule,
 bpr.ORDRE;
 ligneBasculesDeLaPop CAD_REGLES_PREVUES_REALISEES%ROWTYPE;
 listebascules CLOB:='';
 deb       NUMBER;
 fin       NUMBER;
 total     NUMBER:=0;
 debcalc   NUMBER;
 fincalc   NUMBER;
 totalcalc NUMBER:=0;
 listecompteur_dest CLOB:=';';
 TYPE TYP_compteur_dest is table of varchar2(1) index by varchar2(32) ;
 tab_compteur_dest TYP_compteur_dest;
 BEGIN
 CAD_AVANCEMENT(numseq,'Depart calcul');
 --CAD_DEBUG(numSeq,'');
 -- insert into CAD_CALCUL_EN_COURS_CPT (ID,CODE_COMPTEUR) select distinct idCpt as ID,COMPTEUR_DEST as CODE_COMPTEUR  from CAD_REGLES_PREVUES_REALISEES bpr , CAD_PARAM_REGLES_MAJ bdef , CAD_CALCUL_EN_COURS_MATRIC mat where bpr.matricule=mat.matricule and bpr.CODE_BASCULE=bdef.code_bascule;
 /*if numseq is null then
 DELETE
 FROM CAD_CALCUL_EN_COURS_CPT
 WHERE id=numseq;
 end if;*/
 OPEN tabBasculesDeLaPop;
 dateprec    :=datedeb;
 typebascprec:='B';
 LOOP
 FETCH tabBasculesDeLaPop INTO ligneBasculesDeLaPop;
 IF tabBasculesDeLaPop%NOTFOUND THEN
 DATEBASC:=NULL;
 typebasc:=NULL;
 ELSE
 DATEBASC:=ligneBasculesDeLaPop.DATE_THEO_BASCULE;
 typebasc:=ligneBasculesDeLaPop.type_bascule;
 END IF;
 --DBMS_OUTPUT.PUT_LINE('-BASCULE-'||' - '||NVL(DATEBASC,'*')||TO_CHAR(sysdate,'HH24:MI:SS'));
 --FIXME utiliser la procédure trace_dbms_output()
 -- si la date précédente est la même que la date de la bascule : pas de recalcul
 IF (dateprec        <>ligneBasculesDeLaPop.DATE_THEO_BASCULE OR DATEBASC IS NULL) OR (typebasc<> typebascprec OR typebasc IS NULL) THEN
 listecompteur_dest:=';';
 tab_compteur_dest.delete;
 IF listebascules  IS NOT NULL AND DATEBASC IS NOT NULL THEN
 --  CAD_UNIT_Faussebascule(idCpt,dateprec,listebascules);
 listebascules:='';
 -- On a au moins une bascule donc on calcule jusqu'au jour précédant la bascule
 -- et propagation jusqu'à la situation suivante après la bascule
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC, DATEBASC,'BASCULE');
 --  CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 
 ELSE
 IF DATEBASC IS NOT NULL THEN
 -- première bascule : calcul jusqu'au jour précédant la bascule
 -- et propagation jusqu'à la situation suivante après la bascule
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC,DATEBASC,'BASCULE');
 -- CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 ELSE
 -- pas de bascule, on calcule jusqu'à la fin
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC, datefin,'');
 --  CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 END IF;
 END IF;
 END IF;
 EXIT
 WHEN tabBasculesDeLaPop%NOTFOUND ;
 --DBMS_OUTPUT.PUT_LINE('-CAD_CALCUL_MATRIC-CAD_UNIT_4-'||TO_CHAR(sysdate,'HH24:MI:SS'));
 --FIXME utiliser la procédure trace_dbms_output()
 CAD_AVANCEMENT(numseq,'Bascule '||ligneBasculesDeLaPop.CODE_BASCULE||' du '||DATEBASC);
 CAD_UNIT_BASCULE(numSeq,matric,ligneBasculesDeLaPop.CODE_BASCULE, DATEBASC,ligneBasculesDeLaPop.ordre,typebasc);
 IF dateprec         =DATEBASC THEN
 IF listebascules IS NULL OR listebascules='' THEN
 listebascules  :=''''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 ELSE
 IF (instr(listebascules,ligneBasculesDeLaPop.CODE_BASCULE)=0) THEN
 listebascules                                          := listebascules||','''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 END IF;
 END IF;
 ELSE
 IF listebascules IS NULL OR listebascules='' THEN
 listebascules  :=''''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 END IF;
 END IF;
 dateprec    := DATEBASC;
 typebascprec:=typebasc;
 END LOOP;
 CLOSE tabBasculesDeLaPop;
 END CAD_CALCUL_MATRIC;
 PROCEDURE CAD_CALCUL(
 matric  IN VARCHAR2 ,
 idrub   IN NUMBER ,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 id_calc NUMBER;
 deb     NUMBER;
 fin     NUMBER;
 total   NUMBER:=0;
 BEGIN
 deb:= DBMS_UTILITY.get_time;
 BEGIN
 SELECT is_debug INTO valdebug FROM CAD_IS_DEBUG;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug:='N';
 END;
 -- TODO les delete sera fait plus tard par purge
 IF valdebug='O' THEN
 DELETE FROM CAD_TRACE_REQ WHERE id=idrub;
 END IF;
 --delete from CAD_CALCUL_EN_COURS_MATRIC  where id=idrub;
 IF matric IS NOT NULL AND idrub IS NULL THEN
 SELECT CAD_SEQ_CALCUL.nextVAL INTO id_calc FROM dual;
 --ne fonctionne qu'avec un matricule
 INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (
 id,
 matricule
 )
 VALUES
 (
 id_calc,
 matric
 );
 --CAD_DEBUG(id_calc,'');
 CAD_AVANCEMENT(id_calc,'Bascules '||datedeb);
 CAD_INIT_BASCULES( id_calc , matric , DATEDEB, DATEFIN) ;
 CAD_AVANCEMENT(id_calc,'Fin Bascules '||datedeb);
 CAD_AVANCEMENT(id_calc,'Début insert calcul cpt '||datedeb);
 INSERT
 INTO CAD_CALCUL_EN_COURS_CPT
 (
 ID,
 CODE_COMPTEUR
 )
 (SELECT DISTINCT id_calc AS ID,
 CODE_COMPTEUR        AS CODE_COMPTEUR
 FROM CAD_COMPTEUR cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule=mat.matricule
 AND mat.id         =id_calc
 ) ;
 CAD_AVANCEMENT(id_calc,'Fin insert calcul cpt '||datedeb);
 END IF;
 IF idrub IS NOT NULL THEN
 id_calc:=idrub;
 --     insert into CAD_CALCUL_EN_COURS_MATRIC(id,matricule) select distinct id,matricule from CAD_CALCUL_EN_COURS_RUB  where id=idrub and matricule not in (select distinct matricule from CAD_CALCUL_EN_COURS_MATRIC where id=idrub);
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Avant CAD_CALCUL_MATRIC : '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 CAD_CALCUL_MATRIC(id_calc,matric,DATEDEB,DATEFIN);
 EXCEPTION
 WHEN OTHERS THEN
 raise_application_error(-20000, 'Problème(s) durant le recalcul des compteurs');
 END CAD_CALCUL;
 PROCEDURE CAD_CONTROLE_SOLDE
 (
 idrub  IN VARCHAR2,
 matric IN VARCHAR2
 )
 AS
 dtdeb VARCHAR2
 (
 8
 )
 ;
 dtfin     VARCHAR2(8);
 solde     NUMBER;
 unite     NUMBER;
 nbBas     NUMBER;
 variation NUMBER;
 TYPE TYP_RUB
 IS
 TABLE OF cad_calcul_en_cours_rub.rub_val_jour%type ;
 Tabrub TYP_RUB;
 BEGIN
 -- cas sans bascule
 SELECT MIN(date_jour)
 INTO dtdeb
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     =idrub
 AND matricule=matric;
 SELECT MAX(date_jour)
 INTO dtfin
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     =idrub
 AND matricule=matric;
 SELECT COUNT(*)
 INTO nbBas
 FROM CAD_MATRIC_DATEVALID
 WHERE DATE_FIN_PER BETWEEN dtdeb AND dtfin
 AND matricule=matric;
 IF nbBas     =0 THEN
 SELECT rub_val_jour BULK COLLECT
 INTO Tabrub
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     = idrub
 AND matricule=matric
 AND date_jour=dtdeb
 ORDER BY rub_val_jour;
 FOR i IN Tabrub.first..Tabrub.last
 LOOP
 solde   :=CAD_SOLDE(MATRIC,DTDEB,Tabrub(i));
 unite   := cad_unite(matric,DTDEB,Tabrub(i));
 IF unite = 'H' THEN
 SELECT SUM(heure)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'C' THEN
 SELECT SUM(calend)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'U' THEN
 SELECT SUM(ouvre)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'O' THEN
 SELECT SUM(oeuvre)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'S' THEN
 SELECT SUM(ouvrable)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 END IF;
 solde  :=solde - variation;
 IF solde<0 THEN
 raise_application_error(-20000, 'CAD_0001');
 END IF ;
 END LOOP ;
 ELSE
 CAD_MAJ_VALEUR_LISTE_RUBJOUR(idrub,dtdeb,NULL,'false','true');
 ROLLBACK;
 END IF;
 END CAD_CONTROLE_SOLDE;
 PROCEDURE CAD_IMPORT(
 p_numseq      IN NUMBER,
 nom_Fichier   IN VARCHAR2,
 avec_Rollback IN VARCHAR2)
 AS
 CURSOR tab
 IS
 SELECT * FROM CAD_TABLE_IMPORT ORDER BY donnees;
 ligne CAD_TABLE_IMPORT%ROWTYPE;
 cpt CAD_COMPTEUR%ROWTYPE;
 TYPE tableau
 IS
 TABLE OF VARCHAR(50);
 tabDonnees tableau :=tableau();
 pos          NUMBER;
 indice       NUMBER;
 subs         VARCHAR(100);
 datemin      VARCHAR(10);
 requete      VARCHAR(4000);
 updatePots   VARCHAR(1000);
 insertCol    VARCHAR(1000);
 insertValue  VARCHAR(1000);
 ligneEnCours VARCHAR(1000);
 numligne     NUMBER;
 numseq       NUMBER;
 newnumseq    number;
 TYPE liste_pot_type
 IS
 TABLE OF NUMBER INDEX BY binary_integer ;
 TYPE strut_pot_type
 IS
 TABLE OF liste_pot_type INDEX BY VARCHAR2(5);
 map_strut_pot strut_pot_type;
 BEGIN
 IF p_numseq IS NULL THEN
 SELECT CAD_SEQ_CALCUL.nextval INTO numseq FROM dual;
 ELSE
 numseq:=p_numseq;
 END IF;
 numligne:=0;
 OPEN tab;
 LOOP
 FETCH tab
 INTO ligne;
 EXIT
 WHEN tab%NOTFOUND ;
 numligne    :=numligne+1;
 ligneEnCours:=ligne.donnees;
 -- Création du tableau de donnees
 indice :=0;
 -- Suppression des espaces
 ligne.donnees:=REPLACE(ligne.donnees,' ','');
 BEGIN
 WHILE LENGTH(ligne.donnees) >0
 LOOP
 indice               :=indice+1;
 pos                  :=instr(ligne.donnees,';');
 IF (pos               >0) THEN
 subs               :=SUBSTR(ligne.donnees,0,pos);
 ligne.donnees      :=SUBSTR(ligne.donnees,LENGTH(subs)+1);
 subs               :=REPLACE(subs,';','');
 IF tabDonnees.last IS NULL OR tabDonnees.last<=indice THEN
 tabDonnees.extend;
 END IF;
 tabDonnees(indice):=subs;
 ELSE
 IF tabDonnees.last IS NULL OR tabDonnees.last<=indice THEN
 tabDonnees.extend;
 END IF;
 tabDonnees(indice):=ligne.donnees;
 ligne.donnees     :='';
 END IF;
 END LOOP;
 IF tabdonnees(1)='1' THEN
 IF datemin   IS NULL OR datemin>tabDonnees(4) THEN
 datemin    :=tabDonnees(4);
 END IF;
 -- si rollback on copie les compteur dans la table temporaire
 IF avec_rollback='true' THEN
 merge INTO CAD_COMPTEUR_FOR_ROLL a USING
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE MATRICULE =tabDonnees(2)
 AND DJOUR      >=tabDonnees(4)
 ) b ON (a.id    =numseq AND a.matricule=b.matricule AND a.code_compteur=b.code_compteur AND a.djour=b.djour AND (a.typemj=b.typemj OR (a.typeMj='M' AND b.typeMj='N') OR (b.typeMj='M' AND a.typeMj='N') ))
 WHEN NOT matched THEN
 INSERT
 (
 a.ID,
 a.MATRICULE,
 a.CODE_COMPTEUR,
 a.DJOUR,
 a.TYPEMJ,
 a.DATE_MAJ,
 a.POT1_VALEURJ,
 a.POT1_VALEURH,
 a.POT1_FJ,
 a.POT1_FH,
 a.POT2_VALEURJ,
 a.POT2_VALEURH,
 a.POT2_FJ,
 a.POT2_FH,
 a.POT3_VALEURJ,
 a.POT3_VALEURH ,
 a.POT3_FJ,
 a.POT3_FH,
 a.POT4_VALEURJ,
 a.POT4_VALEURH,
 a.POT4_FJ,
 a.POT4_FH,
 a.POT5_VALEURJ,
 a.POT5_VALEURH,
 a.POT5_FJ,
 a.POT5_FH,
 a.POT6_VALEURJ,
 a.POT6_VALEURH,
 a.POT6_FJ,
 a.POT6_FH,
 a.POT7_VALEURJ,
 a.POT7_VALEURH,
 a.POT7_FJ ,
 a.POT7_FH,
 a.POT8_VALEURJ,
 a.POT8_VALEURH,
 a.POT8_FJ,
 a.POT8_FH,
 a.POT9_VALEURJ,
 a.POT9_VALEURH,
 a.POT9_FJ,
 a.POT9_FH,
 a.POT10_VALEURJ,
 a.POT10_VALEURH,
 a.POT10_FJ,
 a.POT10_FH,
 a.POT11_VALEURJ,
 a.POT11_VALEURH,
 a.POT11_FJ ,
 a.POT11_FH,
 a.POT12_VALEURJ,
 a.POT12_VALEURH,
 a.POT12_FJ,
 a.POT12_FH,
 a.POTV1_VALEURJ,
 a.POTV1_VALEURH,
 a.POTV2_VALEURJ,
 a.POTV2_VALEURH,
 a.POTV3_VALEURJ,
 a.POTV3_VALEURH,
 a.POTV4_VALEURJ,
 a.POTV4_VALEURH,
 a.POTV5_VALEURJ ,
 a.POTV5_VALEURH,
 a.POTV6_VALEURJ,
 a.POTV6_VALEURH
 )
 VALUES
 (
 numseq,
 b.MATRICULE,
 b.CODE_COMPTEUR,
 b.DJOUR,
 b.TYPEMJ,
 b.DATE_MAJ,
 b.POT1_VALEURJ,
 b.POT1_VALEURH,
 b.POT1_FJ,
 b.POT1_FH,
 b.POT2_VALEURJ,
 b.POT2_VALEURH,
 b.POT2_FJ,
 b.POT2_FH,
 b.POT3_VALEURJ,
 b.POT3_VALEURH ,
 b.POT3_FJ,
 b.POT3_FH,
 b.POT4_VALEURJ,
 b.POT4_VALEURH,
 b.POT4_FJ,
 b.POT4_FH,
 b.POT5_VALEURJ,
 b.POT5_VALEURH,
 b.POT5_FJ,
 b.POT5_FH,
 b.POT6_VALEURJ,
 b.POT6_VALEURH,
 b.POT6_FJ,
 b.POT6_FH,
 b.POT7_VALEURJ,
 b.POT7_VALEURH,
 b.POT7_FJ ,
 b.POT7_FH,
 b.POT8_VALEURJ,
 b.POT8_VALEURH,
 b.POT8_FJ,
 b.POT8_FH,
 b.POT9_VALEURJ,
 b.POT9_VALEURH,
 b.POT9_FJ,
 b.POT9_FH,
 b.POT10_VALEURJ,
 b.POT10_VALEURH,
 b.POT10_FJ,
 b.POT10_FH,
 b.POT11_VALEURJ,
 b.POT11_VALEURH,
 b.POT11_FJ ,
 b.POT11_FH,
 b.POT12_VALEURJ,
 b.POT12_VALEURH,
 b.POT12_FJ,
 b.POT12_FH,
 b.POTV1_VALEURJ,
 b.POTV1_VALEURH,
 b.POTV2_VALEURJ,
 b.POTV2_VALEURH,
 b.POTV3_VALEURJ,
 b.POTV3_VALEURH,
 b.POTV4_VALEURJ,
 b.POTV4_VALEURH,
 b.POTV5_VALEURJ ,
 b.POTV5_VALEURH,
 b.POTV6_VALEURJ,
 b.POTV6_VALEURH
 );
 END IF;
 merge INTO CAD_COMPTEUR_MIN_FOR_ROLL a USING
 (SELECT numseq    AS id,
 tabDonnees(2) AS matricule,
 tabDonnees(4) AS dte
 FROM dual
 )
 b ON (a.id=b.id AND a.matricule=b.matricule)
 WHEN matched THEN
 UPDATE SET a.date_min=b.dte WHERE b.dte<a.date_min WHEN NOT matched THEN
 INSERT
 (a.id,a.matricule,a.date_min
 ) VALUES
 (b.id,b.matricule,b.dte
 );
 
 -- passage de tous les M en N
 UPDATE CAD_COMPTEUR
 SET typemj       ='N'
 WHERE typemj     ='M'
 AND code_compteur=tabDonnees(3)
 AND MATRICULE    =tabDonnees(2)
 AND DJOUR       >=tabDonnees(4);
 -- mise du matricule dans les matricules à retraiter
 merge INTO CAD_CALCUL_EN_COURS_MATRIC a USING
 (SELECT tabDonnees(2) AS matricule, numseq AS id FROM dual
 ) b ON (a.id=b.id AND a.matricule=b.matricule )
 WHEN NOT MATCHED THEN
 INSERT
 ( a.ID, a.MATRICULE
 ) VALUES
 ( numseq, b.matricule
 );
 ELSIF tabdonnees(1)='2' THEN
 IF(NOT map_strut_pot.EXISTS(tabdonnees(3)) ) THEN
 DECLARE
 CURSOR tabpot
 IS
 SELECT *
 FROM CAD_PARAM_STRUCT_POT
 WHERE maj_batch  ='O'
 AND code_compteur=tabdonnees(3)
 ORDER BY num_pot;
 ligne_struct CAD_PARAM_STRUCT_POT%ROWTYPE;
 BEGIN
 OPEN tabpot;
 LOOP
 FETCH tabpot INTO ligne_struct;
 EXIT
 WHEN tabpot%NOTFOUND ;
 map_strut_pot(tabdonnees(3))(ligne_struct.num_pot):=ligne_struct.num_pot;
 END LOOP;
 CLOSE tabpot;
 END;
 END IF;
 updatePots :='';
 insertcol  :='';
 insertvalue:='';
 FOR i IN 1.. map_strut_pot(tabdonnees(3)).last
 LOOP
 updatePots :=updatePots|| ' , a.POT'||i||'_VALEURJ='|| tabdonnees(7+(i-1)*4) ||' , a.POT'||i||'_VALEURH='|| tabdonnees(9+(i-1)*4);
 insertcol  :=insertcol||' , a.POT'||i||'_VALEURJ,a.POT'||i||'_VALEURH';
 insertvalue:=insertvalue||' ,'||tabdonnees(7+(i-1)*4)||' , '||tabdonnees(9+(i-1)*4);
 END LOOP;
 requete:='merge into (select * from cad_compteur where typeMJ in (''M'',''N'') and matricule='''||tabdonnees(2)||''' and code_compteur='''||tabdonnees(3)||''' and djour= '''||tabdonnees(4)||''' ) a using (select '''||tabdonnees(2)||''' as matricule, '''||tabdonnees(3)||''' as code_compteur, '''||tabdonnees(4)||''' as DJOUR from dual ) b on ( a.code_compteur=b.code_compteur and a.matricule =b.matricule and a.djour=b.djour  )';
 requete:=requete||' when matched then update set a.typeMJ=''M'' , a.date_maj=sysdate ';
 requete:=requete||updatePots;
 requete:=requete||' when not matched then insert (a.matricule,a.code_compteur,a.djour,a.typemj,a.date_maj '||insertcol||') ' ;
 requete:=requete||' values (b.matricule,b.code_compteur,b.djour,''M'',sysdate '||insertvalue||')';
 EXECUTE_IMMEDIATE_STRING (requete,0);
 END IF;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(numseq ,'IMP'||numligne,numseq||','|| nom_Fichier||','||avec_Rollback||','||tabdonnees(1)||','||tabdonnees(2)||','||tabdonnees(3)||','||tabdonnees(4) ,err_code||'-'||err_msg);
 INSERT
 INTO cad_table_import_err VALUES
 (
 nom_Fichier,
 'Erreur import de la ligne : '
 ||ligneEnCours
 );
 END;
 IF numligne mod 1000 =0 THEN
 COMMIT;
 END IF;
 END LOOP;
 CLOSE tab;
 -- lance calcul
 -- CAD_CALCUL(NULL,numseq, datemin,NULL);
 
 INSERT
 INTO CAD_CALCUL_EN_COURS_IMPORT
 (SELECT * FROM cad_calcul_en_cours_matric WHERE id=numseq
 );
 COMMIT;
 for dte in (select distinct substr(date_min,1,6) as mois from CAD_COMPTEUR_MIN_FOR_ROLL where id=numseq )
 loop
 
 select cad_seq_calcul.nextval into newnumseq from dual;
 INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (SELECT newnumseq,matricule FROM CAD_COMPTEUR_MIN_FOR_ROLL WHERE id=numseq and substr(date_min,1,6)=dte.mois
 );
 CAD_MAJ_VALEUR_LISTE_RUBJOUR (newnumseq, dte.mois||'01', NULL,'true', 'true');
 COMMIT;
 end loop;
 
 -- CAD_MAJ_VALEUR_LISTE_RUBJOUR (numseq, datemin, NULL,'true', 'true');
 
 /* INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (SELECT * FROM cad_calcul_en_cours_IMPORT WHERE id=numseq
 );*/
 --  COMMIT;
 DELETE FROM CAD_TABLE_IMPORT;
 DELETE FROM cad_calcul_en_cours_IMPORT WHERE id=numseq;
 COMMIT;
 -- lance calcul
 --  raise_application_error(-20000, 'Problème(s) durant l''import');
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(numseq ,'CAD_IMPORT'||': FIN',numseq||','|| nom_Fichier||','||avec_Rollback ,err_code||'-'||err_msg);
 raise;
 END CAD_IMPORT;
 FUNCTION              CAD_MAJ_RUB(
 dtdeb               IN VARCHAR2,
 dtfin               IN VARCHAR2,
 ispreviouscad       IN VARCHAR2,
 forcage             IN VARCHAR2,
 id_tab_mat          IN NUMBER)
 RETURN NUMBER
 IS
 nbmat               NUMBER:=0;
 dfin                VARCHAR2(8);
 dateprec            VARCHAR2(8);
 divide              NUMBER:=300;
 nbrub               NUMBER:=0;
 rubrique            BOOLEAN;
 new_id              NUMBER;
 
 BEGIN
 cad_avancement_info(id_tab_mat, id_tab_mat || ' commencé');
 SELECT COUNT (*) INTO nbmat FROM cad_calcul_en_cours_matric WHERE id = id_tab_mat;
 INSERT INTO cad_calcul_en_cours_cpt(id, code_compteur)
 (SELECT DISTINCT id_tab_mat        AS id,
 code_compteur    AS code_compteur
 FROM cad_compteur                cpt,
 cad_calcul_en_cours_matric  cm
 WHERE cpt.matricule    = cm.matricule
 AND  cm.id            = id_tab_mat
 );
 --COMMIT;
 cad_avancement(id_tab_mat, 'Bascules ' || dtdeb);
 cad_init_bascules(id_tab_mat, NULL , dtdeb, dtfin);
 cad_avancement(id_tab_mat, 'Fin Bascules ' || dtdeb);
 
 IF (dtfin IS NOT NULL) THEN
 SELECT COUNT(*) INTO nbrub
 FROM tge_incidents_paie                                           ip,
 cad_calcul_en_cours_matric                                   cm,
 dic_adm_contrat                                              dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                         s ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt) lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND cm.matricule                           = dac.matric
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet                         <= TO_DATE(dtfin, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'));
 ELSE
 SELECT COUNT(*) INTO nbrub
 FROM tge_incidents_paie                                           ip,
 cad_calcul_en_cours_matric                                   cm,
 dic_adm_contrat                                              dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                         s ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt) lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND cm.matricule                           = dac.matric
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'));
 END IF;
 
 IF nbrub > 0 OR ispreviouscad = 'true' THEN
 DECLARE
 CURSOR cur_rub
 IS
 SELECT
 dac.matric          AS matricule,
 ip.code_ip          AS rub_val_jour,
 ip.jour_heures      AS valeur,
 TO_CHAR(ip.date_effet, 'yyyymmdd')       AS date_jour,
 ip.jour_calendaire  AS val_calendaire,
 ip.jour_ouvre       AS val_ouvre,
 ip.jour_ouvrable    AS val_ouvrable,
 ip.jour_oeuvre      AS val_oeuvre
 FROM tge_incidents_paie                                             ip,
 cad_calcul_en_cours_matric                                     cm,
 dic_adm_contrat                                                 dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                            s  ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt)    lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND cm.matricule                           = dac.matric
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'))
 ORDER BY cm.matricule, ip.date_effet;
 ligne_rub cur_rub%rowtype;
 BEGIN
 cad_mise_a_0_var(id_tab_mat, dtdeb);
 SELECT cad_seq_calcul.nextval INTO new_id FROM dual;
 rubrique := FALSE;
 
 OPEN cur_rub;
 LOOP
 FETCH cur_rub INTO ligne_rub;
 EXIT WHEN cur_rub%notfound;
 IF dateprec IS NULL OR (ligne_rub.date_jour < dateprec) THEN
 dateprec := dtdeb;
 END IF;
 MERGE INTO cad_calcul_en_cours_matric A USING (SELECT new_id AS new_id,ligne_rub.matricule AS matric FROM dual) b ON (A.ID = b.new_id AND A.matricule = b.matric)
 WHEN NOT MATCHED THEN
 INSERT (A.ID, A.matricule) VALUES (b.new_id, b.matric);
 
 rubrique := TRUE;
 IF ligne_rub.rub_val_jour != '_VIDE_' THEN
 cad_avancement(id_tab_mat, 'Début Valorisation rubrique : ' || ligne_rub.rub_val_jour || ' ,matric :' || ligne_rub.matricule || ' ,date:' || ligne_rub.date_jour);
 IF nbmat = 1 THEN
 cad_maj_valeur_rubjour(id_tab_mat, ligne_rub.matricule, dateprec, ligne_rub.date_jour, NVL(ligne_rub.valeur, 0), NVL(ligne_rub.val_calendaire, 0), NVL(ligne_rub.val_ouvrable, 0), NVL(ligne_rub.val_oeuvre, 0), NVL(ligne_rub.val_ouvre, 0), NVL(ligne_rub.rub_val_jour, 0), forcage);
 ELSE
 BEGIN
 cad_maj_valeur_rubjour(id_tab_mat, ligne_rub.matricule, dateprec, ligne_rub.date_jour, NVL(ligne_rub.valeur, 0), NVL(ligne_rub.val_calendaire, 0), NVL(ligne_rub.val_ouvrable, 0), NVL(ligne_rub.val_oeuvre,0), NVL(ligne_rub.val_ouvre, 0), NVL(ligne_rub.rub_val_jour, 0), forcage);
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 cad_erreur(id_tab_mat, 'CAD_MAJ_VALEUR_LISTE', ligne_rub.matricule || ',' || ligne_rub.rub_val_jour || ',' || dateprec || ',' || ligne_rub.date_jour, err_code || '-' || err_msg);
 CONTINUE;
 END;
 END IF;
 cad_avancement(id_tab_mat, 'Fin Valorisation rubrique : ' || ligne_rub.rub_val_jour || ' ,matric :' || ligne_rub.matricule || ' ,date:' || ligne_rub.date_jour);
 END IF;
 dateprec := ligne_rub.date_jour;
 END LOOP;
 CLOSE cur_rub;
 
 IF rubrique THEN
 cad_avancement(new_id, 'Bascules ' || dtdeb);
 cad_init_bascules(new_id, NULL, dtdeb, NULL);
 cad_avancement(new_id, 'Fin Bascules ' || dtdeb);
 INSERT INTO cad_calcul_en_cours_cpt(id, code_compteur)
 (SELECT DISTINCT new_id AS id, code_compteur AS code_compteur
 FROM cad_compteur cpt, cad_calcul_en_cours_matric mat
 WHERE cpt.matricule = mat.matricule AND mat.id = new_id
 );
 cad_calcul(NULL, new_id, dtdeb, NULL);
 DELETE FROM cad_calcul_en_cours_rub WHERE id = new_id;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = new_id;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = new_id;
 END IF;
 
 DELETE FROM cad_calcul_en_cours_rub WHERE id = id_tab_mat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = id_tab_mat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = id_tab_mat;
 
 END;
 END IF;
 cad_avancement_info(id_tab_mat, id_tab_mat || ' terminé');
 IF nbmat > divide THEN
 COMMIT;
 END IF;
 RETURN 0; /* PAS D'ERREUR */
 
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 cad_erreur(id_tab_mat, 'CAD_MAJ_RUB', dtdeb || ',' || dtfin || ',' || ispreviouscad || ',' || forcage || ',' || id_tab_mat, err_code || '-' || err_msg);
 RAISE;
 
 END CAD_MAJ_RUB;
 PROCEDURE             CAD_MAJ_VALEUR_LISTE_RUBJOUR(
 idmat               IN NUMBER,
 dtdeb               IN VARCHAR2,
 dtfin               IN VARCHAR2,
 forcage             IN VARCHAR2,
 ispreviouscad       IN VARCHAR2)
 IS
 reqpropagation      VARCHAR2(4000);
 matricprec          VARCHAR2(32);
 nbmat               NUMBER:=0;
 TYPE  typ_tab_id    IS TABLE OF NUMBER;
 tab_id typ_tab_id   :=typ_tab_id();
 new_id              NUMBER;
 nb_newid            NUMBER;
 divide              NUMBER:=300;
 retour              NUMBER;
 cn                  NUMBER;
 BEGIN
 --dbms_profiler.start_profiler;
 BEGIN
 SELECT is_debug INTO valdebug FROM cad_is_debug;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug := 'N';
 END;
 
 -- TAILLE DU TAB_ID A 1/300 IEMES DE LA POPULATION
 SELECT COUNT (*) INTO nbmat FROM cad_calcul_en_cours_matric WHERE id = idmat;
 nb_newid := ROUND(nbmat / divide) + 1;
 tab_id.EXTEND(nb_newid);
 
 -- DECOUPE LA POPULATION PAR TRANCHE DE 1/300 IEMES
 cn := 1;
 WHILE (cn <= nb_newid) --FOR i IN 1..nb_newid
 LOOP
 SELECT cad_seq_calcul.nextval INTO new_id FROM dual;
 tab_id(cn) := new_id;
 INSERT INTO cad_calcul_en_cours_matric
 (SELECT new_id, matricule
 FROM (SELECT matricule, ROWNUM AS rown FROM cad_calcul_en_cours_matric WHERE id = idmat)
 WHERE rown BETWEEN ((cn - 1) * divide) AND cn * divide
 );
 --COMMIT
 cad_avancement_info(new_id, 'Création ID: ' || new_id);
 cn := cn + 1;
 END LOOP;
 
 -- TRAITEMENT POUR CHAQUE TRANCHE
 FOR i IN tab_id.FIRST..tab_id.LAST
 LOOP
 retour := cad_maj_rub(dtdeb, dtfin, ispreviouscad, forcage, tab_id(i));
 END LOOP;
 --dbms_profiler.flush_data;
 --dbms_profiler.stop_profiler;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 DELETE FROM CAD_COMPTEUR CPT
 WHERE CPT.TYPEMJ in ('B','S')
 AND NOT EXISTS (
    SELECT 1 FROM CAD_REGLES_PREVUES_REALISEES RPR , CAD_PARAM_REGLES_MAJ PRM
    WHERE RPR.CODE_BASCULE = PRM.CODE_BASCULE
		AND CPT.CODE_COMPTEUR in (PRM.COMPTEUR_DEST,PRM.COMPTEUR_ORI)
    AND CPT.DJOUR >= RPR.DATE_THEO_BASCULE
    AND CPT.MATRICULE = RPR.MATRICULE
    AND CPT.TYPEMJ = RPR.TYPE_BASCULE
 )AND CPT.DJOUR >= dtdeb
 AND CPT.MATRICULE = matricule;

 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 IF SQLCODE != '-20000' THEN
 DELETE FROM cad_calcul_en_cours_rub WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 raise_application_error(-20000, 'Problème(s) durant le recalcul des compteurs');
 ELSE
 DELETE FROM cad_calcul_en_cours_rub WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 RAISE;
 END IF;
 END CAD_MAJ_VALEUR_LISTE_RUBJOUR;
 PROCEDURE CAD_ROLLBACK_IMPORT(
 numseq IN NUMBER)
 AS
 BEGIN
 DELETE
 FROM cad_compteur a
 WHERE matricule IN
 (SELECT CAD_COMPTEUR_MIN_FOR_ROLL.matricule
 FROM CAD_COMPTEUR_MIN_FOR_ROLL
 WHERE id=numseq
 )
 AND djour>=
 (SELECT date_min
 FROM CAD_COMPTEUR_MIN_FOR_ROLL b
 WHERE id       =numseq
 AND a.matricule=b.matricule
 );
 INSERT
 INTO CAD_COMPTEUR
 (SELECT a.MATRICULE,
 a.CODE_COMPTEUR,
 a.DJOUR,
 a.TYPEMJ,
 a.DATE_MAJ,
 a.POT1_VALEURJ,
 a.POT1_VALEURH,
 a.POT1_FJ,
 a.POT1_FH,
 a.POT2_VALEURJ,
 a.POT2_VALEURH,
 a.POT2_FJ,
 a.POT2_FH,
 a.POT3_VALEURJ,
 a.POT3_VALEURH ,
 a.POT3_FJ,
 a.POT3_FH,
 a.POT4_VALEURJ,
 a.POT4_VALEURH,
 a.POT4_FJ,
 a.POT4_FH,
 a.POT5_VALEURJ,
 a.POT5_VALEURH,
 a.POT5_FJ,
 a.POT5_FH,
 a.POT6_VALEURJ,
 a.POT6_VALEURH,
 a.POT6_FJ,
 a.POT6_FH,
 a.POT7_VALEURJ,
 a.POT7_VALEURH,
 a.POT7_FJ ,
 a.POT7_FH,
 a.POT8_VALEURJ,
 a.POT8_VALEURH,
 a.POT8_FJ,
 a.POT8_FH,
 a.POT9_VALEURJ,
 a.POT9_VALEURH,
 a.POT9_FJ,
 a.POT9_FH,
 a.POT10_VALEURJ,
 a.POT10_VALEURH,
 a.POT10_FJ,
 a.POT10_FH,
 a.POT11_VALEURJ,
 a.POT11_VALEURH,
 a.POT11_FJ ,
 a.POT11_FH,
 a.POT12_VALEURJ,
 a.POT12_VALEURH,
 a.POT12_FJ,
 a.POT12_FH,
 a.POTV1_VALEURJ,
 a.POTV1_VALEURH,
 a.POTV2_VALEURJ,
 a.POTV2_VALEURH,
 a.POTV3_VALEURJ,
 a.POTV3_VALEURH,
 a.POTV4_VALEURJ,
 a.POTV4_VALEURH,
 a.POTV5_VALEURJ ,
 a.POTV5_VALEURH,
 a.POTV6_VALEURJ,
 a.POTV6_VALEURH
 FROM cad_compteur_for_roll a
 WHERE id=numseq
 );
 DELETE FROM CAD_COMPTEUR_MIN_FOR_ROLL WHERE id =numseq;
 DELETE FROM cad_compteur_for_roll WHERE id=numseq;
 END CAD_ROLLBACK_IMPORT;
 FUNCTION cad_calcul_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 dte           VARCHAR2(12);
 TYPE tableau IS VARRAY(4) OF VARCHAR2(8);
 tab tableau :=tableau();
 pos        NUMBER;
 indice     NUMBER;
 subs       VARCHAR2(10);
 dteCalc    VARCHAR2(8);
 dtecompare DATE;
 unite      VARCHAR2(1);
 jour       VARCHAR2(2);
 mois       VARCHAR2(3);
 annee      VARCHAR2(4);
 BEGIN
 IF DATE_RELATIVE      IS NOT NULL THEN
 IF date_comparaison IS NULL THEN
 dtecompare        :=sysdate;
 ELSE
 dtecompare:=to_date(date_comparaison,'yyyymmdd');
 END IF;
 dte          :=DATE_RELATIVE;
 IF LENGTH(dte)<8 THEN
 tab.extend;
 tab(1):=dte;
 ELSE
 tab.extend;
 tab(1):=SUBSTR(dte,0,4);
 tab.extend;
 tab(2):=SUBSTR(dte,5);
 tab(2):=SUBSTR( tab(2),0,LENGTH( tab(2))-2);
 tab.extend;
 tab(3):=SUBSTR(dte,LENGTH(dte)-1);
 END IF;
 IF tab.last =3 THEN
 IF tab(3) ='00' THEN
 jour   :=TO_CHAR(dtecompare ,'dd');
 elsif SUBSTR( tab(3),1,1) IN ('L','M','W','J','V','S','D') THEN
 -- on prend le jour minimum possible pour la semaine puis on affinera
 IF SUBSTR( tab(3),2,1)   ='1' THEN
 jour                  :='08';
 elsif SUBSTR( tab(3),2,1)='2' THEN
 jour                  :='15';
 elsif SUBSTR( tab(3),2,1)='3' THEN
 jour                  :='22';
 elsif SUBSTR( tab(3),2,1)='4' THEN
 jour                  :='29';
 END IF;
 ELSE
 jour:=tab(3);
 END IF;
 IF tab(2)                     ='00' THEN
 mois                       :=TO_CHAR(dtecompare ,'mm');
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,-1) ,'mm');
 ELSE
 mois:=TO_CHAR(dtecompare,'mm');
 END IF;
 elsif tab(2) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))-1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 elsif tab(2) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'dd')>=jour THEN
 mois                      :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 ELSE
 mois:=tab(2);
 END IF;
 IF tab(1)                       ='0000' THEN
 annee                        := TO_CHAR(dtecompare ,'yyyy');
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,-12) ,'yyyy');
 ELSE
 annee:= TO_CHAR(dtecompare ,'yyyy');
 END IF;
 elsif tab(1) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 END IF;
 elsif tab(1) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')>=mois||jour THEN
 annee                       := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 END IF;
 ELSE
 annee:=tab(1);
 END IF;
 IF jour='32' THEN
 jour:=TO_CHAR(last_day(to_date(annee||mois||'01','yyyymmdd')) ,'dd');
 END IF;
 IF SUBSTR( tab(3),0,1) IN ('L','M','W','J','V','S','D') THEN
 jour                         :=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),1,1),SUBSTR(tab(3),2,1) ,annee,mois );
 IF tab(2)                     ='00' THEN
 mois                       :=TO_CHAR(dtecompare ,'mm');
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,-1) ,'mm');
 ELSE
 mois:=TO_CHAR(dtecompare,'mm');
 END IF;
 elsif tab(2) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))-1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 elsif tab(2) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'dd')>=jour THEN
 mois                      :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))+1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 ELSE
 mois:=tab(2);
 END IF;
 jour                           :=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),0,1),SUBSTR(tab(3),2,1) ,annee,mois );
 IF tab(1)                       ='0000' THEN
 annee                        := TO_CHAR(dtecompare ,'yyyy');
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,-12) ,'yyyy');
 ELSE
 annee:= TO_CHAR(dtecompare ,'yyyy');
 END IF;
 elsif tab(1) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 END IF;
 elsif tab(1) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')>mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 END IF;
 ELSE
 annee:=tab(1);
 END IF;
 jour:=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),0,1),SUBSTR(tab(3),2,1) ,annee,mois );
 END IF;
 dteCalc:=annee||mois||jour;
 ELSE
 IF tab(1) LIKE '+%' OR tab(1) LIKE '-%' THEN
 unite     := SUBSTR(tab(1), LENGTH(tab(1)));
 tab(1)    :=REPLACE(tab(1),unite,'');
 IF unite   ='A' THEN
 dteCalc :=TO_CHAR(add_Months(dtecompare,12*to_number(tab(1))) -to_number(SUBSTR(tab(1),1,1)||'1'),'yyyymmdd');
 elsif unite='M' THEN
 dteCalc :=TO_CHAR(add_Months(dtecompare,to_number(tab(1))) -to_number(SUBSTR(tab(1),1,1)||'1'),'yyyymmdd');
 elsif unite='J' THEN
 dteCalc :=TO_CHAR(dtecompare+to_number(tab(1)) ,'yyyymmdd');
 END IF;
 END IF;
 END IF;
 END IF;
 RETURN dteCalc;
 END cad_calcul_date_relative;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_AV(
 DATE_RELATIVE     IN VARCHAR2,
 DATE_COMPARAISON  IN VARCHAR2,
 DATE_VALIDITE_REL IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 ANNEE_RESOLU  VARCHAR2(10);
 dtevalid      DATE;
 var_annee     VARCHAR2(10);
 reste         VARCHAR2(10);
 DATE_VALIDITE VARCHAR2(8);
 BEGIN
 DATE_VALIDITE                     :=CAD_CALCUL_DATE_RELATIVE(DATE_VALIDITE_REL,DATE_COMPARAISON );
 dtevalid                          :=to_date(DATE_VALIDITE,'yyyymmdd');
 IF instr(upper(DATE_RELATIVE),'AV')>0 THEN
 var_annee                       :=SUBSTR(DATE_RELATIVE,3,2);
 reste                           :=SUBSTR(DATE_RELATIVE,5);
 IF var_annee                     ='00' THEN
 ANNEE_RESOLU                  := TO_CHAR(dtevalid ,'yyyy');
 elsif var_annee LIKE '+%' THEN
 ANNEE_RESOLU:= TO_CHAR(add_Months(dtevalid,12*(to_number(var_annee))) ,'yyyy');
 elsif var_annee LIKE '-%' THEN
 ANNEE_RESOLU:= TO_CHAR(add_Months(dtevalid,12*(to_number(var_annee))) ,'yyyy');
 ELSE
 ANNEE_RESOLU:=TO_CHAR(dtevalid ,'yyyy');
 END IF;
 ANNEE_RESOLU:=ANNEE_RESOLU||reste;
 ELSE
 ANNEE_RESOLU:=DATE_RELATIVE;
 END IF;
 RETURN CAD_CALCUL_DATE_RELATIVE(ANNEE_RESOLU,DATE_COMPARAISON );
 END CAD_CALCUL_DATE_RELATIVE_AV;
 FUNCTION CAD_CALCUL_DATE_REL_AV_FIN(
 DATE_ACQ_FIN   IN VARCHAR2,
 DATE_ACQ_DEBUT IN VARCHAR2,
 DATE_COMPARE   IN VARCHAR2,
 DATE_VAL_DEBUT IN VARCHAR2)
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_ACQ_FIN,CAD_CALCUL_DATE_RELATIVE_AV(DATE_ACQ_DEBUT,DATE_COMPARE,DATE_VAL_DEBUT) );
 END CAD_CALCUL_DATE_REL_AV_FIN;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_FIN(
 DATE_RELATIVE_FIN   IN VARCHAR2,
 DATE_RELATIVE_DEBUT IN VARCHAR2,
 DATE_COMPARE        IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE_FIN,CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE_DEBUT,DATE_COMPARE) );
 END CAD_CALCUL_DATE_RELATIVE_FIN;
 FUNCTION cad_formate_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE,DATE_COMPARAISON);
 END cad_formate_date_relative;
 FUNCTION CAD_INTERRO_THEME(
 MATRIC       IN VARCHAR2 ,
 p_CODE_THEME IN VARCHAR2 ,
 p_DJOUR      IN VARCHAR2,
 collectif    IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME
 AS
 CURSOR cur_items
 IS
 SELECT *
 FROM CAD_THEMES_ITEMS
 WHERE (THEME_PERE =p_CODE_THEME
 OR p_CODE_THEME  IS NULL)
 AND ACTIF         ='O'
 ORDER BY THEME_PERE,
 ordre;
 ligne_items CAD_THEMES_ITEMS%ROWTYPE;
 ligne_lib CAD_THEMES_CPT%ROWTYPE;
 ligne_Date CAD_THEMES_CPT%ROWTYPE;
 ligne_calc CAD_THEMES_CPT%ROWTYPE;
 ligne_cpt CAD_COMPTEUR%ROWTYPE;
 liste_cpt VARCHAR(4000);
 requete CLOB;
 reqSelect CLOB;
 TYPE tableau IS VARRAY(50) OF VARCHAR(50);
 tabCpt tableau       :=tableau();
 col tableau          :=tableau();
 tabPotsParCpt tableau:=tableau();
 tabPots tableau      :=tableau();
 posVir   NUMBER;
 indice   NUMBER;
 indice2  NUMBER;
 subs     VARCHAR(50);
 tmp      NUMBER;
 tmpRes   NUMBER;
 elt      VARCHAR(50);
 numLigne NUMBER;
 retour CAD_RESULTAT_THEME:=CAD_RESULTAT_THEME();
 dateinterro     VARCHAR(8);
 unite           VARCHAR(1);
 numDonnee       NUMBER;
 theme_pere_prec VARCHAR(20);
 numpot          NUMBER;
 numpotV         NUMBER;
 dad             VARCHAR(10);
 daf             VARCHAR(10);
 dvd             VARCHAR(10);
 dvf             VARCHAR(10);
 dtcalc          VARCHAR(12);
 dteoucp         VARCHAR(12);
 typeEcran       VARCHAR(1);
 trouve          INT;
 nb_clauseselect INT;
 valdebug        VARCHAR2(1);
 format          VARCHAR(4);
 deb             NUMBER;
 fin             NUMBER;
 total           NUMBER:=0;
 BEGIN
 SELECT format_heure INTO format FROM CAD_THEMES WHERE code_theme=p_CODE_THEME;
 BEGIN
 SELECT is_debug INTO valdebug FROM CAD_IS_DEBUG;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug:='N';
 END;
 IF collectif='O' THEN
 typeEcran:='C';
 ELSE
 typeEcran:='I';
 END IF;
 numDonnee:=0;
 OPEN cur_items;
 LOOP
 FETCH cur_items INTO ligne_items;
 EXIT
 WHEN cur_items%NOTFOUND ;
 -- si non actif on passe à la ligne suivante
 --  IF ligne_items.actif='N' THEN CONTINUE; END IF;
 IF theme_pere_prec IS NULL OR theme_pere_prec <>ligne_items.theme_pere THEN
 numDonnee        :=numDonnee+1;
 retour.extend;
 retour(numDonnee)           :=CAD_LIGNE_RESULTAT_THEME(NULL,NULL,NULL,NULL,NULL);
 retour(numDonnee).matricule :=matric;
 retour(numDonnee).CODE_THEME:= ligne_items.theme_pere;
 retour(numDonnee).code_item :=ligne_items.code_item;
 retour(numDonnee).lib_item  :=ligne_items.LIBELLE;
 END IF;
 -- Récupération des dates si il y en a
 DECLARE
 CURSOR cur_items_Date
 IS
 SELECT *
 FROM CAD_THEMES_CPT a
 WHERE code   = ligne_items.theme_pere
 AND ( (type  ='L'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='LC'
 OR ( type    ='L'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='LC'
 AND cpt.ordre =a.ordre
 ) )) ))
 AND calcul LIKE ('D%')
 ORDER BY ordre;
 BEGIN
 OPEN cur_items_date;
 LOOP
 FETCH cur_items_date INTO ligne_date;
 EXIT
 WHEN cur_items_date%NOTFOUND ;
 BEGIN
 -- calcul date
 SELECT LIB_CPT_POT
 INTO dteoucp
 FROM CAD_THEMES_CPT a
 WHERE code   = ligne_items.code_item
 AND ( (type  ='V'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='VC'
 OR ( type    ='V'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='VC'
 AND cpt.ordre =a.ordre
 ) )) ))
 AND ordre         =ligne_date.ordre;
 IF LENGTH(dteoucp)>5 THEN
 dtcalc         :=cad_calcul_date_relative(dteoucp,NULL);
 ELSE
 BEGIN
 IF ligne_date.calcul ='DAD' THEN
 SELECT DATE_DEB_ACQUIS
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DAF' THEN
 SELECT DATE_FIN_ACQUIS
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DVD' THEN
 SELECT DATE_DEB_PER
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DVF' THEN
 SELECT DATE_FIN_PER
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF ligne_date.calcul ='DAD' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DATE_DEB_ACQUIS, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DAF' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DATE_FIN_ACQUIS, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DVD' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DTDEB_PERIODE, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DVF' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DTFIN_PERIODE, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur=dteoucp;
 END IF;
 END;
 END IF;
 IF ligne_date.calcul    ='DAD' THEN
 dad                  :=dtcalc;
 elsif ligne_date.calcul ='DAF' THEN
 daf                  :=dtcalc;
 elsif ligne_date.calcul ='DVD' THEN
 dvd                  :=dtcalc;
 elsif ligne_date.calcul ='DVF' THEN
 dvf                  :=dtcalc;
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 END LOOP;
 CLOSE cur_items_date;
 -- récupération des compteurs à utiliser pour l'item (ordre 0, type V)
 SELECT LIB_CPT_POT
 INTO liste_cpt
 FROM CAD_THEMES_CPT a
 WHERE code =ligne_items.code_item
 AND ordre  =0
 AND type   ='V';
 --  AND ( (type  ='V'
 --  AND typeecran='I')
 -- OR (typeecran='C'
 --  AND (type    ='VC'
 --  OR ( type    ='V'
 -- AND NOT EXISTS
 --   (SELECT NULL
 --   FROM CAD_THEMES_CPT cpt
 --   WHERE cpt.code=a.code
 --   AND cpt.type  ='VC'
 --   AND cpt.ordre =a.ordre
 --   ) )) ));
 indice                 :=0;
 tabcpt                 :=tableau();
 WHILE LENGTH(liste_cpt) >0
 LOOP
 indice      :=indice+1;
 posVir      :=instr(liste_cpt,',');
 IF (posVir   >0) THEN
 subs      :=SUBSTR(liste_cpt,0,posVir);
 liste_cpt :=SUBSTR(liste_cpt,posVir+1);
 subs      :=REPLACE(subs,',','');
 tabcpt.extend;
 tabcpt(indice):=subs;
 ELSE
 tabcpt.extend;
 tabcpt(indice):=liste_cpt;
 liste_cpt     :='';
 END IF;
 END LOOP;
 END;
 DECLARE
 CURSOR cur_lib
 IS
 SELECT *
 FROM CAD_THEMES_CPT a
 WHERE code   =ligne_items.theme_pere
 AND ( (type  ='L'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='LC'
 OR ( type    ='L'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='LC'
 AND cpt.ordre =a.ordre
 ) )) ))
 ORDER BY ordre;
 BEGIN
 col:=tableau();
 OPEN cur_lib;
 LOOP
 FETCH cur_lib INTO ligne_lib;
 EXIT
 WHEN cur_lib%NOTFOUND ;
 BEGIN
 -- récupération des pots à utiliser pour chaque compteur
 SELECT *
 INTO ligne_calc
 FROM CAD_THEMES_CPT a
 WHERE code   =ligne_items.code_item
 AND ordre    =ligne_lib.ordre
 AND ( (type  ='V'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='VC'
 OR ( type    ='V'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='VC'
 AND cpt.ordre =a.ordre
 ) )) ));
 requete                               :='';
 reqselect                             :='';
 elt                                   :='';
 IF ligne_lib.CALCUL                    ='R' OR ligne_lib.CALCUL='P' OR ligne_lib.CALCUL='VP' THEN
 deb                                 := DBMS_UTILITY.get_time;
 indice                              :=0;
 tabPotsParCpt                       :=tableau();
 WHILE LENGTH(ligne_calc.LIB_CPT_POT) >0
 LOOP
 indice                   :=indice+1;
 posVir                   :=instr(ligne_calc.LIB_CPT_POT,',');
 IF (posVir                >0) THEN
 subs                   :=SUBSTR(ligne_calc.LIB_CPT_POT,0,posVir);
 ligne_calc.LIB_CPT_POT :=SUBSTR(ligne_calc.LIB_CPT_POT,posVir+1);
 subs                   :=REPLACE(subs,',','');
 tabPotsParCpt.extend;
 tabPotsParCpt(indice) :=subs;
 ELSE
 tabPotsParCpt.extend;
 tabPotsParCpt(indice)  :=ligne_calc.LIB_CPT_POT;
 ligne_calc.LIB_CPT_POT :='';
 END IF;
 END LOOP;
 -- Ecriture des requetes
 nb_clauseselect:=0;
 tmp            :=0;
 FOR i IN 1..indice
 LOOP
 tmpres                        :=0;
 indice2                       :=0;
 tabPots                       :=tableau();
 trouve                        :=0;
 WHILE LENGTH(tabPotsParCpt(i)) >0
 LOOP
 trouve             :=1;
 indice2            :=indice2+1;
 posVir             :=instr(tabPotsParCpt(i),'^');
 IF (posVir          >0) THEN
 subs             :=SUBSTR(tabPotsParCpt(i),0,posVir);
 tabPotsParCpt(i) :=SUBSTR(tabPotsParCpt(i),posVir+1);
 subs             :=REPLACE(subs,'^','');
 tabPots.extend;
 tabPots(indice2) :=subs;
 ELSE
 tabPots.extend;
 tabPots(indice2) :=tabPotsParCpt(i);
 tabPotsParCpt(i) :='';
 END IF;
 END LOOP;
 IF trouve =0 THEN
 CONTINUE;
 END IF;
 IF nb_clauseselect <=1 THEN
 unite            :=cad_unite_cpt(matric, p_DJOUR,tabcpt(i));
 END IF;
 IF ligne_lib.CALCUL   ='R' THEN
 dateinterro        := p_DJOUR;
 elsif ligne_lib.CALCUL='P' THEN
 -- récuperer date fin valid
 dateinterro        :=dvf;
 elsif ligne_lib.CALCUL='VP' THEN
 -- récuperer date fin valid
 dateinterro:=dvf;
 END IF;
 IF ligne_lib.CALCUL='R' OR ligne_lib.CALCUL='P' THEN
 BEGIN
 --select *  INTO ligne_cpt from (select * from CAD_COMPTEUR where code_compteur=tabcpt(i) and matricule =matric and djour <=dateinterro order by djour desc,typemj desc) where rownum=1;
 -- select *   INTO ligne_cpt from CAD_COMPTEUR a where code_compteur=tabcpt(i) and matricule =matric and djour||typemj=( select max(b.djour||b.typemj)   from CAD_COMPTEUR b where b.code_compteur=a.code_compteur and b.matricule =a.matricule and b.djour <=dateinterro );
 SELECT MATRICULE,
 CODE_COMPTEUR,
 DJOUR,
 TYPEMJ,
 DATE_MAJ,
 POT1_VALEURJ,
 POT1_VALEURH,
 POT1_FJ,
 POT1_FH,
 POT2_VALEURJ ,
 POT2_VALEURH ,
 POT2_FJ ,
 POT2_FH ,
 POT3_VALEURJ ,
 POT3_VALEURH ,
 POT3_FJ ,
 POT3_FH ,
 POT4_VALEURJ ,
 POT4_VALEURH ,
 POT4_FJ ,
 POT4_FH ,
 POT5_VALEURJ ,
 POT5_VALEURH ,
 POT5_FJ ,
 POT5_FH ,
 POT6_VALEURJ ,
 POT6_VALEURH ,
 POT6_FJ ,
 POT6_FH ,
 POT7_VALEURJ ,
 POT7_VALEURH ,
 POT7_FJ ,
 POT7_FH ,
 POT8_VALEURJ ,
 POT8_VALEURH ,
 POT8_FJ ,
 POT8_FH ,
 POT9_VALEURJ ,
 POT9_VALEURH ,
 POT9_FJ ,
 POT9_FH ,
 POT10_VALEURJ ,
 POT10_VALEURH ,
 POT10_FJ ,
 POT10_FH ,
 POT11_VALEURJ ,
 POT11_VALEURH ,
 POT11_FJ ,
 POT11_FH ,
 POT12_VALEURJ ,
 POT12_VALEURH ,
 POT12_FJ ,
 POT12_FH ,
 POTV1_VALEURJ ,
 POTV1_VALEURH ,
 POTV2_VALEURJ ,
 POTV2_VALEURH ,
 POTV3_VALEURJ ,
 POTV3_VALEURH ,
 POTV4_VALEURJ ,
 POTV4_VALEURH ,
 POTV5_VALEURJ ,
 POTV5_VALEURH ,
 POTV6_VALEURJ ,
 POTV6_VALEURH
 INTO ligne_cpt
 FROM
 (SELECT a.*,
 rank() over(order by djour DESC,typemj DESC) rn
 FROM CAD_COMPTEUR a
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 )
 WHERE rn=1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 CONTINUE;
 WHEN OTHERS THEN
 raise;
 END;
 elsif ligne_lib.CALCUL='VP' THEN
 BEGIN
 SELECT NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 SUM(NVL(POTV1_VALEURj,0)) AS POTV1_VALEURj,
 SUM(NVL(POTV1_VALEURh,0)) AS POTV1_VALEUh,
 SUM(NVL(POTV2_VALEURj,0)) AS POTV2_VALEURj,
 SUM(NVL(POTV2_VALEURh,0)) AS POTV2_VALEURh,
 SUM(NVL(POTV3_VALEURj,0)) AS POTV3_VALEURj,
 SUM(NVL(POTV3_VALEURh,0)) AS POTV3_VALEURh,
 SUM(NVL(POTV4_VALEURj,0)) AS POTV4_VALEURj,
 SUM(NVL(POTV4_VALEURh,0)) AS POTV4_VALEURh,
 SUM(NVL(POTV5_VALEURj,0)) AS POTV5_VALEURj,
 SUM(NVL(POTV5_VALEURh,0)) AS POTV5_VALEURh,
 SUM(NVL(POTV6_VALEURj,0)) AS POTV6_VALEURj,
 SUM(NVL(POTV6_VALEURh,0)) AS POTV6_VALEURh
 INTO ligne_cpt
 FROM
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 AND djour          > p_DJOUR
 );
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 CONTINUE;
 WHEN OTHERS THEN
 raise;
 END;
 END IF;
 FOR j IN 1..indice2
 LOOP
 tmpres            :=0;
 IF ligne_lib.CALCUL='R' OR ligne_lib.CALCUL='P' THEN
 IF tabpots(j)    ='POT1' THEN
 IF (unite      ='H') THEN
 tmpRes      :=NVL(ligne_cpt.POT1_Fh,NVL(ligne_cpt.POT1_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT1_Fj,NVL(ligne_cpt.POT1_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT2' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT2_Fh,NVL(ligne_cpt.POT2_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT2_Fj,NVL(ligne_cpt.POT2_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT3' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT3_Fh,NVL(ligne_cpt.POT3_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT3_Fj,NVL(ligne_cpt.POT3_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT4' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT4_Fh,NVL(ligne_cpt.POT4_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT4_Fj,NVL(ligne_cpt.POT4_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT5' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT5_Fh,NVL(ligne_cpt.POT5_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT5_Fj,NVL(ligne_cpt.POT5_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT6' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT6_Fh,NVL(ligne_cpt.POT6_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT6_Fj,NVL(ligne_cpt.POT6_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT7' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT7_Fh,NVL(ligne_cpt.POT7_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT7_Fj,NVL(ligne_cpt.POT7_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT8' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT8_Fh,NVL(ligne_cpt.POT8_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT8_Fj,NVL(ligne_cpt.POT8_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT9' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT9_Fh,NVL(ligne_cpt.POT9_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT9_Fj,NVL(ligne_cpt.POT9_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT10' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT10_Fh,NVL(ligne_cpt.POT10_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT10_Fj,NVL(ligne_cpt.POT10_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT11' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT11_Fh,NVL(ligne_cpt.POT11_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT11_Fj,NVL(ligne_cpt.POT11_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT12' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT12_Fh,NVL(ligne_cpt.POT12_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT12_Fj,NVL(ligne_cpt.POT12_VALEURj,0));
 END IF;
 END IF;
 elsif ligne_lib.CALCUL='VP' THEN
 numpot             :=REPLACE(tabpots(j),'POT','');
 SELECT numpot_var
 INTO numpotV
 FROM
 (SELECT
 CASE
 WHEN potv1=numpot
 THEN 1
 WHEN potv2=numpot
 THEN 2
 WHEN potv3=numpot
 THEN 3
 WHEN potv4=numpot
 THEN 4
 WHEN potv5=numpot
 THEN 5
 WHEN potv6=numpot
 THEN 6
 END AS numpot_var
 FROM cad_param_calcul
 WHERE code_compteur=tabcpt(i)
 );
 IF numpotV  =1 THEN
 IF (unite ='H') THEN
 tmpRes :=NVL(ligne_cpt.POTV1_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV1_VALEURj,0);
 END IF;
 elsif numpotV=2 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV2_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV2_VALEURj,0);
 END IF;
 elsif numpotV=3 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV3_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV3_VALEURj,0);
 END IF;
 elsif numpotV=4 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV4_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV4_VALEURj,0);
 END IF;
 elsif numpotV=5 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV5_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV5_VALEURj,0);
 END IF;
 elsif numpotV=6 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV6_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV6_VALEURj,0);
 END IF;
 END IF;
 END IF;
 tmp:=tmp+tmpRes;
 END LOOP;
 END LOOP;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type R,P,VP '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 elsif ligne_lib.CALCUL='U' THEN
 elt                :=unite;
 elsif ligne_lib.CALCUL='DVD' THEN
 elt                :=dvd;
 elsif ligne_lib.CALCUL='DVF' THEN
 elt                :=dvf;
 elsif ligne_lib.CALCUL='DAD' THEN
 elt                :=dad;
 elsif ligne_lib.CALCUL='DAF' THEN
 elt                :=daf;
 elsif ligne_lib.CALCUL='COL' THEN
 deb                := DBMS_UTILITY.get_time;
 FOR l IN reverse 1..col.count
 LOOP
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT, 'C'||l,'to_number('''||NVL(col(l),0)||''')');
 END LOOP;
 EXECUTE immediate ( 'select '||ligne_calc.LIB_CPT_POT||' from dual') INTO tmp;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type COL '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 elsif ligne_lib.CALCUL='C' THEN
 deb                := DBMS_UTILITY.get_time;
 FOR i IN 1..indice
 LOOP
 -- récuperer les valeurs des pots pour chaque compteur
 SELECT *
 INTO ligne_cpt
 FROM
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 ORDER BY djour DESC,
 typemj DESC
 )
 WHERE rownum=1;
 --EXECUTE immediate requete INTO ligne_cpt;
 -- remplacer les pots
 IF unite                  ='H' THEN
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT12',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT12_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT11',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT11_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT10',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT10_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT9',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT9_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT8',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT8_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT7',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT7_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT6',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT6_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT5',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT5_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT4',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT4_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT3',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT3_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT2',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT2_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT1',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT1_VALEURH,0)));
 ELSE
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT12',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT12_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT11',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT11_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT10',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT10_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT9',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT9_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT8',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT8_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT7',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT7_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT6',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT6_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT5',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT5_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT4',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT4_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT3',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT3_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT2',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT2_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT1',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT1_VALEURJ,0)));
 END IF;
 END LOOP;
 EXECUTE immediate ( 'select '||ligne_calc.LIB_CPT_POT||' from dual') INTO tmp;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type C'||total);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 deb                        := DBMS_UTILITY.get_time;
 IF ligne_lib.NON_AFFICHAGE IS NOT NULL AND cad_condition_non_aff( p_DJOUR,ligne_lib.CALCUL,ligne_lib.NON_AFFICHAGE,elt)=1 THEN
 retour.delete(numDonnee);
 EXIT;
 END IF;
 col.extend;
 col(ligne_lib.ordre) :=elt;
 IF (unite             ='H' AND ligne_lib.CALCUL IN ('C','COL','R','P','VP')) THEN
 IF format           ='HHMM' THEN
 -- en HHMM
 elt      :=conversionSecondesHHMM(elt);
 elsif format='HC' THEN
 -- en HHCC
 elt:=conversionSecondesHHCC(elt);
 END IF;
 elsif ligne_lib.CALCUL IN ('C','COL','R','P','VP') AND elt IS NULL THEN
 elt                                                      :='0';
 END IF;
 IF ligne_calc.ordre           =1 THEN
 retour(numDonnee).RESULTAT :=NVL(elt,'');
 ELSE
 retour(numDonnee).RESULTAT :=NVL(retour(numDonnee).RESULTAT,'')||'^'||NVL(elt,'');
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Ajout donnée'||total);
 --FIXME utiliser la procédure trace_dbms_output()
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF ligne_calc.ordre           =1 THEN
 retour(numDonnee).RESULTAT :='';
 ELSE
 retour(numDonnee).RESULTAT :=NVL(retour(numDonnee).RESULTAT,'')||'^'||'';
 END IF;
 col.extend;
 END;
 END LOOP;
 CLOSE cur_lib;
 END;
 END LOOP;
 CLOSE cur_items;
 FOR i in retour.first .. retour.last LOOP
   IF retour(i).RESULTAT LIKE '%^^%' OR retour(i).RESULTAT LIKE '^%' OR retour(i).RESULTAT LIKE '%^' THEN
     retour.delete(i);
   END IF;
 END LOOP;
 RETURN retour;
 END CAD_INTERRO_THEME;
 FUNCTION CAD_INTERRO_THEME_COLL(
 idPop      IN NUMBER ,
 CODE_THEME IN VARCHAR2 ,
 DJOUR      IN VARCHAR2,
 collectif  IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME
 AS
 CURSOR cur_pop
 IS
 SELECT * FROM REQ_POPULATION WHERE num=idPop;
 ligne_pop REQ_POPULATION%ROWTYPE;
 retour CAD_RESULTAT_THEME:=CAD_RESULTAT_THEME();
 tmp CAD_RESULTAT_THEME   :=CAD_RESULTAT_THEME();
 i binary_integer ;
 dernier binary_integer ;
 BEGIN
 OPEN cur_pop;
 LOOP
 FETCH cur_pop INTO ligne_pop;
 EXIT
 WHEN cur_pop%NOTFOUND ;
 tmp     :=CAD_INTERRO_THEME(ligne_pop.matric,code_theme,djour,'O') ;
 i       := tmp.first ;
 WHILE i IS NOT NULL
 LOOP
 dernier:=NVL(retour.last,0);
 retour.extend;
 retour(dernier+1):=tmp(i);
 i                := tmp.next(i) ;
 END LOOP;
 END LOOP;
 CLOSE cur_pop;
 RETURN retour;
 END CAD_INTERRO_THEME_COLL;
 FUNCTION CAD_SOLDE(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2 )
 RETURN NUMBER
 AS
 CURSOR cur_cpt
 IS
 SELECT code_compteur,
 pot_solde,
 pot_variation,
 min_soldej,
 min_soldeh,
 ordre
 FROM CAD_PARAM_LIEN_RUB_CPT
 WHERE RUB_VAL_JOUR =rub
 ORDER BY ordre;
 ligne_cpt cur_cpt%ROWTYPE;
 retour NUMBER:=0;
 req    VARCHAR(1000);
 unite  VARCHAR(1);
 valcpt NUMBER;
 BEGIN
 unite:= cad_unite(matric,datejour,rub);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO ligne_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 req    :='select * from (select ';
 IF unite='H' THEN
 req  :=req||'nvl(POT'||ligne_cpt.pot_solde||'_FH,nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0))';
 ELSE
 req:=req||'nvl(POT'||ligne_cpt.pot_solde||'_FJ,nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0))';
 END IF;
 req:=req||' from CAD_COMPTEUR where code_compteur=:cpt and matricule =:matric and djour <=:datejour order by djour desc,typemj desc) where rownum=1';
 BEGIN
 EXECUTE IMMEDIATE req INTO valcpt USING ligne_cpt.code_compteur,
 matric,
 datejour ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 valcpt:=0;
 END;
 retour:=retour+valcpt;
 END LOOP;
 CLOSE cur_cpt;
 RETURN retour;
 END CAD_SOLDE;
 PROCEDURE CAD_BASCULE_UNIQUE(
 IDMATRIC    IN NUMBER ,
 BASCULE     IN VARCHAR2 ,
 DATEBAS     IN VARCHAR2,
 SUPPRESSION IN VARCHAR2)
 AS
 pos  NUMBER:=0;
 subs VARCHAR2(4000);
 req CLOB;
 requpdate VARCHAR2(4000);
 djourReq  VARCHAR2(1000);
 dteRecalc VARCHAR2(8);
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 T_Id Tab_Rowid;
 T_IdBasc Tab_Rowid;
 code_basc_prec VARCHAR(20);
 TYPE T_param
 IS
 RECORD
 (
 cpt_dest VARCHAR(20),
 requete CLOB );
 param T_param;
 BEGIN
 SELECT compteur_dest,
 requetes
 INTO param
 FROM CAD_PARAM_REGLES_MAJ
 WHERE code_bascule=bascule;
 DELETE
 FROM CAD_COMPTEUR
 WHERE TYPEMJ     ='I'
 AND CODE_COMPTEUR=param.cpt_dest
 AND DJOUR        =DATEBAS
 AND MATRICULE   IN
 (SELECT matricule FROM CAD_CALCUL_EN_COURS_MATRIC WHERE id=idmatric
 );
 IF SUPPRESSION IS NULL THEN
 INSERT
 INTO CAD_COMPTEUR
 (
 matricule,
 code_compteur,
 djour,
 typemj,
 date_maj
 )
 (SELECT matricule,
 param.cpt_dest,
 datebas,
 'I',
 sysdate
 FROM CAD_CALCUL_EN_COURS_MATRIC
 WHERE id=idmatric
 );
 req :=REPLACE(param.requete,'VALEURJ=','FJ=');
 req :=REPLACE(req,'VALEURH=','FH=');
 DECLARE
 CURSOR cur_cpt
 IS
 SELECT cad_compteur.*,
 cad_compteur.rowid
 FROM cad_compteur, CAD_CALCUL_EN_COURS_MATRIC
 WHERE TYPEMJ     ='I'
 AND CODE_COMPTEUR=param.cpt_dest
 AND DJOUR        =DATEBAS
 AND cad_compteur.MATRICULE =CAD_CALCUL_EN_COURS_MATRIC.matricule
 and   CAD_CALCUL_EN_COURS_MATRIC.id=idmatric;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 -- select max(d.djour)  into djourReq from CAD_COMPTEUR d where d.MATRICULE=lig_cpt.MATRICULE and d.CODE_COMPTEUR=lignebascule.COMPTEUR_ORI AND DJOUR<DATEBAS;
 IF t_id IS NULL THEN
 t_id  :=Tab_Rowid(lig_cpt.rowid);
 ELSE
 t_id.extend();
 t_id(t_id.last):=lig_cpt.rowid;
 END IF;
 END LOOP;
 CLOSE cur_cpt;
 END;
 djourReq           :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR<'''||datebas||'''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule) ';
 IF t_id            IS NOT NULL THEN
 WHILE LENGTH(req) >0
 LOOP
 IF instr(req,';')>0 THEN
 subs          :=SUBSTR(req,0,instr(req,';'));
 ELSE
 subs:=req;
 END IF;
 req      :=REPLACE(req,subs,'');
 req      :=REPLACE(req,subs,'');
 subs     :=REPLACE(subs,'_DJOUR_',djourReq);
 subs     :=REPLACE(subs,';','');
 requpdate:='update CAD_COMPTEUR ca set '||subs||' where rowid=:1' ;
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i);
 END LOOP;
 END IF;
 END IF;
 SELECT MIN(dte)
 INTO dteRecalc
 FROM
 (SELECT MAX(d.djour) AS dte,
 d.matricule
 FROM CAD_COMPTEUR d,cad_calcul_en_cours_matric
 WHERE d.MATRICULE = cad_calcul_en_cours_matric.matricule and cad_calcul_en_cours_matric.id=IDMATRIC
 AND d.CODE_COMPTEUR=param.cpt_dest
 AND d.DJOUR
 ||d.typemj<DATEBAS
 ||'I'
 GROUP BY d.matricule
 );
 CAD_MAJ_VALEUR_LISTE_RUBJOUR( IDMATRIC , dteRecalc , NULL , 'true' , 'true' );
 /*EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  :=SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_BASCULE_UNIQUE', IDMATRIC||','|| BASCULE ||','|| DATEBAS  ,err_code||'-'||err_msg);
 raise;*/
 END CAD_BASCULE_UNIQUE;
 END CAD;
##
CALC_HP
=SQL=
create or replace PACKAGE CALC_HP IS

p_date_deb DATE;
p_date_fin DATE;
horaireRemu VARCHAR(255);--horaire remu.	
horairePres VARCHAR(255); -- tmp horaire pres. 
dateDebTranchSitu DATE;   --tmp loop cycle dans situation
dateFinTranchSitu DATE;   --tmp loop cycle dans situation
dateEnCours DATE;         --date en cours pour calcul LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
numJourCanevas NUMBER(5,0);--tmp for LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
nbreHeures NUMBER(5,2);    --tmp for LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
jourSemaine VARCHAR2(15);


TYPE map_horaire_par_jour IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
arrHoraireParJour map_horaire_par_jour;

/*****************/
TYPE TgeRefHprType IS RECORD (
    NUMPAC	VARCHAR2(6 BYTE),
    CODE_HOR_PRES	NUMBER(3,0),
    DATE_DEBUT	DATE,
    DATE_FIN	DATE,
    HRS_LUNDI	NUMBER(4,2),
    HRS_MARDI	NUMBER(4,2),
    HRS_MERCREDI	NUMBER(4,2),
    HRS_JEUDI	NUMBER(4,2),
    HRS_VENDREDI	NUMBER(4,2),
    HRS_SAMEDI	NUMBER(4,2),
    HRS_DIMANCHE	NUMBER(4,2)
);
--TYPE map_hpr IS TABLE OF TgeRefHprType INDEX BY VARCHAR2(30);
cur_TgeRefhpr TgeRefHprType;
--l_map_hpr map_hpr;
TYPE type_List_arr_2 IS VARRAY(99) OF TgeRefHprType;
lst_2 type_List_arr_2;
arrCycleHprSituation type_List_arr_2;


TYPE TgeRefDcyCy1Cy2Type IS RECORD (
	NUMPAC						VARCHAR2(6 BYTE),
	CODE_CLASSE_HORAIRE_OTT 	NUMBER(3,0),
	DATE_DEBUT 					DATE,
	DATE_FIN 					DATE,
	CODE_CYCLE_OTT 				NUMBER(3,0),
	CODE_CANEVAS_CYCLE_OTT 		NUMBER(3,0),
	NOMBRE_JOURS_CYCLE			NUMBER(3,0),
	NUM_JOUR_ENTREE_CANEVAS		NUMBER(3,0),
	NOMBRE_HEURE_1 				NUMBER(5,2),
	NOMBRE_HEURE_2				NUMBER(5,2),
	NOMBRE_HEURE_3				NUMBER(5,2),
	NOMBRE_HEURE_4				NUMBER(5,2),
	NOMBRE_HEURE_5				NUMBER(5,2),
	NOMBRE_HEURE_6				NUMBER(5,2),
	NOMBRE_HEURE_7				NUMBER(5,2),
	NOMBRE_HEURE_8				NUMBER(5,2),
	NOMBRE_HEURE_9				NUMBER(5,2),
	NOMBRE_HEURE_10				NUMBER(5,2),
	NOMBRE_HEURE_11				NUMBER(5,2),
	NOMBRE_HEURE_12				NUMBER(5,2),
	NOMBRE_HEURE_13				NUMBER(5,2),
	NOMBRE_HEURE_14				NUMBER(5,2),
	NOMBRE_HEURE_15				NUMBER(5,2),
	NOMBRE_HEURE_16				NUMBER(5,2), 
	NOMBRE_HEURE_17				NUMBER(5,2),
	NOMBRE_HEURE_18				NUMBER(5,2),
	NOMBRE_HEURE_19				NUMBER(5,2),
	NOMBRE_HEURE_20				NUMBER(5,2),
	NOMBRE_HEURE_21				NUMBER(5,2)
	) ;
  /* FOR HASHMAP AND RECORD */
--TYPE map_varchar IS TABLE OF TgeRefDcyCy1Cy2Type INDEX BY VARCHAR2(30);
cur_TgeRefDcy TgeRefDcyCy1Cy2Type;
--l_map map_varchar;
TYPE type_List_arr IS VARRAY(99) OF TgeRefDcyCy1Cy2Type;
lst_1 type_List_arr;
arrCycleSituation type_List_arr;
  /***************/
  
  TYPE TGE_REF_MAPDOType IS RECORD (
    NUMPAC	VARCHAR2(6),
    ELEMENT	VARCHAR2(4),
    OCCURENCE	VARCHAR2(2),
    DONNEEGXP	VARCHAR2(50),
    TABLEGXP	VARCHAR2(24),
    DONNFILTRE	VARCHAR2(50),
    OPERFILTRE	VARCHAR2(2),
    VALFILTRE	VARCHAR2(15),
    TRTPARTICULIER	VARCHAR2(4000),
    ENVOI_SYSTEMATIQUE	VARCHAR2(1),
    FORCABLE_ECRAN_GENERE	VARCHAR2(1)
	) ;
cur_TgeRefmapdo TGE_REF_MAPDOType;
TYPE type_List_arr_3 IS VARRAY(99) OF TGE_REF_MAPDOType;
lst_3 type_List_arr_3;


--TYPE dachtype IS RECORD();
TYPE DACH_Type IS RECORD (PAIEZAD	VARCHAR2(8 ),MATRIC	VARCHAR2(32 ),TYPE_WRITER	VARCHAR2(1 ),ZAA91	VARCHAR2(5 ),ZAA92	VARCHAR2(1 ),ZAA93	VARCHAR2(2 ),CODE_GTA	VARCHAR2(5 ),ZA914	VARCHAR2(5 ),CMPPCS	VARCHAR2(6 ),ZAB12	VARCHAR2(1 ),ZAB13	VARCHAR2(1 ),ZAB14	VARCHAR2(1 ),ZMODCNT	VARCHAR2(2 ),ZAB15	VARCHAR2(1 ),ZAB16	VARCHAR2(1 ),ZAB17	VARCHAR2(1 ),ZAB18	VARCHAR2(1 ),ZA719	DATE,ZAB05	VARCHAR2(2 ),ZAB06	DATE,ZAB07	VARCHAR2(2 ),ZAB08	VARCHAR2(1 ),ZAB09	VARCHAR2(1 ),ZAB10	VARCHAR2(1 ),ZAB11	VARCHAR2(1 ),DATE_SORTIE_SIT_BO	DATE,DATE_CREATION	DATE,DATE_DERNIERE_MODIF	DATE,DATE_FIN_BO	DATE,ZX528	VARCHAR2(1 ),ZX734	VARCHAR2(1 ),DSA302	DATE,DSCDDCDI	DATE,COLPRES	VARCHAR2(1 ),HHDCN	DATE,REPBNDF	VARCHAR2(1 ),DSRCDDCDI	DATE,TCDDCDI	VARCHAR2(1 ),ZA996	VARCHAR2(1 ),DSA751	DATE,DSAGM	DATE,DSAGP	DATE,DSANCR	DATE,DSATO	DATE,DSDAP	DATE,DSDCP	DATE,DSDECH	DATE,DSDJTP	DATE,DSDNP	DATE,DSDPE	DATE,DSDPEN	DATE,DSDPN	DATE,DSDPP	DATE,DSEPL	DATE,DSES1	DATE,DSES2	DATE,DSFCNI	DATE,DSFCNP	DATE,DSFCP	DATE,DSFICH	DATE,DSFNP	DATE,DSFPE	DATE,DSFPN	DATE,DSFPP	DATE,DSFSUS	DATE,DSNLI	DATE,DSRNVL	DATE,DSRPCH	DATE,DSSAD	DATE,DSSCG	DATE,DSSTC	DATE,EMPLOI	VARCHAR2(6 ),ESSAI	VARCHAR2(1 ),FILIR	VARCHAR2(2 ),IFCDD	VARCHAR2(1 ),JJCNT	NUMBER(2,0),JJESS1	NUMBER(2,0),JJESS2	NUMBER(2,0),JJESS4	NUMBER(2,0),MAJHA	VARCHAR2(1 ),METIER	VARCHAR2(4 ),MMCNT	NUMBER(2,0),MMESS1	NUMBER(2,0),MMESS2	NUMBER(2,0),MMESS4	NUMBER(2,0),MNTPEN	NUMBER(7,2),MOTAUG	VARCHAR2(2 ),MOTAUI	VARCHAR2(2 ),MTAUG	NUMBER(9,2),MTAUI	NUMBER(9,2),NBCSP	NUMBER(5,2),NICSP	VARCHAR2(1 ),NIVECH	VARCHAR2(4 ),NUMAPP	VARCHAR2(30 ),NUMDUE	VARCHAR2(10 ),NUMPCS	VARCHAR2(4 ),OTT	VARCHAR2(3 ),PEREMP	VARCHAR2(32 ),PPSAL	VARCHAR2(2 ),PRAUG	NUMBER(6,2),PRAUI	NUMBER(6,2),PREAVI	VARCHAR2(1 ),PREFF	VARCHAR2(1 ),PRPAY	VARCHAR2(1 ),PRVNP	VARCHAR2(1 ),QUALPE	VARCHAR2(50 ),RECAPE	VARCHAR2(1 ),REFCG	VARCHAR2(10 ),RETRAI	VARCHAR2(1 ),RNVESS	VARCHAR2(1 ),RVCNT	VARCHAR2(1 ),SAFBA	NUMBER(9,2),SENET	VARCHAR2(2 ),SITADM	VARCHAR2(2 ),SSFIL	VARCHAR2(2 ),TATR	VARCHAR2(1 ),TPNAB	VARCHAR2(1 ),TXACT	NUMBER(7,4),TXAID	NUMBER(7,4),TXEMP	NUMBER(7,4),TYPAGM	VARCHAR2(1 ),TYSUB	VARCHAR2(1 ),VALTF	VARCHAR2(1 ),VALTR	NUMBER(6,2),ZA364	VARCHAR2(5 ),ZA365	VARCHAR2(5 ),ZA368	VARCHAR2(1 ),ZA380	VARCHAR2(2 ),ZA406	VARCHAR2(2 ),ZA523	VARCHAR2(2 ),ZA554	VARCHAR2(3 ),ZA557	VARCHAR2(8 ),ZA626	VARCHAR2(1 ),ZA640	VARCHAR2(1 ),ZA650	VARCHAR2(2 ),ZA656	VARCHAR2(2 ),ZA700	VARCHAR2(2 ),ZA701	VARCHAR2(2 ),ZA750	VARCHAR2(1 ),ZA754	VARCHAR2(1 ),ZA755	VARCHAR2(1 ),ZA819	NUMBER(3,0),ZA820	NUMBER(3,0),ZA962	VARCHAR2(2 ),ZAA84	NUMBER(5,2),ZAA85	VARCHAR2(1 ),ZB071	VARCHAR2(3 ),ZB133	VARCHAR2(3 ),ZB193	VARCHAR2(3 ),ZB224	VARCHAR2(3 ),ZB330	VARCHAR2(2 ),ZB368	NUMBER(9,2),ZB369	NUMBER(9,2),ZB647	VARCHAR2(1 ),ZB648	VARCHAR2(1 ),ZB883	NUMBER(5,3),ZP895	NUMBER(9,2),ZQ183	VARCHAR2(1 ),ZQ188	VARCHAR2(1 ),ZQ272	VARCHAR2(32 ),ZQ764	VARCHAR2(1 ),ZREACT	DATE,ZT061	VARCHAR2(3 ),NUMPAC	VARCHAR2(6 ),PACMAT	VARCHAR2(8 ),NUMCNT	NUMBER(9,0),DATE_EFF	DATE,DATE_FIN	DATE,AACNT	NUMBER(2,0),AAESS4	NUMBER(2,0),ACDADM	VARCHAR2(1 ),ACDALC	VARCHAR2(1 ),ACDFNE	VARCHAR2(1 ),AFFS02	VARCHAR2(25 ),AIPAT	VARCHAR2(1 ),ALSMO	VARCHAR2(1 ),APARCE	VARCHAR2(2 ),AVNAA	NUMBER(7,2),AVNAL	NUMBER(7,2),AVNAN	NUMBER(7,2),AVNAV	NUMBER(7,2),AVNTIC	NUMBER(7,2),CADRE	VARCHAR2(1 ),CAMSA	VARCHAR2(2 ),CASAS	VARCHAR2(1 ),CATAFP	VARCHAR2(2 ),CBUD	VARCHAR2(10 ),CE	VARCHAR2(6 ),CFE	VARCHAR2(1 ),CFEAT	VARCHAR2(1 ),CFECV	VARCHAR2(1 ),CFEDC	VARCHAR2(1 ),CFEEM	VARCHAR2(1 ),CFEES	VARCHAR2(1 ),CFEMA	VARCHAR2(1 ),CFESF	VARCHAR2(1 ),CFEVE	VARCHAR2(1 ),CFEVI	VARCHAR2(1 ),CHTYPC	VARCHAR2(2 ),CLNC	VARCHAR2(2 ),CODCPN	VARCHAR2(3 ),CODETB	VARCHAR2(5 ),CODSTE	VARCHAR2(6 ),COEFF	NUMBER(5,0),COFRON	VARCHAR2(1 ),COMCNT	VARCHAR2(50 ),COMURB	VARCHAR2(4 ),CSCOMP	VARCHAR2(2 ),CSRTT	NUMBER(9,2),CSTAPA	VARCHAR2(2 ),CVCOLL	VARCHAR2(4 ),DICDD	NUMBER(9,2),DRPAI2	VARCHAR2(1 ),DSA277	DATE,DSA301	DATE,TUTEUR	VARCHAR2(50 ),NUMURS_PRT	VARCHAR2(18 ),SIREN_PRT	VARCHAR2(9 ),STATUT_PRT	VARCHAR2(3 ),CODAGE_INT	VARCHAR2(6 ),CODSOC_INT	VARCHAR2(6 ),IDPACMAT	VARCHAR2(14 ),ACT_ORG	VARCHAR2(6 ),BU_ORG	VARCHAR2(6 ),DSAUI	DATE,DERUSA	VARCHAR2(1 ),DSFINC	DATE,MAAFFP	VARCHAR2(2 ),
DEBUT_PER_GENERATION_HP DATE, FIN_PER_GENERATION_HP DATE);
cur_dachtype DACH_Type;
TYPE type_List_arr_4 IS VARRAY(200) OF DACH_Type;
lst_4 type_List_arr_4;
  
sql_1 CLOB;
sql_2 CLOB;
sql_3 CLOB;
sql_4 CLOB;

 
 
 
 cpt number:=1;
 
 TYPE SituationType IS RECORD (
    numpac	VARCHAR2(30),
    pacmat	VARCHAR2(30),
    paieZad	VARCHAR2(30),
    numcnt	NUMBER(13,0),
    code_classe_horaire_ott	NUMBER(13,0),
    code_cycle_ott	NUMBER(13,0),
    dateDeb	DATE,
    dateFin	DATE,
    isGtaT1	boolean,
    HRS_SAMEDI	NUMBER(4,2),
    HRS_DIMANCHE	NUMBER(4,2)
);
--l_map_hpr map_hpr;
TYPE SituationType_arr_2 IS VARRAY(99) OF SituationType;
lst_Situation SituationType_arr_2;
 
 /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION calculateNomJourCanevas( ligneTgeRefHprType IN TgeRefHprType, dateEnCour IN DATE  ) RETURN VARCHAR;
  
  /**
  * retourne le numero de jour canevas 
  */
 FUNCTION calculateNumJourCanevas( ligneDcyCy1Cy2 IN TgeRefDcyCy1Cy2Type, local_dateEnCours IN DATE  ) RETURN NUMBER;
    
  /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION getValOfCycle( val IN VARCHAR2, obj IN TgeRefDcyCy1Cy2Type) RETURN NUMBER;
  
   FUNCTION getHprHoursNbre( val IN NUMBER, obj IN TgeRefHprType  )  RETURN NUMBER;
  
  
  /*
  * get value from DACH object selon clé
  */
 FUNCTION getValOfDACH( val IN VARCHAR2, obj IN DACH_Type  )  RETURN VARCHAR2;
  
  /*
  *   insertion d'un incident paie hors absence (a la fin de du traitement)
  */
PROCEDURE insertIncidentPaieHorsAbs( nbrHeur IN NUMBER,dateActu IN DATE, p_unIncident IN SituationType,  p_login IN VARCHAR2);
  
PROCEDURE principal( p_numpac IN VARCHAR2 
, old_za819 IN VARCHAR2 
, new_za819 IN VARCHAR2 
, old_za820 IN VARCHAR2 
, new_za820 IN VARCHAR2 
, p_matric IN VARCHAR2
, p_PAIEZAD IN VARCHAR2
, p_numcnt IN NUMBER
,  p_date_deb_char IN VARCHAR2 -- date debut projection
--,  p_date_fin2 IN DATE  -- date fin projection => à eliminer
, p_date_fin_BO IN VARCHAR2
,  p_login IN VARCHAR2);
 
 
END CALC_HP;

##
CALC_HP
=SQL=
create or replace PACKAGE BODY CALC_HP AS

 /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION calculateNomJourCanevas( ligneTgeRefHprType IN TgeRefHprType, dateEnCour IN DATE  )
  RETURN VARCHAR
  IS
  numJr NUMBER := 0;
  BEGIN
  select to_char(dateEnCour,'D') INTO numJr from dual;
  CASE numJr
    WHEN 1 THEN  RETURN 'Lundi';
    WHEN 2 THEN  RETURN 'Mardi';
    WHEN 3 THEN  RETURN 'Mercredi';
    WHEN 4 THEN  RETURN 'Jeudi';
    WHEN 5 THEN  RETURN 'Vendredi';
    WHEN 6 THEN  RETURN 'Samedi';
    WHEN 7 THEN  RETURN 'Dimanche';
    ELSE RETURN 'Erreur numéro jour';
  END CASE;
  
  
  END calculateNomJourCanevas;
  
  /**
  * retourne le numero de jour canevas 
  */
 FUNCTION calculateNumJourCanevas( ligneDcyCy1Cy2 IN TgeRefDcyCy1Cy2Type, local_dateEnCours IN DATE  )
  RETURN NUMBER
  IS
  local_numJourCanevas NUMBER;
  res1 NUMBER;
  res2 NUMBER;
  
  tmp NUMBER;
  tmp2 NUMBER;
  BEGIN
    IF((ligneDcyCy1Cy2.Date_debut-local_dateEnCours+ligneDcyCy1Cy2.Num_jour_entree_canevas)< ligneDcyCy1Cy2.Nombre_jours_cycle) THEN
      res1:=(ligneDcyCy1Cy2.date_debut - local_dateEnCours) / ligneDcyCy1Cy2.Nombre_jours_cycle;
      res2:=ABS((ligneDcyCy1Cy2.date_debut - local_dateEnCours)) + 1 - (TRUNC(ABS(res1)) * ligneDcyCy1Cy2.Nombre_jours_cycle); 
      
      tmp2:=TRUNC(ABS(res1));
      
     tmp:= ABS((ligneDcyCy1Cy2.date_debut - local_dateEnCours));
      
      
      IF( (res2-1) > ligneDcyCy1Cy2.Nombre_jours_cycle - ligneDcyCy1Cy2.Num_jour_entree_canevas ) THEN
        local_numJourCanevas := res2- (ligneDcyCy1Cy2.Nombre_jours_cycle - ligneDcyCy1Cy2.Num_jour_entree_canevas);
       ELSE
        local_numJourCanevas := res2 + ligneDcyCy1Cy2.Num_jour_entree_canevas-1;
      END IF;
    ELSE
        local_numJourCanevas :=ligneDcyCy1Cy2.Num_jour_entree_canevas + ABS(ligneDcyCy1Cy2.date_debut - local_dateEnCours); --
    END IF;
    
    RETURN local_numJourCanevas;
  END calculateNumJourCanevas;
    
  /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION getValOfCycle( val IN VARCHAR2, obj IN TgeRefDcyCy1Cy2Type  )
  RETURN NUMBER
  IS
  BEGIN
      IF val='NOMBRE_HEURE_1' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_1); END IF;
      IF val='NOMBRE_HEURE_2' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_2); END IF;
      IF val='NOMBRE_HEURE_3' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_3); END IF;
      IF val='NOMBRE_HEURE_4' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_4); END IF;
      IF val='NOMBRE_HEURE_5' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_5); END IF;
      IF val='NOMBRE_HEURE_6' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_6); END IF;
      IF val='NOMBRE_HEURE_7' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_7); END IF;
      IF val='NOMBRE_HEURE_8' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_8); END IF;
      IF val='NOMBRE_HEURE_9' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_9); END IF;
      IF val='NOMBRE_HEURE_10' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_10); END IF;
      IF val='NOMBRE_HEURE_11' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_11); END IF;
      IF val='NOMBRE_HEURE_12' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_12); END IF;
      IF val='NOMBRE_HEURE_13' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_13); END IF;
      IF val='NOMBRE_HEURE_14' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_14); END IF;
      IF val='NOMBRE_HEURE_15' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_15); END IF;
      IF val='NOMBRE_HEURE_16' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_16); END IF;
      IF val='NOMBRE_HEURE_17' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_17); END IF;
      IF val='NOMBRE_HEURE_18' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_18); END IF;
      IF val='NOMBRE_HEURE_19' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_19); END IF;
      IF val='NOMBRE_HEURE_20' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_20); END IF;
      IF val='NOMBRE_HEURE_21' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_21); END IF;
      RETURN NULL;
  END getValOfCycle;
  
   FUNCTION getHprHoursNbre( val IN NUMBER, obj IN TgeRefHprType  )
  RETURN NUMBER
  IS
  BEGIN
      IF val='Lundi' THEN RETURN TO_NUMBER(obj.HRS_LUNDI); END IF;
      IF val='Mardi' THEN RETURN TO_NUMBER(obj.HRS_MARDI); END IF;
      IF val='Mercredi' THEN RETURN TO_NUMBER(obj.HRS_MERCREDI); END IF;
      IF val='Jeudi' THEN RETURN TO_NUMBER(obj.HRS_JEUDI); END IF;
      IF val='Vendredi' THEN RETURN TO_NUMBER(obj.HRS_VENDREDI); END IF;
      IF val='Samedi' THEN RETURN TO_NUMBER(obj.HRS_SAMEDI); END IF;
      IF val='Dimanche' THEN RETURN TO_NUMBER(obj.HRS_DIMANCHE); END IF;
      RETURN NULL;
  END getHprHoursNbre;
  
  
  /*
  * get value from DACH object selon clé
  */
 FUNCTION getValOfDACH( val IN VARCHAR2, obj IN DACH_Type  )
  RETURN VARCHAR2
  IS
  BEGIN
    IF val='ZA996' THEN RETURN TO_CHAR(obj.ZA996); END IF;
    IF val='ZA819' THEN RETURN TO_CHAR(obj.ZA819); END IF;
    IF val='ZA820' THEN RETURN TO_CHAR(obj.ZA820); END IF;
    return '';
  END getValOfDACH;
  
  /*
  *   insertion d'un incident paie hors absence (a la fin de du traitement)
  */
PROCEDURE insertIncidentPaieHorsAbs( nbrHeur IN NUMBER,dateActu IN DATE, p_unIncident IN SituationType, p_login IN VARCHAR2 )
  IS
  seq NUMBER:='';
  BEGIN
  
  select SEQ_TGE_INCIDENTS_PAIE.NEXTVAL into seq from dual;
  
  INSERT INTO TGE_INCIDENTS_PAIE
	 (ID, NUMPAC, PAIEZAD, PERIODE, TYPE_TRAITEMENT, DATE_EFFET, TYPE_IP, CODE_IP
			, CODE_IMPUTATION, HEURES, ORIGINE, LOGIN_CREATE, DATE_CREATE, ROLE_CREATE, ORIGINE_CREATE
			, LOGIN_MAJ, DATE_MAJ, ROLE_MAJ, ORIGINE_MAJ, CLE_IMPORT, CLE_ABSENCE, IDPACMAT, ENVOYE, JOUR_OUVRABLE
			,JOUR_OUVRE , JOUR_OEUVRE, JOUR_CALENDAIRE, JOUR_HEURES )
			 values (
			  seq --ID
			  , p_unIncident.numPac --NUMPAC
			  , p_unIncident.paieZad --PAIEZAD
			  , TO_DATE((select periodeEnCours from TGE_REF_PAC where numpac=p_unIncident.numPac) , 'YYYYMM') --PERIODE
			  , (select CODETYPTRT  from (select CODETYPTRT from TGE_REF_TYPETRT where (NUMPAC=p_unIncident.numPac OR NUMPAC='*') and CODETYPTRT='TT' order by NUMPAC desc) where rownum = 1 ) --TYPE_TRAITEMENT
			  ,  dateActu --DATE_EFFET
			  , 'T' --TYPE_IP
			  , 'HP' --CODE_IP
			  , '' -- p_unIncident.code_imputation;
			  , nbrHeur --HEURES

			  , 'T' --ORIGINE
			  , p_login --LOGIN_CREATE
			  , sysdate --DATE_CREATE
			  , 'ADM' -- info non trouver :'( !!ROLE_CREATE DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , 'TRG_DIC_ADM_CONTRAT_HISTO' --ORIGINE_CREATE DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , p_login --LOGIN_MAJ
			  , sysdate --Date MAJ
			  , 'ADM' -- ROLE_MAJ
			  , 'TRG_DIC_ADM_CONTRAT_HISTO' --ORIGINE_MAJ DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , null --CLE_IMPORT

				,  null --CLE_ABSENCE
			  ,  p_unIncident.numpac||p_unIncident.pacmat --IDPACMAT
			  ,  '' --ENVOYE
			
			  ,  null -- p_unIncident.jour_ouvrable
			  ,  null -- p_unIncident.jour_ouvre
			  ,  null --p_unIncident.jour_oeuvre
			  ,  null --p_unIncident.jour_calendaire
			  ,  null --p_unIncident.jour_heures
			  );
  END;
  
  
  
  PROCEDURE principal( p_numpac IN VARCHAR2 
, old_za819 IN VARCHAR2 
, new_za819 IN VARCHAR2 
, old_za820 IN VARCHAR2 
, new_za820 IN VARCHAR2 
, p_matric IN VARCHAR2
, p_PAIEZAD IN VARCHAR2
, p_numcnt IN NUMBER
,  p_date_deb_char IN VARCHAR2 -- date debut projection
--,  p_date_fin2 IN DATE  -- date fin projection => à eliminer
  , p_date_fin_BO IN VARCHAR2
,  p_login IN VARCHAR2)
  IS
    cur_1 SYS_REFCURSOR; 
    cur_2 SYS_REFCURSOR; 
    cur_3 SYS_REFCURSOR; 
    cur_4 SYS_REFCURSOR; 
    debut_calcul_hp_DB DATE;
    v_period_en_cour varchar2(10);
    v_deb_retro varchar2(10);
    v_fin_per_gen_hp varchar2(10);
    m_embauche varchar2(6);
 	d_limiteMaj DATE;
    v_count number;
    
    
  BEGIN
  
  FSED.FSED_AVANCEMENT_PLSQL(147,'DEBUT CALC HP via TRIGGER matric:'||p_matric,'');


   IF((NVL(new_za820,'****') <> NVL(old_za820,'****')) OR (NVL(new_za819,'******') <>  NVL(old_za819,'******'))) THEN 
   
      p_date_deb := TO_DATE(p_date_deb_char,'DD/MM/YYYY');
      p_date_fin := TO_DATE(p_date_fin_BO,'DD/MM/YYYY');
	  select count(*) into v_count from tge_periode_recueil_paiezad where NUMPAC=p_numpac and PAIEZAD=p_paiezad ;
  	  if  v_count<1 THEN 
        FSED.FSED_AVANCEMENT_PLSQL(p_matric,'FIN CALC HP via TRIGGER! LA TABLE TGE_PERIODE_RECUEIL_PAIEZAD N''EST PAS ALIMENTE POUR LE MATRICULE :'||p_matric,'');
 	    RETURN;
 	  END IF ; 

    /**** IS RETRO ? IS FUTUR *****/

    select pac.PERIODEENCOURS,pac.DEB_RETRO,tprp.fin_per_generation_hp  INTO v_period_en_cour,v_deb_retro,v_fin_per_gen_hp
      from tge_ref_pac pac
      inner join tge_periode_recueil_paiezad tprp 
       ON pac.PERIODEENCOURS=tprp.MOIS_PAIE and tprp.NUMPAC=pac.NUMPAC
      where pac.NUMPAC=p_numpac and tprp.PAIEZAD=p_paiezad ;

--IF DACH FUTUR ALORS pas calcul HP
    IF p_date_deb>v_fin_per_gen_hp THEN 
     FSED.FSED_AVANCEMENT_PLSQL(p_matric,'FIN CALC HP via TRIGGER! Date deb future matric:'||p_matric,'');
      RETURN; 
    END IF;

/**** IS retro ***/
IF v_deb_retro IS NOT NULL AND v_period_en_cour > v_deb_retro THEN

BEGIN
	SELECT MIN(MOIS_PAIE) INTO m_embauche FROM TGE_PERIODE_RECUEIL_PAIEZAD WHERE NUMPAC =p_numpac AND paiezad  =p_paiezad ;
	 
	 SELECT DEBUT_PERIODE_RECUEIL INTO d_limiteMaj FROM TGE_PERIODE_RECUEIL_PAIEZAD WHERE MOIS_PAIE=
	 (SELECT Greatest (m_embauche ,pac.deb_histo_retro,TO_CHAR(ADD_MONTHS(TO_DATE(pac.periodeencours,'YYYYMM'), - pac.nb_mois_retro),'YYYYMM'))
	 FROM tge_ref_pac pac
	 WHERE NUMPAC =p_numpac
	 )
	 AND NUMPAC  =p_numpac
	 AND PAIEZAD =p_paiezad;
	 SELECT
	 debut_per_generation_hp  INTO debut_calcul_hp_DB
	 FROM
	 tge_periode_recueil_paiezad tprp, tge_ref_pac p
	 WHERE
	 tprp.numpac = p_numpac
	 AND tprp.paiezad = p_paiezad
	 AND P.numpac = p_numpac
	 AND tprp.mois_paie = nvl (--mois_paie_hp
	 ( SELECT  MIN(tprp.mois_paie) FROM
	 tge_periode_recueil_paiezad tprp, tge_ref_pac pac
	 WHERE
	 tprp.numpac = p_numpac -- NEW.numpac
	 AND  tprp.numpac = pac.numpac
	 AND tprp.paiezad = p_paiezad -- NEW.paiezad
	 AND tprp.fin_periode_paie >=TO_DATE(p_date_deb,'DD/MM/YYYY')-- NEW.date_sortie_sit_bo
	 AND tprp.mois_paie >= greatest(pac.deb_histo_retro,TO_CHAR(ADD_MONTHS(TO_DATE(pac.periodeencours,'YYYYMM'), - pac.nb_mois_retro),'YYYYMM'))
	
	 ), p.periodeencours);
  EXCEPTION
 WHEN others THEN
 	debut_calcul_hp_DB:=null;
 END;

/**** fin retro ****/
ELSE
/*** NOT RETRO ***/
BEGIN
        select debut_per_generation_hp  INTO debut_calcul_hp_DB 
            from tge_periode_recueil_paiezad 
            where numpac=p_numpac
              and PAIEZAD=p_paiezad
              and MOIS_PAIE=(select PERIODEENCOURS from tge_ref_pac where NUMPAC=p_numpac );
EXCEPTION
 WHEN others THEN
 	debut_calcul_hp_DB:=null;
 END;
END IF; -- END test is RETRO    


p_date_deb:=GREATEST(p_date_deb,NVL(debut_calcul_hp_DB,p_date_deb),NVL(d_limiteMaj,p_date_deb) );

p_date_fin:=least (p_date_fin, NVL(v_fin_per_gen_hp,p_date_fin) );

    IF p_date_fin IS NULL THEN 
      FSED.FSED_AVANCEMENT_PLSQL(p_matric,'FIN CALC HP via TRIGGER! Date fin null matric:'||p_matric,'');
    RETURN; END IF;

   sql_1:='SELECT * 
            FROM
              ( SELECT dcy.numpac            AS numpac, dcy.code_classe_horaire_ott AS code_classe_horaire_ott, dcy.date_debut              AS date_debut,
                dcy.date_fin                AS date_fin, dcy.code_cycle_ott          AS code_cycle_ott,
                cy1.code_canevas_cycle_ott  AS code_canevas_cycle_ott, cy1.nombre_jours_cycle      AS nombre_jours_cycle,
                cy1.num_jour_entree_canevas AS num_jour_entree_canevas,    cy2.num_jour_dans_cycle     AS num_jour_dans_cycle, cy2.nombre_heure_1          AS nombre_heure
                
              FROM tge_ref_dcy dcy,  tge_ref_cy1 cy1,  tge_ref_cy2 cy2
              WHERE  dcy.numpac              IN ('''|| p_numpac /*SUBSTR(:NEW.IDPACMAT,0,6)*/ ||''')
              AND  cy1.numpac                 = dcy.numpac  AND cy2.numpac                 = cy1.numpac
              AND dcy.code_cycle_ott         = cy1.code_cycle_ott  AND cy1.code_canevas_cycle_ott = cy2.code_canevas_cycle_ott
              ORDER BY dcy.code_cycle_ott, dcy.code_classe_horaire_ott, cy1.code_canevas_cycle_ott, cy1.num_jour_entree_canevas
              ) pivot 	( MAX(nombre_heure) FOR num_jour_dans_cycle IN ( 	''1'' AS "NOMBRE_HEURE_1", ''2'' AS "NOMBRE_HEURE_2", ''3'' AS "NOMBRE_HEURE_3",
                                            ''4'' AS "NOMBRE_HEURE_4", ''5'' AS "NOMBRE_HEURE_5", ''6'' AS "NOMBRE_HEURE_6", ''7'' AS "NOMBRE_HEURE_7",
                                            ''8'' AS "NOMBRE_HEURE_8", ''9'' AS "NOMBRE_HEURE_9", ''10'' AS "NOMBRE_HEURE_10", ''11'' AS "NOMBRE_HEURE_11",
                                            ''12'' AS "NOMBRE_HEURE_12", ''13'' AS "NOMBRE_HEURE_13", ''14'' AS "NOMBRE_HEURE_14", ''15'' AS "NOMBRE_HEURE_15",
                                            ''16'' AS "NOMBRE_HEURE_16", ''17'' AS "NOMBRE_HEURE_17", ''18'' AS "NOMBRE_HEURE_18", ''19'' AS "NOMBRE_HEURE_19",
                                            ''20'' AS "NOMBRE_HEURE_20", ''21'' AS "NOMBRE_HEURE_21")
                    ) ORDER BY numpac, code_classe_horaire_ott, date_debut';
        
        
sql_2:='select numpac, code_hor_pres, date_debut, date_fin, hrs_lundi, hrs_mardi, hrs_mercredi, hrs_jeudi, hrs_vendredi, hrs_samedi, hrs_dimanche 
		  	 FROM   tge_ref_hpr 
		  	 WHERE  numpac               		IN ('''|| p_numpac ||''')
          ORDER BY numpac, code_hor_pres, date_debut';


/* A819,A820,A996 valeur alimenter manuellement dans Java*/
sql_3:='select M.NUMPAC,M.ELEMENT,M.OCCURENCE,M.DONNEEGXP,M.TABLEGXP,M.DONNFILTRE,M.OPERFILTRE,M.VALFILTRE,M.TRTPARTICULIER,M.ENVOI_SYSTEMATIQUE,M.FORCABLE_ECRAN_GENERE 
          from TGE_REF_MAPDO M  
          where ( ELEMENT IN (''A819'',''A820'',''A996'') ) 
          and  (((SELECT COUNT(1) FROM TGE_REF_MAPDO WHERE NUMPAC= '''||p_numpac||''' AND  ELEMENT = M.ELEMENT ) > 0 AND  M.NUMPAC='''||p_numpac||''')
              OR ((SELECT COUNT(1) FROM TGE_REF_MAPDO WHERE NUMPAC='''||p_numpac||''' AND ELEMENT = M.ELEMENT) = 0 AND M.NUMPAC=''*'' ))';

/* les colonne FIN_PER_GENERATION_HP et DEBUT_PER_GENERATION_HP sont null pour les alimenter manuellement lors d'itération*/
sql_4:='select PAIEZAD,MATRIC,TYPE_WRITER,ZAA91,ZAA92,ZAA93,CODE_GTA,ZA914,CMPPCS,ZAB12,ZAB13,ZAB14,ZMODCNT,ZAB15,ZAB16,ZAB17,ZAB18,ZA719,ZAB05,ZAB06,ZAB07,ZAB08,ZAB09,ZAB10,ZAB11,DATE_SORTIE_SIT_BO,DATE_CREATION,DATE_DERNIERE_MODIF,DATE_FIN_BO,ZX528,ZX734,DSA302,DSCDDCDI,COLPRES,HHDCN,REPBNDF,DSRCDDCDI,TCDDCDI,ZA996,DSA751,DSAGM,DSAGP,DSANCR,DSATO,DSDAP,DSDCP,DSDECH,DSDJTP,DSDNP,DSDPE,DSDPEN,DSDPN,DSDPP,DSEPL,DSES1,DSES2,DSFCNI,DSFCNP,DSFCP,DSFICH,DSFNP,DSFPE,DSFPN,DSFPP,DSFSUS,DSNLI,DSRNVL,DSRPCH,DSSAD,DSSCG,DSSTC,EMPLOI,ESSAI,FILIR,IFCDD,JJCNT,JJESS1,JJESS2,JJESS4,MAJHA,METIER,MMCNT,MMESS1,MMESS2,MMESS4,MNTPEN,MOTAUG,MOTAUI,MTAUG,MTAUI,NBCSP,NICSP,NIVECH,NUMAPP,NUMDUE,NUMPCS,OTT,PEREMP,PPSAL,PRAUG,PRAUI,PREAVI,PREFF,PRPAY,PRVNP,QUALPE,RECAPE,REFCG,RETRAI,RNVESS,RVCNT,SAFBA,SENET,SITADM,SSFIL,TATR,TPNAB,TXACT,TXAID,TXEMP,TYPAGM,TYSUB,VALTF,VALTR,ZA364,ZA365,ZA368,ZA380,ZA406,ZA523,ZA554,ZA557,ZA626,ZA640,ZA650,ZA656,ZA700,ZA701,ZA750,ZA754,ZA755,ZA819,ZA820,ZA962,ZAA84,ZAA85,ZB071,ZB133,ZB193,ZB224,ZB330,ZB368,ZB369,ZB647,ZB648,ZB883,ZP895,ZQ183,ZQ188,ZQ272,ZQ764,ZREACT,ZT061,NUMPAC,PACMAT,NUMCNT,DATE_EFF,DATE_FIN,AACNT,AAESS4,ACDADM,ACDALC,ACDFNE,AFFS02,AIPAT,ALSMO,APARCE,AVNAA,AVNAL,AVNAN,AVNAV,AVNTIC,CADRE,CAMSA,CASAS,CATAFP,CBUD,CE,CFE,CFEAT,CFECV,CFEDC,CFEEM,CFEES,CFEMA,CFESF,CFEVE,CFEVI,CHTYPC,CLNC,CODCPN,CODETB,CODSTE,COEFF,COFRON,COMCNT,COMURB,CSCOMP,CSRTT,CSTAPA,CVCOLL,DICDD,DRPAI2,DSA277,DSA301,TUTEUR,NUMURS_PRT,SIREN_PRT,STATUT_PRT,CODAGE_INT,CODSOC_INT,IDPACMAT,ACT_ORG,BU_ORG,DSAUI,DERUSA,DSFINC,MAAFFP,
              null as DEBUT_PER_GENERATION_HP, 
              null as FIN_PER_GENERATION_HP
            from DIC_ADM_CONTRAT_HISTO where 
                NUMPAC = '''|| p_numpac || ''''
             || ' AND PACMAT ='''|| p_matric || ''''
             || ' AND numcnt ='''|| p_numcnt||'''' 
             || ' AND date_eff =   TO_DATE('''||p_date_deb_char ||''',''DD/MM/YYYY'')
               AND date_sortie_sit_bo  =     TO_DATE('''||p_date_fin_BO||''' ,''DD/MM/YYYY'')
               
                ORDER BY matric asc, date_eff asc' ;


/*****************************************************************************/
/******************** loadCyclesGroupByPacAndClasseHorOtt ********************/
/*****************************************************************************/
cpt:=1; lst_1:=type_List_arr();
  OPEN cur_1 FOR sql_1;
  LOOP
     FETCH cur_1 INTO cur_TgeRefDcy; EXIT WHEN cur_1%NOTFOUND;
      lst_1.extend;
      lst_1(cpt) :=cur_TgeRefDcy;
      cpt:=cpt+1;
  END LOOP;


/*****************************************************************/
/******************** loadCyclesHprGroupByPac ********************/
/*****************************************************************/
cpt:=1; lst_2:=type_List_arr_2();
  OPEN cur_2 FOR sql_2;
  LOOP
     FETCH cur_2 INTO cur_TgeRefhpr; EXIT WHEN cur_2%NOTFOUND;
    lst_2.extend;
    lst_2(cpt) :=cur_TgeRefhpr;
    cpt:=cpt+1;
  END LOOP;


/*****************************************************************/
/******************** getPopulationHistoContrat ********************/
/******************** chargerInfoElementMapDo ********************/
/*****************************************************************/
cpt:=1; lst_3:=type_List_arr_3();
  OPEN cur_3 FOR sql_3;
  LOOP
     FETCH cur_3 INTO cur_TgeRefmapdo; EXIT WHEN cur_3%NOTFOUND;
    lst_3.extend;
    lst_3(cpt) :=cur_TgeRefmapdo;
    cpt:=cpt+1;
  END LOOP;

/******************** chargerHistoContrat ********************/

cpt:=1; lst_4:=type_List_arr_4();
  OPEN cur_4 FOR sql_4;
  LOOP
     FETCH cur_4 INTO cur_dachtype; 
     EXIT WHEN cur_4%NOTFOUND;
    lst_4.extend;
    lst_4(cpt) :=cur_dachtype;
    lst_4(cpt).FIN_PER_GENERATION_HP := p_date_fin; 
    lst_4(cpt).DEBUT_PER_GENERATION_HP := p_date_deb; 
    cpt:=cpt+1;
  END LOOP;
  


  IF lst_4.COUNT >0 THEN
    delete from TGE_INCIDENTS_PAIE 
                  WHERE 
                  NUMPAC = p_numpac
                  AND PAIEZAD = p_PAIEZAD
                  AND TYPE_IP = 'T'
                  AND CODE_IP = 'HP'
                  AND DATE_EFFET  between p_date_deb AND p_date_fin;  -- sortie du boucle pour executer une seul fois
  END IF;
  
  lst_Situation:=SituationType_arr_2();
  arrCycleSituation:=type_List_arr();
  arrCycleSituation.extend;
    
    
  FOR k IN 1..lst_4.COUNT LOOP --K LOOP DACH
          lst_Situation.extend;
          
          /****** ajusterPeriodeSituation ******/
          IF (k=1 AND lst_4(k).DATE_EFF IS NOT NULL AND lst_4(k).DATE_EFF <p_date_deb) THEN 
              lst_4(k).DATE_EFF:=p_date_deb; --lst_4(cpt).DEBUT_PER_GENERATION_HP;
          END IF;  
   
          /***** build Situation *****/
          lst_Situation(k).numpac:=lst_4(k).NUMPAC;
          lst_Situation(k).Pacmat:=lst_4(k).Pacmat;
          lst_Situation(k).PaieZad:=lst_4(k).PaieZad;
          lst_Situation(k).DateDeb:=lst_4(k).DATE_EFF;
          lst_Situation(k).DateFin:=lst_4(k).FIN_PER_GENERATION_HP;
          
          --GET Donner specifier selon parametrage MAPDO
          --LOOP MAPDO
          FOR J IN 1..lst_3.COUNT LOOP --J LOOP
          
            --A996 / TYPE_GTA
            IF(lst_3(J).ELEMENT='A996' AND lst_3(J).NUMPAC=lst_4(k).NUMPAC) THEN
              lst_Situation(k).isGtaT1:=CASE WHEN getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k))='Z' THEN TRUE ELSE FALSE END;
            END IF; 
        
            -- Horaire Remu Presence
            --ZA819 / HORAIRE_REMUNERATION
            IF(lst_3(J).ELEMENT='A819') THEN
                    HoraireRemu := getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k));
                    
                     IF(lst_4(k).DATE_SORTIE_SIT_BO=to_date(p_date_fin_BO, 'dd/mm/yyyy')) THEN
					 	HoraireRemu:=new_za819;
					 END IF;
                    
            END IF;
            --ZA820 / HORAIRE_PRESENCE
            IF(lst_3(J).ELEMENT='A820') THEN
                    HorairePres := getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k));
                    
		            IF(lst_4(k).date_fin_BO=to_date (p_date_fin_BO, 'dd/mm/yyyy')) THEN
						HorairePres:=new_za820;
					END IF;
            END IF;
             --horairePres/horaireRemu =>Code_classe_horaire_ott
            IF(lst_3.count=J) THEN 
              IF(horairePres IS NOT NULL) THEN
                lst_Situation(k).Code_classe_horaire_ott:=TO_NUMBER(horairePres);
              ELSE
              IF(horaireRemu IS NOT NULL) THEN
                lst_Situation(k).Code_classe_horaire_ott:=TO_NUMBER(horaireRemu);
              END IF;
              END IF;
            END IF;          
            
          END LOOP; --FIN J MAPDO LOOP 
          
    cpt:=1;     
    
     FOR M IN 1..lst_1.COUNT LOOP
       IF( lst_1(M).CODE_CLASSE_HORAIRE_OTT=lst_Situation(k).Code_classe_horaire_ott)THEN
          arrCycleSituation(cpt):=lst_1(M);
          cpt:=cpt+1;
       END IF;     
     END LOOP;
     
      cpt:=1; 
     arrCycleHprSituation:=type_List_arr_2();
     arrCycleHprSituation.extend;
     FOR M IN 1..lst_2.COUNT LOOP
       IF( lst_2(M).Code_hor_pres=lst_Situation(k).Code_classe_horaire_ott)THEN
          arrCycleHprSituation(cpt):=lst_2(M);
          cpt:=cpt+1;
       END IF;     
     END LOOP;



     END LOOP; --END K LOOP DACH
     
     
  --decomposerArrCycle_DCY_SituationEnTrancheAndCreateHP
  FOR k IN 1..lst_Situation.COUNT LOOP   
     
     IF(arrCycleSituation.COUNT>0) THEN
     FOR W IN 1..arrCycleSituation.COUNT LOOP
     /* La date de début du premier cycle d'une situation doit être égale à la date de début de la situation La date de
         fin du dernier cycle d'une situation doit être égale à la  date de fin de la situation*/
        IF(lst_Situation(k).datedeb <= arrCycleSituation(W).Date_fin AND lst_Situation(k).datefin >= arrCycleSituation(W).Date_debut) THEN
          dateDebTranchSitu:=null; dateFinTranchSitu:=null;
          
          --La date d'effet du cycle est antérieure à la date de début de la situation, On se met sur la date début de la situation
          IF(arrCycleSituation(W).Date_debut <= lst_Situation(k).datedeb) THEN
            dateDebTranchSitu:=lst_Situation(k).datedeb;
           ELSE
            dateDebTranchSitu:=arrCycleSituation(W).Date_debut;
          END IF;
          
          --La date de fin d'effet du cycle est postérieur à la date de fin de la situation, On se met sur la date de fin de la situation
          IF(arrCycleSituation(W).Date_fin >= lst_Situation(k).datefin) THEN
            dateFinTranchSitu:=lst_Situation(k).datefin;
           ELSE
            dateFinTranchSitu:=arrCycleSituation(W).Date_fin;
          END IF;
          
          dateEnCours:=dateDebTranchSitu;

          --LOOP INSERT TGE_INCIDENTS_PAIE
          WHILE (dateEnCours <= dateFinTranchSitu) LOOP
             numJourCanevas:=calculateNumJourCanevas( arrCycleSituation(W), dateEnCours );
             nbreHeures:=getValOfCycle('NOMBRE_HEURE_'||numJourCanevas,arrCycleSituation(W));
             arrHoraireParJour(TO_CHAR(dateEnCours,'dd/mm/yyyy')):=nbreHeures;
             -- Insertion des HP
             insertIncidentPaieHorsAbs( nbreHeures ,dateEnCours, lst_Situation(k),p_login );
             dateEnCours:=dateEnCours+1;
          END LOOP; --LOOP WHILE   
        END IF; --FIN decomposerArrCycleDcySituationEnTrancheAndCreateHP
         
  /*******************************************************/
  
    --decomposerArrCycle_Hpr_SituationEnTrancheAndCreateHP
 
   IF(arrCycleSituation.count=0) THEN
    FOR W IN 1..arrCycleHprSituation.COUNT LOOP  
      /* La date de début du premier cycle d'une situation doit être égale à la date de début de la situation La date de
         fin du dernier cycle d'une situation doit être égale à la  date de fin de la situation*/
        IF(lst_Situation(k).datedeb <= arrCycleHprSituation(W).Date_fin AND lst_Situation(k).datefin >= arrCycleHprSituation(W).Date_debut) THEN
          dateDebTranchSitu:=null; dateFinTranchSitu:=null;
          
          --La date d'effet du cycle est antérieure à la date de début de la situation, On se met sur la date début de la situation
          IF(arrCycleHprSituation(W).Date_debut <= lst_Situation(k).datedeb) THEN
            dateDebTranchSitu:=lst_Situation(k).datedeb;
           ELSE
            dateDebTranchSitu:=arrCycleHprSituation(W).Date_debut;
          END IF;
          
          --La date de fin d'effet du cycle est postérieur à la date de fin de la situation, On se met sur la date de fin de la situation
          IF(arrCycleHprSituation(W).Date_fin >= lst_Situation(k).datefin) THEN
            dateFinTranchSitu:=lst_Situation(k).datefin;
           ELSE
            dateFinTranchSitu:=arrCycleHprSituation(W).Date_fin;
          END IF;
          
          dateEnCours:=dateDebTranchSitu;
          
          --LOOP INSERT TGE_INCIDENTS_PAIE 
          WHILE (dateEnCours <= dateFinTranchSitu) LOOP
             jourSemaine:=calculateNomJourCanevas( arrCycleHprSituation(W), dateEnCours );
             nbreHeures:=getHprHoursNbre(numJourCanevas,arrCycleHprSituation(W));
             arrHoraireParJour(TO_CHAR(dateEnCours,'dd/mm/yyyy')):=nbreHeures;
             -- Insertion des HP
             insertIncidentPaieHorsAbs( nbreHeures ,dateEnCours, lst_Situation(k), p_login );
             dateEnCours:=dateEnCours+1;
          END LOOP; --LOOP WHILE TGE_INCIDENTS_PAIE
 
        END IF; -- END IF INTO THE LOOP
    END LOOP; --FIN decomposerArrCycleHprSituationEnTrancheAndCreateHP
  END IF; --END IF arrCycleSituation vide
  END LOOP; --END LOOP parcour situation
  END IF;
  END LOOP;  --END LOOP Situation génerer
    
	ELSE
 	 FSED.FSED_AVANCEMENT_PLSQL(147,'pas de changement:'||p_matric,'');

	END IF; -- END IF CHANGEMENT ZA
 FSED.FSED_AVANCEMENT_PLSQL(147,'FIN CALC HP via TRIGGER matric:'||p_matric,'');
 
  EXCEPTION
 WHEN others THEN
	 BEGIN 
	 FSED.FSED_AVANCEMENT_PLSQL(147,'CALCULE HP ERREUR CRITIQUE PAIEZAD: '||p_matric,'MAtric:'||p_matric || ' => ' || SQLCODE || ' - ' || SQLERRM);
	  EXCEPTION
	 WHEN others THEN
	  RETURN;
 END;

 END;

END CALC_HP;
##
TAG_CHARSET=@€éèç
##
TGE_CONTROLE_40
=SQL=
create or replace PROCEDURE TGE_CONTROLE_40 ( P_LOGIN IN VARCHAR2
 , P_DATE_IMPORT IN VARCHAR2
 , P_NUMLIGNE IN VARCHAR2
 , P_CODLANG in VARCHAR2
 , P_ISFSED in NUMBER
 ) AS
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
 cNumeric_Characters varchar2(40);
 cNLS_NUMERIC_CHARACTERS varchar2(40);
 clWhere varchar2(1000);
 req varchar2(2000);
 w_exist_incident VARCHAR2(2000);
 w_err VARCHAR2(2000);
 
 /* Objets utilisés pour le contrôle sur la somme des heures réalisées */
 -- Objet contenant un tableau des lignes par collaborateur par jour avec les sommes des heures réalisées déjà créées (TGE_INCIDENTS_PAIE) et des heures réalisées ajoutées par l'import
 TYPE T_REC IS RECORD (
 numpac varchar2(6),
 paiezad varchar2(8),
 date_effet date,
 somme_heures number,
 somme_heures_trav_import number);
 TYPE typ_tab IS table of T_REC;
 tab typ_tab ;
 -- Plus petite et plus grande date de l'import
 v_dateMinImport varchar2(8);
 v_dateMaxImport varchar2(8);
 varsys varchar2(100);
 
 BEGIN
 
 SELECT substr(TRIM(VALUE),length(TRIM(VALUE)))  INTO cNLS_NUMERIC_CHARACTERS FROM nls_session_parameters where PARAMETER = 'NLS_NUMERIC_CHARACTERS';
 
 clwhere:='login='''||p_login||''' and date_import='''||p_date_import||'''';
 if p_numligne is not null then
 clwhere:=clwhere||' AND NUMLIGNE='||p_numligne;
 end if;
 -- On ne traite que les lignes qui sont en statut TRAIT et TRANS (les autres FIN, ANNULER, ... ne doivent plus être controler
 clwhere:=clwhere || ' AND (STATUT = ''TRAIT''';
 clwhere:=clwhere || ' OR STATUT = ''TRANS'')';
 
 -- Mise à blanc de tous les messages d'erreur des lignes qui vont être contrôlées
 IF p_login='BATCH' THEN
 req:='update TGE_IMPORT_INCIDENTS I SET ERREURS = '''' WHERE '||clwhere;
EXECUTE_IMMEDIATE_STRING (req,0);
 END IF;
 
 -- Numpac non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00077',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND NUMPAC is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00078',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PAIEZAD is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00010',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND PERIODE is null ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- TYPE_TRAITEMENT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00079',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND TYPE_TRAITEMENT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00108',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_DEBUT is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN non vide
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00109',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND DATE_FIN is null  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- NUMPAC controle format
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00072',p_codlang),'''','''''')||''',NUMPAC,'''||p_codlang||''') where '||clwhere||' AND  NVL(LENGTH(NUMPAC),0)>6 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 ---controleLigneImportIncidentVide(TGE_IMPORT_INCIDENTS_sgbd p_importIncident, ArrayList<GxpErreurWithParams> p_arrErreurs)INCI0025
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0025',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') where '||clwhere||' AND CODE_IP is null AND HEURES_IP IS NULL AND HEURES_TRAV IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PAIEZAD >8 cara
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00073',p_codlang),'''','''''')||''',PAIEZAD,'''||p_codlang||''') where '||clwhere||' AND NVL(LENGTH(PAIEZAD),0)>8  ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- PERIODE format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00083',p_codlang),'''','''''')||''',PERIODE||''|yyyyMM'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(PERIODE ,''yyyyMM'') =0)' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_DEBUT format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00110',p_codlang),'''','''''')||''',DATE_DEBUT||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND (IS_DATE(DATE_DEBUT ,''yyyyMMdd'') =0) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- DATE_FIN format date OK
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00111',p_codlang),'''','''''')||''',DATE_FIN||''|yyyyMMdd'','''||p_codlang||''') WHERE '||clwhere||' AND IS_DATE(DATE_FIN ,''yyyyMMdd'') =0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_TRAV controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00112',p_codlang),'''','''''')||''',HEURES_TRAV,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_TRAV, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- HEURES_IP controle 1 numerique
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00113',p_codlang),'''','''''')||''',HEURES_IP,'''||p_codlang||''') WHERE '||clwhere||' AND TGE_CONTROLE_HEURE_TRAV ( HEURES_IP, 3, 2,'''||cNLS_NUMERIC_CHARACTERS||''')=0 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE (lig 1968)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00100',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (ORIGINE IS NOT NULL AND LENGTH(ORIGINE) >1) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ORIGINE
  IF P_LOGIN ='BATCH' THEN 
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') OR (ORIGINE is null)) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  else if P_ISFSED=1 then
  req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00225',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND ((ORIGINE IS NOT NULL AND ORIGINE = ''T'') ) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
  END IF;
  END IF;
 
 -- CONTROLES EXISTENCES
 -- TYPE_TRAITEMENT (Lig 1971)
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00101',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')';
 req:= req || ' WHERE '||clwhere||' AND ii.TYPE_TRAITEMENT IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists  (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=ii.numpac and ii.type_traitement =RT.CODETYPTRT) )';
 req:= req || ' OR ';
 req:= req ||   '( exists (SELECT RT.CODETYPTRT FROM TGE_REF_TYPETRT RT WHERE rt.numpac=''*'' AND RT.codetyptrt= ii.type_traitement and ii.type_traitement =RT.CODETYPTRT AND NOT EXISTS (SELECT 1 FROM TGE_REF_TYPETRT RT2 WHERE RT2.NUMPAC=ii.numpac)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IMPUTATION (Lig 1972)
 
 select valvar into varsys from sys_varsys where module='TGE' and CODVAR='CTRL_CODE_IMPUTATION_EXISTE';
 if upper(varsys)<>'FALSE' then
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00012',p_codlang),'''','''''')||''',ii.code_imputation||''|''||ii.numPac,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' and ii.code_imputation<>''*'' AND  ii.code_imputation IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   '( exists (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac = ii.numpac and ri.codeimp=ii.code_imputation))';
 req:= req || ' OR ';
 req:= req ||   '(exists  (SELECT ri.codeimp FROM TGE_REF_IMPUTATION ri WHERE ri.numpac=''*'' AND  ri.codeimp=ii.code_imputation and ri.codeimp= ii.code_imputation AND NOT EXISTS (SELECT 1 FROM TGE_REF_IMPUTATION rt2 WHERE rt2.numpac=ii.numpac and rt2.codeimp= ii.code_imputation)))';
 req:= req || ')  ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 end if;
 
 -- CODE_IP (Lig 1973)INCI0012
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','INCI0012',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.code_ip IS NOT NULL AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac ) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac=''*'' AND rp.code_incident=ii.code_ip AND NOT EXISTS (SELECT 1 FROM TGE_REF_PRE rp2 WHERE rp2.numpac=ii.numpac and ii.code_ip=rp2.code_incident)))';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Contrôles spécifiques
 -- Date_Debut Date_Fin (lig 1977)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00118',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') WHERE '||clwhere||' AND  date_debut > date_fin ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 
 -- HEURES_TRAV TYPE_HEURE (lig 1978)
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00114',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NOT NULL AND type_heure NOT IN (''T'',''R'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00115',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') WHERE '||clwhere||' AND heures_trav IS NULL AND type_heure IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- CODE_IP HEURE_IP (lig 1979)
 /*req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00138',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_ip IS NOT NULL AND heures_ip IS NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);*/
 
 -- DOMAINE_IMP ligne 1980
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00119',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND (DOMAINE_IMP IS NOT NULL AND CODE_IMPUTATION IS NULL) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00120',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NOT NULL AND domaine_imp != ''H'' AND domaine_imp !=''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00121',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NOT NULL AND heures_ip IS NULL AND domaine_imp != ''H'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00122',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_ip IS NOT NULL AND heures_trav IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 req:='update TGE_IMPORT_INCIDENTS SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00136',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') WHERE '||clwhere||' AND code_imputation IS NOT NULL AND heures_trav IS NULL AND heures_ip IS NULL AND domaine_imp != ''1'' ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ctrl if heure contenuHeures(String p_heures, String p_type_ip, ArrayList<GxpErreurWithParams> p_arrErreurs) INCI0024
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0024',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND (((Ii.heures_ip IS NOT NULL OR Ii.code_ip is not null ) AND Ii.code_ip = ''HP'' AND II.heures_ip is null)
     OR (ii.HEURES_TRAV is null  AND ii.type_heure  in (''T'',''R''))
     ) ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --ToolsTge_controles.controleAutorisationPaieZad(p_loginUserOrDelegator, p_unIncident.numPac, p_unIncident.paieZad, arrErreurs);STD00049
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('STD','STD00049',p_codlang),'''','''''')||''',paiezad,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND ii.paiezad IS NOT NULL AND ii.numpac is not null AND NOT ';
 req:= req || '(';
 req:= req ||   ' ( exists (SELECT * from DIC_ADM_CONTRAT C WHERE C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and not nvl(mpe,''N'')=''N'')) )';
 req:= req || ' OR ';
 req:= req ||   '(exists (SELECT * from DIC_ADM_CONTRAT C ,SECUPACMAT S  WHERE C.NUMPAC = S.NUMPAC and C.PACMAT = S.PACMAT and C.NUMCNT = S.CURRENT_NUMCNT AND C.NUMPAC =ii.numpac and C.CURRENT_PAIEZAD =ii.paiezad and c.numpac in (select numpac from TGE_REF_PAC where numpac = c.numpac and nvl(mpe,''N'')=''N'')) )';
 req:= req || ') ' ;
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleHoraireTheorique(p_unIncident, arrErreurs, p_transac); INCI0020 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0020',p_codlang),'''','''''')||''',type_heure,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.code_imputation IS NOT NULL ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleDateDebutFin(p_code_ip,p_date_debut,p_date_fin,p_arrErreurs); TGE00226 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','TGE00226',p_codlang),'''','''''')||''',to_char(to_date(date_debut, ''yyyymmdd''), ''dd.mm.yyyy'')||''|''||to_char(to_date(date_fin, ''yyyymmdd''), ''dd.mm.yyyy''),'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.code_IP =''HP'' AND ii.DATE_FIN !=  ii.DATE_DEBUT ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 --controleCode_ip; INCI0027 DIT 37186
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||REPLACE(get_message_erreur('TGE','INCI0027',p_codlang),'''','''''')||''',code_ip,'''||p_codlang||''') ';
 req:= req || ' WHERE '||clwhere||' AND  ii.type_heure != ''T'' AND  ii.type_heure != ''R''  AND (ii.CODE_IP =''HP'' OR ii.CODE_IP =''HT'') ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie en demi journée DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00264',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''') ';
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' AND ii.DATE_DEBUT is not null and ii.DATE_FIN is not null  and ii.DATE_DEBUT!=ii.DATE_FIN ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)=0.5 ';
 
  EXECUTE_IMMEDIATE_STRING( req,0);
 
  -- controle saisie du volume different de 0 ou 1 DIT 42237
 req:='update TGE_IMPORT_INCIDENTS ii  SET ERREURS=TGE_GET_MESSAGE_ERREUR(ERREURS,'''||replace(get_message_erreur('TGE','TGE00265',p_codlang),'''','''''')||''',NULL,'''||p_codlang||''')'; 
 req:= req || ' where '||clwhere||' AND ii.CODE_IP  IS NOT NULL AND ii.CODE_IP != ''HP'' ';
 req := req || 'AND ( exists (SELECT * FROM TGE_REF_PRE rp WHERE ii.code_ip=rp.code_incident and rp.numpac = ii.numpac AND rp.OPTION_CONSERV_HISTO =''A'' AND rp.UNITE=''J'') ) AND is_number(ii.HEURES_IP)!=0 AND is_number(ii.HEURES_IP)!=1  AND is_number(ii.HEURES_IP)!=0.5 ';
  EXECUTE_IMMEDIATE_STRING( req,0);
 
 -- Bloquer les imports carte 40 sur des périodes antérieures à la date de limite de rétro
 req:='MERGE INTO TGE_IMPORT_INCIDENTS II USING ';
 req:= req ||' (SELECT NUMPAC, PERIODEENCOURS, DEB_RETRO, DEB_HISTO_RETRO, NB_MOIS_RETRO, ';
 req:= req ||'  GREATEST(NVL(DEB_HISTO_RETRO, ''190001''), (TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM''))) AS LIMITE_RETRO ';
 req:= req ||' FROM TGE_REF_PAC ) P';
 req:= req ||' ON (';
 req:= req || clwhere;
 req:= req ||' AND II.NUMPAC = P.NUMPAC';
 req:= req ||' AND II.PERIODE < P.PERIODEENCOURS';
 req:= req ||' AND ( P.DEB_RETRO IS NOT NULL AND P.DEB_RETRO <= P.PERIODEENCOURS';
 req:= req ||' ) ) WHEN MATCHED THEN UPDATE SET II.ERREURS = CASE';
 req:= req ||' WHEN II.PERIODE < P.DEB_HISTO_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00336',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.DEB_HISTO_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' WHEN II.PERIODE < P.LIMITE_RETRO THEN TGE_GET_MESSAGE_ERREUR(II.ERREURS,'''||replace(get_message_erreur('TGE','TGE00337',p_codlang),'''','''''')||''',TO_CHAR(TO_DATE(P.LIMITE_RETRO, ''YYYYMM''), ''MM.YYYY''),'''||p_codlang||''')';
 req:= req ||' END WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 -- Bloquer en mode non rétro les imports carte 40 sur des périodes antérieures à la période en cours
 req := 'MERGE INTO TGE_IMPORT_INCIDENTS II USING TGE_REF_PAC P ON( '|| clwhere;
 req := req || ' AND II.NUMPAC = P.NUMPAC';
 req := req || ' AND P.PERIODEENCOURS IS NOT NULL ';
 req := req || ' AND (P.DEB_RETRO > P.PERIODEENCOURS OR P.DEB_RETRO IS NULL) ';
 req := req || ' AND II.PERIODE < P.PERIODEENCOURS) ';
 req := req || ' WHEN MATCHED THEN UPDATE ';
 req := req || ' SET II.ERREURS = TGE_GET_MESSAGE_ERREUR(II.ERREURS, ''' || replace(get_message_erreur('TGE', 'TGE00351', p_codlang), '''', '''''') || ''', NULL, ''' || p_codlang || ''')';
 req := req || ' WHERE II.ERREURS IS NULL';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 
 EXCEPTION
 WHEN OTHERS THEN
 	IF (P_LOGIN != 'BATCH') THEN
 		-- On remonte l'erreur à l'application
  		raise;
  	END IF;
 END TGE_CONTROLE_40;
##
TGE_GENERATION_PHOTO
=SQL=
create or replace PROCEDURE TGE_GENERATION_PHOTO(
    p_id          IN NUMBER,
    p_numpac      IN VARCHAR2,
    p_periodepaie IN VARCHAR2)
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
AS
  CURSOR cur_mapta
  IS
    SELECT a.*
    FROM tge_ref_mapta a,
      (SELECT * FROM user_tables
      ) b
  WHERE a.numpac     =p_numpac
  AND b.table_name   =a.tablephy
  AND a.allerretour IN ('A','2')
  UNION ALL
  SELECT a.*
  FROM tge_ref_mapta a,
    (SELECT * FROM user_tables
    ) b
  WHERE a.numpac        ='*'
  AND b.table_name      =a.tablephy
  AND a.allerretour    IN ('A','2')
  AND (tableparam) NOT IN
    (SELECT tableparam
    FROM tge_ref_mapta a,
      (SELECT * FROM user_tables
      ) b
    WHERE a.numpac  =p_numpac
    AND b.table_name=a.tablephy
    ) ;
  lig_mapta cur_mapta%rowtype;
  v_typeTable VARCHAR(1);
  clinsert CLOB;
  clinsertsel CLOB;
  clinsertcols CLOB;
  requete CLOB;
  nbpart NUMBER;
  cldate VARCHAR2(500):='';
  p_nb_mois_paie_init number;
BEGIN
   
BEGIN
      SELECT TO_NUMBER(NVL(VALVAR,'0'))
      INTO p_nb_mois_paie_init
      FROM SYS_VARSYS
      WHERE MODULE = 'GAP'
      AND CODVAR   = 'NB_MOIS_PAIE_INIT';
EXCEPTION
  WHEN NO_DATA_FOUND THEN
      p_nb_mois_paie_init :=1;
END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;


  OPEN cur_mapta;
  LOOP
  BEGIN
    FETCH cur_mapta
    INTO lig_mapta ;
    EXIT
  WHEN cur_mapta%NOTFOUND ;
    -- on regarde les clés pour savoir si table datée
    cldate:='';
    FOR colonne IN
    (SELECT a.column_name,
      b.data_type
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =lig_mapta.tablephy
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      )
    )
    LOOP
    IF colonne.data_type='DATE'  THEN
       cldate  :=' AND  a.'||colonne.column_name||'<=last_day(to_date('''||p_periodepaie||''',''yyyymmdd''))';
    END IF;
    END LOOP;
    IF lig_mapta.tablephy='DIC_ADM_CONTRAT' THEN
    cldate  :=' AND  a.DSDCN <=last_day(to_date('''||p_periodepaie||''',''yyyymmdd''))';
    END IF;
    -- requête de sélection des données à faire selon le type de table
    v_typeTable   :=fsed.getTypeTable(lig_mapta.tablephy);
    IF v_typeTable ='z' THEN
      clinsertsel :='';
      clinsertcols:='NUMPAC,PACMAT';
      FOR colonne IN
      (SELECT a.column_name
      FROM user_tab_columns a,
        user_tab_columns b
      WHERE a.table_name = lig_mapta.tablephy
      AND b.table_name   ='PHOTO_'
        ||a.table_name
      AND a.column_name=b.column_name
      AND a.column_name NOT LIKE '%IDPACMAT%'
      ORDER BY a.column_id
      )
      LOOP
        IF colonne.column_name <>'NUMPAC' AND colonne.column_name<>'PACMAT' THEN
          clinsertsel          :=clinsertsel||',a.'||colonne.column_name;
          clinsertcols         :=clinsertcols||','||colonne.column_name;
        END IF;
      END LOOP;

      clinsert      :='select distinct '''||p_numpac;
      clinsert      := clinsert||''',b.pacmat'||clinsertsel;
      clinsert      := clinsert||' from '||lig_mapta.tablephy;
      clinsert:= clinsert||' a,DIC_ADM_CONTRAT_SITU b where b.paiezad=a.paiezad and a.numpac=b.numpac and a.numpac= '''||p_numpac;
      clinsert:= clinsert||'''  and a.pacmat in (select c.pacmat from GAP_TRT_LISTE_MAT c where c.id_trt='||p_id||')';     
      clinsert:= clinsert||' and a.pacmat not in (select f.pacmat from TGE_MODIF_PACMAT_TORESEND f where b.numpac=f.numpac and f.numpac='''||p_numpac||''' and  f.table_to_send='''||lig_mapta.tablephy||''')'||cldate;
    elsif v_typeTable='p' THEN
      clinsertsel   :='';
      clinsertcols  :='';
      FOR colonne IN
      (SELECT a.column_name
      FROM user_tab_columns a,
        user_tab_columns b
      WHERE a.table_name = lig_mapta.tablephy
      AND b.table_name   ='PHOTO_'
        ||a.table_name
      AND a.column_name=b.column_name
      AND a.column_name NOT LIKE '%IDPACMAT%'
      ORDER BY a.column_id
      )
      LOOP
        IF clinsertsel IS NOT NULL THEN
          clinsertsel  :=clinsertsel||',';
        END IF;
        clinsertsel     :=clinsertsel||'a.'||colonne.column_name;
        IF clinsertcols IS NOT NULL THEN
          clinsertcols  :=clinsertcols||',';
        END IF;
        clinsertcols:=clinsertcols||colonne.column_name;
      END LOOP;

      clinsert      :='select distinct '||clinsertsel;
      clinsert      := clinsert||' from '||lig_mapta.tablephy;
      clinsert      := clinsert||' a  where  a.numpac= '''||p_numpac||''' AND    a.pacmat in (select c.pacmat from GAP_TRT_LISTE_MAT c where c.id_trt='||p_id||')';
      clinsert      := clinsert||' and a.pacmat not in (select f.pacmat from TGE_MODIF_PACMAT_TORESEND f where f.numpac=a.numpac and f.numpac='''||p_numpac||''' and  f.table_to_send='''||lig_mapta.tablephy||''')'||cldate;
    elsif v_typeTable='m' THEN
      clinsertsel   :='';
      clinsertcols  :='NUMPAC,PACMAT';
      FOR colonne IN
      (SELECT a.column_name
      FROM user_tab_columns a,
        user_tab_columns b
      WHERE a.table_name = lig_mapta.tablephy
      AND b.table_name   ='PHOTO_'
        ||a.table_name
      AND a.column_name=b.column_name
      AND a.column_name NOT LIKE '%IDPACMAT%'
      ORDER BY a.column_id
      )
      LOOP
        IF colonne.column_name <>'NUMPAC' AND colonne.column_name<>'PACMAT' THEN
          clinsertsel          :=clinsertsel||',a.'||colonne.column_name;
          clinsertcols         :=clinsertcols||','||colonne.column_name;
        END IF;
      END LOOP;

      clinsert:='select distinct '''||p_numpac;
      clinsert:= clinsert||''',b.pacmat'||clinsertsel;
      clinsert:= clinsert||' from '||lig_mapta.tablephy;
      clinsert:= clinsert||' a,SECUPACMAT b, GAP_TRT_LISTE_MAT c where b.matric=a.matric and b.numpac= '''||p_numpac;
      clinsert:= clinsert||'''  and b.pacmat=c.pacmat and c.numpac='''||p_numpac||''' and c.id_trt='||p_id;
      clinsert:= clinsert||' and b.pacmat not in (select f.pacmat from TGE_MODIF_PACMAT_TORESEND f where b.numpac=f.numpac and f.numpac='''||p_numpac||''' and  f.table_to_send='''||lig_mapta.tablephy||''')'||cldate;
    END IF;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_GENERATION_PHOTO *** '||p_numpac||' *** Begin *** '||lig_mapta.tablephy||' (type='||v_typeTable||')',null);

    -- 1)	Sauvegarde de PHOTO dans PH_PH des mal recyclés non déjà présents dans PH_PH
    IF instr(clinsertsel,'a.PACMAT')>0 THEN
      requete:= 'insert into PH_PH_'||lig_mapta.tablephy||'('||clinsertcols||') (select '||clinsertsel ||' from PHOTO_'||lig_mapta.tablephy||' a, TGE_MODIF_PACMAT_TORESEND b where a.numpac=b.numpac and a.pacmat=b.pacmat and b.table_to_send='''||lig_mapta.tablephy||''' and a.numpac='''||p_numpac||''' AND  b.pacmat not in (select c.pacmat from PH_PH_'||lig_mapta.tablephy||' c where c.numpac='''||p_numpac||'''))';
    ELSE    
      requete:= 'insert into PH_PH_'||lig_mapta.tablephy||'('||clinsertcols||') (select a.numpac,a.pacmat'||clinsertsel ||' from PHOTO_'||lig_mapta.tablephy||' a, TGE_MODIF_PACMAT_TORESEND b where a.numpac=b.numpac and a.pacmat=b.pacmat and b.table_to_send='''||lig_mapta.tablephy||''' and a.numpac='''||p_numpac||''' AND  b.pacmat not in (select c.pacmat from PH_PH_'||lig_mapta.tablephy||' c where c.numpac='''||p_numpac||'''))';
    END IF;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Copie de PHOTO vers PH_PH des Toresend (mal recyclés) non présents dans PH_PH',requete);
    EXECUTE_IMMEDIATE_STRING( requete,0);
    
    -- 2)	On efface la PHOTO
    -- Contrôle de l'existence de partitionnement (son nom sera aussi une garantie de mode LIST)
    SELECT COUNT(*)
    INTO nbpart
    FROM user_tab_partitions
    WHERE table_name = 'PHOTO_'||lig_mapta.tablephy and partition_name = 'P_'||p_numpac;
    IF nbpart >0 THEN
      BEGIN
      -- Suppression de la partition
      requete:= 'ALTER TABLE PHOTO_'||lig_mapta.tablephy||' TRUNCATE PARTITION P_'||p_numpac||' DROP STORAGE UPDATE GLOBAL INDEXES';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partition PHOTO détectée : suppression',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
      -- Création de la partition
      EXCEPTION
        WHEN OTHERS THEN
         BEGIN
      requete:= 'ALTER TABLE PHOTO_'||lig_mapta.tablephy||' ADD PARTITION P_'||p_numpac||' values ('''||p_numpac||''')';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Création de partition PHOTO',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
         EXCEPTION 
             WHEN OTHERS THEN 
                requete:= 'delete from  PHOTO_'||lig_mapta.tablephy||' where numpac='''||p_numpac||'''';
                FSED.FSED_AVANCEMENT_PLSQL(p_id,'Effacement de PHOTO',requete);
                EXECUTE_IMMEDIATE_STRING( requete,0);
        END;
      END;
    ELSE
      -- Cas des tables non partitionnées ou partitionnées en mode HASH
      requete:= 'delete from PHOTO_'||lig_mapta.tablephy||' where numpac='''||p_numpac||'''';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Effacement de PHOTO',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
    END IF;
    
    -- 3)	On met à jour la PHOTO avec la table DIC sauf pour les mal recyclés de ce dictionnaire
    requete:= 'insert into PHOTO_'||lig_mapta.tablephy||'('||clinsertcols||') '||clinsert; 
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Copie de DIC vers PHOTO sauf les mal recyclés',requete);
    EXECUTE_IMMEDIATE_STRING( requete,0);
    
    -- 4)	On copie PH_PH dans PHOTO uniquement pour les mal recyclés
    requete:= 'insert into PHOTO_'||lig_mapta.tablephy||'('||clinsertcols||')  (select '||clinsertcols||' from PH_PH_'||lig_mapta.tablephy||'  where numpac='''||p_numpac||''' and pacmat in (select pacmat from TGE_MODIF_PACMAT_TORESEND where numpac='''||p_numpac||''' and table_to_send='''||lig_mapta.tablephy||''' ) )';
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Copie de PH_PH dans PHOTO pour les mal recyclés',requete);
    EXECUTE_IMMEDIATE_STRING( requete,0);
    
    -- 5)	On efface PH_PH
    -- Contrôle de l'existence de partitionnement (son nom sera aussi une garantie de mode LIST)
    SELECT COUNT(*)
    INTO nbpart
    FROM user_tab_partitions
    WHERE table_name = 'PH_PH_'||lig_mapta.tablephy and partition_name = 'P_'||p_numpac;
    IF nbpart >0 THEN
     BEGIN
      requete:= 'ALTER TABLE PH_PH_'||lig_mapta.tablephy||' TRUNCATE PARTITION P_'||p_numpac||' DROP STORAGE UPDATE GLOBAL INDEXES';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partition PH_PH détectée : suppression',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
      EXCEPTION
      WHEN OTHERS THEN
        BEGIN   
      -- Création de la partition
      requete:= 'ALTER TABLE PH_PH_'||lig_mapta.tablephy||' ADD PARTITION P_'||p_numpac||' values ('''||p_numpac||''')';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Création de partition PH_PH',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
     EXCEPTION 
         WHEN OTHERS THEN 
      requete:= 'delete from PH_PH_'||lig_mapta.tablephy||' where numpac='''||p_numpac||'''';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Effacement de PH_PH',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);        END;
      END;
    ELSE
      -- Cas des tables non partitionnées ou partitionnées en mode HASH
      requete:= 'delete from PH_PH_'||lig_mapta.tablephy||' where numpac='''||p_numpac||'''';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Effacement de PH_PH',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);
    END IF;

    -- 6)	On copie dans PH_PH la table DIC des matricules mal recyclés
    IF instr(clinsertsel,'a.PACMAT')>0 THEN
      requete:= 'insert into PH_PH_'||lig_mapta.tablephy||'('||clinsertcols||') (select '||clinsertsel ||' from '||lig_mapta.tablephy||' a, TGE_MODIF_PACMAT_TORESEND b where a.numpac=b.numpac and a.pacmat=b.pacmat and b.table_to_send='''||lig_mapta.tablephy||''' and a.numpac='''||p_numpac||''')';
    ELSE
      requete:= 'insert into PH_PH_'||lig_mapta.tablephy||'('||clinsertcols||') (select b.numpac,b.pacmat'||clinsertsel ||' from '||lig_mapta.tablephy||' a, TGE_MODIF_PACMAT_TORESEND b ,SECUPACMAT s where s.numpac=b.numpac and s.pacmat=b.pacmat and s.MATRIC = a.MATRIC and b.table_to_send='''||lig_mapta.tablephy||''' and b.numpac='''||p_numpac||''')';
    END IF;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Copie de DIC vers PH_PH des Toresend (mal recyclés)',requete);
    EXECUTE_IMMEDIATE_STRING( requete,0);

      -- 7)	On supprime les DRPAIE2='B' de la photo DIT 82467
      
      IF v_typeTable ='z' THEN
         requete:= 'DELETE from PHOTO_'||lig_mapta.tablephy||' PH where PH.numpac='''||p_numpac||''' AND EXISTS ( select 1 from ( ';
         requete:=requete||' SELECT DISTINCT DACH2.NUMPAC,DACH2.paiezad, DACH2.NUMCNT ,DACH2.DRPAI2, MAX(DATE_EFF) OVER (PARTITION BY DACH2.paiezad, DACH2.NUMCNT) FROM DIC_ADM_CONTRAT_HISTO DACH2 ';
         requete:=requete||' WHERE DACH2.NUMPAC = '''||p_numpac||''' and DACH2.DATE_EFF <= LAST_DAY(TO_DATE('''||p_periodepaie||''',''yyyymmdd'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS(TO_DATE('''||p_periodepaie||''',''yyyymmdd''),-'||p_nb_mois_paie_init||') ';         
         if lig_mapta.tablephy in ('DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_ADM_CONTRAT_SITU') THEN 
            requete:=requete||' ) DACH   where  PH.paiezad=DACH.paiezad and NVL(DACH.DRPAI2,''B'')=''B'' AND PH.NUMPAC=DACH.NUMPAC AND PH.NUMCNT = DACH.NUMCNT) ' ;
         ELSE
            requete:=requete||' ) DACH   where  PH.paiezad=DACH.paiezad and NVL(DACH.DRPAI2,''B'')=''B'' AND PH.NUMPAC=DACH.NUMPAC ) ' ;
         END IF;
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Suppression des DRPAIE2=''B'' de la PHOTO',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);  
      ELSIF v_typeTable='p' THEN
         requete:= 'DELETE from PHOTO_'||lig_mapta.tablephy||' PH where PH.numpac='''||p_numpac||''' AND EXISTS ( select 1 from ( ';
         requete:=requete||' SELECT DISTINCT DACH2.NUMPAC,DACH2.pacmat, DACH2.NUMCNT ,DACH2.DRPAI2, MAX(DATE_EFF) OVER (PARTITION BY DACH2.pacmat, DACH2.NUMCNT) FROM DIC_ADM_CONTRAT_HISTO DACH2 ';
         requete:=requete||' WHERE DACH2.NUMPAC = '''||p_numpac||''' and DACH2.DATE_EFF <= LAST_DAY(TO_DATE('''||p_periodepaie||''',''yyyymmdd'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS(TO_DATE('''||p_periodepaie||''',''yyyymmdd''),-'||p_nb_mois_paie_init||') ';         
         if lig_mapta.tablephy in ('DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_ADM_CONTRAT_SITU') THEN 
           requete:=requete||' ) DACH   where PH.pacmat=DACH.pacmat and NVL(DACH.DRPAI2,''B'')=''B'' AND PH.NUMPAC=DACH.NUMPAC AND PH.NUMCNT=DACH.NUMCNT ) ' ;
         ELSE
           requete:=requete||' ) DACH   where PH.pacmat=DACH.pacmat and NVL(DACH.DRPAI2,''B'')=''B'' AND PH.NUMPAC=DACH.NUMPAC ) ' ;
         END IF;
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'Suppression des DRPAIE2=''B'' de la PHOTO',requete);
      EXECUTE_IMMEDIATE_STRING( requete,0);  
      END IF;      
    -- Fin
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_GENERATION_PHOTO *** '||p_numpac||' *** End *** '||lig_mapta.tablephy,null);

 EXCEPTION
 WHEN OTHERS THEN
  	FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_GENERATION_PHOTO : '||lig_mapta.tablephy ||' )' , 'Une erreur est survenue lors de la génération photo de la table '||lig_mapta.tablephy||'. Veuillez consulter la table TGE_FSED_ERREUR.');
    FSED.FSED_ERREUR(p_id,'TGE_GENERATION_PHOTO:'||lig_mapta.tablephy,P_NUMPAC,SQLCODE||'-'||SQLERRM);
    -- pour pouvoir suivre le traitement de génération photo sur le reste des tables après le catch de l'exception
    -- il suffit de commenter le 'raise'
    raise;
  END ;  
  END LOOP;
  CLOSE cur_mapta;

END TGE_GENERATION_PHOTO;
##
TAG_CHARSET=@€éèç
##
TGE_IMPORT_3040
=SQL=
create or replace PROCEDURE TGE_IMPORT_3040( P_LOGIN       IN VARCHAR2 , P_DATE_IMPORT IN VARCHAR2 , P_ROLE        IN VARCHAR2 ,
 P_ORIGINE     IN VARCHAR2 ,
 P_VALIDATION  IN NUMBER ,
 P_WITH30      IN NUMBER ,
 P_WITH40      IN NUMBER ,
 P_WITH60      IN NUMBER ,
 P_WITH70      IN NUMBER ,
 P_ISFSED      IN NUMBER ,
 P_CODLANG     IN VARCHAR2 )
 AS
 /********************************************************************************
 Version     : V5.05.004
 *********************************************************************************/
 w_err   VARCHAR2(2000);
 v_start NUMBER;
 v_stop  NUMBER;
 id_trt number ;
 dateMaj SYS_TRC_MODIF.datemaj%type;
 BEGIN
 v_start := DBMS_UTILITY.GET_TIME;
 id_trt := IMP_TRT_SEQ_ID.nextval;
 -- FVI on peut lire le pac une seule fois
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'TGE_IMPORT_3040 début');
 -- Mise à jour des donnees ID collab
 select CURRENT_TIMESTAMP into dateMaj from dual;
 -- Cartes d'annulation
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début delete pour gérer annulation  ');
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE  P,
 TGE_REF_TYPES_GTA   GTA,
 TGE_REF_ORIGINE_GTA  ori,
 TGE_IMPORT_ANNULATION A,DIC_ADM_CONTRAT_SITU C
 WHERE ABS.NUMPAC = A.NUMPAC
 AND   P.NUMPAC   = A.NUMPAC
 AND   C.NUMPAC   = A.NUMPAC
 AND   GTA.NUMPAC = A.NUMPAC
 AND   ori.NUMPAC = A.NUMPAC
 AND A.LOGIN       =P_LOGIN
 AND A.DATE_IMPORT =P_DATE_IMPORT
 AND NVL(GTA.MATRIC_GTA,'PAIEZAD')='PACMAT'
 AND GTA.CODE_GTA    = ori.CODE_GTA
 AND ori.CODE_ORIGINE =P.ORIGINE
 AND ABS.MATRIC                  =A.MATRICULE
 AND C.PACMAT   = A.PACMAT
 AND C.MATRIC = A.MATRICULE
 AND P.PAIEZAD = C.PAIEZAD
 AND A.ORIGINE                    =P.ORIGINE
 AND TO_DATE(A.PERIODE,'yyyymm')  =P.PERIODE
 AND P.CLE_ABSENCE               IS NOT NULL
 AND ABS.ID = P.CLE_ABSENCE
 );
 
 DELETE
 FROM TGE_ABSENCES ABS
 WHERE EXISTS
 (SELECT 1
 FROM TGE_INCIDENTS_PAIE p,TGE_REF_TYPES_GTA gta
 WHERE p.numpac = abs.numpac
 AND p.cle_absence IS NOT NULL
 AND p.cle_absence = abs.id
 and p.numpac = gta.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =p.numpac and code_origine =p.origine )
 AND EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 AND a.matricule                 = abs.matric
 AND ( NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 )
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_INCIDENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN                   =P_LOGIN
 AND a.DATE_IMPORT               =P_DATE_IMPORT
 AND a.numpac                    =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND   NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine                   =p.origine
 AND to_date(a.periode,'yyyymm') =p.periode
 );
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_ELEMENTS_PAIE p
 WHERE EXISTS
 (SELECT *
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD'
 AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement ='*');
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD')='PACMAT'
 AND( EXISTS (
 SELECT c.paiezad
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC  =a.NUMPAC
 AND   C.NUMPAC    = p.numpac
 AND   C.paiezad   = p.paiezad
 AND   c.PACMAT    = a.PACMAT
 ) )
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 DELETE
 FROM TGE_DONNEES_PAIE p
 WHERE EXISTS
 (SELECT 1
 FROM TGE_IMPORT_ANNULATION a,TGE_REF_TYPES_GTA gta
 WHERE a.LOGIN    =P_LOGIN
 AND a.DATE_IMPORT=P_DATE_IMPORT
 AND a.numpac     =p.numpac
 and gta.numpac   = p.numpac
 and gta.code_gta =(select code_gta from TGE_REF_ORIGINE_GTA where numpac =a.numpac and code_origine = a.origine )
 AND  NVL(gta.matric_gta,'PAIEZAD') ='PAIEZAD' AND a.paiezad = p.paiezad
 AND a.origine    =p.origine
 AND a.periode    =p.periode
 )
 AND (( p.origine in (select code_origine
 from tge_ref_origine_gta
 where numpac=p.numpac
 and code_origine=p.origine
 and  mode_3060 !='F')AND p.code_remplacement ='R')
 OR p.code_remplacement is null);
 
 IF P_WITH30 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 30');
 TGE_IMPORT_30 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH30 , P_CODLANG, 'VI', datemaj );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_30 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30, w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 IF P_WITH40 =1 THEN
 
 
 --Supprimer les absences sur le mois de paie M-1 si le flag Retro GC = 'O'
 DELETE from
 TGE_ABSENCES A
 WHERE exists
 (
 SELECT ABS.ID FROM TGE_ABSENCES ABS
 INNER JOIN TGE_IMPORT_INCIDENTS t on ( ABS.MATRIC = T.MATRICULE and T.numpac=ABS.NUMPAC)
 INNER JOIN TGE_INCIDENTS_PAIE INC ON ABS.ID = INC.CLE_ABSENCE
 INNER JOIN TGE_REF_PAC PAC ON INC.NUMPAC = PAC.NUMPAC
 INNER JOIN TGE_REF_PER PER ON PER.NUMPAC = INC.NUMPAC AND PER.PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(PAC.PERIODEENCOURS,'yyyymm'),-1),'YYYYMM')
 INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD REC ON INC.NUMPAC = REC.NUMPAC AND INC.PAIEZAD = REC.PAIEZAD AND REC.MOIS_PAIE = PAC.PERIODEENCOURS
 WHERE INC.DATE_EFFET BETWEEN DEBUT_PER_RECUEIL_RETRO AND FIN_PER_RECUEIL_RETRO
 AND REC.RETRO_GC = '1'
 AND A.ID=ABS.ID
 AND T.LOGIN=P_LOGIN
 AND T.DATE_IMPORT=P_DATE_IMPORT
 );
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 40');
 TGE_CONTROLE_40 (p_login,p_date_import,NULL,p_codlang , P_ISFSED);
 
 --controle chevauchement
 TGE_CONTROLE_40_CHEVAUCHEMENT(P_LOGIN, P_DATE_IMPORT ,null , P_CODLANG );
 
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_40' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 BEGIN
 --Controle Abscence
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début Controle Abscence');
 
 TGE_CONTROLE_ABSENCES (p_login,p_date_import,NULL,p_codlang);
 EXCEPTION
 WHEN OTHERS THEN
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'imp:TGE_CONTROLE_ABSENCES' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 IF P_VALIDATION = 1 THEN
 --Creation Abscence
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : Creation Abscence');
 
 INSERT
 INTO TGE_ABSENCES
 (
 ID,
 MATRIC ,
 MOTIF ,
 NUMPAC ,
 DATE_DEBUT ,
 DEBUT_MA ,
 DATE_FIN ,
 FIN_MA ,
 DUREE ,
 DATE_IJEDI ,
 LOGIN_CREATE ,
 DATE_CREATE ,
 ROLE_CREATE ,
 ORIGINE_CREATE ,
 LOGIN_MAJ ,
 DATE_MAJ ,
 ROLE_MAJ ,
 ORIGINE_MAJ ,
 CLE_IMPORT,
 STATUT
 )
 SELECT SEQ_TGE_ABSENCES.NEXTVAL ,
 ABSENCES.MATRIC ,
 ABSENCES.MOTIF ,
 ABSENCES.NUMPAC ,
 ABSENCES.DATE_DEBUT ,
 ABSENCES.DEBUT_MA ,
 ABSENCES.DATE_FIN ,
 ABSENCES.FIN_MA ,
 ABSENCES.DUREE ,
 ABSENCES.DATE_IJEDI ,
 ABSENCES.LOGIN_CREATE ,
 ABSENCES.DATE_CREATE ,
 ABSENCES.ROLE_CREATE ,
 ABSENCES.ORIGINE_CREATE ,
 ABSENCES.LOGIN_MAJ ,
 ABSENCES.DATE_MAJ ,
 ABSENCES.ROLE_MAJ ,
 ABSENCES.ORIGINE_MAJ ,
 ABSENCES.CLE_IMPORT,
 ABSENCES.STATUT
 FROM
 (SELECT
 (SELECT C.MATRIC
 FROM DIC_ADM_CONTRAT_SITU C
 WHERE C.NUMPAC = INCI.NUMPAC
 AND C.PAIEZAD  =INCI.PAIEZAD
 AND rownum     = 1
 )                                   AS MATRIC,--matricule
 INCI.CODE_IP                        AS MOTIF, --motif
 INCI.NUMPAC                         AS NUMPAC,
 to_date(INCI.DATE_DEBUT,'yyyyMMdd') AS DATE_DEBUT, --date debut
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END                               AS DEBUT_MA , --debutma
 to_date(INCI.DATE_FIN,'yyyyMMdd') AS DATE_FIN,  --date fin
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 THEN DECODE (INCI.HEURES_IP,'1.00','J',DECODE(IS_NUMBER(INCI.HEURES_IP),0.5,'M','J'))
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
 THEN DECODE (INCI.HEURES_IP ,NULL,'J','D')
 END AS FIN_MA, --Fin ma
 CASE
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'J'
 AND ((SELECT pre.demi_journee
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 )                       = 1 
 OR IS_NUMBER(INCI.HEURES_IP) = 0.5
)
 THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *8*3600,NULL) 
 WHEN UPPER(
 (SELECT pre.unite
 FROM tge_ref_pre pre
 WHERE pre.CODE_INCIDENT = INCI.CODE_IP
 AND pre.numpac          = inci.NUMPAC
 ))                      = 'H'
THEN NVL(is_number(REPLACE(INCI.HEURES_IP,'.',',')) *3600,NULL) 
ELSE NULL
 END        AS DUREE,        --duree
 NULL       AS DATE_IJEDI,   --date_ijedi
 INCI.LOGIN AS LOGIN_CREATE, --login create
 sysdate    AS DATE_CREATE,  --date_create
 P_ROLE     AS ROLE_CREATE,
 P_ORIGINE  AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 INCI.LOGIN AS LOGIN_MAJ,      --login maj
 sysdate    AS DATE_MAJ,       -- date_maj
 P_ROLE     AS ROLE_MAJ,
 P_ORIGINE  AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj   :ToolsTge.ORI_ECRAN_IMPORT_INCIDENT
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 'Q' AS STATUT
 FROM TGE_IMPORT_INCIDENTS INCI
 WHERE EXISTS (
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             = INCI.numpac
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 )
 UNION
 (SELECT ri.CODE_INCIDENT
 FROM TGE_REF_PRE ri
 WHERE ri.numpac             ='*'
 AND ri.code_incident        =inci.code_ip
 AND ri.OPTION_CONSERV_HISTO = 'A'
 AND NOT EXISTS
 (SELECT *
 FROM TGE_REF_PRE rt2
 WHERE rt2.numpac      =iNCI.numpac
 AND rt2.code_incident =ri.code_incident
 )
 ))
 AND INCI.LOGIN       = P_LOGIN
 AND INCI.DATE_IMPORT = P_DATE_IMPORT
 AND ((INCI.ERREURS  IS NULL
 AND INCI.STATUT      = 'TRAIT')
 OR (INCI.ERREURS    IS NOT NULL
 AND INCI.STATUT      = 'TRANS'))
 ) ABSENCES ;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidAbsences' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 --insertion des incidents
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début validation : insertion des incidents');
 
 INSERT
 INTO TGE_INCIDENTS_PAIE
 (
 ID ,
 NUMPAC,
 PAIEZAD,
 PERIODE,
 TYPE_TRAITEMENT,
 TYPE_IP,
 CODE_IP,
 DATE_EFFET,
 CODE_IMPUTATION,
 HEURES,
 ORIGINE,
 LOGIN_CREATE,
 DATE_CREATE,
 ROLE_CREATE,
 ORIGINE_CREATE,
 LOGIN_MAJ,
 DATE_MAJ,
 ROLE_MAJ,
 ORIGINE_MAJ,
 CLE_IMPORT,
 CLE_ABSENCE,
 IDPACMAT,
 ENVOYE,
 type_writer,
 ACTION_RETRO,
 ACTION_RETRO_DATE,
 DERNIER_CODE_OPE 
 )
 SELECT SEQ_TGE_INCIDENTS_PAIE.NEXTVAL ,
 INCIDENTS.NUMPAC,
 INCIDENTS.PAIEZAD,
 INCIDENTS.PERIODE,
 INCIDENTS.TYPE_TRAITEMENT,
 INCIDENTS.TYPE_IP,
 INCIDENTS.CODE_IP,
 INCIDENTS.DATE_EFFET,
 INCIDENTS.CODE_IMPUTATION,
 INCIDENTS.HEURES,
 INCIDENTS.ORIGINE,
 INCIDENTS.LOGIN_CREATE,
 INCIDENTS.DATE_CREATE,
 INCIDENTS.ROLE_CREATE,
 INCIDENTS.ORIGINE_CREATE,
 INCIDENTS.LOGIN_MAJ,
 INCIDENTS.DATE_MAJ,
 INCIDENTS.ROLE_MAJ,
 INCIDENTS.ORIGINE_MAJ,
 INCIDENTS.CLE_IMPORT,
 INCIDENTS.CLE_ABSENCE,
 INCIDENTS.IDPACMAT,
 INCIDENTS.ENVOYE,
 CASE
 WHEN TGE_REF_ORIGINE_GTA.MODE_T2    ='R'
 AND TGE_REF_ORIGINE_GTA.ENVOI_MODE_R='N'
 THEN 'N'
 ELSE NULL
 END AS TYPE_writer,
  CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN 'C' ELSE NULL
 END as ACTION_RETRO,
 CASE WHEN pac.DEB_RETRO IS NOT NULL AND TO_char(incidents.periode,'YYYYMM') < pac.PERIODEENCOURS
 THEN sysdate ELSE NULL
 END as ACTION_RETRO_DATE,
 'C' as DERNIER_CODE_OPE
 FROM
 (SELECT INCI.numpac              AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 UNION ALL
 SELECT INCI.numpac               AS NUMPAC,          --numpac
 INCI.paiezad                   AS PAIEZAD,         --paiezad
 to_date(INCI.periode,'YYYYMM') AS PERIODE,         --periode
 INCI.type_traitement           AS TYPE_TRAITEMENT, --type_traitement
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN INCI.type_heure
 WHEN (INCI.heures_ip IS NOT NULL
 OR INCI.code_ip      IS NOT NULL )
 THEN DECODE (INCI.code_ip,'HP','T',
 (SELECT p.option_conserv_histo
 FROM TGE_REF_PRE p
 WHERE p.numpac     =inci.numpac
 AND p.code_incident=inci.code_ip
 ))
 END AS type_ip ,--DIT 37186 type_ip
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN DECODE ( INCI.TYPE_HEURE,'R','HT','HP')
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN INCI.CODE_IP
 END                                           AS CODE_IP,  ---code_ip DIT 37186
 to_date(INCI.date_debut,'yyyymmdd')-1 +a.jour AS DATE_EFFET,--date effet
 CASE
 WHEN INCI.type_heure IN ('T','R')
 AND INCI.domaine_imp  ='H'
 THEN INCI.code_imputation
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.code_ip     IS NOT NULL
 AND INCI.domaine_imp ='1'
 THEN INCI.code_imputation
 END AS code_imputation,-- code_imputation DIT 37186
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN is_number(INCI.heures_trav)
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN is_number(INCI.heures_ip)
 END          AS heures,       -- heures DIT 37186
 INCI.origine AS ORIGINE,      --origine
 INCI.LOGIN   AS LOGIN_CREATE, --login create
 sysdate      AS DATE_CREATE,  --date_create
 P_ROLE       AS ROLE_CREATE,
 P_ORIGINE    AS ORIGINE_CREATE, --'IMPORT_INCIDENT',--origine_create
 INCI.LOGIN   AS LOGIN_MAJ,      --login maj
 sysdate      AS DATE_MAJ,       -- date_maj
 P_ROLE       AS ROLE_MAJ,
 P_ORIGINE    AS ORIGINE_MAJ,--'IMPORT_INCIDENT',--origine_maj
 P_LOGIN
 || '#'
 ||INCI.DATE_IMPORT
 || '#'
 ||INCI.NUMLIGNE AS CLE_IMPORT,--cle_import
 CASE
 WHEN INCI.type_heure IN ('T','R')
 THEN NULL
 WHEN INCI.heures_ip IS NOT NULL
 OR INCI.CODE_IP     IS NOT NULL
 THEN
 (SELECT id
 FROM tge_absences
 WHERE cle_import =P_LOGIN
 ||'#'
 ||INCI.DATE_IMPORT
 ||'#'
 ||INCI.NUMLIGNE
 )
 END AS CLE_ABSENCE ,--cleAbsence
 CASE
 WHEN INCI.NUMPAC IS NOT NULL
 AND INCI.PACMAT  IS NOT NULL
 THEN RPAD(INCI.NUMPAC,6)
 || INCI.PACMAT
 ELSE ' '
 END  AS IDPACMAT, --idpacmat
 NULL AS ENVOYE    --envoye
 FROM TGE_IMPORT_INCIDENTS INCI,
 -- FVI modif GTA_PAR_ANNEE
 (
 SELECT LEVEL "JOUR" FROM dual CONNECT BY LEVEL <=
 (SELECT MAX(to_number(to_date(date_fin,'YYYYMMDD') - to_date(date_debut,'YYYYMMDD') )) + 1
 FROM TGE_IMPORT_INCIDENTS
 WHERE LOGIN    =P_LOGIN
 AND DATE_IMPORT=P_DATE_IMPORT
 AND ((ERREURS IS NULL
 AND STATUT     = 'TRAIT')
 OR (ERREURS   IS NULL
 AND STATUT     = 'TRANS'))
 )
 ) a
 WHERE INCI.LOGIN                                      =P_LOGIN
 AND INCI.DATE_IMPORT                                  =P_DATE_IMPORT
 AND IS_DATE(INCI.date_debut,'yyyymmdd')               =1
 AND IS_DATE(INCI.date_fin,'yyyymmdd')                 =1
 AND (to_date(INCI.date_debut,'yyyymmdd')-1 + a.jour )<=to_date(INCI.date_fin,'yyyymmdd')
 AND ( (INCI.heures_ip                                IS NOT NULL
 OR INCI.code_ip                                      IS NOT NULL)
 AND INCI.type_heure                                  IS NOT NULL)
 AND ((INCI.ERREURS                                   IS NULL
 AND INCI.STATUT                                       = 'TRAIT')
 OR (INCI.ERREURS                                     IS NULL
 AND INCI.STATUT                                       = 'TRANS'))
 )INCIDENTS,
 TGE_REF_PAC pac,
 TGE_REF_ORIGINE_GTA
 WHERE INCIDENTS.numpac=TGE_REF_ORIGINE_GTA.numpac
 AND INCIDENTS.ORIGINE =TGE_REF_ORIGINE_GTA.CODE_ORIGINE
 AND pac.numpac = incidents.numpac;
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  ' ||sqlerrm;
 FSED.FSED_ERREUR( id_trt , 'ValidIncidents' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'Trace SYS_TRC_MODIF : insertion TGE_INCIDENTS_PAIE');
 SYS_TRACE_MODIF(P_LOGIN,dateMaj,'3','SAISIE_IND_INCIDENT',
 'CARTE=40&LOGIN='||P_LOGIN||'&DATE_IMPORT='||P_DATE_IMPORT||'&ROLE=3'||'&ORIGINE='||P_ORIGINE,
 'Import Batch 40','C',null,null,null,null);
 -- Mise à jour des lignes d'import qui sont encore en erreur après validation, statut prend TRANS
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,' UPDATE TGE_IMPORT_INCIDENTS');
 UPDATE TGE_IMPORT_INCIDENTS
 SET STATUT      ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND (ERREURS   IS NOT NULL
 AND STATUT      = 'TRAIT');
 -- Regroupement des absences importé
 TGE_REGROUPE_ABS(P_LOGIN||'#'||P_DATE_IMPORT);
 -- Mise à jour des lignes d'import qui ne sont plus en erreur après validation, statut prend FIN
 UPDATE TGE_IMPORT_INCIDENTS
 SET ERREURS     ='',
 STATUT        ='FIN'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ((ERREURS  IS NULL
 AND STATUT      = 'TRAIT')
 OR (ERREURS    IS NULL
 AND STATUT      = 'TRANS'));
 UPDATE TGE_IMPORT_LISTE
 SET NBLIGNES_ERR =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ELEMENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND ERREURS    IS NOT NULL
 ),
 NBLIGNES_IMP =
 (SELECT COUNT(*)
 FROM TGE_IMPORT_ELEMENTS
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 ),
 STATUT        ='TRANS'
 WHERE LOGIN     = P_LOGIN
 AND DATE_IMPORT = p_date_import
 AND TYPE        = 5;
 END IF;
 END IF ;
 
 IF P_WITH60 =1 OR P_WITH70 =1 THEN
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'début controle carte 60');
 TGE_IMPORT_6070 (P_LOGIN , P_DATE_IMPORT , P_ROLE , P_ORIGINE , P_VALIDATION , P_WITH60 , P_WITH70 , P_CODLANG, 'VI' );
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := w_err||'  '||sqlerrm;
 FSED.FSED_ERREUR( id_trt , ' imp:TGE_IMPORT_6070 ' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH60 ||','|| P_WITH70 , w_err );
 IF (P_LOGIN != 'BATCH') THEN
 -- On remonte l'erreur à l'application
 raise;
 END IF;
 END ;
 END IF;
 v_stop := DBMS_UTILITY.GET_TIME;
 --DBMS_OUTPUT.PUT_LINE(((v_stop-v_start)*10) || ' ms');
 --FIXME utiliser la procédure trace_dbms_output()
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE3040 '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc(P_DATE_IMPORT,'fin TGE_IMPORT_3040 KO : '||w_err);
 FSED.FSED_ERREUR( id_trt , 'TGE3040' , P_LOGIN ||','|| P_DATE_IMPORT ||','|| P_ROLE ||','|| P_ORIGINE ||','|| P_VALIDATION||','|| P_WITH30 ||','|| P_WITH40 , w_err );
 raise;
 END TGE_IMPORT_3040;
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
DELETE FROM BATCH_DESCRIPTION WHERE FAMILLE = 'BATCH_PTG' AND CLASSE_NAME = 'fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Evt_Gestil'
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
INSERT INTO BATCH_DESCRIPTION (FAMILLE,CLASSE_NAME,LIBELLE,TYPE_UTILISATEUR,ARRET_TRT) VALUES ('BATCH_PTG','fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Evt_Gestil','Initialisation d''une donnée dans Gestil','CLIENT','OUI')
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
UPDATE BATCH_DESCRIPTION SET LIBELLE = 'Initialisation des embauches dans Gestil', FAMILLE = 'BATCH_GES' WHERE FAMILLE = 'BATCH_PTG' AND CLASSE_NAME = 'fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Gestil_EMB_Population'
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
DELETE FROM BATCH_DESCRIPTION WHERE FAMILLE = 'BATCH_GES' AND CLASSE_NAME = 'fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Gestil_MJD'
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
INSERT INTO BATCH_DESCRIPTION (FAMILLE,CLASSE_NAME,LIBELLE,TYPE_UTILISATEUR,ARRET_TRT) VALUES ('BATCH_GES','fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Gestil_MJD','Initialisation d''une donnée dans Gestil','CLIENT','OUI')
##
HELPDESK_DOMAINE
==
DELETE FROM HELPDESK_DOMAINE WHERE TYPDOM IN ('GGC')
##
HELPDESK_DOMAINE
==
INSERT INTO HELPDESK_DOMAINE(TYPDOM,LIBDOM,DOMALIAS,ESTACTIF,ORDRE,ESTPUBLIE,PUBEXP,PUBMAN,PUBCOL,ESERVICE_EN,OFFRE,ESERVICE_FR) VALUES ('GGC','Genéral/Gestion du compte','GGC','O','1','O','O','O','O','General/Account','ADP France','Genéral/Gestion du compte')
##
HELPDESK_DOMAINE
==
DELETE FROM HELPDESK_DOMAINE WHERE TYPDOM IN ('HHG')
##
HELPDESK_DOMAINE
==
INSERT INTO HELPDESK_DOMAINE(TYPDOM,LIBDOM,DOMALIAS,ESTACTIF,ORDRE,ESTPUBLIE,PUBEXP,PUBMAN,PUBCOL,ESERVICE_EN,OFFRE,ESERVICE_FR) VALUES ('HHG','HR/HCM/GTA','HHG','O','1','O','O','O','O','HR/HCM','ADP France','HR/HCM/GTA')
##
HELPDESK_DOMAINE
==
DELETE FROM HELPDESK_DOMAINE WHERE TYPDOM IN ('P')
##
HELPDESK_DOMAINE
==
INSERT INTO HELPDESK_DOMAINE(TYPDOM,LIBDOM,DOMALIAS,ESTACTIF,ORDRE,ESTPUBLIE,PUBEXP,PUBMAN,PUBCOL,ESERVICE_EN,OFFRE,ESERVICE_FR) VALUES ('P','Paie','PAI','O','1','O','O','O','O','Payroll','ADP France','Paie')
##
HELPDESK_DOMAINE
==
DELETE FROM HELPDESK_DOMAINE WHERE TYPDOM IN ('TG')
##
HELPDESK_DOMAINE
==
INSERT INTO HELPDESK_DOMAINE(TYPDOM,LIBDOM,DOMALIAS,ESTACTIF,ORDRE,ESTPUBLIE,PUBEXP,PUBMAN,PUBCOL,ESERVICE_EN,OFFRE,ESERVICE_FR) VALUES ('TG','Système et GAP','TGA','O','1','O','O','O','O','System','ADP France','Système et GAP')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('1')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('1','GGC','Rapport Audit','O','','','','Auditing report','Rapport Audit')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('2')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('2','GGC','Mise à jour données clients','O','','','','Update company details','Mise à jour données clients')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('3')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('3','HHG','Gestion des temps','O','','','','Time & Attendance','Gestion des temps')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('30')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('30','HHG','Administration des avantages','O','','','','Benefits Administration','Gestion des avantages sociaux')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('31')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('31','HHG','Data Cloud (rapports)','O','','','','Data Cloud (reports)','Dématérialisation')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('32')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('32','HHG','Droit du travail','O','','','','Employement Law','Droit du travail')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('33')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('33','HHG','Congés et absences','O','','','','Leave & Absence','Absences - Congés')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('34')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('34','HHG','Gestion de la performance','O','','','','Performance Management','Gestion de la performance')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('35')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('35','HHG','Rapports','O','','','','Reports','Rapports')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('36')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('36','HHG','En libre service','O','','','','Self Service','Self service')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('37')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('37','HHG','Demande de formation','O','','','','Training request','Demande de formation')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('4')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('4','P','Planning paie','O','','','','Dates/timetable','Planning paie')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('5')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('5','P','Traitements fin d''année','O','','','','End of year','Traitements fin d''année')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('6')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('6','P','Course supplémentaire','O','','','','Additional run','Traitement de paie exceptionnel')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('7')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('7','P','Déclaratifs','O','','','','Legislation/Compliance/Tax','Déclaratifs')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('8')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('8','P','Etats post paie - Comptabilité','O','','','','Output','Etats post paie - Comptabilité')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('9')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('9','P','Gestion des paiements','O','','','','Payments/Money Movement','Gestion des paiements')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('10')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('10','P','Traitement de paie','O','','','','Payroll calculation','Traitement de paie')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('11')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('11','P','Paramétrage paie','O','','','','Payroll set-up','Paramétrage paie')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('12')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('12','P','Données à intégrer','O','','','','Submit data','Données à intégrer')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('13')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('13','P','Solde de tout compte','O','','','','Termination','Solde de tout compte')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('16')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('16','TG','Habilitations','O','','','','Access','Habilitations')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('17')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('17','TG','GAP','O','','','','Administrative management','GAP')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('18')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('18','TG','Interface','O','','','','Interface','Interface')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('19')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('19','TG','Incidents','O','','','','Issue','Incidents')
##
HELPDESK_MODULE
==
DELETE FROM HELPDESK_MODULE WHERE CODMOD IN ('20')
##
HELPDESK_MODULE
==
INSERT INTO HELPDESK_MODULE(CODMOD,TYPDOM,LIBMOD,ESTPUBLIE,EMAILCONTACT,EQUIPE,PLUGIN,ESERVICE_EN,ESERVICE_FR) VALUES ('20','TG','Requêtes','O','','','','Query','Requêtes')
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GES001' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'GES001', 'ADM', 'fr_fr', 0, 'Veuillez sélectionner le type de traitement', 1 )
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GES002' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'GES002', 'ADM', 'fr_fr', 0, 'Veuillez sélectionner la donnée', 1 )
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GES003' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'GES003', 'ADM', 'fr_fr', 0, 'Veuillez sélectionner au moins un matricule ou une population', 1 )
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GES004' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'GES004', 'ADM', 'fr_fr', 0, 'Le traitement Gestil (#1) est lancé', 1 )
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'GES005' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'GES005', 'ADM', 'fr_fr', 0, 'Veuillez saisir les clés composées', 1 )
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODERR='GENWKF64' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODMOD ='GEN' 
'GENWKF64','GEN','fr_fr',0,'L''embauche est présente dans les fichiers de paie et la date de début de contrat doit être supérieure au "#1" (Date limite rétro).',1
##
SYS_PAGES_MODAL
==
DELETE FROM SYS_PAGES_MODAL WHERE NOM_PAGE in ('Ext.adp.ZPaie.AjoutThemeGap', 'Ext.adp.ZPaie.AppelTableDonneesJsp')
'Ext.adp.ZPaie.AjoutThemeGap','Ajouter un thème GAP'
'Ext.adp.ZPaie.AppelTableDonneesJsp','Ajouter des données écran'
##
SYS_PAGES_MODAL
==
DELETE FROM SYS_PAGES_MODAL WHERE NOM_PAGE in ('Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestil', 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestilEtape1', 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestilEtape2')
'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestil','Lancer un traitement Gestil'
'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestilEtape1','Lancer un traitement Gestil'
'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestilEtape2','Lancer un traitement Gestil'
##
TAG_CHARSET=@€éèç
##
SYS_PAGES_MODAL_RESTRICTION
==
DELETE FROM SYS_PAGES_MODAL_RESTRICTION WHERE NOM_PAGE_MODALE IN ('Ext.adp.Modules.ZPaie.modal.ExportData','Ext.adp.Modules.ZPaie.modal.ExportElements','Ext.adp.Modules.ZPaie.modal.ExportIncidents','Ext.adp.Modules.ZPaie.modal.ExportAbsences')
'Ext.adp.Modules.ZPaie.modal.ExportAbsences','Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
'Ext.adp.Modules.ZPaie.modal.ExportData','Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
'Ext.adp.Modules.ZPaie.modal.ExportElements','Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
'Ext.adp.Modules.ZPaie.modal.ExportIncidents','Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='PARAM_THEMES_GAP' and IDREQUETE = '5'
'PARAM_THEMES_GAP','5','Administrateur','SYS_SCH_PROFIL','CODE_PROFIL,LIBELLE','CODE_PROFIL,LIBELLE',null,'0','true','LIBELLE',null,'Profil',null
##
SYS_SCH_JSON
==
DELETE FROM SYS_SCH_JSON WHERE NOM_PAGE in ('Modules/ZPaie/GestionThemesGAP.jsp','Ext.adp.ZPaie.GestionThemeGap')
'Ext.adp.ZPaie.GestionThemeGap','DonneesJspJsonServlet'
'Ext.adp.ZPaie.GestionThemeGap','GestionThemesGapJsonServlet'
##
SYS_SCH_JSON
==
DELETE FROM SYS_SCH_JSON WHERE NOM_PAGE = 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.GestionTraitementGestil'
'Ext.adp.Moteur.Comp.WebAdmin.Gestil.GestionTraitementGestil','GestionTraitementGestilJsonServlet'
##
SYS_SCH_JSON
==
DELETE FROM SYS_SCH_JSON WHERE NOM_PAGE = 'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportAbsencesJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportElementsJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportIncidentsJsonServlet'
'Modules/ZPaie/GestionFeuillesImportExportSansGAP.jsp','ZTGEExportJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
==
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.ZPaie.GestionThemeGap'
'Ext.adp.ZPaie.GestionThemeGap','','','GestionThemesGapJsonServlet'
##
SYS_SCH_PAGE_INITIALIZER
=SQL IFEXIST=SYS_SCH_PAGE_INITIALIZER=
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.GestionTraitementGestil'
##
SYS_SCH_PAGE_INITIALIZER
=SQL IFEXIST=SYS_SCH_PAGE_INITIALIZER=
INSERT INTO SYS_SCH_PAGE_INITIALIZER ( NOM_PAGE, VAR_SYS, ERR_MSG, JSONSERVLET ) VALUES ( 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.GestionTraitementGestil', NULL, NULL, 'GestionTraitementGestilJsonServlet' )
##
SYS_SCH_PAGE_INITIALIZER
=SQL IFEXIST=SYS_SCH_PAGE_INITIALIZER=
DELETE FROM SYS_SCH_PAGE_INITIALIZER WHERE NOM_PAGE = 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestil'
##
SYS_SCH_PAGE_INITIALIZER
=SQL IFEXIST=SYS_SCH_PAGE_INITIALIZER=
INSERT INTO SYS_SCH_PAGE_INITIALIZER ( NOM_PAGE, VAR_SYS, ERR_MSG, JSONSERVLET ) VALUES ( 'Ext.adp.Moteur.Comp.WebAdmin.Gestil.CreerTraitementGestil', NULL, 'GES001;GES002;GES003;GES004;GES005', 'GestionTraitementGestilJsonServlet' )
##
TAG_CHARSET=@€éèç
##
SYS_TGE_THEME_PROFILS
=SQL IFNOTEXIST=SYS_TGE_THEME_PROFILS=
CREATE TABLE "SYS_TGE_THEME_PROFILS" ( "NUMPAC" VARCHAR2(6), "ID_THEME" NUMBER(38), "CODE_PROFIL" NUMBER, PRIMARY KEY ( NUMPAC, ID_THEME, CODE_PROFIL ))
##
IDX_INCIDENTS_CLE_ABS
=SQL IF_INDEX_NOTEXIST=IDX_INCIDENTS_CLE_ABS=
CREATE INDEX IDX_INCIDENTS_CLE_ABS ON TGE_INCIDENTS_PAIE (CLE_ABSENCE)
##
TAG_CHARSET=@€éèç
##
TGE_REF_DCY
=SQL IFEXIST=TGE_REF_DCY_SAV=
DROP TABLE TGE_REF_DCY_SAV
##
TGE_REF_DCY
=SQL IFNOTEXIST=TGE_REF_DCY_SAV=
CREATE TABLE TGE_REF_DCY_SAV as select * from TGE_REF_DCY
##
TGE_REF_DCY
=SQL IFEXIST=TGE_REF_DCY=
DROP TABLE TGE_REF_DCY
##
TGE_REF_DCY
=SQL IFNOTEXIST=TGE_REF_DCY=
CREATE TABLE TGE_REF_DCY (NUMPAC VARCHAR2(6 BYTE) NOT NULL ENABLE, CODE_CLASSE_HORAIRE_OTT NUMBER(3,0) NOT NULL ENABLE, DATE_DEBUT DATE DEFAULT to_date('19000101', 'YYYYMMDD') NOT NULL ENABLE, DATE_FIN DATE DEFAULT to_date('20991231', 'YYYYMMDD') NOT NULL ENABLE, LIBELLE_CLASSE_HORAIRE_OTT VARCHAR2(30 BYTE) NOT NULL ENABLE, CODE_TYPE_PERIODE NUMBER(3,0), CODE_CYCLE_OTT NUMBER(3,0) NOT NULL ENABLE, PRIMARY KEY (NUMPAC, CODE_CLASSE_HORAIRE_OTT, DATE_DEBUT))
##
TGE_REF_DCY
=SQL IFEXIST=TGE_REF_DCY=
INSERT into TGE_REF_DCY ( select * from TGE_REF_DCY_SAV ) 
##
TGE_REF_DCY
=SQL IFEXIST=TGE_REF_DCY_SAV=
DROP TABLE TGE_REF_DCY_SAV
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'SELECT_POP'
'SELECT_POP','Sélection de la population à traiter'
##
TGE_GESTIL_SQL
==
DELETE FROM TGE_GESTIL_SQL
'TGE_GESTIL_NAT','10','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.LIB),'' ''),30,'' '') || RPAD(NVL(TRIM(AD_NAT.CDE_CORR),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_NAT.FAM_NAT),'' ''),10,'' '') || RPAD(NVL(TRIM(BO_FAM_NAT.FAM_LIB),'' ''),30,'' '')¿FROM AD_NAT¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1 ON ( T1.NAT = TRIM(AD_NAT.NOM) )¿LEFT JOIN BO_FAM_NAT ON (BO_FAM_NAT.FAM_NOM = TRIM(AD_NAT.FAM_NAT)) ¿WHERE AD_NAT.DOM = ''2'' AND T1.NUMPAC = ''$NUMPAC'' AND T1.ACTIF = ''O''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''NATNRS'',6,'' '') || RPAD(''Nature non renseignée'',30,'' '') || RPAD('''',6,'' '') || RPAD('''',10,'' '') || RPAD('''',30,'' '')¿FROM DUAL'
'TGE_GESTIL_LISNATD','20','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_LISNATD.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_LISNAT.LIB),'' ''),30,'' '') || RPAD(NVL(TRIM(AD_LISNATD.NAT),'' ''),6,'' '') ¿FROM AD_LISNATD¿JOIN AD_LISNAT ON (AD_LISNAT.DOM = AD_LISNATD.DOM AND AD_LISNAT.NOM = AD_LISNATD.NOM) ¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1 ON ( T1.NAT = TRIM(AD_LISNATD.NAT) )¿WHERE AD_LISNATD.DOM = ''2'' AND T1.NUMPAC = ''$NUMPAC'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_FAM_HOR','20','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(FAM_NOM,'' ''),3,'' '') || RPAD(NVL(TRIM(FAM_LIB),'' ''),30,'' '') FROM BO_FAM_HOR'
'TGE_GESTIL_HOR','40','1',NULL,'0',NULL,NULL,'WITH HOR AS (SELECT ''$NUMPAC'' AS NUMPAC, ID , TRIM(NOM1) AS NOM1 , LIB , TRIM(FAM) AS FAM , TYP¿FROM AD_HOR T1¿WHERE DOM = ''2'' AND DAT_EFF = (SELECT MAX(DAT_EFF) FROM AD_HOR T2 WHERE T2.DOM = T1.DOM AND T2.ID = T1.ID GROUP BY T2.ID)¿)¿SELECT RPAD(NVL(NUMPAC,'' ''),6,'' '') || TO_CHAR(NVL(ID,0),''S00000000000'') || RPAD(NVL(NOM1,'' ''),6,'' '') || RPAD(NVL(LIB,'' ''),30,'' '') || RPAD(NVL(FAM,'' ''),3,'' '') || RPAD(NVL(BO_FAM_HOR.FAM_LIB,'' ''),30,'' '') || RPAD(NVL(TYP,'' ''),1,'' '')¿FROM HOR¿LEFT JOIN BO_FAM_HOR ON (HOR.FAM = TRIM(BO_FAM_HOR.FAM_NOM))¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || ''+00000000000'' || ''HORNRS'' || RPAD(''Horaire non renseigné'',30,'' '') || RPAD(NVL('''','' ''),3,'' '') || RPAD('''',30,'' '') || RPAD('''',1,'' '')¿FROM DUAL'
'TGE_GESTIL_CYCHOR','50','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(NOM),'' ''),8,'' '') || RPAD(NVL(LIB,'' ''),30,'' '') ¿FROM AD_CYCHOR T1¿WHERE DOM = ''2'' AND DAT_EFF = (SELECT MAX(DAT_EFF) FROM AD_CYCHOR T2 WHERE T2.DOM = T1.DOM AND T2.NOM = T1.NOM  GROUP BY T2.NOM)¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''CYCNRS'',8,'' '') || RPAD(''Cycle non renseigné'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_LIE','60','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || TO_CHAR(NVL(ID,0),''S00000000000'') || RPAD(NVL(TRIM(NOM1),'' ''),6,'' '') || RPAD(NVL(TRIM(LIB),'' ''),30,'' '') ¿FROM AD_LIE¿WHERE DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || ''+00000000000'' || RPAD(''LIENRS'',6,'' '') || RPAD(''Lieu non renseigné'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_FAM_NAT','70','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(FAM_NOM,'' ''),10,'' '') || RPAD(NVL(FAM_LIB,'' ''),30,'' '') ¿FROM BO_FAM_NAT'
'TGE_GESTIL_CODD_ANOMALIE','80','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_CODD.CLE1),'' ''),20,'' '') || RPAD(NVL(AD_CODD.LIB,'' ''),30,'' '') ¿FROM AD_CODD¿WHERE AD_CODD.DOM = ''2'' AND AD_CODD.NOM = ''ANOMALIE''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''##'',20,'' '') || RPAD(''Journée sans anomalie'',30,'' '')¿FROM DUAL'
'TGE_GESTIL_POS','90','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_POS.NOM),'' ''),10,'' '') || RPAD(NVL(AD_POS.LIB,'' ''),30,'' '') ¿FROM AD_POS¿WHERE AD_POS.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''POSNRS'',10,'' '') || RPAD(''Poste non renseigné'',30,'' '') FROM DUAL'
'TGE_GESTIL_EQU','100','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_EQU.NOM),'' ''),6,'' '') || RPAD(NVL(AD_EQU.LIB,'' ''),30,'' '') ¿FROM AD_EQU¿WHERE AD_EQU.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''EQUNRS'',6,'' '') || RPAD(''Equipe non renseignée'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_PER','110','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_PER.NOM),'' ''),6,'' '') || RPAD(NVL(AD_PER.LIB,'' ''),30,'' '') ¿FROM AD_PER¿WHERE AD_PER.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''PERNRS'',6,'' '') || RPAD(''Période non renseignée'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_PERDAT','120','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(NOM),'' ''),6,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿FROM BO_PERDAT'
'TGE_GESTIL_CPT','130','1',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(TRIM(AD_CPT.NOM),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_CPT.PER),'' ''),6,'' '') ||RPAD(NVL(AD_CPT.LIB,'' ''),30,'' '') ¿FROM AD_CPT¿WHERE AD_CPT.DOM = ''2''¿UNION¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(''CPTNRS'',6,'' '') || RPAD(''PERNRS'',6,'' '') ||RPAD(''Compteur non renseigné'',30,'' '') ¿FROM DUAL'
'TGE_GESTIL_MATJOU','140','0',NULL,'1','AD_MATJOU','NUMPAC = ''$NUMPAC'' AND ( DAT_JOU >= TO_DATE(''$DATE'',''YYYY/MM/DD'') OR DAT_JOU < ADD_MONTHS(SYSDATE,-37) )','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU¿WHERE DOM = 2 AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','141','0','BIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_BIS¿WHERE DOM = 2 AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','142','0','HIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_HIS¿WHERE DOM = 2 AND SOC = ''HRV'''
'TGE_GESTIL_MATJOU','143','0','TER','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(HOR,0),''S00000000000'') || RPAD(NVL(HOR_TYP,'' ''),1,'' '') ¿ || RPAD(NVL(HRS_DEBB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_DEBB,0),''S000000'') || RPAD(NVL(HRS_FINB,'' ''),6,'' '') || TO_CHAR(NVL(HRJ_FINB,0),''S000000'') || RPAD(NVL(STATUT,'' ''),1,'' '')¿ || RPAD(NVL(TRIM(ANO1), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO2), ''##''),2,'' '') || RPAD(NVL(TRIM(ANO3), ''##''),2,'' '') || TO_CHAR(NVL(HOR_CAL,0),''S00000000000'') || RPAD(NVL(PROV_MP,'' ''),1,'' '')¿ || RPAD(NVL(PROV_PTR,'' ''),1,'' '') || TO_CHAR(NVL(HOR_MAT_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_T,0),''S00000000000'') || TO_CHAR(NVL(HOR_MAT_R,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_P,0),''S00000000000'') || TO_CHAR(NVL(HOR_POE_T,0),''S00000000000'')¿ || RPAD(NVL(TRIM(CYC_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_T), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_MAT_T), ''CYCNRS''),8,'' '')¿ || RPAD(NVL(TRIM(CYC_MAT_R), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_P), ''CYCNRS''),8,'' '') || RPAD(NVL(TRIM(CYC_POE_T), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(LIEU_P,0),''S00000000000'')¿ || TO_CHAR(NVL(LIEU1,0),''S00000000000'') || TO_CHAR(NVL(LIEU2,0),''S00000000000'') || TO_CHAR(NVL(LIEU3,0),''S00000000000'') || TO_CHAR(NVL(LIEU4,0),''S00000000000'') || TO_CHAR(NVL(LIEU5,0),''S00000000000'')¿ || RPAD( NVL(TRIM(NAT_THE), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_THE,'' ''),8,'' '') || TO_CHAR(NVL(TPM_THE,0),''S00000000000'') || TO_CHAR(NVL(ROUND(TPM_THE/60, 3),0),''S00000000D000'') || CASE WHEN TPM_THE=0 THEN 0 ELSE 1 END¿FROM AD_MATJOU_TER¿WHERE DOM = 2 AND SOC = ''HRV'''
'TGE_GESTIL_MATJOUD','150','0',NULL,'1','AD_MATJOU','NUMPAC = ''$NUMPAC'' AND ( DAT_JOU >= TO_DATE(''$DATE'',''YYYY/MM/DD'') OR DAT_JOU < ADD_MONTHS(SYSDATE,-37) )','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = 2 AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','151','0','BIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_BIS AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = 2 AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','152','0','HIS','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_HIS AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = 2 AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATJOUD','153','0','TER','1','AD_MATJOU',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(DAT_JOU, ''YYYY/MM/DD''),''YYYYMMDD'') || RPAD(NVL(ENR,'' ''),1,'' '') || TO_CHAR(NVL(RANG,0),''S000000'') || RPAD(NVL(FNATANO,'' ''),1,'' '')¿ || RPAD(NVL(NAT_TYP,'' ''),1,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT), ''NATNRS''),6,'' '') || RPAD(NVL(TRIM(AD_MATJOUD.NAT_S), ''NATNRS''),6,'' '') || RPAD(NVL(TPS_NAT,'' ''),8,'' '') || TO_CHAR(NVL(TPM_NAT,0),''S00000000000'')¿ || TO_CHAR(NVL(ROUND(TPD_NAT/1000, 3),0),''S00000000D000'') || RPAD(NVL(TRIM(HRS_DEB),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_DEB),0),''S000000'') || RPAD(NVL(TRIM(HRS_FIN),'' ''),6,'' '') || TO_CHAR(NVL(TRIM(HRJ_FIN),0),''S000000'')¿ || RPAD(NVL(TRIM(CODPLJ),'' ''),1,'' '') || RPAD(NVL(TRIM(PROV_LIEU),'' ''),1,'' '') || TO_CHAR(NVL(LIEU,0),''S00000000000'') || RPAD(NVL(TRIM(POS), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_P,0),''S00000000000'') || RPAD(NVL(TRIM(POS_P), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_P), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(LIEU_T,0),''S00000000000'') || RPAD(NVL(TRIM(POS_T), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_T), ''EQUNRS''),6,'' '')¿ || TO_CHAR(NVL(LIEU_R,0),''S00000000000'') || RPAD(NVL(TRIM(POS_R), ''POSNRS''),10,'' '')|| RPAD(NVL(TRIM(EQU_R), ''EQUNRS''),6,'' '') || TO_CHAR(NVL(QTE1,0),''S00000000000'') || TO_CHAR(NVL(QTE2,0),''S00000000000'')¿ || RPAD(NVL(TRIM(PROV_EVE),'' ''),1,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_DEB_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN_EVE), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '') || RPAD(NVL(TRIM(Z2_VSTATE),'' ''),1,'' '')¿FROM AD_MATJOUD_TER AD_MATJOUD¿JOIN TGE_GESTIL_NAT_ETL@ADPLINK_DATA T1  ON( T1.NUMPAC = ''$NUMPAC'' AND T1.NAT = TRIM(AD_MATJOUD.NAT))  ¿WHERE AD_MATJOUD.DOM = 2 AND AD_MATJOUD.SOC = ''HRV'' AND AD_MATJOUD.CODSEG=''B'' AND T1.ACTIF = ''O'''
'TGE_GESTIL_MATCPT','160','0',NULL,'1','AD_MATCPT','NUMPAC = ''$NUMPAC'' AND ( DAT_CPT >= TO_DATE(''$DATE'',''YYYY/MM/DD'') OR DAT_CPT < ADD_MONTHS(SYSDATE,-37) )','SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(BO_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN BO_CPT_PER_ETL ON ( BO_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND BO_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=2 AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','161','0','BIS','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(BO_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_BIS AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN BO_CPT_PER_ETL ON ( BO_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND BO_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER )¿WHERE AD_MATCPT.DOM=2 AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','162','0','HIS','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(BO_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_HIS AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN BO_CPT_PER_ETL ON ( BO_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND BO_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=2 AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATCPT','163','0','TER','1','AD_MATCPT',NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(AD_MATCPT.MAT,'' ''),8,'' '') || TO_CHAR(TO_DATE(TRIM(AD_MATCPT.DAT_CPT), ''YYYY/MM/DD''),''YYYYMMDD'')¿|| TO_CHAR(NVL(TO_DATE(LEAD(AD_MATCPT.DAT_CPT) OVER (PARTITION BY AD_MATCPT.MAT, AD_MATCPT.CPT, AD_MATCPT.PER, BO_PERDAT.RANG, BO_MATCON_NUMSITU.NUMSITU ORDER BY AD_MATCPT.DAT_CPT), ''YYYY/MM/DD'')-1 , TO_DATE(AD_MATCPT.DAT_CPT, ''YYYY/MM/DD'')),''YYYYMMDD'')¿|| RPAD(NVL(TRIM(AD_MATCPT.CPT),'' ''),6,'' '') || RPAD(NVL(TRIM(AD_MATCPT.PER),'' ''),6,'' '') || RPAD(NVL(AD_MATCPT.FFINPER,'' ''),1,'' '') || TO_CHAR(NVL(AD_MATCPT.ANNEE,0),''S000000'') || TO_CHAR(NVL(AD_MATCPT.NUMPER,0),''S00000000000'')¿|| TO_CHAR(NVL(ROUND(AD_MATCPT.VARJ/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'')|| TO_CHAR(NVL(ROUND(AD_MATCPT.VAL/BO_CPT_PER_ETL.DIVISEUR_VAL_VARJ,3),0),''S00000000D000'') || RPAD(NVL(BO_CPT_PER_ETL.UNITE,'' ''),20,'' '')¿|| TO_CHAR(NVL(BO_PERDAT.RANG,0),''S000000'')¿FROM AD_MATCPT_TER AD_MATCPT¿JOIN BO_MATCON_NUMSITU ON ( BO_MATCON_NUMSITU.MAT = AD_MATCPT.MAT)¿JOIN BO_CPT_PER_ETL ON ( BO_CPT_PER_ETL.CPT = TRIM(AD_MATCPT.CPT) AND BO_CPT_PER_ETL.PER = TRIM(AD_MATCPT.PER) )¿JOIN BO_PERDAT ON ( BO_PERDAT.NOM = AD_MATCPT.PER)¿WHERE AD_MATCPT.DOM=2 AND AD_MATCPT.SOC=''HRV'' ¿AND AD_MATCPT.DAT_CPT BETWEEN BO_MATCON_NUMSITU.ENTREE AND BO_MATCON_NUMSITU.SORTIE¿AND AD_MATCPT.DAT_CPT BETWEEN BO_PERDAT.DAT_DEB AND BO_PERDAT.DAT_FIN'
'TGE_GESTIL_MATHOR','170','0',NULL,'0',NULL,NULL,'WITH MATHORP AS ( SELECT MAT P_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') P_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') P_DAT_FIN, ENR P_ENR, CYCHOR P_CYCHOR, HOR P_HOR FROM AD_MATHOR WHERE ENR=''P'' )¿,MATHORT AS ( SELECT MAT T_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') T_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') T_DAT_FIN, ENR T_ENR, CYCHOR T_CYCHOR, HOR T_HOR FROM AD_MATHOR WHERE ENR=''T'' )¿,MATHORR AS ( SELECT MAT R_MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') R_DAT_AFF, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'') R_DAT_FIN, ENR R_ENR, CYCHOR R_CYCHOR, HOR R_HOR FROM AD_MATHOR WHERE ENR=''R'' )¿,MATHORAFF AS ( ¿SELECT DISTINCT MAT, TO_DATE(TRIM(DAT_AFF),''YYYY/MM/DD'') DAT_AFF FROM AD_MATHOR¿UNION¿SELECT DISTINCT MAT, TO_DATE(TRIM(DAT_FIN),''YYYY/MM/DD'')+1 DAT_AFF FROM AD_MATHOR WHERE DAT_FIN != ''2099/12/31''¿)¿,MATHORAFFP AS (¿SELECT MATHORAFF.MAT, MATHORAFF.DAT_AFF, LEAD(MATHORAFF.DAT_AFF) OVER (PARTITION BY MATHORAFF.MAT ORDER BY MATHORAFF.DAT_AFF ) DAT_FIN , MATHORP.P_CYCHOR, MATHORP.P_HOR, MATHORP.P_ENR, MATHORP.P_DAT_AFF, MATHORP.P_DAT_FIN¿FROM MATHORAFF¿JOIN MATHORP ON ( MATHORP.P_MAT = MATHORAFF.MAT)¿WHERE MATHORAFF.DAT_AFF BETWEEN MATHORP.P_DAT_AFF AND MATHORP.P_DAT_FIN ¿)¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MATHORAFFP.MAT,'' ''),8,'' '') || RPAD(NVL(NVL(NVL(R_ENR, T_ENR), P_ENR),'' ''),1,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(NVL(MATHORAFFP.DAT_FIN-1, TO_DATE(''31/12/2099'', ''DD/MM/YYYY'')),''YYYYMMDD''),'' ''),8,'' '')  ¿|| DECODE(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATHORAFFP.P_HOR,0), ''T'', NVL(T_HOR,0), ''R'', NVL(R_HOR,0)), 0, ''C'', ''H'')¿|| RPAD(NVL(TRIM(MATHORR.R_CYCHOR), ''CYCNRS'') ,8,'' '') ¿|| TO_CHAR(TRIM(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATHORAFFP.P_HOR,0), ''T'', NVL(T_HOR,0), ''R'', NVL(R_HOR,0))),''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.P_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORAFFP.P_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORAFFP.P_CYCHOR),''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(MATHORAFFP.P_HOR),0) ,''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORT.T_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORT.T_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORT.T_CYCHOR),''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(T_HOR),0) ,''S00000000000'')¿|| RPAD(NVL(TO_CHAR(MATHORR.R_DAT_AFF,''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(MATHORR.R_DAT_FIN,''YYYYMMDD''),'' ''),8,'' '') ¿|| RPAD(NVL(TRIM(MATHORR.R_CYCHOR), ''CYCNRS''),8,'' '') || TO_CHAR(NVL(TRIM(R_HOR),0) ,''S00000000000'')¿FROM MATHORAFFP¿LEFT OUTER JOIN MATHORT ON ( MATHORT.T_MAT = MATHORAFFP.MAT AND MATHORAFFP.DAT_AFF BETWEEN MATHORT.T_DAT_AFF AND MATHORT.T_DAT_FIN )¿LEFT OUTER JOIN MATHORR ON ( MATHORR.R_MAT = MATHORAFFP.MAT AND MATHORAFFP.DAT_AFF BETWEEN MATHORR.R_DAT_AFF AND MATHORR.R_DAT_FIN )'
'TGE_GESTIL_MATLIE','180','0',NULL,'0',NULL,NULL,'WITH MATLIEP AS ( SELECT MAT P_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) P_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) P_DAT_FIN, ENR P_ENR, LIEU P_LIEU, POS P_POS, EQU P_EQU, ¿	FHORPOE P_FHORPOE, HRS_DEB P_HRS_DEB, HRJ_DEB P_HRJ_DEB, HRS_FIN P_HRS_FIN, HRJ_FIN P_HRJ_FIN, POURC P_POURC ¿	FROM AD_MATLIE WHERE ENR=''P'' AND RANG=0 )¿, MATLIET AS ( SELECT MAT T_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) T_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) T_DAT_FIN, ENR T_ENR, LIEU T_LIEU, POS T_POS, EQU T_EQU,¿	FHORPOE T_FHORPOE, HRS_DEB T_HRS_DEB, HRJ_DEB T_HRJ_DEB, HRS_FIN T_HRS_FIN, HRJ_FIN T_HRJ_FIN, POURC T_POURC ¿	FROM AD_MATLIE WHERE ENR=''T'' AND RANG=0 )¿, MATLIER AS ( SELECT MAT R_MAT , DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) R_DAT_AFF, ¿	DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) R_DAT_FIN, ENR R_ENR, LIEU R_LIEU, POS R_POS, EQU R_EQU,¿	FHORPOE R_FHORPOE, HRS_DEB R_HRS_DEB, HRJ_DEB R_HRJ_DEB, HRS_FIN R_HRS_FIN, HRJ_FIN R_HRJ_FIN, POURC R_POURC ¿	FROM AD_MATLIE WHERE ENR=''R'' AND RANG=0 )¿, MATLIEAFF AS ( SELECT DISTINCT MAT, DECODE(TRIM(HRE_AFF), ''23:59'', TO_DATE(DAT_AFF, ''YYYY/MM/DD'')+1, TO_DATE(DAT_AFF||'' ''||HRE_AFF,''YYYY/MM/DD HH24:MI'')) DAT_AFF ¿	FROM AD_MATLIE WHERE RANG=0¿		UNION¿	SELECT DISTINCT MAT, DECODE(TRIM(HRE_FIN), ''23:59'', TO_DATE(DAT_FIN, ''YYYY/MM/DD'')+1, TO_DATE(DAT_FIN||'' ''||HRE_FIN,''YYYY/MM/DD HH24:MI'')) DAT_AFF ¿	FROM AD_MATLIE WHERE RANG=0 AND DAT_FIN != ''2099/12/31'')¿,MATLIEAFFP AS ( SELECT MATLIEAFF.MAT, MATLIEAFF.DAT_AFF, LEAD(MATLIEAFF.DAT_AFF) OVER (PARTITION BY MATLIEAFF.MAT ORDER BY MATLIEAFF.DAT_AFF ) DAT_FIN, MATLIEP.P_LIEU, MATLIEP.P_POS¿	, MATLIEP.P_EQU, MATLIEP.P_ENR, MATLIEP.P_DAT_AFF, MATLIEP.P_DAT_FIN, MATLIEP.P_FHORPOE, MATLIEP.P_HRS_DEB, MATLIEP.P_HRJ_DEB, MATLIEP.P_HRS_FIN, MATLIEP.P_HRJ_FIN, MATLIEP.P_POURC¿	FROM MATLIEAFF¿	LEFT OUTER JOIN MATLIEP ON ( MATLIEP.P_MAT = MATLIEAFF.MAT AND MATLIEAFF.DAT_AFF >= MATLIEP.P_DAT_AFF AND MATLIEAFF.DAT_AFF < MATLIEP.P_DAT_FIN))¿SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MATLIEAFFP.MAT,'' ''),8,'' '') || RPAD(NVL(TO_CHAR(MATLIEAFFP.DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| RPAD(NVL(TO_CHAR(MATLIEAFFP.DAT_FIN,''YYYYMMDDHH24MI''),''210001010000''),12,'' '')¿|| RPAD(NVL(NVL(NVL(R_ENR, T_ENR), P_ENR),'' '') ,1,'' '')  || DECODE(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATLIEAFFP.P_LIEU,0), ''T'', NVL(MATLIET.T_LIEU,0), ''R'', NVL(MATLIER.R_LIEU,0)), 0, ''P'', ''L'')¿|| TO_CHAR(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(MATLIEAFFP.P_LIEU,0), ''T'', NVL(MATLIET.T_LIEU,0), ''R'', NVL(MATLIER.R_LIEU,0), 0) ,''S00000000000'')¿|| RPAD(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(TRIM(MATLIEAFFP.P_POS),''POSNRS''), ''T'', NVL(TRIM(MATLIET.T_POS),''POSNRS''), ''R'', NVL(TRIM(MATLIER.R_POS),''POSNRS''), ''POSNRS''),10,'' '') ¿|| RPAD(DECODE(NVL(NVL(R_ENR, T_ENR), P_ENR), ''P'', NVL(TRIM(MATLIEAFFP.P_EQU),''EQUNRS''), ''T'', NVL(TRIM(MATLIET.T_EQU),''EQUNRS''), ''R'', NVL(TRIM(MATLIER.R_EQU),''EQUNRS''), ''EQUNRS''),6,'' '')¿|| RPAD(NVL(TO_CHAR(MATLIEAFFP.P_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIEAFFP.P_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIEAFFP.P_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIEAFFP.P_POS),''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIEAFFP.P_EQU),''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIEAFFP.P_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIEAFFP.P_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIEAFFP.P_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIEAFFP.P_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIEAFFP.P_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIEAFFP.P_POURC,0) ,''S000000'') ¿|| RPAD(NVL(TO_CHAR(MATLIET.T_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIET.T_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIET.T_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIET.T_POS),''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIET.T_EQU),''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIET.T_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIET.T_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIET.T_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIET.T_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIET.T_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIET.T_POURC,0) ,''S000000'') ¿|| RPAD(NVL(TO_CHAR(MATLIER.R_DAT_AFF,''YYYYMMDDHH24MI''),'' ''),12,'' '') || RPAD(NVL(TO_CHAR(MATLIER.R_DAT_FIN,''YYYYMMDDHH24MI''),'' ''),12,'' '')¿|| TO_CHAR(NVL(MATLIER.R_LIEU,0) ,''S00000000000'') || RPAD(NVL(TRIM(MATLIER.R_POS), ''POSNRS''),10,'' '') || RPAD(NVL(TRIM(MATLIER.R_EQU), ''EQUNRS''),6,'' '')¿|| RPAD(NVL(MATLIER.R_FHORPOE,0),1,'' '') || RPAD(NVL(MATLIER.R_HRS_DEB,'' ''),6,'' '')|| TO_CHAR(NVL(MATLIER.R_HRJ_DEB,0) ,''S000000'')¿|| RPAD(NVL(MATLIER.R_HRS_FIN,'' ''),6,'' '') || TO_CHAR(NVL(MATLIER.R_HRJ_FIN,0) ,''S000000'') || TO_CHAR(NVL(MATLIER.R_POURC,0) ,''S000000'') ¿FROM MATLIEAFFP¿LEFT OUTER JOIN MATLIET ON ( MATLIET.T_MAT = MATLIEAFFP.MAT AND MATLIEAFFP.DAT_AFF >= MATLIET.T_DAT_AFF AND MATLIEAFFP.DAT_AFF < MATLIET.T_DAT_FIN )¿LEFT OUTER JOIN MATLIER ON ( MATLIER.R_MAT = MATLIEAFFP.MAT AND MATLIEAFFP.DAT_AFF >= MATLIER.R_DAT_AFF AND MATLIEAFFP.DAT_AFF < MATLIER.R_DAT_FIN )'
'TGE_GESTIL_MATBAD','190','0',NULL,'0',NULL,NULL,'SELECT RPAD(NVL(''$NUMPAC'','' ''),6,'' '') || RPAD(NVL(MAT,'' ''),8,'' '') || RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_AFF), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(TO_CHAR(TO_DATE(TRIM(DAT_FIN), ''YYYY/MM/DD''),''YYYYMMDD''),'' ''),8,'' '')¿|| RPAD(NVL(BADGE,'' ''),8,'' '')¿|| RPAD(NVL(LIB,'' ''),30,'' '')¿|| RPAD(NVL(CAT,'' ''),2,'' '')¿|| RPAD(NVL(AFFCPT,'' ''),6,'' '')¿|| RPAD(NVL(REGA,'' ''),2,'' '')¿|| RPAD(NVL(REGT,'' ''),2,'' '')¿|| RPAD(NVL(REGS,'' ''),2,'' '')¿|| RPAD(NVL(F_TPS_REEL,'' ''),1,'' '')¿|| RPAD(NVL(F_TRAIT_POE,'' ''),1,'' '')¿FROM AD_MATBAD¿WHERE ENR = ''M'''
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/GestionThemesGAP.jsp', 'Ext.adp.ZPaie.GestionThemeGap')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Gestion des traitements Gestil','Ext.adp.Moteur.Comp.WebAdmin.Gestil.GestionTraitementGestil',null,'false')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/modal/ExportData.jsp','Ext.adp.Modules.ZPaie.modal.ExportData')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/modal/ExportAbsences.jsp','Ext.adp.Modules.ZPaie.modal.ExportAbsences')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/modal/ExportElements.jsp','Ext.adp.Modules.ZPaie.modal.ExportElements')
##
ADM_CHANGE_NOM_PAGE
==
CALL ADM_CHANGE_NOM_PAGE('Modules/ZPaie/modal/ExportIncidents.jsp','Ext.adp.Modules.ZPaie.modal.ExportIncidents')
