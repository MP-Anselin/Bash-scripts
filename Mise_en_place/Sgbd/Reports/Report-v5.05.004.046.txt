##
TAG_CHARSET=@€éèç
TAG_IMPORT=5.05.004.R046
##
AUDIT_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE FUNCTION AUDIT_ALIM_PERIODE_INDIV(
    p_id           IN NUMBER,
    p_numpac       IN VARCHAR2,
    p_periode_paie IN VARCHAR2,
    p_pacmat       IN VARCHAR2 )
  RETURN AUDIT_ALIM_PERIODE_TAB
AS
  w_err VARCHAR2(2000);
  req CLOB;
type PERIODE
IS
  RECORD
  (
    paiezad DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE,
    deb_rec DATE,
    fin_rec DATE );
type PERIODE_TAB
IS
  TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab1 PERIODE_TAB;
  retour AUDIT_ALIM_PERIODE_TAB := AUDIT_ALIM_PERIODE_TAB();
  w_tablegxp TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_Y326 TGE_REF_MAPDO.DONNEEGXP%TYPE;
  w_Y327 TGE_REF_MAPDO.DONNEEGXP%TYPE;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','AUDIT_ALIM_PERIODE_INDIV début');
  BEGIN
    SELECT tablegxp ,
      Y326_DONNEE ,
      Y327_DONNEE
    INTO w_tablegxp,
      w_Y326,
      w_Y327
    FROM
      ( SELECT DISTINCT c.element,
        c.tablegxp,
        c.DONNEEGXP
      FROM tge_ref_mapdo c
      WHERE C.numpac = p_numpac
      AND c.element IN ('Y326','Y327')
      UNION ALL
      SELECT DISTINCT c.element,
        c.tablegxp,
        c.DONNEEGXP
      FROM tge_ref_mapdo c
      WHERE C.numpac                  ='*'
      AND c.element                  IN ('Y326','Y327')
      AND (c.TABLEGXP,c.ELEMENT) NOT IN
        (SELECT a.TABLEGXP,
          a.element
        FROM tge_ref_mapdo a
        WHERE a.numpac = p_numpac
        AND A.ELEMENT IN ('Y326','Y327')
        )
      ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN('Y326' AS Y326 ,'Y327' AS Y327));
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','AUDIT_ALIM_PERIODE_INDIV ERR : Erreurs de configuration de TGE_REF_MAPDO : NUMPAC = ''' || p_numpac || ''' AND ELEMENT in (''Y326'',''Y327'')');
    raise;
  END;
req         := 'select rec.PAIEZAD, rec.'|| w_Y326|| ' as deb_rec , rec.'|| w_Y327||' as fin_rec ';
req         := req || 'from '|| w_tablegxp ||' rec inner join DIC_ADM_CONTRAT_SITU sit on rec.numpac = sit.numpac AND rec.paiezad = sit.paiezad ';
req         := req || 'where NVL(sit.DSFSC,TO_DATE(''20990101'',''YYYYMMDD'')) >= last_day(to_date(to_char('''|| p_periode_paie ||'''),''yyyymm'')) ';
req         := req || 'AND ((rec.'|| w_Y326 ||' IS NULL AND rec.'|| w_Y327 ||' IS NOT NULL) OR (rec.'|| w_Y326 ||' IS NOT NULL AND rec.'|| w_Y327 ||' IS NULL)) ';
req         := req || 'AND sit.numpac = ''' || p_numpac || '''';
IF p_pacmat IS NOT NULL THEN
  req       := req || ' AND sit.pacmat = ''' || p_pacmat || '''';
END IF;
TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','AUDIT_ALIM_PERIODE_INDIV EXECUTE ' || req);
EXECUTE IMMEDIATE req BULK COLLECT INTO tab1;
IF tab1.exists(1) THEN
  FOR i IN tab1.first..tab1.last
  LOOP
    retour.extend;
    retour(retour.count) := AUDIT_ALIM_PERIODE_COL(tab1(i).PAIEZAD, tab1(i).deb_rec,tab1(i).fin_rec);
  END LOOP;
END IF;
TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin AUDIT_ALIM_PERIODE_INDIV OK');
RETURN retour;
EXCEPTION
WHEN OTHERS THEN
  w_err := SQLCODE;
  w_err := 'AUDIT_ALIM_PERIODE_INDIV '||w_err||' '||sqlerrm;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin AUDIT_ALIM_PERIODE_INDIV KO ' || w_err);
  raise;
END AUDIT_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
DIC_PERIODES_RECEUIL_HISTO_AFTER_ROW
=SQL=
create or replace FUNCTION DIC_PERIOD_REC_HISTO_AFTER_ROW RETURN CLOB
 AS
 v_retour CLOB;
 BEGIN
 
 v_retour := '
 v_numpac                 := NVL(v_ligNew.NUMPAC, v_ligOld.NUMPAC);
 v_paiezad                := NVL(v_ligNew.paiezad, v_ligOld.paiezad);
 v_periode                := NVL(v_ligNew.PRH_MOIS_PAIE, v_ligOld.PRH_MOIS_PAIE);
 IF NOT IS_EQ_DATE(v_ligNew.PRH_DATE_DEBUT_1, v_ligOld.PRH_DATE_DEBUT_1) OR NOT IS_EQ_DATE(v_ligNew.PRH_DATE_FIN_1, v_ligOld.PRH_DATE_FIN_1) THEN
  IF (not paiezadPacPeriodModifed.exists(v_numpac||''#''||v_paiezad) or paiezadPacPeriodModifed(v_numpac||''#''||v_paiezad).PERIODE > v_periode) THEN 
   paiezadPacPeriodModifed(v_numpac||''#''||v_paiezad):= TGE_PAC_PAIEZAD_PERIOD_RETRO(v_paiezad,v_numpac,v_periode);
  END IF;
 END IF;
 ';
 RETURN v_retour;
 END DIC_PERIOD_REC_HISTO_AFTER_ROW;
##
TAG_CHARSET=@€éèç
##
IS_EQ
=SQL=
CREATE OR REPLACE FUNCTION IS_EQ(
  pVal1 VARCHAR2, 
  pVal2 VARCHAR2) 
RETURN BOOLEAN 
IS
BEGIN
  RETURN NVL(pVal1,'__NULL__')=NVL(pVal2,'__NULL__');
END IS_EQ;
##
TAG_CHARSET=@€éèç
##
IS_EQ_DATE
=SQL=
CREATE OR REPLACE FUNCTION IS_EQ_DATE(
  pVal1 in DATE, 
  pVal2 in DATE, 
  pFormat VARCHAR2 DEFAULT 'yyyymmdd') 
RETURN BOOLEAN 
IS
BEGIN
  RETURN NVL(TO_CHAR(pVal1,pFormat),'__NULL__')=NVL(TO_CHAR(pVal2,pFormat),'__NULL__');
END IS_EQ_DATE;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_MP_NOTIF
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  v_typeTable VARCHAR(1);
  date_eff_exists NUMBER;
  PROC_DEX_UPDATING CLOB;
  PROC_DEX_UPDATING_TMP CLOB;
  PROC_DEX_CONDITION CLOB;
  v_existeDonneeDex boolean;
  v_eventDexPrec VARCHAR(100);
  v_cleSecondaireDex VARCHAR(300);
  v_cle1SecondaireMP VARCHAR(100);
  v_cle2SecondaireMP VARCHAR(100);
  v_cle3SecondaireMP VARCHAR(100);
  v_action_acr varchar2(3);
  v_event_sans_acr MP_MAPPING_EVENT_DATA.EVENT%TYPE; 
  v_condition_acr_old_vide CLOB;
  v_condition_acr_new_vide CLOB;
  v_condition_donnee CLOB;
  v_condition_donnee_sql CLOB;
  -- Ce tableau indexé contient l'association entre un couple NOM_DONNEE/EVENT et le SOUS_EVENT à générer
  TYPE T_MAPPING_SPECIF_SOUS_EVENT IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(150);
  mappingSubEventByEventAndData T_MAPPING_SPECIF_SOUS_EVENT;
  -- Ce tableau indexé contient l'association entre un SOUS_EVENT et le IF qui conditionne sa génération
  TYPE T_SUB_EVENT_CONDITION IS TABLE OF CLOB INDEX BY VARCHAR2(100);
  subEventToGenWithCond T_SUB_EVENT_CONDITION;
  subEventToGen VARCHAR2(100);
  -- Ce tableau indexé contient l'association entre un EVENT et la liste des SOUS_EVENT de cet EVENT, et le IF qui conditionne sa génération
  TYPE T_SUB_EVENT_CONDITION_BY_EVENT IS TABLE OF T_SUB_EVENT_CONDITION INDEX BY VARCHAR2(100);
  subEventToGenWithCondByEvent T_SUB_EVENT_CONDITION_BY_EVENT;
  -- Ce tableau indexé contient l'association entre un couple EVENT(de type ACR)/CONDITION et la clause SQL de cette condition
  TYPE T_CONDITION_EVENT_ACR IS TABLE OF CLOB INDEX BY VARCHAR2(4000);
  conditionForEventAcr T_CONDITION_EVENT_ACR;

  CURSOR cur_donneesDex IS
    SELECT DISTINCT DMED.EVENT, RDMU.NOM_DONNEE, RDMU.CONDITION, DMED.NOM_DONNEE_DEX_OU_EVENT, LTRIM(REGEXP_SUBSTR(DMED.EVENT, '\.[acr]{1,3}$'),'.') ACTION_ACR, REGEXP_REPLACE(DMED.EVENT, '\.[acr]{1,3}$','') EVENT_SANS_ACR, UTC.DATA_TYPE 
    FROM MP_MAPPING_EVENT_DATA DMED, REF_DONNEE_MAPPING_UX RDMU, REF_DONNEE_GEN_MODEL RDGM, USER_TAB_COLS UTC 
    WHERE 
      UTC.COLUMN_NAME=RDMU.NOM_DONNEE AND UTC.TABLE_NAME=NOM_TABLE 
      AND DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX 
      AND RDMU.NOM_DONNEE=RDGM.NOM_DONNEE 
      AND DMED.UTILISE_TRIGGER='O' 
      AND DMED.TYPE='D' 
      AND RDGM.NOM_DICTIONNAIRE=NOM_TABLE 
    ORDER BY DMED.EVENT, RDMU.NOM_DONNEE;
  lig_donneeDex cur_donneesDex%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

  CURSOR cur_eventsDex IS
    SELECT DISTINCT DMED.EVENT, RDMU.CONDITION, LTRIM(REGEXP_SUBSTR(DMED.EVENT, '\.[acr]{1,3}$'),'.') ACTION_ACR, REGEXP_REPLACE(DMED.EVENT, '\.[acr]{1,3}$','') EVENT_SANS_ACR 
    FROM MP_MAPPING_EVENT_DATA DMED, REF_DONNEE_MAPPING_UX RDMU, REF_DONNEE_GEN_MODEL RDGM 
    WHERE 
      DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX 
      AND RDMU.NOM_DONNEE=RDGM.NOM_DONNEE 
      AND DMED.UTILISE_TRIGGER='O' 
      AND DMED.TYPE='D' 
      AND RDGM.NOM_DICTIONNAIRE=NOM_TABLE;
  lig_eventDex cur_eventsDex%rowtype;

  CURSOR cur_subEventsDex IS
    SELECT NOM_DONNEE, EVENT, SOUS_EVENT
    FROM MP_SPECIF_MAP_SOUS_EVENT_DATA
    WHERE 
      NOM_DONNEE IN (
        SELECT COLUMN_NAME 
        FROM USER_TAB_COLS 
        WHERE TABLE_NAME=NOM_TABLE
      );
  lig_subEventDex cur_subEventsDex%rowtype;

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_MP_NOTIF_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  -- On vérifie si la table va générer des évènements pour DEX (au moins une donnée mappée, ou dictionnaire DIC_ADM_CONTRAT qui gère l'embauche et le départ)
  v_existeDonneeDex := false;
  IF nom_table='DIC_ADM_CONTRAT' THEN
    v_existeDonneeDex := TRUE;
  ELSE
    OPEN cur_donneesDex;
    LOOP FETCH cur_donneesDex INTO lig_donneeDex ;
      EXIT WHEN cur_donneesDex%NOTFOUND OR v_existeDonneeDex;
      v_existeDonneeDex := true;
    END LOOP;
    CLOSE cur_donneesDex;
  END IF;

  IF NOT v_existeDonneeDex THEN
    RETURN NULL;
  END IF;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_MP_NOTIF_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew '||NOM_TABLE||'%ROWTYPE) IS 
 v_matric VARCHAR2(32);
 v_paiezad VARCHAR2(8);
 v_dexaction varchar2(1);
 v_dexCleSecondaire VARCHAR2(100);
 exist_contrat_for_matric NUMBER ;
 TYPE eventsTabType is  table of MP_EVENTS%ROWTYPE ;
 eventsTab eventsTabType := eventsTabType();
 TYPE subEventsTabType is  table of MP_SPECIF_SOUS_EVENT%ROWTYPE ;
 subEventsTab subEventsTabType := subEventsTabType();
 v_processEventDex boolean;
 v_processEventDexTypeAcr varchar2(3);
 v_toutesLesNouvelleValVides boolean;
 v_toutesLesAnciennesValVides boolean;
BEGIN
';

  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  date_eff_exists := 0;
  IF nom_table = 'DIC_ADM_PERSO_HISTO' OR nom_table = 'DIC_ADM_CONTRAT_HISTO' THEN
    date_eff_exists := 1;
  ELSIF nom_table <> 'DIC_ADM_PERSO' AND nom_table <> 'DIC_ADM_CONTRAT' THEN
    SELECT COUNT(*)
    INTO date_eff_exists
    FROM user_tab_cols
    WHERE column_name     = 'DATE_EFF'
    AND table_name        = NOM_TABLE;
  END IF;

  -- Au moins une donnée DEX = on va vérifier si le traitement pour DEX doit être effectué
  IF nom_table = 'DIC_ADM_CONTRAT_HISTO' THEN
    -- Date d'effet = traitement DEX seulement si modification à date du jour ou dans le futur (à revoir pour DACH ?)
    v_retour := v_retour||' 
IF (DELETING AND TRUNC(SYSDATE,''dd'') > v_ligOld.DATE_FIN) OR (NOT DELETING AND TRUNC(SYSDATE,''dd'') > v_ligNew.DATE_FIN) THEN
 RETURN;
END IF;
';
  ELSIF date_eff_exists>0 THEN
    -- Date d'effet = traitement DEX seulement si modification à date du jour ou dans le futur
    v_retour := v_retour||' 
IF TRUNC(SYSDATE,''dd'') > nvl(v_ligNew.DATE_FIN,v_ligOld.DATE_FIN) THEN
 RETURN;
END IF;
';
  END IF;

    v_retour := v_retour||' 
v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC); ';

  -- Si traitement DEX sur une table de type PAIEZAD ou PACMAT, si on n'a pas de MATRIC, on le récupère
  IF v_typeTable ='z' THEN
    v_retour := v_retour||' 
IF v_matric IS NULL THEN
 IF DELETING THEN
  v_paiezad := v_ligOld.PAIEZAD;
 ELSE
  v_paiezad := v_ligNew.PAIEZAD;
 END IF;
 SELECT MAX(MATRIC) INTO v_matric FROM DIC_ADM_CONTRAT_SITU WHERE NUMPAC=nvl(v_ligNew.NUMPAC,v_ligOld.NUMPAC) AND PAIEZAD=v_paiezad; 
END IF;
';
  ELSIF v_typeTable ='p' THEN
    v_retour := v_retour||' 
IF v_matric IS NULL THEN
 BEGIN
  SELECT MATRIC INTO v_matric FROM SECUPACMAT WHERE NUMPAC=nvl(v_ligNew.NUMPAC,v_ligOld.NUMPAC) AND PACMAT=nvl(v_ligNew.PACMAT,v_ligOld.PACMAT);
 EXCEPTION 
  WHEN NO_DATA_FOUND THEN NULL; 
 END;
END IF;
';
  END IF;

  -- Le traitement en lui-même : certains évènements nécessitent d'avoir une clé secondaire spécifique, sinon on positionne '*'
  v_cleSecondaireDex := '''*''';

  -- On boucle sur les données générant un sous-événement (paramétrage spécifique)
  OPEN cur_subEventsDex;
  LOOP FETCH cur_subEventsDex INTO lig_subEventDex ;
    EXIT WHEN cur_subEventsDex%NOTFOUND;
    mappingSubEventByEventAndData(lig_subEventDex.NOM_DONNEE||'#'||lig_subEventDex.EVENT) := lig_subEventDex.SOUS_EVENT;
  END LOOP;
  CLOSE cur_subEventsDex;

  -- On boucle sur les données de l'évènement afin de calculer la CLE_SECONDAIRE si besoin 
  -- On en profite pour construire une partir du code de la partie UPDATING
  OPEN cur_donneesDex;
  LOOP FETCH cur_donneesDex INTO lig_donneeDex ;
    IF v_eventDexPrec IS NULL AND cur_donneesDex%NOTFOUND THEN
      PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
NULL;
';
    ELSIF v_eventDexPrec IS NOT NULL AND (cur_donneesDex%NOTFOUND OR NOT v_eventDexPrec=lig_donneeDex.EVENT) THEN
      -- Dernière donnée pour l'event
      PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
-- gestion evenement dex ' || v_eventDexPrec || '
v_processEventDex := FALSE; 
';

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF FALSE THEN -- DEBUT v_ligNew<>v_ligOld
 NULL; '||PROC_DEX_UPDATING_TMP||' 
END IF; -- FIN v_ligNew<>v_ligOld
';

      conditionForEventAcr(v_eventDexPrec||'#'||v_condition_donnee||'#OLD') := v_condition_acr_old_vide;
      conditionForEventAcr(v_eventDexPrec||'#'||v_condition_donnee||'#NEW') := v_condition_acr_new_vide;

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF v_processEventDex THEN
';

      IF v_action_acr IS NULL THEN
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
eventsTab.EXTEND ;
eventsTab(eventsTab.LAST).EVENT :='''||v_eventDexPrec||''';
eventsTab(eventsTab.LAST).ACTION :=''M'';
';
      ELSE
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
v_toutesLesAnciennesValVides := '||v_condition_acr_old_vide||v_condition_donnee_sql||';
v_toutesLesNouvelleValVides := '||v_condition_acr_new_vide||v_condition_donnee_sql||';
IF FALSE THEN
 v_processEventDex := FALSE; 
';
        IF INSTR(v_action_acr,'a') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF v_toutesLesAnciennesValVides AND NOT v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.add''; -- gestion add
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'a'

        IF INSTR(v_action_acr,'c') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF NOT v_toutesLesAnciennesValVides AND NOT v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.change''; -- gestion change
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'c'

        IF INSTR(v_action_acr,'r') > 0 THEN
          PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
ELSIF NOT v_toutesLesAnciennesValVides AND v_toutesLesNouvelleValVides THEN
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := ''' || v_event_sans_acr || '.remove'';  -- gestion remove
 eventsTab(eventsTab.LAST).ACTION :=''M'';
';
        END IF; -- FIN v_action_acr = 'r'

        PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
ELSE
 v_processEventDex := FALSE;
END IF;
';
      END IF; -- FIN v_action_acr IS NULL

      -- On boucle sur les sous-événements à générer (paramétrage spécifique)
      subEventToGen := subEventToGenWithCond.first;
      LOOP
        EXIT WHEN subEventToGen IS NULL;
        -- On concatène la condition, puis le sous-événements (si la condition est vérifiée)
        PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
IF v_processEventDex AND '; 

        PROC_DEX_UPDATING := PROC_DEX_UPDATING||' ('||subEventToGenWithCond(subEventToGen)||') ';

        PROC_DEX_UPDATING := PROC_DEX_UPDATING||' THEN 
 subEventsTab.EXTEND;
 subEventsTab(subEventsTab.LAST).EVENT := eventsTab(eventsTab.LAST).EVENT; 
 subEventsTab(subEventsTab.LAST).SOUS_EVENT :='''||subEventToGen||''';
END IF; -- FIN test génération sous-événement
';
        subEventToGen := subEventToGenWithCond.next(subEventToGen);
      END LOOP;

      PROC_DEX_UPDATING := PROC_DEX_UPDATING||'
END IF; -- FIN v_processEventDex
';

      -- On vide le tableau pour recommencer un nouvel événément (on le sauvegarde avant, en l'associant à l'event)
      subEventToGenWithCondByEvent(v_eventDexPrec) := subEventToGenWithCond;
      subEventToGenWithCond.delete;
    END IF;

    -- Traitement spécifique à certains évènements qui stocke une CLE_SECONDAIRE
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      -- Si le nom de table est DIC_ADM_CONTRAT on stocke la date de début de contrat (DSDCN) dans la colonne CLE_SECONDAIRE 
      v_cleSecondaireDex := '''DSDCN;'' || TO_CHAR(nvl(v_ligNew.DSDCN, v_ligOld.DSDCN), ''YYYY-MM-DD'')';

    ELSIF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- Si le nom de table est DIC_ADM_CONTRAT_HISTO on stocke la date d'effet (DATE_EFF) dans la colonne CLE_SECONDAIRE 
      v_cleSecondaireDex := '''DATE_EFF;''|| TO_CHAR(nvl(v_ligNew.DATE_EFF, v_ligOld.DATE_EFF), ''YYYY-MM-DD'')';

    END IF;

    EXIT WHEN cur_donneesDex%NOTFOUND;

    IF v_eventDexPrec IS NULL OR NOT v_eventDexPrec=lig_donneeDex.EVENT THEN
      -- Première donnée pour l'event
      v_action_acr := lig_donneeDex.ACTION_ACR;
      v_event_sans_acr := lig_donneeDex.EVENT_SANS_ACR;
      PROC_DEX_UPDATING_TMP := NULL;
      v_condition_acr_old_vide := null;
      v_condition_acr_new_vide := null;
    END IF;

    -- Traitement spécifique à certains évènements qui stocke une CLE_SECONDAIRE
    IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'precedenceOrdCompteBancaire' THEN
      -- BANQUE : On parcourt les données de l'event et trouver celle qui correspond à la cle dont on a besoin
      v_cleSecondaireDex := 'nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';
      
     -- PERSONAL CONTACT : La clé secondaire pour les contacts d'urgence est composée de 3 éléments à mettre dans un certain ordre : rankEmergency;familyName1Emergency;givenNameEmergency   
    ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'rankEmergency' THEN
      v_cle1SecondaireMP := 'nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';
    
    ELSIF  lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'familyName1Emergency'  THEN
      v_cle2SecondaireMP := 'nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';
    
    ELSIF  lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'givenNameEmergency'  THEN
       v_cle3SecondaireMP := 'nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';
       
    ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentConjointBirthOrder' THEN
      -- CONJOINT : Dans le cas où une donnée 'dependentConjointBirthOrder' a été paramétrée, 
      -- c'est cette valeur qui va être prise
      v_cleSecondaireDex := '''C;''||nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';

    ELSIF INSTR(lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT, 'dependentConjoint') = 1 AND INSTR(v_cleSecondaireDex, 'C;') = 0 THEN
      -- CONJOINT : La première fois que l'on trouve une donnée commençant par 'dependentConjoint', on positionne la clé secondaire
      -- avec comme valeur "01" pour le "BirthOrder"
      v_cleSecondaireDex := '''C;01''';

    ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' OR lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthDate' THEN
      -- ENFANT : La clé secondaire pour les enfants est composée de 2 éléments à mettre dans un certain ordre : E;BirthOrder;BirthDate
      IF v_cleSecondaireDex = '''*''' THEN
        IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
          v_cleSecondaireDex := '''E;''||nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')';
        ELSE
          v_cleSecondaireDex := '||TO_CHAR(nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
        END IF;
      ELSE
        IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
          v_cleSecondaireDex := '''E;''||nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||')||'';''' || v_cleSecondaireDex;
        ELSE
          v_cleSecondaireDex := v_cleSecondaireDex || '||'';''||TO_CHAR(nvl(v_ligNew.'||lig_donneeDex.NOM_DONNEE||', v_ligOld.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
        END IF;
      END IF;
    END IF;

    vFunctionCompare := 'IS_EQ';
    vFunctionCompareParam3 := NULL;
    IF lig_donneeDex.data_type = 'DATE' THEN
      vFunctionCompare := 'IS_EQ_DATE';
      vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
    END IF;
    PROC_DEX_CONDITION := ' NOT '||vFunctionCompare||'(v_ligNew.'||lig_donneeDex.NOM_DONNEE||',v_ligOld.'||lig_donneeDex.NOM_DONNEE||vFunctionCompareParam3||') ';
    v_condition_donnee_sql := '1=1';
    v_condition_donnee := lig_donneeDex.CONDITION;
    IF v_condition_donnee IS NOT NULL THEN
      v_condition_donnee_sql := regexp_replace(regexp_replace(v_condition_donnee, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(v_ligNew.\1,v_ligOld.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(v_ligNew.\2,v_ligOld.\2)=\1');
      PROC_DEX_CONDITION := PROC_DEX_CONDITION||' AND '||v_condition_donnee_sql;
    END IF;

    PROC_DEX_UPDATING_TMP :=PROC_DEX_UPDATING_TMP||'
ELSIF '||PROC_DEX_CONDITION||' THEN
v_processEventDex := TRUE;';

    v_condition_acr_old_vide := v_condition_acr_old_vide||'v_ligOld.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND ';
    v_condition_acr_new_vide := v_condition_acr_new_vide||'v_ligNew.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND ';

    IF mappingSubEventByEventAndData.exists(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT) THEN
      IF NOT subEventToGenWithCond.exists(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) THEN
        subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) := '1=2';
      END IF;
      subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT)) := subEventToGenWithCond(mappingSubEventByEventAndData(lig_donneeDex.NOM_DONNEE||'#'||lig_donneeDex.EVENT))||' OR ('||PROC_DEX_CONDITION||') ';
    END IF;

    v_eventDexPrec:=lig_donneeDex.EVENT;
  END LOOP;
  CLOSE cur_donneesDex;

  IF v_cle1SecondaireMP IS NOT NULL AND v_cle2SecondaireMP IS NOT NULL AND v_cle3SecondaireMP IS NOT NULL THEN
    v_cleSecondaireDex := v_cle1SecondaireMP||'||'';''||'||v_cle2SecondaireMP||'||'';''||'||v_cle3SecondaireMP ;   
  END IF ;

  v_retour := v_retour||' 
v_dexCleSecondaire := '||v_cleSecondaireDex||';
eventsTab.delete;
subEventsTab.delete;
';

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- Pour DIC_ADM_CONTRAT_HISTO, pas de particularité
    NULL;
  ELSIF nom_table   ='DIC_ADM_CONTRAT' THEN
    -- Pour DIC_ADM_CONTRAT, on gère en spécifique 
    -- - La création --> Evènement worker.hire ou worker.rehire
    -- - La suppression --> Evènement worker.workAssignment.terminate
    -- - La mise à jour de DSFCN --> Evènement worker.workAssignment.terminate (ou autre pour la modification ou l'annulation de départ ???)
    v_retour := v_retour||' 
IF INSERTING THEN
 -- On vérifie si c''est une embauche ou bien réembauche : s''il existe déja  un contrat pour le MATRIC c''est un réembauche. 
 exist_contrat_for_matric := COUNT_CONTRAT_HORS_TRANSAC ( v_matric ) ;
 IF exist_contrat_for_matric>0 THEN
  -- Réembauche  --> Evénement worker.rehire
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.rehire'';
  eventsTab(eventsTab.LAST).ACTION :=''Z''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligNew.DSDCN;
 ELSE
  --  Embauche -->  Evénement worker.hire
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.hire'';
  eventsTab(eventsTab.LAST).ACTION :=''Z''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligNew.DSDCN;
 END IF ;
ELSIF DELETING THEN
 exist_contrat_for_matric := COUNT_CONTRAT_HORS_TRANSAC ( v_matric ) ;
 IF exist_contrat_for_matric>1 THEN
  -- Annulation Réembauche  --> Evénement workerRehire.cancel 
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerRehire.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligOld.DSDCN;
 ELSE
  -- Annulation Embauche -->  Evénement workerHire.cancel
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerHire.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligOld.DSDCN;
 END IF ;
ELSIF NOT IS_EQ_DATE(v_ligNew.DSFCN,v_ligOld.DSFCN) THEN
 IF v_ligNew.DSFCN IS NOT NULL AND v_ligOld.DSFCN IS NULL THEN
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.workAssignment.terminate'';
  eventsTab(eventsTab.LAST).ACTION :=''M''; 
  -- On n''envoie le départ que le jour où il devient effectif
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligNew.DSFCN;
 ELSIF v_ligNew.DSFCN<>v_ligOld.DSFCN THEN 
  -- mise à jour de DSFCN --> EVENEMENT worker.workerTerminationDate.change
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''worker.workerTerminationDate.change'';
  eventsTab(eventsTab.LAST).ACTION :=''M'';
  -- On garde la date de départ initiale comme date d''envoi de la notif, comme ça le partenaire aura le départ et la modif de départ en même temps
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligOld.DSFCN;
 ELSIF v_ligNew.DSFCN IS NULL AND v_ligOld.DSFCN IS NOT NULL THEN
 -- Annulation Départ --> EVENEMENT workerTermination.cancel 
  eventsTab.EXTEND ;
  eventsTab(eventsTab.LAST).EVENT :=''workerTermination.cancel'';
  eventsTab(eventsTab.LAST).ACTION :=''S''; 
  -- On garde la date de départ initiale comme date d''envoi de la notif, comme ça le partenaire aura le départ et l''annulation de départ en même temps
  eventsTab(eventsTab.LAST).DATE_ENVOI_MIN :=v_ligOld.DSFCN;
 ELSE
  NULL;
 END IF;
ELSE
';
  ELSE
    -- Partie insert pour les autres tables
    -- Pour les autres tables, en création et suppression, on insère une ligne par évènement potentiellement généré par la table, avec le bon code action
    v_retour := v_retour||' 
-- DEBUT INSERTING / DELETING
IF INSERTING OR DELETING THEN
 IF INSERTING THEN
  v_dexaction := ''C'';
 ELSE
  v_dexaction := ''S'';
 END IF;
';

    OPEN cur_eventsDex;
    LOOP FETCH cur_eventsDex INTO lig_eventDex ;
      EXIT WHEN cur_eventsDex%NOTFOUND;
      v_retour := v_retour||'-- gestion evenement dex ' || lig_eventDex.EVENT || '
';
      v_action_acr := lig_eventDex.ACTION_ACR;
      v_condition_donnee_sql := '1=1';
      IF lig_eventDex.CONDITION IS NOT NULL THEN
        v_condition_donnee_sql := regexp_replace(regexp_replace(lig_eventDex.CONDITION, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(v_ligNew.\1,v_ligOld.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(v_ligNew.\2,v_ligOld.\2)=\1');
        v_retour := v_retour||'
IF '||v_condition_donnee_sql||' THEN
';
      END IF;

      v_retour := v_retour||'
v_processEventDex := FALSE;
v_toutesLesAnciennesValVides := '||conditionForEventAcr(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#OLD')||'1=1;
v_toutesLesNouvelleValVides := '||conditionForEventAcr(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#NEW')||'1=1;
';
      IF v_action_acr IS NULL THEN
        v_retour := v_retour||'
IF (INSERTING AND NOT v_toutesLesNouvelleValVides) OR (DELETING AND NOT v_toutesLesAnciennesValVides) THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT :='''||lig_eventDex.EVENT||''';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction;
END IF; 
';
      ELSIF conditionForEventAcr.exists(lig_eventDex.EVENT||'#'||lig_eventDex.CONDITION||'#OLD') THEN
        v_retour := v_retour||'
IF FALSE THEN NULL; 
';

        IF INSTR(v_action_acr,'a') > 0 THEN
          v_retour := v_retour||'
ELSIF INSERTING AND NOT v_toutesLesNouvelleValVides THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := '''||lig_eventDex.EVENT_SANS_ACR||'.add'';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction; 
';
        END IF; -- FIN v_action_acr = 'a'

        IF INSTR(v_action_acr,'r') > 0 THEN
          v_retour := v_retour||'
ELSIF DELETING AND NOT v_toutesLesAnciennesValVides THEN
 v_processEventDex := TRUE;
 eventsTab.EXTEND ;
 eventsTab(eventsTab.LAST).EVENT := '''||lig_eventDex.EVENT_SANS_ACR||'.remove'';
 eventsTab(eventsTab.LAST).ACTION :=v_dexaction; 
';
        END IF; -- FIN v_action_acr = 'r'

        v_retour := v_retour||'
END IF;
';
      END IF;

      IF lig_eventDex.CONDITION IS NOT NULL THEN
        v_retour := v_retour||'
END IF; -- FIN '||v_condition_donnee_sql||'
';
      END IF;

      IF subEventToGenWithCondByEvent.exists(lig_eventDex.EVENT) THEN
        subEventToGenWithCond := subEventToGenWithCondByEvent(lig_eventDex.EVENT);
        -- On boucle sur les sous-événements à générer (paramétrage spécifique) pour l'événement courant
        subEventToGen := subEventToGenWithCond.first;
        LOOP
          EXIT WHEN subEventToGen IS NULL;
          -- On concatène la condition, puis le sous-événements (si la condition est vérifiée)
          v_retour := v_retour||'
IF v_processEventDex AND ('||subEventToGenWithCond(subEventToGen)||') THEN
 subEventsTab.EXTEND;
 subEventsTab(subEventsTab.LAST).EVENT := eventsTab(eventsTab.LAST).EVENT; 
 subEventsTab(subEventsTab.LAST).SOUS_EVENT :='''||subEventToGen||''';
END IF;
';
          subEventToGen := subEventToGenWithCond.next(subEventToGen);
        END LOOP;
      END IF;
    END LOOP;
    CLOSE cur_eventsDex;
    v_retour := v_retour||'
-- FIN INSERTING / DELETING
ELSE -- DEBUT UPDATING
 v_dexaction := ''M'';
';
  END IF;
  -- Début de l'updating commun à toutes les tables

  v_eventDexPrec := NULL;
  -- On rajoute ce qui a été calculé plus haut
  v_retour := v_retour||PROC_DEX_UPDATING;

  IF NOT nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- Pour DIC_ADM_CONTRAT_HISTO, il n'y a pas de gros IF qui encadre les tests de génération de notif
    v_retour := v_retour||'
END IF; -- FIN UPDATING
';
  END IF;

  v_retour := v_retour||' 
 IF eventsTab.count>0 THEN
  for i in 1..eventsTab.count loop
';

  IF nom_table = 'DIC_ADM_CONTRAT_HISTO' THEN
    v_retour := v_retour||' 
IF DELETING THEN
 eventsTab(i).DATE_ENVOI_MIN :=v_ligOld.DATE_EFF;
ELSE
 eventsTab(i).DATE_ENVOI_MIN :=v_ligNew.DATE_EFF;
END IF;
';
  ELSIF date_eff_exists>0 THEN
    v_retour := v_retour||' 
eventsTab(i).DATE_ENVOI_MIN :=NVL(v_ligNew.DATE_EFF,v_ligOld.DATE_EFF);
';
  END IF;

  v_retour := v_retour||' 
   MERGE INTO MP_EVENTS DE 
    USING (SELECT v_matric AS MATRIC,eventsTab(i).EVENT AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z 
    ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
    WHEN MATCHED THEN UPDATE SET ACTION=eventsTab(i).ACTION,DATE_MODIF=CURRENT_TIMESTAMP,DATE_ENVOI_MIN=eventsTab(i).DATE_ENVOI_MIN
    WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF,DATE_ENVOI_MIN) VALUES (v_matric,eventsTab(i).EVENT,v_dexCleSecondaire,eventsTab(i).ACTION,CURRENT_TIMESTAMP,eventsTab(i).DATE_ENVOI_MIN);
  end loop;
 END IF; -- FIN eventsTab.count>0

 IF subEventsTab.count>0 THEN
  for i in 1..subEventsTab.count loop
   MERGE INTO MP_SPECIF_SOUS_EVENT DE 
    USING (SELECT v_matric AS MATRIC, subEventsTab(i).EVENT AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE, subEventsTab(i).SOUS_EVENT AS SOUS_EVENT FROM DUAL) Z 
    ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE AND Z.SOUS_EVENT=DE.SOUS_EVENT)
    WHEN MATCHED THEN UPDATE SET DATE_MODIF=CURRENT_TIMESTAMP, STATUT_TRT=NULL, DATE_TRT=NULL
    WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,SOUS_EVENT,DATE_MODIF) VALUES (v_matric,subEventsTab(i).EVENT,v_dexCleSecondaire,subEventsTab(i).SOUS_EVENT,CURRENT_TIMESTAMP);
  end loop;
 END IF; -- FIN subEventsTab.count>0
';

  v_retour := v_retour||'
END CHECK_MP_NOTIF_'||NOM_TABLE||';';

EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour :=  '
-- DEBUT TRAITEMENT DEX
IF v_type_writer<>''M'' THEN
 CHECK_MP_NOTIF_'||NOM_TABLE||'(v_ligOld, v_ligNew);
END IF;
-- FIN TRAITEMENT DEX';
 
  return v_retour;
END TGE_CREATE_TRIGGER_MP_NOTIF;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_RECYCLAGE
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  v_typeTable VARCHAR(1);
  date_eff_exists NUMBER;
  nom_col_date_test_recycl VARCHAR2(30);
  condition CLOB;

  CURSOR cur_mapdo IS
    SELECT LISTAGG(numpac,',') WITHIN GROUP (ORDER BY numpac) as numpacs, donneegxp, data_type from (
      with donnees_paie (numpac, donneegxp, tablegxp, data_type) as (
        SELECT numpac, donneegxp, tablegxp, data_type
        FROM TGE_REF_MAPDO_RESOLVED,user_tab_cols
        WHERE 
          column_name=donneegxp and table_name=nom_table and
          TABLEGXP IN (
            SELECT tableparam
            FROM tge_ref_mapta
            WHERE 
              tablephy = nom_table
              --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
              --Ajout du type 'I'
              AND allerretour IN ('A','2','I')
          )
        UNION 
        SELECT numpac,donneegxp,(select min(tableparam) from tge_ref_mapta where tablephy = nom_table) as tablegxp,data_type 
        FROM TABLE(GET_GXP_TRT_PARTICULIER_DATAS(nom_table)),user_tab_cols
        WHERE 
          column_name=donneegxp and table_name=nom_table
      )
      SELECT distinct 
        case when not exists (select 1 from tge_ref_pac where numpac not in (select numpac from donnees_paie m where donneegxp=t.donneegxp and TABLEGXP=t.TABLEGXP)) then '*' else numpac end as numpac
        , donneegxp, data_type
      from donnees_paie t
    )
    GROUP BY donneegxp, data_type
    ORDER BY donneegxp;
  lig_mapdo cur_mapdo%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_RECYCLAGE_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  v_retour := NULL;
  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  date_eff_exists := 0;
  nom_col_date_test_recycl := NULL;
  IF nom_table='DIC_ADM_CONTRAT' THEN
    -- Pour DIC_ADM_CONTRAT c'est DSDCN qui fera office de DATE_EFF pour tester s'il faut mettre en recyclage
    nom_col_date_test_recycl := 'DSDCN';
  ELSE
    SELECT COUNT(*)
    INTO date_eff_exists
    FROM user_tab_cols
    WHERE column_name     = 'DATE_EFF'
    AND table_name        = NOM_TABLE;
    IF date_eff_exists>0 THEN
      nom_col_date_test_recycl := 'DATE_EFF';
    END IF;
  END IF;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_RECYCLAGE_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew IN OUT '||NOM_TABLE||'%ROWTYPE, v_numpac IN OUT VARCHAR2, v_pacmat IN OUT VARCHAR2, v_paiezad IN OUT VARCHAR2, tabRefPacByNumpac IN OUT ALIM_IDX.T_REF_PAC_BY_NUMPAC) IS 
 v_matric VARCHAR2(32);
type pacmats IS record (R_numpac VARCHAR2(6), R_pacmat VARCHAR2(8), R_periode_recycl VARCHAR2(1)); 
TYPE TAB_pacmats IS TABLE OF pacmats INDEX BY binary_integer; 
tab TAB_pacmats; 
v_recycl varchar2(1); 
v_periode_recycl varchar2(1); 
v_error_periode_recycl_3 number; 
v_retro VARCHAR2(1); 
v_nbOccForCnt number;
';

  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
date_test_recycl DATE;
';
  END IF;

    v_retour := v_retour||'
BEGIN
 v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC); ';

  -- Récupération du numpac si besoin
  IF v_typeTable = 'z' THEN
    v_retour := v_retour||' 
SELECT DISTINCT D.numpac as R_numpac, 
D.pacmat as R_pacmat, 
T.PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM DIC_ADM_CONTRAT_SITU D ,SECUPACMAT T 
WHERE D.NUMPAC=v_numpac AND D.PAIEZAD=v_paiezad AND D.NUMPAC=T.NUMPAC AND D.PACMAT=T.PACMAT;';
  elsif v_typeTable = 'm' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE matric=v_matric;';
  elsif v_typeTable = 'p' THEN
    v_retour := v_retour||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat;';
  END IF;

  v_retour := v_retour||'
if not tab.exists(1) then
 return;
end if;

v_retro := ''N'';
 FOR i IN 1..tab.last LOOP
  v_numpac:=tab(i).r_numpac;
   IF NOT v_numpac = ''TMPPAC'' THEN
    v_pacmat:=tab(i).r_pacmat;
    v_periode_recycl:=nvl(tab(i).R_periode_recycl,''1'');
';

  IF NOT nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- une valeur '3' dans PERIODE_RECYCLAGE retourne une erreur
    -- sauf en cas de réembauche (insertion dans DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO)
    v_retour := v_retour||' IF v_periode_recycl = ''3'' THEN';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     IF UPDATING OR DELETING THEN';
    END IF;
    v_retour := v_retour||'     RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');';
    IF nom_table ='DIC_ADM_CONTRAT' THEN
      v_retour := v_retour||'     END IF;';
    END IF;
    v_retour := v_retour||' END IF;';
  ELSE
    -- on positionne PERIODE_RECYCLAGE à '1' en cas de réembauche d'un salarié ayant une valeur '0' ou '3' dans PERIODE_RECYCLAGE et répondant aux critères suivants :
    -- - DRPAI2 est non-vide et différent de 'B'
    -- - NATCOL vaut 'SAL' ou 'STA'
    -- - DSDCN est antérieure ou égale à la période en cours
    v_retour := v_retour||'
IF v_periode_recycl IN (''0'',''3'') THEN
 IF v_periode_recycl = ''3'' THEN
  -- si PERIODE_RECYCLAGE vaut ''3'', on prévoit qu''il va falloir retourner une erreur (modification d''un contrat existant)
  v_error_periode_recycl_3 := 1;
 ELSE
  v_error_periode_recycl_3 := 0;
 END IF;
 IF INSERTING THEN
  -- insertion d''un historique de contrat : on vérifie s''il s''agit de la première occurrence du contrat (réembauche)
  v_nbOccForCnt := GET_NB_LIGNES(''DIC_ADM_CONTRAT_HISTO'', ''NUMPAC=''''''||v_ligNew.NUMPAC||'''''' AND PACMAT=''''''||v_ligNew.PACMAT||'''''' AND NUMCNT=''||v_ligNew.NUMCNT);
  IF v_nbOccForCnt = 0 THEN
   -- première occurrence du contrat (réembauche) : on ne retourne pas d''erreur, et, si PERIODE_RECYCLAGE = ''3'', on va réactiver le dossier
   IF v_periode_recycl = ''3'' THEN
    v_error_periode_recycl_3 := 0;
    v_ligNew.ZREACT := TO_DATE(TO_CHAR(v_ligNew.DATE_EFF,''yyyy'')||''0101'',''yyyymmdd'');
   END IF; -- FIN v_periode_recycl = ''3''
   -- vérification des critères pour positionner PERIODE_RECYCLAGE à ''1''
   IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := ''1'';
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  END IF; -- FIN v_nbOccForCnt = 0
 ELSIF UPDATING THEN
  -- un update : on va vérifier si on doit réactiver le dossier
  IF UPDATING(''DRPAI2'') AND (NVL(v_ligOld.DRPAI2, ''B'') <> NVL(v_ligNew.DRPAI2, ''B'') AND (NVL(v_ligOld.DRPAI2, ''B'') =''B'' OR NVL(v_ligNew.DRPAI2, ''B'')=''B'')) THEN
   -- update de DRPAI2 pour déblocage paie : on ne retourne pas d''erreur, et on va réactiver le dossier
   v_error_periode_recycl_3 := 0;
   IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, NULL) = 1 THEN
    -- OK pour PERIODE_RECYCLAGE = ''1''
    v_periode_recycl := ''1'';
   END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
  ELSIF UPDATING(''ZREACT'') AND v_ligOld.ZREACT IS NULL AND v_ligNew.ZREACT IS NOT NULL THEN
   -- update de ZREACT pour réactivation : si l''année de ZREACT est inférieure ou égale à l''année de la période en cours, on ne retourne pas d''erreur
   BEGIN
    IF NOT tabRefPacByNumpac.exists(v_ligNew.NUMPAC) THEN
     select * into tabRefPacByNumpac(v_ligNew.NUMPAC) from tge_ref_pac where numpac = v_ligNew.NUMPAC;
    END IF;
    IF TO_CHAR(v_ligNew.ZREACT,''yyyy'') <= SUBSTR(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS,1,4) THEN
     v_error_periode_recycl_3 := 0;
     IF CHECK_FORCAGE_RECYCLAGE(v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DRPAI2, tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS) = 1 THEN
      -- OK pour PERIODE_RECYCLAGE = ''1''
      v_periode_recycl := ''1'';
     END IF; -- FIN CHECK_FORCAGE_RECYCLAGE
    END IF; -- FIN ZREACT <= PERIODEENCOURS
   EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF; -- FIN UPDATING DRPAI2 ou ZREACT
 END IF; -- FIN INSERTING/UPDATING
 IF v_error_periode_recycl_3 = 1 THEN
  RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');
 END IF;
END IF; -- FIN v_periode_recycl = 0 ou 3
';
  END IF;

  v_retour := v_retour||'
IF v_periode_recycl = ''2'' THEN
 RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC01'');
ELSIF v_periode_recycl = ''1'' THEN
';

  -- on vérifie si des colonnes paies ont été modifié
  v_retour := v_retour||' v_recycl:=''N'';';
  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||'
IF NOT tabRefPacByNumpac.exists(v_numpac) THEN
 select * into tabRefPacByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;
END IF;
IF DELETING THEN
 date_test_recycl := v_ligOld.'||nom_col_date_test_recycl||';
ELSE
 date_test_recycl := v_ligNew.'||nom_col_date_test_recycl||';
END IF;
IF (NVL(TO_CHAR(date_test_recycl,''yyyymm''),''000000'') <= tabRefPacByNumpac(v_numpac).PERIODEENCOURS) THEN
';
  END IF;

  v_retour := v_retour||'
IF (INSERTING and v_ligOld.MATRIC IS NULL) OR (DELETING and v_ligNew.MATRIC IS NULL) THEN 
 -- En insertion, si on n''a pas récupéré de ''OLD'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en recyclage
 -- En suppression, si on n''a pas récupéré de ''NEW'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en recyclage
 v_recycl:=''O'';
ELSE 
  -- Sinon, on compare ''OLD'' et ''NEW''
';
  condition := NULL;
  OPEN cur_mapdo;
  LOOP FETCH cur_mapdo INTO lig_mapdo ;

    IF cur_mapdo%NOTFOUND AND condition IS NOT NULL THEN
      condition := condition||' 
END IF;';
    END IF;

    EXIT WHEN cur_mapdo%NOTFOUND;

    IF lig_mapdo.donneegxp IS NOT NULL THEN
      IF condition IS NOT NULL THEN
        condition := condition||' 
ELSIF ';
      ELSE
        condition := ' IF ';
        IF NOM_TABLE ='DIC_ADM_CONTRAT_HISTO' THEN
          condition := condition||' NVL(v_ligOld.DRPAI2, ''B'') <> NVL(v_ligNew.DRPAI2, ''B'') AND (NVL(v_ligOld.DRPAI2, ''B'') =''B'' OR NVL(v_ligNew.DRPAI2, ''B'')=''B'') THEN 
 v_recycl:=''O'';
ELSIF ';
        END IF;
      END IF;

      IF NOT lig_mapdo.numpacs = '*' THEN
        condition := condition||'INSTR('''||lig_mapdo.numpacs||''',v_numpac)>0 AND ';
      END IF;

      vFunctionCompare := 'IS_EQ';
      vFunctionCompareParam3 := NULL;
      IF lig_mapdo.data_type = 'DATE' THEN
        vFunctionCompare := 'IS_EQ_DATE';
        vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
      END IF;
      condition := condition||' NOT '||vFunctionCompare||'(v_ligNew.'||lig_mapdo.donneegxp||',v_ligOld.'||lig_mapdo.donneegxp||vFunctionCompareParam3||') THEN
 v_recycl:=''O''; ';
    END IF;

  END LOOP;
  CLOSE cur_mapdo;

  IF condition IS NULL THEN
    RETURN NULL;
  END IF;

  v_retour := v_retour||condition;
  
  -- traitement du matricule pour recyclage
  v_retour := v_retour||'
END IF; -- FIN updating
IF v_recycl=''O'' THEN 
 MERGE INTO GAP_RECYCL_MATRIC a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac)
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat) VALUES (b.numpac,b.pacmat);

 MERGE INTO TGE_MODIF_PACMAT_TORESEND a
  USING (SELECT v_numpac AS numpac,v_pacmat AS pacmat, '''||NOM_TABLE||''' as TABLE_TO_SEND FROM dual) b
  ON (a.pacmat=b.pacmat AND a.numpac=b.numpac and a.TABLE_TO_SEND=b.TABLE_TO_SEND)
  WHEN MATCHED THEN update set a.DATE_MAJ=sysdate 
  WHEN NOT MATCHED THEN INSERT (a.numpac,a.pacmat,a.TABLE_TO_SEND,a.DATE_MAJ) VALUES (b.numpac,b.pacmat,b.TABLE_TO_SEND, sysdate);
END IF; -- FIN v_recycl
';

  IF nom_col_date_test_recycl IS NOT NULL THEN
    v_retour := v_retour||' END IF; -- FIN test date recycl';
  END IF;
  v_retour := v_retour||'
END IF; -- FIN v_periode_recycl IN (''0'',''3'')
'|| TGE_CREATE_TRIGGER_RETRO(NOM_TABLE) ||'
END IF; -- FIN NOT v_numpac = ''TMPPAC''
END LOOP; -- FIN tab
END CHECK_RECYCLAGE_'||NOM_TABLE||';
';

  EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour := '
-- DEBUT TRAITEMENT RECYCLAGE
if v_type_writer<>''N'' AND v_type_writer<>''M'' THEN 
 CHECK_RECYCLAGE_'||NOM_TABLE||'(v_ligOld, v_ligNew, v_numpac, v_pacmat, v_paiezad, tabRefPacByNumpac); ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    v_retour := v_retour || '
 IF INSERTING THEN 
  -- On récupère la valeur de ZREACT potentiellement mise à jour
  :NEW.ZREACT := v_ligNew.ZREACT; 
 END IF; ';
  END IF;
  v_retour := v_retour || '
end if;
-- FIN TRAITEMENT RECYCLAGE';
 
  return v_retour;
END TGE_CREATE_TRIGGER_RECYCLAGE;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_RETRO
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RETRO(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  champDateEffetRetro VARCHAR2(50);
  conditionRetro CLOB;
  procRetroPaiezadCodeChrono VARCHAR(4000);

  CURSOR cur_mapdoRetro IS
    SELECT LISTAGG(numpac,',') WITHIN GROUP (ORDER BY numpac) as numpacs, donneegxp, clause_date_eff_retro, data_type from (
      SELECT DISTINCT dz.numpac, md.donneegxp, REGEXP_REPLACE(mddr.clause_date_eff_retro,':(new|old)','v_lig\1',1,0,'i') as clause_date_eff_retro, utc.data_type
      FROM tge_ref_dicoz dz 
      INNER JOIN TGE_REF_MAPDO_RESOLVED md ON md.element = dz.element AND md.numpac = dz.numpac
      LEFT JOIN tge_ref_mapdo_dteff_retro mddr ON mddr.element = dz.element AND (mddr.numpac = dz.numpac OR (mddr.numpac = '*' AND NOT EXISTS (SELECT 1 FROM tge_ref_mapdo_dteff_retro zdr WHERE zdr.numpac= dz.numpac AND zdr.element = dz.element)))
      ,user_tab_cols utc
      WHERE 
        utc.column_name=md.donneegxp and utc.table_name=nom_table 
        and dz.calcul_retro = '1' 
        AND TABLEGXP IN (
          SELECT tableparam 
          FROM tge_ref_mapta 
          WHERE tablephy = NOM_TABLE
        )
    )
    GROUP BY donneegxp, clause_date_eff_retro, data_type
    ORDER BY donneegxp, clause_date_eff_retro;

  lig_mapdoRetro cur_mapdoRetro%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_RETRO_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_RETRO_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew '||NOM_TABLE||'%ROWTYPE, v_numpac VARCHAR2, v_pacmat VARCHAR2, v_paiezad IN OUT VARCHAR2, v_retro IN OUT VARCHAR2, tabRefPacByNumpac IN OUT ALIM_IDX.T_REF_PAC_BY_NUMPAC) IS 
 v_matric VARCHAR2(32);
 existNumpacPaizad NUMBER; 
 V_DE_SSAAMM               VARCHAR2(6); 
 V_DE_SSAAMM_TMP           VARCHAR2(6); 
 V_DATE_EFFET_RETRO        DATE;
 V_DE_SSAAMM_DEFAULT	   VARCHAR2(6); 
 V_DATE_LIMITE_RETRO       VARCHAR2(6); 
 V_DEB_RETRO               VARCHAR2(6); 
 V_DEB_HISTO_RETRO         VARCHAR2(6); 
 V_PERIODEENCOURS          VARCHAR2(6); 
 V_CODE_CHRONO             VARCHAR2(6); 
 v_nb_mois_retro           NUMBER; 
 V_DATE_EFF                VARCHAR2(6); 

BEGIN
 v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC);
';

  IF NOM_TABLE           = 'DIC_ADM_CONTRAT' THEN
    champDateEffetRetro := 'DSDCN' ;
  ELSE
    BEGIN
      SELECT a.column_name
      INTO champDateEffetRetro
      FROM SYS.USER_CONS_COLUMNS a, USER_TAB_COLUMNS b
      WHERE 
        a.table_name = NOM_TABLE
        AND a.table_name=b.table_name
        AND a.column_name=b.column_name
        AND b.data_type = 'DATE'
        AND constraint_name IN (
          SELECT c.constraint_name
          FROM user_constraints c
          WHERE c.table_name =a.table_name AND CONSTRAINT_TYPE='P'
        );
    EXCEPTION
      WHEN OTHERS THEN
        champDateEffetRetro := NULL;
    END;
  END IF;

  IF champDateEffetRetro IS NULL THEN
  	RETURN NULL;
  END IF;

  procRetroPaiezadCodeChrono := NULL;
  IF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    -- Traitement spécifique pour DIC_ADM_CONTRAT_HISTO : dans un trigger, il n'est pas possible de lire la table en cours de modification
    -- De toute façon il n'y a pas besoin : on a le paiezad dans le v_ligNew/v_ligOld, il faut juste lire DIC_ADM_CONTRAT_SITU pour récupérer le CODE_CHRONO
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 IF DELETING THEN
  V_PAIEZAD := v_ligOld.PAIEZAD;
 ELSE
  V_PAIEZAD := v_ligNew.PAIEZAD;
 END IF;
 SELECT dacs.code_chrono 
 INTO V_CODE_CHRONO 
 FROM dic_adm_contrat_situ dacs 
 WHERE dacs.numpac = V_NUMPAC AND dacs.pacmat = V_PACMAT AND dacs.numcnt = NVL(v_ligNew.NUMCNT,v_ligOld.NUMCNT) AND dacs.paiezad = V_PAIEZAD; 
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END;
';
  ELSE
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 SELECT dacs.code_chrono, dach.paiezad, TO_CHAR(dach.DATE_EFF, ''YYYYMM'') 
 INTO V_CODE_CHRONO, V_PAIEZAD, V_DATE_EFF 
 FROM dic_adm_contrat_histo dach , dic_adm_contrat_situ dacs 
 WHERE dach.numpac = V_NUMPAC AND dach.pacmat = V_PACMAT AND dach.matric = v_matric AND dacs.numpac = dach.numpac AND dacs.pacmat = dach.pacmat AND dacs.numcnt = dach.numcnt AND dacs.paiezad = dach.paiezad AND dach.date_eff = (
  select min(z.date_eff) 
  from dic_adm_contrat_histo z 
  where z.matric = dach.matric AND z.date_sortie_sit_bo >= NVL(v_ligNew.' || champDateEffetRetro ||',v_ligOld.' || champDateEffetRetro || ') 
 );  

 -- La période rétro doit être >= à la 1ère date d''effet du salarié
 IF (V_DE_SSAAMM < V_DATE_EFF) THEN
  V_DE_SSAAMM := V_DATE_EFF; 
 END IF;
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END; 
';
  END IF;

  conditionRetro  :=NULL;
  OPEN cur_mapdoRetro;
  LOOP FETCH cur_mapdoRetro INTO lig_mapdoRetro ;
  
    EXIT WHEN cur_mapdoRetro%NOTFOUND;

    IF lig_mapdoRetro.donneegxp IS NOT NULL THEN
      conditionRetro := conditionRetro||'
IF ';
      IF NOT lig_mapdoRetro.numpacs = '*' THEN
        conditionRetro := conditionRetro||'INSTR('''||lig_mapdoRetro.numpacs||''',v_numpac)>0 AND ';
      END IF;

      vFunctionCompare := 'IS_EQ';
      vFunctionCompareParam3 := NULL;
      IF lig_mapdoRetro.data_type = 'DATE' THEN
        vFunctionCompare := 'IS_EQ_DATE';
        vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
      END IF;
      conditionRetro  :=conditionRetro||' NOT '||vFunctionCompare||'(v_ligNew.'||lig_mapdoRetro.donneegxp||',v_ligOld.'||lig_mapdoRetro.donneegxp||vFunctionCompareParam3||') THEN 
 v_retro :=''O''; ';
      IF lig_mapdoRetro.clause_date_eff_retro IS NULL THEN
        conditionRetro :=conditionRetro||' 	
 V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_DEFAULT, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_DEFAULT)); ';
      ELSE
        conditionRetro := conditionRetro || ' 
 ' || lig_mapdoRetro.clause_date_eff_retro || '; 
V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_TMP, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_TMP));	';
      END IF;
      conditionRetro := conditionRetro || ' 
END IF; ';
    END IF;
  END LOOP;
  CLOSE cur_mapdoRetro;

  IF conditionRetro IS NULL THEN
    RETURN NULL;
  END IF;

  v_retour := v_retour||' 
 IF NVL(v_retro,''N'') = ''Z'' THEN 
  RETURN; 
 END IF;

 IF NOT tabRefPacByNumpac.exists(V_NUMPAC) THEN
  SELECT * 
  INTO tabRefPacByNumpac(V_NUMPAC) 
  FROM TGE_REF_PAC 
  WHERE NUMPAC = V_NUMPAC; 
 END IF;
 V_PERIODEENCOURS := tabRefPacByNumpac(V_NUMPAC).PERIODEENCOURS;
 V_DEB_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_RETRO;
 V_DEB_HISTO_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_HISTO_RETRO;
 V_NB_MOIS_RETRO := NVL(tabRefPacByNumpac(V_NUMPAC).NB_MOIS_RETRO, 0);

 IF V_PERIODEENCOURS < V_DEB_RETRO OR V_DEB_RETRO IS NULL THEN 
  RETURN; 
 END IF;

 -- La période rétro doit être >= à : 
 -- - La date de début des histos de rétro 
 -- - La période en cours - le nombre de mois de rétro 
 -- On prend donc la plus grande de ces 2 dates + la date d''effet
 IF DELETING THEN
  V_DATE_EFFET_RETRO := v_ligOld.'||champDateEffetRetro||';
 ELSE
  V_DATE_EFFET_RETRO := v_ligNew.'||champDateEffetRetro||';
 END IF;
 V_DE_SSAAMM_DEFAULT       := GREATEST(TO_CHAR(V_DATE_EFFET_RETRO ,''YYYYMM''),V_DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(to_date(V_PERIODEENCOURS,''YYYYMM''),-V_NB_MOIS_RETRO),''YYYYMM''));
 V_DE_SSAAMM := NULL;

 IF V_DE_SSAAMM_DEFAULT >= V_PERIODEENCOURS THEN 
  RETURN; 
 END IF;

 v_retro :=''N''; 
 IF (INSERTING and v_ligOld.MATRIC IS NULL) OR (DELETING and v_ligNew.MATRIC IS NULL) THEN 
  -- En insertion, si on n''a pas récupéré de ''OLD'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  -- En suppression, si on n''a pas récupéré de ''NEW'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  v_retro:=''O''; 
  V_DE_SSAAMM := V_DE_SSAAMM_DEFAULT;
 ELSE 
  -- Sinon, on compare ''OLD'' et ''NEW''
  '|| conditionRetro ||'
 END IF; -- FIN updating

 IF NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 '|| procRetroPaiezadCodeChrono ||' 
 IF V_DE_SSAAMM >= V_PERIODEENCOURS OR NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 -- On positionne une valeur reconnaissable pour savoir qu''on a déjà trouvé notre bonheur 
 -- Pas la peine de refaire tous les select pour les autres couples NUMPAC/PACMAT 
 v_retro := ''Z''; 
 TGE_RETRO_INSCRIPTION(V_NUMPAC, V_PACMAT, V_DE_SSAAMM, V_CODE_CHRONO, V_PAIEZAD, ''' || NOM_TABLE ||'''); 
END CHECK_RETRO_'||NOM_TABLE||';';

  EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour :=  '
-- DEBUT TRAITEMENT RETRO
CHECK_RETRO_'||NOM_TABLE||'(v_ligOld, v_ligNew, v_numpac, v_pacmat, v_paiezad, v_retro, tabRefPacByNumpac);
-- FIN TRAITEMENT RETRO';
 
  return v_retour;
END TGE_CREATE_TRIGGER_RETRO;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le NUMPAC, ni le PACMAT, ni le NUMCNT
  IF UPDATING AND (NOT v_ligOld.NUMPAC=v_ligNew.NUMPAC OR NOT v_ligOld.PACMAT=v_ligNew.PACMAT OR NOT v_ligOld.NUMCNT=v_ligNew.NUMCNT) THEN
    -- Message d''erreur --> On interdit la mise à jour du NUMPAC, du PACMAT et du NUMCNT : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes NUMPAC, PACMAT et NUMCNT n''''est pas autorisée : vous devez supprimer puis recréer le contrat'');
  END IF;
  -- On vérifie qu''on ne modifie pas le RHID et qu''il n''est pas vide
  IF (INSERTING OR UPDATING) AND v_ligNew.MATRIC IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne MATRIC doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT v_ligOld.MATRIC=v_ligNew.MATRIC THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne MATRIC n''''est pas autorisée'');
  END IF;
  -- On vérifie qu''on ne modifie pas la date de début de contrat et qu''elle n''est pas vide
  IF (INSERTING OR UPDATING) AND v_ligNew.DSDCN IS NULL THEN
    RAISE_APPLICATION_ERROR(-20000,''La colonne DSDCN doit être renseignée dans DIC_ADM_CONTRAT'');
  END IF;
  IF UPDATING AND NOT v_ligOld.DSDCN=v_ligNew.DSDCN THEN
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne DSDCN n''''est pas autorisée'');
  END IF;
  
  IF INSERTING THEN
    -- On regarde si le couple NUMPAC/PACMAT existe dans SECUPACMAT (premier contrat du couple ?), et si un NUMPAC temporaire est positionné pour le MATRIC (premier contrat du MATRIC ?)
    BEGIN
      SELECT NVL(MATRIC,''NO_MATRIC'') INTO v_matricForPacmat FROM SECUPACMAT WHERE NUMPAC=v_ligNew.NUMPAC AND PACMAT=v_ligNew.PACMAT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN v_matricForPacmat:=NULL;
      WHEN OTHERS THEN RAISE;
    END;
    IF v_matricForPacmat IS NULL THEN
      v_nbLig:=0;
    ELSE
      IF NOT v_matricForPacmat=v_ligNew.MATRIC THEN
        -- Le couple NUMPAC/PACMAT existe pour un autre MATRIC
        RAISE_APPLICATION_ERROR(-20000,''Erreur lors de l''''attribution du PACMAT pour le matricule ''||v_ligNew.MATRIC||'' sur le PAC ''||v_ligNew.NUMPAC||'' : le PACMAT ''||v_ligNew.PACMAT||'' est déjà associé au matricule ''||v_matricForPacmat);
      END IF;
      v_nbLig:=1;
    END IF;
    IF v_nbLig=0 THEN
      -- Premier contrat pour le couple NUMPAC/PACMAT : on insère dans SECUPACMAT (ou on met à jour la ligne ayant un NUMPAC temporaire, si elle existe)
      SELECT COUNT(*) INTO v_nbLig FROM SECUPACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=v_ligNew.MATRIC;
      IF v_nbLig=1 THEN
        -- Il y a un couple NUMPAC/PACMAT temporaire dans SECUPACMAT pour ce MATRIC : on le met à jour
        UPDATE SECUPACMAT SET NUMPAC=v_ligNew.NUMPAC, PACMAT=v_ligNew.PACMAT WHERE NUMPAC=''TMPPAC'' AND MATRIC=v_ligNew.MATRIC;
      ELSE
        -- On insère le couple NUMPAC/PACMAT dans SECUPACMAT
        INSERT INTO SECUPACMAT (NUMPAC, PACMAT, MATRIC) VALUES (v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.MATRIC);
        v_doMajPerso := 1;
      END IF;
    END IF;
    -- Si la colonne NUMCNT_ORIGINE est vide, on la valorise avec NUMCNT
    IF v_ligNew.NUMCNT_ORIGINE IS NULL THEN
      :NEW.NUMCNT_ORIGINE := v_ligNew.NUMCNT;
      v_ligNew.NUMCNT_ORIGINE := :NEW.NUMCNT_ORIGINE;
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF insérés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligNew.MATRIC, v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;
    
   IF NOT tabRefPacByNumpac.exists(v_ligNew.NUMPAC) THEN
       SELECT * INTO tabRefPacByNumpac(v_ligNew.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = v_ligNew.NUMPAC;
   END IF;
   
   	v_date_debut_periode_paie := to_date(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS || ''01'',''YYYYMMDD''); 

   	IF v_ligNew.DSDCN < v_date_debut_periode_paie THEN
    	:NEW.ENTREE_RETRO := ''O'';
   	ELSE
	   	:NEW.ENTREE_RETRO := ''N'';
    END IF;
    v_ligNew.ENTREE_RETRO := :NEW.ENTREE_RETRO;

    IF v_ligNew.DSFCN < v_date_debut_periode_paie THEN
    	:NEW.SORTIE_RETRO := ''O'';
   	ELSE
	   	:NEW.SORTIE_RETRO := ''N'';
    END IF;
    v_ligNew.SORTIE_RETRO := :NEW.SORTIE_RETRO;

    
  ELSIF UPDATING AND (NOT UPDATING(''DATE_EFF_CONTRAT'') AND NOT UPDATING(''CURRENT_PAIEZAD'')) THEN
    -- On considère que c''est une "vraie" mise à jour si ce n''est pas de la mise à jour de DATE_EFF_CONTRAT ou CURRENT_PAIEZAD
    -- On stocke la liste des NUMPAC/PACMAT modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
      IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0 THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
      -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF modifiés
      v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligNew.MATRIC, v_ligNew.NUMPAC, v_ligNew.PACMAT, v_ligNew.NUMCNT, v_ligNew.DSDCN);
      v_cles_idx_contrat.extend;
      v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
    END IF;

    IF UPDATING(''DSFCN'') THEN
       IF NOT tabRefPacByNumpac.exists(v_ligOld.NUMPAC) THEN
         SELECT * INTO tabRefPacByNumpac(v_ligOld.NUMPAC) FROM TGE_REF_PAC WHERE NUMPAC = v_ligOld.NUMPAC;
       END IF;
    	v_date_debut_periode_paie := to_date(tabRefPacByNumpac(v_ligNew.NUMPAC).PERIODEENCOURS || ''01'',''YYYYMMDD''); 
    	IF v_ligNew.DSFCN < v_date_debut_periode_paie THEN
    		:NEW.SORTIE_RETRO := ''O'';
    	ELSE
	    	:NEW.SORTIE_RETRO := ''N'';
    	END IF;
    	v_ligNew.SORTIE_RETRO := :NEW.SORTIE_RETRO;
    END IF;
  ELSIF DELETING THEN
    IF (v_listNumpacPacmatToDelete IS NULL OR INSTR(v_listNumpacPacmatToDelete, '',''||v_ligOld.NUMPAC||v_ligOld.PACMAT||'','')<=0) THEN
      -- On liste les couples NUMPAC/PACMAT supprimés pour les traiter par la suite
      v_NUMPAC_PACMAT.MATRIC:=v_ligOld.MATRIC;
      v_NUMPAC_PACMAT.NUMPAC:=v_ligOld.NUMPAC;
      v_NUMPAC_PACMAT.PACMAT:=v_ligOld.PACMAT;
      IF v_TAB_NUMPAC_PACMAT IS NULL THEN
        v_TAB_NUMPAC_PACMAT:=TAB_NUMPAC_PACMAT_TO_DELETE(v_NUMPAC_PACMAT);
      ELSE
        v_TAB_NUMPAC_PACMAT.EXTEND();
        v_TAB_NUMPAC_PACMAT(v_TAB_NUMPAC_PACMAT.last):=v_NUMPAC_PACMAT;
      END IF;
      v_listNumpacPacmatToDelete := v_listNumpacPacmatToDelete||v_ligOld.NUMPAC||v_ligOld.PACMAT||'','';
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF supprimés
    v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(v_ligOld.MATRIC, v_ligOld.NUMPAC, v_ligOld.PACMAT, v_ligOld.NUMCNT, v_ligOld.DSDCN);
    v_cles_idx_contrat.extend;
    v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
  END IF;
';
END TRG_CONTRAT_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_AFTER_ROW
  RETURN CLOB
AS
  v_retour CLOB;
  v_prec_donneegxp VARCHAR2(100);
  CURSOR cur_mapdo
  IS
    SELECT
      NUMPAC,
      ELEMENT,
      DONNEEGXP,
      data_type
    FROM
      TGE_REF_MAPDO,user_tab_cols
    WHERE
      column_name=donneegxp and table_name='DIC_ADM_CONTRAT_HISTO' and
      ELEMENT IN
      (
        SELECT
          'A301'
        FROM
          dual
      UNION ALL
      SELECT
        'A302'
      FROM
        dual
      UNION
      SELECT
        nom_elt
      FROM
        tge_map_arg_elt
      WHERE
        code_table = 'LTP'
      )
    ORDER BY
      ELEMENT,
      NUMPAC DESC;
    lig_mapdo cur_mapdo%rowtype;
    lig_mapdo_prec cur_mapdo%rowtype := NULL;
    v_selectDeb VARCHAR2(100);
    v_selectFin VARCHAR2(100);
  BEGIN
    v_retour :=
    ' 
v_numpac := NVL(v_ligNew.NUMPAC,v_ligOld.NUMPAC); 

v_pacmat :=NVL(v_ligNew.PACMAT,v_ligOld.PACMAT);
IF DELETING THEN
 v_paiezad := v_ligOld.paiezad;
 v_periode := TO_CHAR(v_ligOld.date_eff, ''YYYYMM'');
ELSE
 v_paiezad := v_ligNew.paiezad;
 v_periode := TO_CHAR(v_ligNew.date_eff, ''YYYYMM'');
END IF; 
-- On ne traite que l''UPDATE, et on n''ajoute chaque couple NUMPAC/PAIEZAD qu''une seule fois 
IF NOT tabTrtPeriodesIndividuelles.exists(v_numpac||v_paiezad) THEN 
 tabTrtPeriodesIndividuelles(v_numpac||v_paiezad) := ''O''; 
 IF INSERTING OR DELETING THEN 
  alimPeriodesIndiv := TRUE; 
 ELSE 
  alimPeriodesIndiv := FALSE; '
    ;
    OPEN cur_mapdo;
    LOOP
      FETCH
        cur_mapdo
      INTO
        lig_mapdo ;
        
      IF lig_mapdo_prec.element IS NOT NULL AND
        (
          cur_mapdo%NOTFOUND OR NOT lig_mapdo_prec.element=lig_mapdo.element
        )
        THEN
        -- La dernière ligne traitée était la dernière ligne de mapping pour l'
        -- élément précédent
        -- Si c'était le PAC *, c'est le cas par défaut (ELSE), sinon, on
        -- continue de tester le PAC
       
        IF lig_mapdo_prec.numpac='*' THEN
          v_retour             := v_retour||' 
ELSE ';
        ELSE
          v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo_prec.numpac||
          ''' THEN ';
        END IF;
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo_prec.element
        ||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||
        lig_mapdo_prec.element||''') := '||REPLACE(v_prec_donneegxp,'v_ligOld','v_ligNew')||'; 
END IF; ';
        IF NOT lig_mapdo_prec.numpac='*' THEN
          -- Pas de ligne avec un PAC * : cas par défaut --> NULL
          v_retour := v_retour||' 
ELSE 
tabValToCompare(''old'||
          lig_mapdo_prec.element||''') := NULL; 
tabValToCompare(''new'||
          lig_mapdo_prec.element||''') := NULL; 
END IF; ';
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND;

    v_selectDeb := 'v_ligOld.';
    v_selectFin := NULL;
    IF lig_mapdo.data_type = 'DATE' THEN
      v_selectDeb := 'TO_CHAR(v_ligOld.';
      v_selectFin := ',''yyyymmddhh24miss'')';
    END IF;
       SELECT
          v_selectDeb
          ||LISTAGG(donneegxp,v_selectFin||'||'||v_selectDeb) WITHIN GROUP (
        ORDER BY
          donneegxp)
          ||v_selectFin
        INTO
          v_prec_donneegxp
        FROM
          (
            SELECT
              numpac,
              donneegxp
            FROM
              TABLE (get_gxp_trt_particulier_datas('DIC_ADM_CONTRAT_HISTO',lig_mapdo.element))
            UNION
            SELECT
              lig_mapdo.numpac,
              lig_mapdo.donneegxp
            FROM
              dual
          );  
    
    
      -- C'est la toute première ligne, ou bien la ligne précédente était la
      -- dernière ligne de mapping pour l'élément précédent
      -- On recommence un nouveau bloc IF
      IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=
        lig_mapdo.element THEN
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo.element||
        ''') := NULL; 
tabValToCompare(''new'||lig_mapdo.element||
        ''') := NULL; 
IF v_numpac IS NULL THEN NULL; ';
      END IF;
      IF NOT lig_mapdo.numpac='*' THEN
        v_retour            := v_retour||' 
ELSIF v_numpac='''||
        lig_mapdo.numpac||''' THEN 
tabValToCompare(''old'||lig_mapdo.element||
        ''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||
        lig_mapdo.element||''') := '||REPLACE(v_prec_donneegxp,'v_ligOld','v_ligNew')||';  ';
      END IF;
      lig_mapdo_prec := lig_mapdo;
    END LOOP;
    CLOSE cur_mapdo;
    IF lig_mapdo_prec.element IS NOT NULL THEN
      -- On est passé au moins une fois dans la boucle
      lig_mapdo_prec := NULL;
      OPEN cur_mapdo;
      LOOP
        FETCH
          cur_mapdo
        INTO
          lig_mapdo ;
        EXIT
      WHEN cur_mapdo%NOTFOUND;
        -- C'est la toute première ligne, ou bien la ligne précédente était la
        -- dernière ligne de mapping pour l'élément précédent
        IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=lig_mapdo.element THEN
          v_retour := v_retour||' 
IF NOT IS_EQ(tabValToCompare(''new'||lig_mapdo.element||'''),tabValToCompare(''old'||lig_mapdo.element||''')) THEN 
alimPeriodesIndiv := TRUE; 
END IF; ';
        END IF;
        lig_mapdo_prec := lig_mapdo;
      END LOOP;
      CLOSE cur_mapdo;
    END IF;
    v_retour := v_retour||
    ' 
END IF; 
IF alimPeriodesIndiv THEN 
-- Modification de la date de début ou de fin de suspension : on met à jour la table des périodes individuelles 
idxPeriodesIndiv := null; 
FOR i IN 1..paiezadTab.count LOOP 
IF numpacTab(i) = v_numpac AND paiezadTab(i) = v_paiezad THEN 
idxPeriodesIndiv := i; 
EXIT; 
END IF; 
end LOOP ;  

IF idxPeriodesIndiv IS NOT NULL THEN 
periodeTab(idxPeriodesIndiv) := LEAST(periodeTab(idxPeriodesIndiv), v_periode); 
ELSE 
paiezadTab.EXTEND ; 
paiezadTab(paiezadTab.LAST) := v_paiezad; 
numpacTab.EXTEND ; 
numpacTab(numpacTab.LAST) := v_numpac; 
periodeTab.EXTEND ; 
periodeTab(periodeTab.LAST) := v_periode; 
END IF; 
END IF; 
END IF; 
IF NOT tabPresenceFichierPacmat.exists(v_numpac||v_pacmat) THEN
  tabPresenceFichierPacmat(v_numpac||v_pacmat).NUMPAC := v_numpac; 
  tabPresenceFichierPacmat(v_numpac||v_pacmat).PACMAT := v_pacmat;
END IF; 
IF  v_lanceRecalculHp THEN 
 in_calc_hp := T_TRAITEMENT_PERIODES_INDIV();
 in_calc_hp(''P_NUMPAC''):=NVL(v_ligNew.NUMPAC,v_ligOld.NUMPAC); 
 in_calc_hp(''P_PACMAT''):=NVL(v_ligNew.PACMAT,v_ligOld.PACMAT); 
 in_calc_hp(''P_NUMCNT''):=TO_CHAR(NVL(v_ligNew.NUMCNT,v_ligOld.NUMCNT)); 
 IF DELETING THEN
  in_calc_hp(''P_PAIEZAD''):=v_ligOld.PAIEZAD; 
  in_calc_hp(''P_DATE_EFF''):=TO_CHAR(v_ligOld.DATE_EFF,''DD/MM/YYYY''); 
  in_calc_hp(''P_DATE_SORTIE_SIT_BO''):=TO_CHAR(v_ligOld.date_sortie_sit_bo,''DD/MM/YYYY'');
 ELSE
  in_calc_hp(''P_PAIEZAD''):=v_ligNew.PAIEZAD; 
  in_calc_hp(''P_DATE_EFF''):=TO_CHAR(v_ligNew.DATE_EFF,''DD/MM/YYYY''); 
  in_calc_hp(''P_DATE_SORTIE_SIT_BO''):=TO_CHAR(v_ligNew.date_sortie_sit_bo,''DD/MM/YYYY'');
 END IF; 
 in_calc_hp(''P_LOGIN'') :=''TRIGGER''; 
 in_calc_hp(''p_isDeleting'') :=v_isDeleting;
 calcHpTab.EXTEND ;
 calcHpTab(calcHpTab.LAST) := in_calc_hp;
END IF; 
'
    ;
    RETURN v_retour;
  END TRG_CONTRAT_HISTO_AFTER_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le NUMPAC, ni le PACMAT, ni le NUMCNT, ni la date d''effet
  IF UPDATING AND (NOT v_ligOld.NUMPAC=v_ligNew.NUMPAC OR NOT v_ligOld.PACMAT=v_ligNew.PACMAT OR NOT v_ligOld.NUMCNT=v_ligNew.NUMCNT OR NOT v_ligOld.DATE_EFF=v_ligNew.DATE_EFF) THEN
    -- Message d''erreur --> On interdit la mise à jour du NUMPAC, du PACMAT et de la date d''effet : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes NUMPAC, PACMAT, NUMCNT et DATE_EFF n''''est pas autorisée : vous devez supprimer puis recréer l''''occurrence'');
  END IF;
  IF INSERTING OR UPDATING THEN
    IF v_ligNew.DATE_FIN IS NULL THEN
      :NEW.DATE_FIN := TO_DATE(''20991231'',''yyyymmdd'');
      v_ligNew.DATE_FIN := :NEW.DATE_FIN;
    END IF;
  END IF;
  IF v_type_writer<>''N'' AND v_type_writer<>''M'' THEN
    IF v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,NVL(v_ligNew.MATRIC,v_ligOld.MATRIC))<=0 THEN
      -- On stocke la liste des NUMPAC/PACMAT modifiés
      IF v_nbMatricToUpdate=1000 THEN
        v_nbMatricToUpdate := 0;
        v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToUpdate>0 THEN
        v_listMatricToUpdate := v_listMatricToUpdate||'','';
      END IF;
      v_listMatricToUpdate := v_listMatricToUpdate||''''''''||NVL(v_ligNew.MATRIC,v_ligOld.MATRIC)||'''''''';
      v_nbMatricToUpdate := v_nbMatricToUpdate+1;
    END IF;
    -- On stocke la liste des NUMPAC/PACMAT/NUMCNT/DATE_EFF insérés/modifiés/supprimés
    IF DELETING THEN
     v_date_eff := v_ligOld.DATE_EFF;
    ELSE
     v_date_eff := v_ligNew.DATE_EFF;
    END IF;
    v_cle_idx_contrat := T_CLE_IDX_CONTRAT_HISTO(NVL(v_ligNew.MATRIC,v_ligOld.MATRIC), NVL(v_ligNew.NUMPAC,v_ligOld.NUMPAC), NVL(v_ligNew.PACMAT,v_ligOld.PACMAT), NVL(v_ligNew.NUMCNT,v_ligOld.NUMCNT), v_date_eff);
    v_cles_idx_contrat.extend;
    v_cles_idx_contrat(v_cles_idx_contrat.last) := v_cle_idx_contrat;
  END IF;
  v_isDeleting := 0;
  IF DELETING THEN
    v_isDeleting := 1; 
  END IF;
  v_lanceRecalculHp := FALSE;
  IF NOT IS_EQ(v_ligNew.ZA820,v_ligOld.ZA820) OR NOT IS_EQ(v_ligNew.ZA819,v_ligOld.ZA819) THEN
    v_lanceRecalculHp:=true;
  END IF;
';
END TRG_CONTRAT_HISTO_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_PERSO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_PERSO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  IF INSERTING THEN
    -- On vérifie que le NUMPAC soit renseigné : si ce n''est pas le cas, on positionne un NUMPAC temporaire
    IF v_ligNew.CURRENT_NUMPAC IS NULL THEN
      :NEW.CURRENT_NUMPAC:=''TMPPAC'';
      v_ligNew.CURRENT_NUMPAC:=:NEW.CURRENT_NUMPAC;
    END IF;
    -- On vérifie que le PACMAT soit renseigné : si ce n''est pas le cas, on va cherche le prochain PACMAT du NUMPAC
    IF v_ligNew.CURRENT_PACMAT IS NULL THEN
      :NEW.CURRENT_PACMAT:=PAC_SEQUENCE_GET_NEXT(v_ligNew.CURRENT_NUMPAC);
      v_ligNew.CURRENT_PACMAT:=:NEW.CURRENT_PACMAT;
    END IF;
    -- On regarde si le couple NUMPAC/PACMAT n''existe pas déjà dans SECUPACMAT pour un autre MATRIC
    BEGIN
      SELECT NVL(MATRIC,''NO_MATRIC'') INTO v_matricForPacmat FROM SECUPACMAT WHERE NUMPAC=v_ligNew.CURRENT_NUMPAC AND PACMAT=v_ligNew.CURRENT_PACMAT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN v_matricForPacmat:=NULL;
      WHEN OTHERS THEN RAISE;
    END;
    IF v_matricForPacmat IS NOT NULL AND NOT v_matricForPacmat=v_ligNew.MATRIC THEN
      -- Le couple NUMPAC/PACMAT existe pour un autre MATRIC
      RAISE_APPLICATION_ERROR(-20000,''Erreur lors de l''''attribution du PACMAT pour le matricule ''||v_ligNew.MATRIC||'' sur le PAC ''||v_ligNew.CURRENT_NUMPAC||'' : le PACMAT ''||v_ligNew.CURRENT_PACMAT||'' est déjà associé au matricule ''||v_matricForPacmat);
    END IF;
    -- On insère dans SECUPACMAT
    --INSERT INTO SECUPACMAT (NUMPAC, PACMAT, MATRIC, PRIORITE_SITUATION) VALUES (v_ligNew.CURRENT_NUMPAC, v_ligNew.CURRENT_PACMAT, v_ligNew.MATRIC, 0);
    merge into SECUPACMAT a using (select v_ligNew.CURRENT_NUMPAC as numpac, v_ligNew.CURRENT_PACMAT as pacmat, v_ligNew.MATRIC as matric , 0 as PRIORITE_SITUATION from dual) b on (a.numpac=b.numpac and a.pacmat=b.pacmat )
    when not matched then
    insert (a.NUMPAC, a.PACMAT, a.MATRIC, a.PRIORITE_SITUATION) values (b.NUMPAC, b.PACMAT, b.MATRIC, b.PRIORITE_SITUATION);

    -- On stocke la liste des MATRIC modifiés
    IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0) THEN
      IF v_nbMatricToUpdate=1000 THEN
        v_nbMatricToUpdate := 0;
        v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToUpdate>0 THEN
        v_listMatricToUpdate := v_listMatricToUpdate||'','';
      END IF;
      v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
      v_nbMatricToUpdate := v_nbMatricToUpdate+1;
    END IF;
  ELSIF UPDATING THEN
    -- On vérifie qu''on ne modifie pas le RHID
    IF NOT v_ligOld.MATRIC=v_ligNew.MATRIC THEN
      -- Message d''erreur --> On interdit la mise à jour du RHID : il faut faire un delete puis un insert
      RAISE_APPLICATION_ERROR(-20000,''La mise à jour de la colonne MATRIC n''''est pas autorisée : vous devez supprimer puis recréer le dossier'');
    END IF;
    IF (NOT UPDATING(''DATE_EFF_PERSO'') AND NOT UPDATING(''CURRENT_NUMPAC'') AND NOT UPDATING(''CURRENT_PACMAT'') AND NOT UPDATING(''CURRENT_NUMCNT'') AND NOT UPDATING(''DATE_EFF_CONTRAT'')) THEN
      -- On considère que c''est une "vraie" mise à jour si ce n''est pas de la mise à jour de DATE_EFF_PERSO, CURRENT_NUMPAC, CURRENT_PACMAT, CURRENT_NUMCNT ou DATE_EFF_CONTRAT
      -- On stocke la liste des MATRIC modifiés
      IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,v_ligNew.MATRIC)<=0) THEN
        IF v_nbMatricToUpdate=1000 THEN
          v_nbMatricToUpdate := 0;
          v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
        ELSIF v_nbMatricToUpdate>0 THEN
          v_listMatricToUpdate := v_listMatricToUpdate||'','';
        END IF;
        v_listMatricToUpdate := v_listMatricToUpdate||''''''''||v_ligNew.MATRIC||'''''''';
        v_nbMatricToUpdate := v_nbMatricToUpdate+1;
      END IF;
    END IF;
  ELSIF DELETING THEN
    -- On stocke la liste des MATRIC supprimés
    IF v_listMatricToDelete IS NULL OR INSTR(v_listMatricToDelete,v_ligOld.MATRIC)<=0 THEN
      IF v_nbMatricToDelete=1000 THEN
        v_nbMatricToDelete := 0;
        v_listMatricToDelete := v_listMatricToDelete||'') OR MATRIC IN ('';
      ELSIF v_nbMatricToDelete>0 THEN
        v_listMatricToDelete := v_listMatricToDelete||'','';
      END IF;
      v_listMatricToDelete := v_listMatricToDelete||''''''''||v_ligOld.MATRIC||'''''''';
      v_nbMatricToDelete := v_nbMatricToDelete+1;
    END IF;
  END IF;
';
END TRG_PERSO_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_PERSO_HISTO_BEFORE_ROW
=SQL=
CREATE OR REPLACE FUNCTION TRG_PERSO_HISTO_BEFORE_ROW RETURN CLOB AS 
BEGIN
  RETURN '
  -- On vérifie qu''on ne modifie ni le RHID, ni la date d''effet
  IF UPDATING AND (NOT v_ligOld.MATRIC=v_ligNew.MATRIC OR NOT v_ligOld.DATE_EFF=v_ligNew.DATE_EFF) THEN
    -- Message d''erreur --> On interdit la mise à jour du RHID et de la date d''effet : il faut faire un delete puis un insert
    RAISE_APPLICATION_ERROR(-20000,''La mise à jour des colonnes MATRIC et DATE_EFF n''''est pas autorisée : vous devez supprimer puis recréer l''''occurrence'');
  END IF;
  IF INSERTING OR UPDATING THEN
    IF v_ligNew.DATE_FIN IS NULL THEN
      :NEW.DATE_FIN := TO_DATE(''20991231'',''yyyymmdd'');
      v_ligNew.DATE_FIN := :NEW.DATE_FIN;
    END IF;
  END IF;
  IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND (v_listMatricToUpdate IS NULL OR INSTR(v_listMatricToUpdate,NVL(v_ligNew.MATRIC,v_ligOld.MATRIC))<=0) THEN
    -- On stocke la liste des MATRIC modifiés
    IF v_nbMatricToUpdate=1000 THEN
      v_nbMatricToUpdate := 0;
      v_listMatricToUpdate := v_listMatricToUpdate||'') OR MATRIC IN ('';
    ELSIF v_nbMatricToUpdate>0 THEN
      v_listMatricToUpdate := v_listMatricToUpdate||'','';
    END IF;
    v_listMatricToUpdate := v_listMatricToUpdate||''''''''||NVL(v_ligNew.MATRIC,v_ligOld.MATRIC)||'''''''';
    v_nbMatricToUpdate := v_nbMatricToUpdate+1;
  END IF;
';
END TRG_PERSO_HISTO_BEFORE_ROW;
##
TAG_CHARSET=@€éèç
##
ALIM_IDX
=SQL=
CREATE OR REPLACE PACKAGE ALIM_IDX
AS
  TYPE T_IDX_DONNEE IS TABLE OF DIC_IDX_CONTRAT_HISTO%ROWTYPE INDEX BY VARCHAR2(32);

  TYPE T_EXISTE_RUPT_DONNEE IS TABLE OF INTEGER INDEX BY VARCHAR2(30);

  TYPE T_EXISTE_IDX_DONNEE IS TABLE OF INTEGER INDEX BY VARCHAR2(32);

  TYPE T_REF_PAC_BY_NUMPAC IS TABLE OF TGE_REF_PAC%ROWTYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;

  PROCEDURE COMPARE_CONTRAT_JOB(
    p_job_number NUMBER,
    p_action VARCHAR2);

  PROCEDURE COMPARE_CONTRAT(
    p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
    p_action VARCHAR2, 
    p_tabDac T_TAB_DAC, 
    p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE);

  PROCEDURE COMPARE_CONTRAT_HISTO_JOB(
    p_job_number NUMBER,
    p_action VARCHAR2);

  PROCEDURE COMPARE_CONTRAT_HISTO(
    p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
    p_action VARCHAR2, 
    p_tabDach T_TAB_DACH, 
    p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE);

  PROCEDURE INSERT_DATA_CONTRAT(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_ligne T_LIG_DAC);

  PROCEDURE UPDATE_DATA_CONTRAT(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_valueOldContrat CLOB, 
    p_lignePrec T_LIG_DAC, 
    p_ligne T_LIG_DAC, 
    p_ligneSuiv T_LIG_DAC, 
    p_listeDonneesIdx T_EXISTE_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);

  PROCEDURE INSERT_DATA_CONTRAT_HISTO(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_ligne T_LIG_DACH, 
    p_ligneSuiv T_LIG_DACH, 
    p_dsfcn DATE, 
    p_listeDonneesIdx T_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);

  PROCEDURE UPDATE_DATA_CONTRAT_HISTO(
    p_nomDonnee VARCHAR2, 
    p_emptyValue VARCHAR2, 
    p_valueLignePrec CLOB, 
    p_valueLigne CLOB, 
    p_valueLigneSuiv CLOB, 
    p_valueOldContratHisto CLOB, 
    p_lignePrec T_LIG_DACH, 
    p_ligne T_LIG_DACH, 
    p_ligneSuiv T_LIG_DACH, 
    p_dsdcn DATE, 
    p_dsfcn DATE, 
    p_listeDonneesIdx T_IDX_DONNEE, 
    p_listeDonneesRupt T_EXISTE_RUPT_DONNEE);
END ALIM_IDX;
##
ALIM_IDX
=SQL=
CREATE OR REPLACE PACKAGE BODY ALIM_IDX AS 

  PROCEDURE COMPARE_CONTRAT_JOB(
      p_job_number NUMBER,
      p_action     VARCHAR2) IS
    v_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
    v_anyData ANYDATA;
    v_tabDac T_TAB_DAC;
    TYPE tcur IS REF CURSOR; 
    cur tcur; 
    v_nomDonnee VARCHAR2(30); 
    v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE;
  BEGIN
    SELECT T_CLE_IDX_CONTRAT_HISTO(MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_IDX) BULK COLLECT INTO v_listeClesIdxContrat FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    DELETE FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    IF p_action = 'D' THEN
      ALIM_IDX_DELETE_CONTRAT(v_listeClesIdxContrat);
    ELSE
      SELECT OLD_DATAS INTO v_anyData FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      IF NOT v_anyData.getCollection(v_tabDac) = dbms_types.success THEN
        v_tabDac := T_TAB_DAC();
      END IF;
      DELETE FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      OPEN cur FOR SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT;
      LOOP
        FETCH cur INTO v_nomDonnee;
        EXIT WHEN cur % NOTFOUND;
        v_listeDonneesRupt(v_nomDonnee) := 1;
      END LOOP;
      CLOSE cur;
      COMPARE_CONTRAT(v_listeClesIdxContrat, p_action, v_tabDac, v_listeDonneesRupt);
    END IF;
  END COMPARE_CONTRAT_JOB;

  PROCEDURE COMPARE_CONTRAT(
      p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
      p_action VARCHAR2, 
      p_tabDac T_TAB_DAC, 
      p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
    TYPE T_EXISTE_MATRIC IS TABLE OF INTEGER INDEX BY VARCHAR2(32);
    v_listeMatricules T_EXISTE_MATRIC;
    TYPE T_EXISTE_CLES_CONTRAT IS TABLE OF T_CLE_IDX_CONTRAT_HISTO INDEX BY VARCHAR2(40);
    v_listeClesIdxContrat T_EXISTE_CLES_CONTRAT;
    v_matric VARCHAR(32);
    v_cpt NUMBER;
    TYPE tcur IS REF CURSOR;
    cur tcur;
    v_dacMatric T_TAB_DAC;
    v_lignePrec T_LIG_DAC := GET_EMPTY_LIG_DAC();
    v_ligne T_LIG_DAC := GET_EMPTY_LIG_DAC();
    v_ligneSuiv T_LIG_DAC := GET_EMPTY_LIG_DAC();
  BEGIN
    FOR i in 1..p_listeClesIdxContrat.count LOOP
      v_listeMatricules(p_listeClesIdxContrat(i).MATRIC) := 1;
      v_listeClesIdxContrat(LPAD(p_listeClesIdxContrat(i).MATRIC,32,'0')||TO_CHAR(p_listeClesIdxContrat(i).DATE_IDX,'yyyymmdd')) := p_listeClesIdxContrat(i);
    END LOOP;
    -- Pour chaque salarié (MATRIC) ayant été mis à jour
    v_matric := v_listeMatricules.FIRST;
    WHILE v_matric IS NOT NULL LOOP
      v_dacMatric := GET_DAC_MATRIC(v_matric);
      v_cpt := 0;
      LOOP
        EXIT WHEN v_dacMatric.COUNT=0;
        v_cpt := v_cpt+1;
        IF v_cpt = 1 THEN
          -- Premier passage dans la boucle : le premier contrat est le "courant" (celui qu'on va traiter)
          v_ligne := v_dacMatric(v_cpt);
          v_cpt := v_cpt+1;
        END IF;
        EXIT WHEN v_cpt>v_dacMatric.COUNT;
        -- On récupère le contrat suivant
        v_ligneSuiv := v_dacMatric(v_cpt);
        IF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DSDCN,'yyyymmdd')) THEN
          -- Le contrat "courant" vient d'être inséré ou modifié : on appelle la procédure en passant le contrat précédent et le contrat suivant
          IF p_action = 'I' THEN
            ALIM_IDX_INSERT_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv);
          ELSIF p_action = 'U' THEN
            ALIM_IDX_UPDATE_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDac, p_listeDonneesRupt);
          END IF;
        END IF;
        -- Le contrat "courant" devient le précédent
        v_lignePrec := v_ligne;
        -- Le contrat suivant devient le "courant"
        v_ligne := v_ligneSuiv;
      END LOOP;
      v_ligneSuiv := NULL;
      IF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DSDCN,'yyyymmdd')) THEN
        -- Le dernier contrat vient d'être inséré ou modifié : on appelle la procédure en passant le contrat précédent (et le contrat suivant, même s'il est vide)
        IF p_action = 'I' THEN
          ALIM_IDX_INSERT_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv);
        ELSIF p_action = 'U' THEN
          ALIM_IDX_UPDATE_CONTRAT(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDac, p_listeDonneesRupt);
        END IF;
      END IF;
      -- Salarié suivant
      v_matric := v_listeMatricules.NEXT(v_matric);
    END LOOP;
  END COMPARE_CONTRAT;

  PROCEDURE COMPARE_CONTRAT_HISTO_JOB(
      p_job_number NUMBER,
      p_action     VARCHAR2) IS
    v_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
    v_anyData ANYDATA;
    v_tabDach T_TAB_DACH;
    TYPE tcur IS REF CURSOR; 
    cur tcur; 
    v_nomDonnee VARCHAR2(30); 
    v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE;
  BEGIN
    SELECT T_CLE_IDX_CONTRAT_HISTO(MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_IDX) BULK COLLECT INTO v_listeClesIdxContrat FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    DELETE FROM DIC_IDX_JOB_KEYS WHERE JOB_NUMBER=p_job_number;
    IF p_action = 'D' THEN
      ALIM_IDX_DELETE_CONTRAT_HISTO(v_listeClesIdxContrat);
    ELSE
      SELECT OLD_DATAS INTO v_anyData FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      IF NOT v_anyData.getCollection(v_tabDach) = dbms_types.success THEN
        v_tabDach := T_TAB_DACH();
      END IF;
      DELETE FROM DIC_IDX_JOB_OLD_DATAS WHERE JOB_NUMBER=p_job_number;
      OPEN cur FOR SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT;
      LOOP
        FETCH cur INTO v_nomDonnee;
        EXIT WHEN cur % NOTFOUND;
        v_listeDonneesRupt(v_nomDonnee) := 1;
      END LOOP;
      CLOSE cur;
      COMPARE_CONTRAT_HISTO(v_listeClesIdxContrat, p_action, v_tabDach, v_listeDonneesRupt);
    END IF;
  END COMPARE_CONTRAT_HISTO_JOB;

  PROCEDURE COMPARE_CONTRAT_HISTO(
      p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO, 
      p_action VARCHAR2, 
      p_tabDach T_TAB_DACH, 
      p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
    TYPE T_EXISTE_MATRIC IS TABLE OF INTEGER INDEX BY VARCHAR2(32);
    v_listeMatricules T_EXISTE_MATRIC;
    TYPE T_EXISTE_CLES_CONTRAT IS TABLE OF T_CLE_IDX_CONTRAT_HISTO INDEX BY VARCHAR2(40);
    v_listeClesIdxContrat T_EXISTE_CLES_CONTRAT;
    v_matric VARCHAR(32);
    v_cpt NUMBER;
    TYPE tcur IS REF CURSOR;
    cur tcur;
    v_dachMatric T_TAB_DACH;
    v_lignePrec T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligne T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligneSuiv T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_ligneSupp T_LIG_DACH := GET_EMPTY_LIG_DACH();
    v_cleRechercheSupp VARCHAR(40);
  BEGIN
    FOR i in 1..p_listeClesIdxContrat.count LOOP
      v_listeMatricules(p_listeClesIdxContrat(i).MATRIC) := 1;
      v_listeClesIdxContrat(LPAD(p_listeClesIdxContrat(i).MATRIC,32,'0')||TO_CHAR(p_listeClesIdxContrat(i).DATE_IDX,'yyyymmdd')) := p_listeClesIdxContrat(i);
    END LOOP;
    -- Pour chaque salarié (MATRIC) ayant été mis à jour
    v_matric := v_listeMatricules.FIRST;
    WHILE v_matric IS NOT NULL LOOP
      v_dachMatric := GET_DACH_MATRIC(v_matric);
      v_cpt := 0;
      LOOP
        EXIT WHEN v_dachMatric.COUNT=0;
        v_cpt := v_cpt+1;
        IF v_cpt = 1 THEN
          -- Premier passage dans la boucle : la première occurrence est la "courante" (celle qu'on va traiter)
          v_ligne := v_dachMatric(v_cpt);
          v_cpt := v_cpt+1;
        END IF;
        EXIT WHEN v_cpt>v_dachMatric.COUNT;
        -- On récupère l'occurrence suivante
        v_ligneSuiv := v_dachMatric(v_cpt);
        IF p_action = 'D' THEN
          IF v_cpt > 1 THEN
            -- Ce n'est pas le premier passage dans la boucle : on va vérifier qu'on n'a pas un contrat supprimé entre l'occurrence précédente et la "courante"
            v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(LPAD(v_matric,32,'0')||TO_CHAR(v_lignePrec.DATE_EFF,'yyyymmdd'));
            WHILE v_cleRechercheSupp < LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd') LOOP
              -- On a dans v_listeClesIdxContrat une clé qui n'existe plus : on va faire comme si on avait mis à jour la ligne suivante
              v_ligneSupp.NUMPAC := '_SUPP_';
              ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSupp, p_tabDach, p_listeDonneesRupt);
              v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(v_cleRechercheSupp);
            END LOOP;
          END IF;
        ELSIF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd')) THEN
          -- L'occurrence "courante" vient d'être insérée ou modifiée : on appelle la procédure en passant l'occurrence précédente et l'occurrence suivante
          IF p_action = 'I' THEN
            ALIM_IDX_INSERT_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv);
          ELSIF p_action = 'U' THEN
            ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDach, p_listeDonneesRupt);
          END IF;
        END IF;
        -- L'occurrence "courante" devient la précédente
        v_lignePrec := v_ligne;
        -- L'occurrence suivante devient la "courante"
        v_ligne := v_ligneSuiv;
        -- Pas d'occurrence suivante
        v_ligneSuiv := NULL;
      END LOOP;
      IF p_action = 'D' THEN
        v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(LPAD(v_matric,32,'0')||TO_CHAR(v_lignePrec.DATE_EFF,'yyyymmdd'));
        WHILE v_cleRechercheSupp IS NOT NULL LOOP
          -- On a dans v_listeClesIdxContrat une clé qui n'existe plus : on va faire comme si on avait mis à jour la ligne suivante
          v_ligneSupp.NUMPAC := '_SUPP_';
          ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSupp, p_tabDach, p_listeDonneesRupt);
          v_cleRechercheSupp := v_listeClesIdxContrat.NEXT(v_cleRechercheSupp);
        END LOOP;
      ELSIF v_listeClesIdxContrat.exists(LPAD(v_matric,32,'0')||TO_CHAR(v_ligne.DATE_EFF,'yyyymmdd')) THEN
        -- La dernière occurrence vient d'être insérée ou modifiée : on appelle la procédure en passant l'occurrence précédente (et l'occurrence suivante, même si elle est vide)
        IF p_action = 'I' THEN
          ALIM_IDX_INSERT_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv);
        ELSIF p_action = 'U' THEN
          ALIM_IDX_UPDATE_CONTRAT_HISTO(v_lignePrec, v_ligne, v_ligneSuiv, p_tabDach, p_listeDonneesRupt);
        END IF;
      END IF;
      -- Salarié suivant
      v_matric := v_listeMatricules.NEXT(v_matric);
    END LOOP;
  END COMPARE_CONTRAT_HISTO;

  PROCEDURE INSERT_DATA_CONTRAT(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_ligne T_LIG_DAC) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    IF NOT v_valueLignePrec = v_valueLigne THEN
    BEGIN
      MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN NULL; 
      WHEN OTHERS THEN 
	 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
	 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
	 END;
    END IF; 
  END INSERT_DATA_CONTRAT;

  PROCEDURE UPDATE_DATA_CONTRAT(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_valueOldContrat CLOB, 
      p_lignePrec T_LIG_DAC, 
      p_ligne T_LIG_DAC, 
      p_ligneSuiv T_LIG_DAC, 
      p_listeDonneesIdx T_EXISTE_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_valueOldContrat CLOB;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    v_valueOldContrat := NVL(p_valueOldContrat, p_emptyValue);
    IF NOT v_valueOldContrat = v_valueLigne THEN
      IF p_lignePrec.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLignePrec = v_valueLigne THEN
          IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
          	BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
             EXCEPTION
             WHEN DUP_VAL_ON_INDEX THEN NULL;
              WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
			 END;
          END IF;
        ELSIF p_listeDonneesIdx.exists(p_nomDonnee) THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
      IF p_ligneSuiv.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLigne = v_valueLigneSuiv THEN
          IF NOT p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
          	BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')), DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DSDCN,p_nomDonnee,NVL(p_ligne.DSFCN,TO_DATE('20991231','yyyymmdd')),SYSDATE);
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
          ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          ELSE
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
    END IF; 
  END UPDATE_DATA_CONTRAT;

  PROCEDURE INSERT_DATA_CONTRAT_HISTO(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_ligne T_LIG_DACH, 
      p_ligneSuiv T_LIG_DACH, 
      p_dsfcn DATE, 
      p_listeDonneesIdx T_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    IF p_listeDonneesIdx.exists(p_nomDonnee||'-1') THEN
      v_idxContratHistoPrec := p_listeDonneesIdx(p_nomDonnee||'-1');
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
      v_idxContratHisto := p_listeDonneesIdx(p_nomDonnee);
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
      v_idxContratHistoSuiv := p_listeDonneesIdx(p_nomDonnee||'+1');
    END IF;
    IF NOT v_valueLignePrec = v_valueLigne THEN
      IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
        UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
      ELSE
        v_idxContratHisto.NUMPAC := p_ligne.NUMPAC;
        IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
          v_idxContratHisto.DATE_FIN := v_idxContratHistoPrec.DATE_FIN;
          UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligne.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
        ELSIF v_idxContratHistoSuiv.NUMPAC IS NOT NULL AND v_idxContratHistoSuiv.DATE_EFF < p_dsfcn THEN
          v_idxContratHisto.DATE_FIN := v_idxContratHistoSuiv.DATE_EFF-1;
        ELSE
          v_idxContratHisto.DATE_FIN := p_dsfcn;
        END IF;
        BEGIN
        MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHisto.DATE_FIN, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DATE_EFF,p_nomDonnee,v_idxContratHisto.DATE_FIN,SYSDATE);
         EXCEPTION 
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN 
		 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
		 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
		 END;
      END IF;
    END IF;
    IF p_ligneSuiv.NUMPAC IS NOT NULL THEN
      IF NOT v_valueLigne = v_valueLigneSuiv THEN
        IF v_idxContratHistoSuiv.NUMPAC IS NULL OR NOT v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
          BEGIN
          IF v_idxContratHistoSuiv.NUMPAC IS NULL OR p_dsfcn < v_idxContratHistoSuiv.DATE_EFF THEN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=p_dsfcn, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,p_dsfcn,SYSDATE);
          ELSE
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHistoSuiv.DATE_EFF-1, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,v_idxContratHistoSuiv.DATE_EFF-1,SYSDATE);
          END IF;
           EXCEPTION 
           WHEN DUP_VAL_ON_INDEX THEN NULL;
           WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
          IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
          UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
        END IF;
      END IF;
    END IF; 
  END INSERT_DATA_CONTRAT_HISTO;

  PROCEDURE UPDATE_DATA_CONTRAT_HISTO(
      p_nomDonnee VARCHAR2, 
      p_emptyValue VARCHAR2, 
      p_valueLignePrec CLOB, 
      p_valueLigne CLOB, 
      p_valueLigneSuiv CLOB, 
      p_valueOldContratHisto CLOB, 
      p_lignePrec T_LIG_DACH, 
      p_ligne T_LIG_DACH, 
      p_ligneSuiv T_LIG_DACH, 
      p_dsdcn DATE, 
      p_dsfcn DATE, 
      p_listeDonneesIdx T_IDX_DONNEE, 
      p_listeDonneesRupt T_EXISTE_RUPT_DONNEE) IS
    v_valueLignePrec CLOB;
    v_valueLigne CLOB;
    v_valueLigneSuiv CLOB;
    v_valueOldContratHisto CLOB;
    v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
    v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE := NULL;
  BEGIN
    v_valueLignePrec := NVL(p_valueLignePrec, p_emptyValue);
    v_valueLigne := NVL(p_valueLigne, p_emptyValue);
    v_valueLigneSuiv := NVL(p_valueLigneSuiv, p_emptyValue);
    v_valueOldContratHisto := NVL(p_valueOldContratHisto, p_emptyValue);
    IF p_listeDonneesIdx.exists(p_nomDonnee||'-1') THEN
      v_idxContratHistoPrec := p_listeDonneesIdx(p_nomDonnee||'-1');
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee) THEN
      v_idxContratHisto := p_listeDonneesIdx(p_nomDonnee);
    END IF;
    IF p_listeDonneesIdx.exists(p_nomDonnee||'+1') THEN
      v_idxContratHistoSuiv := p_listeDonneesIdx(p_nomDonnee||'+1');
    END IF;
    IF p_ligneSuiv.NUMPAC='_SUPP_' OR NOT v_valueOldContratHisto = v_valueLigne THEN
      IF p_lignePrec.NUMPAC IS NOT NULL THEN
        IF NOT v_valueLignePrec = v_valueLigne THEN
          IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            v_idxContratHisto.NUMPAC := p_ligne.NUMPAC;
            IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              v_idxContratHisto.DATE_FIN := v_idxContratHistoPrec.DATE_FIN;
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligne.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoSuiv.NUMPAC IS NOT NULL AND v_idxContratHistoSuiv.DATE_EFF < p_dsfcn THEN
              v_idxContratHisto.DATE_FIN := v_idxContratHistoSuiv.DATE_EFF-1;
            ELSE
              v_idxContratHisto.DATE_FIN := p_dsfcn;
            END IF;
            BEGIN
            MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHisto.DATE_FIN, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DATE_EFF,p_nomDonnee,v_idxContratHisto.DATE_FIN,SYSDATE);
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
			 END;
          END IF;
        ELSIF v_idxContratHisto.NUMPAC IS NOT NULL THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) AND p_ligne.DATE_EFF = p_dsdcn THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            IF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHisto.DATE_FIN WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=v_idxContratHisto.NUMPAC AND PACMAT=v_idxContratHisto.PACMAT AND NUMCNT=v_idxContratHisto.NUMCNT AND DATE_EFF=v_idxContratHisto.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
        UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
      ELSIF p_ligne.NUMPAC IS NOT NULL THEN
      	BEGIN
        MERGE INTO DIC_IDX_CONTRAT_HISTO_COMP USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT, p_ligne.DATE_EFF, p_nomDonnee, SYSDATE);
         EXCEPTION 
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN 
		 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
		 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligne.NUMPAC || p_ligne.PACMAT);
		 END;
      END IF;
      IF p_ligneSuiv.NUMPAC IS NOT NULL AND NOT NVL(p_ligneSuiv.NUMPAC,'_EMPTY_')='_SUPP_' THEN
        IF NOT v_valueLigne = v_valueLigneSuiv THEN
          IF v_idxContratHistoSuiv.NUMPAC IS NULL OR NOT v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
            BEGIN
            IF v_idxContratHistoSuiv.NUMPAC IS NULL OR p_dsfcn < v_idxContratHistoSuiv.DATE_EFF THEN
              MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=p_dsfcn, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,p_dsfcn,SYSDATE);
            ELSE
              MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee) WHEN MATCHED THEN UPDATE SET DATE_FIN=v_idxContratHistoSuiv.DATE_EFF-1, DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,DATE_DERNIERE_MODIF) VALUES (p_ligneSuiv.NUMPAC,p_ligneSuiv.PACMAT,p_ligneSuiv.NUMCNT,p_ligneSuiv.DATE_EFF,p_nomDonnee,v_idxContratHistoSuiv.DATE_EFF-1,SYSDATE);
            END IF;
             EXCEPTION 
             WHEN DUP_VAL_ON_INDEX THEN NULL;
             WHEN OTHERS THEN 
			 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
			 TGE_IMPORT_AVANCEMENT_proc('ALIM_IDX','Erreur merge idpacmat ' || p_ligneSuiv.NUMPAC || p_ligneSuiv.PACMAT);
			 END;
            IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=p_ligneSuiv.DATE_EFF-1 WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
          ELSIF p_listeDonneesRupt.exists(p_nomDonnee) THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT=NULL WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        ELSIF v_idxContratHistoSuiv.DATE_EFF = p_ligneSuiv.DATE_EFF THEN
          IF p_listeDonneesRupt.exists(p_nomDonnee) AND NOT p_ligne.NUMCNT = p_ligneSuiv.NUMCNT THEN
            UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, RUPTURE_CONTRAT='O' WHERE NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          ELSE
            IF v_idxContratHisto.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHistoSuiv.DATE_FIN WHERE NUMPAC=v_idxContratHisto.NUMPAC AND PACMAT=v_idxContratHisto.PACMAT AND NUMCNT=v_idxContratHisto.NUMCNT AND DATE_EFF=v_idxContratHisto.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            ELSIF v_idxContratHistoPrec.NUMPAC IS NOT NULL THEN
              UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_idxContratHistoSuiv.DATE_FIN WHERE NUMPAC=v_idxContratHistoPrec.NUMPAC AND PACMAT=v_idxContratHistoPrec.PACMAT AND NUMCNT=v_idxContratHistoPrec.NUMCNT AND DATE_EFF=v_idxContratHistoPrec.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
            END IF;
            DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=v_idxContratHistoSuiv.NUMPAC AND PACMAT=v_idxContratHistoSuiv.PACMAT AND NUMCNT=v_idxContratHistoSuiv.NUMCNT AND DATE_EFF=v_idxContratHistoSuiv.DATE_EFF AND NOM_DONNEE=p_nomDonnee;
          END IF;
        END IF;
      END IF;
    END IF; 
  END UPDATE_DATA_CONTRAT_HISTO;
END ALIM_IDX;
##
TAG_CHARSET=@€éèç
##
CREATE_PROC_IDX_CONTRAT_HISTO
=SQL=
create or replace PROCEDURE CREATE_PROC_IDX_CONTRAT_HISTO AUTHID CURRENT_USER
AS
TYPE TypeColNameCountTable
IS
  RECORD
  (
    COLUMN_NAME USER_TAB_COLUMNS.COLUMN_NAME%TYPE,
    COUNT_TABLE NUMBER,
    COLUMN_TYPE USER_TAB_COLUMNS.DATA_TYPE%TYPE);
TYPE TYP_COL_NAME
IS
  TABLE OF TypeColNameCountTable;
  TabcolContrat TYP_COL_NAME ;
  TabcolContratHisto TYP_COL_NAME ;
  v_reqCreate CLOB;
  v_reqCreateHistoRuptureContrat CLOB;
  v_reqCreateHistoModifOnly CLOB;
  v_reqProcInsertContrat1 CLOB;
  v_reqProcInsertContrat2 CLOB;
  v_reqProcInsertContrat CLOB;
  v_reqProcUpdateContrat1 CLOB;
  v_reqProcUpdateContrat CLOB;
  v_reqProcDeleteContrat1 CLOB;
  v_reqProcDeleteContrat2 CLOB;
  v_reqProcDeleteContrat CLOB;
  v_reqProcInsertContratHisto1 CLOB;
  v_reqProcInsertContratHisto CLOB;
  v_reqProcUpdateContratHisto1 CLOB;
  v_reqProcUpdateContratHisto CLOB;
  v_reqProcDeleteContratHisto CLOB;
  v_listDonneesContratType CLOB;
  v_listDonneesContrat CLOB;
  v_listNullContrat CLOB;
  v_listDonneesContratHistoType CLOB;
  v_listDonneesContratHisto CLOB;
  v_listNullContratHisto CLOB;
  emptyVal VARCHAR2(7);
BEGIN

  -- On crée les types T_LIG_DAC et T_TAB_DAC dynamiquement, avec toutes les colonnes de DAC
  v_listDonneesContratType := NULL;
  v_listDonneesContrat := NULL;
  v_listNullContrat := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContrat := v_listDonneesContrat||r.COLUMN_NAME;
    v_listDonneesContratType := v_listDonneesContratType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratType := v_listDonneesContratType||'('||r.DATA_LENGTH||')';
    ELSIF (r.DATA_TYPE='NUMBER' AND r.DATA_PRECISION IS NOT NULL AND r.DATA_SCALE IS NOT NULL) THEN
      v_listDonneesContratType := v_listDonneesContratType || '(' || r.DATA_PRECISION || ',' || r.DATA_SCALE || ')';
    END IF;
    v_listDonneesContrat := v_listDonneesContrat||',';
    v_listDonneesContratType := v_listDonneesContratType||',';
    v_listNullContrat := v_listNullContrat||'NULL,';
  END LOOP;
  v_listDonneesContrat := SUBSTR(v_listDonneesContrat, 1, LENGTH(v_listDonneesContrat)-1);
  v_listDonneesContratType := SUBSTR(v_listDonneesContratType, 1, LENGTH(v_listDonneesContratType)-1);
  v_listNullContrat := SUBSTR(v_listNullContrat, 1, LENGTH(v_listNullContrat)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DAC',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DAC IS OBJECT ('||v_listDonneesContratType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DAC IS TABLE OF T_LIG_DAC',0);

  -- On crée la fonction GET_EMPTY_LIG_DAC, qui a besoin du nombre de colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DAC RETURN T_LIG_DAC IS 
BEGIN 
  RETURN T_LIG_DAC('||v_listNullContrat||');
END GET_EMPTY_LIG_DAC;',0);

  -- On crée la fonction GET_DAC_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DAC IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC, PACMAT, NUMCNT FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DAC_MATRIC, qui a besoin de lister également toutes les colonnes de DAC
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DAC_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DAC IS 
retour T_TAB_DAC; 
BEGIN 
  SELECT T_LIG_DAC('||v_listDonneesContrat||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT WHERE MATRIC=p_matric ORDER BY DSDCN;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DAC();
END GET_DAC_MATRIC;',0);


  -- On crée les types T_LIG_DACH et T_TAB_DACH dynamiquement, avec toutes les colonnes de DACH
  v_listDonneesContratHistoType := NULL;
  v_listDonneesContratHisto := NULL;
  v_listNullContratHisto := NULL;
  FOR r IN (SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE FROM USER_TAB_COLUMNS WHERE TABLE_NAME='DIC_ADM_CONTRAT_HISTO' ORDER BY COLUMN_ID) LOOP
    v_listDonneesContratHisto := v_listDonneesContratHisto||r.COLUMN_NAME;
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||r.COLUMN_NAME||' '||r.DATA_TYPE;
    IF r.DATA_TYPE='VARCHAR2' THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType||'('||r.DATA_LENGTH||')';
    ELSIF (r.DATA_TYPE='NUMBER' AND r.DATA_PRECISION IS NOT NULL AND r.DATA_SCALE IS NOT NULL) THEN
      v_listDonneesContratHistoType := v_listDonneesContratHistoType || '(' || r.DATA_PRECISION || ',' || r.DATA_SCALE || ')';
    END IF;
    v_listDonneesContratHisto := v_listDonneesContratHisto||',';
    v_listDonneesContratHistoType := v_listDonneesContratHistoType||',';
    v_listNullContratHisto := v_listNullContratHisto||'NULL,';
  END LOOP;
  v_listDonneesContratHisto := SUBSTR(v_listDonneesContratHisto, 1, LENGTH(v_listDonneesContratHisto)-1);
  v_listDonneesContratHistoType := SUBSTR(v_listDonneesContratHistoType, 1, LENGTH(v_listDonneesContratHistoType)-1);
  v_listNullContratHisto := SUBSTR(v_listNullContratHisto, 1, LENGTH(v_listNullContratHisto)-1);
  BEGIN
    EXECUTE_IMMEDIATE_STRING ('DROP TYPE T_TAB_DACH',0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_LIG_DACH IS OBJECT ('||v_listDonneesContratHistoType||')',0);
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE TYPE T_TAB_DACH IS TABLE OF T_LIG_DACH',0);

  -- On crée la fonction GET_EMPTY_LIG_DACH, qui a besoin du nombre de colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_EMPTY_LIG_DACH RETURN T_LIG_DACH IS 
BEGIN 
  RETURN T_LIG_DACH('||v_listNullContratHisto||');
END GET_EMPTY_LIG_DACH;',0);

  -- On crée la fonction GET_DACH_MULTI_HORS_TRANSAC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MULTI_HORS_TRANSAC(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) RETURN T_TAB_DACH IS 
PRAGMA AUTONOMOUS_TRANSACTION; 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE (NUMPAC,PACMAT,NUMCNT,DATE_EFF) IN (SELECT NUMPAC, PACMAT, NUMCNT, DATE_IDX FROM TABLE( p_listeClesIdxContrat )) ORDER BY MATRIC, DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MULTI_HORS_TRANSAC;',0);

  -- On crée la fonction GET_DACH_MATRIC, qui a besoin de lister également toutes les colonnes de DACH
  EXECUTE_IMMEDIATE_STRING ('CREATE OR REPLACE FUNCTION GET_DACH_MATRIC(p_matric VARCHAR2) RETURN T_TAB_DACH IS 
retour T_TAB_DACH; 
BEGIN 
  SELECT T_LIG_DACH('||v_listDonneesContratHisto||') BULK COLLECT INTO retour FROM DIC_ADM_CONTRAT_HISTO WHERE MATRIC=p_matric ORDER BY DATE_EFF;
  RETURN retour;
EXCEPTION
  WHEN OTHERS THEN RETURN T_TAB_DACH();
END GET_DACH_MATRIC;',0);


  SELECT COLUMN_NAME,
    0,
    DATA_TYPE BULK COLLECT
  INTO TabcolContrat
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME='DIC_ADM_CONTRAT'
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('IDPACMAT','DATE_EFF_CONTRAT','CURRENT_PAIEZAD','MATRIC','DATE_CREATION','DATE_DERNIERE_MODIF'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  
  SELECT COLUMN_NAME,
    (SELECT COUNT(*)
    FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT
    WHERE NOM_DONNEE=COLUMN_NAME
    ),
    DATA_TYPE BULK COLLECT
  INTO TabcolContratHisto
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME     ='DIC_ADM_CONTRAT_HISTO'
  AND COLUMN_NAME NOT IN
    (SELECT COLUMN_NAME
    FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME='DIC_ADM_CONTRAT'
    )
  -- DIC_IDX_DONNEE_RESTRICTION est une table contenant une liste de colonnes restreintes qui doivent être utilisées dans la table DIC_IDX_CONTRAT_HISTO
  -- Si la table est vide, alors on prend toutes les colonnes de DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO
  -- sinon on prend la liste des colonnes définies dans DIC_IDX_DONNEE_RESTRICTION, DIC_IDX_DONNEE_RETOUR_PAIE et STD_LHW_DONNEE
  AND ((NOT EXISTS
    (SELECT 1 FROM DIC_IDX_DONNEE_RESTRICTION
    )
  AND COLUMN_NAME NOT IN ('DATE_EFF','DATE_FIN','MATRIC','PAIEZAD','DATE_CREATION','DATE_DERNIERE_MODIF','DATE_FIN_BO','IDPACMAT','DATE_SORTIE_SIT_BO'))
  OR COLUMN_NAME      IN
    (SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RESTRICTION
    UNION ALL
    SELECT NOM_DONNEE FROM DIC_IDX_DONNEE_RETOUR_PAIE
    UNION ALL
    SELECT NOM_DONNEE FROM STD_LHW_DONNEE
    ))
  ORDER BY COLUMN_NAME;
  v_reqCreate          := 'CREATE OR REPLACE PROCEDURE ALIM_IDX_CONTRAT_HISTO (p_onlyFlaggedNumpacPacmat NUMBER) AS ';
  IF TabcolContrat.count>0 THEN
    v_reqCreate        := v_reqCreate||'
    cursor curContrat is SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DSDCN, DSFCN';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Dsdcn;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColContrat IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT.NUMCNT%TYPE, DSDCN DIC_ADM_CONTRAT.DSDCN%TYPE, DSFCN DIC_ADM_CONTRAT.DSFCN%TYPE';
    FOR i IN TabcolContrat.first..TabcolContrat.last
    LOOP
      IF NOT TabcolContrat(i).COLUMN_NAME='MATRIC' AND NOT TabcolContrat(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContrat(i).COLUMN_NAME='PACMAT' AND NOT TabcolContrat(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContrat(i).COLUMN_NAME='DSDCN' AND NOT TabcolContrat(i).COLUMN_NAME='DSFCN' THEN
        v_reqCreate                     := v_reqCreate||', '||TabcolContrat(i).COLUMN_NAME||' DIC_ADM_CONTRAT.'||TabcolContrat(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligContrat TypeColContrat;';
    v_reqCreate := v_reqCreate||'previous_ligContrat TypeColContrat;   ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'
    cursor curHisto is  SELECT MATRIC, NUMPAC, PACMAT, NUMCNT, DATE_EFF, DATE_FIN';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME;
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||' FROM DIC_ADM_CONTRAT_HISTO WHERE p_onlyFlaggedNumpacPacmat=0 OR (NUMPAC,PACMAT) IN (SELECT NUMPAC,PACMAT FROM SECUPACMAT_TMP_CONTRAT) ORDER BY Matric, Date_eff;';
    v_reqCreate := v_reqCreate||'
    TYPE TypeColHisto IS RECORD (MATRIC DIC_ADM_CONTRAT_HISTO.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE, NUMCNT DIC_ADM_CONTRAT_HISTO.NUMCNT%TYPE, DATE_EFF DIC_ADM_CONTRAT_HISTO.DATE_EFF%TYPE, DATE_FIN DIC_ADM_CONTRAT_HISTO.DATE_FIN%TYPE';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      IF NOT TabcolContratHisto(i).COLUMN_NAME='MATRIC' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMPAC' AND NOT TabcolContratHisto(i).COLUMN_NAME='PACMAT' AND NOT TabcolContratHisto(i).COLUMN_NAME='NUMCNT' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_EFF' AND NOT TabcolContratHisto(i).COLUMN_NAME='DATE_FIN' THEN
        v_reqCreate                          := v_reqCreate||', '||TabcolContratHisto(i).COLUMN_NAME||' DIC_ADM_CONTRAT_HISTO.'||TabcolContratHisto(i).COLUMN_NAME||'%TYPE';
      END IF;
    END LOOP;
    v_reqCreate := v_reqCreate||');';
    v_reqCreate := v_reqCreate||'ligHisto TypeColHisto;';
    v_reqCreate := v_reqCreate||'previous_ligHisto TypeColHisto;   ';
  END IF;
  IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
    v_reqCreate        := v_reqCreate||'TYPE TYP_LIG_IDX IS RECORD ( ';
    v_reqCreate        := v_reqCreate||'  NUMPAC DIC_IDX_CONTRAT_HISTO_TMP.NUMPAC%TYPE, ';
    v_reqCreate        := v_reqCreate||'  PACMAT DIC_IDX_CONTRAT_HISTO_TMP.PACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NUMCNT DIC_IDX_CONTRAT_HISTO_TMP.NUMCNT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_EFF DIC_IDX_CONTRAT_HISTO_TMP.DATE_EFF%TYPE, ';
    v_reqCreate        := v_reqCreate||'  NOM_DONNEE DIC_IDX_CONTRAT_HISTO_TMP.NOM_DONNEE%TYPE, ';
    v_reqCreate        := v_reqCreate||'  IDPACMAT DIC_IDX_CONTRAT_HISTO_TMP.IDPACMAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_FIN DIC_IDX_CONTRAT_HISTO_TMP.DATE_FIN%TYPE, ';
    v_reqCreate        := v_reqCreate||'  RUPTURE_CONTRAT DIC_IDX_CONTRAT_HISTO_TMP.RUPTURE_CONTRAT%TYPE, ';
    v_reqCreate        := v_reqCreate||'  DATE_DERNIERE_MODIF DIC_IDX_CONTRAT_HISTO_TMP.DATE_DERNIERE_MODIF%TYPE); ';
    v_reqCreate        := v_reqCreate||'TYPE TYP_TAB_IDX IS TABLE OF TYP_LIG_IDX ; ';
    v_reqCreate        := v_reqCreate||'Tabidx TYP_TAB_IDX ; ';
    v_reqCreate        := v_reqCreate||'Ligidx TYP_LIG_IDX ; ';
  END IF;
  IF TabcolContratHisto.count>0 THEN
    v_reqCreate             := v_reqCreate||'TYPE TAB_INDICE_IDX_BY_DONNEE IS TABLE OF NUMBER INDEX BY VARCHAR2(20) ; ';
    v_reqCreate             := v_reqCreate||'tabIndice TAB_INDICE_IDX_BY_DONNEE ; ';
    v_reqCreate             := v_reqCreate||'bMATRIC NUMBER ; ';
    v_reqCreate             := v_reqCreate||'bCNT NUMBER ; ';
    FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
    LOOP
      v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' NUMBER ; ';
    END LOOP;
  END IF;
  v_reqCreate          := v_reqCreate||'BEGIN ';
  IF TabcolContrat.count=0 AND TabcolContratHisto.count=0 THEN
    v_reqCreate        := v_reqCreate||'NULL; ';
  ELSE
    v_reqCreate          := v_reqCreate||'Tabidx := TYP_TAB_IDX(); ';
    IF TabcolContrat.count>0 THEN
      v_reqCreate        := v_reqCreate||'OPEN curContrat; ';
      v_reqCreate        := v_reqCreate||'  LOOP ';
      v_reqCreate        := v_reqCreate||' FETCH curContrat INTO ligContrat; ';
      v_reqCreate        := v_reqCreate||'   EXIT ';
      v_reqCreate        := v_reqCreate||' WHEN curContrat % NOTFOUND; ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is null OR NOT previous_ligContrat.MATRIC=ligContrat.MATRIC THEN ';
      v_reqCreate        := v_reqCreate||' IF previous_ligContrat.PACMAT is not null THEN ';
      v_reqCreate        := v_reqCreate||'BEGIN ';
      v_reqCreate        := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate        := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate        := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate        := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate        := v_reqCreate||' END IF; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''*''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      v_reqCreate        := v_reqCreate||'ELSE ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
      v_reqCreate        := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
      v_reqCreate        := v_reqCreate||'Ligidx.DATE_FIN := NULL; ';
      v_reqCreate        := v_reqCreate||'Ligidx.NOM_DONNEE := ''+''; ';
      v_reqCreate        := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
      v_reqCreate        := v_reqCreate||'Tabidx.extend; ';
      v_reqCreate        := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
      FOR i IN TabcolContrat.first..TabcolContrat.last
      LOOP
        emptyVal                        := '_EMPTY_';
        IF (TabcolContrat(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                      := '0';
        END IF;
        v_reqCreate             := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligContrat.'||TabcolContrat(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMPAC := ligContrat.NUMPAC; ';
        v_reqCreate             := v_reqCreate||'Ligidx.PACMAT := ligContrat.PACMAT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.NUMCNT := ligContrat.NUMCNT; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_EFF := ligContrat.DSDCN; ';
        v_reqCreate             := v_reqCreate||'Ligidx.DATE_FIN := NVL(ligContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); ';
        v_reqCreate             := v_reqCreate||'Ligidx.NOM_DONNEE := '''||TabcolContrat(i).COLUMN_NAME||'''; ';
        v_reqCreate             := v_reqCreate||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreate             := v_reqCreate||'Tabidx.extend; ';
        v_reqCreate             := v_reqCreate||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreate             := v_reqCreate||'END IF; ';
        v_reqProcInsertContrat1 := v_reqProcInsertContrat1||' 
ALIM_IDX.INSERT_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
p_ligne); ';
        v_reqProcUpdateContrat1 := v_reqProcUpdateContrat1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT( 
'''||TabcolContrat(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContrat(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContrat.'||TabcolContrat(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
        v_reqProcDeleteContrat1 := v_reqProcDeleteContrat1||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContrat(i).COLUMN_NAME||'''; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligContrat:=ligContrat;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curContrat;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContratHisto.count       >0 THEN
      v_reqCreate                    := v_reqCreate||'OPEN curHisto; ';
      v_reqCreateHistoRuptureContrat := 'tabIndice.delete(); ';
      v_reqCreateHistoModifOnly      := NULL;
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        IF TabcolContratHisto(i).COUNT_TABLE>0 THEN
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.PACMAT := ligHisto.PACMAT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Ligidx.RUPTURE_CONTRAT := ''O''; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx.extend; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'Tabidx(Tabidx.last) := Ligidx; ';
          v_reqCreateHistoRuptureContrat   := v_reqCreateHistoRuptureContrat||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
          v_reqProcInsertContrat2          := v_reqProcInsertContrat2||' 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''') WHEN MATCHED THEN UPDATE SET DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')), RUPTURE_CONTRAT=''O'', DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_FIN,RUPTURE_CONTRAT,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,'''||TabcolContratHisto(i).COLUMN_NAME||''',NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')),''O'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;';
          v_reqProcDeleteContrat2          := v_reqProcDeleteContrat2||' 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE='''||TabcolContratHisto(i).COLUMN_NAME||''' AND RUPTURE_CONTRAT=''O''; ';
        END IF;
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF b'||TabcolContratHisto(i).COLUMN_NAME||'=1 THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'IF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') AND Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_EFF = ligHisto.DATE_EFF THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSE ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMPAC := ligHisto.NUMPAC; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.PACMAT := ligHisto.PACMAT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NUMCNT := ligHisto.NUMCNT; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_EFF := ligHisto.DATE_EFF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.NOM_DONNEE := '''||TabcolContratHisto(i).COLUMN_NAME||'''; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Ligidx.RUPTURE_CONTRAT := NULL; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx.extend; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(Tabidx.last) := Ligidx; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''') := Tabidx.last; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'ELSIF tabIndice.exists('''||TabcolContratHisto(i).COLUMN_NAME||''') THEN ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'Tabidx(tabIndice('''||TabcolContratHisto(i).COLUMN_NAME||''')).DATE_FIN := ligHisto.DATE_FIN; ';
        v_reqCreateHistoModifOnly := v_reqCreateHistoModifOnly||'END IF; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'  LOOP ';
      v_reqCreate := v_reqCreate||' FETCH curHisto INTO ligHisto; ';
      v_reqCreate := v_reqCreate||'   EXIT ';
      v_reqCreate := v_reqCreate||' WHEN curHisto % NOTFOUND; ';
      v_reqCreate := v_reqCreate||' IF previous_ligHisto.PACMAT is null OR NOT previous_ligHisto.MATRIC=ligHisto.MATRIC THEN ';
      v_reqCreate := v_reqCreate||'bMATRIC := 1; ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        v_reqCreate := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
      END LOOP;
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bMATRIC := 0; ';
      v_reqCreate := v_reqCreate||'IF NOT (previous_ligHisto.NUMPAC=ligHisto.NUMPAC AND previous_ligHisto.PACMAT=ligHisto.PACMAT AND previous_ligHisto.NUMCNT=ligHisto.NUMCNT) THEN ';
      v_reqCreate := v_reqCreate||'bCNT := 1; ';
      v_reqCreate := v_reqCreate||'ELSE ';
      v_reqCreate := v_reqCreate||'bCNT := 0; ';
      v_reqCreate := v_reqCreate||'END IF; ';
      FOR i IN TabcolContratHisto.first..TabcolContratHisto.last
      LOOP
        emptyVal                             := '_EMPTY_';
        IF (TabcolContratHisto(i).COLUMN_TYPE = 'NUMBER') THEN
          emptyVal                           := '0';
        END IF;
        v_reqCreate                  := v_reqCreate||' 
IF NOT NVL(TO_CHAR(previous_ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') = NVL(TO_CHAR(ligHisto.'||TabcolContratHisto(i).COLUMN_NAME||'),'''||emptyVal||''') THEN ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 1; ';
        v_reqCreate                  := v_reqCreate||'ELSE ';
        v_reqCreate                  := v_reqCreate||'b'||TabcolContratHisto(i).COLUMN_NAME||' := 0; ';
        v_reqCreate                  := v_reqCreate||'END IF; ';
        v_reqProcInsertContratHisto1 := v_reqProcInsertContratHisto1||' 
ALIM_IDX.INSERT_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_ligne, 
p_ligneSuiv, 
v_dsfcn, 
v_listeDonneesIdx, 
v_listeDonneesRupt); ';
        v_reqProcUpdateContratHisto1 := v_reqProcUpdateContratHisto1||' 
ALIM_IDX.UPDATE_DATA_CONTRAT_HISTO( 
'''||TabcolContratHisto(i).COLUMN_NAME||''', 
'''||emptyVal||''', 
TO_CHAR(p_lignePrec.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligne.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(p_ligneSuiv.'||TabcolContratHisto(i).COLUMN_NAME||'), 
TO_CHAR(v_oldContratHisto.'||TabcolContratHisto(i).COLUMN_NAME||'), 
p_lignePrec, 
p_ligne, 
p_ligneSuiv, 
v_dsdcn, 
v_dsfcn, 
v_listeDonneesIdx, 
p_listeDonneesRupt); ';
      END LOOP;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bCNT=1 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoRuptureContrat;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'IF bMATRIC=0 THEN ';
      v_reqCreate := v_reqCreate||v_reqCreateHistoModifOnly;
      v_reqCreate := v_reqCreate||'END IF; ';
      v_reqCreate := v_reqCreate||'  previous_ligHisto:=ligHisto;';
      v_reqCreate := v_reqCreate||' end loop;';
      v_reqCreate := v_reqCreate||'close curHisto;';
      v_reqCreate := v_reqCreate||'BEGIN ';
      v_reqCreate := v_reqCreate||'FORALL i IN 1..Tabidx.COUNT SAVE EXCEPTIONS ';
      v_reqCreate := v_reqCreate||'INSERT INTO DIC_IDX_CONTRAT_HISTO_TMP (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (Tabidx(i).NUMPAC, Tabidx(i).PACMAT, Tabidx(i).NUMCNT, Tabidx(i).DATE_EFF, Tabidx(i).NOM_DONNEE, Tabidx(i).DATE_FIN, Tabidx(i).RUPTURE_CONTRAT, SYSDATE); ';
      v_reqCreate := v_reqCreate||'EXCEPTION WHEN OTHERS THEN NULL; END; ';
      v_reqCreate := v_reqCreate||'Tabidx.delete(); ';
    END IF;
    IF TabcolContrat.count>0 OR TabcolContratHisto.count>0 THEN
      v_reqCreate        := v_reqCreate||'BEGIN
      MERGE INTO DIC_IDX_CONTRAT_HISTO IDX USING (SELECT * FROM DIC_IDX_CONTRAT_HISTO_TMP) IDX_TMP ON (IDX.NUMPAC=IDX_TMP.NUMPAC AND IDX.PACMAT=IDX_TMP.PACMAT AND IDX.NUMCNT=IDX_TMP.NUMCNT AND IDX.DATE_EFF=IDX_TMP.DATE_EFF AND IDX.NOM_DONNEE=IDX_TMP.NOM_DONNEE) WHEN MATCHED THEN UPDATE SET DATE_FIN=IDX_TMP.DATE_FIN, RUPTURE_CONTRAT=IDX_TMP.RUPTURE_CONTRAT, DATE_DERNIERE_MODIF= (case when (IDX_TMP.DATE_FIN<>IDX.DATE_FIN or NVL(IDX.RUPTURE_CONTRAT,''N'')<>NVL(IDX_TMP.RUPTURE_CONTRAT,''N'') ) then IDX_TMP.DATE_DERNIERE_MODIF else IDX.DATE_DERNIERE_MODIF end) WHEN NOT MATCHED THEN INSERT (NUMPAC, PACMAT, NUMCNT, DATE_EFF, NOM_DONNEE, DATE_FIN, RUPTURE_CONTRAT, DATE_DERNIERE_MODIF) VALUES (IDX_TMP.NUMPAC, IDX_TMP.PACMAT, IDX_TMP.NUMCNT, IDX_TMP.DATE_EFF, IDX_TMP.NOM_DONNEE, IDX_TMP.DATE_FIN, IDX_TMP.RUPTURE_CONTRAT, IDX_TMP.DATE_DERNIERE_MODIF); 
      EXCEPTION
	 WHEN DUP_VAL_ON_INDEX THEN NULL;
	 WHEN OTHERS THEN 
	 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
	 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat IDX '');
	 END;';
    END IF;
    v_reqCreate := v_reqCreate||'IF p_onlyFlaggedNumpacPacmat=1 THEN ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE) ';
    v_reqCreate := v_reqCreate||' AND EXISTS (SELECT 1 FROM SECUPACMAT_TMP_CONTRAT WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT); ';
    v_reqCreate := v_reqCreate||'ELSE ';
    v_reqCreate := v_reqCreate||'DELETE FROM DIC_IDX_CONTRAT_HISTO ';
    v_reqCreate := v_reqCreate||' WHERE NOT EXISTS (SELECT 1 FROM DIC_IDX_CONTRAT_HISTO_TMP WHERE NUMPAC=DIC_IDX_CONTRAT_HISTO.NUMPAC AND PACMAT=DIC_IDX_CONTRAT_HISTO.PACMAT AND NUMCNT=DIC_IDX_CONTRAT_HISTO.NUMCNT AND DATE_EFF=DIC_IDX_CONTRAT_HISTO.DATE_EFF AND NOM_DONNEE=DIC_IDX_CONTRAT_HISTO.NOM_DONNEE); ';
    v_reqCreate := v_reqCreate||'END IF; ';
  END IF;
  v_reqCreate := v_reqCreate||'END ALIM_IDX_CONTRAT_HISTO;';
  EXECUTE_IMMEDIATE_STRING(v_reqCreate,0);
  -- Procédure de mise à jour plus fine
  v_reqProcInsertContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC) IS 
BEGIN 
IF p_lignePrec.NUMPAC IS NULL THEN
BEGIN 
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''*'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''*'',SYSDATE);
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END; 
ELSE 
BEGIN
MERGE INTO DIC_IDX_CONTRAT_HISTO USING (SELECT 1 FROM DUAL) ON (NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN AND NOM_DONNEE=''+'') WHEN MATCHED THEN UPDATE SET DATE_DERNIERE_MODIF=SYSDATE WHEN NOT MATCHED THEN INSERT (NUMPAC,PACMAT,NUMCNT,DATE_EFF,NOM_DONNEE,DATE_DERNIERE_MODIF) VALUES (p_ligne.NUMPAC,p_ligne.PACMAT,p_ligne.NUMCNT,p_ligne.DSDCN,''+'',SYSDATE); 
EXCEPTION
 WHEN DUP_VAL_ON_INDEX THEN NULL;
 WHEN OTHERS THEN 
 -- les merge ne doivent pas tout faire planter, si cela arrive, on trace juste le probleme
 TGE_IMPORT_AVANCEMENT_proc(''ALIM_IDX_INSERT_CONTRAT'',''Erreur merge idpacmat '' || p_ligne.NUMPAC || p_ligne.PACMAT);
 END;'
  || v_reqProcInsertContrat1||' 
 END IF; '|| v_reqProcInsertContrat2||'
 END ALIM_IDX_INSERT_CONTRAT;';
  v_reqProcUpdateContrat :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT(p_lignePrec T_LIG_DAC, p_ligne T_LIG_DAC, p_ligneSuiv T_LIG_DAC, p_tabDac T_TAB_DAC, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContrat T_LIG_DAC := GET_EMPTY_LIG_DAC(); 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_dateEff DATE; 
v_listeDonneesIdx ALIM_IDX.T_EXISTE_IDX_DONNEE; 
BEGIN 
FOR i in 1..p_tabDac.COUNT LOOP
  IF p_tabDac(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDac(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDac(i).NUMCNT=p_ligne.NUMCNT THEN
    v_oldContrat := p_tabDac(i);
    EXIT WHEN v_oldContrat IS NOT NULL;
  END IF;
END LOOP;
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE ((NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_EFF=p_ligne.DSDCN) 
OR (NUMPAC=p_ligneSuiv.NUMPAC AND PACMAT=p_ligneSuiv.PACMAT AND NUMCNT=p_ligneSuiv.NUMCNT AND DATE_EFF=p_ligneSuiv.DSDCN)) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_ligne.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee) := 1; 
ELSIF v_dateEff = p_ligneSuiv.DSDCN THEN 
v_listeDonneesIdx(v_nomDonnee||''+1'') := 1; 
END IF; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContrat1||' 
IF NOT NVL(TO_CHAR(v_oldContrat.DSFCN),''_EMPTY_'')=NVL(TO_CHAR(p_ligne.DSFCN),''_EMPTY_'') THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=NVL(p_ligne.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')) WHERE NUMPAC=p_ligne.NUMPAC AND PACMAT=p_ligne.PACMAT AND NUMCNT=p_ligne.NUMCNT AND DATE_FIN=NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
END IF; 
END ALIM_IDX_UPDATE_CONTRAT;';
  v_reqProcDeleteContrat      := ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
BEGIN 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE IN (''*'',''+''); '|| v_reqProcDeleteContrat1|| v_reqProcDeleteContrat2||' 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT;';
  v_reqProcInsertContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_INSERT_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH) IS 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
v_dsfcn := NVL(GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT).DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
IF p_lignePrec.NUMPAC IS NOT NULL THEN NULL; '
  || v_reqProcInsertContratHisto1||' 
END IF; 
END ALIM_IDX_INSERT_CONTRAT_HISTO;';
  v_reqProcUpdateContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_UPDATE_CONTRAT_HISTO(p_lignePrec T_LIG_DACH, p_ligne T_LIG_DACH, p_ligneSuiv T_LIG_DACH, p_tabDach T_TAB_DACH, p_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE) IS 
v_oldContratHisto T_LIG_DACH := GET_EMPTY_LIG_DACH(); 
v_oldContrat DIC_ADM_CONTRAT%ROWTYPE; 
v_dsdcn DATE; 
v_dsfcn DATE; 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonnee VARCHAR2(30); 
v_idxContratHistoPrec DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHisto DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_idxContratHistoSuiv DIC_IDX_CONTRAT_HISTO%ROWTYPE; 
v_listeDonneesIdx ALIM_IDX.T_IDX_DONNEE; 
BEGIN 
IF NOT NVL(p_ligneSuiv.NUMPAC,''_EMPTY_'')=''_SUPP_'' THEN 
FOR i in 1..p_tabDach.COUNT LOOP
  IF p_tabDach(i).NUMPAC=p_ligne.NUMPAC 
      AND p_tabDach(i).PACMAT=p_ligne.PACMAT 
      AND p_tabDach(i).NUMCNT=p_ligne.NUMCNT 
      AND p_tabDach(i).DATE_EFF=p_ligne.DATE_EFF THEN
    v_oldContratHisto := p_tabDach(i);
    EXIT WHEN v_oldContratHisto IS NOT NULL;
  END IF;
END LOOP;
END IF; 
v_oldContrat := GET_CONTRAT(p_ligne.NUMPAC, p_ligne.PACMAT, p_ligne.NUMCNT); 
v_dsdcn := v_oldContrat.DSDCN; 
v_dsfcn := NVL(v_oldContrat.DSFCN,TO_DATE(''20991231'',''yyyymmdd'')); 
OPEN cur FOR 
SELECT * 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE (NUMPAC,PACMAT,NUMCNT) IN (SELECT NUMPAC,PACMAT,NUMCNT FROM DIC_ADM_CONTRAT WHERE MATRIC=p_ligne.MATRIC) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_idxContratHisto; 
EXIT WHEN cur % NOTFOUND; 
IF p_ligne.DATE_EFF BETWEEN v_idxContratHisto.DATE_EFF AND v_idxContratHisto.DATE_FIN THEN 
IF p_ligne.DATE_EFF = v_idxContratHisto.DATE_EFF THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE) := v_idxContratHisto; 
IF v_idxContratHistoPrec.NOM_DONNEE = v_idxContratHisto.NOM_DONNEE THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHistoPrec; 
END IF; 
ELSE 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''-1'') := v_idxContratHisto; 
END IF; 
ELSIF v_idxContratHisto.DATE_EFF > p_ligne.DATE_EFF AND NOT v_listeDonneesIdx.exists(v_idxContratHisto.NOM_DONNEE||''+1'') THEN 
v_listeDonneesIdx(v_idxContratHisto.NOM_DONNEE||''+1'') := v_idxContratHisto; 
END IF; 
v_idxContratHistoPrec := v_idxContratHisto; 
END LOOP; 
CLOSE cur; '
  || v_reqProcUpdateContratHisto1||' 
END ALIM_IDX_UPDATE_CONTRAT_HISTO;';
  v_reqProcDeleteContratHisto :=
  ' 
CREATE OR REPLACE PROCEDURE ALIM_IDX_DELETE_CONTRAT_HISTO(p_listeClesIdxContrat T_CLES_IDX_CONTRAT_HISTO) IS 
TYPE tcur IS REF CURSOR; 
cur tcur; 
v_nomDonneePrec VARCHAR2(30); 
v_nomDonnee VARCHAR2(30); 
v_dateEffPrec DATE; 
v_dateEff DATE; 
v_dateFin DATE; 
v_listeDonneesRupt ALIM_IDX.T_EXISTE_RUPT_DONNEE; 
BEGIN 
OPEN cur FOR 
SELECT NOM_DONNEE 
FROM DIC_IDX_DONNEE_RUPTURE_CONTRAT; 
LOOP 
FETCH cur INTO v_nomDonnee; 
EXIT WHEN cur % NOTFOUND; 
v_listeDonneesRupt(v_nomDonnee) := 1; 
END LOOP; 
CLOSE cur; 
FOR i in 1..p_listeClesIdxContrat.count LOOP 
OPEN cur FOR 
SELECT NOM_DONNEE, DATE_EFF, DATE_FIN 
FROM DIC_IDX_CONTRAT_HISTO 
WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND (DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX OR DATE_FIN=p_listeClesIdxContrat(i).DATE_IDX-1) 
AND NOM_DONNEE IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=''DIC_ADM_CONTRAT_HISTO'') 
ORDER BY NOM_DONNEE, DATE_EFF; 
LOOP 
FETCH cur INTO v_nomDonnee, v_dateEff, v_dateFin; 
EXIT WHEN cur % NOTFOUND; 
IF v_dateEff = p_listeClesIdxContrat(i).DATE_IDX THEN 
IF v_nomDonnee = v_nomDonneePrec THEN 
UPDATE DIC_IDX_CONTRAT_HISTO SET DATE_DERNIERE_MODIF=SYSDATE, DATE_FIN=v_dateFin WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND NOM_DONNEE=v_nomDonnee AND DATE_EFF=v_dateEffPrec; 
END IF; 
DELETE FROM DIC_IDX_CONTRAT_HISTO WHERE NUMPAC=p_listeClesIdxContrat(i).NUMPAC AND PACMAT=p_listeClesIdxContrat(i).PACMAT AND NUMCNT=p_listeClesIdxContrat(i).NUMCNT AND DATE_EFF=p_listeClesIdxContrat(i).DATE_IDX AND NOM_DONNEE=v_nomDonnee; 
END IF; 
v_nomDonneePrec := v_nomDonnee; 
v_dateEffPrec := v_dateEff; 
END LOOP; 
CLOSE cur; 
ALIM_IDX.COMPARE_CONTRAT_HISTO(p_listeClesIdxContrat, ''D'', NULL, v_listeDonneesRupt); 
END LOOP; 
END ALIM_IDX_DELETE_CONTRAT_HISTO;';

  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContrat,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcInsertContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcUpdateContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN
    EXECUTE_IMMEDIATE_STRING (v_reqProcDeleteContratHisto,0);
  EXCEPTION WHEN OTHERS THEN NULL; END;
END CREATE_PROC_IDX_CONTRAT_HISTO;
##
CREATE_PROC_IDX_CONTRAT_HISTO
==
CALL CREATE_PROC_IDX_CONTRAT_HISTO()
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  IF( p_periode_paie     <= periode_paie_en_cours) THEN
    IF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
			EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);
		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPADTE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE ';
			req              := req||' WHERE ID IN ( ';
			req            	 := req|| ' select INC.ID from ( '; 
			req            	 := req|| ' select I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''') as PERIODE, MIN(P.MOIS_PAIE) as MIN_MOIS_PAIE from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| ' LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| ' ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| ' AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| ' AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| ' WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| ' AND (P.PACMAT = '''''||w_pacmat||''''' ) ';
			END IF;
			req            	 := req|| ' GROUP BY I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''')) INC '; 
			req            	 := req|| ' WHERE  '; 
			req            	 := req|| ' (INC.PERIODE != INC.MIN_MOIS_PAIE  '; 
			req            	 := req|| ' OR MIN_MOIS_PAIE IS NULL) '; 
			req := req ||' ) '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_MAIN
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_MAIN( p_id            IN NUMBER, p_numpac        IN VARCHAR2, p_periode_paie  IN VARCHAR2,
 p_pacmat       IN VARCHAR2,
 p_dosNumForSimu IN NUMBER DEFAULT NULL,
 recueil_photo IN BOOLEAN DEFAULT FALSE )
 IS
 w_err    VARCHAR2(2000);
 w_audit_alim_periode_tab AUDIT_ALIM_PERIODE_TAB;
 w_debut_recueil_retro DATE;
 w_fin_recueil_retro   DATE;
 id_trt                NUMBER;
 reqTempInfo		   CLOB;
 req                   CLOB;

 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN début (' || p_numpac || ',' || p_periode_paie || ',' || p_pacmat || ')');
 --Alimentation id procédure
 IF p_id   = 0 OR p_id IS NULL THEN
 id_trt := IMP_TRT_SEQ_ID.nextval;
 ELSE
 id_trt := p_id;
 END IF;

 
 --Vérification des données à traiter
 w_audit_alim_periode_tab := AUDIT_ALIM_PERIODE_INDIV(id_trt, p_numpac, p_periode_paie, p_pacmat);
 IF w_audit_alim_periode_tab.exists(1) THEN
 FOR i IN w_audit_alim_periode_tab.first..w_audit_alim_periode_tab.last
 LOOP
 w_err := w_err || '(' || w_audit_alim_periode_tab(i).paiezad || ',' || w_audit_alim_periode_tab(i).debut_recueil_force || ',' || w_audit_alim_periode_tab(i).fin_recueil_force || ')';
 END LOOP;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil pour les paiezad suivant (paiezad,debut_recueil_force,fin_recueil_force) : ' || w_err);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO');
 RETURN;
 END IF;
 --Récupération de la période de recueil retro issu de la table LTP (TGE_REF_LTP)
 BEGIN
 SELECT DEBUT_PERIODE,
 FIN_PERIODE
 INTO w_debut_recueil_retro,
 w_fin_recueil_retro
 FROM TGE_REF_LTP
 WHERE NUMPAC  = p_numpac
 AND MOIS_PAIE = TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil M-1 dans TGE_REF_LTP : NUMPAC = ''' || p_numpac || ''' AND MOIS_PAIE = ' || TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM'));
 raise;
 END;

 --Récupération requête des informations
 TGE_ALIM_PERIODE_INDIV_TEMP(id_trt, p_numpac, p_pacmat, p_periode_paie, reqTempInfo, recueil_photo);
 
 --Nettoyage avant d'insérer dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'DELETE FROM ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req := req||' AND MOIS_PAIE >= '''||p_periode_paie||'''';
 IF p_pacmat IS NOT NULL THEN
 req := req||' AND PACMAT = '''||p_pacmat||'''';
 END IF;
 IF p_dosNumForSimu IS NOT NULL THEN
 req := req||' AND DOS_NUM = '||p_dosNumForSimu;
 END IF;
 EXECUTE_IMMEDIATE_STRING ( req,0);
 
 --Insertion des données dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'INSERT INTO ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' (';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||'    DOS_NUM,';
 END IF;
 req := req||'    NUMPAC, 
 			      MOIS_PAIE, 
 			      PAIEZAD, 
 			      PACMAT, 
 			      RETRO_GC, 
 			      DEBUT_PERIODE_PAIE, 
 			      FIN_PERIODE_PAIE, 
 			      DEBUT_PERIODE_RECUEIL, 
 			      FIN_PERIODE_RECUEIL, 
 			      ENTREE, 
 			      SORTIE, 
 			      DEBUT_PER_RECUEIL_RETRO, 
 			      FIN_PER_RECUEIL_RETRO, 
 			      DEPART_SUSPENSION, 
 			      RETOUR_SUSPENSION, 
 			      DEBUT_PER_GENERATION_HP, 
 			      FIN_PER_GENERATION_HP,
 				  DEBUT_PERIODE_RECUEIL_LTP,
 				  FIN_PERIODE_RECUEIL_LTP
 			    ) 
 			  SELECT * FROM ( SELECT  /*+ opt_param(''_optimizer_push_pred_cost_based'',''false'') */ ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||p_dosNumForSimu||',';
 END IF;
 req := req||'  NUMPAC, 
 			    MOIS_PAIE, 
 			    PAIEZAD, 
 			    PACMAT, 
 			    RETRO_GC, 
 			    DATE_DEB_PERIODE, 
 			    DATE_FIN_PERIODE, 
 			    debut_recueil, 
 			    fin_recueil, 
 			    debut_situ, 
 			    CASE 
 			      WHEN fin_situ > DATE_FIN_PERIODE 
 			        THEN TO_DATE(''31.12.2099'',''dd.mm.yyyy'') 
 			      ELSE fin_situ 
 			    END AS fin_situation, 
 			    TO_DATE('||TO_CHAR(w_debut_recueil_retro,'yyyymmdd')||',''yyyymmdd''), 
 			    TO_DATE('||TO_CHAR(w_fin_recueil_retro,'yyyymmdd')||',''yyyymmdd''), 
 			    DEPART_SUSP, 
 			    RETOUR_SUSP, 
 			    CASE 
 			      WHEN SORTIE_PRECEDENTE BETWEEN DATE_DEB_PERIODE AND DATE_FIN_PERIODE 
 			        THEN debut_situ 
 			      WHEN debut_recueil IS NOT NULL 
 			        THEN TRUNC(TRUNC(debut_recueil,''MONTH''),''DAY'') 
 			      WHEN debut_recueil IS NULL 
 			        AND entree       IS NOT NULL 
 			        AND entree         <= DATE_FIN_PERIODE 
 			        AND sortie        IS NOT NULL 
 			        AND sortie         >= dt_recueil_deb 
 			        THEN DATE_DEB_PERIODE 
 			      WHEN debut_recueil IS NULL
                  AND ((entree       IS NOT NULL
                  AND entree          > DATE_FIN_PERIODE)
                  OR (sortie         IS NOT NULL
                  AND sortie          < dt_recueil_deb))
                  THEN NULL 
 			    END AS debut_HP , 
 			    CASE 
 			        WHEN fin_recueil IS NOT NULL 
 			          THEN LEAST(TRUNC(LAST_DAY(DATE_FIN_PERIODE),''DAY'')+6,NVL(ENTREE_SUIVANTE,TRUNC(LAST_DAY(DATE_FIN_PERIODE),''DAY'')+6)) 
 			        WHEN fin_recueil IS NULL 
 			          AND entree     IS NOT NULL 
 			          AND entree       <= DATE_FIN_PERIODE 
 			          AND sortie      IS NOT NULL 
 			          AND sortie       >= dt_recueil_deb 
 			          THEN DATE_FIN_PERIODE
 			           WHEN fin_recueil IS NULL
                    AND ((entree     IS NOT NULL
                    AND entree        > DATE_FIN_PERIODE)
                    OR (sortie       IS NOT NULL
                    AND sortie        < dt_recueil_deb))
                    THEN NULL 
 			      END AS fin_HP,
 			      DT_RECUEIL_DEB,
 				  DT_RECUEIL_FIN 
 			    FROM 
 			      (SELECT lead(ENTREE,1) over(partition BY NUMPAC,PACMAT order by ENTREE)-1 ENTREE_SUIVANTE, 
 			        lag(SORTIE,1) over(partition BY NUMPAC,PACMAT order by SORTIE) SORTIE_PRECEDENTE, 
 			        NUMPAC, 
 			        PACMAT, 
 			        PAIEZAD, 
 			        RETRO_GC, 
 			        MOIS_PAIE,
 			        DATE_DEB_PERIODE,
 			        DATE_FIN_PERIODE,
 			        DEBUT_FORCEE, 
 			        FIN_FORCEE, 
 			        ENTREE, 
 			        SORTIE, 
 			        RETOUR_SUSP, 
 			        DEPART_SUSP, 
 			        DEBUT_SITU, 
 			        FIN_SITU, 
 			        debut_recueil, 
 			        DT_RECUEIL_DEB, 
 			        DT_RECUEIL_FIN, 
 			        CASE 
 			          WHEN fin_forcee IS NOT NULL 
 			            THEN fin_forcee 
 			          WHEN debut_recueil IS NULL 
 			            THEN NULL 
 			          WHEN sortie      IS NULL 
 			            OR sortie      > DATE_FIN_PERIODE 
 			            THEN dt_recueil_fin 
 			          WHEN sortie      >= dt_recueil_deb 
 			            THEN sortie  
 			          ELSE TO_DATE(''01/01/1900'',''dd/mm/yyyy'')  
 			        END AS fin_recueil 
 			      FROM 
 			        (SELECT NUMPAC, 
 			          PACMAT, 
 			          PAIEZAD, 
 			          RETRO_GC, 
 			          MOIS_PAIE,
 			          DATE_DEB_PERIODE,
 			          DATE_FIN_PERIODE,
 			          DEBUT_FORCEE, 
 			          FIN_FORCEE, 
 			          ENTREE, 
 			          SORTIE, 
 			          RETOUR_SUSP, 
 			          DEPART_SUSP, 
 			          DEBUT_SITU, 
 			          FIN_SITU, 
 			          DT_RECUEIL_DEB, 
 			          DT_RECUEIL_FIN, 
 			          CASE 
 			            WHEN debut_forcee IS NOT NULL 
 			              THEN debut_forcee 
 			            WHEN entree IS NULL  
 			              THEN null 
 			            WHEN entree        <= dt_recueil_fin 
 			              AND (sortie IS NULL 
 			              OR (sortie        >= dt_recueil_deb 
 			              AND (sortie > DATE_FIN_PERIODE  
 			              	OR NOT EXISTS (SELECT 1 FROM TGE_PERIODE_RECUEIL_PAIEZAD rec_ind WHERE rec_ind.NUMPAC = rec_temp.numpac AND rec_ind.PAIEZAD = rec_temp.paiezad AND rec_ind.FIN_PERIODE_RECUEIL >= rec_temp.sortie) ) ))  
 
 			              THEN GREATEST(entree, NVL(dt_recueil_deb, entree)) 
 			            WHEN entree        <= dt_recueil_fin	
						AND (sortie        < dt_recueil_deb  
							OR ( sortie        >= dt_recueil_deb AND (sortie < DATE_FIN_PERIODE 
								AND EXISTS (SELECT 1 FROM TGE_PERIODE_RECUEIL_PAIEZAD rec_ind WHERE rec_ind.NUMPAC = rec_temp.numpac AND rec_ind.PAIEZAD = rec_temp.paiezad AND rec_ind.FIN_PERIODE_RECUEIL >= rec_temp.sortie))))
						THEN TO_DATE(''01/01/1900'',''dd/mm/yyyy'')
						WHEN (sortie        IS NOT NULL
                          AND entree         > dt_recueil_fin
                          AND sortie        <= DATE_FIN_PERIODE)
                          THEN entree						
                        ELSE NULL
 			          END AS debut_recueil 
 			        FROM (' || reqTempInfo || ') rec_temp 
 			        ) 
 			      ) ) WHERE (debut_recueil IS NULL OR TO_CHAR(debut_recueil,''dd/mm/yyyy'') != ''01/01/1900'') AND (fin_recueil IS NULL OR  TO_CHAR(fin_recueil,''dd/mm/yyyy'')  != ''01/01/1900'') AND debut_HP IS NOT NULL AND fin_HP IS NOT NULL';
 			      
 --DBMS_OUTPUT.PUT_LINE(req);
 EXECUTE_IMMEDIATE_STRING  (req,0);

 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN OK');
 EXCEPTION
 WHEN OTHERS THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO : TGE_ALIM_PERIODE_INDIV_MAIN '||SQLCODE||' '||SQLERRM);
 END TGE_ALIM_PERIODE_INDIV_MAIN;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_TEMP
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_TEMP( p_id           IN NUMBER, p_numpac       IN VARCHAR2, p_pacmat       IN VARCHAR2,
 p_periode_paie IN VARCHAR2,
 out_req OUT CLOB,
 recueil_photo IN BOOLEAN DEFAULT TRUE)
 AS
 w_Y326                 VARCHAR2(4000 BYTE);
 w_Y327                 VARCHAR2(4000 BYTE);
 w_A302                 VARCHAR2(4000 BYTE);
 w_A301                 VARCHAR2(4000 BYTE);
 w_A520                 VARCHAR2(4000 BYTE);
 w_A521                 VARCHAR2(4000 BYTE);
 w_A523                 VARCHAR2(4000 BYTE);
 periode_paie_en_cours  VARCHAR2(6);
 periode_deb_retro      VARCHAR2(6);
 optionEcp      VARCHAR2(1);
 
 A01_NOM_ELT    VARCHAR2(20);
 A02_NOM_ELT    VARCHAR2(20);
 A03_NOM_ELT    VARCHAR2(20);
 requeteMappingPivot  VARCHAR2(3000);
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP début (' || p_id || ',' || p_numpac || ',' || p_pacmat || ',' || p_periode_paie || ')');
 BEGIN
 --Alimentation des informations sur le pac
 SELECT PERIODEENCOURS, DEB_RETRO, OPTION_ECP
 INTO periode_paie_en_cours, periode_deb_retro, optionEcp
 FROM TGE_REF_PAC
 WHERE NUMPAC = p_numpac;
 --- Calcul des noms d'elements depuis tge_map_arg_elt
 select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 from (
 SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
 )
 pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));
 
 
 --Alimentation des informations sur le mapping des données
 requeteMappingPivot :='SELECT
 Y326_DONNEE ,
 Y327_DONNEE ,
 A302_DONNEE ,
 A301_DONNEE ,
 A520_DONNEE ,
 A521_DONNEE ,
 A523_DONNEE
 FROM (
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = '''|| p_numpac ||'''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 UNION ALL
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = ''*''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 AND (c.ELEMENT) NOT IN
 (
 SELECT a.element
 FROM tge_ref_mapdo a
 WHERE a.numpac = '''|| p_numpac ||'''
 AND A.ELEMENT IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 )
 ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element)
 IN(''Y326'' AS Y326 ,''Y327'' AS Y327 ,''A302'' AS A302 ,''A301'' AS A301 ,'''||A01_NOM_ELT||''' AS A520 ,'''||A02_NOM_ELT||''' AS A521,'''||A03_NOM_ELT||''' AS A523))
 ';
 EXECUTE IMMEDIATE
 requeteMappingPivot
 INTO w_Y326,
 w_Y327,
 w_A302,
 w_A301,
 w_A520,
 w_A521,
 w_A523;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP ERR : Erreurs de configuration de TGE_REF_MAPDO : NUMPAC = ''' || p_numpac || ''' AND ELEMENT in (''Y326'',''Y327'',''A302'',''A301'',''A520'',''A521'',''A523'')');
 raise;
 END;
 
 out_req := 'SELECT l.numpac, l.pacmat, l.PAIEZAD, l.debut_forcee, l.fin_forcee, l.entree, l.sortie, l.retour_susp, l.depart_susp, l.debut_situ, l.fin_situ, l.DT_RECUEIL_DEB, l.DT_RECUEIL_FIN, l.retro_gc, l.MOIS_PAIE, l.DATE_DEB_PERIODE, l.DATE_FIN_PERIODE from (
 SELECT
 dach_tmp_sus.numpac,
 dach_tmp_sus.pacmat,
 dach_tmp_sus.PAIEZAD,
 dach_tmp_sus.debut_forcee,
 dach_tmp_sus.fin_forcee,
 dach_tmp_sus.debut_situ as entree,
 dach_tmp_sus.fin_situ as sortie ,'
 || w_A302 || '+1 as retour_susp,  ' --pseudo date de retour de suspension / réembaucher
 || w_A301 || '-1 as depart_susp,  ' --pseudo date de départ en suspension
 || '
 dach_tmp_sus.debut_situ,
 dach_tmp_sus.fin_situ,
 dach_tmp_sus.DT_RECUEIL_DEB,
 dach_tmp_sus.DT_RECUEIL_FIN,
 dach_tmp_sus.retro_gc,
 dach_tmp_sus.NUMCNT,dach_tmp_sus.DATE_EFF,dach_tmp_sus.DSFCN,dach_tmp_sus.DSDCN,
 ' || w_A301 || ' AS sous_DSA301,
 ' || w_A302 || ' AS sous_DSA302,
 MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE
 FROM (
 select VR.numpac,VR.pacmat,VR.PAIEZAD,VR.NUMCNT,VR.DATE_EFF,VR.DSFCN,VR.DSDCN,VR.debut_forcee,VR.fin_forcee,VR.debut_situ,VR.fin_situ,VR.MOIS_PAIE,VR.DATE_DEB_PERIODE,VR.DATE_FIN_PERIODE,
 CASE
 WHEN TO_CHAR(VR.debut_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.debut_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_DEB,
 CASE
 WHEN TO_CHAR(VR.fin_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.fin_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_FIN,  ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 out_req := out_req || ' TGE_PERIODE_RECUEIL_PAIEZAD_R.retro_gc,  ';
 ELSE
 out_req := out_req || ' null as retro_gc, ';
 END IF;
 out_req := out_req || '(
 select max(dach_tmp.date_eff) from ';
 IF recueil_photo THEN
 out_req := out_req || ' PHOTO_DIC_ADM_CONTRAT_HISTO ';
 ELSE
 out_req := out_req || ' dic_adm_contrat_histo ';
 END IF;
 out_req := out_req || ' dach_tmp
 where dach_tmp.za962 is not null
 and dach_tmp.dsa301-1 <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD''))
 and nvl(dach_tmp.dsa302, dach_tmp.dsfsus)+1 >= to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 and dach_tmp.date_eff <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD'')) + 1
 and dach_tmp.numpac = VR.NUMPAC
 and dach_tmp.pacmat = VR.PACMAT
 and dach_tmp.paiezad = VR.PAIEZAD
 ) as date_eff_sus
 
 from (
 select numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,MOIS_PAIE,DATE_DEB_PERIODE,DATE_FIN_PERIODE,MIN(NUMERO_DE_LIGNE) as min_NUMERO_DE_LIGNE from
 (SELECT CO.* FROM (select
 SITUATION_PAIE.numpac as numpac,
 SITUATION_PAIE.pacmat as pacmat,
 SITUATION_PAIE.PAIEZAD as paiezad,
 DIC_ADM_CONTRAT.DSDCN                 AS DSDCN,
 DIC_ADM_CONTRAT.DSFCN                 AS DSFCN,
 DIC_ADM_CONTRAT_HISTO.NUMCNT          AS NUMCNT,
 DIC_ADM_CONTRAT_HISTO.DATE_EFF        AS DATE_EFF, 
 ' || w_Y326 || ' as debut_forcee,
 ' || w_Y327 || ' as fin_forcee,
 SITUATION_PAIE.DSDSC as debut_situ,
 SITUATION_PAIE.DSFSC as fin_situ,
 ' || w_A520 || ' as activite,
 ' || w_A521 || ' as etablissement,
 ' || w_A523 || ' as categorie,
 DIC_ADM_CONTRAT_HISTO.MOIS_PAIE,
 DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE,
 DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 FROM  ';
 IF recueil_photo THEN
 out_req := out_req || ' (SELECT NUMPAC, PACMAT, NUMCNT, CURRENT_PAIEZAD as PAIEZAD, DSDCN as DSDSC, NVL(DSFCN,TO_DATE(''20991231'',''yyyymmdd'')) as DSFSC
 FROM PHOTO_DIC_ADM_CONTRAT WHERE paiezad IS NOT NULL) SITUATION_PAIE ';
 ELSE
 out_req := out_req || ' SITUATION_PAIE ';
 END IF;
 out_req := out_req || '
 left join DIC_PERIODES_RECUEIL_HIS
 on DIC_PERIODES_RECUEIL_HIS.numpac = SITUATION_PAIE.numpac
 AND DIC_PERIODES_RECUEIL_HIS.paiezad = SITUATION_PAIE.paiezad
 AND DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE = ''' || p_periode_paie || '''
 inner join  ';
 IF recueil_photo THEN
 out_req := out_req || ' PHOTO_DIC_ADM_CONTRAT DIC_ADM_CONTRAT ';
 ELSE
 out_req := out_req || ' DIC_ADM_CONTRAT ';
 END IF;
 out_req := out_req || '
 on DIC_ADM_CONTRAT.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT.PACMAT=SITUATION_PAIE.PACMAT
 AND DIC_ADM_CONTRAT.NUMCNT=SITUATION_PAIE.NUMCNT
 left join ( SELECT  DIC_ADM_CONTRAT_HISTO.*,C.MOIS_PAIE, C.DATE_DEB_PERIODE_PREC, C.DATE_DEB_PERIODE, C.DATE_FIN_PERIODE
 FROM (
 SELECT distinct DACH_MAX_DATE_EFF.NUMPAC,
 DACH_MAX_DATE_EFF.PAIEZAD,
 DACH_MAX_DATE_EFF.PACMAT,
 ''' || p_periode_paie || ''' MOIS_PAIE,
 TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(''' || p_periode_paie || ''',''yyyymm''),-1),''YYYYMM'')||''01'',''yyyymmdd'') DATE_DEB_PERIODE_PREC,
 TO_DATE(''' || p_periode_paie || '''||''01'',''yyyymmdd'') DATE_DEB_PERIODE,
 last_day(to_date(''' || p_periode_paie || '''||''01'',''yyyymmdd'')) DATE_FIN_PERIODE,
 MAX(DACH_MAX_DATE_EFF.DATE_EFF)  over (partition BY DACH_MAX_DATE_EFF.NUMPAC, DACH_MAX_DATE_EFF.PAIEZAD, DACH_MAX_DATE_EFF.PACMAT) AS max_date_eff
 FROM ';
 IF recueil_photo THEN
 out_req := out_req || ' PHOTO_DIC_ADM_CONTRAT_HISTO ';
 ELSE
 out_req := out_req || ' DIC_ADM_CONTRAT_HISTO ';
 END IF;
 out_req := out_req || ' DACH_MAX_DATE_EFF
 WHERE DACH_MAX_DATE_EFF.NUMPAC = ''' || p_numpac || ''' ';
 IF p_pacmat IS NOT NULL THEN
 out_req := out_req || ' AND PACMAT = ''' || p_pacmat || ''' ';
 END IF;
 out_req := out_req || '  AND DACH_MAX_DATE_EFF.DATE_EFF <= last_day(TO_DATE( ''' || p_periode_paie || '''||''01'',''yyyymmdd''))
 ) C
 inner join ';
 IF recueil_photo THEN
 out_req := out_req || ' PHOTO_DIC_ADM_CONTRAT_HISTO DIC_ADM_CONTRAT_HISTO ';
 ELSE
 out_req := out_req || ' DIC_ADM_CONTRAT_HISTO ';
 END IF;
 out_req := out_req || ' on
 DIC_ADM_CONTRAT_HISTO.NUMPAC = C.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = C.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT = C.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.DATE_EFF = C.max_date_eff
 ) DIC_ADM_CONTRAT_HISTO
 on DIC_ADM_CONTRAT_HISTO.NUMCNT=SITUATION_PAIE.NUMCNT
 AND DIC_ADM_CONTRAT_HISTO.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = SITUATION_PAIE.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT=SITUATION_PAIE.PACMAT
 WHERE (DIC_ADM_CONTRAT_HISTO.ZA750 IS NULL OR DIC_ADM_CONTRAT_HISTO.DRPAI2 != ''B'')
 AND (DIC_ADM_CONTRAT.NATCOL IS NULL OR DIC_ADM_CONTRAT.NATCOL in (''SAL'',''STA''))
 AND NVL(SITUATION_PAIE.DSFSC,TO_DATE(''20990101'',''YYYYMMDD'')) >= DIC_ADM_CONTRAT_HISTO.DATE_DEB_PERIODE_PREC
 AND NVL(DIC_ADM_CONTRAT_HISTO.DATE_EFF,SITUATION_PAIE.DSDSC) <= DIC_ADM_CONTRAT_HISTO.DATE_FIN_PERIODE
 ) CO
 ) COM,TGE_REF_VRVAL
 WHERE TGE_REF_VRVAL.CODE_TABLE = ''LTP''
 AND TGE_REF_VRVAL.NUMERO_DE_PAC = COM.NUMPAC
 AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = SUBSTR(COM.MOIS_PAIE,5, 2)||SUBSTR(COM.MOIS_PAIE,1, 4) ';
 
 IF optionEcp IS NOT NULL AND optionEcp = 'P' THEN
 out_req := out_req || '
 AND TRIM(LPAD(COM.activite,2)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2)
 AND TRIM(LPAD(COM.etablissement,5)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5)
 AND TRIM(LPAD(COM.categorie,2)) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2)
 ';
 ELSE
 out_req := out_req || '
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.activite,2)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.etablissement,5)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(TRIM(LPAD(COM.categorie,2)),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = ''TRUE''
 ';
 END IF;
 
 out_req := out_req || '
 GROUP BY numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,COM.MOIS_PAIE,COM.DATE_DEB_PERIODE,COM.DATE_FIN_PERIODE
 ) VR inner join TGE_REF_VRVAL on TGE_REF_VRVAL.NUMERO_DE_PAC = VR.NUMERO_DE_PAC AND TGE_REF_VRVAL.CODE_TABLE = VR.CODE_TABLE AND TGE_REF_VRVAL.NUMERO_DE_LIGNE = VR.min_NUMERO_DE_LIGNE
 LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD_R
 ON TGE_PERIODE_RECUEIL_PAIEZAD_R.NUMPAC      = VR.NUMPAC
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.PACMAT     = VR.PACMAT
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.PAIEZAD    = VR.PAIEZAD
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.MOIS_PAIE  = VR.MOIS_PAIE
 AND TGE_PERIODE_RECUEIL_PAIEZAD_R.ID_TRT     = ''' || p_id || '''
 ) dach_tmp_sus
 LEFT JOIN  ';
 IF recueil_photo THEN
 out_req := out_req || ' PHOTO_DIC_ADM_CONTRAT_HISTO DIC_ADM_CONTRAT_HISTO ';
 ELSE
 out_req := out_req || ' DIC_ADM_CONTRAT_HISTO ';
 END IF;
 out_req := out_req || ' ON
 DIC_ADM_CONTRAT_HISTO.numpac = dach_tmp_sus.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.pacmat = dach_tmp_sus.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.paiezad = dach_tmp_sus.PAIEZAD
 AND DIC_ADM_CONTRAT_HISTO.date_eff = dach_tmp_sus.date_eff_sus
 ) l ';
 IF not recueil_photo THEN
 out_req := out_req || ' LEFT JOIN PHOTO_DIC_ADM_CONTRAT P
 ON l.NUMPAC = P.NUMPAC
 AND l.PACMAT = P.PACMAT
 AND l.NUMCNT = P.NUMCNT
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT_HISTO PH
 ON l.NUMPAC = PH.NUMPAC
 AND l.PACMAT = PH.PACMAT
 AND l.NUMCNT = PH.NUMCNT
 AND l.DATE_EFF = PH.DATE_EFF
 AND l.PAIEZAD = PH.PAIEZAD
 WHERE P.PACMAT IS NULL
 OR l.DSFCN IS NULL
 OR l.DSFCN >  l.DATE_FIN_PERIODE
 OR NVL(P.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(P.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR PH.PACMAT IS NULL
 OR l.sous_DSA301 IS NULL
 OR l.sous_DSA301 > l.DATE_FIN_PERIODE
 OR NVL(PH.DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(PH.DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR l.DATE_DEB_PERIODE BETWEEN l.ENTREE AND l.SORTIE
 OR l.ENTREE BETWEEN l.DATE_DEB_PERIODE AND  l.DATE_FIN_PERIODE ';
 END IF;
 
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP OK');
 EXCEPTION
 WHEN OTHERS THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP KO : TGE_ALIM_PERIODE_INDIV_TEMP '||SQLCODE||' '||SQLERRM);
 raise;
 END TGE_ALIM_PERIODE_INDIV_TEMP;
##
TAG_CHARSET=@€éèç
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_DERNIER_ENVOI)','Purge de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_DERNIER_ENVOI  WHERE NUMPAC = P_NUMPAC; 

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_DERNIER_ENVOI)','Remplissage de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_DERNIER_ENVOI select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from 
(SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
group by d.numpac,d.pacmat,d.paiezad);
 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );

 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='H',ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm')
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 AND b.traite      IS NULL
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_DONNEES_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 

 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION <
 ( SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    where z.pacmat       =e.pacmat
    AND z.numpac       =e.numpac );
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');

 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (  SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    WHERE z.numpac       =e.numpac
    AND z.PAIEZAD      =e.paiezad
    )  and PERIODE<=p_PERIODEENCOURS ;
 
 
 
 IF p_histoIP='N' THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<(SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
  where z.numpac  =e.numpac
  AND   z.PAIEZAD =e.paiezad)
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 END IF;
 
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 ( 
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;

 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 

 WHERE z.numpac       =e.numpac
 AND  z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 if P_DEB_RETRO is null OR to_date(p_PERIODEENCOURS,'YYYYMM') < to_date(P_DEB_RETRO,'YYYYMM') then
 	--Recalcul des période de recueil avec les photos de dach et dac avant de changer de mois, pour corriger les saisies tardives
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, p_PERIODEENCOURS, NULL, 'O');
 END IF;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
  
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insc Retro RELIQ)','Début d inscription retro des tables RELIQ_  pour le numpac : '||P_NUMPAC);
 tge_retro_inscription_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insc Retro RELIQ)','Fin d inscription retro des tables RELIQ_ pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
  --Historiser les periodes rétro max par pacmat 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
  union all
  select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS) 
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if P_DEB_RETRO is not null AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_RETRO,'YYYYMM') then

 DELETE from GAP_RETRO_MATRIC z where z.numpac=p_numpac and not exists (select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;

 DELETE from TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat) ;

 DELETE from GAP_SELECTION_RETRO z where  z.numpac=p_numpac   and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- recalcul du flag SECUPACMAT.PRESENT_FICHIER_PAIE
 R_PRESENT_FICHIER_PAIE( p_numpac , null );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER
=SQL=
CREATE OR REPLACE PROCEDURE TGE_CREATE_TRIGGER(NOM_TABLE IN VARCHAR2)
AS
  PROC CLOB;
  PROC_MP_NOTIF CLOB;
  populateLigOld CLOB;
  populateLigNew CLOB;
  v_typeTable VARCHAR(1);
  is_aller_ou_allerretour_mapta NUMBER;
  table_exist                   NUMBER;
  type_writer_exists            NUMBER;
BEGIN

  -- On teste si la table existe bien
  SELECT COUNT(*)
  INTO table_exist
  FROM user_tables
  WHERE table_name = nom_table;
  IF table_exist = 0 THEN
    RETURN;
  END IF;

  SELECT COUNT(*)
  INTO is_aller_ou_allerretour_mapta
  FROM tge_ref_mapta
  WHERE 
    tablephy = nom_table
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_REF_MAPDO
      --Ajout du type 'I'
    AND allerretour                                   IN ('A', '2','I');

  PROC_MP_NOTIF := TGE_CREATE_TRIGGER_MP_NOTIF(NOM_TABLE);

  -- Si on n'est ni sur une table qui part en paie, ni sur une table qui génère des notifications Marketplace, ni sur DIC_ADM_PERSO, DIC_ADM_PERSO_HISTO, DIC_ADM_CONTRAT ou DIC_ADM_CONTRAT_HISTO, on ne génère pas de trigger
  IF is_aller_ou_allerretour_mapta = 0 AND nom_table NOT IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') AND PROC_MP_NOTIF IS NULL THEN
    RETURN;
  END IF;

  -- Si la colonne TYPE_WRITER n'existe pas, on la crée
  SELECT COUNT(*)
  INTO type_writer_exists
  FROM user_tab_cols
  WHERE column_name     = 'TYPE_WRITER'
  AND table_name        = NOM_TABLE;
  IF type_writer_exists = 0 THEN
     EXECUTE_IMMEDIATE_STRING(  'ALTER TABLE ' || NOM_TABLE || ' ADD (TYPE_WRITER VARCHAR2(1 BYTE))',0);
  END IF;

  v_typeTable := fsed.getTypeTable(NOM_TABLE);

  PROC        := 'CREATE OR REPLACE TRIGGER TRG_' || NOM_TABLE || ' FOR INSERT OR UPDATE OR DELETE ON '||NOM_TABLE||' COMPOUND TRIGGER 
v_matric varchar2(32);
v_numpac varchar2(6); 
v_pacmat varchar2(8); 
v_paiezad varchar2(8);
v_type_writer varchar2(1); 
v_bypass_trigger number; 
v_bypass_DACH number; 
v1_bypass_DACH number;
TYPE periodeTabType is  table of TGE_REF_PAC.PERIODEENCOURS%TYPE ; 
periodeTab periodeTabType := periodeTabType();    
idxPeriodesIndiv NUMBER;
v_ligOld '||nom_table||'%ROWTYPE;
v_ligNew '||nom_table||'%ROWTYPE;
v_periode varchar2(6);
tabRefPacByNumpac ALIM_IDX.T_REF_PAC_BY_NUMPAC; 
';
  IF nom_table='DIC_PERIODES_RECUEIL_HIS' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    PROC :=PROC||'
listJobMasseAsync varchar2(4000);
listJobMasseAsyncTab TAB_VARCHAR:=TAB_VARCHAR();
v_jobAsyncMasseIdx NUMBER;
';
  END IF;

  IF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
    PROC :=PROC||'
TYPE paiezadPacPeriodModifedType IS  TABLE OF TGE_PAC_PAIEZAD_PERIOD_RETRO  INDEX BY VARCHAR2(15);
paiezadPacPeriodModifed paiezadPacPeriodModifedType ;
idx  VARCHAR2(15);
';
  ELSE 
    PROC :=PROC||'
idx NUMBER;
';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
    PROC          :=PROC||' 
v_listMatricToUpdate CLOB := NULL; 
v_nbMatricToUpdate NUMBER := 0;
v_countSecNav NUMBER := -1;
';
    IF nom_table   ='DIC_ADM_PERSO' THEN
      PROC        :=PROC||'
v_listMatricToDelete CLOB := NULL; 
v_nbMatricToDelete NUMBER := 0;
';
    ELSIF nom_table='DIC_ADM_CONTRAT' THEN
      PROC        :=PROC||'
v_date_debut_periode_paie DATE :=NULL; 
v_nbLig NUMBER; 
v_doMajPerso NUMBER := 0; 
TYPE NUMPAC_PACMAT_TO_DELETE IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE); 
TYPE TAB_NUMPAC_PACMAT_TO_DELETE IS TABLE OF NUMPAC_PACMAT_TO_DELETE; 
v_NUMPAC_PACMAT NUMPAC_PACMAT_TO_DELETE; 
v_TAB_NUMPAC_PACMAT TAB_NUMPAC_PACMAT_TO_DELETE; 
v_listNumpacPacmatToDelete CLOB := '',''; 
';
    ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC        :=PROC||'
v_dsdcn DIC_ADM_CONTRAT.DSDCN%TYPE; 
v_date_eff DIC_ADM_CONTRAT_HISTO.DATE_EFF%TYPE;
v_natcol DIC_ADM_CONTRAT.NATCOL%TYPE; 

TYPE paiezadTabType is table of DIC_ADM_CONTRAT_HISTO.PAIEZAD%TYPE ; 
TYPE numpacTabType is  table of DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE ; 
paiezadTab paiezadTabType := paiezadTabType(); 
numpacTab numpacTabType := numpacTabType(); 

TYPE T_TRAITEMENT_PERIODES_INDIV IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(100);
-- Ce tableau indexé contient plusieurs chose :
-- + Une entrée avec un code PAC + un PAIEZAD --> Un flag permettant de savoir si le couple NUMPAC/PAIEZAD a déjà été traité
-- + Une entrée avec un code PAC --> La période en cours du PAC
tabTrtPeriodesIndividuelles T_TRAITEMENT_PERIODES_INDIV;
in_calc_hp T_TRAITEMENT_PERIODES_INDIV;
TYPE calcHpTabType is  table of T_TRAITEMENT_PERIODES_INDIV ; 
calcHpTab calcHpTabType := calcHpTabType();
 
TYPE T_COMPARAISON_VAL_OLD_NEW IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(20);
tabValToCompare T_COMPARAISON_VAL_OLD_NEW;
TYPE PRESENTDIC_PACMAT IS RECORD 
(NUMPAC  varchar2(6),PACMAT DIC_ADM_CONTRAT_HISTO.PACMAT%TYPE);
TYPE TAB_PRESENTDIC_PACMAT IS TABLE OF PRESENTDIC_PACMAT INDEX BY VARCHAR2(14);
indexTabPresFicPacmat varchar2(14);
tabPresenceFichierPacmat TAB_PRESENTDIC_PACMAT;
alimPeriodesIndiv boolean;
';
    END IF;

    IF nom_table='DIC_ADM_CONTRAT' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC     :=PROC||'
v_actionIdx VARCHAR2(1);
v_lanceRecalculHp boolean;
v_isDeleting  NUMBER ;
v_jobIdx NUMBER;
v_cle_idx_contrat T_CLE_IDX_CONTRAT_HISTO; 
v_cles_idx_contrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();
';
    END IF;

    IF nom_table='DIC_ADM_PERSO' OR nom_table='DIC_ADM_CONTRAT' THEN
      PROC     :=PROC||'
v_matricForPacmat VARCHAR2(32); 
TYPE T_LOCKED_MATRIC IS TABLE OF VARCHAR2(1) INDEX BY VARCHAR2(32);
tabLockedMatric T_LOCKED_MATRIC;
';
    END IF;
  END IF;

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      :=PROC||' 
BEFORE STATEMENT IS BEGIN
 select count(*) into v_bypass_DACH from bypass_trg_DACH_on_session;
END BEFORE STATEMENT;
';
  END IF;

  PROC        := PROC || '  
BEFORE EACH ROW IS BEGIN
' ;

  populateLigOld := NULL;
  populateLigNew := NULL;
  FOR liste_cols_table IN (SELECT COLUMN_NAME FROM USER_TAB_COLS WHERE TABLE_NAME=NOM_TABLE AND COLUMN_ID IS NOT NULL ORDER BY COLUMN_NAME) 
  LOOP
    populateLigOld := populateLigOld||'
v_ligOld.'||liste_cols_table.COLUMN_NAME||' := :OLD.'||liste_cols_table.COLUMN_NAME||';';

        populateLigNew := populateLigNew||'
v_ligNew.'||liste_cols_table.COLUMN_NAME||' := :NEW.'||liste_cols_table.COLUMN_NAME||';';
  END LOOP;

  PROC      := PROC || '
IF INSERTING THEN 
 -- On initialise le ''OLD'' (car :OLD n''existe pas, en insertion)
 v_ligOld := ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- En insertion dans DIC_ADM_CONTRAT_HISTO, on considère que le 'OLD' c'est l'histo précédent (celui qui est en train d'être splitté)
    PROC      := PROC || 'GET_CONTRAT_HISTO_HORS_TRANSAC(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DATE_EFF-1, TRUE); ';
  ELSE
    PROC      := PROC || 'NULL; ';
  END IF;
  PROC      := PROC || '
ELSE' || populateLigOld || '
END IF;
IF DELETING THEN 
 -- On initialise le ''NEW'' (car :NEW n''existe pas, en suppression)
 v_ligNew := ';
  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    -- En suppression dans DIC_ADM_CONTRAT_HISTO, on considère que le 'NEW' c'est l'histo précédent (dont les données vont remplacer celles de l'histo qui est supprimée)
    PROC      := PROC || 'GET_CONTRAT_HISTO_HORS_TRANSAC(:OLD.NUMPAC, :OLD.PACMAT, :OLD.NUMCNT, :OLD.DATE_EFF-1, TRUE); ';
  ELSE
    PROC      := PROC || 'NULL; ';
  END IF;
  PROC      := PROC || '
ELSE' || populateLigNew || '
END IF;
';

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      := PROC || ' IF (v_bypass_DACH > 0) THEN null; else ';
  END IF;

  PROC          := PROC || ' 
if (v_bypass_trigger > 0) then 
 v_type_writer := ''N''; 
else 
 IF DELETING THEN 
  v_type_writer :=NVL(v_ligOld.type_writer,''O''); 
 ELSE 
  v_type_writer :=NVL(v_ligNew.type_writer,''O''); 
  -- On remet TYPE_WRITER à NULL pour qu''il ne soit pas considéré comme ''N'' lors des futurs update n''incluant pas cette colonne 
  :NEW.type_writer := NULL; 
  v_ligNew.type_writer := :NEW.type_writer; 
 END IF; 
END IF; 
v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC);
';

  IF v_typeTable = 'z' THEN
    PROC := PROC||' 
v_numpac := nvl(v_ligNew.numpac,v_ligOld.numpac);
IF DELETING THEN
 v_paiezad := v_ligOld.paiezad;
ELSE
 v_paiezad := v_ligNew.paiezad;
END IF; ';
  ELSIF v_typeTable='p' THEN
    PROC := PROC||' 
v_numpac := nvl(v_ligNew.numpac,v_ligOld.numpac);
v_pacmat := nvl(v_ligNew.pacmat,v_ligOld.pacmat); ';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
    PROC      := PROC || '
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND v_countSecNav=-1 THEN
 SELECT COUNT(*) INTO v_countSecNav FROM SECUPACMAT_TMP WHERE MATRIC=''SECNAV'';
 IF v_countSecNav>0 THEN
  RAISE_APPLICATION_ERROR(-20000,''CODERR=GENREC03'');
 END IF;
END IF;
';
  END IF;

  IF nom_table ='DIC_ADM_PERSO' OR nom_table ='DIC_ADM_CONTRAT' THEN
    -- On récupère le MATRIC et on teste si on l'a déjà traité
    PROC      := PROC || ' 
IF v_type_writer<>''N'' AND v_type_writer<>''M'' AND NOT tabLockedMatric.exists(v_matric) THEN';

    -- En cas de modification de DAP, on lock les tables qui la mette à jour par trigger (DAPH, DAC, DACS et DACH)
    -- En cas de modification de DAC, on lock les tables qui la mette à jour par trigger (DACS et DACH)
    IF nom_table ='DIC_ADM_PERSO' THEN
      -- DAPH et DAC uniquement pour DAP
      PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_PERSO_HISTO SET MATRIC=MATRIC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
    END IF;

    -- DACs et DACH uniquement pour les 2 (DAP et DAC)
    PROC      := PROC || ' 
BEGIN
UPDATE DIC_ADM_CONTRAT_SITU SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd'') WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
UPDATE DIC_ADM_CONTRAT_HISTO SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matric;
EXCEPTION WHEN OTHERS THEN NULL; END;';
        

    -- On stocke le MATRIC pour indiquer qu'on l'a déjà traité
    PROC      := PROC || ' 
tabLockedMatric(v_matric) := ''O'';
END IF;';

  END IF;

  IF nom_table   ='DIC_ADM_PERSO' THEN
    PROC        :=PROC||TRG_PERSO_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
    PROC        :=PROC||TRG_PERSO_HISTO_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_CONTRAT' THEN
    PROC        :=PROC||TRG_CONTRAT_BEFORE_ROW();
  ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    PROC        :=PROC||TRG_CONTRAT_HISTO_BEFORE_ROW();
  END IF;

  IF is_aller_ou_allerretour_mapta > 0 THEN
    PROC := PROC||TGE_CREATE_TRIGGER_RECYCLAGE(NOM_TABLE);
  END IF;

  IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
    PROC      := PROC || '
END IF ;
';
  END IF;

  PROC := PROC||PROC_MP_NOTIF;

  PROC :=PROC||' 
END BEFORE EACH ROW;';

  IF nom_table IN ('DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
    PROC      :=PROC||' AFTER EACH ROW IS BEGIN ';
    IF nom_table   = 'DIC_ADM_CONTRAT_HISTO' THEN
      PROC      := PROC|| TRG_CONTRAT_HISTO_AFTER_ROW();
    ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
      PROC      := PROC|| DIC_PERIOD_REC_HISTO_AFTER_ROW();
    END IF;
    PROC      :=PROC||' END AFTER EACH ROW;';
  END IF;

  IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
    PROC          :=PROC||' AFTER STATEMENT IS BEGIN';
    IF nom_table   ='DIC_ADM_PERSO' THEN
      PROC        :=PROC||TRG_PERSO_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
      PROC        :=PROC||TRG_PERSO_HISTO_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_CONTRAT' THEN
      PROC        :=PROC||TRG_CONTRAT_AFTER_STMNT();
    ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
      PROC        :=PROC||TRG_CONTRAT_HISTO_AFTER_STMNT();
    ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
      PROC        :=PROC||DIC_PERIODES_REC_H_AFTER_STMNT();
    END IF;
    PROC:=PROC||'END AFTER STATEMENT;';
  END IF;

  PROC :=PROC||' END TRG_'||NOM_TABLE||';';
  
  EXECUTE_IMMEDIATE_STRING( PROC,0);
END TGE_CREATE_TRIGGER;
##
TRG_ALTER_META
=SQL=
CREATE OR REPLACE TRIGGER TRG_ALTER_META
AFTER ALTER ON SCHEMA
DECLARE
  nomTableAlter VARCHAR2(128);
  suffixTableAlter VARCHAR2(128);
  doTest NUMBER;
  listePrefix TAB_VARCHAR:=META_LISTE_PREFIX_TABLE();
  existeTable NUMBER;
  nbTables NUMBER;
BEGIN
  nomTableAlter := UPPER(ORA_DICT_OBJ_NAME);
  doTest := 0;
  FOR i IN listePrefix.first..listePrefix.last
  LOOP
    IF INSTR(nomTableAlter,listePrefix(i)||'_')=1 THEN
      suffixTableAlter := SUBSTR(nomTableAlter,LENGTH(listePrefix(i))+1);
      doTest := 1;
    END IF;
    EXIT WHEN doTest=1;
  END LOOP;
  IF doTest=1 THEN
    nbTables := 0;
    FOR i IN listePrefix.first..listePrefix.last
    LOOP
      SELECT COUNT(*) INTO existeTable FROM USER_TABLES WHERE TABLE_NAME=listePrefix(i)||suffixTableAlter;
      nbTables := nbTables+existeTable;
      EXIT WHEN existeTable=0;
    END LOOP;
    IF nbTables=listePrefix.last THEN
      RAISE_APPLICATION_ERROR(-20000,'Pour mettre à jour la structure d''une table META ou d''une table devant avoir la même structure qu''une table META, merci d''utiliser la procédure META_MODIF_STRUCTURE (pour supprimer une colonne, passez le 3ème paramètre à NULL)');    
    END IF;
  END IF;
END TRG_ALTER_META;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_INCIDENTS_PAIE
=SQL=
create or replace trigger trg_tge_incidents_paie FOR
  insert or
  update or
  delete on tge_incidents_paie COMPOUND TRIGGER

  v_recycl           varchar2(1);
  v_retro            varchar2(1);
  v_periode_recycl   varchar2(1);
  v_numpac           varchar2(6);
  v_old_numpac       varchar2(6);
  v_pacmat           varchar2(8);
  v_type_writer      varchar2(1);
  v_paiezad          varchar2(8);
  v_old_paiezad      varchar2(8);
  v_date_effet       DATE; 
  v_periode_retro    VARCHAR2(6);
  V_PERIODE          varchar2(6);
  V_DEB_RETRO        varchar2(6);
  V_DEB_HISTO_RETRO  varchar2(6);
  V_PERIODEENCOURS   varchar2(6);
  V_CODE_CHRONO      varchar2(6);
  v_bypass_trigger   number;
  dateFinRecueil DATE;
  --moisPaie  VARCHAR2(6);
  V_NB_MOIS_RETRO    number;
  TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE;
  tabPeriodeByNumpac T_PERIODE_BY_NUMPAC;
  date_test_recycl   DATE;
  date_effet_recycl   DATE;
  A520 VARCHAR2(32);
  A521 VARCHAR2(32);
  A523 VARCHAR2(32);
  activite VARCHAR2(32);
  etablissement VARCHAR2(32);
  categorie VARCHAR2(32);
  nomTablegxp VARCHAR2(32);
  requete CLOB;
  V_IS_T2           NUMBER;
  V_ORIGINE_CREATE  VARCHAR2(32);
  BEFORE STATEMENT IS BEGIN
    -- action de 'bypass' le trigger 
    select count(*) into v_bypass_trigger from bypass_trg_recycl_on_session;   
    v_old_numpac := 'X' ;
  END BEFORE STATEMENT;
BEFORE EACH ROW
IS
begin
  if (v_bypass_trigger = 0) then
    -- s'il y a une ligne dans la table temporaire, alors il n'y a pas de recyclage ni de rétroactivité  	
    v_numpac        := NVL(:new.numpac, :old.numpac);
  	v_paiezad       := NVL(:new.paiezad, :old.paiezad);
    IF v_old_numpac != v_numpac THEN
     -- Récupération des info du pac    
     SELECT 
		 	  PERIODEENCOURS,
		 	  DEB_RETRO
	 		INTO
		 	  V_PERIODEENCOURS,
		 	  V_DEB_RETRO
	 		FROM TGE_REF_PAC
	 	 	WHERE NUMPAC = v_numpac; 
      
    end if;
    
  if deleting then
    v_type_writer := nvl(:old.type_writer, 'O');
  else
    v_type_writer := nvl(:new.type_writer, 'O');
    -- On remet TYPE_WRITER à NULL pour qu'il ne soit pas considéré comme 'N' lors des futurs update n'incluant pas cette colonne
    :new.type_writer := null;
  end if;

  if (v_type_writer <> 'N' AND v_type_writer <> 'M') then
    --La colonne PERIODE_INIT ne peut pas être modifiée, elle doit contenir la valeur initiale de la colonne PERIODE (avant tout recalcul).
	IF INSERTING THEN
	  :NEW.PERIODE_INIT := :NEW.PERIODE;
	ELSIF UPDATING THEN   	
	  :NEW.PERIODE_INIT := :OLD.PERIODE_INIT;
	END IF;
    
	if INSERTING or UPDATING then
	    BEGIN
	        IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
		       v_date_effet    := NVL(:new.date_effet, :old.date_effet);
		       V_ORIGINE_CREATE := NVL(:new.ORIGINE_CREATE, :old.ORIGINE_CREATE);
		       SELECT COUNT(*) INTO V_IS_T2 
		       FROM DIC_ADM_CONTRAT_HISTO 
		       WHERE V_ORIGINE_CREATE = 'BATCH' 
		       AND NUMPAC = v_numpac 
		       AND PAIEZAD = v_paiezad 
		       AND ZA996 = 'A' 
		       AND v_date_effet BETWEEN DATE_EFF AND DATE_SORTIE_SIT_BO;
		       IF  V_IS_T2 = 0 THEN 
			      SELECT MIN(MOIS_PAIE) 
			      INTO v_periode_retro
			      FROM TGE_PERIODE_RECUEIL_PAIEZAD
			      WHERE numpac = v_numpac
			      AND paiezad  = v_paiezad
			      AND v_date_effet BETWEEN DEBUT_PERIODE_RECUEIL AND FIN_PERIODE_RECUEIL;
			      IF v_periode_retro IS NOT NULL THEN
			        :new.periode     := TO_DATE(v_periode_retro || 01, 'yyyyMMdd');
			      END IF;
		       END IF;
		    END IF;
	    	EXCEPTION
	    	  WHEN NO_DATA_FOUND THEN
	          -- Période de recueil non trouvé
	          null;
	    END;
	END IF;
  
    BEGIN
        SELECT t.pacmat,nvl(t.periode_recyclage,'1'),CODE_CHRONO
        INTO v_pacmat,v_periode_recycl,V_CODE_CHRONO
        from dic_adm_contrat_SITU d, secupacmat t
        where d.numpac = v_numpac
        and d.paiezad  = v_paiezad
        and d.numpac   = t.numpac
        and d.pacmat   = t.pacmat
        and nvl(:new.DATE_EFFET,:old.DATE_EFFET) BETWEEN d.DSDSC AND NVL(d.DSFSC,to_date('31122099','DDMMYYYY'));
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        null;
    END;
    if v_periode_recycl = '3' then
      raise_application_error(-20000, 'CODERR=GENREC02');
    elsif v_periode_recycl = '2' then
      raise_application_error(-20000, 'CODERR=GENREC01');
    elsif v_periode_recycl = '1' then
      v_recycl            := 'N';
      --Période de recueil individuelle
 --select periodeencours into moisPaie from tge_ref_pac where numpac = v_numpac;
 BEGIN
 --Période de recueil individuelle
 SELECT FIN_PERIODE_RECUEIL INTO dateFinRecueil from tge_periode_recueil_paiezad where numpac=v_numpac 
 and MOIS_PAIE=V_PERIODEENCOURS and paiezad=v_paiezad ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 
 dateFinRecueil:=null;
 END;
 --Période de recueil génèrique
 if(dateFinRecueil  is null) then  
  if v_old_numpac  !=  v_numpac OR ( v_old_numpac  =  v_numpac AND A520 is null  and A521 is  null and A523  is null) THEN 
   SELECT tablegxp ,
    A520_DONNEE ,
    A521_DONNEE ,
    A523_DONNEE into 
    nomTablegxp,A520,A521,A523
  FROM
  (
  SELECT DISTINCT c.element,
    c.tablegxp,
    c.DONNEEGXP
  FROM tge_ref_mapdo c
  WHERE C.numpac = v_numpac
  AND c.element IN ('A520','A521', 'A523')
  UNION ALL
  SELECT DISTINCT c.element,
    c.tablegxp,
    c.DONNEEGXP
  FROM tge_ref_mapdo c
  WHERE C.numpac                  ='*'
  AND c.element                  IN ('A520','A521', 'A523')
  AND (c.TABLEGXP,c.ELEMENT) NOT IN
    (SELECT a.TABLEGXP,
      a.element
    FROM tge_ref_mapdo a
    WHERE a.numpac = v_numpac
    AND A.ELEMENT IN ('A520','A521', 'A523')
    )
  ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN('A520' AS A520,'A521' AS A521, 'A523' AS A523));
 end if; 
  if( A520 is  not null  and A521 is not null and A523  is not null) then
    requete:='select '||A520|| ','||A521||','||A523||'  from '||nomTablegxp||' d '; 
    requete:=requete || ' where numpac='''||v_numpac||''' and paiezad='''|| v_paiezad  || ''' and pacmat='''||v_pacmat||''''; 
    if( nomTablegxp='DIC_ADM_CONTRAT_HISTO') then
 		requete:=requete || ' and sysdate BETWEEN date_eff and date_fin_bo AND rownum=1';
 	end if;
    BEGIN
    EXECUTE IMMEDIATE requete into activite,etablissement,categorie;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dateFinRecueil:=null;
    END;
  end if;
  if(activite is not null and etablissement is not null and categorie is not null) then
    BEGIN
    select 
    max(to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8),'DDMMYYYY')) into  dateFinRecueil
    from tge_ref_vrval   
    WHERE numero_de_pac = v_numpac 
    AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = to_char(to_date(V_PERIODEENCOURS,'YYYYMM'),'MMYYYY') 
    AND CODE_TABLE = 'LTP'  
    AND IS_BETWEEN_NLS_FRENCH(LPAD(activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = 'TRUE' 
    AND IS_BETWEEN_NLS_FRENCH(LPAD(etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = 'TRUE' 
    AND IS_BETWEEN_NLS_FRENCH(LPAD(categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = 'TRUE' ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dateFinRecueil:=null;
    END;
  end if;
 end if;
 if (dateFinRecueil is null) then
    select LAST_DAY( to_date(V_PERIODEENCOURS,'YYYYMM') ) into dateFinRecueil from dual;
 end if;
      IF DELETING THEN
        date_test_recycl := :old.periode;
		date_effet_recycl :=:old.date_effet;
      ELSE
        date_test_recycl := :new.periode;
		 IF updating THEN
		 	date_effet_recycl :=LEAST(:new.date_effet,:old.date_effet);
		 ELSE
		 	date_effet_recycl :=:new.date_effet;
		 END IF;
	  END IF;
	    IF  (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') > to_char(dateFinRecueil,'YYYYMMDD' ) ) THEN
		 date_test_recycl := TO_DATE('20991231','yyyymmdd');
      END IF;
 		if (NVL(TO_CHAR(date_effet_recycl,'yyyymm'),'000000') <= to_char(dateFinRecueil,'YYYYMMDD' ) ) then
        if inserting or deleting then
          v_recycl := 'O';
        elsif updating then
          if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
            v_recycl                 := 'O';
          elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
            v_recycl                 := 'O';
          elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
            v_recycl                 := 'O';
          elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
            v_recycl                 := 'O';
          elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
            v_recycl                 := 'O';
          elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
            v_recycl                 := 'O';
          elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
            v_recycl                 := 'O';
          elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
            v_recycl                 := 'O';
          elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
            v_recycl                 := 'O';
          end if;
        end if;
        if v_recycl = 'O' then
          begin
            merge into gap_recycl_matric a using (select v_numpac as numpac, v_pacmat as pacmat from dual) b on (a.pacmat = b.pacmat and a.numpac = b.numpac)
          when not matched then
            insert (a.numpac, a.pacmat) values (b.numpac, b.pacmat);
          exception
          when others then
            --dbms_output.put_line('Collaborateur déjà en recyclage ' || v_numpac || '/' || v_pacmat);
            --FIXME utiliser la procédure trace_dbms_output()
            NULL;
          end;
        end if;
      end if;
    end if;
    IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODEENCOURS THEN
    /** Test de mise en rétro **/
    v_retro            := 'N';
    if inserting or deleting then
      v_retro := 'O';
    elsif updating then
      -- Les valeurs des colonnes clés ne peuvent pas être nulls 
      if :new.code_imputation    <> :old.code_imputation or (:new.code_imputation is not null and :old.code_imputation is null) or (:new.code_imputation is null and :old.code_imputation is not null) then
        v_retro                 := 'O';
      elsif :new.code_ip         <> :old.code_ip or (:new.code_ip is not null and :old.code_ip is null) or (:new.code_ip is null and :old.code_ip is not null) then
        v_retro                 := 'O';
      elsif :new.date_effet      <> :old.date_effet or (:new.date_effet is not null and :old.date_effet is null) or (:new.date_effet is null and :old.date_effet is not null) then
        v_retro                 := 'O';
      elsif :new.heures          <> :old.heures or (:new.heures is not null and :old.heures is null) or (:new.heures is null and :old.heures is not null) then
        v_retro                 := 'O';
      elsif :new.origine         <> :old.origine or (:new.origine is not null and :old.origine is null) or (:new.origine is null and :old.origine is not null) then
        v_retro                 := 'O';
      elsif :new.type_ip         <> :old.type_ip or (:new.type_ip is not null and :old.type_ip is null) or (:new.type_ip is null and :old.type_ip is not null) then
        v_retro                 := 'O';
      elsif :new.type_traitement <> :old.type_traitement or (:new.type_traitement is not null and :old.type_traitement is null) or (:new.type_traitement is null and :old.type_traitement is not null) then
        v_retro                 := 'O';
      elsif :new.periode         <> :old.periode or (:new.periode is not null and :old.periode is null) or (:new.periode is null and :old.periode is not null) then
        v_retro                 := 'O';
      elsif :new.action_retro    <> :old.action_retro or (:new.action_retro is not null and :old.action_retro is null) or (:new.action_retro is null and :old.action_retro is not null) then
        v_retro                 := 'O';
      end if;
    end if;
    if v_retro = 'O' then
      V_PERIODE := TO_CHAR(NVL(:NEW.PERIODE,:OLD.PERIODE),'YYYYMM');
      TGE_RETRO_INSCRIPT_WITH_CHECK(V_NUMPAC, V_PACMAT, V_PERIODE, V_CODE_CHRONO, V_PAIEZAD, 'TGE_INCIDENTS_PAIE');
    END IF;
  END IF;
  /** Fin test de mise en rétro **/
  end if;
  v_old_numpac  :=  v_numpac; 
  end if; 
END BEFORE EACH ROW;
end trg_tge_incidents_paie;
##
TAG_CHARSET=@€éèç
##
TRG_TGE_REF_DICOZ
=SQL=
CREATE OR REPLACE TRIGGER TRG_TGE_REF_DICOZ 
BEFORE INSERT OR UPDATE ON TGE_REF_DICOZ

FOR EACH ROW

BEGIN

IF :NEW.GROUPE in ('ATJ','HCO','IND') and :NEW.OCC1='12' THEN

:NEW.OCC1:='13';

END IF;

IF :NEW.GROUPE ='HIS' and :NEW.OCC1='0' THEN

:NEW.OCC1:='18';

END IF;

END TRG_TGE_REF_DICOZ;
##
TAG_CHARSET=@€éèç
##
TGE_REF_MAPDO_RESOLVED
=SQL=
CREATE OR REPLACE FORCE VIEW TGE_REF_MAPDO_RESOLVED (NUMPAC,ELEMENT,OCCURENCE,DONNEEGXP,TABLEGXP,DONNFILTRE,OPERFILTRE,VALFILTRE,TRTPARTICULIER,ENVOI_SYSTEMATIQUE,FORCABLE_ECRAN_GENERE) 
AS  
SELECT P.NUMPAC,M.ELEMENT,M.OCCURENCE,M.DONNEEGXP,M.TABLEGXP,M.DONNFILTRE,M.OPERFILTRE,M.VALFILTRE,M.TRTPARTICULIER,M.ENVOI_SYSTEMATIQUE,M.FORCABLE_ECRAN_GENERE 
FROM TGE_REF_MAPDO M, TGE_REF_PAC P 
WHERE M.NUMPAC=P.NUMPAC OR (M.NUMPAC='*' AND NOT EXISTS (SELECT 1 FROM TGE_REF_MAPDO M2 WHERE M2.ELEMENT=M.ELEMENT AND M2.OCCURENCE=M.OCCURENCE AND M2.NUMPAC=P.NUMPAC)) 
##
TAG_CHARSET=@€éèç
##
EDI_DS_PARAGRAPHE
=SQL IFNOTEXIST=EDI_DS_PARAGRAPHE=IDDOCSERV3=
ALTER TABLE EDI_DS_PARAGRAPHE ADD IDDOCSERV3 VARCHAR2(40)
##
EDI_HISTO_LANCEMENTS
=SQL IFNOTEXIST=EDI_HISTO_LANCEMENTS=TYPE_DOC=
ALTER TABLE EDI_HISTO_LANCEMENTS ADD TYPE_DOC VARCHAR2(1 BYTE)
##
TAG_CHARSET=@€éèç
##
EDI_EXPORT_DOC_ESIGN
=SQL IFNOTEXIST=EDI_EXPORT_DOC_ESIGN=
CREATE TABLE "EDI_EXPORT_DOC_ESIGN" ( "ID_DOC_CONTAINER" VARCHAR2(24 BYTE), "STATUT_EXPORT" VARCHAR2(10), "DATE_EXPORT" VARCHAR2(14 BYTE), PRIMARY KEY ("ID_DOC_CONTAINER"))
##
MP_DATA
==
DELETE FROM MP_DATA WHERE DATA_NAME_MP_ALP='payAdvanceMsgAideMontantAcompte'
'payAdvanceMsgAideMontantAcompte',NULL
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP_ALP LIKE 'dependent%' AND DATA_NAME_MP IN ('PersonLegalNameFamilyName1','PersonLegalNameFamilyName2','PersonGenderCodeCodeValue','PersonTaxdependentsIndicator','PersonBirthOrder','PersonLegalNameFamilyName1','PersonGenderCodeCodeValue','PersonTaxdependentsIndicator','RelationshipTypeCodeCodeValue')
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('WorkersAssociateOID','WorkAssignmentAssignedWorkLocationsAddressLineTwo','PersonLegalAddressBuildingNumberExtension','PersonOtherPersonalAddressesBuildingNumberExtension','PersonLegalAddressCountrySubdivisionLevel2LongName','PersonOtherPersonalAddressesCountrySubdivisionLevel2LongName','WorkAssignmentAssignedWorkLocationsAddressCityName','WorkAssignmentAssignedWorkLocationsAddressCountryCode','WorkAssignmentAssignedWorkLocationsAddressSubdivisionCodeValue','PersonLegalAddressCountrySubdivisionLevel2CodeValue','PersonOtherPersonalAddressesCountrySubdivisionLevel2CodeValue','WorkAssignmentAssignedWorkLocationsAddressPostalCode','BusinessCommunicationLandlinesItemID','WorkAssignmentAssignedOrganizationalUnitsDepartmentIdNameCodeCodeValue','DependentsPersonLegalNameFamilyName1','DependentsPersonLegalNameFamilyName2','DependentsPersonGenderCodeCodeValue','DependentsPersonTaxdependentsIndicator','DependentsPersonBirthOrder','DependentsPersonSocialInsurancePrograms1CoveredIndicator','DependentsPersonSocialInsurancePrograms0CoveredIndicator','DependentsRelationshipTypeCodeCodeValue','BusinessCommunicationFaxesFormattedNumber','WorkersPersonLegalNameFormattedName','WorkersWorkAssignmentReportsToAssociateOID','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdekey','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdidentifiant','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdpat','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdpayeur','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdsalfix','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdsalnet','BusinessCommunicationMobilesFormattedNumber','WorkAssignmentWorkerTypeCodeCodeValue','WorkAssignmentAssignedWorkLocationsAddressLineOne','WorkAssignmentAssignedWorkLocationsAddressUnit','PersonLegalAddressPostalCode','PersonOtherPersonalAddressesPostalCode','DistributionInstructionsPrecedenceCodeCodeValue','WorkAssignmentAssignmentStatusReasonCodeCodeValue','WorkersWorkerDatesRehireDate','WorkAssignmentBaseRenumAnnualRateAmountValue','WorkAssignmentRenumBasisCodeCodeValue','WorkAssignmentAssignedOrganizationalUnitsStrucAffectationIdNameCodeCodeValue','WorkAssignmentTerminationDate','WorkersWorkerDatesTerminateDate','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrnombre','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrpartpatronale','PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrpartsalariale','WorkAssignmentWorkArrangementCodeCodeValue','WorkerID','WorkersPersonIdentityDocument0DocumentID','WorkersPersonIdentityDocument1DocumentID','WorkersPersonIdentityDocument2DocumentID','WorkersPersonIdentityDocument3DocumentID')
'WorkersAssociateOID','associateOID'
'WorkAssignmentAssignedWorkLocationsAddressLineTwo','btqAdresseEtab'
'PersonLegalAddressBuildingNumberExtension','btqAdresseFiscal'
'PersonOtherPersonalAddressesBuildingNumberExtension','btqAdressePerso'
'PersonLegalAddressCountrySubdivisionLevel2LongName','bureauDistribAdresseFiscal'
'PersonOtherPersonalAddressesCountrySubdivisionLevel2LongName','bureauDistribAdressePerso'
'WorkAssignmentAssignedWorkLocationsAddressCityName','cityEtab'
'WorkAssignmentAssignedWorkLocationsAddressCountryCode','codeCountryEtab'
'WorkAssignmentAssignedWorkLocationsAddressSubdivisionCodeValue','codeINSEEEtab'
'PersonLegalAddressCountrySubdivisionLevel2CodeValue','codeINSEEFiscal'
'PersonOtherPersonalAddressesCountrySubdivisionLevel2CodeValue','codeINSEEPerso'
'WorkAssignmentAssignedWorkLocationsAddressPostalCode','codePostalEtab'
'BusinessCommunicationLandlinesItemID','countryDialingLandlineWork'
'WorkAssignmentAssignedOrganizationalUnitsDepartmentIdNameCodeCodeValue','departmentId'
'DependentsPersonLegalNameFamilyName1','dependentConjointFamilyName1'
'DependentsPersonLegalNameFamilyName2','dependentConjointFamilyName2'
'DependentsPersonGenderCodeCodeValue','dependentConjointGenderCode'
'DependentsPersonTaxdependentsIndicator','dependentConjointTaxDependentIndicator'
'DependentsPersonBirthOrder','dependentEnfantBirthOrder'
'DependentsPersonLegalNameFamilyName1','dependentEnfantFamilyName1'
'DependentsPersonGenderCodeCodeValue','dependentEnfantGenderCode'
'DependentsPersonSocialInsurancePrograms1CoveredIndicator','dependentEnfantHealthInsuranceCoveredIndicator'
'DependentsPersonSocialInsurancePrograms0CoveredIndicator','dependentEnfantSocialSecurityCoveredIndicator'
'DependentsPersonTaxdependentsIndicator','dependentEnfantTaxDependentIndicator'
'DependentsRelationshipTypeCodeCodeValue','dependentRelationshipTypeCode'
'BusinessCommunicationFaxesFormattedNumber','faxWorkNum'
'WorkersPersonLegalNameFormattedName','formattedName'
'WorkersWorkAssignmentReportsToAssociateOID','managerId'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdekey','MDEkey'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdidentifiant','MDIdentifiant'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdpat','MDPat'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdpayeur','MDPayeur'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdsalfix','MDSalFix'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMdsalnet','MDSalNet'
'BusinessCommunicationMobilesFormattedNumber','mobileWorkNum'
'WorkAssignmentWorkerTypeCodeCodeValue','natureContrat'
'WorkAssignmentAssignedWorkLocationsAddressLineOne','nomVoieAdresseEtab'
'WorkAssignmentAssignedWorkLocationsAddressUnit','officeNumber'
'PersonLegalAddressPostalCode','postalCodeFiscal'
'PersonOtherPersonalAddressesPostalCode','postalCodePerso'
'DistributionInstructionsPrecedenceCodeCodeValue','precedenceOrdCompteBancaire'
'WorkAssignmentAssignmentStatusReasonCodeCodeValue','ReasonCode'
'WorkersWorkerDatesRehireDate','rehireDate'
'WorkAssignmentBaseRenumAnnualRateAmountValue','remuneration'
'WorkAssignmentRenumBasisCodeCodeValue','remunerationBasisCode'
'WorkAssignmentAssignedOrganizationalUnitsStrucAffectationIdNameCodeCodeValue','strucAffectationId'
'WorkAssignmentTerminationDate','terminationDate'
'WorkersWorkerDatesTerminateDate','terminationDate'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrnombre','TRNombre'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrpartpatronale','TRPartPatronale'
'PayrolloutputsPayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdTrpartsalariale','TRPartSalariale'
'WorkAssignmentWorkArrangementCodeCodeValue','workArrangementCode'
'WorkerID','workerId'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdDefPro'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdDefPro'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdDefPro'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdDefPro'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdAnnee'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdAnnee'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdCle'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdCle'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdDepartement'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdDepartement'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdMois'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdMois'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdOrdre'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdOrdre'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvAnnee'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvAnnee'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvCle'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvCle'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvDepartement'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvDepartement'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvMois'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvMois'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvOrdre'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvOrdre'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvSecteur'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvSecteur'
'WorkersPersonIdentityDocument2DocumentID','workerLegalIdProvSexe'
'WorkersPersonIdentityDocument3DocumentID','workerLegalIdProvSexe'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdSecteur'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdSecteur'
'WorkersPersonIdentityDocument0DocumentID','workerLegalIdSexe'
'WorkersPersonIdentityDocument1DocumentID','workerLegalIdSexe'
##
TAG_CHARSET=@€éèç
##
REQUETEURAPP
=SQL IFEXIST=REQUETEURAPP=
UPDATE REQUETEURAPP SET JOINTURES = REGEXP_REPLACE(JOINTURES, '[^[:print:]]', ' ')
##
REQUETEURTABLES
=SQL IFEXIST=REQUETEURTABLES=
UPDATE REQUETEURTABLES SET LIB_JOINTURE = REGEXP_REPLACE(LIB_JOINTURE, '[^[:print:]]', ' ')
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODMOD = 'TAB' AND CODLANG = 'fr_fr' AND CODERR = 'STDTAB82' AND NIV_DEFINITION = 0
'STDTAB82','TAB','fr_fr',0,'Veuillez d''abord définir au moins une clé pour cette table.',1
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODMOD = 'TAB' AND CODLANG = 'fr_fr' AND CODERR = 'STDTAB83' AND NIV_DEFINITION = 0
'STDTAB83','TAB','fr_fr',0,'La zone #1 doit être au format date (format : #2).',1
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'EDI' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and  CODERR in ('EDI00098', 'EDI00099') 
'EDI00098','EDI','fr_fr','0','La génération se terminera dans quelques instants. Vous verrez le fichier apparaître dans "Mes fichiers récents". Il sera accessible depuis l''écran Fichiers disponibles.','2'
'EDI00099','EDI','fr_fr','0','La génération est en cours, merci de patienter. Vous pouvez fermer ce slide-in, vous verrez le fichier apparaître dans "Mes fichiers récents".','2'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'STD' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and  CODERR in ('ADMWE004') 
'ADMWE004','STD','fr_fr','0','Ce matricule a déjà été attribué au login suivant : #1, qui n''est pas déclaré dans l''application. Merci de l''importer pour pouvoir le mettre à jour.','4'
##
TAG_CHARSET=@€éèç
##
SYS_JSPTAG
=SQL IFNOTEXIST=SYS_JSPTAG=
CREATE TABLE "SYS_JSPTAG"    (	"NOMPAGE" VARCHAR2(250 BYTE), 	"FIELDNAME" VARCHAR2(50 BYTE), 	"ACTIF" VARCHAR2(1 BYTE), 	 PRIMARY KEY ("NOMPAGE"))
##
TAG_CHARSET=@€éèç
##
SYS_MODULEDESCRIPTOR
=SQL IFNOTEXIST=SYS_MODULEDESCRIPTOR=
CREATE TABLE "SYS_MODULEDESCRIPTOR"    (	"MODULE_NAME" VARCHAR2(50 BYTE), 	"CLASS_VERSION_WEB" VARCHAR2(255 BYTE), 	"CLASS_VERSION_BATCH" VARCHAR2(255 BYTE), 	 PRIMARY KEY ("MODULE_NAME"))
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage='MesDemandesWkfExpert.jsp' and idrequete=1
'MesDemandesWkfExpert.jsp','1','Utilisateur','(SELECT cg.LOGIN AS LOGIN, c.NOMLONG  AS DESCRIPTION, s.NOM_SCHEMA   AS SCHEMA,cg.LANGUE AS LANGUE FROM SYS_SCH_LISTE s,SYS_USR_CONNU c,SYS_USR_CONFIG cg LEFT JOIN SECUPACMAT m ON cg.REQUETEMATRIC = m.MATRIC WHERE s.CODE_SCHEMA=cg.SCHEMA AND cg.LOGIN=c.LOGIN  AND m.NUMPAC = ''%1'' )','LOGIN,DESCRIPTION,SCHEMA,LANGUE','LOGIN',NULL,'50','true','LOGIN',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
DELETE FROM sys_requetes_jsp WHERE nompage='MesDemandesWkfExpert.jsp' and idrequete=2
'MesDemandesWkfExpert.jsp','2','Utilisateur','(SELECT cg.LOGIN AS LOGIN, c.NOMLONG  AS DESCRIPTION, s.NOM_SCHEMA   AS SCHEMA,cg.LANGUE AS LANGUE FROM SYS_SCH_LISTE s,SYS_USR_CONNU c,SYS_USR_CONFIG cg LEFT JOIN SECUMATRIC ON cg.REQUETEMATRIC = SECUMATRIC.MATRIC WHERE s.CODE_SCHEMA=cg.SCHEMA AND cg.LOGIN=c.LOGIN  AND @SECUMAT_SANSQUOTE@)','LOGIN,DESCRIPTION,SCHEMA,LANGUE','LOGIN',NULL,'50','true','LOGIN',NULL,NULL,NULL
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('RD_TAB_DEV_TYP_IND_TRANSP_2','RD_TAB_DEV_TYP_IND_TRANSP_3')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'RD_TAB_DEV_TYP_IND_TRANSP','2','Utilisateur','(SELECT ''A'' AS CODE, ''Abonnement annuel'' AS LIBELLE, 1 AS ORDRE FROM DUAL ¿UNION ALL SELECT ''M'' AS CODE, ''Abonnement mensuel'' AS LIBELLE, 2 AS ORDRE FROM DUAL UNION ALL SELECT ''H'' AS CODE, ''Abonnement hebdo'' AS LIBELLE, 3 AS ORDRE FROM DUAL UNION ALL SELECT ''F'', ''Frais voiture'', 4 AS ORDRE FROM DUAL UNION ALL SELECT ''S'', ''Service mobilité durable'', 3 AS ORDRE FROM DUAL)','CODE, LIBELLE','CODE, LIBELLE',NULL,NULL,'false','ORDRE',NULL,'Type de demande indemnite transport','CODE, LIBELLE'
'RD_TAB_DEV_TYP_IND_TRANSP','3','Utilisateur','(SELECT ''A'' AS CODE, ''Abonnement annuel'' AS LIBELLE, 1 AS ORDRE FROM DUAL UNION ALL SELECT ''M'' AS CODE, ''Abonnement mensuel'' AS LIBELLE, 2 AS ORDRE FROM DUAL UNION ALL SELECT ''H'' AS CODE, ''Abonnement hebdo'' AS LIBELLE, 3 AS ORDRE FROM DUAL UNION ALL SELECT ''F'', ''Frais voiture'', 4 AS ORDRE FROM DUAL UNION ALL SELECT ''S'', ''Service mobilité durable'', 3 AS ORDRE FROM DUAL)¿','CODE, LIBELLE','CODE, LIBELLE','CODE = ''%1''',NULL,'false','ORDRE',NULL,'Type de demande indemnite transport','CODE, LIBELLE'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE = 'SortieManagerRechercheRemplacant' AND IDREQUETE = 1
'SortieManagerRechercheRemplacant','1','Utilisateur','SECUMATRIC LEFT JOIN (SELECT distinct MATRICPERE FROM ORG_SUBALTERNE WHERE CODORG = ''GENERAL'') ON MATRICPERE = MATRIC','MATRIC,NOM,PRENOM,CASE WHEN MATRICPERE IS NULL THEN ''FALSE'' ELSE ''TRUE'' END','MATRIC,NOM,PRENOM,CASE WHEN MATRICPERE IS NULL THEN ''FALSE'' ELSE ''TRUE'' END','(NVL(TO_DATE(REPLACE(''%2'',''DSFCN'',''%3''),''dd.mm.yyyy'')+1,TRUNC(SYSDATE,''dd''))&gt;SYSDATE OR %1)','0',null,'MATRIC',null,'Recherche d''un remplaçant lors de la sortie d''un manager',null
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('TAB_RD_NATCNT_OBSOLETE_1')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_NATCNT_OBSOLETE','1','Utilisateur','GA_ZWNATURCNT','CODE_NATURCNT,LIBELLE_LONG,NATCOL,UTILISE','CODE_NATURCNT,LIBELLE_LONG,NATCOL,UTILISE','CODE_NATURCNT=''%1''','0','false',NULL,NULL,'Natures de contrat obsoletes','Code,Libellé,Nature collaboration,Utilise'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('TAB_RD_NATCNT_ZAD_5')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_NATCNT_ZAD','5','Utilisateur','GA_ZWNATURCNT LEFT OUTER JOIN GA_ZWNATURCNT_DSN ON DSN=CODE_DSN_NAT','CODE_NATURCNT,LIBELLE_LONG,NATCOL,DSN,LIBELLE_DSN_NAT','CODE_NATURCNT,LIBELLE_LONG,NATCOL,DSN,LIBELLE_DSN_NAT',NULL,'0','false','CODE_NATURCNT',NULL,'Nature de contrat','Nature,Libellé,code DSN,Nature collab,libellé DSN'
##
SYS_SCH_PAGE_INITIALIZER
=SQL IFEXIST=SYS_SCH_PAGE_INITIALIZER=
update SYS_SCH_PAGE_INITIALIZER set ERR_MSG = 'TGE00077;BDG00083;EPVSIE36;AAP14;GTA00134;EDI00098' where nom_page = 'Ext.adp.Modules.GTA.Expert.EvenementsGTA'
##
TAG_CHARSET=@€éèç
##
SYS_SERVICELET
=SQL IFNOTEXIST=SYS_SERVICELET=
CREATE TABLE SYS_SERVICELET   (	"TYP" VARCHAR2(1 BYTE), 	"SYNONYME" VARCHAR2(100 BYTE), 	"CLASS_NAME" VARCHAR2(255 BYTE), 	"ACTIF" VARCHAR2(1 BYTE), 	 PRIMARY KEY ("TYP", "SYNONYME")) 
##
TAG_CHARSET=@€éèç
##
SYS_SERVICELET_AVANCEMENT
=SQL IFNOTEXIST=SYS_SERVICELET_AVANCEMENT=
CREATE TABLE SYS_SERVICELET_AVANCEMENT   (	"DATEMAJ" TIMESTAMP (6), 	"MESSAGE" VARCHAR2(500 BYTE)   ) 
##
TAG_CHARSET=@€éèç
##
SYS_SERVICELET_CLIENT
=SQL IFNOTEXIST=SYS_SERVICELET_CLIENT=
CREATE TABLE "SYS_SERVICELET_CLIENT"    (	"TYP" VARCHAR2(1 BYTE), 	"SYNONYME" VARCHAR2(50 BYTE), 	"CLASS_NAME" VARCHAR2(255 BYTE), 	"ACTIF" VARCHAR2(1 BYTE), 	 PRIMARY KEY ("TYP", "SYNONYME")) 
##
SYS_TRT_TOMAKE
==
DELETE FROM SYS_TRT_TOMAKE WHERE ID_TRT = 'Traitement_ExportDocumentsSignes' 
'Traitement_ExportDocumentsSignes','00'
##
sys_varsys
==
DELETE FROM sys_varsys WHERE codvar = 'NS_SERVICE_DIGIPOSTE_ID'
'SYS','NS_SERVICE_DIGIPOSTE_ID','digiposte','Texte','ID NS du service Digiposte'
##
SYS_VARSYS
==   
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR=('NAT_TRAIT_REGLE')
'SYS', 'NAT_TRAIT_REGLE', 'Z4REGLE', 'Texte', 'Nature de traitement d''une paie de réglé.'
##
SYS_VARSYS
==   
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR='CONTENT-SECURITY-POLICY'
'SYS', 'CONTENT-SECURITY-POLICY', '', 'Texte', 'Header http Content-Security-Policy permettant d''autoriser de charger l'application dans une iframe.Exemple "frame-ancestors https://*.adp.com."'
##
SYS_VARSYS
==   
DELETE SYS_VARSYS WHERE  MODULE='SYS' and CODVAR='X-FRAME-OPTION'
'SYS', 'X-FRAME-OPTION', '', 'Texte', 'Header http X-Frame-Option permettant d''autoriser de charger l'application dans une iframe.Exemple frame-ancestors "allow-from  http://mypc.ad.esi.adp.com:8000/"'
##
sys_varsys
==
DELETE FROM sys_varsys WHERE codvar = 'DOCSERV_VERSION' and module = 'STD'
'STD','DOCSERV_VERSION','2.00','Texte','version de docserver 2.0 ou 3.0'
##
sys_varsys
==
DELETE FROM SYS_VARSYS WHERE MODULE = 'SYS' AND CODVAR = 'SIGN_EXPORT_REP_ID'
'SYS','SIGN_EXPORT_REP_ID', NULL,'Texte','Contient l''ID de répertoire web pour le traitement d''export des documents signés.'
##
TAG_CHARSET=@€éèç
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('AFFICHAGE_NATURE_CNT_MODIF_CONTRACT') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','AFFICHAGE_NATURE_CNT_MODIF_CONTRACT','AFF','Affichage nature de contrat non saisissable',NULL,'1000',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£GEN_DATE_EFF","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£DSDCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat. Dans les autres cas, la nature de contrat ne peut pas être modifiée dans le WKF modif contract','V',NULL,'/*¿ * AFFICHAGE_NATURE_CNT_MODIF_CONTRACT :¿ * l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat. Dans les autres cas, la nature de contrat ne peut pas être modifiée dans le WKF modif contract¿ */¿¿if (DONNEE.GEN_DATE_EFF == DIC_ADM_CONTRAT.DSDCN) {¿}¿','l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('AFFICHAGE_NATURE_CNT_MODIF_CONTRACT') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','AFFICHAGE_NATURE_CNT_MODIF_CONTRACT','AFF','Affichage nature de contrat non saisissable',NULL,'1000',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£GEN_DATE_EFF","OPERATEUR":"EQ","OPERANDE_2":"DONNEE£DSDCN","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat. Dans les autres cas, la nature de contrat ne peut pas être modifiée dans le WKF modif contract','V',NULL,'/*¿ * AFFICHAGE_NATURE_CNT_MODIF_CONTRACT :¿ * l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat. Dans les autres cas, la nature de contrat ne peut pas être modifiée dans le WKF modif contract¿ */¿¿if (DONNEE.GEN_DATE_EFF == DIC_ADM_CONTRAT.DSDCN) {¿}¿','l''affichage nature de contrat est conditionné : saisissable uniquement si date d''effet est égale à la date de début du contrat'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('AFFICHAGE_NATURE_CNT_MODIF_CONTRACT') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','AFFICHAGE_NATURE_CNT_MODIF_CONTRACT','1',NULL,'DONNEE£GEN_DATE_EFFµDONNEE£DSDCNµEQ',NULL,NULL,'FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('AFFICHAGE_NATURE_CNT_MODIF_CONTRACT') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','AFFICHAGE_NATURE_CNT_MODIF_CONTRACT','1',NULL,'DONNEE£GEN_DATE_EFFµDONNEE£DSDCNµEQ',NULL,NULL,'FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DICTIONNAIRE
==
DELETE FROM META_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_MEDICAL_HISTO') AND COMPANY_ID='*'
##
META_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_MEDICAL_HISTO','Déclaratif médical histo',NULL,'O','M',NULL,'1030',NULL,NULL
##
REF_DICTIONNAIRE
==
DELETE FROM REF_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_MEDICAL_HISTO') AND COMPANY_ID='*'
##
REF_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_MEDICAL_HISTO','Déclaratif médical histo',NULL,'O','M',NULL,'1030',NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_CHS_HISTO_CTRL_DATE_EFFET','RD_CHS_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','CTL','Contrôle de la date d''effet sur déclaratif médical histo',NULL,'1030',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF","RESULTAT":"@TMPNB_CNT£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPNB_CNT£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@codeoperation£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Supprimer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle de la date d''effet sur déclaratif médical histo : elle doit être comprise dans la période contractuelle','N',NULL,'/*¿ * RD_CHS_HISTO_CTRL_DATE_EFFET :¿ * Contrôle de la date d''effet sur déclaratif médical histo : elle doit être comprise dans la période contractuelle¿ * Interdiction de supprimer l''unique histo¿ */¿¿TMPNB_CNT = TAB("REG_RD_DATE_EFF_IN_CONTRAT", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_DATE_EFF);¿if (TMPNB_CNT == 0) {¿	ERR("GENCNT51");¿}¿TMP1 = TAB("REG_RD_NB_HISTO_MEDICAL", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (codeoperation == "Supprimer" && TMP1 == 1) {¿	ERR("GENCHS12");¿}¿','Contrôle de la date d''effet sur déclaratif médical histo'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','AUT','Déclaratif médical historisé : valorisation de la date d''effet',NULL,'1030',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£GEN_DATE_EFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclaratif médical historisé : valorisation de la date d''effet. Lors de la validation on met à jour la date d''effet avec la date de début du contrat. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.','O',NULL,'/*¿ * RD_CHS_HISTO_VALO_DATE_EFFET :¿ * Déclaratif médical historisé : valorisation de la date d''effet. Lors de la validation on met à jour la date d''effet avec la date de début du contrat. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.¿ */¿¿TMP1 = TAB("REG_RD_NB_HISTO_MEDICAL", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP1 == 0) {¿	if (DIC_ADM_CONTRAT.DSDCN < DONNEE.GEN_DATE_EFF && DIC_ADM_CONTRAT_HISTO.DSSAD < DONNEE.GEN_DATE_EFF) {¿		DONNEE.GEN_DATE_EFF = vide;¿	}¿}¿','Déclaratif médical historisé : valorisation de la date d''effet'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_CHS_HISTO_CTRL_DATE_EFFET','RD_CHS_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','CTL','Contrôle de la date d''effet sur déclaratif médical histo',NULL,'1030',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF","RESULTAT":"@TMPNB_CNT£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPNB_CNT£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@codeoperation£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Supprimer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle de la date d''effet sur déclaratif médical histo : elle doit être comprise dans la période contractuelle','N',NULL,'/*¿ * RD_CHS_HISTO_CTRL_DATE_EFFET :¿ * Contrôle de la date d''effet sur déclaratif médical histo : elle doit être comprise dans la période contractuelle¿ * Interdiction de supprimer l''unique histo¿ */¿¿TMPNB_CNT = TAB("REG_RD_DATE_EFF_IN_CONTRAT", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_DATE_EFF);¿if (TMPNB_CNT == 0) {¿	ERR("GENCNT51");¿}¿TMP1 = TAB("REG_RD_NB_HISTO_MEDICAL", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (codeoperation == "Supprimer" && TMP1 == 1) {¿	ERR("GENCHS12");¿}¿','Contrôle de la date d''effet sur déclaratif médical histo'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','AUT','Déclaratif médical historisé : valorisation de la date d''effet',NULL,'1030',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"@vide£","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£GEN_DATE_EFF","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Déclaratif médical historisé : valorisation de la date d''effet. Lors de la validation on met à jour la date d''effet avec la date de début du contrat. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.','O',NULL,'/*¿ * RD_CHS_HISTO_VALO_DATE_EFFET :¿ * Déclaratif médical historisé : valorisation de la date d''effet. Lors de la validation on met à jour la date d''effet avec la date de début du contrat. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.¿ */¿¿TMP1 = TAB("REG_RD_NB_HISTO_MEDICAL", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP1 == 0) {¿	if (DIC_ADM_CONTRAT.DSDCN < DONNEE.GEN_DATE_EFF && DIC_ADM_CONTRAT_HISTO.DSSAD < DONNEE.GEN_DATE_EFF) {¿		DONNEE.GEN_DATE_EFF = vide;¿	}¿}¿','Déclaratif médical historisé : valorisation de la date d''effet'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_CHS_HISTO_CTRL_DATE_EFFET','RD_CHS_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF','@TMPNB_CNT£',NULL,NULL
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','2',NULL,'@TMPNB_CNT£µVALEUR£0µEQ',NULL,NULL,'3','4'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','3','££','ERR','CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','5',NULL,'@codeoperation£µVALEUR£SupprimerµEQµ@TMP1£µVALEUR£1µEQµ#ET#',NULL,NULL,'7','FIN'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','7','££','ERR','CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_CHS_HISTO_VALO_DATE_EFFET','2',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'3','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','3',NULL,'DONNEE£DSDCNµDONNEE£GEN_DATE_EFFµLTµDONNEE£DSSADµDONNEE£GEN_DATE_EFFµLTµ#ET#',NULL,NULL,'5','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','5','@vide£','VAL','££','DONNEE£GEN_DATE_EFF','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_CHS_HISTO_CTRL_DATE_EFFET','RD_CHS_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF','@TMPNB_CNT£',NULL,NULL
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','2',NULL,'@TMPNB_CNT£µVALEUR£0µEQ',NULL,NULL,'3','4'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','3','££','ERR','CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','5',NULL,'@codeoperation£µVALEUR£SupprimerµEQµ@TMP1£µVALEUR£1µEQµ#ET#',NULL,NULL,'7','FIN'
'*','RD_CHS_HISTO_CTRL_DATE_EFFET','7','££','ERR','CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_MEDICAL§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_CHS_HISTO_VALO_DATE_EFFET','2',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'3','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','3',NULL,'DONNEE£DSDCNµDONNEE£GEN_DATE_EFFµLTµDONNEE£DSSADµDONNEE£GEN_DATE_EFFµLTµ#ET#',NULL,NULL,'5','FIN'
'*','RD_CHS_HISTO_VALO_DATE_EFFET','5','@vide£','VAL','££','DONNEE£GEN_DATE_EFF','FIN','FIN'
##
DIC_MEDICAL_HISTO
=SQL=
DECLARE
  v_existTable NUMBER;
  v_existColumn NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_existTable FROM USER_TABLES WHERE TABLE_NAME='DIC_MEDICAL_HISTO';
  IF v_existTable = 1 THEN
    BEGIN
      EXECUTE IMMEDIATE 'ALTER TABLE DIC_MEDICAL_HISTO DROP PRIMARY KEY';
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
    SELECT COUNT(*) INTO v_existColumn FROM USER_TAB_COLS WHERE TABLE_NAME='DIC_MEDICAL_HISTO' AND COLUMN_NAME='NUMPAC';
    IF v_existColumn = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE DIC_MEDICAL_HISTO ADD (NUMPAC VARCHAR2(6))';
    END IF;
    SELECT COUNT(*) INTO v_existColumn FROM USER_TAB_COLS WHERE TABLE_NAME='DIC_MEDICAL_HISTO' AND COLUMN_NAME='PACMAT';
    IF v_existColumn = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE DIC_MEDICAL_HISTO ADD (PACMAT VARCHAR2(8))';
    END IF;
    SELECT COUNT(*) INTO v_existColumn FROM USER_TAB_COLS WHERE TABLE_NAME='DIC_MEDICAL_HISTO' AND COLUMN_NAME='DATE_EFF';
    IF v_existColumn = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE DIC_MEDICAL_HISTO ADD (DATE_EFF DATE)';
    END IF;
    EXECUTE IMMEDIATE 'UPDATE DIC_MEDICAL_HISTO SET (NUMPAC,PACMAT)=(SELECT NUMPAC,PACMAT FROM SECUMATRIC WHERE SECUMATRIC.MATRIC=DIC_MEDICAL_HISTO.MATRIC) WHERE NUMPAC IS NULL OR PACMAT IS NULL';
    EXECUTE IMMEDIATE 'DELETE FROM DIC_MEDICAL_HISTO WHERE NUMPAC IS NULL OR PACMAT IS NULL';
    EXECUTE IMMEDIATE 'UPDATE DIC_MEDICAL_HISTO SET DATE_EFF=(SELECT DATE_EFF_CONTRAT FROM SECUPACMAT WHERE SECUPACMAT.NUMPAC=DIC_MEDICAL_HISTO.NUMPAC AND SECUPACMAT.PACMAT=DIC_MEDICAL_HISTO.PACMAT) WHERE DATE_EFF IS NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE DIC_MEDICAL_HISTO ADD PRIMARY KEY (NUMPAC, PACMAT, DATE_EFF)';
  END IF;
EXCEPTION WHEN OTHERS THEN NULL;
END;
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_COMM_COLLAB_TRP') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_COMM_COLLAB_TRP','Commentaire collaborateur demande remb TRP UX','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'1024',NULL,NULL,'O',NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_COMM_COLLAB_TRP') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_COMM_COLLAB_TRP','Commentaire collaborateur demande remb TRP UX','DIC_DONNEES_VIRTUELLES','X','3999',NULL,NULL,NULL,NULL,'Z','O',NULL,'1024',NULL,NULL,'O',NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_COMM_COLLAB_TRP') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_COMM_COLLAB_TRP','*','Commentaire collaborateur demande remb TRP UX','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_COMM_COLLAB_TRP','RD_UX_WKF_VALID_REMB_TRP','Commentaire collaborateur','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_COMM_COLLAB_TRP') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_COMM_COLLAB_TRP','*','Commentaire collaborateur demande remb TRP UX','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_COMM_COLLAB_TRP','RD_UX_WKF_VALID_REMB_TRP','Commentaire collaborateur','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
ADM_CREATE_NOM_PAGE
==
CALL ADM_CREATE_NOM_PAGE(99,'Superviser les demandes','Modules/Workflow/MesDemandesWkfExpert.jsp',null,'true')
##
TGE_CREATE_TRIGGER
=SQL=
BEGIN
  FOR TABLE_DIC IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME LIKE 'DIC%' AND NOT REGEXP_LIKE(TABLE_NAME,'DIC.*_[0-9]+')) LOOP
    BEGIN
      TGE_CREATE_TRIGGER(TABLE_DIC.TABLE_NAME);
    EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;
END;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  IF( p_periode_paie     <= periode_paie_en_cours) THEN
    IF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
 		IF w_pacmat IS NOT NULL THEN
 			req              := req||'AND NVL(R.PACMAT, P.PACMAT) = '''||w_pacmat||'''';
 		END IF;
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
			EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);
		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPADTE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE ';
			req              := req||' WHERE ID IN ( ';
			req            	 := req|| ' select INC.ID from ( '; 
			req            	 := req|| ' select I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''') as PERIODE, MIN(P.MOIS_PAIE) as MIN_MOIS_PAIE from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| ' LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| ' ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| ' AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| ' AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| ' WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| ' AND (P.PACMAT = '''''||w_pacmat||''''' ) ';
			END IF;
			req            	 := req|| ' GROUP BY I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''')) INC '; 
			req            	 := req|| ' WHERE  '; 
			req            	 := req|| ' (INC.PERIODE != INC.MIN_MOIS_PAIE  '; 
			req            	 := req|| ' OR MIN_MOIS_PAIE IS NULL) '; 
			req := req ||' ) '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('PersonImmigrationDocument0IssuingPartyNameCodeCodeValue','PersonLegalAddressCityName','PersonOtherPersonalAddressesCityName')
'PersonImmigrationDocument0IssuingPartyNameCodeCodeValue','issuingPartyImmDoc'
'PersonLegalAddressCityName','bureauDistribEtrFiscal'
'PersonOtherPersonalAddressesCityName','bureauDistribEtrPerso'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE (DATA_NAME_MP='PersonLegalAddressPostalCode' AND DATA_NAME_MP_ALP='postalCodeEtrFiscal') OR (DATA_NAME_MP='PersonOtherPersonalAddressesPostalCode' AND DATA_NAME_MP_ALP='postalCodeEtrPerso') OR (DATA_NAME_MP='DependentsPersonSocialInsurancePrograms1CoveredIndicator' AND DATA_NAME_MP_ALP='dependentConjointHealthInsuranceCoveredIndicator')
'PersonLegalAddressPostalCode','postalCodeEtrFiscal'
'PersonOtherPersonalAddressesPostalCode','postalCodeEtrPerso'
'DependentsPersonSocialInsurancePrograms1CoveredIndicator','dependentConjointHealthInsuranceCoveredIndicator'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_EKEY','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_IDENTIFIANT','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAT','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAYEUR','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALFIX','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALNET')
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_EKEY','MDEkey'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_IDENTIFIANT','MDIdentifiant'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAT','MDPat'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAYEUR','MDPayeur'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALFIX','MDSalFix'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALNET','MDSalNet'
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'ATTGES'
'ATTGES','Attente calcul Gestil'
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'GESTIL'
'GESTIL','Demande d''extraction des données GESTIL'
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'ATTGES'
'ATTGES','Attente des données de paie GESTIL'
##
TAG_CHARSET=@€éèç
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_DERNIER_ENVOI)','Purge de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_DERNIER_ENVOI  WHERE NUMPAC = P_NUMPAC; 

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_DERNIER_ENVOI)','Remplissage de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_DERNIER_ENVOI select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from 
(SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
group by d.numpac,d.pacmat,d.paiezad);

DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_DERNIER_ENVOI',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);

 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );

 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='H',ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm')
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 AND b.traite      IS NULL
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_DONNEES_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 

 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION <
 ( SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    where z.pacmat       =e.pacmat
    AND z.numpac       =e.numpac );
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');

 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (  SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    WHERE z.numpac       =e.numpac
    AND z.PAIEZAD      =e.paiezad
    )  and PERIODE<=p_PERIODEENCOURS ;
 
 
 
 IF p_histoIP='N' THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<(SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
  where z.numpac  =e.numpac
  AND   z.PAIEZAD =e.paiezad)
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 END IF;
 
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 ( 
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;

 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 

 WHERE z.numpac       =e.numpac
 AND  z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 if P_DEB_RETRO is null OR to_date(p_PERIODEENCOURS,'YYYYMM') < to_date(P_DEB_RETRO,'YYYYMM') then
 	--Recalcul des période de recueil avec les photos de dach et dac avant de changer de mois, pour corriger les saisies tardives
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, p_PERIODEENCOURS, NULL, 'O');
 END IF;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
  
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
  --Historiser les periodes rétro max par pacmat 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
  union all
  select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS) 
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if P_DEB_RETRO is not null AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_RETRO,'YYYYMM') then

 DELETE from GAP_RETRO_MATRIC z where z.numpac=p_numpac and not exists (select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;

 DELETE from TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat) ;

 DELETE from GAP_SELECTION_RETRO z where  z.numpac=p_numpac   and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insc Retro RELIQ)','Début d inscription retro des tables RELIQ_  pour le numpac : '||P_NUMPAC);
 tge_retro_inscription_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insc Retro RELIQ)','Fin d inscription retro des tables RELIQ_ pour le numpac : '||P_NUMPAC);
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- recalcul du flag SECUPACMAT.PRESENT_FICHIER_PAIE
 R_PRESENT_FICHIER_PAIE( p_numpac , null );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@€éèç
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_DERNIER_ENVOI)','Purge de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_DERNIER_ENVOI  WHERE NUMPAC = P_NUMPAC; 

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_DERNIER_ENVOI)','Remplissage de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_DERNIER_ENVOI select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from 
(SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
group by d.numpac,d.pacmat,d.paiezad);

DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_DERNIER_ENVOI',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);

 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );

 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='H',ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm')
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 AND b.traite      IS NULL
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_DONNEES_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 

 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION <
 ( SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    where z.pacmat       =e.pacmat
    AND z.numpac       =e.numpac );
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');

 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (  SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
    WHERE z.numpac       =e.numpac
    AND z.PAIEZAD      =e.paiezad
    )  and PERIODE<=p_PERIODEENCOURS ;
 
 
 
 IF p_histoIP='N' THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<(SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
  where z.numpac  =e.numpac
  AND   z.PAIEZAD =e.paiezad)
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 END IF;
 
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 ( 
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;

 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e 

 WHERE z.numpac       =e.numpac
 AND  z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 if P_DEB_RETRO is null OR to_date(p_PERIODEENCOURS,'YYYYMM') < to_date(P_DEB_RETRO,'YYYYMM') then
 	--Recalcul des période de recueil avec les photos de dach et dac avant de changer de mois, pour corriger les saisies tardives
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, p_PERIODEENCOURS, NULL, NULL, 'O');
 END IF;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
  
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
  --Historiser les periodes rétro max par pacmat 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
  union all
  select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS) 
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if P_DEB_RETRO is not null AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_RETRO,'YYYYMM') then

 DELETE from GAP_RETRO_MATRIC z where z.numpac=p_numpac and not exists (select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;

 DELETE from TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat) ;

 DELETE from GAP_SELECTION_RETRO z where  z.numpac=p_numpac   and not exists(select 1 from GAP_TRT_DERNIER_ENVOI e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insc Retro RELIQ)','Début d inscription retro des tables RELIQ_  pour le numpac : '||P_NUMPAC);
 tge_retro_inscription_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insc Retro RELIQ)','Fin d inscription retro des tables RELIQ_ pour le numpac : '||P_NUMPAC);
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- recalcul du flag SECUPACMAT.PRESENT_FICHIER_PAIE
 R_PRESENT_FICHIER_PAIE( p_numpac , null );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_RETRO
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RETRO(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  champDateEffetRetro VARCHAR2(50);
  conditionRetro CLOB;
  procRetroPaiezadCodeChrono VARCHAR(4000);

  CURSOR cur_mapdoRetro IS
    SELECT LISTAGG(numpac,',') WITHIN GROUP (ORDER BY numpac) as numpacs, donneegxp, clause_date_eff_retro, data_type from (
      SELECT DISTINCT dz.numpac, md.donneegxp, REGEXP_REPLACE(mddr.clause_date_eff_retro,':(new|old)','v_lig\1',1,0,'i') as clause_date_eff_retro, utc.data_type
      FROM tge_ref_dicoz dz 
      INNER JOIN TGE_REF_MAPDO_RESOLVED md ON md.element = dz.element AND md.numpac = dz.numpac
      LEFT JOIN tge_ref_mapdo_dteff_retro mddr ON mddr.element = dz.element AND (mddr.numpac = dz.numpac OR (mddr.numpac = '*' AND NOT EXISTS (SELECT 1 FROM tge_ref_mapdo_dteff_retro zdr WHERE zdr.numpac= dz.numpac AND zdr.element = dz.element)))
      ,user_tab_cols utc
      WHERE 
        utc.column_name=md.donneegxp and utc.table_name=nom_table 
        and dz.calcul_retro = '1' 
        AND TABLEGXP IN (
          SELECT tableparam 
          FROM tge_ref_mapta 
          WHERE tablephy = NOM_TABLE
        )
    )
    GROUP BY donneegxp, clause_date_eff_retro, data_type
    ORDER BY donneegxp, clause_date_eff_retro;

  lig_mapdoRetro cur_mapdoRetro%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_RETRO_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_RETRO_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew '||NOM_TABLE||'%ROWTYPE, v_numpac VARCHAR2, v_pacmat VARCHAR2, v_paiezad IN OUT VARCHAR2, v_retro IN OUT VARCHAR2, tabRefPacByNumpac IN OUT ALIM_IDX.T_REF_PAC_BY_NUMPAC) IS 
 v_matric VARCHAR2(32);
 existNumpacPaizad NUMBER; 
 V_DE_SSAAMM               VARCHAR2(6); 
 V_DE_SSAAMM_TMP           VARCHAR2(6); 
 V_DATE_EFFET_RETRO        DATE;
 V_DE_SSAAMM_DEFAULT	   VARCHAR2(6); 
 V_DATE_LIMITE_RETRO       VARCHAR2(6); 
 V_DEB_RETRO               VARCHAR2(6); 
 V_DEB_HISTO_RETRO         VARCHAR2(6); 
 V_PERIODEENCOURS          VARCHAR2(6); 
 V_CODE_CHRONO             VARCHAR2(6); 
 v_nb_mois_retro           NUMBER; 
 V_DATE_EFF                VARCHAR2(6); 

BEGIN
 v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC);
';

  IF NOM_TABLE           = 'DIC_ADM_CONTRAT' THEN
    champDateEffetRetro := 'DSDCN' ;
  ELSE
    BEGIN
      SELECT a.column_name
      INTO champDateEffetRetro
      FROM SYS.USER_CONS_COLUMNS a, USER_TAB_COLUMNS b
      WHERE 
        a.table_name = NOM_TABLE
        AND a.table_name=b.table_name
        AND a.column_name=b.column_name
        AND b.data_type = 'DATE'
        AND constraint_name IN (
          SELECT c.constraint_name
          FROM user_constraints c
          WHERE c.table_name =a.table_name AND CONSTRAINT_TYPE='P'
        );
    EXCEPTION
      WHEN OTHERS THEN
        champDateEffetRetro := NULL;
    END;
  END IF;

  IF champDateEffetRetro IS NULL THEN
  	RETURN NULL;
  END IF;

  procRetroPaiezadCodeChrono := NULL;
  IF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    -- Traitement spécifique pour DIC_ADM_CONTRAT_HISTO : dans un trigger, il n'est pas possible de lire la table en cours de modification
    -- De toute façon il n'y a pas besoin : on a le paiezad dans le v_ligNew/v_ligOld, il faut juste lire DIC_ADM_CONTRAT_SITU pour récupérer le CODE_CHRONO
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 IF DELETING THEN
  V_PAIEZAD := v_ligOld.PAIEZAD;
 ELSE
  V_PAIEZAD := v_ligNew.PAIEZAD;
 END IF;
 SELECT dacs.code_chrono 
 INTO V_CODE_CHRONO 
 FROM dic_adm_contrat_situ dacs 
 WHERE dacs.numpac = V_NUMPAC AND dacs.pacmat = V_PACMAT AND dacs.numcnt = NVL(v_ligNew.NUMCNT,v_ligOld.NUMCNT) AND dacs.paiezad = V_PAIEZAD; 
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END;
';
  ELSE
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 SELECT dacs.code_chrono, dach.paiezad, TO_CHAR(dach.DATE_EFF, ''YYYYMM'') 
 INTO V_CODE_CHRONO, V_PAIEZAD, V_DATE_EFF 
 FROM dic_adm_contrat_histo dach , dic_adm_contrat_situ dacs 
 WHERE dach.numpac = V_NUMPAC AND dach.pacmat = V_PACMAT AND dach.matric = v_matric AND dacs.numpac = dach.numpac AND dacs.pacmat = dach.pacmat AND dacs.numcnt = dach.numcnt AND dacs.paiezad = dach.paiezad AND dach.date_eff = (
  select min(z.date_eff) 
  from dic_adm_contrat_histo z 
  where z.matric = dach.matric AND z.date_sortie_sit_bo >= NVL(v_ligNew.' || champDateEffetRetro ||',v_ligOld.' || champDateEffetRetro || ') 
 );  

 -- La période rétro doit être >= à la 1ère date d''effet du salarié
 IF (V_DE_SSAAMM < V_DATE_EFF) THEN
  V_DE_SSAAMM := V_DATE_EFF; 
 END IF;
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END; 
';
  END IF;

  conditionRetro  :=NULL;
  OPEN cur_mapdoRetro;
  LOOP FETCH cur_mapdoRetro INTO lig_mapdoRetro ;
  
    EXIT WHEN cur_mapdoRetro%NOTFOUND;

    IF lig_mapdoRetro.donneegxp IS NOT NULL THEN
      conditionRetro := conditionRetro||'
IF ';
      IF NOT lig_mapdoRetro.numpacs = '*' THEN
        conditionRetro := conditionRetro||'INSTR('''||lig_mapdoRetro.numpacs||''',v_numpac)>0 AND ';
      END IF;

      vFunctionCompare := 'IS_EQ';
      vFunctionCompareParam3 := NULL;
      IF lig_mapdoRetro.data_type = 'DATE' THEN
        vFunctionCompare := 'IS_EQ_DATE';
        vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
      END IF;
      conditionRetro  :=conditionRetro||' NOT '||vFunctionCompare||'(v_ligNew.'||lig_mapdoRetro.donneegxp||',v_ligOld.'||lig_mapdoRetro.donneegxp||vFunctionCompareParam3||') THEN 
 v_retro :=''O''; ';
      IF lig_mapdoRetro.clause_date_eff_retro IS NULL THEN
        conditionRetro :=conditionRetro||' 	
 V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_DEFAULT, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_DEFAULT)); ';
      ELSE
        conditionRetro := conditionRetro || ' 
 ' || lig_mapdoRetro.clause_date_eff_retro || '; 
V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_TMP, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_TMP));	';
      END IF;
      conditionRetro := conditionRetro || ' 
END IF; ';
    END IF;
  END LOOP;
  CLOSE cur_mapdoRetro;

  IF conditionRetro IS NULL THEN
    RETURN NULL;
  END IF;

  v_retour := v_retour||' 
 IF NVL(v_retro,''N'') = ''Z'' THEN 
  RETURN; 
 END IF;

 IF NOT tabRefPacByNumpac.exists(V_NUMPAC) THEN
  SELECT * 
  INTO tabRefPacByNumpac(V_NUMPAC) 
  FROM TGE_REF_PAC 
  WHERE NUMPAC = V_NUMPAC; 
 END IF;
 V_PERIODEENCOURS := tabRefPacByNumpac(V_NUMPAC).PERIODEENCOURS;
 V_DEB_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_RETRO;
 V_DEB_HISTO_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_HISTO_RETRO;
 V_NB_MOIS_RETRO := NVL(tabRefPacByNumpac(V_NUMPAC).NB_MOIS_RETRO, 0);

 IF V_PERIODEENCOURS < V_DEB_RETRO OR V_DEB_RETRO IS NULL THEN 
  RETURN; 
 END IF;

 -- La période rétro doit être >= à : 
 -- - La date de début des histos de rétro 
 -- - La période en cours - le nombre de mois de rétro 
 -- On prend donc la plus grande de ces 2 dates + la date d''effet
 IF DELETING THEN
  V_DATE_EFFET_RETRO := v_ligOld.'||champDateEffetRetro||';
 ELSE
  V_DATE_EFFET_RETRO := v_ligNew.'||champDateEffetRetro||';
 END IF;
 V_DE_SSAAMM_DEFAULT       := GREATEST(TO_CHAR(V_DATE_EFFET_RETRO ,''YYYYMM''),V_DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(to_date(V_PERIODEENCOURS,''YYYYMM''),-V_NB_MOIS_RETRO),''YYYYMM''));
 V_DE_SSAAMM := NULL;

 IF V_DE_SSAAMM_DEFAULT >= V_PERIODEENCOURS THEN 
  RETURN; 
 END IF;

 v_retro :=''N''; 
 IF (INSERTING and v_ligOld.MATRIC IS NULL) OR (DELETING and v_ligNew.MATRIC IS NULL) THEN 
  -- En insertion, si on n''a pas récupéré de ''OLD'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  -- En suppression, si on n''a pas récupéré de ''NEW'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  v_retro:=''O''; 
  V_DE_SSAAMM := V_DE_SSAAMM_DEFAULT;
 ELSE 
  -- Sinon, on compare ''OLD'' et ''NEW''
  '|| conditionRetro ||'
 END IF; -- FIN updating

 IF NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 '|| procRetroPaiezadCodeChrono ||' 
 IF V_DE_SSAAMM IS NULL OR V_DE_SSAAMM >= V_PERIODEENCOURS OR NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 -- On positionne une valeur reconnaissable pour savoir qu''on a déjà trouvé notre bonheur 
 -- Pas la peine de refaire tous les select pour les autres couples NUMPAC/PACMAT 
 v_retro := ''Z''; 
 TGE_RETRO_INSCRIPTION(V_NUMPAC, V_PACMAT, V_DE_SSAAMM, V_CODE_CHRONO, V_PAIEZAD, ''' || NOM_TABLE ||'''); 
END CHECK_RETRO_'||NOM_TABLE||';';

  EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour :=  '
-- DEBUT TRAITEMENT RETRO
CHECK_RETRO_'||NOM_TABLE||'(v_ligOld, v_ligNew, v_numpac, v_pacmat, v_paiezad, v_retro, tabRefPacByNumpac);
-- FIN TRAITEMENT RETRO';
 
  return v_retour;
END TGE_CREATE_TRIGGER_RETRO;
##
TGE_CREATE_TRIGGER
=SQL=
BEGIN
  FOR TABLE_DIC IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME LIKE 'DIC%' AND NOT REGEXP_LIKE(TABLE_NAME,'DIC.*_[0-9]+')) LOOP
    BEGIN
      TGE_CREATE_TRIGGER(TABLE_DIC.TABLE_NAME);
    EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;
END;
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'GESTIL'
'GESTIL','Demande d''extraction des données GESTIL'
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'ATTGES'
'ATTGES','Attente des données de paie GESTIL'
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER_RETRO
=SQL=
CREATE OR REPLACE FUNCTION TGE_CREATE_TRIGGER_RETRO(NOM_TABLE IN VARCHAR2)
RETURN CLOB
AS
  v_retour CLOB;

  champDateEffetRetro VARCHAR2(50);
  conditionRetro CLOB;
  procRetroPaiezadCodeChrono VARCHAR(4000);

  CURSOR cur_mapdoRetro IS
    SELECT LISTAGG(numpac,',') WITHIN GROUP (ORDER BY numpac) as numpacs, donneegxp, clause_date_eff_retro, data_type from (
      SELECT DISTINCT dz.numpac, md.donneegxp, REGEXP_REPLACE(mddr.clause_date_eff_retro,':(new|old)','v_lig\1',1,0,'i') as clause_date_eff_retro, utc.data_type
      FROM tge_ref_dicoz dz 
      INNER JOIN TGE_REF_MAPDO_RESOLVED md ON md.element = dz.element AND md.numpac = dz.numpac
      LEFT JOIN tge_ref_mapdo_dteff_retro mddr ON mddr.element = dz.element AND (mddr.numpac = dz.numpac OR (mddr.numpac = '*' AND NOT EXISTS (SELECT 1 FROM tge_ref_mapdo_dteff_retro zdr WHERE zdr.numpac= dz.numpac AND zdr.element = dz.element)))
      ,user_tab_cols utc
      WHERE 
        utc.column_name=md.donneegxp and utc.table_name=nom_table 
        and dz.calcul_retro = '1' 
        AND TABLEGXP IN (
          SELECT tableparam 
          FROM tge_ref_mapta 
          WHERE tablephy = NOM_TABLE
        )
    )
    GROUP BY donneegxp, clause_date_eff_retro, data_type
    ORDER BY donneegxp, clause_date_eff_retro;

  lig_mapdoRetro cur_mapdoRetro%rowtype;
  vFunctionCompare VARCHAR2(10);
  vFunctionCompareParam3 VARCHAR2(50);

BEGIN

  BEGIN EXECUTE_IMMEDIATE_STRING( 'DROP PROCEDURE CHECK_RETRO_'||NOM_TABLE,0); EXCEPTION WHEN OTHERS THEN NULL; END;

  v_retour := 'CREATE OR REPLACE PROCEDURE CHECK_RETRO_'||NOM_TABLE||'(v_ligOld '||NOM_TABLE||'%ROWTYPE, v_ligNew '||NOM_TABLE||'%ROWTYPE, v_numpac VARCHAR2, v_pacmat VARCHAR2, v_paiezad IN OUT VARCHAR2, v_retro IN OUT VARCHAR2, tabRefPacByNumpac IN OUT ALIM_IDX.T_REF_PAC_BY_NUMPAC) IS 
 v_matric VARCHAR2(32);
 existNumpacPaizad NUMBER; 
 V_DE_SSAAMM               VARCHAR2(6); 
 V_DE_SSAAMM_TMP           VARCHAR2(6); 
 V_DATE_EFFET_RETRO        DATE;
 V_DE_SSAAMM_DEFAULT	   VARCHAR2(6); 
 V_DATE_LIMITE_RETRO       VARCHAR2(6); 
 V_DEB_RETRO               VARCHAR2(6); 
 V_DEB_HISTO_RETRO         VARCHAR2(6); 
 V_PERIODEENCOURS          VARCHAR2(6); 
 V_CODE_CHRONO             VARCHAR2(6); 
 v_nb_mois_retro           NUMBER; 
 V_DATE_EFF                VARCHAR2(6); 

BEGIN
 v_matric := NVL(v_ligNew.MATRIC,v_ligOld.MATRIC);
';

  IF NOM_TABLE           = 'DIC_ADM_CONTRAT' THEN
    champDateEffetRetro := 'DSDCN' ;
  ELSE
    BEGIN
      SELECT a.column_name
      INTO champDateEffetRetro
      FROM SYS.USER_CONS_COLUMNS a, USER_TAB_COLUMNS b
      WHERE 
        a.table_name = NOM_TABLE
        AND a.table_name=b.table_name
        AND a.column_name=b.column_name
        AND b.data_type = 'DATE'
        AND constraint_name IN (
          SELECT c.constraint_name
          FROM user_constraints c
          WHERE c.table_name =a.table_name AND CONSTRAINT_TYPE='P'
        );
    EXCEPTION
      WHEN OTHERS THEN
        champDateEffetRetro := NULL;
    END;
  END IF;

  IF champDateEffetRetro IS NULL THEN
  	RETURN NULL;
  END IF;

  procRetroPaiezadCodeChrono := NULL;
  IF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
    -- Traitement spécifique pour DIC_ADM_CONTRAT_HISTO : dans un trigger, il n'est pas possible de lire la table en cours de modification
    -- De toute façon il n'y a pas besoin : on a le paiezad dans le v_ligNew/v_ligOld, il faut juste lire DIC_ADM_CONTRAT_SITU pour récupérer le CODE_CHRONO
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 IF DELETING THEN
  V_PAIEZAD := v_ligOld.PAIEZAD;
 ELSE
  V_PAIEZAD := v_ligNew.PAIEZAD;
 END IF;
 SELECT dacs.code_chrono 
 INTO V_CODE_CHRONO 
 FROM dic_adm_contrat_situ dacs 
 WHERE dacs.numpac = V_NUMPAC AND dacs.pacmat = V_PACMAT AND dacs.numcnt = NVL(v_ligNew.NUMCNT,v_ligOld.NUMCNT) AND dacs.paiezad = V_PAIEZAD; 
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END;
';
  ELSE
    procRetroPaiezadCodeChrono := ' 
BEGIN 
 SELECT dacs.code_chrono, dach.paiezad, TO_CHAR(dach.DATE_EFF, ''YYYYMM'') 
 INTO V_CODE_CHRONO, V_PAIEZAD, V_DATE_EFF 
 FROM dic_adm_contrat_histo dach , dic_adm_contrat_situ dacs 
 WHERE dach.numpac = V_NUMPAC AND dach.pacmat = V_PACMAT AND dach.matric = v_matric AND dacs.numpac = dach.numpac AND dacs.pacmat = dach.pacmat AND dacs.numcnt = dach.numcnt AND dacs.paiezad = dach.paiezad AND dach.date_eff = (
  select min(z.date_eff) 
  from dic_adm_contrat_histo z 
  where z.matric = dach.matric AND z.date_sortie_sit_bo >= NVL(v_ligNew.' || champDateEffetRetro ||',v_ligOld.' || champDateEffetRetro || ') 
 );  

 -- La période rétro doit être >= à la 1ère date d''effet du salarié
 IF (V_DE_SSAAMM < V_DATE_EFF) THEN
  V_DE_SSAAMM := V_DATE_EFF; 
 END IF;
EXCEPTION 
 WHEN OTHERS THEN 
  v_retro := ''N''; 
END; 
';
  END IF;

  conditionRetro  :=NULL;
  OPEN cur_mapdoRetro;
  LOOP FETCH cur_mapdoRetro INTO lig_mapdoRetro ;
  
    EXIT WHEN cur_mapdoRetro%NOTFOUND;

    IF lig_mapdoRetro.donneegxp IS NOT NULL THEN
      conditionRetro := conditionRetro||'
IF ';
      IF NOT lig_mapdoRetro.numpacs = '*' THEN
        conditionRetro := conditionRetro||'INSTR('''||lig_mapdoRetro.numpacs||''',v_numpac)>0 AND ';
      END IF;

      vFunctionCompare := 'IS_EQ';
      vFunctionCompareParam3 := NULL;
      IF lig_mapdoRetro.data_type = 'DATE' THEN
        vFunctionCompare := 'IS_EQ_DATE';
        vFunctionCompareParam3 := ',''yyyymmddhh24miss''';
      END IF;
      conditionRetro  :=conditionRetro||' NOT '||vFunctionCompare||'(v_ligNew.'||lig_mapdoRetro.donneegxp||',v_ligOld.'||lig_mapdoRetro.donneegxp||vFunctionCompareParam3||') THEN 
 v_retro :=''O''; ';
      IF lig_mapdoRetro.clause_date_eff_retro IS NULL THEN
        conditionRetro :=conditionRetro||' 	
 V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_DEFAULT, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_DEFAULT)); ';
      ELSE
        conditionRetro := conditionRetro || ' 
 ' || lig_mapdoRetro.clause_date_eff_retro || '; 
V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_TMP, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_TMP));	';
      END IF;
      conditionRetro := conditionRetro || ' 
END IF; ';
    END IF;
  END LOOP;
  CLOSE cur_mapdoRetro;

  IF conditionRetro IS NULL THEN
    RETURN NULL;
  END IF;

  v_retour := v_retour||' 
 IF NVL(v_retro,''N'') = ''Z'' THEN 
  RETURN; 
 END IF;

 IF NOT tabRefPacByNumpac.exists(V_NUMPAC) THEN
  SELECT * 
  INTO tabRefPacByNumpac(V_NUMPAC) 
  FROM TGE_REF_PAC 
  WHERE NUMPAC = V_NUMPAC; 
 END IF;
 V_PERIODEENCOURS := tabRefPacByNumpac(V_NUMPAC).PERIODEENCOURS;
 V_DEB_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_RETRO;
 V_DEB_HISTO_RETRO := tabRefPacByNumpac(V_NUMPAC).DEB_HISTO_RETRO;
 V_NB_MOIS_RETRO := NVL(tabRefPacByNumpac(V_NUMPAC).NB_MOIS_RETRO, 0);

 IF V_PERIODEENCOURS < V_DEB_RETRO OR V_DEB_RETRO IS NULL THEN 
  RETURN; 
 END IF;

 -- La période rétro doit être >= à : 
 -- - La date de début des histos de rétro 
 -- - La période en cours - le nombre de mois de rétro 
 -- On prend donc la plus grande de ces 2 dates + la date d''effet
 IF DELETING THEN
  V_DATE_EFFET_RETRO := v_ligOld.'||champDateEffetRetro||';
 ELSE
  V_DATE_EFFET_RETRO := v_ligNew.'||champDateEffetRetro||';
 END IF;
 V_DE_SSAAMM_DEFAULT       := GREATEST(TO_CHAR(V_DATE_EFFET_RETRO ,''YYYYMM''),V_DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(to_date(V_PERIODEENCOURS,''YYYYMM''),-V_NB_MOIS_RETRO),''YYYYMM''));
 V_DE_SSAAMM := NULL;

 IF V_DE_SSAAMM_DEFAULT >= V_PERIODEENCOURS THEN 
  RETURN; 
 END IF;

 v_retro :=''N''; 
 IF (INSERTING and v_ligOld.MATRIC IS NULL) OR (DELETING and v_ligNew.MATRIC IS NULL) THEN 
  -- En insertion, si on n''a pas récupéré de ''OLD'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  -- En suppression, si on n''a pas récupéré de ''NEW'' (seulement dans le cas de DIC_ADM_CONTRAT_HISTO), on inscrit forcément en rétro
  v_retro:=''O''; 
  V_DE_SSAAMM := V_DE_SSAAMM_DEFAULT;
 ELSE 
  -- Sinon, on compare ''OLD'' et ''NEW''
  '|| conditionRetro ||'
 END IF; -- FIN updating

 IF NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 '|| procRetroPaiezadCodeChrono ||' 
 IF V_DE_SSAAMM IS NULL OR V_DE_SSAAMM >= V_PERIODEENCOURS OR NOT v_retro = ''O'' THEN 
  RETURN; 
 END IF;

 -- On positionne une valeur reconnaissable pour savoir qu''on a déjà trouvé notre bonheur 
 -- Pas la peine de refaire tous les select pour les autres couples NUMPAC/PACMAT 
 v_retro := ''Z''; 
 TGE_RETRO_INSCRIPTION(V_NUMPAC, V_PACMAT, V_DE_SSAAMM, V_CODE_CHRONO, V_PAIEZAD, ''' || NOM_TABLE ||'''); 
END CHECK_RETRO_'||NOM_TABLE||';';

  EXECUTE_IMMEDIATE_STRING( v_retour,0);

  v_retour :=  '
-- DEBUT TRAITEMENT RETRO
CHECK_RETRO_'||NOM_TABLE||'(v_ligOld, v_ligNew, v_numpac, v_pacmat, v_paiezad, v_retro, tabRefPacByNumpac);
-- FIN TRAITEMENT RETRO';
 
  return v_retour;
END TGE_CREATE_TRIGGER_RETRO;
##
TAG_CHARSET=@€éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
 MatEcrit          VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --éliminer les doublons même matricule déjà écrit et même valeur
    IF MatEcrit=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
      RETURN;
    END IF;
    --on a détecté au moins une différence
    MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    --éliminer le passé et pour les historiques les doublons déjà écrits
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1
      AND ( coldteffet <> 'a.DATE_EFF' 
      OR MatARenvoyer<>MatEcrit OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') )
    THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=tab.DTEFFET;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
    IF coldteffet = 'a.DATE_EFF' THEN
    --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet.
    MatEcrit:=MatARenvoyer;
    --mémoriser la valeur de cette colonne historique
    oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
    END IF;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde s’il existe déjà dans GAP_TRT
  --une ligne pour N° d’échange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    preclemati     VARCHAR2(20);
    preclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
    coldteffet:='d.DSDCN';
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
      coldteffet :='a.DSDCN';
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF p_TABLETYPE='H2' AND p_nomTable ='DIC_PERIODES_RECUEIL_HIS' THEN
      clwhereDate :=clwhereDate||' and to_char(a.'||coldatecle||',''yyyymm'')='''||p_periode||'''';
      END IF;
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable='DIC_ADM_CONTRAT' THEN
      --pour D_A_C on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
          clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        clfrom       :=clfrom||'SELECT C.NUMPAC, C.MATRIC, C.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACH.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY C.NUMPAC, C.MATRIC, C.PACMAT,DACH.PAIEZAD )) d WHERE '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup caluse where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        END IF;
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            MatEcrit     :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            preclemati   :='#';
            preclematj   :='#';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                --constitution de la clé "matricule courant" partie GAP

                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab1cle :=chr(255);
              END IF;
              IF j        <= tab2.last THEN
                --constitution de la clé "matricule" courant partie PHOTO

                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
                --clé de comparaison = high_value pour faciliter les comparaisons
                tab2cle :=chr(255);
              END IF;
              --Tables avec historiques comme D_A_C_H : la clé contient des dates d'effet donc il faut adapter l'appareillage
              IF coldteffet='a.DATE_EFF' THEN
                IF i <= tab1.last AND curclemati=MatARenvoyer THEN
                  --matricule déjà détecté en différence histo, on envoie tous les historiques. Les doublons sont éliminés automatiquement.
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif j <= tab2.last AND curclematj=MatARenvoyer THEN
                  --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle < tab2cle and preclemati<>curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et c'était le 1er histo du matricule : création
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle < tab2cle AND preclemati=curclemati THEN
                  --ligne gap ajoutée car clé gap plus petite que clé photo et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent.
                  IF difference_col( tab1(i) , tab1(i-1) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent (j) et histo gap courant (i)
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1
                  i :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle AND preclemati<>curclematj THEN
                  --ligne gap supprimée et c'était le 1er histo du matricule : il faut forcer les valeurs à blanc sur cette date perdue.
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                Elsif tab1cle > tab2cle AND preclemati=curclematj THEN
                  --ligne gap supprimée et il existe un histo gap précédent sur le même matricule : il faut comparer les valeurs du précédent avec la photo.
                  i :=i-1;
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée entre histo gap précédent et histo photo courant (date d'effet=photo)
                    tab1(i).DTEFFET :=tab2(j).DTEFFET ;
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité tab1cle=tab2cle (pacmat + paiezad + date d'effet)
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              ELSE
                --Tables sans historiques comme DIC_ENFANTS ou DIC_ADM_PERSO
                IF tab1cle < tab2cle THEN
                  --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                  --avancer dans tab1
                  i    :=i+1;
                  preclemati:=curclemati;
                Elsif tab1cle > tab2cle THEN
                  --ligne supprimée car i épuisé ou clé i plus grande que clé j
                  remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                  --avancer dans tab2
                  j :=j+1;
                  preclematj:=curclematj;
                ELSE
                  --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                  IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                    --modification constatée
                    remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                  END IF;
                  --avancer dans tab1 et tab2
                  i :=i+1;
                  preclemati:=curclemati;
                  j :=j+1;
                  preclematj:=curclematj;
                END IF;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  CLOB;
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Début Rétro id_trt= '||p_id_trt);
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt||', pReq '||pReq);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO-- Erreur partition ID_'||p_id_trt);
    END ;
    
    --Insertion dans DIF_FSED_MODIF_RETRO
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);
    pReq := 'INSERT INTO DIF_FSED_MODIF_RETRO SELECT * FROM dif_fsed f WHERE numpac ='''||p_numpac||''' AND f.id_trt ='||p_id_trt;
    pReq := pReq ||' AND DTEFFET  <to_date('''||w_PERIODEENCOURS||'''||''01'',''YYYYMMDD'') ';
    pReq := pReq ||' AND ( f.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1 )';
    pReq := pReq ||' OR exists (select 1 from dif_fsed t where t.numpac ='''||p_numpac||''' and t.id_trt ='''||p_id_trt||''' AND t.codeop=''C'' and t.ELEM =''A001'' and f.paiezad=t.paiezad and f.pacmat=t.pacmat )) ';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début remplissage DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt||', pReq '||pReq);
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- FIN insertion DIF_FSED_MODIF_RETRO--: ID_'||p_id_trt);    
    --Insertion dans GAP_TRT_MOIS_RETRO   
    pReq := ' insert into GAP_TRT_MOIS_RETRO (id_trt,numpac,pacmat,PERIODE_RETRO)';
    pReq := pReq ||' WITH grm AS (SELECT pacmat,periode_retro FROM gap_retro_matric    g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    pReq := pReq ||'     ,gsr AS (SELECT pacmat,periode_retro FROM gap_selection_retro g WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = g.numpac AND gtlm.pacmat = g.pacmat))';
    --                 min_periode_retro : plus vieille rétro par matricule
    pReq := pReq ||' ,min_periode_retro (pacmat,min_periode) AS (';
    pReq := pReq ||' SELECT pacmat,MIN(periode_retro) FROM';
    pReq := pReq ||' (          SELECT pacmat,periode_retro FROM grm';
    pReq := pReq ||'  UNION ALL SELECT pacmat,periode_retro FROM gsr ) GROUP BY pacmat) ';
    --                 histo_retro : historique des mois où on a fait de la rétro *et* sur quels mois
    pReq := pReq ||' ,histo_retro AS (SELECT DISTINCT pacmat,periode,to_char(dteffet,''yyyymm'') as periode_retro FROM dif_fsed_histo h WHERE numpac = '''||p_numpac||''' AND EXISTS (SELECT 1 FROM gap_trt_liste_mat gtlm WHERE gtlm.id_trt = '||p_id_trt||' AND gtlm.numpac = h.numpac AND gtlm.pacmat = h.pacmat) ';
    pReq := pReq ||'       AND periode>='''||w_MIN_RETRO||''' AND to_char(dteffet,''yyyymm'')<periode';
    pReq := pReq ||'       AND  h.elem in (select ELEMENT from tge_ref_dicoz where  numpac='''||p_numpac||''' AND nvl(CALCUL_RETRO,0)=1) )';
    --                 liste_mois_retro : liste exhaustive des mois rétro par matricule (mois rétro paie en cours + mois rétro dans l'historique)
    pReq := pReq ||' ,liste_mois_retro (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro      FROM grm';
    pReq := pReq ||' UNION ALL SELECT pacmat,periode_retro      FROM gsr';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode_retro FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode_retro>=mpr.min_periode)';
    pReq := pReq ||' UNION ALL SELECT DISTINCT pacmat,periode       FROM histo_retro hr WHERE EXISTS (select 1 from min_periode_retro mpr WHERE hr.pacmat=mpr.pacmat and hr.periode      >=mpr.min_periode))';
    --                SELECT principal
    pReq := pReq ||' SELECT DISTINCT '||p_id_trt||','''||p_numpac||''',pacmat,periode_retro FROM liste_mois_retro';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion GAP_TRT_MOIS_RETRO: ID_'||p_id_trt);
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    --Insertion dans DIF_FSED_PARTIERETRO 
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);   
    pReq := ' INSERT INTO DIF_FSED_PARTIERETRO ';
    --WITH1 liste des vrais mois rétro
    pReq := pReq ||' WITH liste_mois_retro (pacmat,periode_retro) AS ( ';
    pReq := pReq ||'       SELECT pacmat,periode_retro FROM gap_trt_mois_retro WHERE numpac = '''||p_numpac||''' AND id_trt = '''||p_id_trt||''') ';
    --WITH2 même liste des vrais mois rétro mais avec la tranche des périodes précédentes (début=M+1 de la rétro précédente)
    pReq := pReq ||',tranches_mois_retro (pacmat,periode_retro,prec_periode_retro) AS ( ';
    pReq := pReq ||' SELECT lmr.pacmat,lmr.periode_retro,NVL((SELECT to_char(add_months(to_date(MAX(lmr2.periode_retro),''yyyymm''),1),''yyyymm'') FROM liste_mois_retro lmr2 WHERE lmr2.pacmat=lmr.pacmat AND lmr2.periode_retro<lmr.periode_retro),'''||w_MIN_RETRO||''') FROM liste_mois_retro lmr)';
    --WITH3  liste des elem avec envoi systématique = O
    pReq := pReq ||',liste_envoi_systematique(elem) AS( ';
    pReq := pReq ||' SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac='''||p_numpac||''' AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O'' UNION ALL SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac =''*'' AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O'' AND ELEMENT NOT IN (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac='''||p_numpac||''' AND NVL(ENVOI_SYSTEMATIQUE,''N'')=''O''))';   
    --SELECT1 DIF_FSED_MODIF_RETRO
    pReq := pReq ||' SELECT '''||p_id_trt||''', tmr.periode_retro AS periode, m.numpac, m.cle, m.pacmat, m.paiezad, m.elem, m.occ, m.valeur, m.codeop, m.type_donnee, m.dteffet ';
    pReq := pReq ||' FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
    pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.pacmat = tmr.pacmat ';
    pReq := pReq ||' AND  ( ' ;
    pReq := pReq ||' greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
    pReq := pReq ||' OR  substr(m.elem,0,1)>''W'' OR Exists (select * from liste_envoi_systematique les  where m.elem=les.elem ) ';
    pReq := pReq ||' ) ' ;
    --SELECT2 DIF_FSED_HISTO sauf les lignes déjà présentes dans DIF_FSED_MODIF_RETRO
    pReq := pReq ||' UNION ALL SELECT '''||p_id_trt||''', h.periode, h.numpac, h.cle, h.pacmat, h.paiezad, h.elem, h.occ, h.valeur, h.codeop, h.type_donnee, h.dteffet ';
    pReq := pReq ||' FROM dif_fsed_histo h, liste_mois_retro lmr ';
    pReq := pReq ||' WHERE numpac = '''||p_numpac||''' AND h.pacmat=lmr.pacmat AND periode>='''||w_MIN_RETRO||''' AND h.periode=lmr.periode_retro AND NOT EXISTS ';
    pReq := pReq ||'(SELECT 1 FROM dif_fsed_modif_retro m, tranches_mois_retro tmr ';
    pReq := pReq ||' WHERE m.id_trt = '''||p_id_trt||''' AND m.pacmat = tmr.pacmat AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') BETWEEN tmr.prec_periode_retro AND tmr.periode_retro ';
    pReq := pReq ||'   AND greatest(TO_CHAR(m.dteffet,''yyyymm''),'''||w_MIN_RETRO||''') <= h.periode';
    pReq := pReq ||'   AND m.pacmat = h.pacmat AND m.paiezad = h.paiezad AND m.elem = h.elem AND m.occ = h.occ )';
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Début insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt||', pReq '||pReq);   
    EXECUTE_IMMEDIATE_STRING( pReq,0);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED-- Fin insertion DIF_FSED_PARTIERETRO: ID_'||p_id_trt);
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED ---Fin Rétro id_trt= '||p_id_trt);
    END IF;
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
  v_existVRREP number :=0 ;
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    select count(*) into v_existVRREP from TGE_REF_VRREP where TGE_REF_VRREP.NUMERO_DE_PAC=elt_tab_11R.NUMERO_DE_PAC and TGE_REF_VRREP.CODE_TABLE=elt_tab_11R.CODE_TABLE;
	if(v_existVRREP=0) then
	tab_11R.extend;
	tab_11R(tab_11R.last)            :=elt_tab_11R;
	end if ;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;
wLibRUB            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  wLibRUB := REPLACE(pLibRUB,'£','#');
  select ( (LENGTH(wLibRUB) - LENGTH(REPLACE(wLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (wLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(wLibRUB) Loop 
      if substr(wLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(wLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(wLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));
   IF LENGTH(lig.donnees)>240 THEN
 elt_tab_15.TEXTE_EXPLICATIF    := trim(SUBSTR(lig.donnees,241,400));
 ELSE elt_tab_15.TEXTE_EXPLICATIF  := '' ;
 END IF ;

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%'  and elt_tab_15.LIBRUB not like '%£%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT ';
  stmtClause :=stmtClause||'/*+  BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$291F8F59" "DACH2"@"SEL$3") LEADING(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550" "T"@"SEL$2" "A"@"SEL$2") INDEX(@"SEL$B29E968D" "A"@"SEL$2" ("DIC_ADM_CONTRAT_HISTO"."NUMPAC" "DIC_ADM_CONTRAT_HISTO"."PAIEZAD" "DIC_ADM_CONTRAT_HISTO"."DATE_EFF")) BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$B29E968D" "T"@"SEL$2") NO_ACCESS(@"SEL$B29E968D" "VW_SQ_1"@"SEL$E9784550") BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$5" "F"@"SEL$5") USE_HASH(@"SEL$4FDF941B" "HISTO"@"SEL$1") LEADING(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "HISTO"@"SEL$1") NO_ACCESS(@"SEL$4FDF941B" "COMPTEUR"@"SEL$4") UNNEST(@"SEL$3") */ ';
  stmtClause :=stmtClause||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT  MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT /*+ LEADING(@"SEL$C19C7BAF" "TGE"@"SEL$3" "A"@"SEL$2" "TGE_FSED_30_TEMPORARY"@"SEL$6" "CONT"@"SEL$2" "D"@"SEL$5")*/'||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null ,
tge.numpac,
tge.pacmat,
tge.PAIEZAD,
tge.MATRICULE,
tge.DATE_EFFET 
FROM TGE_IMPORT_FSED_30 TGE 

WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            reqTrace :=null;
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
            IF w_table = 'DIC_TGE_RESPAIE_UNIQUE' THEN
              R_PRESENT_FICHIER_PAIE( w_numpac , null );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
 IF reqTrace is not null then
    FSED_ERREUR(p_id , 'Trace SYS_TRC_MODIF ',p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
 END IF;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' THEN
          w_periode     := w_dateFin ;
        END IF;
        ---Mise à zero des pots de forçage des compteurs ‘I’ :Suppression des forçages sur la période recueil de la paie avant de faire les insertions
        --w_req := 'UPDATE CAD_COMPTEUR SET pot1_FJ = NULL ,pot1_FH = NULL ,pot2_FJ = NULL ,pot2_FH = NULL ,pot3_FJ = NULL ,pot3_FH = NULL ,pot4_FJ = NULL ,';
        --w_req := w_req ||' pot4_FH = NULL,pot5_FJ = NULL ,pot5_FH = NULL ,pot6_FJ = NULL ,pot6_FH = NULL ,pot7_FJ = NULL ,pot7_FH = NULL ,pot8_FJ = NULL ,pot8_FH = NULL, ';
        --w_req := w_req ||' pot9_FJ = NULL ,pot9_FH = NULL ,pot10_FJ = NULL ,pot10_FH = NULL ,pot11_FJ = NULL ,';
        --w_req := w_req ||' pot11_FH = NULL ,pot12_FJ = NULL ,pot12_FH = NULL WHERE CODE_COMPTEUR = :w_cad AND TYPEMJ =''I'' AND to_date(DJOUR,''YYYYMMDD'') BETWEEN :w_dateDed AND :w_dateFin ';
        --w_req := w_req ||' AND (MATRICULE,CODE_COMPTEUR) NOT IN (SELECT MATRICULE,CODE_COMPTEUR FROM CAD_RETP_MATRIC_CPT_DELETED) ';
        --w_req := w_req ||' AND MATRICULE IN (SELECT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac) ';
        --FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 après RAZ '||w_cad||' '||w_dateDed||' '||w_dateFin||' '||C.paiezad||' '||w_req);
        --EXECUTE immediate w_req USING w_cad,
        --w_dateDed ,
        --w_dateFin,
        --C.paiezad,
        --w_numpac ;
        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric
          INTO w_matric
          FROM DIC_ADM_CONTRAT_SITU--DIT 50818 
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      --w_dateCalcul := TO_DATE(w_moi_retour,'YYYYMM');
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
     --DSH : Les VR mises à jour et non encore envoyé à zadig(code_gestionnaire ='G' and temoin_vr_base = O: Valeurs modifiées non envoyées ou K : Echec du dernier envoi des valeurs ou E : en cours d'envoi ) ne doivent pas être supprimés
 	DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac and (code_gestionnaire <>'G' or ( code_gestionnaire ='G' and temoin_vr_base <>'O' and temoin_vr_base <>'K' and temoin_vr_base <>'E') );
    
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 
 OR( carte_00 =false and (tab_11V IS NOT NULL OR tab_11R IS NOT NULL  OR tab_11D IS NOT NULL OR tab_11D1 IS NOT NULL 
 OR tab_15 IS NOT NULL OR tab_15_lib IS NOT NULL OR tab_17CR IS NOT NULL OR tab_17DMF IS NOT NULL))
THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
TAG_CHARSET=@€éèç
##
DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE
=SQL=
create or replace
PROCEDURE DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE (pTableAModifier VARCHAR2, pTableGxp VARCHAR2, pListeElements TAB_VARCHAR) AS
BEGIN
FOR i IN pListeElements.first..pListeElements.last LOOP
    FOR n IN (SELECT NUMPAC FROM TGE_REF_PAC P WHERE NOT EXISTS (SELECT 1 FROM TGE_REF_MAPDO M WHERE M.NUMPAC=P.NUMPAC AND M.ELEMENT=pListeElements(i))) LOOP
      -- On duplique la ligne ayant NUMPAC = * , ELEMENT = <Element courant> et TABLEGXP != DIC_PENSION_ALIM (dans le cas où on passe le script une 2nde fois) sur un 'vrai' PAC
      DUPLIQUE_DONNEES(pTableAModifier,'NUMPAC=''*'' AND ELEMENT='''||pListeElements(i)||''' AND NOT TABLEGXP='''||pTableGxp||'''','NUMPAC',''''||n.NUMPAC||'''','','','','','','','','','','','','','','','','');
    END LOOP;
  END LOOP;
END DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE;
##
PURGE_HISTO_DIF_FSED
=SQL=
create or replace PROCEDURE PURGE_HISTO_DIF_FSED(
    p_id     IN NUMBER,
    P_NUMPAC IN VARCHAR2,
    P_PERIODEENCOURS IN TGE_REF_PAC.PERIODEENCOURS%type,
    P_DEB_RETRO IN  TGE_REF_PAC.DEB_RETRO%type,
    P_DEB_HISTO_RETRO IN TGE_REF_PAC.DEB_HISTO_RETRO%type,
    P_NB_MOIS_RETRO IN TGE_REF_PAC.NB_MOIS_RETRO%type,
    P_PERIDOE_HISTO_LIMITE IN TGE_REF_PAC.PERIODEENCOURS%type)
AS
  P_REQ     VARCHAR2(2000);
  w_isRetro NUMBER ;
  w_periode_partition TGE_REF_PAC.PERIODEENCOURS%type;
  w_subpartition_0 VARCHAR2(20);
  w_subpartition VARCHAR2(20);
  w_subpartition_del VARCHAR2(20);
BEGIN

  IF  to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
      select to_char(ADD_MONTHS(TO_DATE(P_PERIODEENCOURS,'yyyymm'),1),'yyyymm') into w_periode_partition from dual;
     FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partitions des HISTO (DEB CREAT PARTITION DIF_FSED_HISTO)','Début Création des partitions  de la table DIF_FSED_HISTO avant purge');
     
  IF is_number(P_NUMPAC)IS NOT NULL THEN 
     w_subpartition_0 := '"'||P_NUMPAC||'_000000"';
     w_subpartition :='"'||P_NUMPAC||'_'||P_PERIODEENCOURS||'"';
  ELSE
     w_subpartition_0 :=P_NUMPAC;
     w_subpartition :=P_NUMPAC||'_'||P_PERIODEENCOURS;
  END IF; 
    
    BEGIN     
      p_req := 'Alter TABLE DIF_FSED_HISTO add partition NUMPAC_'||P_NUMPAC||' VALUES('''||P_NUMPAC||''')(SUBPARTITION '||w_subpartition_0||'  VALUES LESS THAN(''000000'')) UPDATE INDEXES ';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','Création partition NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','Fin création partition NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO ');
    EXCEPTION
    WHEN OTHERS THEN
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HIST_RETRO','Partition NUMPAC_'||P_NUMPAC||'de la table DIF_FSED_HISTO existe');
    END ;
    BEGIN
      p_req := 'ALTER TABLE DIF_FSED_HISTO  MODIFY PARTITION NUMPAC_'||P_NUMPAC||' ADD SUBPARTITION '||w_subpartition||' VALUES LESS THAN ('''||w_periode_partition||''') UPDATE INDEXES';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION SOUS PARTITION DIF_FSED_HISTO','Création SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION SOUS PARTITION DIF_FSED_HISTO','Fin création SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO ');
    EXCEPTION
    WHEN OTHERS THEN
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'CREATION PARTITION DIF_FSED_HISTO','SOUS partition PERIODE_'||P_PERIODEENCOURS||' de NUMPAC_'||P_NUMPAC||'sur la table DIF_FSED_HISTO existe ');
    END ;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'Partitions des HISTO (Fin CREAT PARTITION DIF_FSED_HISTO)','Fin Créatin des partitions  de la table DIF_FSED_HISTO avant purge');
  
    --purge de DIF_FSED_HISTO 
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT Supp DIF_FSED_HISTO)','DEBUT Purge de la table DIF_FSED_HISTO  pour les periodes inférieurs à '||P_PERIDOE_HISTO_LIMITE);
    FOR K IN
    (SELECT DISTINCT periode
    FROM DIF_FSED_HISTO
    WHERE to_date(periode,'YYYYMM') <add_months(to_date(P_PERIODEENCOURS,'yyyymm'),-1*P_NB_MOIS_RETRO)
    AND NUMPAC                      =P_NUMPAC
    )
    LOOP
      IF is_number(P_NUMPAC)IS NOT NULL THEN 
        w_subpartition_del :='"'||P_NUMPAC||'_'||K.PERIODE||'"';
      ELSE
        w_subpartition_del :=P_NUMPAC||'_'||K.PERIODE;
      END IF;
      p_req := 'ALTER TABLE DIF_FSED_HISTO TRUNCATE SUBPARTITION '||w_subpartition_del||' DROP STORAGE';
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED ( Supp Sous partition DIF_FSED_HISTO)','suppression sous partition '||P_NUMPAC||'_'||K.PERIODE||' de DIF_FSED_HISTO p_req '||p_req);
      EXECUTE_IMMEDIATE_STRING( p_req,0);
      FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED ( Fin Supp Sous partition DIF_FSED_HISTO)','Fin suppression sous partition '||P_NUMPAC||'_'||K.PERIODE||' de DIF_FSED_HISTO ');
    END LOOP;
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN Supp DIF_FSED_HISTO)','FIN Purge de la table DIF_FSED_HISTO  pour les periodes inférieurs à '||P_PERIDOE_HISTO_LIMITE);
    --historisation
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (Debut INSERT de DIF_FSED IN DIF_FSED_HISTO)','Remplissage  de la table DIF_FSED_HISTO à partir de DIF_FSED');
    --Merge 1
    MERGE INTO DIF_FSED_HISTO T USING
    (SELECT p_PERIODEENCOURS AS PERIODE,
      NUMPAC ,
      CLE ,
      PACMAT ,
      PAIEZAD ,
      ELEM ,
      OCC ,
      VALEUR ,
      CODEOP ,
      TYPE_DONNEE ,
      DTEFFET
    FROM DIF_FSED z
    WHERE NUMPAC = p_numpac
    AND ID_TRT   =
      ( SELECT max(ID_TRT)  from GAP_TRT_DERNIER_ENVOI  e
      WHERE z.pacmat =e.pacmat
      AND z.numpac   =e.numpac
      AND z.PAIEZAD  =e.paiezad
      )
    )i ON (i.PERIODE= T.PERIODE AND i.NUMPAC=T.NUMPAC AND i.CLE=T.CLE AND i.PACMAT=T.PACMAT AND i.PAIEZAD=T.PAIEZAD AND i.ELEM=T.ELEM AND i.OCC=T.OCC)
  WHEN NOT MATCHED THEN
    INSERT
      (
        PERIODE,
        NUMPAC,
        CLE,
        PACMAT,
        PAIEZAD,
        ELEM,
        OCC,
        VALEUR,
        CODEOP,
        TYPE_DONNEE,
        DTEFFET
      )
      VALUES
      (
        i.PERIODE,
        i.NUMPAC,
        i.CLE,
        i.PACMAT,
        i.PAIEZAD,
        i.ELEM,
        i.OCC,
        i.VALEUR,
        i.CODEOP,
        i.TYPE_DONNEE,
        i.DTEFFET
      );
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (Fin INSERT de DIF_FSED IN DIF_FSED_HISTO)','Fin remplissage  de la table DIF_FSED_HISTO à partir de DIF_FSED ');
    --DELETE 1
    FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT DELETE de DIF_FSED_HISTO)','Supression de DIF_FSED_HISTO dont la référence numpac/pacmat/periode est dans DIF_FSED_PARTIERETRO par périodes ');   
    DELETE
    FROM DIF_FSED_HISTO retro
    WHERE retro.numpac=p_numpac
    AND EXISTS
        (SELECT 1
        FROM DIF_FSED_PARTIERETRO z
        WHERE z.paiezad                =retro.paiezad
        AND z.pacmat                   =retro.pacmat
        AND z.numpac                   =retro.numpac
        AND z.periode                  =retro.periode
        AND z.ID_TRT                   =
          (SELECT max(ID_TRT)  from GAP_TRT_DERNIER_ENVOI  e         
          WHERE z.pacmat  =e.pacmat
          AND z.numpac    =e.numpac
          AND z.PAIEZAD   =e.paiezad
          )
        );
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN DELETE de DIF_FSED_HISTO)','Fin Supression de DIF_FSED_HISTO');   
       --MERGE 2 
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (DEBUT INSERT de DIF_FSED_PARTIERETRO IN DIF_FSED_HISTO)','Remplissage de la table DIF_FSED_HISTO à partir de DIF_FSED_PARTIERETRO ');
        MERGE INTO DIF_FSED_HISTO T USING
         (SELECT r.PERIODE AS PERIODE,
                 r.NUMPAC ,
                 r.CLE ,
                 r.PACMAT ,
                 r.PAIEZAD ,
                 r.ELEM ,
                 r.OCC ,
                 r.VALEUR ,
                 r.CODEOP ,
                 r.TYPE_DONNEE ,
                 r.DTEFFET
       FROM DIF_FSED_PARTIERETRO r
       WHERE r.NUMPAC   = p_numpac
       AND   r.ID_TRT  =
          (SELECT max(ID_TRT)  from GAP_TRT_DERNIER_ENVOI  e          
          WHERE r.pacmat =e.pacmat
          AND r.numpac   =e.numpac
          AND r.PAIEZAD  =e.paiezad
          )
     )i ON (i.PERIODE= T.PERIODE AND i.NUMPAC=T.NUMPAC AND i.PACMAT=T.PACMAT AND i.PAIEZAD=T.PAIEZAD AND i.ELEM=T.ELEM AND i.OCC=T.OCC)
    WHEN NOT MATCHED THEN
     INSERT
      (PERIODE,
       NUMPAC,
       CLE,
       PACMAT,
       PAIEZAD,
       ELEM,
       OCC,
       VALEUR,
       CODEOP,
       TYPE_DONNEE,
       DTEFFET)
     VALUES
      (i.PERIODE,
       i.NUMPAC,
       i.CLE,
       i.PACMAT,
       i.PAIEZAD,
       i.ELEM,
       i.OCC,
       i.VALEUR,
       i.CODEOP,
       i.TYPE_DONNEE,
       i.DTEFFET);
       FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED (FIN INSERT de DIF_FSED_PARTIERETRO IN DIF_FSED_HISTO)','Fin remplissage de la table DIF_FSED_HISTO à partir de DIF_FSED_PARTIERETRO ');

  END IF;
  
EXCEPTION
WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'PURGE_HISTO_DIF_FSED  ', 'Une erreur est survenue lors de l historisation Rétro de DIF_FSED . Veuillez consulter la table TGE_FSED_ERREUR.');
  FSED.FSED_ERREUR(p_id,'PURGE_HISTO_DIF_FSED',P_NUMPAC,SQLCODE||'-'||SQLERRM);
  raise;
END PURGE_HISTO_DIF_FSED;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL,
 	p_recueil_photo IN VARCHAR2 DEFAULT 'N'  )
IS
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  periode_recalcul_deb  VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
  recueil_photo         BOOLEAN;
  w_pacmat 				VARCHAR2(20);
  v_jobIdx 			   NUMBER;
  V_PERIODE_EN_COURS	   VARCHAR(6);
  V_DEB_RETRO           VARCHAR(6);
  req                   CLOB;
  
  --SELECT les changement pour la rétro
  type PERIODE IS RECORD
  ( 
  NUMPAC DIC_ADM_CONTRAT_SITU.NUMPAC%TYPE,
  PACMAT DIC_ADM_CONTRAT_SITU.PACMAT%TYPE,
  PERIODE TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE%TYPE,
  CODE_CHRONO DIC_ADM_CONTRAT_SITU.CODE_CHRONO%TYPE,
  PAIEZAD DIC_ADM_CONTRAT_SITU.PAIEZAD%TYPE);
  type PERIODE_TAB IS TABLE OF PERIODE INDEX BY BINARY_INTEGER;
  tab_retro PERIODE_TAB;
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ',' || p_recueil_photo || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation recueil_photo
  IF p_recueil_photo = 'O' THEN
    recueil_photo:=TRUE;
  ELSE
    recueil_photo:=FALSE;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  IF( p_periode_paie     <= periode_paie_en_cours) THEN
    IF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    periode_recalcul_deb := periode_recalcul;
       --Récupération du pacmat
	 IF p_paiezad IS NOT NULL THEN
		 BEGIN
			 SELECT PACMAT
			 INTO w_pacmat
			 FROM DIC_ADM_CONTRAT_SITU
			 WHERE NUMPAC = p_numpac
			 AND PAIEZAD  = p_paiezad
			 AND rownum   =1;
		 EXCEPTION
			 WHEN NO_DATA_FOUND THEN
				 req := 'DELETE FROM ';
				 IF p_dosNumForSimu IS NOT NULL THEN
					 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
					 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
				 ELSE
				 	req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
				 END IF;
				 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
				 req := req||' AND MOIS_PAIE >= '''||periode_recalcul_deb||'''';
				 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
				 IF p_dosNumForSimu IS NOT NULL THEN
				 	req := req||' AND DOS_NUM = '||p_dosNumForSimu;
				 END IF;
				 EXECUTE_IMMEDIATE_STRING (req,0);
				 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
			 raise;
		 END;
	 END IF;
    --Sauvegarde des période de recueil dans TGE_PERIODE_RECUEIL_PAIEZAD_R
	IF p_dosNumForSimu IS NULL THEN
		EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' OR ID_TRT + 1000 < ''' || id_trt || ''' ',0);
		req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
		req         := req||'SELECT  '''||id_trt||'''  ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
		req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
		req         := req||' AND MOIS_PAIE >= '''||periode_recalcul||'''';
		IF w_pacmat IS NOT NULL THEN
		 	req       := req||' AND PACMAT = '''||w_pacmat||'''';
		END IF;
		EXECUTE_IMMEDIATE_STRING ( req,0);
	END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, w_pacmat, p_dosNumForSimu, recueil_photo);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
    --Mise à jour des incidents qui on changé période de paie plus inscription en rétro
	IF p_dosNumForSimu IS NULL THEN
	 	 -- Initialisations des variables pour tester la rétroactivité depuis la table TGE_REF_PAC. 
		 SELECT 
			 PERIODEENCOURS,
			 DEB_RETRO
		 INTO
			 V_PERIODE_EN_COURS,
			 V_DEB_RETRO
		 FROM TGE_REF_PAC
		 WHERE NUMPAC = p_numpac; 
	 	 -- Le recalcul de la période n'est fait que si le pac est rétro et que la rétro a démarré 
		 IF V_DEB_RETRO IS NOT NULL AND V_DEB_RETRO <= V_PERIODE_EN_COURS THEN
		 -- CALL TGE_RETRO_INSCRIPT_WITH_CHECK
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début CALL TGE_RETRO_INSCRIPT_WITH_CHECK');
		 
			req              := 'select S.NUMPAC, S.PACMAT, NVL(R.MOIS_PAIE, P.MOIS_PAIE) AS PERIODE, S.CODE_CHRONO, S.PAIEZAD from TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
			req              := req||'FULL JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
			req              := req||'ON R.NUMPAC = P.NUMPAC ';
			req              := req||'AND R.MOIS_PAIE = P.MOIS_PAIE ';
			req              := req||'AND R.PAIEZAD = P.PAIEZAD ';
			req              := req||'AND R.PACMAT = P.PACMAT ';
			req              := req||'INNER JOIN dic_adm_contrat_SITU S ';
			req              := req||'ON S.NUMPAC = NVL(R.NUMPAC, P.NUMPAC) ';
			req              := req||'AND S.PAIEZAD = NVL(R.PAIEZAD, P.PAIEZAD) ';
			req              := req||'WHERE  ';
			req              := req||'NVL(R.MOIS_PAIE, P.MOIS_PAIE) >= ''' || periode_recalcul_deb || ''' ';
 			req              := req||'AND NVL(R.NUMPAC, P.NUMPAC) = ''' || p_numpac || ''' ';
 		IF w_pacmat IS NOT NULL THEN
 			req              := req||'AND NVL(R.PACMAT, P.PACMAT) = '''||w_pacmat||'''';
 		END IF;
			req              := req||'AND (P.MOIS_PAIE IS NULL  ';
			req              := req||'OR R.MOIS_PAIE IS NULL ';
			req              := req||'OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL ';
			req              := req||'OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL) ';
			
			EXECUTE IMMEDIATE req BULK COLLECT INTO tab_retro;
			IF tab_retro.exists(1) THEN
			  FOR i IN tab_retro.first..tab_retro.last
			  LOOP
			  	BEGIN
			    	TGE_RETRO_INSCRIPT_WITH_CHECK(tab_retro(i).NUMPAC, tab_retro(i).PACMAT, tab_retro(i).PERIODE,  tab_retro(i).CODE_CHRONO,  tab_retro(i).PAIEZAD, 'TGE_PERIODE_RECUEIL_PAIEZAD');
			    EXCEPTION
			    WHEN OTHERS THEN
 					TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV KO : TGE_RETRO_INSCRIPT_WITH_CHECK('''||tab_retro(i).NUMPAC||''', '''||tab_retro(i).PACMAT||''', '''||tab_retro(i).PERIODE||''',  '''||tab_retro(i).CODE_CHRONO||''',  '''||tab_retro(i).PAIEZAD||''', ''TGE_PERIODE_RECUEIL_PAIEZAD'') '||SQLCODE||' '||SQLERRM);
			    END;
			  END LOOP;
			END IF;
			
			EXECUTE_IMMEDIATE_STRING  ('DELETE TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT = ''' || id_trt || ''' ',0);
		 
		 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Début JOB.SUBMIT UPADTE TGE_INCIDENTS_PAIE');
		 -- UPDATE TGE_INCIDENTS_PAIE
			req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = PERIODE ';
			req              := req||' WHERE ID IN ( ';
			req            	 := req|| ' select INC.ID from ( '; 
			req            	 := req|| ' select I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''') as PERIODE, MIN(P.MOIS_PAIE) as MIN_MOIS_PAIE from TGE_INCIDENTS_PAIE I  '; 
			req            	 := req|| ' LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  '; 
			req            	 := req|| ' ON I.NUMPAC = P.NUMPAC '; 
			req            	 := req|| ' AND I.PAIEZAD = P.PAIEZAD '; 
			req            	 := req|| ' AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL '; 
			req            	 := req|| ' WHERE I.NUMPAC = ''''' || p_numpac || ''''' '; 
			IF w_pacmat IS NOT NULL THEN
				req          := req|| ' AND (P.PACMAT = '''''||w_pacmat||''''' ) ';
			END IF;
			req            	 := req|| ' GROUP BY I.ID, TO_CHAR(I.PERIODE, ''''YYYYMM'''')) INC '; 
			req            	 := req|| ' WHERE  '; 
			req            	 := req|| ' (INC.PERIODE != INC.MIN_MOIS_PAIE  '; 
			req            	 := req|| ' OR MIN_MOIS_PAIE IS NULL) '; 
			req := req ||' ) '; 
				 
		  DBMS_JOB.SUBMIT(v_jobIdx , 'BEGIN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''début CALCUL PERIODE INCIDENT '||id_trt||''');
			 EXECUTE_IMMEDIATE_STRING('''||req||''', 0);
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT '||id_trt||' OK'');
			 EXCEPTION
			 WHEN OTHERS THEN
			 TGE_IMPORT_AVANCEMENT_proc(''TGE_ALIM_PER'',''fin CALCUL PERIODE INCIDENT KO : ''|| SQLCODE||'' ''||SQLERRM);
		  END;', sysdate, null);
	 	END IF;
	 END IF;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : TGE_ALIM_PERIODE_INDIV '||SQLCODE||' '||SQLERRM);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_MAL_RECYCLES)','Purge de la table GAP_TRT_MAL_RECYCLES pour le numpac : '||P_NUMPAC);

 DELETE FROM  GAP_TRT_MAL_RECYCLES  WHERE NUMPAC = P_NUMPAC; 

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge GAP_TRT_DERNIER_ENVOI)','Purge de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 DELETE FROM  GAP_TRT_DERNIER_ENVOI  WHERE NUMPAC = P_NUMPAC; 

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_MAL_RECYCLES)','Remplissage de la table GAP_TRT_MAL_RECYCLES pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_MAL_RECYCLES select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from 
(SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
group by d.numpac,d.pacmat,d.paiezad);

DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_MAL_RECYCLES',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);

 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Insert GAP_TRT_DERNIER_ENVOI)','Remplissage de la table GAP_TRT_DERNIER_ENVOI pour le numpac : '||P_NUMPAC);
 
 insert into GAP_TRT_DERNIER_ENVOI select ID_TRT,NUMPAC  ,PACMAT ,PAIEZAD,DATE_TRT  from
 (SELECT d.numpac,d.pacmat,max(b.id_trt)as ID_TRT,d.paiezad,nvl(max(b.DATE_DEBUT_TRT),to_date('01/01/1901','dd/mm/yyyy'))as DATE_TRT
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 group by d.numpac,d.pacmat,d.paiezad);
 
 DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_DERNIER_ENVOI',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
 --Purge et Historisation de dif_FSED
 
 BEGIN
 w_req :='Create TABLE DIF_FSED_HISTO_'||P_PERIODEENCOURS||' as select * from DIF_FSED_HISTO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED_HISTO) ','la table DIF_FSED_HISTO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );

 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 --R046
 update TGE_INCIDENTS_PAIE z
 set    z.ACTION_RETRO='H',z.ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 --THN
 --AND b.traite      IS NULL
 )
 AND z.date_maj<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='C',
 ACTION_RETRO_DATE =z.date_maj
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 --THN
 --AND b.traite      IS NULL
 )--- Pour les periodes<periodeencours on laisse l'action retro existante
 AND z.date_maj>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 ---R046
 update TGE_DONNEES_PAIE z
 set    z.ACTION_RETRO ='H',
 z.ACTION_RETRO_DATE =null
 where z.numpac=p_numpac
 and to_date(z.PERIODE,'YYYYMM')>greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND to_date(z.PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 ---R046
 update TGE_DONNEES_PAIE z
 set    z.ACTION_RETRO ='C',
 z.ACTION_RETRO_DATE =to_date(z.date_maj,'yyyymmddHH24MI')
 where z.numpac=p_numpac
 AND to_date(z.PERIODE,'YYYYMM')=to_date(p_PERIODEENCOURS,'yyyymm')
 --- Pour les periodes<periodeencours on laisse l'action retro existante
 AND to_date(z.date_maj,'yyyymmddHH24MI')>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE z
 set    z.ACTION_RETRO ='H',
 z.ACTION_RETRO_DATE =null
 where z.numpac=p_numpac
 and to_date(z.PERIODE,'YYYYMM')>greatest(to_date(P_PERIDOE_HISTO_LIMITE,'YYYYMM'),to_date(nvl(P_DEB_HISTO_RETRO,'209912'),'YYYYMM'))
 AND to_date(z.PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')<
 (
 SELECT DATE_TRT from GAP_TRT_DERNIER_ENVOI  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );

 update TGE_ELEMENTS_PAIE z
 set    z.ACTION_RETRO ='C',
 z.ACTION_RETRO_DATE =to_date(z.date_maj,'yyyymmddHH24MI')
 where z.numpac=p_numpac
 AND to_date(z.PERIODE,'YYYYMM')=to_date(p_PERIODEENCOURS,'yyyymm')
 AND to_date(z.date_maj,'yyyymmddHH24MI')>=
 (
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE e.numpac       =z.numpac
 AND e.PAIEZAD      =z.paiezad
 );
 END IF;
 
 --Nettoyage des annulations de périodes d'emploi si la suppression a été faite avant le dernier passage de paie 

 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION <
 ( SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
    where z.pacmat       =e.pacmat
    AND z.numpac       =e.numpac );
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');

 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (  SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
    WHERE z.numpac       =e.numpac
    AND z.PAIEZAD      =e.paiezad
    )  and PERIODE<=p_PERIODEENCOURS ;
 
 
 
 IF p_histoIP='N' AND isRetro=0 THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<(SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
  where z.numpac  =e.numpac
  AND   z.PAIEZAD =e.paiezad)
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');

 END IF;
 
 IF isRetro=0 THEN
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 ( 
 SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e
 WHERE z.numpac       =e.numpac
 AND z.PAIEZAD      =e.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;

 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 (SELECT DATE_TRT from GAP_TRT_MAL_RECYCLES  e

 WHERE z.numpac       =e.numpac
 AND  z.PAIEZAD      =e.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 END IF;
 
 if P_DEB_RETRO is null OR to_date(p_PERIODEENCOURS,'YYYYMM') < to_date(P_DEB_RETRO,'YYYYMM') then
 	--Recalcul des période de recueil avec les photos de dach et dac avant de changer de mois, pour corriger les saisies tardives
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, p_PERIODEENCOURS, NULL, NULL, 'O');
 END IF;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
  
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS,isRetro);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
  --Historiser les periodes rétro max par pacmat 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Histo Periode RETRO MAX)','Historiser les periodes rétro max par pacmat pour le numpac : '||P_NUMPAC);
 
 MERGE INTO GAP_TRT_LISTE_MAT_HISTO T USING
 (select numpac,pacmat,min(periode_retro) as periode_retro from
 (select numpac,pacmat,periode_retro from gap_retro_matric where numpac =p_numpac
  union all
  select numpac,pacmat,periode_retro from gap_selection_retro where numpac =p_numpac
 )group by numpac,pacmat)i ON (i.NUMPAC=t.numpac and  i.PACMAT=t.pacmat and  t.PERIODE_PAIE = p_PERIODEENCOURS) 
 when matched then update
 set RETRO_MAX =i.periode_retro ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if isRetro=1 then
 
 BEGIN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV TGE_MODIF_PACMAT_RETRO) ','Sauvegarde de la table TGE_MODIF_PACMAT_RETRO avant purge' );
 
 w_req :='Create TABLE TGE_MODIF_PACMAT_RETRO_'||P_PERIODEENCOURS||' as select * from TGE_MODIF_PACMAT_RETRO '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION
 WHEN OTHERS THEN
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV TGE_MODIF_PACMAT_RETRO) ','la table TGE_MODIF_PACMAT_RETRO_'||P_PERIODEENCOURS||' existe déja ' );
 END ;
 --R046 THN 
 DELETE from TGE_MODIF_PACMAT_RETRO z where z.numpac=p_numpac and not exists(select 1 from GAP_TRT_MAL_RECYCLES e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat and z.DATE_MAJ>e.DATE_TRT) ;
 DELETE from GAP_RETRO_MATRIC z where z.numpac=p_numpac and not exists (select 1 from TGE_MODIF_PACMAT_RETRO e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;
 DELETE from GAP_SELECTION_RETRO z where  z.numpac=p_numpac   and not exists(select 1 from GAP_TRT_MAL_RECYCLES e  WHERE z.numpac =e.numpac AND z.pacmat=e.pacmat);
 --Fin R046
 DELETE FROM GAP_TRT_MOIS_RETRO where  numpac=p_numpac;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insc Retro RELIQ)','Début d inscription retro des tables RELIQ_  pour le numpac : '||P_NUMPAC);
 tge_retro_inscription_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insc Retro RELIQ)','Fin d inscription retro des tables RELIQ_ pour le numpac : '||P_NUMPAC);
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- recalcul du flag SECUPACMAT.PRESENT_FICHIER_PAIE
 R_PRESENT_FICHIER_PAIE( p_numpac , null );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TGE_INSERT_RELIQ
=SQL=
CREATE OR REPLACE PROCEDURE TGE_INSERT_RELIQ (P_ID IN NUMBER,P_NUMPAC IN VARCHAR2 , P_PERIODE IN VARCHAR2 ,is_RETRO NUMBER) AS 
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
BEGIN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_INSERT_RELIQ (Begin)','Début insertion pour le numpac : '||P_NUMPAC);
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_INCIDENTS_PAIE','Insertion dans TGE_RELIQ_INCIDENTS_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_INCIDENTS_PAIE 
  (ID,NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_IP,CODE_IP,DATE_EFFET,CODE_IMPUTATION,HEURES,
   ORIGINE,LOGIN_CREATE,DATE_CREATE,ROLE_CREATE,ORIGINE_CREATE,LOGIN_MAJ,DATE_MAJ,ROLE_MAJ,ORIGINE_MAJ,
   CLE_IMPORT,CLE_ABSENCE,IDPACMAT,ENVOYE,TYPE_WRITER,JOUR_OUVRABLE,JOUR_OUVRE,JOUR_OEUVRE,JOUR_CALENDAIRE)
  select ID,NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_IP,CODE_IP,DATE_EFFET,CODE_IMPUTATION,HEURES,
         ORIGINE,LOGIN_CREATE,DATE_CREATE,ROLE_CREATE,ORIGINE_CREATE,LOGIN_MAJ,DATE_MAJ,ROLE_MAJ,ORIGINE_MAJ,
         CLE_IMPORT,CLE_ABSENCE,IDPACMAT,ENVOYE,TYPE_WRITER,JOUR_OUVRABLE,JOUR_OUVRE,JOUR_OEUVRE,JOUR_CALENDAIRE
  FROM TGE_INCIDENTS_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   to_date(periode) <= to_date(P_PERIODE,'yyyymm')
  AND nvl(ACTION_RETRO,'XyZ') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_DONNEES_PAIE','Insertion dans  TGE_RELIQ_DONNEES_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_DONNEES_PAIE 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_DONNEE,CODE_RUBRIQUE,CODE_CAISSE,NO_SEQUENCE,SENS,CODE_IMPUTATION,
   ORIGINE,NOMBRE,TAUX,MONTANT,POURCENTAGE,DOMAINE_PRCTE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,
   PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,DATE_DEB_ARRET,TYPE_WRITER,PERIODE_AFFECTATION,CODE_REMPLACEMENT)
   
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_DONNEE,CODE_RUBRIQUE,CODE_CAISSE,NO_SEQUENCE,SENS,CODE_IMPUTATION,
         ORIGINE,NOMBRE,TAUX,MONTANT,POURCENTAGE,DOMAINE_PRCTE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,
         PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,DATE_DEB_ARRET,TYPE_WRITER,PERIODE_AFFECTATION,CODE_REMPLACEMENT
  FROM TGE_DONNEES_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE
  AND nvl(ACTION_RETRO,'XyZ') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_ELEMENTS_PAIE','Insertion dans  TGE_RELIQ_ELEMENTS_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_ELEMENTS_PAIE 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,CODE_ELEMENT,INDICATIF,ORIGINE,SENS,VALEUR,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,TYPE_WRITER,CODE_REMPLACEMENT)
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,CODE_ELEMENT,INDICATIF,ORIGINE,SENS,VALEUR,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,TYPE_WRITER,CODE_REMPLACEMENT
  FROM TGE_ELEMENTS_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE
  AND nvl(ACTION_RETRO,'XyZ') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_IMPUTATIONS','Insertion dans  TGE_RELIQ_IMPUTATIONS à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_IMPUTATIONS 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,IMPUTATION,NO_SEQUENCE,ORIGINE,NB_UNITE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,IDPACMAT,TYPE_WRITER)
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,IMPUTATION,NO_SEQUENCE,ORIGINE,NB_UNITE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,IDPACMAT,TYPE_WRITER
  FROM TGE_IMPUTATIONS
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE;
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_PACMAT_TORESEND','Insertion dans  TGE_RELIQ_PACMAT_TORESEND à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  --tge_podif_pamat -retro des mal recycle 
  INSERT INTO TGE_RELIQ_PACMAT_TORESEND 
  (NUMPAC,PACMAT,TABLE_TO_SEND,DATE_MAJ)
  select  NUMPAC,PACMAT,TABLE_TO_SEND,DATE_MAJ
  FROM TGE_MODIF_PACMAT_TORESEND
  WHERE NUMPAC = P_NUMPAC ;
  IF is_RETRO =1 THEN 
  INSERT INTO TGE_RELIQ_PACMAT_TORESEND_RETRO
  WITH LISTE_DICOZ (element) AS ( select element from tge_ref_dicoz where numpac =P_NUMPAC and calcul_RETRO=1),
  LIST_TABLEGXP (tablegxp) as (
  SELECT tablegxp  FROM TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz WHERE NUMPAC =P_NUMPAC and mapdo.element =dicoz.element
  UNION ALL 
  SELECT tablegxp  FROM TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz WHERE NUMPAC ='*' and mapdo.element =dicoz.element
  AND TABLEGXP not in( select TABLEGXP  from TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz  WHERE NUMPAC =P_NUMPAC and mapdo.element =dicoz.element ))

   SELECT * FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC AND TABLE_TO_SEND IN (SELECT TABLEGXP FROM LIST_TABLEGXP);
  END IF;
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_INSERT_RELIQ (End)','Fin insertion pour le numpac : '||P_NUMPAC);
END TGE_INSERT_RELIQ;
##
TGE_RETRO_INSCRIPTION_RELIQ
=SQL=
CREATE OR REPLACE PROCEDURE TGE_RETRO_INSCRIPTION_RELIQ (P_ID IN NUMBER,P_NUMPAC IN VARCHAR2 , P_PERIODE IN VARCHAR2 ) AS 
/********************************************************************************
Version     : V5.05.04
*********************************************************************************/
BEGIN


  FSED.FSED_AVANCEMENT_PLSQL(p_id,'tge_retro_inscription_reliq (Begin)','Début inscription retro des reliq pour le numpac: '||P_NUMPAC);
  
  FOR C IN
 (select numpac,pacmat,periode,min(code_chrono)as CODE_CHRONO ,paiezad,table_maj from 
(
with table_chrono (numpac,pacmat,paiezad, code_chrono,DSDSC,DSFSC) as 
(select numpac,pacmat,paiezad, code_chrono,DSDSC,DSFSC from DIC_ADM_CONTRAT_SITU dacs where numpac=P_NUMPAC)

select tge.numpac,substr(tge.idpacmat,7,length(tge.idpacmat)) as pacmat,tge.periode as periode ,dacs.code_chrono, tge.paiezad ,'TGE_DONNEES_PAIE' as table_maj from TGE_RELIQ_DONNEES_PAIE tge ,table_chrono dacs 
where tge.numpac=P_NUMPAC and tge.numpac=dacs.numpac and  tge.paiezad=dacs.paiezad and substr(tge.idpacmat,7,length(tge.idpacmat))= dacs.pacmat 
and TO_DATE(tge.periode,'YYYYMM') BETWEEN  TRUNC(dacs.DSDSC,'MONTH') AND dacs.DSFSC
union all 
select tge.numpac,substr(tge.idpacmat,7,length(tge.idpacmat))as pacmat,tge.periode as periode,dacs.code_chrono, tge.paiezad ,'TGE_ELEMENTS_PAIE' as table_maj from TGE_RELIQ_ELEMENTS_PAIE  tge ,table_chrono dacs 
where tge.numpac=P_NUMPAC and tge.numpac=dacs.numpac and  tge.paiezad=dacs.paiezad and substr(tge.idpacmat,7,length(tge.idpacmat))= dacs.pacmat 
and TO_DATE(tge.periode,'YYYYMM') BETWEEN  TRUNC(dacs.DSDSC,'MONTH') AND dacs.DSFSC
union all 
select tge.numpac,substr(tge.idpacmat,7,length(tge.idpacmat))as pacmat,to_char(tge.periode,'YYYYMM')as periode,dacs.code_chrono, tge.paiezad ,'TGE_INCIDENTS_PAIE' as table_maj from TGE_RELIQ_INCIDENTS_PAIE  tge ,table_chrono dacs 
where tge.numpac=P_NUMPAC and tge.numpac=dacs.numpac and  tge.paiezad=dacs.paiezad and substr(tge.idpacmat,7,length(tge.idpacmat))= dacs.pacmat 
and to_date(tge.periode) BETWEEN  TRUNC(dacs.DSDSC,'MONTH') AND dacs.DSFSC
union all
select tge.numpac,tge.pacmat as pacmat ,P_PERIODE as periode,dacs.code_chrono, dacs.paiezad,tge.table_to_send  as table_maj from TGE_RELIQ_PACMAT_TORESEND_RETRO tge,table_chrono dacs 
where tge.numpac=P_NUMPAC and tge.numpac=dacs.numpac  and tge.pacmat= dacs.pacmat 
and to_date(P_PERIODE,'YYYYMM') BETWEEN  TRUNC(dacs.DSDSC,'MONTH') AND dacs.DSFSC)
group by numpac,pacmat,periode,paiezad,table_maj
 )
 LOOP
   TGE_RETRO_INSCRIPTION(C.NUMPAC, C.PACMAT,C.periode, C.CODE_CHRONO, C.PAIEZAD, C.table_maj); 
 END LOOP;
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'tge_retro_inscription_reliq (End)','Fin inscription retro des reliq pour le numpac : '||P_NUMPAC);
END TGE_RETRO_INSCRIPTION_RELIQ;
##
TAG_CHARSET=@€éèç
##
ALERT_BATCH1
=SQL IFEXIST=ALERT_BATCH1=ID3=
ALTER TABLE ALERT_BATCH1 MODIFY ID3  VARCHAR2(250)
##
ALERT_BATCH1
=SQL IFEXIST=ALERT_BATCH1=ID4=
ALTER TABLE ALERT_BATCH1 MODIFY ID4  VARCHAR2(250)
##
TAG_CHARSET=@€éèç
##
ALERT_BATCH2
=SQL IFEXIST=ALERT_BATCH2=ID3=
ALTER TABLE ALERT_BATCH2 MODIFY ID3  VARCHAR2(250)
##
ALERT_BATCH2
=SQL IFEXIST=ALERT_BATCH2=ID4=
ALTER TABLE ALERT_BATCH2 MODIFY ID4  VARCHAR2(250)
##
TAG_CHARSET=@€éèç
##
ALERT_BATCH2_TMP
=SQL IFEXIST=ALERT_BATCH2_TMP=ID3=
ALTER TABLE ALERT_BATCH2_TMP MODIFY ID3  VARCHAR2(250)
##
ALERT_BATCH2_TMP
=SQL IFEXIST=ALERT_BATCH2_TMP=ID4=
ALTER TABLE ALERT_BATCH2_TMP MODIFY ID4  VARCHAR2(250)
##
DEL_FONCTIONMETIER
==
DELETE FROM DEL_FONCTIONMETIER WHERE CODE_FCTMETIER =-2
-2,'Modules/AdpUx/UxPtoMgr.jsp','E'
-2,'Modules/AdpUx/UxPlanningMgr.jsp','E'
-2,'Modules/AdpUx/UxTimeBIMgr.jsp','E'
##
DEL_FONCTIONMETIER
==
DELETE FROM DEL_FONCTIONMETIER WHERE CODE_FCTMETIER =-2 AND ID_ECRANPROCESSUS in ('Modules/AdpUx/UxTimesheetMgr.jsp','Modules/AdpUx/UxCalendarMgr.jsp')
-2,'Modules/AdpUx/UxTimesheetMgr.jsp','E'
-2,'Modules/AdpUx/UxCalendarMgr.jsp','E'
##
DEL_FONCTIONMETIER
==
DELETE FROM DEL_FONCTIONMETIER WHERE CODE_FCTMETIER in (-1,-3,-4)
-1,'Modules/AdpUx/UxTeamMgr.jsp','E'
-1,'Modules/AdpUx/UxProfileMgr.jsp','E'
-1,'Modules/AdpUx/UxFamilyMgr.jsp','E'
-1,'Modules/AdpUx/UxPayMgr.jsp','E'
-1,'Modules/AdpUx/UxPayBankMgr.jsp','E'
-3,'Modules/AdpUx/UxPayAdvanceMgr.jsp','E'
-3,'Modules/AdpUx/UxTeamMgr.jsp','E'
-4,'Modules/AdpUx/UxCertificateMgr.jsp','E'
-4,'Modules/AdpUx/UxTeamMgr.jsp','E'
##
DEL_FONCTIONMETIER_LIB
==
DELETE FROM DEL_FONCTIONMETIER_LIB  WHERE CODE_FCTMETIER =-1
-1,'Gestion des dossiers',0,'UX - Gestion des dossiers'
##
DEL_FONCTIONMETIER_LIB
==
DELETE FROM DEL_FONCTIONMETIER_LIB  WHERE CODE_FCTMETIER =-2
-2,'Gestion des temps',0,'UX - Gestion des temps'
##
DEL_FONCTIONMETIER_LIB
==
DELETE FROM DEL_FONCTIONMETIER_LIB  WHERE CODE_FCTMETIER in (-1,-3,-4)
-1,'Gestion des données personnelles',0,'UX -  Gestion des données personnelles'
-3,'Gestion des acomptes',0,'UX -  Gestion des acomptes'
-4,'Gestion des attestations',0,'UX -  Gestion des attestations'
##
TAG_CHARSET=@€éèç
##
EDI_EXPORT_DOC_ESIGN
=SQL IFNOTEXIST=EDI_EXPORT_DOC_ESIGN=
CREATE TABLE "EDI_EXPORT_DOC_ESIGN" ( "ID_DOC_CONTAINER" VARCHAR2(24 BYTE), "STATUT_EXPORT" VARCHAR2(10), "DATE_EXPORT" VARCHAR2(14 BYTE), PRIMARY KEY ("ID_DOC_CONTAINER"))
##
TAG_CHARSET=@€éèç
##
GAP_TRT_MAL_RECYCLES
=SQL IFNOTEXIST=GAP_TRT_MAL_RECYCLES=
CREATE TABLE GAP_TRT_MAL_RECYCLES(ID_TRT NUMBER NOT NULL ENABLE ,NUMPAC  VARCHAR2(6 BYTE) NOT NULL ENABLE,PACMAT VARCHAR2(8 BYTE) NOT NULL ENABLE,PAIEZAD VARCHAR2(8 BYTE) NOT NULL ENABLE ,DATE_TRT DATE,PRIMARY KEY ( NUMPAC,PACMAT,PAIEZAD))
##
HELPDESK_FICHE
=SQL IFNOTEXIST=HELPDESK_FICHE=NOTIFICATIONINDICATOR=
ALTER TABLE HELPDESK_FICHE ADD NOTIFICATIONINDICATOR VARCHAR(5)
##
HELPDESK_FICHE
=SQL IFNOTEXIST=HELPDESK_FICHE=OBJET_ESERVICE=
ALTER TABLE HELPDESK_FICHE ADD OBJET_ESERVICE varchar2(100)
##
TAG_CHARSET=@€éèç
##
HELPDESK_STATUT
==
DELETE FROM HELPDESK_STATUT WHERE LIBSTA IN ( 'En cours de traitement','Réalisé' )
'2','En cours de traitement','2','O','O','O','HDECT','Ouverte'
'6','Réalisé','4','O','N','O','HDREA','Fermée'
##
HELPDESK_STATUT
=SQL IFNOTEXIST=HELPDESK_STATUT=AFFICHSTA=
ALTER TABLE HELPDESK_STATUT ADD AFFICHSTA NUMBER
##
HELPDESK_STATUT
==
UPDATE HELPDESK_STATUT SET AFFICHSTA = '10' WHERE  CODSTA IN ('1','3')
##
HELPDESK_STATUT
=SQL IFNOTEXIST=HELPDESK_STATUT=READONLY=
ALTER TABLE HELPDESK_STATUT ADD READONLY VARCHAR2(1 BYTE)
##
HELPDESK_STATUT
==
UPDATE HELPDESK_STATUT SET READONLY = 'N' WHERE  CODSTA IN ('1','3')
##
HELPDESK_STATUT
==
UPDATE HELPDESK_STATUT SET READONLY = 'O' WHERE  CODSTA IN ('6','10','2')
##
TAG_CHARSET=@€éèç
##
MAIL_NONCONFORME_RFC
=SQL IFNOTEXIST=MAIL_NONCONFORME_RFC=
CREATE TABLE MAIL_NONCONFORME_RFC   (	"NOM_TABLE" VARCHAR2(50 BYTE) NOT NULL ENABLE,	"NOM_COLONNE" VARCHAR2(50 BYTE) NOT NULL ENABLE,	"VALEUR" VARCHAR2(250 BYTE),	"CLE" VARCHAR2(250 BYTE)   )
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('PersonImmigrationDocument0IssuingPartyNameCodeCodeValue','PersonLegalAddressCityName','PersonOtherPersonalAddressesCityName')
'PersonImmigrationDocument0IssuingPartyNameCodeCodeValue','issuingPartyImmDoc'
'PersonLegalAddressCityName','bureauDistribEtrFiscal'
'PersonOtherPersonalAddressesCityName','bureauDistribEtrPerso'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE (DATA_NAME_MP='PersonLegalAddressPostalCode' AND DATA_NAME_MP_ALP='postalCodeEtrFiscal') OR (DATA_NAME_MP='PersonOtherPersonalAddressesPostalCode' AND DATA_NAME_MP_ALP='postalCodeEtrPerso') OR (DATA_NAME_MP='DependentsPersonSocialInsurancePrograms1CoveredIndicator' AND DATA_NAME_MP_ALP='dependentConjointHealthInsuranceCoveredIndicator')
'PersonLegalAddressPostalCode','postalCodeEtrFiscal'
'PersonOtherPersonalAddressesPostalCode','postalCodeEtrPerso'
'DependentsPersonSocialInsurancePrograms1CoveredIndicator','dependentConjointHealthInsuranceCoveredIndicator'
##
MP_REF_DATA_ALP
==
DELETE FROM MP_REF_DATA_ALP WHERE DATA_NAME_MP IN ('PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_EKEY','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_IDENTIFIANT','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAT','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAYEUR','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALFIX','PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALNET')
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_EKEY','MDEkey'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_IDENTIFIANT','MDIdentifiant'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAT','MDPat'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_PAYEUR','MDPayeur'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALFIX','MDSalFix'
'PayrollsummaryEarningssummaryEarningssummarysectionsEarningssummaryitemsEarningIdMD_SALNET','MDSalNet'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and  CODERR = 'GENHOZ02' 
'GENHOZ02','GEN','fr_fr','0','Le nombre de jours hebdo de TAD ne peut pas être supérieur à 6 jours. Veuillez corriger votre saisie;','1'
##
SYS_DEF_ERREURS
==
delete from SYS_DEF_ERREURS where CODMOD = 'TGE' and CODLANG = 'fr_fr' and NIV_DEFINITION = '0' and CODERR in ('TGE00354')
'TGE00354','TGE','fr_fr',0,'Êtes-vous sûr de vouloir changer le statut de votre demande à ',1
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('TAB_RD_CODET_DETAC_1','TAB_RD_COT_CFE_1','TAB_RD_LIEU_DETAC_1','TAB_RD_MAL_CFE_1','TAB_RD_MOTIF_EXPAT_1','TAB_RD_POLEM_EXP_1','TAB_RD_TYPE_EXPAT_DETAC_1','TAB_RD_VIEIL_CFE_1')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_CODET_DETAC','1','Utilisateur','CODET','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie particuliers - détachés','Code,Libellé'
'TAB_RD_COT_CFE','1','Utilisateur','CFE','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code CFE - expat','Code,Libellé'
'TAB_RD_LIEU_DETAC','1','Utilisateur','GA_LIDET','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Lieux détachements','Code,Libellé'
'TAB_RD_MAL_CFE','1','Utilisateur','CATMA','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie MALADIE CFE - expat','Code,Libellé'
'TAB_RD_MOTIF_EXPAT','1','Utilisateur','GA_EXPAT','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Motifs expatriation','Code,Libellé'
'TAB_RD_POLEM_EXP','1','Utilisateur','POLEM','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Codes particuliers PE - expat','Code,Libellé'
'TAB_RD_TYPE_EXPAT_DETAC','1','Utilisateur','GA_DETAC','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Type expatriation ou détachement','Code,Libellé'
'TAB_RD_VIEIL_CFE','1','Utilisateur','CATVI','CODE, LIBELLE','CODE, LIBELLE',NULL,'0','false','CODE',NULL,'Code catégorie VIEILLESSE CFE - expat','Code,Libellé'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('RD_TAB_LIBELLE_CODE_NBCFE_1','REG_RD_NBCFE_ALIM_1')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'RD_TAB_LIBELLE_CODE_NBCFE','1','Utilisateur','(SELECT¿''Pilotage via Vri 2057'' AS libelle, ''0'' AS CODE FROM DUAL ¿UNION ALL¿SELECT¿''Entre 0 et 100 salariés expatriés'' AS LIBELLE, ''1'' AS CODE FROM DUAL¿UNION ALL¿SELECT¿''Entre 100 et 400 salariés expatriés'' AS LIBELLE, ''2'' AS CODE FROM DUAL)','CODE, LIBELLE','CODE, LIBELLE','CODE=''%1''',NULL,'false',NULL,NULL,'Libellé code nb CFE','CODE, LIBELLE'
'REG_RD_NBCFE_ALIM','1','Utilisateur','DIC_SOCIETE','RD_NBCFE','RD_NBCFE','CODSTE_STE=''%1''','0','false',NULL,NULL,'Alimentation du nombre d''adhérents CFE en retour société','Nb CFE'
##
SYS_REQUETES_JSP
==
DELETE FROM SYS_REQUETES_JSP WHERE NOMPAGE||'_'||IDREQUETE IN ('REG_RD_NB_HISTO_C2P_1')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'REG_RD_NB_HISTO_C2P','1','Administrateur','DIC_C2P_HISTO','COUNT(*)','COUNT(*)','NUMPAC=''%1'' AND PACMAT = ''%2''','0','false',NULL,NULL,'Nombre d''histo déclaratif médical','nb'
##
SYS_SERVICELET
==
DELETE FROM SYS_SERVICELET WHERE TYP='T' and SYNONYME='Traitement_CompleteRetroTardive' 
'T','Traitement_CompleteRetroTardive','fr.adp.com.gxp.std.modules.lib.objects.zpaie.mgr.Traitement_CompleteRetroTardive','O'
##
SYS_TRT_TOMAKE
==
DELETE FROM SYS_TRT_TOMAKE WHERE ID_TRT = 'Traitement_ControleMail' 
'Traitement_ControleMail','00'
##
SYS_TRT_TOMAKE
==
insert into sys_trt_tomake (ID_TRT,REQUESTEDGO_OR_FREQUENCY)  select 'Traitement_CompleteRetroTardive?NUMPAC=XXXXX&PERIODE=YYYYMM','00' from dual where not exists ( select 1 from sys_trt_tomake where id_trt like 'Traitement_CompleteRetroTardive%')
##
SYS_TRT_TOMAKELIB
==
DELETE FROM SYS_TRT_TOMAKELIB WHERE ID_TRT like 'Traitement_ControleMail' 
'Traitement_ControleMail','Conformité des adresses mails à la norme.'
##
SYS_TRT_TYPE
==
DELETE FROM SYS_TRT_TYPE WHERE TYPE_TRAITEMENT = 'Traitement_ControleMail'
'Traitement_ControleMail','Conformité des adresses mails à la norme.',NULL
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='UX' and CODVAR='UX_MOTIFEVT_AFF'
'UX', 'UX_MOTIFEVT_AFF', '', 'Texte', 'Indique la liste de codes de motifs d’absence autorises a etre affiches sur le planning des collegues (MonAdp). Il s’agit d’une liste de codes separes par des virgules, par exemple : FA, FP, FH.'
##
SYS_VARSYS
==
DELETE SYS_VARSYS WHERE  MODULE='GAP' and CODVAR='GESTIL_ATTENTE_PAI'
'GAP', 'GESTIL_ATTENTE_PAI', '1800', 'Entier', 'Indique en secondes le temps maximum pendant lequel le traitement de paie attend le calcul des PAI dans GESTIL.'
##
TAG_CHARSET=@€éèç
##
TABLE_MAIL_RFC
=SQL IFNOTEXIST=TABLE_MAIL_RFC=
CREATE TABLE TABLE_MAIL_RFC   (	"NOM_TABLE" VARCHAR2(20 BYTE) NOT NULL ENABLE,	"NOM_COLONNE" VARCHAR2(20 BYTE) NOT NULL ENABLE ,PRIMARY KEY ("NOM_TABLE", "NOM_COLONNE")  )
##
TABLE_MAIL_RFC
==
delete from TABLE_MAIL_RFC where NOM_TABLE='WKF_OP_SPECIALES' and NOM_COLONNE in( 'CR_MAILING_ALLER','CR_MAILING_RETOUR')
'WKF_OP_SPECIALES','CR_MAILING_ALLER'
'WKF_OP_SPECIALES','CR_MAILING_RETOUR'
##
TGE_GESTIL_ENVOI_PAI
=SQL IFNOTEXIST=TGE_GESTIL_ENVOI_PAI=IDENT=
alter table tge_gestil_envoi_pai add IDENT varchar2(40)
##
TGE_GESTIL_ENVOI_PAI
=SQL IFNOTEXIST=TGE_GESTIL_ENVOI_PAI=STATUS=
alter table tge_gestil_envoi_pai add STATUS varchar2(2)
##
TAG_CHARSET=@€éèç
##
TGE_REF_CARTE_FSED
=SQL IFEXIST=TGE_REF_CARTE_FSED=FORMATAGE_SQL=
ALTER TABLE TGE_REF_CARTE_FSED MODIFY FORMATAGE_SQL VARCHAR2(3500 BYTE)
##
TGE_REF_CARTE_FSED
==
DELETE from TGE_REF_CARTE_FSED where CODE_CARTE in ('00','00_ALP','11','29_30_DIF_FSED','29_30_DIF_FSED_RETRO','29_30_TGE_ELEMENT_PAIE','29_30_TGE_ELEMENT_PAIE_RETRO','309','309_RETRO','30_SIMULATION_PAIE','40','40_RETRO','409','409_RETRO','40_SIMULATION_PAIE','50','509','60','60_RETRO','609','609_RETRO','60_ABSENCES','60_SIMULATION_PAIE','70','70_RETRO','70_SIMULATION_PAIE','99','ANNULATION','ANNULATION_RETRO','ANNULATION_PERIODE_EMPLOI','IJEDI','W566','W566_RETRO','WL70','WL70_RETRO') and ORIGINE_CARTE='RD'
##
TGE_REF_CARTE_FSED
'00','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','005','TGE',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'00_ALP','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','002','00',NULL,NULL,'2','0','FALSE',NULL,NULL
'00_ALP','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','004',NULL,'TGE_REF_PAC','STATION_WEB','6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','005','ALP',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','006',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','007','5.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','009',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','010','Z2M',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','012','4.00  ',NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'PARAM_ORIGINE(NUMERO_ECHANGE)'
'00_ALP','RD','SELECT','015',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'00_ALP','RD','SELECT','016',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'00_ALP','RD','SELECT','017',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,'FORMATAGE_TYPE_PASSAGE'
'00_ALP','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'00_ALP','RD','SELECT','019','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','020','1.00',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','021','181',NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','022',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','023',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','024',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'00_ALP','RD','SELECT','026',NULL,NULL,NULL,'153',NULL,'FALSE',NULL,NULL
'00_ALP','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'00_ALP','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC =  @@@NUMPAC@@@',NULL
'11','RD','SELECT','001',NULL,'TGE_REF_VRVAL','NUMERO_DE_PAC','6','0','FALSE',NULL,NULL
'11','RD','SELECT','002','11',NULL,NULL,'2','0','FALSE',NULL,NULL
'11','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','004',NULL,'TGE_REF_VRVAL','CODE_TABLE','3',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,0,3)'
'11','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,'FORMATAGE_SUBSTRING(CODE_TABLE,4,2)'
'11','RD','SELECT','007',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','008','V',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','009',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','011',NULL,'TGE_REF_VRVAL','NUMERO_DE_LIGNE','1',NULL,'FALSE','SUBSTR(@COLONNE_CIBLE@,9,1)',NULL
'11','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','013',NULL,'TGE_REF_VRVAL','LONGUEUR_INFO','3','0','FALSE',NULL,NULL
'11','RD','SELECT','014',NULL,'TGE_REF_VRVAL','ENREGISTREMENT','86',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','015',NULL,NULL,NULL,'66',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','016',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','018','3',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','019',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'11','RD','SELECT','020',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'11','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','024',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'11','RD','SELECT','025',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'11','RD','SELECT','026',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'11','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL',NULL
'11','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRREP',NULL
'11','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_VRVAL.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.NUMERO_DE_PAC = @@@NUMPAC@@@',NULL
'11','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.NUMERO_DE_PAC = TGE_REF_VRREP.NUMERO_DE_PAC',NULL
'11','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRVAL.CODE_TABLE = TGE_REF_VRREP.CODE_TABLE',NULL
'11','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_VRREP.TEMOIN_VR_BASE in(''O'',''K'')',NULL
'29_30_DIF_FSED','RD','SELECT','001',NULL,'DIF_FSED','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','001',NULL,'DIF_FSED_PARTIERETRO','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','004',NULL,'DIF_FSED','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','004',NULL,'DIF_FSED_PARTIERETRO','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','007',NULL,'DIF_FSED','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','007',NULL,'DIF_FSED_PARTIERETRO','ELEM','4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','009',NULL,'DIF_FSED','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','009',NULL,'DIF_FSED_PARTIERETRO','OCC','16',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','012',NULL,'DIF_FSED','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED_RETRO','RD','SELECT','012',NULL,'DIF_FSED_PARTIERETRO','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_DONNEE_VALEUR'
'29_30_DIF_FSED','RD','SELECT','013',NULL,'DIF_FSED','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','013',NULL,'DIF_FSED_PARTIERETRO','TYPE_DONNEE','1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE_DONNEE'
'29_30_DIF_FSED','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_DIF_FSED','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_DIF_FSED','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_DIF_FSED','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED_RETRO','RD','SELECT','021','DIF_FSED_PARTIERETRO',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_DIF_FSED','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_DIF_FSED','RD','SELECT','024',NULL,'DIF_FSED','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED_RETRO','RD','SELECT','024',NULL,'DIF_FSED_PARTIERETRO','DTEFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')','FORMATAGE_DATE_EFFET'
'29_30_DIF_FSED','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_DIF_FSED_RETRO','RD','SELECT','025',NULL,'DIF_FSED_PARTIERETRO','PERIODE','6',0,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_DIF_FSED','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',' TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','/*+ FULL(DIF_FSED_PARTIERETRO)*/ TGE_REF_DICOZ.MASQUE',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CODEOP',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CODEOP',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_DIF_FSED','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED.CLE',NULL
'29_30_DIF_FSED_RETRO','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DIF_FSED_PARTIERETRO.CLE',NULL
'29_30_DIF_FSED','RD','FROM_WITH','001',NULL,'DAC',NULL,NULL,NULL,NULL,'WITH DAC AS (select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') group by C.MATRIC,C.PACMAT,DACH.PAIEZAD)',NULL
'29_30_DIF_FSED','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED',NULL
'29_30_DIF_FSED_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO',NULL
'29_30_DIF_FSED','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_DIF_FSED','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_DIF_FSED','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ID_TRT = @@@ID_TRT@@@',NULL
'29_30_DIF_FSED','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD = DAC.PAIEZAD',NULL
'29_30_DIF_FSED','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.ELEM = TGE_REF_DICOZ.ELEMENT',NULL
'29_30_DIF_FSED','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and DIF_FSED_PARTIERETRO.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC = @@@NUMPAC@@@)',NULL
'29_30_DIF_FSED','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'PAIEZAD,ELEM,CLE,CODEOP,OCC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','001',NULL,'TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','004',NULL,'TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','007',NULL,'TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','009',NULL,'TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','011',NULL,'TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','012',NULL,'TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','019',NULL,'TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','020',NULL,'TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','021',NULL,'TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','022',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','023',NULL,'TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','024',NULL,'TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','SELECT','025',NULL,'TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'29_30_TGE_ELEMENT_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE',NULL
'29_30_TGE_ELEMENT_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ELEMENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ELEMENTS_PAIE.ORIGINE is null or TGE_ELEMENTS_PAIE.ORIGINE = ''T'' or TGE_ELEMENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT is not null) ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ELEMENTS_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ @@@PERIODE_PAIE@@@ and TGE_ELEMENTS_PAIE.ACTION_RETRO is null ',NULL
'29_30_TGE_ELEMENT_PAIE_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' AND TGE_ELEMENTS_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=tge_elements_paie.idpacmat) AND TGE_ELEMENTS_PAIE.ACTION_RETRO is not null ',NULL
'29_30_TGE_ELEMENT_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'309','RD','SELECT','001',NULL,'MAJELEM','PAC','6','0','FALSE',NULL,NULL
'309','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'309','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','004',NULL,'MAJELEM','MATPAIE','8','0','FALSE',NULL,NULL
'309','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'309','RD','SELECT','007',NULL,'MAJELEM','NUMERO','4','0','FALSE',NULL,NULL
'309','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','009',NULL,'MAJELEM','INDICATI','16',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','011',NULL,'MAJELEM','SENS','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','012',NULL,'MAJELEM','INFORMAT','40',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','015',NULL,NULL,NULL,'76',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','016',NULL,'MAJELEM','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'309','RD','SELECT','017',NULL,'MAJELEM','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'309','RD','SELECT','018',NULL,'MAJELEM','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'309','RD','SELECT','019',NULL,'MAJELEM','CODR','1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','020','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','021',NULL,'MAJELEM','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'309','RD','SELECT','022',NULL,'MAJELEM','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'309','RD','SELECT','023',NULL,'MAJELEM','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'309','RD','SELECT','024',NULL,'MAJELEM','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','026','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','030','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'309','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'309','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM',NULL
'309','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'309_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'309','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'309_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(MAJELEM.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'309','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'309_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT ',NULL
'309','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'309','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'309_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJELEM.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'309','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJELEM.MATRICUL,MAJELEM.NUMERO',NULL
'30_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_ELEMENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_ELEMENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_ELEMENT','4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_ELEMENTS_PAIE','INDICATIF','16',NULL,'FALSE',NULL,'FORMATAGE_INDICATIF'
'30_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_ELEMENTS_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_ELEMENTS_PAIE','VALEUR','40',NULL,'FALSE',NULL,'FORMATAGE_TYPE_VALEUR'
'30_SIMULATION_PAIE','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'30_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'30_SIMULATION_PAIE','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'30_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_ELEMENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'30_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_ELEMENTS_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE','CASE WHEN SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT = ''*'' THEN '''' ELSE SIMU_TGE_ELEMENTS_PAIE.CODE_REMPLACEMENT END',NULL
'30_SIMULATION_PAIE','RD','SELECT','021',NULL,'SIMU_TGE_ELEMENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'30_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'30_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_ELEMENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'30_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_ELEMENTS_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'30_SIMULATION_PAIE','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','SIMU_TGE_ELEMENTS_PAIE.DERNIER_CODE_OPE',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'30_SIMULATION_PAIE','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'30_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'30_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE',NULL
'30_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'30_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_ELEMENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'30_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.PAIEZAD = DAC.PAIEZAD ',NULL
'30_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT = TGE_REF_DICOZ.ELEMENT ',NULL
'30_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD, SIMU_TGE_ELEMENTS_PAIE.CODE_ELEMENT',NULL
'40','RD','SELECT','001',NULL,'TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','004',NULL,'TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','007',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','012',NULL,'TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','016',NULL,'TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40','RD','SELECT','017',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','018',NULL,'TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40','RD','SELECT','019',NULL,'TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40','RD','SELECT','020',NULL,'TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','022',NULL,'TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40','RD','SELECT','023',NULL,'TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40','RD','SELECT','029',NULL,'TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','031',NULL,'TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','032',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40','RD','SELECT','033',NULL,'TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40','RD','SELECT','034',NULL,'TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40','RD','SELECT','035',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'40_RETRO','RD','SELECT','035',NULL,'TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','037',NULL,'TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'  /*+ opt_param(''_optimizer_push_pred_cost_based'',''false'') */ TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) group by DACH2.PACMAT,DACH2.NUMCNT,DACH2.NUMPAC ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'40','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'40','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'40','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'40','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'40','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'40','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') @@@OPERATEUR_RETRO@@@ TGE_REF_PAC.PERIODEENCOURS and TGE_INCIDENTS_PAIE.ACTION_RETRO is null ',NULL
'40_RETRO','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,' and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_INCIDENTS_PAIE.idpacmat) and NVL(TGE_INCIDENTS_PAIE.DERNIER_CODE_OPE,''M'')!=''S'' ',NULL
'40','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE = TGE_REF_PAC.PERIODEENCOURS',NULL
'40_RETRO','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'40','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'40','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET <= TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40_RETRO','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'40','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'40','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE @@@OPERATEUR_RETRO@@@ (select PERIODEENCOURS from tge_ref_pac where NUMPAC = @@@NUMPAC@@@) ',NULL
'40_RETRO','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE in (SELECT periode_retro FROM gap_trt_mois_retro g WHERE id_trt =@@@ID_TRT@@@ and G.NUMPAC=TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC and G.pacmat=TGE_PERIODE_RECUEIL_PAIEZAD.pacmat) ',NULL
'40','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'409','RD','SELECT','001',NULL,'POINTAGE','PAC','6','0','FALSE',NULL,NULL
'409','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'409','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','004',NULL,'POINTAGE','MATPAIE','8','0','FALSE',NULL,NULL
'409','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'409','RD','SELECT','007',NULL,'POINTAGE','PTJDEB','8',NULL,'FALSE','TO_CHAR(PTJDEB,''YYYYMMDD'')',NULL
'409','RD','SELECT','008',NULL,'POINTAGE','PTJFIN','8',NULL,'FALSE','TO_CHAR(PTJFIN,''YYYYMMDD'')',NULL
'409','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','016',NULL,'POINTAGE','PTJHT','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_TRAVAILLEES'
'409','RD','SELECT','017',NULL,'POINTAGE','PTJHT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','018',NULL,'POINTAGE','PTJHI','5','0','TRUE',NULL,'FORMATAGE_40_HEURES_INCIDENT'
'409','RD','SELECT','019',NULL,'POINTAGE','PTJHI','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'409','RD','SELECT','020',NULL,'POINTAGE','PTJCI','5',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','022',NULL,'POINTAGE','IMP','18',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','023',NULL,'POINTAGE','DOMIMP','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','024',NULL,'POINTAGE','REF','6',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','025',NULL,'POINTAGE','DOMREF','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','027',NULL,'POINTAGE','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'409','RD','SELECT','028',NULL,'POINTAGE','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'409','RD','SELECT','029',NULL,'POINTAGE','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'409','RD','SELECT','030',NULL,'POINTAGE','CODR','1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','031','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','032',NULL,'POINTAGE','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'409','RD','SELECT','033',NULL,'POINTAGE','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'409','RD','SELECT','034',NULL,'POINTAGE','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'409','RD','SELECT','035',NULL,'POINTAGE','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','037','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','041','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'409','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'409','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as TYPE_IP_FROM_TABLE',NULL
'409','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE',''' '' as CODE_IP_FROM_TABLE',NULL
'409','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE',NULL
'409','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'409_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'409','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'409_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO = TO_CHAR(TO_DATE(POINTAGE.PERIODE,''MMYYYY''),''YYYYMM'')',NULL
'409','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'409_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'409','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'409','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'409_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and POINTAGE.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'409','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'POINTAGE.MATRICUL',NULL
'40_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_INCIDENTS_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','002','40',NULL,NULL,'2','0','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_INCIDENTS_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','009',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','010',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','011',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_IP','1',NULL,'FALSE','CASE WHEN @COLONNE_CIBLE@ = ''R'' THEN ''R'' WHEN @COLONNE_CIBLE@ = ''T'' THEN ''T'' ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','014','F',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_T','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_TRAVAILLEES'
'40_SIMULATION_PAIE','RD','SELECT','017',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HT','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_INCIDENTS_PAIE','HEURES_I','5','0','TRUE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'') THEN '' '' ELSE nvl(TO_CHAR(SIMU_TGE_INCIDENTS_PAIE.HEURES),'' '') END','FORMATAGE_40_HEURES_INCIDENT'
'40_SIMULATION_PAIE','RD','SELECT','019',NULL,'SIMU_TGE_INCIDENTS_PAIE','TEMOIN_HI','1','0','FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') and SIMU_TGE_INCIDENTS_PAIE.HEURES is not null  THEN ''1'' WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') and CODE_IP is not null THEN ''1'' ELSE ''0'' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IP','5',NULL,'FALSE','CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''T'') THEN to_char(SIMU_TGE_INCIDENTS_PAIE.CODE_IP) ELSE '' '' END',NULL
'40_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_INCIDENTS_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,'FORMATAGE_40_IMPUTATION'
'40_SIMULATION_PAIE','RD','SELECT','023',NULL,'SIMU_TGE_INCIDENTS_PAIE','DOM_IMPUTATION','1',NULL,'FALSE','CASE WHEN SIMU_TGE_INCIDENTS_PAIE.CODE_IMPUTATION is null THEN '''' ELSE CASE WHEN (SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''A'' or SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''P'') THEN ''1'' WHEN SIMU_TGE_INCIDENTS_PAIE.TYPE_IP = ''R'' THEN ''H'' ELSE '' '' END END',NULL
'40_SIMULATION_PAIE','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','026',NULL,NULL,NULL,'73',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','027',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'40_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'40_SIMULATION_PAIE','RD','SELECT','029',NULL,'SIMU_TGE_INCIDENTS_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'40_SIMULATION_PAIE','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_INCIDENTS_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'40_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'40_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_INCIDENTS_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_INCIDENTS_PAIE','PERIODE','6',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')',NULL
'40_SIMULATION_PAIE','RD','SELECT','036',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','037',NULL,'SIMU_TGE_INCIDENTS_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','038',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'40_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.TYPE_IP as TYPE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.CODE_IP as CODE_IP_FROM_TABLE',NULL
'40_SIMULATION_PAIE','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'40_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'40_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE',NULL
'40_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'40_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_INCIDENTS_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'40_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD  ',NULL
'40_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_INCIDENTS_PAIE.DATE_EFFET',NULL
'50','RD','SELECT','001',NULL,'TGE_IMPUTATIONS','NUMPAC','6','0','FALSE',NULL,NULL
'50','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'50','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','004',NULL,'TGE_IMPUTATIONS','PAIEZAD','8','0','TRUE',NULL,NULL
'50','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','007',NULL,'TGE_IMPUTATIONS','NB_UNITE','15','0','TRUE',NULL,'FORMATAGE_NBRE_IMPUTATION'
'50','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','009',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','011',NULL,'TGE_IMPUTATIONS','IMPUTATION','18',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','015',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','016',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'50','RD','SELECT','017',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'50','RD','SELECT','018',NULL,'TGE_IMPUTATIONS','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'50','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','020',NULL,'TGE_IMPUTATIONS','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','021',NULL,'TGE_IMPUTATIONS','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'50','RD','SELECT','022',NULL,'TGE_IMPUTATIONS','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'50','RD','SELECT','023',NULL,'TGE_IMPUTATIONS','PERIODE','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'50','RD','SELECT','024',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'50','RD','SELECT','025',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','026',NULL,'TGE_IMPUTATIONS','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'50','RD','SELECT','029',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'50','RD','SELECT','030',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'50','RD','SELECT','031',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'50','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'50','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'50','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS',NULL
'50','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_IMPUTATIONS.NUMPAC = @@@NUMPAC@@@',NULL
'50','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PAIEZAD = DAC.PAIEZAD',NULL
'50','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.DERNIER_CODE_OPE <> ''S''',NULL
'50','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_IMPUTATIONS.ORIGINE is null or TGE_IMPUTATIONS.ORIGINE = ''T'' or TGE_IMPUTATIONS.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( (MODE_3060 = ''R'' or MODE_3060 = ''F'') and ENVOI_MODE_R = ''O'' ))))',NULL
'50','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_IMPUTATIONS.PERIODE <= @@@PERIODE_PAIE@@@',NULL
'50','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'509','RD','SELECT','001',NULL,'MAJIMPU','PAC','6','0','FALSE',NULL,NULL
'509','RD','SELECT','002','50',NULL,NULL,'2','0','FALSE',NULL,NULL
'509','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','004',NULL,'MAJIMPU','MATPAIE','8','0','FALSE',NULL,NULL
'509','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'509','RD','SELECT','007',NULL,'MAJIMPU','NOMBRE','15','0','FALSE',NULL,NULL
'509','RD','SELECT','008',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','009',NULL,'MAJIMPU','CODEUTIL','3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','010',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','011',NULL,'MAJIMPU','IMPUTATI','18',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','012',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','014',NULL,NULL,NULL,'106',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','015',NULL,'MAJIMPU','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'509','RD','SELECT','016',NULL,'MAJIMPU','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'509','RD','SELECT','017',NULL,'MAJIMPU','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'509','RD','SELECT','018',NULL,'MAJIMPU','CODR','1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','019','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','020',NULL,'MAJIMPU','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'509','RD','SELECT','021',NULL,'MAJIMPU','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'509','RD','SELECT','022',NULL,'MAJIMPU','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'509','RD','SELECT','023',NULL,'MAJIMPU','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'509','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','025','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','026',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','027',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','028',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','029','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'509','RD','SELECT','030',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'509','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU',NULL
'509','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'509','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'509','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'509','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'509','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and MAJIMPU.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'509','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'MAJIMPU.MATRICUL',NULL
'60','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'60_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'60','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'60','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'60','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'60','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'60_RETRO','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'60','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'609','RD','SELECT','001',NULL,'RUBDV','PAC','6','0','FALSE',NULL,NULL
'609','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,'FORMATAGE_NUMERO_CARTE_609'
'609','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','004',NULL,'RUBDV','MATPAIE','8','0','FALSE',NULL,NULL
'609','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'TRUE',NULL,NULL
'609','RD','SELECT','007',NULL,'RUBDV','RUBCOD','4','0','FALSE',NULL,NULL
'609','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','009',NULL,'RUBDV','RUBMTS','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'609','RD','SELECT','010',NULL,'RUBDV','RUBMTS','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','011',NULL,'RUBDV','RUBNBR','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'609','RD','SELECT','012',NULL,'RUBDV','RUBNBR','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','013',NULL,'RUBDV','RUBTAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'609','RD','SELECT','014',NULL,'RUBDV','RUBTAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1)'
'609','RD','SELECT','015',NULL,'RUBDV','RUBPCT','6',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','016',NULL,'RUBDV','RUBDOM','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','018',NULL,'RUBDV','RUBSIGNE','1',NULL,'FALSE',NULL,'FORMATAGE_RUBSIGNE'
'609','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','020',NULL,'RUBDV','RUBIMPU','18',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','022',NULL,NULL,NULL,'10',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','023',NULL,NULL,NULL,'55',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','024',NULL,'RUBDV','MATRICUL','8','','TRUE',NULL,'FORMATAGE_PACMAT'
'609','RD','SELECT','025',NULL,'RUBDV','CODECHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'609','RD','SELECT','026',NULL,'RUBDV','CODO','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'609','RD','SELECT','027',NULL,'RUBDV','CODR','1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','028','TGE-GEST',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','029',NULL,'RUBDV','DATMAJ','8',NULL,'FALSE','TO_CHAR(DATMAJ,''YYYYMMDD'')',NULL
'609','RD','SELECT','030',NULL,'RUBDV','HEURMAJ','6',NULL,'FALSE','TO_CHAR(DATMAJ,''HHMMSS'')',NULL
'609','RD','SELECT','031',NULL,'RUBDV','DATEFFET','8',NULL,'FALSE','TO_CHAR(DATEFFET,''YYYYMMDD'')',NULL
'609','RD','SELECT','032',NULL,'RUBDV','PERIODE','6',NULL,'FALSE','TO_CHAR(TO_DATE(@COLONNE_CIBLE@,''MMYYYY''),''YYYYMM'')',NULL
'609','RD','SELECT','033',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','034','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','035',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','036',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','037',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','039','E',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'609','RD','SELECT','040',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'609','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV',NULL
'609','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC',NULL
'609_RETRO','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO',NULL
'609','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.PERIODE = @@@PERIODE_PAIE_GESTIL@@@',NULL
'609_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'EVTDETAIL_MATRIC_RETRO.PERIODE_RETRO =  TO_CHAR(TO_DATE(RUBDV.PERIODE,''MMYYYY''),''YYYYMM'') ',NULL
'609','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC.PACMAT',NULL
'609_RETRO','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATRICUL = EVTDETAIL_MATRIC_RETRO.PACMAT',NULL
'609','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609_RETRO','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and EVTDETAIL_MATRIC_RETRO.IDENT = ''@@@ID_TRT_GESTIL@@@''',NULL
'609','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC.PAIEZAD',NULL
'609_RETRO','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and RUBDV.MATPAIE = EVTDETAIL_MATRIC_RETRO.PAIEZAD',NULL
'609','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'RUBDV.MATRICUL,RUBDV.RUBCOD',NULL
'60_ABSENCES','RD','SELECT','001',NULL,'TGE_ABSENCES','NUMPAC','6','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_ABSENCES','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','007',NULL,'TGE_REF_PRE','RUB_ECHANGE','4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','008',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','009',NULL,'TGE_ABSENCES','DUREE_CALC','15','0','TRUE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_ABSENCES','RD','SELECT','010',NULL,'TGE_ABSENCES','TEMOIN_DUREE_CALC','1',NULL,'FALSE','CASE WHEN TGE_REF_PRE.UNITE_TENUE = ''H'' THEN to_char(TGE_ABSENCES.DUREE_CALC_HEURES) WHEN TGE_REF_PRE.UNITE_TENUE = ''C'' THEN to_char(TGE_ABSENCES.DUREE_CALC_CALENDAIRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''O'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRE) WHEN TGE_REF_PRE.UNITE_TENUE = ''S'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OUVRABLE) WHEN TGE_REF_PRE.UNITE_TENUE = ''U'' THEN to_char(TGE_ABSENCES.DUREE_CALC_OEUVRE) ELSE '''' END','VALEUR_CONDITIONEE(NULL;0;1)'
'60_ABSENCES','RD','SELECT','011',NULL,NULL,NULL,'110',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','012',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_ABSENCES','RD','SELECT','013',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_ABSENCES','RD','SELECT','014',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','016',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(LOGIN)'
'60_ABSENCES','RD','SELECT','017',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_ABSENCES','RD','SELECT','018',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_ABSENCES','RD','SELECT','019',NULL,'TGE_ABSENCES','DATE_DEBUT','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_ABSENCES','RD','SELECT','020',NULL,'TGE_REF_PAC','PERIODEENCOURS','6',NULL,'FALSE','@COLONNE_CIBLE@||''01''',NULL
'60_ABSENCES','RD','SELECT','021',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','022','TT',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','023',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','024',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','025',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_ABSENCES','RD','SELECT','026',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT','027',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','distinct TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_ABSENCES','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_ABSENCES','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_INCIDENTS_PAIE',NULL
'60_ABSENCES','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'60_ABSENCES','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'60_ABSENCES','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'60_ABSENCES','RD','FROM','006',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_PERIODE_RECUEIL_PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'60_ABSENCES','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.NUMPAC = TGE_REF_PRE.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'60_ABSENCES','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.ID = TGE_INCIDENTS_PAIE.CLE_ABSENCE',NULL
'60_ABSENCES','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.NUMPAC = TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC',NULL
'60_ABSENCES','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_INCIDENTS_PAIE.PAIEZAD = TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD',NULL
'60_ABSENCES','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'60_ABSENCES','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.RUB_ECHANGE is not null',NULL
'60_ABSENCES','RD','WHERE','012',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.ORIGINE is null or TGE_INCIDENTS_PAIE.ORIGINE = ''T'' or TGE_INCIDENTS_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_T2 = ''W'' or ( MODE_T2 = ''R'' and ENVOI_MODE_R = ''O'' )))) ',NULL
'60_ABSENCES','RD','WHERE','013',NULL,NULL,NULL,NULL,NULL,NULL,'and (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' or (TGE_INCIDENTS_PAIE.TYPE_IP=''T'' and TGE_REF_PAC.ENVOI_HP = ''O''))',NULL
'60_ABSENCES','RD','WHERE','014',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') <= TGE_REF_PAC.PERIODEENCOURS',NULL
'60_ABSENCES','RD','WHERE','015',NULL,NULL,NULL,NULL,NULL,NULL,'and TO_CHAR(TGE_INCIDENTS_PAIE.PERIODE,''YYYYMM'') = TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE',NULL
'60_ABSENCES','RD','WHERE','016',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_INCIDENTS_PAIE.TYPE_IP = ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_GENERATION_HP and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_GENERATION_HP and tge_ref_pac.envoi_hp =''O'')',NULL
'60_ABSENCES','RD','WHERE','017',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PERIODE_RECUEIL and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PERIODE_RECUEIL)',NULL
'60_ABSENCES','RD','WHERE','018',NULL,NULL,NULL,NULL,NULL,NULL,'or (TGE_INCIDENTS_PAIE.TYPE_IP <> ''T'' and TGE_INCIDENTS_PAIE.DATE_EFFET between TGE_PERIODE_RECUEIL_PAIEZAD.DEBUT_PER_RECUEIL_RETRO and TGE_PERIODE_RECUEIL_PAIEZAD.FIN_PER_RECUEIL_RETRO and tge_ref_pac.gc_retro =''O'' AND RETRO_GC is not null))',NULL
'60_ABSENCES','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_REF_PRE.RUB_ECHANGE',NULL
'60_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','002','60',NULL,NULL,'2','0','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'60_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'60_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'60_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'60_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'60_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','027',NULL,NULL,NULL,'9',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'60_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'60_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'60_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'60_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'60_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'60_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'60_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'60_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'60_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'60_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'60_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'60_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE = ''1''',NULL
'60_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'60_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','SELECT','001',NULL,'TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','004',NULL,'TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','007',NULL,'TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','009',NULL,'TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70','RD','SELECT','010',NULL,'TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','011',NULL,'TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','012',NULL,'TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','013',NULL,'TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70','RD','SELECT','014',NULL,'TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70','RD','SELECT','015',NULL,'TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70','RD','SELECT','016',NULL,'TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','018',NULL,'TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','020',NULL,'TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','022',NULL,'TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','024',NULL,'TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','025',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','026',NULL,'TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70','RD','SELECT','027',NULL,'TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70','RD','SELECT','030',NULL,'TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70','RD','SELECT','031',NULL,'TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','032',NULL,'TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','033',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','034',NULL,'TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70','RD','SELECT','035',NULL,'TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70','RD','SELECT','036',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'70_RETRO','RD','SELECT','036',NULL,'TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','038',NULL,'TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(select C.MATRIC,C.PACMAT,max(DACS.CODE_CHRONO) CODE_CHRONO,DACH.PAIEZAD,min(C.DSDCN) DSDCN,max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO from DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH, GAP_TRT_LISTE_MAT L where C.NUMPAC=@@@NUMPAC@@@ and DACH.NUMPAC=@@@NUMPAC@@@ and C.NUMPAC=DACH.NUMPAC and C.PACMAT=DACH.PACMAT and C.NUMCNT=DACH.NUMCNT and C.NUMPAC=DACS.NUMPAC and C.PACMAT=DACS.PACMAT and C.NUMCNT=DACS.NUMCNT and DACH.date_eff = (select MAX(dach2.DATE_EFF) from DIC_ADM_CONTRAT_HISTO dach2 where dach2.numpac =@@@NUMPAC@@@ and c.numpac = dach2.numpac and c.pacmat = dach2.pacmat and c.numcnt = dach2.numcnt and dach2.DATE_EFF <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm''))) and C.DSDCN <=last_day(to_date(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH.DATE_SORTIE_SIT_BO >= add_months((to_date(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) and L.ID_TRT=@@@ID_TRT@@@ and L.NUMPAC=@@@NUMPAC@@@ and C.PACMAT=L.PACMAT group by C.MATRIC,C.PACMAT,DACH.PAIEZAD) DAC',NULL
'70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE',NULL
'70','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_DONNEES_PAIE.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.DERNIER_CODE_OPE <> ''S''',NULL
'70','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_DONNEES_PAIE.ORIGINE is null or TGE_DONNEES_PAIE.ORIGINE = ''T'' or TGE_DONNEES_PAIE.ORIGINE in ( select CODE_ORIGINE from TGE_REF_ORIGINE_GTA where NUMPAC = @@@NUMPAC@@@ and (MODE_3060 = ''W'' or ( MODE_3060 = ''R'' and ENVOI_MODE_R = ''O'' )))) or TGE_DONNEES_PAIE.CODE_REMPLACEMENT is not null)',NULL
'70','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_DONNEES_PAIE.PERIODE @@@OPERATEUR_RETRO@@@ (SELECT PERIODEENCOURS FROM TGE_REF_PAC WHERE NUMPAC = @@@NUMPAC@@@) and TGE_DONNEES_PAIE.ACTION_RETRO is null',NULL
'70_RETRO','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,' and TGE_DONNEES_PAIE.PERIODE in (SELECT periode_retro FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@ and @@@NUMPAC@@@||pacmat=TGE_DONNEES_PAIE.idpacmat) AND TGE_DONNEES_PAIE.ACTION_RETRO is not null ',NULL'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'70_SIMULATION_PAIE','RD','SELECT','001',NULL,'SIMU_TGE_DONNEES_PAIE','NUMPAC','6','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','002','70',NULL,NULL,'2','0','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','004',NULL,'SIMU_TGE_DONNEES_PAIE','PAIEZAD','8','0','TRUE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','007',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_RUBRIQUE','4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','009',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','13','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(100)'
'70_SIMULATION_PAIE','RD','SELECT','010',NULL,'SIMU_TGE_DONNEES_PAIE','MONTANT','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','011',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','012',NULL,'SIMU_TGE_DONNEES_PAIE','NOMBRE','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','013',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','15','0','TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(10000)'
'70_SIMULATION_PAIE','RD','SELECT','014',NULL,'SIMU_TGE_DONNEES_PAIE','TAUX','1',NULL,'FALSE',NULL,'VALEUR_CONDITIONEE(NULL;0;1) '
'70_SIMULATION_PAIE','RD','SELECT','015',NULL,'SIMU_TGE_DONNEES_PAIE','POURCENTAGE','6',NULL,'TRUE',NULL,'FORMATAGE_MULTIPLI_VALEUR(1000)'
'70_SIMULATION_PAIE','RD','SELECT','016',NULL,'SIMU_TGE_DONNEES_PAIE','DOMAINE_PRCTE','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','017',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','018',NULL,'SIMU_TGE_DONNEES_PAIE','SENS','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','020',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_IMPUTATION','18',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','021',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','022',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_CAISSE','10',NULL,'FALSE',NULL,'VALEUR_CONDITIONNEE_AVEC_AUTRE_COLONNE(TYPE_DONNEE;3;CODE_CAISSE;)'
'70_SIMULATION_PAIE','RD','SELECT','023',NULL,NULL,NULL,'22',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','024',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_DEB_ARRET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','025',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_DEB','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','026',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_RATTACH_FIN','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','027',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE_AFFECTATION','9',NULL,'FALSE','CASE WHEN ( nvl(TO_CHAR(@COLONNE_CIBLE@,''YYYYMM''),'''') is null) THEN '''' ELSE CASE WHEN (TGE_REF_PAC.MPE=''S'') THEN TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||'' '' ELSE TO_CHAR(@COLONNE_CIBLE@,''YYYYMM'')||''001'' END END',NULL
'70_SIMULATION_PAIE','RD','SELECT','028',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'70_SIMULATION_PAIE','RD','SELECT','029',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'70_SIMULATION_PAIE','RD','SELECT','030',NULL,'SIMU_TGE_DONNEES_PAIE','ORIGINE','1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'70_SIMULATION_PAIE','RD','SELECT','031',NULL,'SIMU_TGE_DONNEES_PAIE','CODE_REMPLACEMENT','1',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','032',NULL,'SIMU_TGE_DONNEES_PAIE','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','033',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'70_SIMULATION_PAIE','RD','SELECT','034',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'70_SIMULATION_PAIE','RD','SELECT','035',NULL,'SIMU_TGE_DONNEES_PAIE','DATE_EFFET','8',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')',NULL
'70_SIMULATION_PAIE','RD','SELECT','036',NULL,'SIMU_TGE_DONNEES_PAIE','PERIODE','6',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','037',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','038',NULL,'SIMU_TGE_DONNEES_PAIE','TYPE_TRAITEMENT','2',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','039',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','040',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','041',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'70_SIMULATION_PAIE','RD','SELECT','042',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT','043',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE',NULL
'70_SIMULATION_PAIE','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'70_SIMULATION_PAIE','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-17) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'70_SIMULATION_PAIE','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE',NULL
'70_SIMULATION_PAIE','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'70_SIMULATION_PAIE','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'SIMU_TGE_DONNEES_PAIE.DOS_NUM = @@@WORKFLOWID@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'70_SIMULATION_PAIE','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.TYPE_DONNEE in (''2'',''3'')',NULL
'70_SIMULATION_PAIE','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and SIMU_TGE_DONNEES_PAIE.PAIEZAD = DAC.PAIEZAD',NULL
'70_SIMULATION_PAIE','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,SIMU_TGE_DONNEES_PAIE.CODE_RUBRIQUE',NULL
'99','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'99','RD','SELECT','002','99',NULL,NULL,'2','0','FALSE',NULL,NULL
'99','RD','SELECT','003',NULL,NULL,NULL,'12',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','004',NULL,NULL,NULL,'7','0','TRUE',NULL,'FORMATAGE_NBRE_LIGNE'
'99','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'99','RD','SELECT','006',NULL,NULL,NULL,'8','0','TRUE',NULL,'FORMATAGE_NBRE_CARACTERE'
'99','RD','SELECT','007',NULL,NULL,NULL,'204',NULL,'FALSE',NULL,NULL
'99','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'99','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','007','££££',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'ANNULATION','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'ANNULATION_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ), TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS(SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt = @@@ID_TRT@@@)SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,RETRO.PERIODE_RETRO AS PERIODE, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,TABLE_RETRO RETRO WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND RETRO.NUMPAC =C.NUMPAC  AND RETRO.PACMAT =C.PACMAT AND to_date(RETRO.PERIODE_RETRO,''yyyymm'') >= trunc(DACS.dsdsc,''month'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ,RETRO.PERIODE_RETRO) DAC',NULL'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and DAC.PAIEZAD not in (select PAIEZAD from DELETED_PAIEZAD where NUMPAC=@@@NUMPAC@@@)',NULL
'ANNULATION','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','001',NULL,'DELETED_PAIEZAD','NUMPAC','6','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','004',NULL,'DELETED_PAIEZAD','PAIEZAD','8','0','TRUE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','007','$$$$',NULL,NULL,'4','0','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','012',NULL,NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','017',NULL,'DELETED_PAIEZAD','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','018',NULL,'DELETED_PAIEZAD','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD',NULL
'ANNULATION_PERIODE_EMPLOI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.NUMPAC = @@@NUMPAC@@@',NULL
'ANNULATION_PERIODE_EMPLOI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC=@@@NUMPAC@@@ and (TGE_REF_PAC.MPE is not null and TGE_REF_PAC.MPE <> ''N'')',NULL
'ANNULATION_PERIODE_EMPLOI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DELETED_PAIEZAD.PAIEZAD',NULL
'IJEDI','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'IJEDI','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'IJEDI','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','007','T653',NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','009',NULL,'TGE_ABSENCES','DATE_DEBUT','16',NULL,'FALSE','TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD'')||MOTIF',NULL
'IJEDI','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','012',NULL,'TGE_ABSENCES','DATE_FIN','40',NULL,'FALSE','least(TO_CHAR(@COLONNE_CIBLE@,''YYYYMMDD''),nvl(TO_CHAR(DAC.DATE_SORTIE_SIT_BO,''YYYYMMDD''),''20991231''))',NULL
'IJEDI','RD','SELECT','013',NULL,'TGE_REF_DICOZ','TYPE','1',NULL,'FALSE',NULL,'FORMATAGE_TYPE'
'IJEDI','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,'FORMATAGE_COMPLEMENT_DESCRIPTIF_FROM_TYPE'
'IJEDI','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'IJEDI','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'IJEDI','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','021',NULL,'TGE_ABSENCES','LOGIN_MAJ','8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','022',NULL,'TGE_ABSENCES','DATE_MAJ','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'IJEDI','RD','SELECT','023',NULL,'TGE_ABSENCES','DATE_MAJ','6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'IJEDI','RD','SELECT','024',NULL,'TGE_REF_PAC','PERIODEENCOURS','8',NULL,'FALSE','@COLONNE_CIBLE@||''01''','FORMATAGE_DATE_EFFET'
'IJEDI','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'IJEDI','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'IJEDI','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'IJEDI','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'IJEDI','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_REF_DICOZ.MASQUE',NULL
'IJEDI','RD','SELECT_EN_PLUS','002',NULL,NULL,NULL,'4',NULL,'FALSE','TO_CHAR(DAC.DSDCN,''YYYYMMDD'') as DSDCN',NULL
'IJEDI','RD','SELECT_EN_PLUS','003',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'IJEDI','RD','SELECT_EN_PLUS','004',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.MOTIF',NULL
'IJEDI','RD','SELECT_EN_PLUS','005',NULL,NULL,NULL,'4',NULL,'FALSE','TGE_ABSENCES.ID',NULL
'IJEDI','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'IJEDI','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES',NULL
'IJEDI','RD','FROM','003',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_DICOZ',NULL
'IJEDI','RD','FROM','004',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'IJEDI','RD','FROM','005',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PRE',NULL
'IJEDI','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_ABSENCES.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','002',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','003',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','004',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.NUMPAC = @@@NUMPAC@@@',NULL
'IJEDI','RD','WHERE','005',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PAC.IJEDI in (''M'',''E'')',NULL
'IJEDI','RD','WHERE','006',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MOTIF = TGE_REF_PRE.CODE_INCIDENT',NULL
'IJEDI','RD','WHERE','007',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_ABSENCES.MATRIC = DAC.MATRIC',NULL
'IJEDI','RD','WHERE','008',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.MOTIF_ABS is not null',NULL
'IJEDI','RD','WHERE','009',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_PRE.OPTION_CONSERV_HISTO = ''A''',NULL
'IJEDI','RD','WHERE','010',NULL,NULL,NULL,NULL,NULL,NULL,'and TGE_REF_DICOZ.ELEMENT = ''T653''',NULL
'IJEDI','RD','WHERE','011',NULL,NULL,NULL,NULL,NULL,NULL,'and ((TGE_ABSENCES.DATE_DEBUT <= DAC.DSDCN and (DAC.DSDCN is null or (TGE_ABSENCES.DATE_FIN >= DAC.DSDCN))) or (TGE_ABSENCES.DATE_DEBUT >= DAC.DSDCN and (DAC.DATE_SORTIE_SIT_BO is null or (TGE_ABSENCES.DATE_DEBUT <= DAC.DATE_SORTIE_SIT_BO))))',NULL
'IJEDI','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'W566','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'W566','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'W566','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','007','W566',NULL,NULL,'4','0','FALSE',NULL,NULL
'W566','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','012','200',NULL,NULL,'40',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','013','N',NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'W566','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'W566','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'W566','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'W566','RD','SELECT','024',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie;01)'
'W566_RETRO','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'W566','RD','SELECT','025',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'PARAM_ORIGINE(periode_paie)'
'W566_RETRO','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'W566','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'W566','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'W566','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'W566','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC ) DAC',NULL
'W566_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'') mois from dual connect by TO_CHAR(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''YYYYMM'' )< @@@PERIODE_PAIE@@@),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO)AS (SELECT PACMAT,NUMPAC,PERIODE_RETRO FROM gap_trt_mois_retro WHERE id_trt =@@@ID_TRT@@@) SELECT C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois as periode, MIN(C.DSDCN) DSDCN, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and DACS.NUMCNT = T.NUMCNT and DACS.PAIEZAD = DACH.PAIEZAD and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND D.mois >=(select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ) AND D.mois >=TO_CHAR(DACS.dsdsc,''YYYYMM'') GROUP BY C.PACMAT, DACH.PAIEZAD, C.MATRIC,D.mois ) DAC',NULL
'W566','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'W566','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'W566','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD',NULL
'W566_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70','RD','SELECT','001',NULL,'TGE_REF_PAC','NUMPAC','6','0','FALSE',NULL,NULL
'WL70','RD','SELECT','002','30',NULL,NULL,'2','0','FALSE',NULL,NULL
'WL70','RD','SELECT','003',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','004',NULL,'DAC','PAIEZAD','8','0','TRUE',NULL,NULL
'WL70','RD','SELECT','005',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','006',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','007','WL70',NULL,NULL,'4','0','FALSE',NULL,NULL
'WL70','RD','SELECT','008',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','009',NULL,NULL,NULL,'16',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','010',NULL,NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','011',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','012',NULL,'DAC','DTRETRO','40',NULL,'FALSE',NULL,NULL
'WL70_RETRO','RD','SELECT','012',NULL,'DAC','DSDSC','40',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','013',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','014',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','015',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','016',NULL,NULL,NULL,'75',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','017',NULL,'DAC','PACMAT','8',NULL,'FALSE',NULL,'FORMATAGE_PACMAT'
'WL70','RD','SELECT','018',NULL,'DAC','CODE_CHRONO','6',NULL,'FALSE',NULL,'FORMATAGE_CODE_CHRONO'
'WL70','RD','SELECT','019',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(code_origine)'
'WL70','RD','SELECT','020',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','021','DIF_FSED',NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','022',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','023',NULL,NULL,NULL,'6',NULL,'FALSE',NULL,'FORMATAGE_DATE(HHMNSS)'
'WL70','RD','SELECT','024',NULL,'DAC','PERIODE','8',NULL,'FALSE',NULL,'FORMATAGE_DATE(AAAAMMJJ)'
'WL70','RD','SELECT','025',NULL,'DAC','PERIODE','6',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','026',NULL,NULL,NULL,'8',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','027','TT',NULL,NULL,'2',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','028',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','029',NULL,NULL,NULL,'3',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT','030',NULL,NULL,NULL,'1',NULL,'FALSE',NULL,'PARAM_ORIGINE(TYPE_PAIE)'
'WL70','RD','SELECT','031',NULL,NULL,NULL,'1','E','FALSE',NULL,NULL
'WL70','RD','SELECT','032',NULL,NULL,NULL,'4',NULL,'FALSE',NULL,NULL
'WL70','RD','SELECT_EN_PLUS','001',NULL,NULL,NULL,'4',NULL,'FALSE','DAC.CODE_CHRONO',NULL
'WL70','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC, to_char(D.mois,''yyyymm'') as periode,  MIN(DACS.DSDSC) DSDSC, MAX(DACS.DSFSC) DSFSC, MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month''),''ddmmyyyy'') DTRETRO   FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'')  AND DACS.PACMAT= R.PACMAT AND DACS.DSDSC <= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70_RETRO','RD','FROM','001',NULL,NULL,NULL,NULL,NULL,NULL,'(WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT, DACH2.PAIEZAD) FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 WHERE L.ID_TRT = @@@ID_TRT@@@ and L.NUMPAC = @@@NUMPAC@@@ and DACH2.NUMPAC = @@@NUMPAC@@@ and DACH2.PACMAT = L.PACMAT and DACH2.DATE_EFF <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')),-@@@NB_MOIS_PAIE_INIT@@@) ),date_R (mois) AS ( select trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'') mois from dual connect by trunc(ADD_MONTHS(TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM''),level-1-24),''month'' )<= TO_DATE(@@@PERIODE_PAIE@@@,''YYYYMM'')),TABLE_RETRO (PACMAT,NUMPAC,PERIODE_RETRO) AS (SELECT PACMAT,NUMPAC,min(PERIODE_RETRO) over (partition by PACMAT, NUMPAC) FROM GAP_RETRO_MATRIC_ALL WHERE NUMPAC = @@@NUMPAC@@@) SELECT C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm'') as periode,  TO_CHAR(MIN(DACS.DSDSC),''ddmmyyyy'') DSDSC, MAX(DACS.DSFSC) DSFSC,MAX(DACS.CODE_CHRONO) CODE_CHRONO, max(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO, TO_CHAR(MIN(DACS.DSDSC),''yyyymm'') MOISCOMP FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH,date_R D, TABLE_RETRO R WHERE C.NUMPAC = @@@NUMPAC@@@ and DACS.NUMPAC = @@@NUMPAC@@@ and DACH.NUMPAC = @@@NUMPAC@@@ and R.NUMPAC = @@@NUMPAC@@@ and C.PACMAT = T.PACMAT and C.NUMCNT = T.NUMCNT and DACH.PACMAT = T.PACMAT and DACH.NUMCNT = T.NUMCNT and DACH.DATE_EFF = T.DATE_EFF and DACS.PACMAT = T.PACMAT AND DACS.PACMAT= R.PACMAT and C.DSDCN <= LAST_DAY(TO_DATE(@@@PERIODE_PAIE@@@,''yyyymm'')) and NVL(DACH.DRPAI2, ''B'') <> ''B'' and C.NATCOL IN (''SAL'',''STA'') AND DACS.DSDSC >= trunc( LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')), ''month'') AND DACS.DSFSC >= LAST_DAY(TO_DATE( R.PERIODE_RETRO, ''yyyymm'')) AND D.mois >=trunc(to_date((select min(RETRO.PERIODE_RETRO) from  table_retro RETRO where RETRO.NUMPAC=C.NUMPAC AND RETRO.PACMAT =C.PACMAT ),''YYYYMM''),''month'') AND D.mois <=trunc(DACS.dsfsc,''month'') GROUP BY C.PACMAT, DACS.PAIEZAD, C.MATRIC,to_char(D.mois,''yyyymm''),R.PERIODE_RETRO ) DAC',NULL
'WL70','RD','FROM','002',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC',NULL
'WL70','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@',NULL
'WL70_RETRO','RD','WHERE','001',NULL,NULL,NULL,NULL,NULL,NULL,'TGE_REF_PAC.NUMPAC = @@@NUMPAC@@@ AND DAC.PERIODE >=DAC.MOISCOMP',NULL
'WL70','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
'WL70_RETRO','RD','ORDER_BY','001',NULL,NULL,NULL,NULL,NULL,NULL,'DAC.PAIEZAD,DAC.PERIODE',NULL
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA22' AND NUMPAC = '*'
'*','AA22','**','TDETEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA23' AND NUMPAC = '*'
'*','AA23','**','MOTEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA22' AND NUMPAC = '*'
'*','AA22','**','TDETEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE ELEMENT = 'AA23' AND NUMPAC = '*'
'*','AA23','**','MOTEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO_DIC_C2P_HISTO
=SQL=
call DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE ('TGE_REF_MAPDO', 'DIC_C2P_HISTO', TAB_VARCHAR('AB13','AB14','AB15','AB16','AB17','AB18'))
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC = '*' and ELEMENT in ('AB13','AB14','AB15','AB16','AB17','AB18')
'*','AB13','**','RD_ZAB13','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AB14','**','RD_ZAB14','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AB15','**','RD_ZAB15','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AB16','**','RD_ZAB16','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AB17','**','RD_ZAB17','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AB18','**','RD_ZAB18','DIC_C2P_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO_DIC_ADM_CONTRAT_HISTO
=SQL=
call DUPLIQUE_PLUSIEURS_LIGNES_DANS_TABLE ('TGE_REF_MAPDO', 'DIC_ADM_CONTRAT_HISTO', TAB_VARCHAR('AA22','AA23'))
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC = '*' and ELEMENT in ('A619','A618','A617','AA23','A261','A098','A099','AA22')
'*','A619','**','RD_CATMAL','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A618','**','RD_CATVIE','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A617','**','RD_CODE_NB_CFE','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AA23','**','RD_MOTEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A261','**','RD_OPT_ZA446','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A098','**','RD_OPT_ZP170','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A099','**','RD_OPT_ZP171','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','AA22','**','RD_TDETEXP','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC = '*' and ELEMENT in ('A176','A177')
'*','A176','**','RD_MTFORF_TAD','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A177','**','RD_NBJRS_TAD','DIC_ADM_CONTRAT_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPDO
==
delete from TGE_REF_MAPDO where NUMPAC = '*' and ELEMENT in ('Q201','A402','Q244','B323','BA23','Q694','Q695','A403','Q699','Q177','B325','A748')
'*','Q201','**','RD_BENEMP','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A402','**','RD_CATPEN','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','Q244','**','RD_CODBEN','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','B323','**','RD_COTORP','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','BA23','**','RD_DOETH_STAT','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','Q694','**','RD_DSDECI','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','Q695','**','RD_DSFCOT','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A403','**','RD_DSPENS','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','Q699','**','RD_DSVCOT','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','Q177','**','RD_DUREE','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','B325','**','RD_PLAANT','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
'*','A748','**','RD_TXIPP','DIC_MEDICAL_HISTO',NULL,NULL,NULL,NULL,NULL,'N'
##
TGE_REF_MAPTA
==
DELETE FROM TGE_REF_MAPTA WHERE NUMPAC = '*' and TABLEPHY='DIC_TGE_PERIODES_RECUEIL'
##
TGE_REF_MAPTA
==
DELETE FROM TGE_REF_MAPTA WHERE NUMPAC='*' AND TABLEPHY='DIC_PERIODES_RECUEIL_HIS'
'*','180','DIC_PERIODES_RECUEIL_HIS','AV','DIC_PERIODES_RECUEIL_HIS','A','H2','00',null,null,null
##
TGE_REF_MAPTA
==
delete from TGE_REF_MAPTA where NUMPAC = '*' and (ROWNUMBER = '182' OR TABLEPHY='DIC_C2P_HISTO')
'*','182','DIC_C2P_HISTO',NULL,'DIC_C2P_HISTO','A','AVPERS','00',NULL,NULL,NULL
##
TGE_REF_MAPTA
==
delete from TGE_REF_MAPTA where NUMPAC = '*' and (ROWNUMBER = '183' OR TABLEPHY='DIC_MEDICAL_HISTO')
'*','183','DIC_MEDICAL_HISTO',NULL,'DIC_MEDICAL_HISTO','A','AVPERS','00',NULL,NULL,NULL
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'GESTIL'
'GESTIL','Demande d''extraction des données GESTIL'
##
TGE_REF_STATUT_ZPP
==
DELETE FROM TGE_REF_STATUT_ZPP WHERE CODESTATUT = 'ATTGES'
'ATTGES','Attente des données de paie GESTIL'
##
TAG_CHARSET=@€éèç
##
TGE_RELIQ_PACMAT_TORESEND_RETRO
=SQL IFNOTEXIST=TGE_RELIQ_PACMAT_TORESEND_RETRO=
CREATE TABLE TGE_RELIQ_PACMAT_TORESEND_RETRO(NUMPAC VARCHAR2(6 BYTE) NOT NULL ENABLE, PACMAT VARCHAR2(8 BYTE) NOT NULL ENABLE, TABLE_TO_SEND VARCHAR2(32 BYTE) NOT NULL ENABLE, DATE_MAJ DATE)
##
ALERTE_TRIG_INACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' DISABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
ALERT_TREE
==
delete from ALERT_TREE where ALERT_ID = 'MAIL_RFC'
'MAIL_RFC','1','Adresses mail non conformes à la norme',NULL,'2'
##
ALERT_PROP
==
delete from ALERT_PROP where ALERT_ID = 'MAIL_RFC'
'MAIL_RFC','11',NULL,NULL,'select B.ID1 as C_1, B.ID2 AS C_2,B.ID3 AS C_3, B.ID4 AS C_4 FROM ALERT_BATCH2 B WHERE B.LOGIN = $LOGIN AND B.ALERT_ID = $ALERT order by B.ID1, B.ID2','1','0','$ALERT as ALERT_ID, MAIL_NONCONFORME_RFC.NOM_TABLE AS ID1,MAIL_NONCONFORME_RFC.NOM_COLONNE AS ID2,MAIL_NONCONFORME_RFC.VALEUR AS ID3 , MAIL_NONCONFORME_RFC.CLE AS ID4 , NULL AS ID5,NULL AS ID6','MAIL_NONCONFORME_RFC','1=1',NULL,'0','0','0'
##
ALERT_IDX_TREE
==
delete from ALERT_IDX_TREE where ALERT_ID ='MAIL_RFC'
'MAIL_RFC','1621245432485','1','Nom de la table','MAIL_RFC',NULL,'1','180'
'MAIL_RFC','1621245445772','1','Nom de la colonne','MAIL_RFC',NULL,'2','150'
'MAIL_RFC','1621245456087','1','Email','MAIL_RFC',NULL,'3','200'
'MAIL_RFC','1621432122600','1','Clé/Valeur','MAIL_RFC',NULL,'4','200'
##
ALERT_REDIRECT
==
delete from ALERT_REDIRECT where ALERT_ID='MAIL_RFC'
'MAIL_RFC','1',null
##
ALERT_PROFILE
==
DELETE FROM ALERT_PROFILE where ALERT_ID ='MAIL_RFC'
'MAIL_RFC','1','-2'
##
ALERTE_TRIG_ACTIF
=SQL=
BEGIN
    FOR R IN ( SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('ALERT_TREE','ALERT_PROP','ALERT_PROFILE','ALERT_IDX_TREE','ALERT_REDIRECT','ALERT_CHAINING')  AND CONSTRAINT_TYPE != 'P' ORDER BY TABLE_NAME DESC)
    LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE '||R.TABLE_NAME ||' ENABLE CONSTRAINT '||R.CONSTRAINT_NAME ;
    END LOOP;
END;
##
TAG_CHARSET=@€éèç
##
META_DICTIONNAIRE
==
DELETE FROM META_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_C2P_HISTO') AND COMPANY_ID='*'
##
META_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_C2P_HISTO','Gestion C2P (pénibilité) histo',NULL,'O','M',NULL,'1034',NULL,NULL
##
REF_DICTIONNAIRE
==
DELETE FROM REF_DICTIONNAIRE WHERE NOM_DICTIONNAIRE IN ('DIC_C2P_HISTO') AND COMPANY_ID='*'
##
REF_DICTIONNAIRE (COMPANY_ID,NOM_DICTIONNAIRE,LIBELLE_DICTIONNAIRE,CHAMPS_CLE,HISTORISE,TYPE_CLE_SALARIE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE)
'*','DIC_C2P_HISTO','Gestion C2P (pénibilité) histo',NULL,'O','M',NULL,'1034',NULL,NULL
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_ZAB13','RD_ZAB14','RD_ZAB15','RD_ZAB16','RD_ZAB17','RD_ZAB18') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_ZAB13','Activité exercée en milieu hyperbare','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB14','Exposition à des températures extrêmes','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB15','Exposition au bruit','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB16','Travail de nuit','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB17','Travail en équipes successives alternantes','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB18','Travail répétitif','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_ZAB13','RD_ZAB14','RD_ZAB15','RD_ZAB16','RD_ZAB17','RD_ZAB18') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_ZAB13','Activité exercée en milieu hyperbare','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB14','Exposition à des températures extrêmes','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB15','Exposition au bruit','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB16','Travail de nuit','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB17','Travail en équipes successives alternantes','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
'*','RD_ZAB18','Travail répétitif','DIC_C2P_HISTO','X','1',NULL,NULL,NULL,NULL,'Z','O',NULL,'1034',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_ZAB13','RD_ZAB14','RD_ZAB15','RD_ZAB16','RD_ZAB17','RD_ZAB18') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_ZAB13','*','Activité exercée en milieu hyperbare','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','ASS_EMB_INIT_ECR1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','ASS_EMB_INIT_ECR9','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','INIT_EMB_FROM_API','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_EMB_MAN_OP1_EC1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_EMB_OP1_EC1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_INSERT_PEREMP_FERM_PER_VALID','Activité exercée en milieu hyperbare','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','*','Exposition à des températures extrêmes','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','ASS_EMB_INIT_ECR1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','ASS_EMB_INIT_ECR9','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','INIT_EMB_FROM_API','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_EMB_MAN_OP1_EC1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_EMB_OP1_EC1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_INSERT_PEREMP_FERM_PER_VALID','Exposition à des températures extrêmes','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','*','Exposition au bruit','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','ASS_EMB_INIT_ECR1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','ASS_EMB_INIT_ECR9','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','INIT_EMB_FROM_API','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_EMB_MAN_OP1_EC1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_EMB_OP1_EC1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_INSERT_PEREMP_FERM_PER_VALID','Exposition au bruit','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','*','Travail de nuit','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','ASS_EMB_INIT_ECR1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','ASS_EMB_INIT_ECR9','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','INIT_EMB_FROM_API','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_EMB_MAN_OP1_EC1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_EMB_OP1_EC1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail de nuit','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','*','Travail en équipes successives alternantes','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','ASS_EMB_INIT_ECR1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','ASS_EMB_INIT_ECR9','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','INIT_EMB_FROM_API','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_EMB_MAN_OP1_EC1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_EMB_OP1_EC1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail en équipes successives alternantes','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','*','Travail répétitif','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','ASS_EMB_INIT_ECR1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','ASS_EMB_INIT_ECR9','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','INIT_EMB_FROM_API','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_EMB_MAN_OP1_EC1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_EMB_OP1_EC1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail répétitif','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_ZAB13','RD_ZAB14','RD_ZAB15','RD_ZAB16','RD_ZAB17','RD_ZAB18') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_ZAB13','*','Activité exercée en milieu hyperbare','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','ASS_EMB_INIT_ECR1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','ASS_EMB_INIT_ECR9','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','INIT_EMB_FROM_API','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_EMB_MAN_OP1_EC1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_EMB_OP1_EC1','Activité exercée en milieu hyperbare','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB13','WKF_INSERT_PEREMP_FERM_PER_VALID','Activité exercée en milieu hyperbare','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','*','Exposition à des températures extrêmes','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','ASS_EMB_INIT_ECR1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','ASS_EMB_INIT_ECR9','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','INIT_EMB_FROM_API','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_EMB_MAN_OP1_EC1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_EMB_OP1_EC1','Exposition à des températures extrêmes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB14','WKF_INSERT_PEREMP_FERM_PER_VALID','Exposition à des températures extrêmes','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','*','Exposition au bruit','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','ASS_EMB_INIT_ECR1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','ASS_EMB_INIT_ECR9','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','INIT_EMB_FROM_API','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_EMB_MAN_OP1_EC1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_EMB_OP1_EC1','Exposition au bruit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB15','WKF_INSERT_PEREMP_FERM_PER_VALID','Exposition au bruit','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','*','Travail de nuit','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','ASS_EMB_INIT_ECR1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','ASS_EMB_INIT_ECR9','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','INIT_EMB_FROM_API','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_EMB_MAN_OP1_EC1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_EMB_OP1_EC1','Travail de nuit','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB16','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail de nuit','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','*','Travail en équipes successives alternantes','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','ASS_EMB_INIT_ECR1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','ASS_EMB_INIT_ECR9','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','INIT_EMB_FROM_API','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_EMB_MAN_OP1_EC1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_EMB_OP1_EC1','Travail en équipes successives alternantes','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB17','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail en équipes successives alternantes','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','*','Travail répétitif','N','radio',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','ASS_EMB_INIT_ECR1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','ASS_EMB_INIT_ECR9','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','INIT_EMB_FROM_API','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_EMB_MAN_OP1_EC1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_EMB_OP1_EC1','Travail répétitif','N','hidden',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ZAB18','WKF_INSERT_PEREMP_FERM_PER_VALID','Travail répétitif','N','span',NULL,NULL,'Oui,Non','O,N',NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_ECRAN
==
DELETE FROM META_ECRAN WHERE NOM_PAGE IN ('RD_PENIBILITE') AND COMPANY_ID='*'
##
META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA)
'*','RD_PENIBILITE','C2P (pénibilité)','RD','EXP','DIC_C2P_HISTO','STD','INT,VAL','RD_PENIB_ECR','U',NULL,NULL,'1034','N',NULL,'RD_C2P_HISTO_VALO_DATE_EFFET',NULL,NULL,'RD_C2P_HISTO_CTRL_DATE_EFFET',NULL,NULL,'0','N','N',NULL,NULL
##
REF_ECRAN
==
DELETE FROM REF_ECRAN WHERE NOM_PAGE IN ('RD_PENIBILITE') AND COMPANY_ID='*'
##
REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA)
'*','RD_PENIBILITE','C2P (pénibilité)','RD','EXP','DIC_C2P_HISTO','STD','INT,VAL','RD_PENIB_ECR','U',NULL,NULL,'1034','N',NULL,'RD_C2P_HISTO_VALO_DATE_EFFET',NULL,NULL,'RD_C2P_HISTO_CTRL_DATE_EFFET',NULL,NULL,'0','N','N',NULL,NULL
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_PENIB_ECR') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_PENIB_ECR',NULL,NULL,NULL,'N',NULL,'1034',NULL,'Saisie des informations C2P','Données C2P (pénibilité)','O'
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_PENIB_ECR') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_PENIB_ECR',NULL,NULL,NULL,'N',NULL,'1034',NULL,'Saisie des informations C2P','Données C2P (pénibilité)','O'
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_PENIB_ECR') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_PENIB_ECR','#EOL_29','229',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_34','222',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_35','219',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_36','225',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_37','235',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_38','238',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_41','231',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#LIBELLE_8','202',NULL,'FormTitreµInformations Pénibilité',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#TEXTE_4','214','N','FormTitreµEnvironnement physique agressif',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#TEXTE_5','230','N','FormTitreµRythme de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB13','220',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB14','223',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB15','226',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB16','232',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB17','236',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB18','239',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','W_DSSAD','241',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_PENIB_ECR') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_PENIB_ECR','#EOL_29','229',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_34','222',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_35','219',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_36','225',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_37','235',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_38','238',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#EOL_41','231',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#LIBELLE_8','202',NULL,'FormTitreµInformations Pénibilité',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#TEXTE_4','214','N','FormTitreµEnvironnement physique agressif',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','#TEXTE_5','230','N','FormTitreµRythme de travail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB13','220',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB14','223',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB15','226',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB16','232',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB17','236',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','RD_ZAB18','239',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_PENIB_ECR','W_DSSAD','241',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_C2P_HISTO_CTRL_DATE_EFFET','RD_C2P_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','CTL','Contrôle de la date d''effet sur pénibilité histo',NULL,'1034',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF","RESULTAT":"@TMPNB_CNT£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPNB_CNT£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@codeoperation£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Supprimer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle de la date d''effet sur pénibilité histo : elle doit être comprise dans la période contractuelle','N',NULL,'/*¿ * RD_C2P_HISTO_CTRL_DATE_EFFET :¿ * Contrôle de la date d''effet sur pénibilité histo : elle doit être comprise dans la période contractuelle¿ */¿¿TMPNB_CNT = TAB("REG_RD_DATE_EFF_IN_CONTRAT", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_DATE_EFF);¿if (TMPNB_CNT == 0) {¿	ERR("GENCNT51");¿}¿TMP1 = TAB("REG_RD_NB_HISTO_C2P", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (codeoperation == "Supprimer" && TMP1 == 1) {¿	ERR("GENCHS12");¿}¿','Contrôle de la date d''effet sur pénibilité histo'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','AUT','C2P (pénibilité) historisé : valorisation de la date d''effet',NULL,'1034',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"@vide££","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£GEN_DATE_EFF","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10}]','C2P (pénibilité) historisé : valorisation de la date d''effet. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.','O',NULL,'/*¿ * RD_C2P_HISTO_VALO_DATE_EFFET :¿ * C2P (pénibilité) historisé : valorisation de la date d''effet. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.¿ */¿¿TMP1 = TAB("REG_RD_NB_HISTO_C2P", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP1 == 0) {¿	if (DIC_ADM_CONTRAT.DSDCN < DONNEE.GEN_DATE_EFF && DIC_ADM_CONTRAT_HISTO.DSSAD < DONNEE.GEN_DATE_EFF) {¿		DONNEE.GEN_DATE_EFF = vide;¿	}¿}¿','C2P (pénibilité) historisé : valorisation de la date d''effet'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_C2P_HISTO_CTRL_DATE_EFFET','RD_C2P_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','CTL','Contrôle de la date d''effet sur pénibilité histo',NULL,'1034',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF","RESULTAT":"@TMPNB_CNT£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@TMPNB_CNT£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"@codeoperation£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£Supprimer","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£1","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Contrôle de la date d''effet sur pénibilité histo : elle doit être comprise dans la période contractuelle','N',NULL,'/*¿ * RD_C2P_HISTO_CTRL_DATE_EFFET :¿ * Contrôle de la date d''effet sur pénibilité histo : elle doit être comprise dans la période contractuelle¿ */¿¿TMPNB_CNT = TAB("REG_RD_DATE_EFF_IN_CONTRAT", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT, DONNEE.GEN_DATE_EFF);¿if (TMPNB_CNT == 0) {¿	ERR("GENCNT51");¿}¿TMP1 = TAB("REG_RD_NB_HISTO_C2P", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (codeoperation == "Supprimer" && TMP1 == 1) {¿	ERR("GENCHS12");¿}¿','Contrôle de la date d''effet sur pénibilité histo'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','AUT','C2P (pénibilité) historisé : valorisation de la date d''effet',NULL,'1034',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT","RESULTAT":"@TMP1£","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"SI","OPERANDE_1":"@TMP1£","OPERATEUR":"EQ","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":1},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":2},{"TYPE":"SI","OPERANDE_1":"DONNEE£DSDCN","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":3},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£DSSAD","OPERATEUR":"LT","OPERANDE_2":"DONNEE£GEN_DATE_EFF££","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":4},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":5},{"TYPE":"OPERATION","OPERANDE_1":"@vide££","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£GEN_DATE_EFF","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":6},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":7},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":8},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":9},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":10}]','C2P (pénibilité) historisé : valorisation de la date d''effet. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.','O',NULL,'/*¿ * RD_C2P_HISTO_VALO_DATE_EFFET :¿ * C2P (pénibilité) historisé : valorisation de la date d''effet. Voir aussi la RG de contrôle : dates effet comprises dans les périodes de contrat.¿ */¿¿TMP1 = TAB("REG_RD_NB_HISTO_C2P", 1, 0, DONNEE.GEN_NUMPAC, DONNEE.GEN_PACMAT);¿if (TMP1 == 0) {¿	if (DIC_ADM_CONTRAT.DSDCN < DONNEE.GEN_DATE_EFF && DIC_ADM_CONTRAT_HISTO.DSSAD < DONNEE.GEN_DATE_EFF) {¿		DONNEE.GEN_DATE_EFF = vide;¿	}¿}¿','C2P (pénibilité) historisé : valorisation de la date d''effet'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_C2P_HISTO_CTRL_DATE_EFFET','RD_C2P_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF','@TMPNB_CNT£',NULL,NULL
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','2',NULL,'@TMPNB_CNT£µVALEUR£0µEQ',NULL,NULL,'3','4'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','3','££','ERR','CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','5',NULL,'@codeoperation£µVALEUR£SupprimerµEQµ@TMP1£µVALEUR£1µEQµ#ET#',NULL,NULL,'7','FIN'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','7','££','ERR','CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_C2P_HISTO_VALO_DATE_EFFET','2',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'3','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','3',NULL,'DONNEE£DSDCNµDONNEE£GEN_DATE_EFF££µLTµDONNEE£DSSADµDONNEE£GEN_DATE_EFF££µLTµ#ET#',NULL,NULL,'5','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','5','@vide££','VAL','££','DONNEE£GEN_DATE_EFF','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_C2P_HISTO_CTRL_DATE_EFFET','RD_C2P_HISTO_VALO_DATE_EFFET') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_DATE_EFF_IN_CONTRAT§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT§PARAM_3=DONNEE^GEN_DATE_EFF','@TMPNB_CNT£',NULL,NULL
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','2',NULL,'@TMPNB_CNT£µVALEUR£0µEQ',NULL,NULL,'3','4'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','3','££','ERR','CODEERREUR£GENCNT51£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','4','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','5',NULL,'@codeoperation£µVALEUR£SupprimerµEQµ@TMP1£µVALEUR£1µEQµ#ET#',NULL,NULL,'7','FIN'
'*','RD_C2P_HISTO_CTRL_DATE_EFFET','7','££','ERR','CODEERREUR£GENCHS12£NOM_DONNEE_FOCUS=','£','FIN','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NB_HISTO_C2P§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^GEN_NUMPAC§PARAM_2=DONNEE^GEN_PACMAT','@TMP1£',NULL,NULL
'*','RD_C2P_HISTO_VALO_DATE_EFFET','2',NULL,'@TMP1£µVALEUR£0µEQ',NULL,NULL,'3','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','3',NULL,'DONNEE£DSDCNµDONNEE£GEN_DATE_EFF££µLTµDONNEE£DSSADµDONNEE£GEN_DATE_EFF££µLTµ#ET#',NULL,NULL,'5','FIN'
'*','RD_C2P_HISTO_VALO_DATE_EFFET','5','@vide££','VAL','££','DONNEE£GEN_DATE_EFF','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_MTFORF_TAD','RD_NBJRS_TAD') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_MTFORF_TAD','Montant forfaitaire indemnité TAD','DIC_ADM_CONTRAT_HISTO','9','3','2',NULL,NULL,NULL,'GZ','O',NULL,'1041',NULL,NULL,'Y',NULL,'N'
'*','RD_NBJRS_TAD','Nombre de jours TAD (hebdomadaire)','DIC_ADM_CONTRAT_HISTO','9','3','2',NULL,NULL,NULL,'GZ','O',NULL,'1041',NULL,NULL,'Y',NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_MTFORF_TAD','RD_NBJRS_TAD') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_MTFORF_TAD','Montant forfaitaire indemnité TAD','DIC_ADM_CONTRAT_HISTO','9','3','2',NULL,NULL,NULL,'GZ','O',NULL,'1041',NULL,NULL,'Y',NULL,'N'
'*','RD_NBJRS_TAD','Nombre de jours TAD (hebdomadaire)','DIC_ADM_CONTRAT_HISTO','9','3','2',NULL,NULL,NULL,'GZ','O',NULL,'1041',NULL,NULL,'Y',NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_MTFORF_TAD','RD_NBJRS_TAD') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_MTFORF_TAD','*','Montant forfaitaire indemnité TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','ASS_EMB_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','ASS_MUT_SOC_ACCEPT','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','SYNTH_HISTO_CNT_MAN_AVV','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_ANN_EMB_OP1_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP3_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP4_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP5_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP2_RE2_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP3_CONF','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP4_CONF','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_MUT_SOC_ACCEPT','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','*','Nombre de jours hebdo TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_CTRL_JRSTAD_MAXI6',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','ASS_EMB_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','ASS_MUT_SOC_ACCEPT','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','SYNTH_HISTO_CNT_MAN_AVV','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_ANN_EMB_OP1_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP3_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP4_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP5_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP2_EC4','Nombre de jours hebdo TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP2_RE2_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP3_CONF','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP4_CONF','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_MUT_SOC_ACCEPT','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_MTFORF_TAD','RD_NBJRS_TAD') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_MTFORF_TAD','*','Montant forfaitaire indemnité TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','ASS_EMB_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','ASS_MUT_SOC_ACCEPT','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','SYNTH_HISTO_CNT_MAN_AVV','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_ANN_EMB_OP1_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP3_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP4_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_MAN_OP5_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP2_RE2_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP3_CONF','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_EMB_OP4_CONF','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MTFORF_TAD','WKF_MUT_SOC_ACCEPT','Montant forfaitaire indemnité TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','*','Nombre de jours hebdo TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RD_CTRL_JRSTAD_MAXI6',NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','ASS_EMB_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','ASS_MUT_SOC_ACCEPT','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','NEW_PEREMP_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','SYNTH_HISTO_CNT_MAN_AVV','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_ANN_EMB_OP1_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP3_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP4_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_MAN_OP5_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP2_EC4','Nombre de jours hebdo TAD','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP2_RE2_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP3_CONF','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_EMB_OP4_CONF','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_INSERT_CONF_ENTREE_RECAP','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_NBJRS_TAD','WKF_MUT_SOC_ACCEPT','Nombre de jours hebdo TAD','N','span',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_HOZ_TAD') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_HOZ_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1041',NULL,'Groupe de données TAD pour horaires',NULL,NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_HOZ_TAD') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_HOZ_TAD','NPA_AFFICHAGE',NULL,NULL,'N',NULL,'1041',NULL,'Groupe de données TAD pour horaires',NULL,NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_HOZ_TAD') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_HOZ_TAD','#EOL_7','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','#LIBELLE_1','27',NULL,'FormTitreµIndemnité de télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','RD_MTFORF_TAD','28','N','FDonneeGµ€',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','RD_NBJRS_TAD','29',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_HOZ_TAD') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_HOZ_TAD','#EOL_7','26',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','#LIBELLE_1','27',NULL,'FormTitreµIndemnité de télétravail',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','RD_MTFORF_TAD','28','N','FDonneeGµ€',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_HOZ_TAD','RD_NBJRS_TAD','29',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_CTRL_JRSTAD_MAXI6') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_CTRL_JRSTAD_MAXI6','CTL','Contrôle que le nombre de jours hebdo de TAD n''excède pas 6 jours',NULL,'1041',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"GT","OPERANDE_2":"VALEUR£6","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENHOZ02£NOM_DONNEE_FOCUS=DONNEE^RD_NBJRS_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le nombre de jours de TAD hebdo ne peut pas excéder 6 jours','N',NULL,'/*¿ * RD_CTRL_JRSTAD_MAXI6 :¿ * Le nombre de jours de TAD hebdo ne peut pas excéder 6 jours¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD > 6) {¿	ERR("GENHOZ02", DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD);¿}¿','Contrôle que le nombre de jours hebdo de TAD n''excède pas 6 jours'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_CTRL_JRSTAD_MAXI6') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_CTRL_JRSTAD_MAXI6','CTL','Contrôle que le nombre de jours hebdo de TAD n''excède pas 6 jours',NULL,'1041',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_NBJRS_TAD","OPERATEUR":"GT","OPERANDE_2":"VALEUR£6","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"ERR","OPERANDE_2":"CODEERREUR£GENHOZ02£NOM_DONNEE_FOCUS=DONNEE^RD_NBJRS_TAD","RESULTAT":"£","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Le nombre de jours de TAD hebdo ne peut pas excéder 6 jours','N',NULL,'/*¿ * RD_CTRL_JRSTAD_MAXI6 :¿ * Le nombre de jours de TAD hebdo ne peut pas excéder 6 jours¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD > 6) {¿	ERR("GENHOZ02", DIC_ADM_CONTRAT_HISTO.RD_NBJRS_TAD);¿}¿','Contrôle que le nombre de jours hebdo de TAD n''excède pas 6 jours'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_CTRL_JRSTAD_MAXI6') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_CTRL_JRSTAD_MAXI6','1',NULL,'DONNEE£RD_NBJRS_TADµVALEUR£6µGT',NULL,NULL,'2','FIN'
'*','RD_CTRL_JRSTAD_MAXI6','2','££','ERR','CODEERREUR£GENHOZ02£NOM_DONNEE_FOCUS=DONNEE^RD_NBJRS_TAD','£','FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_CTRL_JRSTAD_MAXI6') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_CTRL_JRSTAD_MAXI6','1',NULL,'DONNEE£RD_NBJRS_TADµVALEUR£6µGT',NULL,NULL,'2','FIN'
'*','RD_CTRL_JRSTAD_MAXI6','2','££','ERR','CODEERREUR£GENHOZ02£NOM_DONNEE_FOCUS=DONNEE^RD_NBJRS_TAD','£','FIN','FIN'
##
TAG_CHARSET=@€éèç
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CATFISC','RD_CATMAL','RD_CATVIE','RD_CFE_ASSAT','RD_CFE_ASSMAL','RD_CFE_ASSVIE','RD_CFE_COT','RD_CODE_NB_CFE','RD_COTDET','RD_DSDEB_DETEXP','RD_DSFIN_DETEXP','RD_ECR_EXPAT_DETACHE','RD_EMPETR','RD_LIEUDET','RD_MODIFEXPDET','RD_MOTEXP','RD_OPT_ZA446','RD_OPT_ZP170','RD_OPT_ZP171','RD_PARTPE','RD_POURCGARP','RD_TDETEXP') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_CATFISC','Catégorie fiscale (soumis/non soumis)','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CATMAL','Catégorie maladie','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CATVIE','Catégorie vieillesse','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CFE_ASSAT','Assiette individuelle AT - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSMAL','Assiette individuelle maladie - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSVIE','Assiette individuelle vieillesse - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_COT','Cotisant CFE','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_NB_CFE','Code nombre de salariés adhérant CFE','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_COTDET','Catégorie de cotisant particulière Détachés','DIC_ADM_CONTRAT_HISTO','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDEB_DETEXP','Date de début expatriation ou détachement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_DSFIN_DETEXP','Date de fin expatriation ou détachement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_ECR_EXPAT_DETACHE','Passage par l''écran Expat_Détaché','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_EMPETR','Emploi à l''étranger dans struct. permanente et autonome','DIC_ADM_CONTRAT_HISTO','X','1',NULL,'O','N',NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_LIEUDET','Lieu de détachement','DIC_ADM_CONTRAT_HISTO','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_MODIFEXPDET','Changement information Expatriés Detachés','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_MOTEXP','Motif d''expatriation','DIC_ADM_CONTRAT_HISTO','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZA446','Option séjour/soins en France','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZP170','Option voyage expatriation','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZP171','Option indemnités journalières','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_PARTPE','Particularité Pôle Emploi','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_POURCGARP','% prise en charge GARP employeur','DIC_ADM_CONTRAT_HISTO','9','5','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_TDETEXP','Type de détachement ou d''expatriation','DIC_ADM_CONTRAT_HISTO','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CATFISC','RD_CATMAL','RD_CATVIE','RD_CFE_ASSAT','RD_CFE_ASSMAL','RD_CFE_ASSVIE','RD_CFE_COT','RD_CODE_NB_CFE','RD_COTDET','RD_DSDEB_DETEXP','RD_DSFIN_DETEXP','RD_ECR_EXPAT_DETACHE','RD_EMPETR','RD_LIEUDET','RD_MODIFEXPDET','RD_MOTEXP','RD_OPT_ZA446','RD_OPT_ZP170','RD_OPT_ZP171','RD_PARTPE','RD_POURCGARP','RD_TDETEXP') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_CATFISC','Catégorie fiscale (soumis/non soumis)','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CATMAL','Catégorie maladie','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CATVIE','Catégorie vieillesse','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CFE_ASSAT','Assiette individuelle AT - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSMAL','Assiette individuelle maladie - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSVIE','Assiette individuelle vieillesse - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_COT','Cotisant CFE','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_CODE_NB_CFE','Code nombre de salariés adhérant CFE','DIC_ADM_CONTRAT_HISTO','N','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_COTDET','Catégorie de cotisant particulière Détachés','DIC_ADM_CONTRAT_HISTO','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_DSDEB_DETEXP','Date de début expatriation ou détachement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_DSFIN_DETEXP','Date de fin expatriation ou détachement','DIC_ADM_CONTRAT_HISTO','D','dd.MM.yyyy',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_ECR_EXPAT_DETACHE','Passage par l''écran Expat_Détaché','DIC_DONNEES_VIRTUELLES','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_EMPETR','Emploi à l''étranger dans struct. permanente et autonome','DIC_ADM_CONTRAT_HISTO','X','1',NULL,'O','N',NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_LIEUDET','Lieu de détachement','DIC_ADM_CONTRAT_HISTO','X','4',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_MODIFEXPDET','Changement information Expatriés Detachés','DIC_DONNEES_VIRTUELLES','X','1',NULL,'O','N',NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_MOTEXP','Motif d''expatriation','DIC_ADM_CONTRAT_HISTO','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZA446','Option séjour/soins en France','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZP170','Option voyage expatriation','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_OPT_ZP171','Option indemnités journalières','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_PARTPE','Particularité Pôle Emploi','DIC_ADM_CONTRAT_HISTO','X','1',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
'*','RD_POURCGARP','% prise en charge GARP employeur','DIC_ADM_CONTRAT_HISTO','9','5','2',NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,'Y',NULL,'N'
'*','RD_TDETEXP','Type de détachement ou d''expatriation','DIC_ADM_CONTRAT_HISTO','X','5',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1028',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CATFISC','RD_CATMAL','RD_CATVIE','RD_CFE_ASSAT','RD_CFE_ASSMAL','RD_CFE_ASSVIE','RD_CFE_COT','RD_CODE_NB_CFE','RD_COTDET','RD_DSDEB_DETEXP','RD_DSFIN_DETEXP','RD_ECR_EXPAT_DETACHE','RD_EMPETR','RD_LIEUDET','RD_MODIFEXPDET','RD_MOTEXP','RD_OPT_ZA446','RD_OPT_ZP170','RD_OPT_ZP171','RD_PARTPE','RD_POURCGARP','RD_TDETEXP') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CATFISC','*','Catégorie fiscale (soumis/non soumis)','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CATMAL','*','Catégorie maladie','N','text','TAB_RD_MAL_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CATVIE','*','Catégorie vieillesse','N','text','TAB_RD_VIEIL_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CFE_ASSAT','*','Assiette individuelle AT - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSMAL','*','Assiette individuelle maladie - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSVIE','*','Assiette individuelle vieillesse - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_COT','*','Cotisant CFE','N','text','TAB_RD_COT_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CODE_NB_CFE','*','Code nombre de salariés adhérant CFE','N','select',NULL,NULL,'Pilotage VRI,Moins de 100,Entre 100 et 400','0,1,2',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COTDET','*','Catégorie de cotisant particulière Détachés','N','text','TAB_RD_CODET_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDEB_DETEXP','*','Date de début expatriation ou détachement','R_RD_EXP_DET_AFFICHAGE','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSFIN_DETEXP','*','Date de fin expatriation ou détachement','R_RD_EXP_DET_AFFICHAGE','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ECR_EXPAT_DETACHE','*','Passage par l''écran Expat_Détaché','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','ECR_MODIF_WKFMOD_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_EXPAT_DETACHE','WKF_MODIF_CNT_SELECT','Passage par l''écran Expat_Détaché','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_EMPETR','*','Emploi à l''étranger dans struct. permanente et autonome','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_LIEUDET','*','Lieu de détachement','N','text','TAB_RD_LIEU_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MODIFEXPDET','*','Changement des informations Expatriés Detachés','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'RD_MODIFEXPDET_WKFMOD_DECOCHE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MOTEXP','*','Motif d''expatriation','N','text','TAB_RD_MOTIF_EXPAT','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_EXPAT_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_OPT_ZA446','*','Option séjour/soins en France','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_OPT_ZP170','*','Option voyage expatriation','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_OPT_ZP171','*','Option indemnités journalières','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PARTPE','*','Particularité Pôle Emploi','N','text','TAB_RD_POLEM_EXP','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_POURCGARP','*','% prise en charge GARP employeur','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TDETEXP','*','Type de détachement ou d''expatriation','N','text','TAB_RD_TYPE_EXPAT_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CATFISC','RD_CATMAL','RD_CATVIE','RD_CFE_ASSAT','RD_CFE_ASSMAL','RD_CFE_ASSVIE','RD_CFE_COT','RD_CODE_NB_CFE','RD_COTDET','RD_DSDEB_DETEXP','RD_DSFIN_DETEXP','RD_ECR_EXPAT_DETACHE','RD_EMPETR','RD_LIEUDET','RD_MODIFEXPDET','RD_MOTEXP','RD_OPT_ZA446','RD_OPT_ZP170','RD_OPT_ZP171','RD_PARTPE','RD_POURCGARP','RD_TDETEXP') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CATFISC','*','Catégorie fiscale (soumis/non soumis)','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CATMAL','*','Catégorie maladie','N','text','TAB_RD_MAL_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CATVIE','*','Catégorie vieillesse','N','text','TAB_RD_VIEIL_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_CFE_ASSAT','*','Assiette individuelle AT - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSMAL','*','Assiette individuelle maladie - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSVIE','*','Assiette individuelle vieillesse - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_COT','*','Cotisant CFE','N','text','TAB_RD_COT_CFE','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CODE_NB_CFE','*','Code nombre de salariés adhérant CFE','N','select',NULL,NULL,'Pilotage VRI,Moins de 100,Entre 100 et 400','0,1,2',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_COTDET','*','Catégorie de cotisant particulière Détachés','N','text','TAB_RD_CODET_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSDEB_DETEXP','*','Date de début expatriation ou détachement','R_RD_EXP_DET_AFFICHAGE','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DSFIN_DETEXP','*','Date de fin expatriation ou détachement','R_RD_EXP_DET_AFFICHAGE','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_ECR_EXPAT_DETACHE','*','Passage par l''écran Expat_Détaché','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N','ECR_MODIF_WKFMOD_INIT',NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_ECR_EXPAT_DETACHE','WKF_MODIF_CNT_SELECT','Passage par l''écran Expat_Détaché','N','hidden',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_EMPETR','*','Emploi à l''étranger dans struct. permanente et autonome','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_LIEUDET','*','Lieu de détachement','N','text','TAB_RD_LIEU_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MODIFEXPDET','*','Changement des informations Expatriés Detachés','N','checkbox',NULL,NULL,NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'RD_MODIFEXPDET_WKFMOD_DECOCHE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_MOTEXP','*','Motif d''expatriation','N','text','TAB_RD_MOTIF_EXPAT','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,'RD_EXPAT_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_OPT_ZA446','*','Option séjour/soins en France','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,'C','NPA_AFFICHAGE',NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_OPT_ZP170','*','Option voyage expatriation','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_OPT_ZP171','*','Option indemnités journalières','N','select','TAB_RD_OUINON','1',NULL,NULL,NULL,'N','N',NULL,NULL,NULL,'NPA_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PARTPE','*','Particularité Pôle Emploi','N','text','TAB_RD_POLEM_EXP','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_POURCGARP','*','% prise en charge GARP employeur','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_TDETEXP','*','Type de détachement ou d''expatriation','N','text','TAB_RD_TYPE_EXPAT_DETAC','1','Code,Libellé','#OUI,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_ECRAN
==
DELETE FROM META_ECRAN WHERE NOM_PAGE IN ('RD_ASS_EMB_INIT_ECR14','RD_WKF_MODIF_CNT_ECR10') AND COMPANY_ID='*'
##
META_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA)
'*','RD_ASS_EMB_INIT_ECR14','Expatriés_Détachés','RD','EXP',NULL,'WKF',NULL,'RD_EXP_DET_ECR','W',NULL,NULL,'1028','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL
'*','RD_WKF_MODIF_CNT_ECR10','Changement informations expatriés ou détachés','RD','EXP',NULL,'WKF',NULL,'RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','W',NULL,NULL,'1028','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL
##
REF_ECRAN
==
DELETE FROM REF_ECRAN WHERE NOM_PAGE IN ('RD_ASS_EMB_INIT_ECR14','RD_WKF_MODIF_CNT_ECR10') AND COMPANY_ID='*'
##
REF_ECRAN (COMPANY_ID,NOM_PAGE,LIBELLE_PAGE,CODE_DESTINATION,ROLE_ECRAN,NOM_DICTIONNAIRE,MODULE_ECRAN,BOUTONS_ECRAN,ID_GROUPE_DONNEES,TYPE_ECRAN,NOM_SERVICELET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,CODEDI,TOUTES_PERIODES_EMPLOI,SURCHARGE_EDITION,PERSO_PJ_UX,DESCRIPTION_DA)
'*','RD_ASS_EMB_INIT_ECR14','Expatriés_Détachés','RD','EXP',NULL,'WKF',NULL,'RD_EXP_DET_ECR','W',NULL,NULL,'1028','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL
'*','RD_WKF_MODIF_CNT_ECR10','Changement informations expatriés ou détachés','RD','EXP',NULL,'WKF',NULL,'RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','W',NULL,NULL,'1028','N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'0',NULL,'N',NULL,NULL
##
META_GROUPE_DONNEES_INFO
==
DELETE FROM META_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_ECR','RD_EXP_DET_ECR_ONGLET') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE',NULL,NULL,NULL,'N',NULL,'1028',NULL,'Groupe de données Expatriés ou Détachés du wkf modifications contractuelles',NULL,'O'
'*','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_AFFICHAGE',NULL,NULL,'N',NULL,'1028',NULL,'CNT_WKF_MOD_SELECT EXPAT  DETACHE','Groupe pour écran de sélection des modifications contractuelles pour EXPAT et DETACHE (avec règle d''affichage)',NULL
'*','RD_EXP_DET_ECR',NULL,NULL,NULL,'N',NULL,'1028',NULL,'Ecran expatriés - détachés','Ecran dédié aux expatriés et détachés',NULL
'*','RD_EXP_DET_ECR_ONGLET','RD_EXP_DET_AFFICHAGE',NULL,NULL,'O',NULL,'1028',NULL,'Expatriés _ Détachés','Onglet dédiés aux expatriés et détachés de l''écran contrat courant ',NULL
##
REF_GROUPE_DONNEES_INFO
==
DELETE FROM REF_GROUPE_DONNEES_INFO WHERE ID_GROUPE IN ('RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_ECR','RD_EXP_DET_ECR_ONGLET') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES_INFO (COMPANY_ID,ID_GROUPE,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,EST_ONGLET,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,LIBELLE_GROUPE,DESCRIPTION_GROUPE,PERSONNALISE)
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE',NULL,NULL,NULL,'N',NULL,'1028',NULL,'Groupe de données Expatriés ou Détachés du wkf modifications contractuelles',NULL,'O'
'*','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_AFFICHAGE',NULL,NULL,'N',NULL,'1028',NULL,'CNT_WKF_MOD_SELECT EXPAT  DETACHE','Groupe pour écran de sélection des modifications contractuelles pour EXPAT et DETACHE (avec règle d''affichage)',NULL
'*','RD_EXP_DET_ECR',NULL,NULL,NULL,'N',NULL,'1028',NULL,'Ecran expatriés - détachés','Ecran dédié aux expatriés et détachés',NULL
'*','RD_EXP_DET_ECR_ONGLET','RD_EXP_DET_AFFICHAGE',NULL,NULL,'O',NULL,'1028',NULL,'Expatriés _ Détachés','Onglet dédiés aux expatriés et détachés de l''écran contrat courant ',NULL
##
META_GROUPE_DONNEES
==
DELETE FROM META_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_ECR','RD_EXP_DET_ECR_ONGLET') AND COMPANY_ID='*'
##
META_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#DATE_EFF','22','O',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#EOL_20','24',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#GROUPE_2','25',NULL,'RD_EXP_DET_ECR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#TEXTE_1','21','N','FormTitreµDate d''effet en cours',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_ECR_EXPAT_DETACHE','19',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_MODIFEXPDET','55','N','FDonneeGµChangement des informations Expatriés - Détachés',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_1','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_2','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_3','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_4','37',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_5','44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_6','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_7','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_8','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#LIBELLE_1','2','N','FormTitreµPériode et motif d''expatriation ou de détachement',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#LIBELLE_2','17',NULL,'FormTitreµInformations relatives aux cotisations',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATFISC','29',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATMAL','24',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATVIE','27',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSAT','38',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSMAL','39',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSVIE','40',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_COT','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CODE_NB_CFE','1',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_COTDET','22',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_DSDEB_DETEXP','3',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_DSFIN_DETEXP','5',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_EMPETR','19',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_LIEUDET','15',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_MOTEXP','10',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZA446','46',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZP170','47',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZP171','48',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_PARTPE','32',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_POURCGARP','33',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_TDETEXP','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR_ONGLET','#GROUPE_2','1',NULL,'RD_EXP_DET_ECR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
REF_GROUPE_DONNEES
==
DELETE FROM REF_GROUPE_DONNEES WHERE ID_GROUPE IN ('RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_EXP_DET_ECR','RD_EXP_DET_ECR_ONGLET') AND COMPANY_ID='*'
##
REF_GROUPE_DONNEES (COMPANY_ID,ID_GROUPE,NOM_DONNEE,ORDRE,A_COTE_DONNEE_PRECEDENTE,SUFFIXE_OU_LIBELLE,TABLEAU_REQUETE_NOMPAGE,TABLEAU_REQUETE_IDREQUETE,NOM_PAGE_AJOUT,NOM_PAGE_MODIF,ID_REGLEGESTION_CTL_RD_SUPP,ID_REGLEGESTION_CTL_CLI_SUPP,TYPE_REGLEGESTION_CTL_CLI_SUPP,MASQUER_LE_LIBELLE,DONNEE_CODE_EDITION,MESSAGE_CONFIRMATION,BOUTONS_TABLEAU_MULTIPLE)
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#DATE_EFF','22','O',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#EOL_20','24',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#GROUPE_2','25',NULL,'RD_EXP_DET_ECR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','#TEXTE_1','21','N','FormTitreµDate d''effet en cours',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MODIF_CONTRAT_EXPAT_DETACHE','RD_ECR_EXPAT_DETACHE','19',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_CNT_WKF_MOD_SELECT_EXPDET','RD_MODIFEXPDET','55','N','FDonneeGµChangement des informations Expatriés - Détachés',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'O',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_1','7',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_2','18',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_3','30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_4','37',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_5','44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_6','9',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_7','23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#EOL_8','14',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#LIBELLE_1','2','N','FormTitreµPériode et motif d''expatriation ou de détachement',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','#LIBELLE_2','17',NULL,'FormTitreµInformations relatives aux cotisations',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATFISC','29',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATMAL','24',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CATVIE','27',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSAT','38',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSMAL','39',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_ASSVIE','40',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CFE_COT','21',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_CODE_NB_CFE','1',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_COTDET','22',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_DSDEB_DETEXP','3',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_DSFIN_DETEXP','5',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_EMPETR','19',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_LIEUDET','15',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_MOTEXP','10',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZA446','46',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZP170','47',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_OPT_ZP171','48',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_PARTPE','32',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_POURCGARP','33',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR','RD_TDETEXP','8',NULL,'FDonneeGµ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
'*','RD_EXP_DET_ECR_ONGLET','#GROUPE_2','1',NULL,'RD_EXP_DET_ECR',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_DETACHE_AFFICHAGE','RD_EXPAT_AFFICHAGE','RD_EXP_DET_AFFICHAGE','RD_MODIFEXPDET_WKFMOD_DECOCHE') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_DETACHE_AFFICHAGE','AFF','Affichage conditionnel pour Détachés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£78,79£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour DETACHE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_DETACHE_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour DETACHE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(78, 79)) {¿}¿','Condition d''affichage des données / groupes de données pour Détachés (type de contrat - ZA700)'
'*','RD_EXPAT_AFFICHAGE','AFF','Affichage conditionnel pour Expatriés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£71,72£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour EXPATRIE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_EXPAT_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour EXPATRIE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(71, 72)) {¿}¿','Condition d''affichage des données / groupes de données pour Expatriés (type de contrat - ZA700)'
'*','RD_EXP_DET_AFFICHAGE','AFF','Affichage conditionnel pour Expatriés et Détachés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£71,72,78,79£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour EXPAT ou DETACHE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_EXP_DET_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour EXPAT ou DETACHE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(71, 72, 78, 79)) {¿}¿','Condition d''affichage des données / groupes de données pour Expat et détachés (type de contrat - ZA700)'
'*','RD_MODIFEXPDET_WKFMOD_DECOCHE','AFF','MODIFEXPDET non saisissable',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_EXPAT_DETACHE","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur de la donnée ECR_EXPAT_DETACHE est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_MODIFEXPDET_WKFMOD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur de la donnée ECR_EXPAT_DETACHE est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_EXPAT_DETACHE != "O") {¿}¿','MODIFEXPDET non saisissable'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('RD_DETACHE_AFFICHAGE','RD_EXPAT_AFFICHAGE','RD_EXP_DET_AFFICHAGE','RD_MODIFEXPDET_WKFMOD_DECOCHE') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','RD_DETACHE_AFFICHAGE','AFF','Affichage conditionnel pour Détachés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£78,79£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour DETACHE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_DETACHE_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour DETACHE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(78, 79)) {¿}¿','Condition d''affichage des données / groupes de données pour Détachés (type de contrat - ZA700)'
'*','RD_EXPAT_AFFICHAGE','AFF','Affichage conditionnel pour Expatriés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£71,72£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour EXPATRIE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_EXPAT_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour EXPATRIE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(71, 72)) {¿}¿','Condition d''affichage des données / groupes de données pour Expatriés (type de contrat - ZA700)'
'*','RD_EXP_DET_AFFICHAGE','AFF','Affichage conditionnel pour Expatriés et Détachés',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£ZA700","OPERATEUR":"IN","OPERANDE_2":"VALEUR£71,72,78,79£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','La donnée ou le groupe ne s''affiche que pour EXPAT ou DETACHE (type de contrat - ZA700)','C',NULL,'/*¿ * RD_EXP_DET_AFFICHAGE :¿ * La donnée ou le groupe ne s''affiche que pour EXPAT ou DETACHE (type de contrat - ZA700)¿ */¿¿if (DIC_ADM_CONTRAT_HISTO.ZA700.IN(71, 72, 78, 79)) {¿}¿','Condition d''affichage des données / groupes de données pour Expat et détachés (type de contrat - ZA700)'
'*','RD_MODIFEXPDET_WKFMOD_DECOCHE','AFF','MODIFEXPDET non saisissable',NULL,'1028',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_ECR_EXPAT_DETACHE","OPERATEUR":"NEQ","OPERANDE_2":"VALEUR£O","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N","rowIdx":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0,"FLAG_DELETE":"N"}]','Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur de la donnée ECR_EXPAT_DETACHE est égale à Oui  (on est passé par l''écran de maj)','V',NULL,'/*¿ * RD_MODIFEXPDET_WKFMOD_DECOCHE :¿ * Les cases à cocher de l''écran de sélection des modifications contractuelles deviennent non saisissables si valeur de la donnée ECR_EXPAT_DETACHE est égale à Oui  (on est passé par l''écran de maj)¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_ECR_EXPAT_DETACHE != "O") {¿}¿','MODIFEXPDET non saisissable'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_DETACHE_AFFICHAGE','RD_EXPAT_AFFICHAGE','RD_EXP_DET_AFFICHAGE','RD_MODIFEXPDET_WKFMOD_DECOCHE') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_DETACHE_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£78,79£µIN',NULL,NULL,'FIN','FIN'
'*','RD_EXPAT_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£71,72£µIN',NULL,NULL,'FIN','FIN'
'*','RD_EXP_DET_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£71,72,78,79£µIN',NULL,NULL,'FIN','FIN'
'*','RD_MODIFEXPDET_WKFMOD_DECOCHE','1',NULL,'DONNEE£RD_ECR_EXPAT_DETACHEµVALEUR£OµNEQ',NULL,NULL,'FIN','FIN'
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('RD_DETACHE_AFFICHAGE','RD_EXPAT_AFFICHAGE','RD_EXP_DET_AFFICHAGE','RD_MODIFEXPDET_WKFMOD_DECOCHE') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','RD_DETACHE_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£78,79£µIN',NULL,NULL,'FIN','FIN'
'*','RD_EXPAT_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£71,72£µIN',NULL,NULL,'FIN','FIN'
'*','RD_EXP_DET_AFFICHAGE','1',NULL,'DONNEE£ZA700µVALEUR£71,72,78,79£µIN',NULL,NULL,'FIN','FIN'
'*','RD_MODIFEXPDET_WKFMOD_DECOCHE','1',NULL,'DONNEE£RD_ECR_EXPAT_DETACHEµVALEUR£OµNEQ',NULL,NULL,'FIN','FIN'
##
META_DONNEE_GENERALE
==
DELETE FROM META_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CFE_ASSMUT','RD_CFE_ASSPREV','RD_CFE_ASSRET','RD_CFE_ASSRETCOMP','RD_COPAYS_EXPDET','RD_DIFF_SAL','RD_HARDSHIP','RD_HYPOTAX','RD_NBCFE','RD_PRIME_DET','RD_PRIME_EXP','RD_REMB_LOG','RD_SPLIT_SAL','RD_TRAV_NB_CFE') AND COMPANY_ID='*'
##
META_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_CFE_ASSMUT','Assiette individuelle Mutuelle - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSPREV','Assiette individuelle Prévoyance - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSRET','Assiette individuelle Retraite - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSRETCOMP','Assiette individuelle Retraite Complémentaire - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_COPAYS_EXPDET','Code Pays ','DIC_ADM_CONTRAT_HISTO','X','3',NULL,NULL,NULL,NULL,'Z','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
'*','RD_DIFF_SAL','Différentiel salaire','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_HARDSHIP','Hardship premium','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_HYPOTAX','Hypotax','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_NBCFE','Nombre de salariés adhérant CFE','DIC_SOCIETE','N','3',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
'*','RD_PRIME_DET','Prime de détachement','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_PRIME_EXP','Prime d''expatriation','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_REMB_LOG','Remboursement logement','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_SPLIT_SAL','Split salary','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_TRAV_NB_CFE','Zone trav nombre de salariés adhérant CFE','DIC_DONNEES_VIRTUELLES','N','3',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
##
REF_DONNEE_GENERALE
==
DELETE FROM REF_DONNEE_GENERALE WHERE NOM_DONNEE IN ('RD_CFE_ASSMUT','RD_CFE_ASSPREV','RD_CFE_ASSRET','RD_CFE_ASSRETCOMP','RD_COPAYS_EXPDET','RD_DIFF_SAL','RD_HARDSHIP','RD_HYPOTAX','RD_NBCFE','RD_PRIME_DET','RD_PRIME_EXP','RD_REMB_LOG','RD_SPLIT_SAL','RD_TRAV_NB_CFE') AND COMPANY_ID='*'
##
REF_DONNEE_GENERALE (COMPANY_ID,NOM_DONNEE,LIBELLE_DONNEE,NOM_DICTIONNAIRE,TYPE_DONNEE,LONGUEUR_MASQUE_NB_ENTIERS,NB_DECIMAUX,CHECKBOX_VALEUR_ON,CHECKBOX_VALEUR_OFF,MODELE,UTILISATION,ACTIF,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,PERSONNALISE,MINUSCULES_AUTORISEES,NOM_DONNEE_CLE_DIC_REFERENCE,PROPAGER_TOUTES_OCCURRENCES)
'*','RD_CFE_ASSMUT','Assiette individuelle Mutuelle - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSPREV','Assiette individuelle Prévoyance - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSRET','Assiette individuelle Retraite - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_CFE_ASSRETCOMP','Assiette individuelle Retraite Complémentaire - CFE','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_COPAYS_EXPDET','Code Pays ','DIC_ADM_CONTRAT_HISTO','X','3',NULL,NULL,NULL,NULL,'Z','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
'*','RD_DIFF_SAL','Différentiel salaire','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_HARDSHIP','Hardship premium','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_HYPOTAX','Hypotax','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_NBCFE','Nombre de salariés adhérant CFE','DIC_SOCIETE','N','3',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
'*','RD_PRIME_DET','Prime de détachement','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_PRIME_EXP','Prime d''expatriation','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_REMB_LOG','Remboursement logement','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_SPLIT_SAL','Split salary','DIC_ADM_CONTRAT_HISTO','9','7','2',NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,'Y',NULL,'N'
'*','RD_TRAV_NB_CFE','Zone trav nombre de salariés adhérant CFE','DIC_DONNEES_VIRTUELLES','N','3',NULL,NULL,NULL,NULL,'GZ','O',NULL,'1037',NULL,NULL,NULL,NULL,'N'
##
META_DONNEE_ECRAN
==
DELETE FROM META_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CFE_ASSMUT','RD_CFE_ASSPREV','RD_CFE_ASSRET','RD_CFE_ASSRETCOMP','RD_COPAYS_EXPDET','RD_DIFF_SAL','RD_HARDSHIP','RD_HYPOTAX','RD_NBCFE','RD_PRIME_DET','RD_PRIME_EXP','RD_REMB_LOG','RD_SPLIT_SAL','RD_TRAV_NB_CFE') AND COMPANY_ID='*'
##
META_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CFE_ASSMUT','*','Assiette individuelle Mutuelle - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSPREV','*','Assiette individuelle Prévoyance - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSRET','*','Assiette individuelle Retraite - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSRETCOMP','*','Assiette individuelle Retraite Complémentaire - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_COPAYS_EXPDET','*','Pays d''expatriation ou de détachement','N','text','TAB_RD_COPAYS','1','Code,Pays','RD_COPAYS_EXPDET,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DIFF_SAL','*','Différentiel salaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_HARDSHIP','*','Hardship premium','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_HYPOTAX','*','Hypotax','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NBCFE','*','Nombre de salariés adhérant CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PRIME_DET','*','Prime de détachement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PRIME_EXP','*','Prime d''expatriation','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,'RD_EXPAT_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REMB_LOG','*','Remboursement logement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_SPLIT_SAL','*','Split salary','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TRAV_NB_CFE','*','Zone trav nombre de salariés adhérant CFE','N','hidden','REG_RD_NBCFE_ALIM','1','Pilotage VRI,Moins de 100,Entre 100 et 400','RD_TRAV_NB_CFE','CODSTE','N',NULL,'RD_TRAV_NBCFE_*_ALIM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
REF_DONNEE_ECRAN
==
DELETE FROM REF_DONNEE_ECRAN WHERE NOM_DONNEE IN ('RD_CFE_ASSMUT','RD_CFE_ASSPREV','RD_CFE_ASSRET','RD_CFE_ASSRETCOMP','RD_COPAYS_EXPDET','RD_DIFF_SAL','RD_HARDSHIP','RD_HYPOTAX','RD_NBCFE','RD_PRIME_DET','RD_PRIME_EXP','RD_REMB_LOG','RD_SPLIT_SAL','RD_TRAV_NB_CFE') AND COMPANY_ID='*'
##
REF_DONNEE_ECRAN (COMPANY_ID,NOM_DONNEE,NOM_PAGE,LIBELLE_DONNEE,EST_OBLIGATOIRE,MODE_SAISIE,APPELTABLE_NOMPAGE,APPELTABLE_IDREQUETE,APPELTABLE_LISTELIBELLE,APPELTABLE_LISTECHAMPS,APPELTABLE_PARAMETRES,AFFICHE_CHOIX_VIDE_SELECT,VALEUR_DEFAUT,ID_REGLEGESTION_AUT_RD,ID_REGLEGESTION_AUT_CLI,TYPE_REGLEGESTION_AUT_CLI,ID_REGLEGESTION_AFF_RD,ID_REGLEGESTION_AFF_CLI,TYPE_REGLEGESTION_AFF_CLI,ID_REGLEGESTION_CTL_RD,ID_REGLEGESTION_CTL_CLI,TYPE_REGLEGESTION_CTL_CLI,SEARCH_STRUCTURE_PARAM,REFRESH_AFTER_CHANGE,SPAN_CHECK_VALUE,LIB_ALIGN_TOP,NB_LIGNE_TEXTEAREA,NB_COLONNE_TEXTEAREA)
'*','RD_CFE_ASSMUT','*','Assiette individuelle Mutuelle - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSPREV','*','Assiette individuelle Prévoyance - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSRET','*','Assiette individuelle Retraite - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_CFE_ASSRETCOMP','*','Assiette individuelle Retraite Complémentaire - CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_COPAYS_EXPDET','*','Pays d''expatriation ou de détachement','N','text','TAB_RD_COPAYS','1','Code,Pays','RD_COPAYS_EXPDET,#OUI',NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_DIFF_SAL','*','Différentiel salaire','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_HARDSHIP','*','Hardship premium','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_HYPOTAX','*','Hypotax','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_NBCFE','*','Nombre de salariés adhérant CFE','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PRIME_DET','*','Prime de détachement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,'RD_DETACHE_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_PRIME_EXP','*','Prime d''expatriation','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,'RD_EXPAT_AFFICHAGE',NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_REMB_LOG','*','Remboursement logement','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,'C',NULL,NULL,'C',NULL,NULL,'C',NULL,'N','N','N','0','0'
'*','RD_SPLIT_SAL','*','Split salary','N','text',NULL,NULL,NULL,NULL,NULL,'N',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
'*','RD_TRAV_NB_CFE','*','Zone trav nombre de salariés adhérant CFE','N','hidden','REG_RD_NBCFE_ALIM','1','Pilotage VRI,Moins de 100,Entre 100 et 400','RD_TRAV_NB_CFE','CODSTE','N',NULL,'RD_TRAV_NBCFE_*_ALIM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N','N','N','0','0'
##
META_REGLEGESTION_DESC
==
DELETE FROM META_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('NBCFE_*_ALIM','RD_TRAV_NBCFE_*_ALIM') AND COMPANY_ID='*'
##
META_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','NBCFE_*_ALIM','AUT','Alimentation du code nb CFE selon NBCFE (retour société)',NULL,'1037',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£0","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"GT","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"LE","OPERANDE_2":"VALEUR£100","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£1","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"GT","OPERANDE_2":"VALEUR£100","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"LE","OPERANDE_2":"VALEUR£400","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£2","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation du code nb CFE selon NBCFE (retour société) pas saisissable.','O',NULL,'/*¿ * NBCFE_*_ALIM :¿ * Alimentation du code nb CFE selon NBCFE (retour société) pas saisissable.¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE == vide) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 0;¿}¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE > 0 && DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE <= 100) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 1;¿}¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE > 100 && DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE <= 400) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 2;¿}¿','Alimentation du code nb CFE selon NBCFE (retour société)'
'*','RD_TRAV_NBCFE_*_ALIM','AUT','Alimentation zone trav nombre salariés CFE en retour de société',NULL,'1037',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NBCFE_ALIM§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^CODSTE","RESULTAT":"DONNEE£RD_TRAV_NB_CFE","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation zone trav nombre salariés CFE en retour de société','O',NULL,'/*¿ * RD_TRAV_NBCFE_*_ALIM :¿ * Alimentation zone trav nombre salariés CFE en retour de société¿ */¿¿DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE = TAB("REG_RD_NBCFE_ALIM", 1, 0, DIC_ADM_CONTRAT_HISTO.CODSTE);¿','Alimentation zone trav nombre salariés CFE en retour de société'
##
REF_REGLEGESTION_DESC
==
DELETE FROM REF_REGLEGESTION_DESC WHERE ID_REGLEGESTION IN ('NBCFE_*_ALIM','RD_TRAV_NBCFE_*_ALIM') AND COMPANY_ID='*'
##
REF_REGLEGESTION_DESC (COMPANY_ID,ID_REGLEGESTION,TYPE_REGLE,LIBELLE,ID_PROJET,NUM_VERSION_RD,EST_SUPPRIME,REGLES_ECR,DESCRIPTION,FLAG_SPECIF_TYPE_REGLE,PERSONNALISE,REGLES_ALGO,REGLE_SYNTHETIQUE)
'*','NBCFE_*_ALIM','AUT','Alimentation du code nb CFE selon NBCFE (retour société)',NULL,'1037',NULL,'[{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"EQ","OPERANDE_2":"@vide£","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£0","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"GT","OPERANDE_2":"VALEUR£0","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"LE","OPERANDE_2":"VALEUR£100","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£1","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"GT","OPERANDE_2":"VALEUR£100","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ET_SI","OPERANDE_1":"DONNEE£RD_TRAV_NB_CFE","OPERATEUR":"LE","OPERANDE_2":"VALEUR£400","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"ALORS","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"OPERATION","OPERANDE_1":"VALEUR£2","OPERATEUR":"VAL","OPERANDE_2":"££","RESULTAT":"DONNEE£RD_CODE_NB_CFE","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"SINON","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0},{"TYPE":"FINSI","OPERANDE_1":"","OPERATEUR":"","OPERANDE_2":"","RESULTAT":"","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation du code nb CFE selon NBCFE (retour société) pas saisissable.','O',NULL,'/*¿ * NBCFE_*_ALIM :¿ * Alimentation du code nb CFE selon NBCFE (retour société) pas saisissable.¿ */¿¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE == vide) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 0;¿}¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE > 0 && DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE <= 100) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 1;¿}¿if (DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE > 100 && DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE <= 400) {¿	DIC_ADM_CONTRAT_HISTO.RD_CODE_NB_CFE = 2;¿}¿','Alimentation du code nb CFE selon NBCFE (retour société)'
'*','RD_TRAV_NBCFE_*_ALIM','AUT','Alimentation zone trav nombre salariés CFE en retour de société',NULL,'1037',NULL,'[{"TYPE":"OPERATION","OPERANDE_1":"££","OPERATEUR":"TAB","OPERANDE_2":"RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NBCFE_ALIM§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^CODSTE","RESULTAT":"DONNEE£RD_TRAV_NB_CFE","PAR_OUVR":0,"PAR_FERM":0}]','Alimentation zone trav nombre salariés CFE en retour de société','O',NULL,'/*¿ * RD_TRAV_NBCFE_*_ALIM :¿ * Alimentation zone trav nombre salariés CFE en retour de société¿ */¿¿DIC_DONNEES_VIRTUELLES.RD_TRAV_NB_CFE = TAB("REG_RD_NBCFE_ALIM", 1, 0, DIC_ADM_CONTRAT_HISTO.CODSTE);¿','Alimentation zone trav nombre salariés CFE en retour de société'
##
META_REGLEGESTION
==
DELETE FROM META_REGLEGESTION WHERE ID_REGLEGESTION IN ('NBCFE_*_ALIM','RD_TRAV_NBCFE_*_ALIM') AND COMPANY_ID='*'
##
META_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','NBCFE_*_ALIM','1',NULL,'DONNEE£RD_TRAV_NB_CFEµ@vide£µEQ',NULL,NULL,'2','3'
'*','NBCFE_*_ALIM','2','VALEUR£0','VAL','££','DONNEE£RD_CODE_NB_CFE','3','3'
'*','NBCFE_*_ALIM','3',NULL,'DONNEE£RD_TRAV_NB_CFEµVALEUR£0µGTµDONNEE£RD_TRAV_NB_CFEµVALEUR£100µLEµ#ET#',NULL,NULL,'5','6'
'*','NBCFE_*_ALIM','5','VALEUR£1','VAL','££','DONNEE£RD_CODE_NB_CFE','6','6'
'*','NBCFE_*_ALIM','6',NULL,'DONNEE£RD_TRAV_NB_CFEµVALEUR£100µGTµDONNEE£RD_TRAV_NB_CFEµVALEUR£400µLEµ#ET#',NULL,NULL,'8','FIN'
'*','NBCFE_*_ALIM','8','VALEUR£2','VAL','££','DONNEE£RD_CODE_NB_CFE','FIN','FIN'
'*','RD_TRAV_NBCFE_*_ALIM','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NBCFE_ALIM§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^CODSTE','DONNEE£RD_TRAV_NB_CFE',NULL,NULL
##
REF_REGLEGESTION
==
DELETE FROM REF_REGLEGESTION WHERE ID_REGLEGESTION IN ('NBCFE_*_ALIM','RD_TRAV_NBCFE_*_ALIM') AND COMPANY_ID='*'
##
REF_REGLEGESTION (COMPANY_ID,ID_REGLEGESTION,NUM_LIGNE,OPERANDE1,OPERATEUR,OPERANDE2,RESULTAT,BRANCHE_SI,BRANCHE_SINON)
'*','NBCFE_*_ALIM','1',NULL,'DONNEE£RD_TRAV_NB_CFEµ@vide£µEQ',NULL,NULL,'2','3'
'*','NBCFE_*_ALIM','2','VALEUR£0','VAL','££','DONNEE£RD_CODE_NB_CFE','3','3'
'*','NBCFE_*_ALIM','3',NULL,'DONNEE£RD_TRAV_NB_CFEµVALEUR£0µGTµDONNEE£RD_TRAV_NB_CFEµVALEUR£100µLEµ#ET#',NULL,NULL,'5','6'
'*','NBCFE_*_ALIM','5','VALEUR£1','VAL','££','DONNEE£RD_CODE_NB_CFE','6','6'
'*','NBCFE_*_ALIM','6',NULL,'DONNEE£RD_TRAV_NB_CFEµVALEUR£100µGTµDONNEE£RD_TRAV_NB_CFEµVALEUR£400µLEµ#ET#',NULL,NULL,'8','FIN'
'*','NBCFE_*_ALIM','8','VALEUR£2','VAL','££','DONNEE£RD_CODE_NB_CFE','FIN','FIN'
'*','RD_TRAV_NBCFE_*_ALIM','1','££','TAB','RETOURTABLE££NOM_PAGE=VALEUR^REG_RD_NBCFE_ALIM§ID_REQUETE=VALEUR^1§ID_COL=VALEUR^0§PARAM_1=DONNEE^CODSTE','DONNEE£RD_TRAV_NB_CFE',NULL,NULL
##
*_GROUPE_DONNEES
=SQL IFNOTEXIST=_GROUPE_DONNEES=TITRE_CMP_SORTIE_MANAGER=
CALL META_MODIF_STRUCTURE('_GROUPE_DONNEES', 'TITRE_CMP_SORTIE_MANAGER', 'VARCHAR2(150)')
##
*_GROUPE_DONNEES
=SQL IFNOTEXIST=_GROUPE_DONNEES=DEFAULT_VALUE_SORTIE_MANAGER=
CALL META_MODIF_STRUCTURE('_GROUPE_DONNEES', 'DEFAULT_VALUE_SORTIE_MANAGER', 'VARCHAR2(1)')
##
TGE_CREATE_TRIGGER
=SQL=
BEGIN
  FOR TABLE_DIC IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME LIKE 'DIC%' AND NOT REGEXP_LIKE(TABLE_NAME,'DIC.*_[0-9]+')) LOOP
    BEGIN
      TGE_CREATE_TRIGGER(TABLE_DIC.TABLE_NAME);
    EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;
END;
##
TGE_INSERT_RELIQ
=SQL=
CREATE OR REPLACE PROCEDURE TGE_INSERT_RELIQ (P_ID IN NUMBER,P_NUMPAC IN VARCHAR2 , P_PERIODE IN VARCHAR2 ,is_RETRO NUMBER) AS 
/********************************************************************************
Version     : V5.05.000
*********************************************************************************/
BEGIN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_INSERT_RELIQ (Begin)','Début insertion pour le numpac : '||P_NUMPAC);
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_INCIDENTS_PAIE','Insertion dans TGE_RELIQ_INCIDENTS_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_INCIDENTS_PAIE 
  (ID,NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_IP,CODE_IP,DATE_EFFET,CODE_IMPUTATION,HEURES,
   ORIGINE,LOGIN_CREATE,DATE_CREATE,ROLE_CREATE,ORIGINE_CREATE,LOGIN_MAJ,DATE_MAJ,ROLE_MAJ,ORIGINE_MAJ,
   CLE_IMPORT,CLE_ABSENCE,IDPACMAT,ENVOYE,TYPE_WRITER,JOUR_OUVRABLE,JOUR_OUVRE,JOUR_OEUVRE,JOUR_CALENDAIRE)
  select ID,NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_IP,CODE_IP,DATE_EFFET,CODE_IMPUTATION,HEURES,
         ORIGINE,LOGIN_CREATE,DATE_CREATE,ROLE_CREATE,ORIGINE_CREATE,LOGIN_MAJ,DATE_MAJ,ROLE_MAJ,ORIGINE_MAJ,
         CLE_IMPORT,CLE_ABSENCE,IDPACMAT,ENVOYE,TYPE_WRITER,JOUR_OUVRABLE,JOUR_OUVRE,JOUR_OEUVRE,JOUR_CALENDAIRE
  FROM TGE_INCIDENTS_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   to_date(periode) <= to_date(P_PERIODE,'yyyymm')
  AND nvl(ACTION_RETRO,'H') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_DONNEES_PAIE','Insertion dans  TGE_RELIQ_DONNEES_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_DONNEES_PAIE 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_DONNEE,CODE_RUBRIQUE,CODE_CAISSE,NO_SEQUENCE,SENS,CODE_IMPUTATION,
   ORIGINE,NOMBRE,TAUX,MONTANT,POURCENTAGE,DOMAINE_PRCTE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,
   PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,DATE_DEB_ARRET,TYPE_WRITER,PERIODE_AFFECTATION,CODE_REMPLACEMENT)
   
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,TYPE_DONNEE,CODE_RUBRIQUE,CODE_CAISSE,NO_SEQUENCE,SENS,CODE_IMPUTATION,
         ORIGINE,NOMBRE,TAUX,MONTANT,POURCENTAGE,DOMAINE_PRCTE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,
         PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,DATE_DEB_ARRET,TYPE_WRITER,PERIODE_AFFECTATION,CODE_REMPLACEMENT
  FROM TGE_DONNEES_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE
  AND nvl(ACTION_RETRO,'H') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_ELEMENTS_PAIE','Insertion dans  TGE_RELIQ_ELEMENTS_PAIE à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_ELEMENTS_PAIE 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,CODE_ELEMENT,INDICATIF,ORIGINE,SENS,VALEUR,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,TYPE_WRITER,CODE_REMPLACEMENT)
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,CODE_ELEMENT,INDICATIF,ORIGINE,SENS,VALEUR,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,CLE_IMPORT,IDPACMAT,TYPE_WRITER,CODE_REMPLACEMENT
  FROM TGE_ELEMENTS_PAIE
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE
  AND nvl(ACTION_RETRO,'H') != 'H';
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_IMPUTATIONS','Insertion dans  TGE_RELIQ_IMPUTATIONS à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  INSERT INTO TGE_RELIQ_IMPUTATIONS 
  (NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,IMPUTATION,NO_SEQUENCE,ORIGINE,NB_UNITE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,IDPACMAT,TYPE_WRITER)
  select NUMPAC,PAIEZAD,PERIODE,TYPE_TRAITEMENT,IMPUTATION,NO_SEQUENCE,ORIGINE,NB_UNITE,DERNIER_CODE_OPE,LOGIN_MAJ,DATE_MAJ,IDPACMAT,TYPE_WRITER
  FROM TGE_IMPUTATIONS
  WHERE NUMPAC = P_NUMPAC 
  AND   periode  <=P_PERIODE;
  
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_RELIQ_PACMAT_TORESEND','Insertion dans  TGE_RELIQ_PACMAT_TORESEND à la période '|| P_PERIODE ||' et pour le numpac '|| P_NUMPAC);
  --tge_podif_pamat -retro des mal recycle 
  INSERT INTO TGE_RELIQ_PACMAT_TORESEND 
  (NUMPAC,PACMAT,TABLE_TO_SEND,DATE_MAJ)
  select  NUMPAC,PACMAT,TABLE_TO_SEND,DATE_MAJ
  FROM TGE_MODIF_PACMAT_TORESEND
  WHERE NUMPAC = P_NUMPAC ;
  IF is_RETRO =1 THEN 
  INSERT INTO TGE_RELIQ_PACMAT_TORESEND_RETRO
  WITH LISTE_DICOZ (element) AS ( select element from tge_ref_dicoz where numpac =P_NUMPAC and calcul_RETRO=1),
  LIST_TABLEGXP (tablegxp) as (
  SELECT tablegxp  FROM TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz WHERE NUMPAC =P_NUMPAC and mapdo.element =dicoz.element
  UNION ALL 
  SELECT tablegxp  FROM TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz WHERE NUMPAC ='*' and mapdo.element =dicoz.element
  AND TABLEGXP not in( select TABLEGXP  from TGE_REF_MAPDO mapdo ,LISTE_DICOZ dicoz  WHERE NUMPAC =P_NUMPAC and mapdo.element =dicoz.element ))

   SELECT * FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC AND TABLE_TO_SEND IN (SELECT TABLEGXP FROM LIST_TABLEGXP);
  END IF;
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_INSERT_RELIQ (End)','Fin insertion pour le numpac : '||P_NUMPAC);
END TGE_INSERT_RELIQ;
##
NEWS_RELEASE
==
DELETE FROM NEWS_RELEASE WHERE VERSION_RELEASE ='5' and VERSION_MAJEUR ='05' and VERSION_MINEUR ='004' and REPORT ='R046' and HOTFIX ='0000'
##
NEWS_RELEASE
==
insert into NEWS_RELEASE values(to_date('20210628','YYYYMMDD'),'5','05','004','R046','0000',to_date('20210628','YYYYMMDD'))
##
NEWS_DETAILS
==
DELETE FROM NEWS_DETAILS WHERE VERSION_RELEASE ='5' and VERSION_MAJEUR ='05' and VERSION_MINEUR ='004' and REPORT ='R046' and HOTFIX ='0000'
'SEUNA2-17660','B','Dans l''écran Traces, il était possible pour un utilisateur de voir les traces sur un matricule n''appartenant pas à sa sécurité Pac.','5','05','004','R046','0000','Y'
'SEUNA2-17589','B','Dans les écrans générés, lorsqu''une donnée clé est paramétrée avec un mode de saisie "Liste déroulante", "Bouton ''radio''" ou "Case à cocher", et si la case à cocher "Rafraichir l''écran automatiquement" est sélectionnée, le rafraichissement de l''écran après sélection d''une nouvelle valeur provoque maintenant une interrogation des informations en base de données, pour mettre à jour les données affichées par rapport à la nouvelle clé.','5','05','004','R046','0000','Y'
'SEUNA2-17547','B','Le bouton permettant de changer la visibilité d''un Defect ou d''une User story ne s''affiche plus devant le libellé ''Pas de résultat''.','5','05','004','R046','0000','Y'
'SEUNA2-17512','B','L''export Excel sur l''écran "Historique de contrat" ne prenait pas en compte les dates sélectionnées.','5','05','004','R046','0000','Y'
'SEUNA2-17509','B','Le report le plus récent n''était pas automatiquement sélectionné lors de l''ouverture de l''écran What''s new.','5','05','004','R046','0000','Y'
'SEUNA2-17415','S','Dans l''écran HelpDesk, lorsque le Chef de file clique sur le bouton « Valider et envoyer à ADP eService » sur une demande et que l''envoi à ADP eService échoue, la demande est dorénavant enregistrée dans les tables HelpDesk et un message d''erreur est affiché invitant l''utilisateur à réessayer l''envoi ultérieurement.','5','05','004','R046','0000','Y'
'SEUNA2-17407','B','Depuis la 5.05.004.R043, les inscriptions manuelles en rétroactivité par un autre utilisateur n''étaient plus prises en compte pour afficher la pastille dans le bandeau.','5','05','004','R046','0000','Y'
'SEUNA2-17400','B','Dans le composant de recherche collaborateur, en 5.05.004, l''application d''une population au bandeau depuis ou vers certains écrans développés (comme "Saisie individuelle d''absences", "Saisie individuelle des incidents") ne fonctionnait pas.','5','05','004','R046','0000','Y'
'SEUNA2-17342','B','Lors d''un appel API à worker.rehire pour initialiser la réembauche d''un salarié, toutes les données du contrat précédent étaient chargées, y compris les informations de départ, ce qui pouvait provoquer des comportements non souhaités (déclenchement à tort de contrôles, pré-alimentation de données non transmises par l''API...).<br>Ce comportement était dû au fait qu''il n''est pas possible de paramétrer la liste des données à initialiser, si l''opération ne contenait pas d''écran de recherche de salarié.<br>Dorénavant, la liste des données à initialiser est déduite de l''opération ayant pour premier écran un écran de recherche de salarié, et dont une branche pointe sur la même opération destinatrice que la branche de l''opération API.<br>Si une telle opération n''existe pas, le comportement reste de charger toutes les données.','5','05','004','R046','0000','Y'
'SEUNA2-17333','B','Dans le WKF "Modifications contractuelles", sur l''écran "Changement contractuel", la règle de contrôle de la donnée ZA700 (type de contrat) utilisait à tort la donnée ZT061 (nature de contrat).<br>De plus, la liste des natures de contrat proposée n''étaient pas conforme car elle proposait les natures des collaborateurs non payés.<br>Fiche solution "Fiche solution_SEUNA2-16281 & SEUNA2-17333 _Version V05.05.004_Anomalie sur ZT061 V1.1"','5','05','004','R046','0000','Y'
'SEUNA2-17320','B','L''ouverture d''un slide-in qui est inclus dans un autre slide-in provoquait la fermeture du slide-in parent.','5','05','004','R046','0000','Y'
'SEUNA2-17215','B','Sur les écrans générés, en 5.05.004, il était possible de saisir directement une valeur bien que la donnée soit paramétrée avec un appel table "Choix loupe uniquement".','5','05','004','R046','0000','Y'
'SEUNA2-16538','S','Dans la demande d''acompte UX, il est désormais possible de personnaliser le message d''aide dans le cadre d''information. Le contenu du message est à valoriser dans la donnée Tools à mapper avec la nouvelle donnée UX ‘payAdvanceMsgAideMontantAcompte''.','5','05','004','R046','0000','Y'
'SEUNA2-16534','B','Dans l''écran "Etats de sortie", depuis le report R044, deux messages utilisant l''écriture inclusive s''affichaient lors de la génération de document. L''écriture inclusive n''étant pas encore validée par l''Académie Française, les formulations ont été corrigées :<br>- La génération se terminera dans quelques instants. Vous verrez le fichier apparaître dans "Mes fichiers récents". Il sera accessible depuis l''écran Fichiers disponibles.<br>- La génération est en cours, merci de patienter. Vous pouvez fermer ce slide-in, vous verrez le fichier apparaître dans "Mes fichiers récents".','5','05','004','R046','0000','Y'
'SEUNA2-16493','B','Dans les Tools, la suppression d''occurrence n''était pas contrôlée et cela empêche le blocage de la suppression de la première occurrence pour les écrans à date d''effet. L''exécution des règles de contrôle sur les écrans est donc rétablie sur : <br>- les écrans unitaires qui possèdent le bouton « Supprimer » ;<br>- les écrans avec un tableau (exécution de la règle de l''écran correspondant au slide-in d''ajout).<br>En revanche, les règles de contrôles sur les données ne sont toujours pas exécutées pour une suppression, ni les méthodes Java spécifiques « beforeVerifyRulesSpecific » et « afterVerifyRulesSpecific ».<br>','5','05','004','R046','0000','Y'
'SEUNA2-16289','S','Un nouveau traitement périodique "Traitement_ExportDocumentsSignes" regroupe dans un ZIP tous les documents signés qui n''ont pas encoré été transmis au client. Ce ZIP est déposé dans un répertoire dédié du DSF qui est déterminé par la valeur de la variable système "SIGN_EXPORT_REP_ID" : <SIGN_EXPORT_REP_ID>\\ExportESign_<horodatage yyyymmddhhmiss>.zip du DSF.<br>Le fichier ZIP contient en plus un fichier xml pour décrire le contenu du paquet (Nom du document / Identifiant RH / Nom / Prénom du salarié concerné / Type du document).<br>Les documents traités sont suivis dans une table "EDI_EXPORT_DOC_ESIGN" avec les statuts "A Envoyer", "Envoi OK" et "Envoi KO". La table est initialisée avec tous les documents éligibles et le statut "Init".','5','05','004','R046','0000','Y'
'SEUNA2-16132','B','Lors du recalcul des périodes de recueil, par exemple suite à la saisie d''un départ, trop de lignes étaient modifiées dans la table des incidents de présence. Désormais seuls les incidents qui ont changé de période de recueil sont mis à jour. De plus pour un pac rétro et une sortie M-2, il manquait l''inscription en rétro M-1 car la suppression d''une période de recueil n''était pas reconnue comme une mise à jour rétroactive.','5','05','004','R046','0000','Y'
'SEUNA2-16034','S','Pour les demandes de remboursement de transport via MyAdp, la liste déroulante des types d''abonnement propose dorénavant 3 possibilités : abonnement mensuel, abonnement annuel et abonnement hebdomadaire.','5','05','004','R046','0000','Y'
'SEUNA2-15761','B','Les embauches saisies par anticipation sur un mois futur ne partaient pas en paie le moment venu. Le calcul du flag R_PRESENT_FICHIER_PAIE a été ajouté à la fin de la procédure Oracle de clôture pour le valoriser à "O" quand la nouvelle période de paie inclut la date d''embauche.','5','05','004','R046','0000','Y'
'SEUNA2-15610','S','Dans l''écran "Sélection des soldes de tout compte", ajout d''un nouveau bouton qui permet le lancement immédiat de la paie de réglé pour les matricules sélectionnés. Ce bouton sera affiché uniquement pour les Pacs ECP.','5','05','004','R046','0000','Y'
'SEUNA2-15365','B','L''export Excel présent sur l''écran « Événement GTA » provoquait une erreur « Timeout ». Le temps de fabrication du fichier étant assez long, celui-ci est maintenant généré en asynchrone et déposé dans le répertoire de l''utilisateur.','5','05','004','R046','0000','Y'
'SEUNA2-14856','B','Dans le workflow "Départ", dans le module de remplacement du responsable hiérarchique, lors de la sélection de l''option "Choisir un collaborateur", l''appel table ne fonctionnait pas correctement lorsque l''on positionnait un filtre dans une colonne.','5','05','004','R046','0000','Y'
'SEUNA2-14843','B','Dans l''écran ‘Mise à jour des tables'',  lors de l''import d''un fichier, les lignes n''étaient pas toutes enregistrées en base.<br>L''anomalie était provoquée par l''absence de contrôle afin d''empêcher l''import de fichiers sur une table sans clé. En outre, un contrôle a été ajouté quant au format des décimaux ainsi qu''au format de la date.<br>','5','05','004','R046','0000','Y'
'SEUNA2-14808','B','Lors du retour de référentiel PPC, certaines tables à tiroirs comme les tables TDR ne se chargeaient pas entièrement dans les tables de la station.','5','05','004','R046','0000','Y'
'SEUNA2-14166','B','Sur l''écran "Utilisateurs", la fonctionnalité d''ajout d''un utilisateur ne vérifiait pas si le matricule était déjà utilisé par un autre login mais pour un utilisateur non présent dans l''application. Le message d''erreur suivant sera affiché afin d''informer l''utilisateur : "Ce matricule a déjà été attribué au login suivant : #, qui n''est pas déclaré dans l''application. Merci de l''importer pour pouvoir le mettre à jour."','5','05','004','R046','0000','Y'
'SEUNA2-12392','B','Dans l''écran Paramétrage des dictionnaires, dans le cas où l''environnement est indiqué comme un environnement R&D (valeur ''true'' pour la propriété ''EnvironnementR&D'' du GxpWeb.ini), il n''était pas possible de modifier le mapping Zadig pour le PAC ''*''.<br>Dans l''écran Gestion des projets, en effectuant un retour arrière sur une donnée créée dans le cadre du projet, et pas encore mise au produit, la donnée était supprimée physiquement des tables Tools, mais pas le mapping Zadig potentiellement saisi (table TGE_REF_MAPDO). Cela posait problème lors de la création d''une nouvelle donnée à mapper avec le même élément que la donnée supprimée.','5','05','004','R046','0000','Y'
'SEUNA2-9600','B','Dans l''écran ''Contrat courant'', lors d''une modification/création rétro d''une occurrence intermédiaire pour un salarié appartenant à un Pac rétro, on écrivait à tort une trace pour les occurrences postérieures même si aucune donnée n''était modifiée (par propagation par exemple).','5','05','004','R046','0000','Y'
'SEUGES-8691','B','Désormais, il possible de se connecter si apostrophe dans le nom.','5','05','004','R046','0000','Y'
'SEUGES-8314','B','SEUGES-8314 [Gestil Web] FSUP impossible ouvrir un rapport sous Firefox<br><br>Il est désormais possible de télécharger les fichiers sous Firefox.','5','05','004','R046','0000','Y'
'SEUGES-7777','S','Il est désormais possible d''afficher un écran de l''application en cachant la barre de navigation.<br>Pour cela, il faut appeler la page de login avec les paramètres ci-dessous :<br><br>1)\tECRANINIT :  le nom complet de l''écran à appeler Ext.adp.Modules.gestil.M_RAPPORTS<br>2)\tdoHideMenu :  à true pour cacher le « Mega Menu »<br><br>Exemple d''URL <br>Moteur/PortailLogin.jsp?PAC_FROM_URL=ROI&UID=TOUT&ROLE=1&PAGE=&FROMPORTAL=1.0&CLIENT=Z2X&VERIF=NO&ECRANINIT=Ext.adp.Modules.gestil.M_RAPPORTS&doHideMenu=true<br>','5','05','004','R046','0000','Y'
'SEUNA2-18110','B','Sur les récapitulatifs Workflow, en 5.05.005, la largeur des colonnes "Nouvelles valuers" et "Anciennes valeurs" s''adapte désormais au contenu et conserve une taille minimale de 300px.','5','05','004','R046','0000','Y'
'SEUNA2-18101','B','Lors du retour de référentiel, dans l''étape de mapping des VR, la première ligne d''une table ne se chargeait pas si le chargement de la table précédente était en erreur.','5','05','004','R046','0000','Y'
'SEUNA2-18097','B','Depuis la V5.05.004.R043, l''icône de rétroactivité du bandeau n''affichait que les périodes à partir du début de la rétro au lieu du début de l''historisation rétro, de sorte qu''il manquait un ou plusieurs mois de rétroactivité dans cet affichage. A noter que cela n''avait pas de conséquence en paie.','5','05','004','R046','0000','Y'
'SEUNA2-18030','B','Sur les écrans Workflow, lorsque la case à cocher "Reconduction de données" était sélectionnée, certaines données étaient vides sur les étapes suivantes du Workflow.','5','05','004','R046','0000','Y'
'SEUNA2-18028','B','Dans les Workflows générés, en 5.05.004, si des données appartenant à des dictionnaires paramétrés en retour étaient affichées, cela provoquait à tort des insertions dans ces dictionnaires à la validation.','5','05','004','R046','0000','Y'
'SEUNA2-17996','B','La hauteur des tableaux avec un ascenseur sur les écrans récapitulatifs des workflows était mal calculée, elle était insuffisante pour que ceux-ci puissent être affichés.','5','05','004','R046','0000','Y'
'SEUNA2-17992','B','Depuis le report 5.05.004.R045, le traitement de clôture tombait en erreur en raison d''un appel incorrect au calcul de périodes de recueil.','5','05','004','R046','0000','Y'
'SEUNA2-17988','S','Lors d''un traitement de paie via l''écran « Pilotage des opérations de paie » une étape attente des données Gestil « ATTGES » a été ajoutée. Pour une meilleure exploitation du traitement de paie et du suivi, ces améliorations ont été apportées :<br>- le temps maximum d''attente du calcul des PAI dans GESTIL est maintenant paramétrable via la variable système GESTIL_ATTENTE_PAI du module GAP, le temps livré par défaut est 1800 secondes (1/2h).<br>- un code retour 99 est ajouté pour indiquer que le temps d''attente maximal a été dépassé et que le traitement de paie a continué.<br>Pour avoir les détails, deux colonnes sont ajoutées à la table TGE_GESTIL_ENVOI_PAI, la première colonne IDENT qui référence le code utilisé pour communiquer avec GESTIL et la deuxième colonne STATUS qui, initialisée à la valeur ''W'', prend la valeur ''OK'' pour tous les demandes de Collecte (PAI) traitées à la fin de l''étape « d''attente des données Gestil ». Une demande restée au statut ''W'' signifie que la demande de collecte correspondante n''a pas été prise en compte dans le traitement de paie.','5','05','004','R046','0000','Y'
'SEUNA2-17951','B','Sur l''écran "Evènement GTA", dans le slide-in "Recherche d''un collaborateur", lorsque l''utilisateur était positionné sur une page de résultats autre que la première page, la recherche d''un collaborateur ramenant moins d''une page de résultat affichait un tableau vide.','5','05','004','R046','0000','Y'
'SEUNA2-17913','B','rework script suite alias et MAPDO perdus','5','05','004','R046','0000','Y'
'SEUNA2-17905','B','Dans myADP, sur la tuile « Mon RH », une erreur était affichée lors de l''envoi de la première demande HelpDesk avec pièce jointe lorsqu''il n''y avait aucune demande créée depuis la station. Cette erreur était causée par l''absence du répertoire « HelpDesk » dans le chemin de stockage de la pièce jointe.','5','05','004','R046','0000','Y'
'SEUNA2-17883','S','2 nouvelles données concernant la prime TAD sont ajoutés dans l''onglet ''horaire'' de l''écran ''contrat courant''+ processus impactés.<br>Ces données  sont mappées avec de nouveaux éléments du modèle ATOO.<br>Fiche solution "Fiche solution_SEUNA2-17883_Version V05.05.004_Indemnité de télétravail V1.0"','5','05','004','R046','0000','Y'
'SEUNA2-17877','B','Lors de l''appel à l''API Payroll Outputs par une application consommatrice d''API, en plus des données relatives aux résultats de paie, d''autres données (habituellement récupérées par l''API Workers) étaient retournées.<br>Cette anomalie était provoquée par la mutualisation du code générant la requête d''interrogation de l''API Workers et de l''API Payroll Outputs.','5','05','004','R046','0000','Y'
'SEUNA2-17845','B','Lors d''un traitement de paie pour un PAC avec Gestil, en version 5.05.004, la récupération des données Gestil pouvait démarrer avant que la dernière demande d''extraction ne soit traitée, de ce fait toutes les données n''étaient pas prises en compte.<br>Pour le suivi dans l''écran « Pilotage des opérations de paie », le statut GESTIL a été renommé « Demande d''extraction des données Gestil » et un nouveau statut ATTGES « Attente des données Gestil » a été créé.','5','05','004','R046','0000','Y'
'SEUNA2-17841','B','Lors d''un traitement de paie, le calcul de la profondeur maximum de rétroactivité utilisait la date du démarrage rétro au lieu de la date de début d''historisation en vue de la rétro, de sorte qu''on ne tenait pas toujours compte de la bonne profondeur.','5','05','004','R046','0000','Y'
'SEUNA2-17777','B','Dans l''écran Traces ,lorsque la sécurité Pac ou population est non définie, les traces n''affichaient rien du tout ( Exemple : STE , INTPRT)','5','05','004','R046','0000','Y'
'SEUNA2-17638','S','Ajout d''une alerte standard « Adresses mail non conformes à la norme » permettant de détecter les adresses mail existantes non conformes aux critères principaux de la norme RFC 5322. Cette alerte affiche le résultat du traitement périodique « Traitement_ControleMail ». Ce traitement n''est pas activé par défaut. Les champs identifiés *MAIL* qui figurent dans « TABLE_MAIL_RFC » sont exclus du traitement.','5','05','004','R046','0000','Y'
'SEUNA2-17441','B','Dans l''écran récapitulatif du workflow ‘Départ'' , depuis le report R045, si on lançait l''édition d''un contrat avec signature électronique, le slide-in n''affichait pas la liste des signataires et disparaissait rapidement.<br>L''anomalie était due au code établissement qui n''était pas renvoyé à la requête de récupération de la liste des signataires.','5','05','004','R046','0000','Y'
'SEUNA2-17388','B','Sur l''écran Pilotage des opérations de paie, depuis le report 5.05.004.R045, le téléchargement d''un état Container provoquait une déconnexion.<br>L''anomalie était provoquée par une modification à tort de l''URL de téléchargement par un traitement Javascript global : ce traitement a été conditionné pour ne se déclencher que si nécessaire.<br>De plus, la tentative de téléchargement d''un état de paie purgé (bulletin par exemple) provoquait une déconnexion. Dorénavant, l''utilisateur peut continuer à naviguer sur l''application et le message "Ce document n''est plus disponible. Veuillez essayer sur un traitement plus récent, ou sollicitez une réédition." s''affiche dans une bannière rouge comme n''importe quel autre message bloquant.','5','05','004','R046','0000','Y'
'SEUNA2-17378','B','La liste des reports n''était pas correctement triée en fonction de la date d''installation décroissante.<br>Un ascenseur vertical n''était pas présent si la recherche sur l''ensemble des reports retourne un grand nombre de résultats.<br>La touche "Entrée" n''était pas prise en compte pour lancer une recherche sur tous les reports.','5','05','004','R046','0000','Y'
'SEUNA2-17376','B','En version 5.05.004, lors de la clôture de paie, les collaborateurs sur Gestil ayant des saisies non prisent en compte dans la paie (saisie tardive) sont basculés sur le mois de paie en cours. <br>Il se peut que ces saisies ne soient pas contiguës dans le temps et qu''il soit nécessaire d''ajouter des périodes manquantes. Pour cela un traitement périodique (Traitement_CompleteRetroTardive) a été créé. Ce traitement prend deux paramètres : le Pac  (obligatoire) et une période. Si celle-ci n''est pas précisée alors le traitement utilisera la période de paie en cours.<br>','5','05','004','R046','0000','Y'
'SEUNA2-17337','B','Depuis la 5.05.004.R043, dans les processus d''embauche, à la sélection d''un modèle d''embauche, le libellé associé au code modèle ne s''affichait plus.','5','05','004','R046','0000','Y'
'SEUNA2-17332','B','Lors d''une embauche, si le numéro de sécurité sociale est temporaire ou d''outre-mer, une règle de gestion alimente tous les champs suivants le code sexe avec des 9, pour le bon fonctionnement de la N4DS. Cette alimentation provoquait un rejet lors de l''envoi de la DPAE. Désormais, dans ce cas précis, le numéro de sécurité sociale est envoyé à vide pour la DPAE.','5','05','004','R046','0000','Y'
'SEUNA2-17190','B','Sur l''écran "Application requêteur", depuis le report 5.05.004.R043, il n''était plus possible d''ajouter des champs ni de tester, lorsque l''application requêteur était basée sur une vue.','5','05','004','R046','0000','Y'
'SEUNA2-17127','S','Sur la tuile "Paie" de "myADP", une nouvelle option GS "payDownloadEnabled" est prise en compte pour afficher ou non le lien de téléchargement du bulletin de paie. Si la valeur de l''option est égale à 1 et s''il existe un bulletin pour le collaborateur connecté et le mois de paie sélectionné, le lien est affiché, sinon il ne l''est pas.','5','05','004','R046','0000','Y'
'SEUNA2-17041','S','Dans monADP, la fonction métier "Gestion des dossiers" a été remplacée par 3 nouvelles fonctions métiers permettant ainsi de séparer les différents types de gestion :<br>- Gestion des données personnelles<br>- Gestion des acomptes<br>- Gestion des attestations','5','05','004','R046','0000','Y'
'SEUNA2-17023','S','Dans la version 5.04.004, quand un Pac bénéficie de la rétroactivité, lors de la clôture du mois de paie M, les périodes des saisies tardives (réalisées après le dernier recyclage et avant la clôture) sont inscrites, dans la table Gestil des périodes rétro PRD_PP_RETRO_INFOPAIE :<br>- les périodes des salariés déjà présentes dans la table PRD_PP_RETRO_INFOPAIE correspondant à des saisies rétro et non prises en compte (colonne FLAG_MODIF_GTA=1) dupliquées sur le mois M+1 dans la limite de la profondeur de rétro<br>- les périodes des salariés présentes dans la table PRD_PP_INFOPAIE correspondant à des saisies sur le mois courant et non prises en compte (colonne FLAG_MODIF_GTA=1).','5','05','004','R046','0000','Y'
'SEUNA2-16928','B','Dans l''écran « Saisie individuelle des absences », sur le slide in affichant les compteurs à date d''un collaborateur, le bouton « Fermer » était à moitié invisible et il existait une barre de défilement à tort sur la grille des compteurs.','5','05','004','R046','0000','Y'
'SEUNA2-16258','S','Dans l''écran HelpDesk, il est désormais possible de paramétrer le statut auquel le RRH peut passer la demande et de paramétrer si la demande est en lecture seule ou pas selon le statut de cette dernière. Ces deux paramétrages sont respectivement possibles par les nouvelles colonnes « AFFICHSTA » et « READONLY » de la table « HELPDESK_STATUT » accessible via l''écran « Mise à jour des tables ».','5','05','004','R046','0000','Y'
'SEUNA2-15831','B','Dans le composant "Recherche d''une structure" en mode exploration, la saisie d''un filtre sur le responsable et en même temps sur l''état provoquait une erreur applicative.','5','05','004','R046','0000','Y'
'SEUNA2-15038','S','Dans l''écran "Import GAP", lors de l''extraction Excel des données GAP, les dates étaient exportées au format texte, ce qui ne permettait pas de trier ou d''utiliser des filtres sur les dates.','5','05','004','R046','0000','Y'
'SEUNA2-15025','S','Le module "Sortie d''un manager" a évolué :<br>- l''affichage d''un titre paramétrable a été ajouté au-dessus afin d''en avoir une meilleure visibilité<br>- la sélection par défaut de l''option de remplacement a été rendue paramétrable<br>Sur l''écran "Paramétrage des groupes de données", dans la fenêtre modale de paramétrage du module "Sortie d''un manager", il est possible :<br>- de saisir le titre qui s''affichera au-dessus du module. Si la valeur est vide, aucun titre ne sera affiché.<br>- de choisir dans une liste déroulante la valeur par défaut pour l''option de remplacement :<br>                               - 2 = Remplacer par le N+1<br>                               - 1 = Laisser pour l''instant le manager<br>                               - 3 = Choisir un collaborateur<br>Dans le cas, où "2" aurait été paramétré comme valeur par défaut, mais que l''option n''apparaît pas dans le module "Sortie d''un manager", c''est la valeur 1 qui sera sélectionnée par défaut.','5','05','004','R046','0000','Y'
'SEUNA2-13230','S','Prise en compte des évolutions liées au Compte Professionnel de Prévention (C2P) anciennement pénibilité.<br>Un nouveau dictionnaire "DIC_C2P_HISTO" a été créé avec une date d''effet mais les règles de gestion restent les mêmes et la déclaration en DSN est inchangée lors du départ ou en fin d''année.','5','05','004','R046','0000','Y'
'SEUNA2-13039','S','Nouvel écran "Superviser les demandes" pour l''expert, ayant la même ergonomie et les mêmes fonctionnalités que celui du chef de file. A travers cet écran, l''expert a accès uniquement aux dossiers des matricules de sa sécurité population et des matricules dont il est responsable hiérarchiquement et tous les matricules enfants quel que soit le niveau.<br>Les dossiers n''ayant pas encore de matricules comme ceux du workflow d''embauche sont affichés sans aucune sécurité.<br>Lors de l''affectation d''un nouvel acteur à un dossier, la liste des acteurs est filtrée par le PAC de l''expert.<br>Si l''expert n''a pas de matricule, les dossiers aussi bien que les acteurs sont filtrés uniquement par la sécurité population.','5','05','004','R046','0000','Y'
'SEUNA2-9837','S','Dans le modèle GAP ADP Link, dans l''écran "Contrat courant", ajout d''un nouvel onglet pour la gestion des expatriés et détachés. Les données sont mappées avec les éléments de PAIE ATOO existants mais le paramétrage peut être complété/personnalisé.<br>Les processus concernés sont également adaptés en conséquence (embauche et modifications contractuelles).<br>Fiche solution "Fiche solution_SEUNA2-9837_Version V5-05-004_Gestion des expatriés et détachés V1.0"','5','05','004','R046','0000','Y'
'SEUNA2-9549','S','Dans les écrans "Saisie individuelle d''absences" et "Saisie individuelle des incidents", il est de nouveau possible de saisir une absence sur une période de suspension de contrat. Ce contrôle nuisait à certaines pratiques de saisie en double des suspensions, et n''était pas cohérent avec les suspensions rémunérées.','5','05','004','R046','0000','Y'
'SEUNA2-17849','B','Dans les écrans générés, en V5.05.004, les zones de type "Appel Table" n''étaient pas correctement dimensionnées car elles ne tenaient pas compte de la taille des caractères en majuscule.','5','05','004','R046','0000','Y'
'SEUNA2-17823','B','Dans l''affichage de l''affectation structure des écrans générés, la numérotation des niveaux était absente sur le dernier niveau d''une entité à occurrence (service 3, service 4, service ?), et le responsable de l''entité n''était pas affiché dans le même style que les niveaux de la structure.','5','05','004','R046','0000','Y'
'SEUNA2-17822','B','Sur les écrans générés, en 5.05.004, deux étoiles étaient affichées sur les données dont le caractère obligatoire était piloté par une règle de gestion et ayant un libellé contenant déjà une étoile.','5','05','004','R046','0000','Y'
'SEUNA2-17815','B','Sur l''écran de paramétrage des alertes, en 5.05.004, la duplication d''une alerte ne fonctionnait pas et provoquait une déconnexion.','5','05','004','R046','0000','Y'
'SEUNA2-17813','B','Sur l''écran de suivi des alertes, en 5.05.004, un clic sur le bouton "Actualiser" après avoir saisi un filtre provoquait une erreur "TypeError : Cannot read property ''items'' of null".','5','05','004','R046','0000','Y'
'SEUNA2-17812','B','La zone pourcentage saisie dans une DV ou une DR était cadrée à gauche au lieu d''être cadrée à droite dans la mise en forme pour la paie, de sorte que les exemples 0,006% ou 60% devenaient 600,000%.','5','05','004','R046','0000','Y'
'SEUNA2-17810','S','Dans les écrans présentant les résultats de paie, en 5.05.004, lorsqu''il y avait plus de 5 zones forçables sur une même ligne d''écran, la dernière colonne ne se voyait pas. Dans ce cas, la taille des zones "ancienne valeur" et "forcçage" ont été réduites.','5','05','004','R046','0000','Y'
'SEUNA2-17420','S','Dans l''écran Helpdesk, sur le slide in de confirmation qui apparait lors de d''envoi d''une demande à Siebel, un nouveau champ saisissable "Objet eService" est affiché. Ce champ est prérempli par la valeur « HD-n° » puis le numéro de la demande HelpDesk et sa longueur est limitée à 100 caractères. L''objectif de la transmission du numéro HelpDesk à Siebel est de simplifier la recherche de la demande dans ce dernier.','5','05','004','R046','0000','Y'
'SEUNA2-17029','B','Lors du dépôt d''un fichier, par exemple sur l''écran "Fichiers disponibles", l''application ne testait que l''extension du fichier (xls ou doc) pour vérifier si celui-ci contenait une macro. Désormais le contenu du fichier est analysé et il est refusé s''il contient une macro, indépendamment de son extension.','5','05','004','R046','0000','Y'
'SEUNA2-16867','B','Dans l''écran "Utilisateur", il était impossible de visualiser les utilisateurs si les préférences de notification pour au moins un utilisateur étaient activées.','5','05','004','R046','0000','Y'
'SEUNA2-16382','S','Dans le planning des collègues (rôle collaborateur) de MonADP, il est désormais possible de déclarer dans la variable système "UX_MOTIFEVT_AFF" les motifs d''absence que l''on veut voir s''afficher.<br>Le planning de l''équipe (rôle manager) n''est pas impacté par cette évolution et tous les motifs d''absence continuent de s''afficher.','5','05','004','R046','0000','Y'
'SEUNA2-16358','B','Lors d''un import GAP, depuis la V5.05.004.R041,  les dates de début et de fin de contrat étaient ajoutées systématiquement au flux de données, ce qui pouvait provoquer l''envoi inutile d''un évènement vers GESTIL.<br>Désormais, le flux de donnée est complété avec les dates de début et de fin de contrat uniquement dans le cas de mise à jour d''un dictionnaire historisé.','5','05','004','R046','0000','Y'
'SEUNA2-14781','B','Après validation d''un slide-in dans un écran tableau, on revenait sur la première page du tableau au lieu de rester sur la page en cours.','5','05','004','R046','0000','Y'
'SEUNA2-13187','B','Dans composant "Recherche d''un collaborateur", depuis le report R040, le tri sur les colonnes contenant des dates ne fonctionnaient plus.','5','05','004','R046','0000','Y'
