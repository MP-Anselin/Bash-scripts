##
TAG_CHARSET=@€éèç
TAG_IMPORT=5.05.004.R025
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_ROW
=SQL=
create or replace FUNCTION TRG_CONTRAT_HISTO_AFTER_ROW
  RETURN CLOB
AS
  v_retour CLOB;
  v_prec_donneegxp VARCHAR2(100);
  CURSOR cur_mapdo
  IS
SELECT NUMPAC,
  ELEMENT,
  DONNEEGXP
FROM TGE_REF_MAPDO
WHERE ELEMENT IN
  ( 
  SELECT 'A301' FROM dual 
  UNION ALL 
  SELECT 'A302' FROM dual 
  UNION
  SELECT  nom_elt
  FROM    tge_map_arg_elt
  WHERE   code_table = 'LTP'
  )
ORDER BY ELEMENT,
  NUMPAC DESC;
  lig_mapdo cur_mapdo%rowtype;
  lig_mapdo_prec cur_mapdo%rowtype := NULL;
BEGIN

  v_retour := ' 
v_numpac := NVL(:NEW.NUMPAC,:OLD.NUMPAC); 
v_paiezad := NVL(:NEW.paiezad,:OLD.paiezad); 
v_periode := TO_CHAR(LEAST(NVL(:NEW.date_eff,:OLD.date_eff), NVL(:OLD.date_eff,:NEW.date_eff)), ''YYYYMM'');
-- On ne traite que l''UPDATE, et on n''ajoute chaque couple NUMPAC/PAIEZAD qu''une seule fois 
IF NOT tabTrtPeriodesIndividuelles.exists(v_numpac||v_paiezad) THEN 
tabTrtPeriodesIndividuelles(v_numpac||v_paiezad) := ''O''; 
IF INSERTING OR DELETING THEN 
alimPeriodesIndiv := TRUE; 
ELSE 
alimPeriodesIndiv := FALSE; ';
  OPEN cur_mapdo;
  LOOP
    FETCH cur_mapdo INTO lig_mapdo ;
    IF lig_mapdo_prec.element IS NOT NULL AND (cur_mapdo%NOTFOUND OR NOT lig_mapdo_prec.element=lig_mapdo.element) THEN
      -- La dernière ligne traitée était la dernière ligne de mapping pour l'élément précédent
      -- Si c'était le PAC *, c'est le cas par défaut (ELSE), sinon, on continue de tester le PAC
	  
	    SELECT ':old.'  ||LISTAGG(donneegxp,'||:old.') WITHIN GROUP (ORDER BY donneegxp)
		INTO v_prec_donneegxp
		FROM
		  (SELECT numpac,
			donneegxp
		  FROM TABLE (get_gxp_trt_particulier_datas('DIC_ADM_CONTRAT_HISTO', lig_mapdo_prec.element))
		  UNION
		  SELECT lig_mapdo_prec.numpac, lig_mapdo_prec.donneegxp FROM dual
		  );

	  
      IF lig_mapdo_prec.numpac='*' THEN
        v_retour             := v_retour||' 
ELSE ';
      ELSE
        v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo_prec.numpac||''' THEN ';
      END IF;
        v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo_prec.element||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||lig_mapdo_prec.element||''') := '||v_prec_donneegxp||'; 
END IF; ';
     
      IF NOT lig_mapdo_prec.numpac='*' THEN
        -- Pas de ligne avec un PAC * : cas par défaut --> NULL
        
          v_retour := v_retour||' 
ELSE 
tabValToCompare(''old'||lig_mapdo_prec.element||''') := NULL; 
tabValToCompare(''new'||lig_mapdo_prec.element||''') := NULL; 
END IF; ';
        
      END IF;
    END IF;
    EXIT
  WHEN cur_mapdo%NOTFOUND;
    -- C'est la toute première ligne, ou bien la ligne précédente était la dernière ligne de mapping pour l'élément précédent
    -- On recommence un nouveau bloc IF
    IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=lig_mapdo.element THEN
              v_retour := v_retour||' 
tabValToCompare(''old'||lig_mapdo.element||''') := NULL; 
tabValToCompare(''new'||lig_mapdo.element||''') := NULL; 
IF v_numpac IS NULL THEN NULL; ';
      
    END IF;
    IF NOT lig_mapdo.numpac='*' THEN
      
        v_retour := v_retour||' 
ELSIF v_numpac='''||lig_mapdo.numpac||''' THEN 
tabValToCompare(''old'||lig_mapdo.element||''') := '||v_prec_donneegxp||'; 
tabValToCompare(''new'||lig_mapdo.element||''') := '||v_prec_donneegxp||';  ';
      
    END IF;
    lig_mapdo_prec := lig_mapdo;
  END LOOP;
CLOSE cur_mapdo;
IF lig_mapdo_prec.element IS NOT NULL THEN
  -- On est passé au moins une fois dans la boucle
  lig_mapdo_prec := NULL;
  OPEN cur_mapdo;
  LOOP
    FETCH cur_mapdo INTO lig_mapdo ;
    EXIT
  WHEN cur_mapdo%NOTFOUND;
    -- C'est la toute première ligne, ou bien la ligne précédente était la dernière ligne de mapping pour l'élément précédent
    IF lig_mapdo_prec.element IS NULL OR NOT lig_mapdo_prec.element=lig_mapdo.element THEN
      
        v_retour := v_retour||' 
IF tabValToCompare(''new'||lig_mapdo.element||''')<>tabValToCompare(''old'||lig_mapdo.element||''') OR (tabValToCompare(''new'||lig_mapdo.element||''') IS NOT NULL AND tabValToCompare(''old'||lig_mapdo.element||''') IS NULL) OR (tabValToCompare(''new'||lig_mapdo.element||''') IS NULL AND tabValToCompare(''old'||lig_mapdo.element||''') IS NOT NULL) THEN 
alimPeriodesIndiv := TRUE; 
END IF; ';
      
    END IF;
    lig_mapdo_prec := lig_mapdo;
  END LOOP;
  CLOSE cur_mapdo;
END IF;
v_retour := v_retour||' 
END IF; 
IF alimPeriodesIndiv THEN 
  -- Modification de la date de début ou de fin de suspension : on met à jour la table des périodes individuelles 
  idxPeriodesIndiv := null;
  FOR i IN 1..paiezadTab.count LOOP
    IF numpacTab(i) = v_numpac AND paiezadTab(i) = v_paiezad THEN
      idxPeriodesIndiv := i;
      EXIT;
    END IF;
  end LOOP ;
  
  IF idxPeriodesIndiv IS NOT NULL THEN
    periodeTab(idxPeriodesIndiv) := LEAST(periodeTab(idxPeriodesIndiv), v_periode);
  ELSE
    paiezadTab.EXTEND ; 
    paiezadTab(paiezadTab.LAST) := v_paiezad; 
    numpacTab.EXTEND ; 
    numpacTab(numpacTab.LAST) := v_numpac; 
    periodeTab.EXTEND ;
    periodeTab(periodeTab.LAST) := v_periode;
  END IF;
END IF; 
END IF; 
 IF UPDATING THEN
   	in_calc_hp(''P_NUMPAC''):=NVL(:NEW.NUMPAC,:OLD.NUMPAC);
	in_calc_hp(''OLD_ZA819''):=:OLD.ZA819;
 	in_calc_hp(''NEW_ZA819''):=:NEW.ZA819;
 	in_calc_hp(''OLD_ZA820''):=:OLD.ZA820;
 	in_calc_hp(''NEW_ZA820''):=:NEW.ZA820;
 	in_calc_hp(''P_MATRIC''):=NVL(:NEW.PACMAT,:OLD.PACMAT);
 	in_calc_hp(''P_PAIEZAD''):=NVL(:NEW.PAIEZAD,:OLD.PAIEZAD);
 	in_calc_hp(''P_NUMCNT''):=TO_CHAR(NVL(:NEW.NUMCNT,:OLD.NUMCNT));
 	in_calc_hp(''DATE_DEB''):=TO_CHAR(NVL(:NEW.DATE_EFF,:OLD.DATE_EFF),''DD/MM/YYYY'');
 	in_calc_hp(''DATE_FIN_BO''):=TO_CHAR(NVL(:NEW.date_sortie_sit_bo,:OLD.date_sortie_sit_bo),''DD/MM/YYYY'');
 	in_calc_hp(''P_LOGIN'') :=''TRIGGER'';
END IF;
';
RETURN v_retour;
END TRG_CONTRAT_HISTO_AFTER_ROW;
##
TAG_CHARSET=@€éèç
##
TRG_CONTRAT_HISTO_AFTER_STMNT
=SQL=
CREATE OR REPLACE FUNCTION TRG_CONTRAT_HISTO_AFTER_STMNT RETURN VARCHAR2 AS 
BEGIN
  RETURN '
  IF v_listMatricToUpdate IS NOT NULL THEN
    -- Insère dans la table temporaire les NUMPAC/PACMAT/MATRIC à mettre à jour
    --DBMS_OUTPUT.PUT_LINE(''CONTRAT_HISTO UPDATING ''||v_listMatricToUpdate);
    --FIXME utiliser la procédure trace_dbms_output()
    EXECUTE_IMMEDIATE_STRING (''INSERT INTO SECUPACMAT_TMP_CONTRAT (NUMPAC, PACMAT, MATRIC) SELECT DISTINCT NUMPAC, PACMAT, MATRIC FROM SECUPACMAT WHERE MATRIC IN (''||v_listMatricToUpdate||'')'',0);
    SECNAV_MAJ_CURRENT_CONTRAT(''DO_MAJ'', 0, 1, 0);
    DELETE FROM SECUPACMAT_TMP_CONTRAT;
    IF INSERTING THEN
      v_actionIdx := ''I'';
    ELSIF UPDATING THEN
      v_actionIdx := ''U'';
    ELSIF DELETING THEN
      v_actionIdx := ''D'';
    END IF;
    DBMS_JOB.SUBMIT(v_jobIdx , ''ALIM_IDX.COMPARE_CONTRAT_HISTO_JOB(JOB, ''''''||v_actionIdx||'''''');'');
    INSERT INTO DIC_IDX_JOB_KEYS SELECT v_jobIdx, T.* FROM TABLE(v_cles_idx_contrat) T;
    IF INSERTING OR UPDATING THEN
      INSERT INTO DIC_IDX_JOB_OLD_DATAS VALUES (v_jobIdx, ANYDATA.CONVERTCOLLECTION(GET_DACH_MULTI_HORS_TRANSAC(v_cles_idx_contrat)));
    END IF;
  END IF;
  FOR i IN 1..paiezadTab.count
  LOOP
    TGE_ALIM_PERIODE_INDIV(0, numpacTab(i), periodeTab(i), paiezadTab(i));
  END LOOP ;
IF in_calc_hp.exists(''P_NUMPAC'') THEN
  CALC_HP.PRINCIPAL(
    in_calc_hp(''P_NUMPAC''),
    in_calc_hp(''OLD_ZA819''),
    in_calc_hp(''NEW_ZA819''),
    in_calc_hp(''OLD_ZA820''),
    in_calc_hp(''NEW_ZA820''),
    in_calc_hp(''P_MATRIC''),
    in_calc_hp(''P_PAIEZAD''),
    TO_NUMBER(in_calc_hp(''P_NUMCNT'')),
    in_calc_hp(''DATE_DEB''),
    in_calc_hp(''DATE_FIN_BO''),
    in_calc_hp(''P_LOGIN'') 
  );
 END IF;
';
END TRG_CONTRAT_HISTO_AFTER_STMNT;
##
TRG_PERSO_AFTER_STMNT
=SQL=
CREATE OR REPLACE FUNCTION TRG_PERSO_AFTER_STMNT RETURN VARCHAR2 AS 
BEGIN
  RETURN '
  IF v_listMatricToDelete IS NOT NULL THEN
    -- On supprime de SECUPACMAT les MATRIC supprimés
    --DBMS_OUTPUT.PUT_LINE(''PERSO DELETING ''||v_listMatricToDelete);
    --FIXME utiliser la procédure trace_dbms_output()
    EXECUTE_IMMEDIATE_STRING( ''DELETE FROM SECUPACMAT WHERE MATRIC IN (''||v_listMatricToDelete||'')'',0);
  END IF;
  IF v_listMatricToUpdate IS NOT NULL THEN
    -- On insère dans la table temporaire les MATRIC à mettre à jour
    --DBMS_OUTPUT.PUT_LINE(''PERSO UPDATING ''||v_listMatricToUpdate);
    --FIXME utiliser la procédure trace_dbms_output()
    EXECUTE_IMMEDIATE_STRING (''INSERT INTO SECUPACMAT_TMP_PERSO (MATRIC) SELECT DISTINCT MATRIC FROM SECUPACMAT WHERE MATRIC IN (''||v_listMatricToUpdate||'') AND MATRIC NOT IN (SELECT MATRIC FROM SECUPACMAT_TMP_PERSO)'',0);
    SECNAV_MAJ_DATA_PERSO(0);
    EXECUTE_IMMEDIATE_STRING (''DELETE FROM SECUPACMAT_TMP_PERSO'',0);
  END IF;
';
END TRG_PERSO_AFTER_STMNT;
##
CAD
=SQL=
CREATE OR REPLACE
PACKAGE CAD
AS
 FUNCTION CAD_RESOLUTION_POP_REGLES_MAJ(
 p_dteffet VARCHAR2)
 RETURN CAD_TYPE_POP_REGLES_MAJ;
 PROCEDURE CAD_CALCUL(
 matric  IN VARCHAR2 ,
 idrub   IN NUMBER ,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 );
 PROCEDURE CAD_CONTROLE_SOLDE(
 idrub  IN VARCHAR2,
 matric IN VARCHAR2 );
 PROCEDURE CAD_MAJ_VALEUR_LISTE_RUBJOUR(
 idMat         IN NUMBER,
 dtdeb         IN VARCHAR2,
 dtfin         IN VARCHAR2,
 forcage       IN VARCHAR2,
 ispreviousCAD IN VARCHAR2);
 PROCEDURE CAD_IMPORT(
 p_numseq        IN  NUMBER,
 nom_Fichier   IN VARCHAR2,
 avec_Rollback IN VARCHAR2);
 PROCEDURE CAD_ROLLBACK_IMPORT(
 numseq IN NUMBER);
 FUNCTION CAD_INTERRO_THEME(
 MATRIC       IN VARCHAR2 ,
 p_CODE_THEME IN VARCHAR2 ,
 p_DJOUR      IN VARCHAR2,
 collectif    IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME;
 FUNCTION CAD_INTERRO_THEME_COLL(
 idPop      IN NUMBER ,
 CODE_THEME IN VARCHAR2 ,
 DJOUR      IN VARCHAR2,
 collectif  IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME;
 FUNCTION CAD_SOLDE(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2 )
 RETURN NUMBER;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_AV(
 DATE_RELATIVE     IN VARCHAR2,
 DATE_COMPARAISON  IN VARCHAR2,
 DATE_VALIDITE_REL IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION CAD_CALCUL_DATE_REL_AV_FIN(
 DATE_ACQ_FIN   IN VARCHAR2,
 DATE_ACQ_DEBUT IN VARCHAR2,
 DATE_COMPARE   IN VARCHAR2,
 DATE_VAL_DEBUT IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION cad_formate_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_FIN(
 DATE_RELATIVE_FIN   IN VARCHAR2,
 DATE_RELATIVE_DEBUT IN VARCHAR2,
 DATE_COMPARE        IN VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION cad_calcul_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2;
 PROCEDURE CAD_BASCULE_UNIQUE(
 IDMATRIC    IN NUMBER ,
 BASCULE     IN VARCHAR2 ,
 DATEBAS     IN VARCHAR2 ,
 SUPPRESSION IN VARCHAR2);
 FUNCTION CAD_UNITE_CPT(
    MATRIC   IN VARCHAR2,
    DATEJOUR IN VARCHAR2,
    CPT      IN VARCHAR2)
    RETURN VARCHAR;
END CAD;
##
CAD
=SQL=
create or replace PACKAGE BODY CAD AS
 err_msg  VARCHAR(200);
 err_code VARCHAR(200);
 valdebug VARCHAR2(1); 
 
 FUNCTION CAD_RESOLUTION_POP_REGLES_MAJ(
 p_dteffet VARCHAR2)
 RETURN CAD_TYPE_POP_REGLES_MAJ
 AS
 retour CAD_TYPE_POP_REGLES_MAJ:=CAD_TYPE_POP_REGLES_MAJ();
 CURSOR cur
 IS
 SELECT POPULATION,
 CODE_BASCULE,
 DATE_THEO_BASCULE,
 ORDRE_A_PROPAGER
 FROM CAD_PARAM_POP_REGLES_MAJ;
 lig cur%rowtype;
 numlig  NUMBER:=0;
 DIC     VARCHAR2(8);
 NBJC    NUMBER;
 NBC     NUMBER;
 nbjours NUMBER;
 dteffet VARCHAR2(8);
 BEGIN
 IF p_dteffet IS NULL THEN
 dteffet    :=TO_CHAR(sysdate,'yyyymmdd');
 ELSE
 dteffet:=p_dteffet;
 END IF;
 OPEN cur;
 LOOP
 FETCH cur INTO lig;
 EXIT
 WHEN cur%NOTFOUND ;
 IF instr(lig.DATE_THEO_BASCULE,'DIC')>0 THEN
 DIC                               :=SUBSTR(lig.DATE_THEO_BASCULE,5,8);
 lig.DATE_THEO_BASCULE             :=REPLACE(lig.DATE_THEO_BASCULE, 'DIC='||DIC||' ','');
 NBJC                              :=to_number(SUBSTR(lig.DATE_THEO_BASCULE,6,instr(lig.DATE_THEO_BASCULE,'NBC=')-6));
 lig.DATE_THEO_BASCULE             :=REPLACE(lig.DATE_THEO_BASCULE, 'NBJC='||NBJC||' ','');
 NBC                               :=to_number(SUBSTR(lig.DATE_THEO_BASCULE,5));
 nbjours                           :=ABS(to_date(dteffet,'yyyyMMdd')-to_date(DIC,'yyyyMMdd'));
 IF (DIC                           >=dteffet) THEN
 numlig                          :=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=TO_CHAR(to_date(DIC,'yyyyMMdd'),'yyyymmdd');
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END IF;
 FOR i IN 1..nbc
 LOOP
 numlig:=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=TO_CHAR(to_date(DIC,'yyyyMMdd')+(TRUNC (nbjours/nbjc,0)+i)*nbjc,'yyyymmdd');
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END LOOP;
 ELSE
 numlig:=numlig+1;
 retour.extend;
 retour(numlig)                  :=CAD_LIG_TYPE_POP_REGLES_MAJ(NULL,NULL,NULL,NULL);
 retour(numlig).POPULATION       :=lig.population;
 retour(numlig).CODE_BASCULE     :=lig.CODE_BASCULE;
 retour(numlig).DATE_THEO_BASCULE:=cad_formate_date_relative(lig.DATE_THEO_BASCULE, p_dteffet );
 retour(numlig).ORDRE_A_PROPAGER :=lig.ORDRE_A_PROPAGER;
 END IF;
 END LOOP;
 CLOSE cur;
 RETURN retour;
 END;
 PROCEDURE CAD_AVANCEMENT(
 id  IN NUMBER,
 txt IN VARCHAR2)
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line   VARCHAR(32672);
 status INT;
 BEGIN
 IF valdebug='O' THEN
 INSERT INTO CAD_AVANCEMENT_proc VALUES
 (id,sysdate,txt
 );
 COMMIT;
 END IF;
 END CAD_AVANCEMENT;
 PROCEDURE CAD_AVANCEMENT_INFO
 (
 id  IN NUMBER,
 txt IN VARCHAR2
 )
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line   VARCHAR(32672);
 status INT;
 BEGIN
 IF valdebug='O' OR valdebug='I' THEN
 INSERT INTO CAD_AVANCEMENT_proc VALUES
 (id,sysdate,txt
 );
 COMMIT;
 END IF;
 END CAD_AVANCEMENT_INFO;
 PROCEDURE   CAD_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN VARCHAR2)
 AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 line      VARCHAR(32672);
 status    INT;
 BEGIN
 INSERT INTO CAD_CALCUL_ERR (ID, PROC, PARAM, MESSAGE, DATE_ERR)
 VALUES(p_id, p_nomproc, p_idDate, p_erreur, SYSDATE);
 COMMIT;
 END CAD_ERREUR;
 PROCEDURE CAD_DEBUG
 (
 IDPOP        IN NUMBER ,
 paramREQUETE IN CLOB
 )
 AS
 ordreR NUMBER;
 BEGIN
 IF valdebug='O' THEN
 SELECT NVL(MAX(ordre),0)+1 INTO ordreR FROM cad_trace_req WHERE id=idpop;
 INSERT
 INTO cad_trace_req
 (
 id,
 date_req,
 ordre,
 requete
 )
 VALUES
 (
 idpop,
 sysdate,
 ordreR ,
 paramREQUETE
 );
 END IF;
 END CAD_DEBUG;
 FUNCTION CAD_CALCUL_JOUR_SEMAINE
 (
 JourSemaine VARCHAR2,
 numSemaine  VARCHAR2,
 annee       VARCHAR2,
 mois        VARCHAR2
 )
 RETURN VARCHAR2
 AS
 jour VARCHAR2
 (
 2
 )
 ;
 BEGIN
 IF JourSemaine   ='L' THEN
 jour          :=TO_CHAR( next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121001','yyyymmdd'),'DAY')) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='M' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121002','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='W' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121003','yyyymmdd'),'DAY') )+ (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='J' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121004','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='V' THEN
 jour          :=TO_CHAR( next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121005','yyyymmdd'),'DAY') )+ (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='S' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121006','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 elsif JourSemaine='D' THEN
 jour          :=TO_CHAR(next_day(to_date(annee||mois||'01','yyyymmdd' ), TO_CHAR(to_date('20121001','yyyymmdd'),'DAY') ) + (to_number( numSemaine)-1 )*7 ,'dd') ;
 END IF;
 RETURN jour;
 END CAD_CALCUL_JOUR_SEMAINE;
 FUNCTION CAD_CONDITION_NON_AFF
 (
 DATEJOUR   IN VARCHAR2 ,
 typeCalcul IN VARCHAR2 ,
 condition  IN VARCHAR2 ,
 valeur     IN VARCHAR2
 )
 RETURN NUMBER
 AS
 retour NUMBER;
 BEGIN
 retour      :=0;
 IF condition ='NEG' THEN
 IF valeur IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)<0) THEN
 retour  :=1;
 END IF;
 elsif condition='ZER' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)=0) THEN
 retour    :=1;
 END IF;
 elsif condition='IEQ' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)<=0) THEN
 retour    :=1;
 END IF;
 elsif condition='IEQD' THEN
 IF valeur   IS NULL OR valeur<=DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='SEQ' THEN
 IF valeur   IS NULL OR (typeCalcul IN ('R','VP','P','COL','C') AND to_number(valeur)>=0) THEN
 retour    :=1;
 END IF;
 elsif condition='SEQD' THEN
 IF valeur   IS NULL OR valeur>=DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='INF' THEN
 IF valeur   IS NULL OR valeur<DATEJOUR THEN
 retour    :=1;
 END IF;
 elsif condition='SUP' THEN
 IF valeur   IS NULL OR valeur>DATEJOUR THEN
 retour    :=1;
 END IF;
 END IF;
 RETURN retour;
 END CAD_CONDITION_NON_AFF;
 FUNCTION CAD_UNITE
 (
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2
 )
 RETURN VARCHAR
 AS
 r_unite VARCHAR
 (
 1
 )
 ;
 BEGIN
 BEGIN
 SELECT unite_tenue
 INTO r_unite
 FROM
 (SELECT unite_tenue
 FROM cad_matric_datevalid a,
 CAD_PARAM_LIEN_RUB_CPT b
 WHERE a.matricule  =matric
 AND a.code_compteur=b.code_compteur
 AND a.DATE_EFFET   =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid c
 WHERE c.date_effet<=datejour
 AND c.code_compteur=a.code_compteur
 AND a.matricule    =c.matricule
 )
 AND b.rub_val_jour=rub
 ORDER BY date_effet DESC
 )
 WHERE rownum=1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 BEGIN
 SELECT unite
 INTO r_unite
 FROM
 (SELECT a.unite
 FROM CAD_PARAM_STRUCT_CPT a,
 CAD_PARAM_LIEN_RUB_CPT b
 WHERE a.code_compteur=b.code_compteur
 AND b.rub_val_jour   =rub
 ORDER BY a.code_compteur DESC
 )
 WHERE rownum=1 ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00056#'||matric||'#'||datejour||'#'||rub);
 END;
 END;
 IF r_unite IS NULL THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00056#'||matric||'#'||datejour||'#'||rub);
 END IF;
 RETURN r_unite;
 END CAD_UNITE;
 FUNCTION CAD_UNITE_CPT(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 CPT      IN VARCHAR2 )
 RETURN VARCHAR
 AS
 r_unite   VARCHAR(1);
 gestionHj VARCHAR(1);
 visuHouJ  VARCHAR(1);
 BEGIN
 SELECT GESTIONHJ
 INTO GESTIONHJ
 FROM CAD_PARAM_STRUCT_CPT
 WHERE code_compteur=CPT;
 IF GESTIONHJ       ='H' THEN
 r_unite         :='H';
 ELSE
 BEGIN
 SELECT
 CASE
 WHEN visuhouj='H'
 THEN 'H'
 ELSE unite_tenue
 END
 INTO r_unite
 FROM cad_matric_datevalid a
 WHERE a.matricule=matric
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<=datejour
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 )
 AND a.code_compteur=cpt
 AND rownum         =1
 ORDER BY date_effet DESC ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF r_unite IS NULL THEN
 SELECT a.unite
 INTO r_unite
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE a.code_compteur=cpt
 AND rownum           =1
 ORDER BY a.code_compteur DESC ;
 END IF;
 END;
 END IF;
 RETURN r_unite;
 END CAD_UNITE_CPT;
 PROCEDURE CAD_INIT_BASCULES(
 numSeq  IN NUMBER ,
 matric  IN VARCHAR2,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 CURSOR cur_test
 IS
 SELECT a.matricule AS MATRICULE,
 a.COMPTEUR_DEST,
 a.DATE_THEO_BASCULE,
 a.TYPE_BASCULE,
 b.matricule AS matric_cpt,
 b.djour,
 b.code_compteur,
 b.typemj,
 b.rowid_cpt,
 b.NorM
 FROM
 (SELECT DISTINCT mat.matricule AS MATRICULE,
 maj.COMPTEUR_DEST,
 bas.DATE_THEO_BASCULE,
 bas.TYPE_BASCULE
 FROM CAD_CALCUL_EN_COURS_MATRIC mat,
 CAD_REGLES_PREVUES_REALISEES bas,
 cad_param_regles_maj maj
 WHERE mat.id         = numSeq
 AND mat.matricule    =NVL(matric,mat.matricule)
 AND bas.matricule    =mat.matricule
 AND maj.code_bascule = bas.code_bascule
 AND DATE_THEO_BASCULE BETWEEN DATEDEB AND NVL(DATEfin,'20991231')
 ) a
 FULL OUTER JOIN
 (SELECT cpt.matricule,
 cpt.djour,
 cpt.code_compteur,
 cpt.rowid AS rowid_cpt,
 cpt.typemj,
 (SELECT COUNT(*)
 FROM CAD_COMPTEUR cpt2
 WHERE cpt.matricule  =cpt2.matricule
 AND cpt.code_compteur=cpt2.code_compteur
 AND cpt.djour        =cpt2.djour
 AND cpt2.typemj     IN ('M','N')
 ) AS NorM
 FROM CAD_COMPTEUR cpt,CAD_CALCUL_EN_COURS_MATRIC
 WHERE cpt.TYPEMJ  IN ('B','S')
 AND cpt.matricule= CAD_CALCUL_EN_COURS_MATRIC.matricule and CAD_CALCUL_EN_COURS_MATRIC.id = numSeq
 AND cpt.matricule=NVL(matric,cpt.matricule)
 AND djour BETWEEN DATEDEB AND NVL(DATEfin,'20991231')
 ) b
 ON a.matricule          =b.matricule
 AND a.date_theo_bascule =b.djour
 AND b.code_compteur     =a.compteur_dest
 AND a.type_bascule      =b.typemj
 WHERE djour            IS NULL
 OR djour BETWEEN DATEDEB AND NVL(DATEfin,'20991231');
 lig_test cur_test%rowtype;
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 --tableau pour update
 T_up Tab_Rowid;
 --tableau pour insert
 -- tableau pour delete
 T_del Tab_Rowid;
 T_replace Tab_Rowid;
 TYPE Type_bascules
 IS
 RECORD
 (
 matricule cad_compteur.matricule%type,
 code_compteur cad_compteur.code_compteur%type,
 djour cad_compteur.djour%type,
 typemj cad_compteur.typemj%type,
 date_maj cad_compteur.date_maj%type );
 type tab_bascules
 IS
 TABLE OF type_bascules;
 t_ins tab_bascules;
 tmpIns type_bascules;
 BEGIN
 OPEN cur_test;
 LOOP
 FETCH cur_test INTO lig_test;
 EXIT
 WHEN cur_test%NOTFOUND ;
 -- si on a la bascule dans prévue/réalisée, on met la ligne à 0 sinon on delete
 IF lig_test.matricule IS NOT NULL AND lig_test.rowid_cpt IS NULL THEN
 -- insertion
 IF t_ins              IS NULL THEN
 tmpIns.matricule    :=lig_test.matricule;
 tmpIns.code_compteur:=lig_test.compteur_dest;
 tmpIns.djour        :=lig_test.DATE_THEO_BASCULE;
 tmpIns.typemj       :=lig_test.type_bascule;
 tmpIns.date_maj     :=sysdate;
 t_ins               :=tab_bascules(tmpIns);
 ELSE
 t_ins.extend();
 t_ins(t_ins.last).matricule    :=lig_test.matricule;
 t_ins(t_ins.last).code_compteur:=lig_test.compteur_dest;
 t_ins(t_ins.last).djour        :=lig_test.DATE_THEO_BASCULE;
 t_ins(t_ins.last).typemj       :=lig_test.type_bascule;
 t_ins(t_ins.last).date_maj     :=sysdate;
 END IF;
 elsif lig_test.matricule IS NULL AND lig_test.rowid_cpt IS NOT NULL THEN
 IF lig_test.NorM        >0 THEN
 IF t_del             IS NULL THEN
 t_del              :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 t_del.extend();
 t_del(t_del.last):=lig_test.rowid_cpt;
 END IF;
 ELSE
 IF T_replace IS NULL THEN
 T_replace  :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 T_replace.extend();
 T_replace(T_replace.last):=lig_test.rowid_cpt;
 END IF;
 END IF;
 -- delete
 -- delete from cad_compteur where rowid=lig_test.rowid_cpt;
 ELSE
 IF t_up IS NULL THEN
 t_up  :=Tab_Rowid(lig_test.rowid_cpt);
 ELSE
 t_up.extend();
 t_up(t_up.last):=lig_test.rowid_cpt;
 END IF;
 --update
 /* update cad_compteur set POT1_VALEURJ=null,POT1_VALEURH=null,
 POT2_VALEURJ=null,POT2_VALEURH=null,
 POT3_VALEURJ=null,POT3_VALEURH=null,
 POT4_VALEURJ=null,POT4_VALEURH=null,
 POT5_VALEURJ=null,POT5_VALEURH=null,
 POT6_VALEURJ=null,POT6_VALEURH=null,
 POT7_VALEURJ=null,POT7_VALEURH=null,
 POT8_VALEURJ=null,POT8_VALEURH=null,
 POT9_VALEURJ=null,POT9_VALEURH=null,
 POT10_VALEURJ=null,POT10_VALEURH=null,
 POT11_VALEURJ=null,POT11_VALEURH=null,
 POT12_VALEURJ=null,POT12_VALEURH=null
 where rowid=lig_test.rowid_cpt;*/
 END IF;
 END LOOP;
 CLOSE cur_test;
 IF t_up IS NOT NULL THEN
 FORALL i IN T_up.first..T_up.last
 UPDATE cad_compteur
 SET DATE_MAJ    =sysdate,
 POT1_VALEURJ  =NULL,
 POT1_VALEURH  =NULL,
 POT2_VALEURJ  =NULL,
 POT2_VALEURH  =NULL,
 POT3_VALEURJ  =NULL,
 POT3_VALEURH  =NULL,
 POT4_VALEURJ  =NULL,
 POT4_VALEURH  =NULL,
 POT5_VALEURJ  =NULL,
 POT5_VALEURH  =NULL,
 POT6_VALEURJ  =NULL,
 POT6_VALEURH  =NULL,
 POT7_VALEURJ  =NULL,
 POT7_VALEURH  =NULL,
 POT8_VALEURJ  =NULL,
 POT8_VALEURH  =NULL,
 POT9_VALEURJ  =NULL,
 POT9_VALEURH  =NULL,
 POT10_VALEURJ =NULL,
 POT10_VALEURH =NULL,
 POT11_VALEURJ =NULL,
 POT11_VALEURH =NULL,
 POT12_VALEURJ =NULL,
 POT12_VALEURH =NULL
 WHERE rowid     =t_up(i);
 END IF;
 IF T_replace IS NOT NULL THEN
 FORALL i IN T_replace.first..T_replace.last
 UPDATE cad_compteur a
 SET DATE_MAJ    =sysdate,
 typemj        ='N',
 POT1_VALEURJ  =NULL,
 POT1_VALEURH  =NULL,
 POT2_VALEURJ  =NULL,
 POT2_VALEURH  =NULL,
 POT3_VALEURJ  =NULL,
 POT3_VALEURH  =NULL,
 POT4_VALEURJ  =NULL,
 POT4_VALEURH  =NULL,
 POT5_VALEURJ  =NULL,
 POT5_VALEURH  =NULL,
 POT6_VALEURJ  =NULL,
 POT6_VALEURH  =NULL,
 POT7_VALEURJ  =NULL,
 POT7_VALEURH  =NULL,
 POT8_VALEURJ  =NULL,
 POT8_VALEURH  =NULL,
 POT9_VALEURJ  =NULL,
 POT9_VALEURH  =NULL,
 POT10_VALEURJ =NULL,
 POT10_VALEURH =NULL,
 POT11_VALEURJ =NULL,
 POT11_VALEURH =NULL,
 POT12_VALEURJ =NULL,
 POT12_VALEURH =NULL
 WHERE rowid     =T_replace(i);
 END IF;
 IF T_del IS NOT NULL THEN
 FORALL i IN T_del.first..T_del.last
 UPDATE cad_compteur a
 SET DATE_MAJ                               =sysdate
 WHERE (a.matricule,a.code_compteur,a.djour)=
 (SELECT b.matricule,
 b.code_compteur,
 b.djour
 FROM cad_compteur b
 WHERE rowid =T_del(i)
 )
 AND typemj IN ('N','M') ;
 FORALL i   IN T_del.first..T_del.last
 DELETE FROM cad_compteur WHERE rowid =T_del(i);
 END IF;
 IF t_ins IS NOT NULL THEN
 FORALL i IN t_ins.first..t_ins.last
 INSERT
 INTO CAD_COMPTEUR
 (
 matricule,
 code_compteur,
 djour,
 typemj,
 date_maj
 )
 VALUES
 (
 t_ins(i).matricule,
 t_ins(i).code_compteur,
 t_ins(i).djour,
 t_ins(i).typemj,
 t_ins(i).date_maj
 );
 END IF;
 END CAD_INIT_BASCULES;
 PROCEDURE CAD_UNIT_PROPAGATION
 (
 IDMATRIC    IN NUMBER ,
 p_matric    IN VARCHAR2,
 DATEDEB     IN VARCHAR2 ,
 DATEFIN     IN VARCHAR2 ,
 CODECPT     IN VARCHAR2 ,
 AvecBascule IN VARCHAR2
 )
 AS
 CURSOR cur_cpt
 IS
 SELECT cpt.*,
 cpt.rowid
 FROM CAD_COMPTEUR cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule   =mat.matricule
 AND mat.id            =idmatric
 AND mat.matricule     =NVL(p_matric,mat.matricule)
 AND cpt.code_compteur =codecpt
 AND cpt.djour        >=nvl(datedeb,'19000101')
 AND (cpt.djour       <=NVL(datefin,'20991231')
 OR (avecbascule       ='BASCULE'
 AND cpt.djour        <=NVL(
 (SELECT MIN(a.djour)
 FROM cad_compteur a
 WHERE a.matricule  =cpt.matricule
 AND a.code_compteur=cpt.code_compteur
 AND a.typemj NOT  IN ('B','S')
 AND a.djour        >datefin
 ),'20991231')))
 ORDER BY cpt.matricule,
 cpt.code_compteur,
 cpt.djour,
 cpt.typemj FOR UPDATE OF POT1_VALEURJ,
 POT1_VALEURH,
 POT2_VALEURJ,
 POT2_VALEURH,
 POT3_VALEURJ,
 POT3_VALEURH,
 POT4_VALEURJ,
 POT4_VALEURH,
 POT5_VALEURJ,
 POT5_VALEURH,
 POT6_VALEURJ,
 POT6_VALEURH,
 POT7_VALEURJ,
 POT7_VALEURH,
 POT8_VALEURJ,
 POT8_VALEURH,
 POT9_VALEURJ,
 POT9_VALEURH,
 POT10_VALEURJ,
 POT10_VALEURH,
 POT11_VALEURJ,
 POT11_VALEURH,
 POT12_VALEURJ,
 POT12_VALEURH ;
 lig_cpt cur_cpt%ROWTYPE;
 lig_cpt_prec cur_cpt%ROWTYPE;
 lig_cptori cur_cpt%ROWTYPE;
 TYPE TYP_tabPot is table of varchar2(3000) index by BINARY_INTEGER ;
 TYPE typ_Tab_ligcpt
 IS
 TABLE OF cur_cpt%ROWTYPE;
 Tab_ligcpt typ_Tab_ligcpt:=Typ_Tab_ligcpt();
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 T_Id Tab_Rowid;
 reqpropagation CLOB;
 ssreq CLOB;
 nbssreq                 NUMBER;
 listPotANePasPropage    VARCHAR(100):='';
 listPotANePasPropageCPT VARCHAR(100):='';
 premier                 BOOLEAN;
 dtprec                  VARCHAR(8):=DATEDEB;
 typprec                 VARCHAR(1):='B';
 listPotAPropage         VARCHAR(100);
 req                     VARCHAR2(1000);
 pos                     NUMBER:=0;
 subs                    VARCHAR2(1000);
 un_index                INT;
 requpdate               VARCHAR2(1000);
 calcul                  VARCHAR2(100);
 lig_param CAD_PARAM_CALCUL%rowtype;
 tabreqcpt TYP_tabPot;
 
 TYPE TYP_tabStruct is table of CAD_PARAM_CALCUL%rowtype index by varchar2(32) ;
 tabstructcpt  TYP_tabStruct;
 TYPE TYP_PotANePasPropageCPT is table of varchar2(1000) index by varchar2(32) ;
 tablistPotANePasPropageCPT TYP_PotANePasPropageCPT;
 TYPE TYP_PotAPropage is table of varchar2(1000) index by varchar2(32) ;
 tablistPotAPropage TYP_PotAPropage;
 
 BEGIN
 
 if not tabstructcpt.exists(codecpt) then
 SELECT *
 INTO tabstructcpt(codecpt)
 FROM CAD_PARAM_CALCUL
 WHERE code_compteur      =codecpt;
 end if;
 lig_param:=tabstructcpt(codecpt);
 
 req                     :=lig_param.REQUETES;
 
 
 listPotANePasPropageCPT :=' ' ;
 if not tablistPotANePasPropageCPT.exists(codecpt) then
 FOR x IN
 (SELECT NUM_POT
 FROM CAD_PARAM_STRUCT_POT
 WHERE code_compteur=codecpt
 AND MAJ_BATCH      ='O'
 )
 LOOP
 if  tablistPotANePasPropageCPT.exists(codecpt) then
 tablistPotANePasPropageCPT(codecpt):=tablistPotANePasPropageCPT(codecpt)||' '||x.NUM_POT||' ';
 else
 tablistPotANePasPropageCPT(codecpt):=' '||x.NUM_POT||' ';
 end if;
 END LOOP;
 end if;
 if  tablistPotANePasPropageCPT.exists(codecpt) then
 listPotANePasPropageCPT:=tablistPotANePasPropageCPT(codecpt);
 end if;
 listPotAPropage:=' ' ;
 if not tablistPotAPropage.exists(codecpt) then
 FOR x IN
 (SELECT NUM_POT
 FROM CAD_PARAM_STRUCT_POT
 WHERE code_compteur     =codecpt
 AND TYPE_VARIATION NOT IN ('S','V')
 )
 LOOP
 if tablistPotAPropage.exists(codecpt) then
 tablistPotAPropage(codecpt):=tablistPotAPropage(codecpt)||' '||x.NUM_POT||' ';
 else
 tablistPotAPropage(codecpt):=' '||x.NUM_POT||' ';
 end if;
 END LOOP;
 end if;
 if tablistPotAPropage.exists(codecpt) then
 listPotAPropage:=tablistPotAPropage(codecpt);
 end if;
 
 
 
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 
 
 
 
 lig_cptori:=lig_cpt;
 
 
 --  IF (lig_cpt_prec.matricule IS  NULL) or  lig_cpt_prec.code_compteur<>lig_cpt.code_compteur THEN
 
 
 -- end if;
 
 IF (lig_cpt_prec.matricule IS NOT NULL) AND lig_cpt_prec.matricule=lig_cpt.matricule and lig_cpt_prec.code_compteur=lig_cpt.code_compteur THEN
 -- si bascule, on ne fait pas de propagation
 IF lig_cpt.typemj NOT IN ('B','S') THEN
 IF lig_cpt.typemj      ='M' THEN
 listPotANePasPropage:=listPotANePasPropageCPT;
 ELSE
 listPotANePasPropage:=' ';
 END IF;
 -- Propagation des pots sans variations
 IF listPotAPropage <>' ' THEN
 nbssreq          :=0;
 FOR i IN 1..12
 LOOP
 IF instr(listPotAPropage,' '||i||' ')>0 AND instr(listPotANePasPropage,' '||i||' ')=0 THEN
 IF i                               =1 THEN
 lig_cpt.POT1_VALEURJ            :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH            :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0));
 elsif i                            =2 THEN
 lig_cpt.POT2_VALEURJ            :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH            :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0));
 elsif i                            =3 THEN
 lig_cpt.POT3_VALEURJ            :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH            :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0));
 elsif i                            =4 THEN
 lig_cpt.POT4_VALEURJ            :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH            :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0));
 elsif i                            =5 THEN
 lig_cpt.POT5_VALEURJ            :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH            :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0));
 elsif i                            =6 THEN
 lig_cpt.POT6_VALEURJ            :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH            :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0));
 elsif i                            =7 THEN
 lig_cpt.POT7_VALEURJ            :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH            :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0));
 elsif i                            =8 THEN
 lig_cpt.POT8_VALEURJ            :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH            :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0));
 elsif i                            =9 THEN
 lig_cpt.POT9_VALEURJ            :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH            :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0));
 elsif i                            =10 THEN
 lig_cpt.POT10_VALEURJ           :=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH           :=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0));
 elsif i                            =11 THEN
 lig_cpt.POT11_VALEURJ           :=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH           :=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0));
 elsif i                            =12 THEN
 lig_cpt.POT12_VALEURJ           :=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0));
 lig_cpt.POT12_VALEURH           :=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0));
 END IF;
 END IF;
 END LOOP;
 END IF;
 -- Propagation des variations
 nbssreq                  :=0;
 IF lig_param.POTV1       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV1||' ')=0 THEN
 IF lig_param.POTV1      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 elsif lig_param.POTV1   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV1_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV1_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV2       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV2||' ')=0 THEN
 IF lig_param.POTV2      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 elsif lig_param.POTV2   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV2_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV2_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV3       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV3||' ')=0 THEN
 IF lig_param.POTV3      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 elsif lig_param.POTV3   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV3_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV3_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV4       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV4||' ')=0 THEN
 IF lig_param.POTV4      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 elsif lig_param.POTV4   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV4_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV4_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV5       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV5||' ')=0 THEN
 IF lig_param.POTV5      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 elsif lig_param.POTV5   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV5_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV5_VALEURH,0);
 END IF;
 END IF;
 IF lig_param.POTV6       IS NOT NULL AND instr(listPotANePasPropage,' '||lig_param.POTV6||' ')=0 THEN
 IF lig_param.POTV6      =1 THEN
 lig_cpt.POT1_VALEURJ :=NVL(lig_cpt_prec.POT1_FJ,NVL(lig_cpt_prec.POT1_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT1_VALEURH :=NVL(lig_cpt_prec.POT1_FH,NVL(lig_cpt_prec.POT1_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =2 THEN
 lig_cpt.POT2_VALEURJ :=NVL(lig_cpt_prec.POT2_FJ,NVL(lig_cpt_prec.POT2_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT2_VALEURH :=NVL(lig_cpt_prec.POT2_FH,NVL(lig_cpt_prec.POT2_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =3 THEN
 lig_cpt.POT3_VALEURJ :=NVL(lig_cpt_prec.POT3_FJ,NVL(lig_cpt_prec.POT3_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT3_VALEURH :=NVL(lig_cpt_prec.POT3_FH,NVL(lig_cpt_prec.POT3_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =4 THEN
 lig_cpt.POT4_VALEURJ :=NVL(lig_cpt_prec.POT4_FJ,NVL(lig_cpt_prec.POT4_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT4_VALEURH :=NVL(lig_cpt_prec.POT4_FH,NVL(lig_cpt_prec.POT4_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =5 THEN
 lig_cpt.POT5_VALEURJ :=NVL(lig_cpt_prec.POT5_FJ,NVL(lig_cpt_prec.POT5_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT5_VALEURH :=NVL(lig_cpt_prec.POT5_FH,NVL(lig_cpt_prec.POT5_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =6 THEN
 lig_cpt.POT6_VALEURJ :=NVL(lig_cpt_prec.POT6_FJ,NVL(lig_cpt_prec.POT6_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT6_VALEURH :=NVL(lig_cpt_prec.POT6_FH,NVL(lig_cpt_prec.POT6_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =7 THEN
 lig_cpt.POT7_VALEURJ :=NVL(lig_cpt_prec.POT7_FJ,NVL(lig_cpt_prec.POT7_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT7_VALEURH :=NVL(lig_cpt_prec.POT7_FH,NVL(lig_cpt_prec.POT7_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =8 THEN
 lig_cpt.POT8_VALEURJ :=NVL(lig_cpt_prec.POT8_FJ,NVL(lig_cpt_prec.POT8_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT8_VALEURH :=NVL(lig_cpt_prec.POT8_FH,NVL(lig_cpt_prec.POT8_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =9 THEN
 lig_cpt.POT9_VALEURJ :=NVL(lig_cpt_prec.POT9_FJ,NVL(lig_cpt_prec.POT9_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT9_VALEURH :=NVL(lig_cpt_prec.POT9_FH,NVL(lig_cpt_prec.POT9_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =10 THEN
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt_prec.POT10_FJ,NVL(lig_cpt_prec.POT10_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt_prec.POT10_FH,NVL(lig_cpt_prec.POT10_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =11 THEN
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt_prec.POT11_FJ,NVL(lig_cpt_prec.POT11_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt_prec.POT11_FH,NVL(lig_cpt_prec.POT11_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 elsif lig_param.POTV6   =12 THEN
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt_prec.POT12_FJ,NVL(lig_cpt_prec.POT12_VALEURJ,0))+NVL(lig_cpt.POTV6_VALEURJ,0);
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt_prec.POT12_FH,NVL(lig_cpt_prec.POT12_VALEURH,0))+NVL(lig_cpt.POTV6_VALEURH,0);
 END IF;
 END IF;
 END IF;
 END IF;
 
 IF lig_cpt.djour   <=NVL(datefin,'20991231') THEN
 
 for i in 1..12 loop
 
 --pot 1 
 if i=1 then
 -- si qu'une seule commande
 if instr(lig_param.POT1,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT1 is not null and instr(lig_param.POT1,'=')>0 then
 lig_param.POT1:=replace(lig_param.POT1,'=0','=');
 if lig_param.POT1='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT1 is not null then
 lig_param.POT1:=replace(lig_param.POT1,'+0','+');
 lig_param.POT1:=replace(lig_param.POT1,'-0','-');
 if lig_param.POT1='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif lig_param.POT1='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT1,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT1,0,instr(lig_param.POT1,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT1,instr(lig_param.POT1,';') + 1, length(lig_param.POT1));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT1_FJ,NVL(lig_cpt.POT1_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT1_FH,NVL(lig_cpt.POT1_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 
 --pot 2 
 if i=2 then
 -- si qu'une seule commande
 if instr(lig_param.POT2,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT2 is not null and instr(lig_param.POT2,'=')>0 then
 lig_param.POT2:=replace(lig_param.POT2,'=0','=');
 if lig_param.POT2='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT2 is not null then
 lig_param.POT2:=replace(lig_param.POT2,'+0','+');
 lig_param.POT2:=replace(lig_param.POT2,'-0','-');
 if lig_param.POT2='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif lig_param.POT2='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT2,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT2,0,instr(lig_param.POT2,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT2,instr(lig_param.POT2,';') + 1, length(lig_param.POT2));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT2_FJ,NVL(lig_cpt.POT2_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT2_FH,NVL(lig_cpt.POT2_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 3 
 if i=3 then
 -- si qu'une seule commande
 if instr(lig_param.POT3,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT3 is not null and instr(lig_param.POT3,'=')>0 then
 lig_param.POT3:=replace(lig_param.POT3,'=0','=');
 if lig_param.POT3='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT3 is not null then
 lig_param.POT3:=replace(lig_param.POT3,'+0','+');
 lig_param.POT3:=replace(lig_param.POT3,'-0','-');
 if lig_param.POT3='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif lig_param.POT3='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT3,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT3,0,instr(lig_param.POT3,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT3,instr(lig_param.POT3,';') + 1, length(lig_param.POT3));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT3_FJ,NVL(lig_cpt.POT3_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT3_FH,NVL(lig_cpt.POT3_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 4 
 if i=4 then
 -- si qu'une seule commande
 if instr(lig_param.POT4,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT4 is not null and instr(lig_param.POT4,'=')>0 then
 lig_param.POT4:=replace(lig_param.POT4,'=0','=');
 if lig_param.POT4='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT4 is not null then
 lig_param.POT4:=replace(lig_param.POT4,'+0','+');
 lig_param.POT4:=replace(lig_param.POT4,'-0','-');
 if lig_param.POT4='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif lig_param.POT4='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT4,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT4,0,instr(lig_param.POT4,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT4,instr(lig_param.POT4,';') + 1, length(lig_param.POT4));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT4_FJ,NVL(lig_cpt.POT4_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT4_FH,NVL(lig_cpt.POT4_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 5 
 if i=5 then
 -- si qu'une seule commande
 if instr(lig_param.POT5,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT5 is not null and instr(lig_param.POT5,'=')>0 then
 lig_param.POT5:=replace(lig_param.POT5,'=0','=');
 if lig_param.POT5='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT5 is not null then
 lig_param.POT5:=replace(lig_param.POT5,'+0','+');
 lig_param.POT5:=replace(lig_param.POT5,'-0','-');
 if lig_param.POT5='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif lig_param.POT5='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT5,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT5,0,instr(lig_param.POT5,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT5,instr(lig_param.POT5,';') + 1, length(lig_param.POT5));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT5_FJ,NVL(lig_cpt.POT5_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT5_FH,NVL(lig_cpt.POT5_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 6 
 if i=6 then
 -- si qu'une seule commande
 if instr(lig_param.POT6,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT6 is not null and instr(lig_param.POT6,'=')>0 then
 lig_param.POT6:=replace(lig_param.POT6,'=0','=');
 if lig_param.POT6='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT6 is not null then
 lig_param.POT6:=replace(lig_param.POT6,'+0','+');
 lig_param.POT6:=replace(lig_param.POT6,'-0','-');
 if lig_param.POT6='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif lig_param.POT6='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT6,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT6,0,instr(lig_param.POT6,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT6,instr(lig_param.POT6,';') + 1, length(lig_param.POT6));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT6_FJ,NVL(lig_cpt.POT6_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT6_FH,NVL(lig_cpt.POT6_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 7 
 if i=7 then
 -- si qu'une seule commande
 if instr(lig_param.POT7,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT7 is not null and instr(lig_param.POT7,'=')>0 then
 lig_param.POT7:=replace(lig_param.POT7,'=0','=');
 if lig_param.POT7='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT7 is not null then
 lig_param.POT7:=replace(lig_param.POT7,'+0','+');
 lig_param.POT7:=replace(lig_param.POT7,'-0','-');
 if lig_param.POT7='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT7='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT7,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT7,0,instr(lig_param.POT7,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT7,instr(lig_param.POT7,';') + 1, length(lig_param.POT7));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT7_FJ,NVL(lig_cpt.POT7_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 8 
 if i=8 then
 -- si qu'une seule commande
 if instr(lig_param.POT8,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT8 is not null and instr(lig_param.POT8,'=')>0 then
 lig_param.POT8:=replace(lig_param.POT8,'=0','=');
 if lig_param.POT8='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif lig_param.POT8='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT8 is not null then
 lig_param.POT8:=replace(lig_param.POT8,'+0','+');
 lig_param.POT8:=replace(lig_param.POT8,'-0','-');
 if lig_param.POT8='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT8='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT8,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT8,0,instr(lig_param.POT8,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT8,instr(lig_param.POT8,';') + 1, length(lig_param.POT8));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT8_FH,NVL(lig_cpt.POT8_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT8_FJ,NVL(lig_cpt.POT8_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 9 
 if i=9 then
 -- si qu'une seule commande
 if instr(lig_param.POT9,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT9 is not null and instr(lig_param.POT9,'=')>0 then
 lig_param.POT9:=replace(lig_param.POT9,'=0','=');
 if lig_param.POT9='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif lig_param.POT9='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT9 is not null then
 lig_param.POT9:=replace(lig_param.POT9,'+0','+');
 lig_param.POT9:=replace(lig_param.POT9,'-0','-');
 if lig_param.POT9='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT9='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT9,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT9,0,instr(lig_param.POT9,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT9,instr(lig_param.POT9,';') + 1, length(lig_param.POT9));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT9_FH,NVL(lig_cpt.POT9_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT9_FJ,NVL(lig_cpt.POT9_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 10 
 if i=10 then
 -- si qu'une seule commande
 if instr(lig_param.POT10,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT10 is not null and instr(lig_param.POT10,'=')>0 then
 lig_param.POT10:=replace(lig_param.POT10,'=0','=');
 if lig_param.POT10='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif lig_param.POT10='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT10 is not null then
 lig_param.POT10:=replace(lig_param.POT10,'+0','+');
 lig_param.POT10:=replace(lig_param.POT10,'-0','-');
 if lig_param.POT10='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT10='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT10,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT10,0,instr(lig_param.POT10,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT10,instr(lig_param.POT10,';') + 1, length(lig_param.POT10));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT10_FH,NVL(lig_cpt.POT10_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT10_FJ,NVL(lig_cpt.POT10_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
 
 --pot 11 
 if i=11 then
 -- si qu'une seule commande
 if instr(lig_param.POT11,';')<=0 then
 -- si qu'une commande =
 if lig_param.POT11 is not null and instr(lig_param.POT11,'=')>0 then
 lig_param.POT11:=replace(lig_param.POT11,'=0','=');
 if lig_param.POT11='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif lig_param.POT11='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 end if;
 
 
 -- si qu'une commande avec + ou -
 elsif lig_param.POT11 is not null then
 lig_param.POT11:=replace(lig_param.POT11,'+0','+');
 lig_param.POT11:=replace(lig_param.POT11,'-0','-');
 if lig_param.POT11='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif lig_param.POT11='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 -- si deux commandes
 elsif instr(lig_param.POT11,';')>0 then
 -- on fait le même calcul mais deux fois de suite pour traiter les deux commandes
 for j in 1..2 loop
 calcul := '';
 
 if j = 1 then
 calcul:=substr(lig_param.POT11,0,instr(lig_param.POT11,';') -1);
 elsif j = 2 then
 calcul:=substr(lig_param.POT11,instr(lig_param.POT11,';') + 1, length(lig_param.POT11));
 end if;
 -- d'abord si instruction =
 if calcul is not null and instr(calcul,'=')>0 then
 calcul:=replace(calcul,'=0','=');
 if calcul='=1' then
 lig_cpt.POT1_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=2' then
 lig_cpt.POT2_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=3' then
 lig_cpt.POT3_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=4' then
 lig_cpt.POT4_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=5' then
 lig_cpt.POT5_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=6' then
 lig_cpt.POT6_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=7' then
 lig_cpt.POT7_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=8' then
 lig_cpt.POT8_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=9' then
 lig_cpt.POT9_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=10' then
 lig_cpt.POT10_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=11' then
 lig_cpt.POT11_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 elsif calcul='=12' then
 lig_cpt.POT12_VALEURJ:=NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=NVL(lig_cpt.POT11_FH,NVL(lig_cpt.POT11_VALEURH,0));
 end if;
 
 
 -- ensuite si commande + ou -
 elsif calcul is not null then
 calcul:=replace(calcul,'+0','+');
 calcul:=replace(calcul,'-0','-');
 if calcul='+1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='+12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) + NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) + NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-1' then
 lig_cpt.POT1_VALEURJ:=nvl(lig_cpt.POT1_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT1_VALEURH:=nvl(lig_cpt.POT1_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-2' then
 lig_cpt.POT2_VALEURJ:=nvl(lig_cpt.POT2_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT2_VALEURH:=nvl(lig_cpt.POT2_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-3' then
 lig_cpt.POT3_VALEURJ:=nvl(lig_cpt.POT3_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT3_VALEURH:=nvl(lig_cpt.POT3_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-4' then
 lig_cpt.POT4_VALEURJ:=nvl(lig_cpt.POT4_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT4_VALEURH:=nvl(lig_cpt.POT4_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-5' then
 lig_cpt.POT5_VALEURJ:=nvl(lig_cpt.POT5_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT5_VALEURH:=nvl(lig_cpt.POT5_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-6' then
 lig_cpt.POT6_VALEURJ:=nvl(lig_cpt.POT6_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT6_VALEURH:=nvl(lig_cpt.POT6_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-7' then
 lig_cpt.POT7_VALEURJ:=nvl(lig_cpt.POT7_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT7_VALEURH:=nvl(lig_cpt.POT7_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-8' then
 lig_cpt.POT8_VALEURJ:=nvl(lig_cpt.POT8_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT8_VALEURH:=nvl(lig_cpt.POT8_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-9' then
 lig_cpt.POT9_VALEURJ:=nvl(lig_cpt.POT9_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT9_VALEURH:=nvl(lig_cpt.POT9_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-10' then
 lig_cpt.POT10_VALEURJ:=nvl(lig_cpt.POT10_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT10_VALEURH:=nvl(lig_cpt.POT10_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-11' then
 lig_cpt.POT11_VALEURJ:=nvl(lig_cpt.POT11_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT11_VALEURH:=nvl(lig_cpt.POT11_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 elsif calcul='-12' then
 lig_cpt.POT12_VALEURJ:=nvl(lig_cpt.POT12_VALEURJ,0) - NVL(lig_cpt.POT11_FJ,NVL(lig_cpt.POT11_VALEURJ,0));
 lig_cpt.POT12_VALEURH:=nvl(lig_cpt.POT12_VALEURH,0) - NVL(lig_cpt.POT7_FH,NVL(lig_cpt.POT7_VALEURH,0));
 end if;
 end if;
 
 
 end loop;
 end if;
 end if;
  
 
 END LOOP;
 END IF;
 
 
 if (nvl(lig_cptori.POT1_VALEURJ,0)<>nvl(lig_cpt.POT1_VALEURJ,0)
 OR nvl(lig_cptori.POT1_VALEURH,0)   <>nvl(lig_cpt.POT1_VALEURH,0)
 OR nvl(lig_cptori.POT2_VALEURJ,0)   <>nvl(lig_cpt.POT2_VALEURJ,0)
 OR nvl(lig_cptori.POT2_VALEURH,0)   <>nvl(lig_cpt.POT2_VALEURH,0)
 OR nvl(lig_cptori.POT3_VALEURJ,0)   <>nvl(lig_cpt.POT3_VALEURJ,0)
 OR nvl(lig_cptori.POT3_VALEURH,0)   <>nvl(lig_cpt.POT3_VALEURH,0)
 OR nvl(lig_cptori.POT4_VALEURJ,0)   <>nvl(lig_cpt.POT4_VALEURJ,0)
 OR nvl(lig_cptori.POT4_VALEURH ,0)  <>nvl(lig_cpt.POT4_VALEURH,0)
 OR nvl(lig_cptori.POT5_VALEURJ ,0)  <>nvl(lig_cpt.POT5_VALEURJ,0)
 OR nvl(lig_cptori.POT5_VALEURH ,0)  <>nvl(lig_cpt.POT5_VALEURH,0)
 OR nvl(lig_cptori.POT6_VALEURJ ,0)  <>nvl(lig_cpt.POT6_VALEURJ,0)
 OR nvl(lig_cptori.POT6_VALEURH ,0)  <>nvl(lig_cpt.POT6_VALEURH,0)
 OR nvl(lig_cptori.POT7_VALEURJ ,0)  <>nvl(lig_cpt.POT7_VALEURJ,0)
 OR nvl(lig_cptori.POT7_VALEURH ,0)  <>nvl(lig_cpt.POT7_VALEURH,0)
 OR nvl(lig_cptori.POT8_VALEURJ ,0)  <>nvl(lig_cpt.POT8_VALEURJ,0)
 OR nvl(lig_cptori.POT8_VALEURH ,0)  <>nvl(lig_cpt.POT8_VALEURH,0)
 OR nvl(lig_cptori.POT9_VALEURJ ,0)  <>nvl(lig_cpt.POT9_VALEURJ,0)
 OR nvl(lig_cptori.POT9_VALEURH ,0)  <>nvl(lig_cpt.POT9_VALEURH,0)
 OR nvl(lig_cptori.POT10_VALEURJ ,0) <>nvl(lig_cpt.POT10_VALEURJ,0)
 OR nvl(lig_cptori.POT10_VALEURH ,0) <>nvl(lig_cpt.POT10_VALEURH,0)
 OR nvl(lig_cptori.POT11_VALEURJ ,0) <>nvl(lig_cpt.POT11_VALEURJ,0)
 OR nvl(lig_cptori.POT11_VALEURH ,0) <>nvl(lig_cpt.POT11_VALEURH,0)
 OR nvl(lig_cptori.POT12_VALEURJ ,0) <>nvl(lig_cpt.POT12_VALEURJ,0)
 OR nvl(lig_cptori.POT12_VALEURH,0)  <>nvl(lig_cpt.POT12_VALEURH,0)) then
 
 UPDATE cad_compteur
 SET DATE_MAJ=(
 CASE
 WHEN (POT1_VALEURJ<>lig_cpt.POT1_VALEURJ
 OR POT1_VALEURH   <>lig_cpt.POT1_VALEURH
 OR POT2_VALEURJ   <>lig_cpt.POT2_VALEURJ
 OR POT2_VALEURH   <>lig_cpt.POT2_VALEURH
 OR POT3_VALEURJ   <>lig_cpt.POT3_VALEURJ
 OR POT3_VALEURH   <>lig_cpt.POT3_VALEURH
 OR POT4_VALEURJ   <>lig_cpt.POT4_VALEURJ
 OR POT4_VALEURH   <>lig_cpt.POT4_VALEURH
 OR POT5_VALEURJ   <>lig_cpt.POT5_VALEURJ
 OR POT5_VALEURH   <>lig_cpt.POT5_VALEURH
 OR POT6_VALEURJ   <>lig_cpt.POT6_VALEURJ
 OR POT6_VALEURH   <>lig_cpt.POT6_VALEURH
 OR POT7_VALEURJ   <>lig_cpt.POT7_VALEURJ
 OR POT7_VALEURH   <>lig_cpt.POT7_VALEURH
 OR POT8_VALEURJ   <>lig_cpt.POT8_VALEURJ
 OR POT8_VALEURH   <>lig_cpt.POT8_VALEURH
 OR POT9_VALEURJ   <>lig_cpt.POT9_VALEURJ
 OR POT9_VALEURH   <>lig_cpt.POT9_VALEURH
 OR POT10_VALEURJ  <>lig_cpt.POT10_VALEURJ
 OR POT10_VALEURH  <>lig_cpt.POT10_VALEURH
 OR POT11_VALEURJ  <>lig_cpt.POT11_VALEURJ
 OR POT11_VALEURH  <>lig_cpt.POT11_VALEURH
 OR POT12_VALEURJ  <>lig_cpt.POT12_VALEURJ
 OR POT12_VALEURH  <>lig_cpt.POT12_VALEURH)
 THEN sysdate
 ELSE DATE_MAJ
 END),
 POT1_VALEURJ  =lig_cpt.POT1_VALEURJ,
 POT1_VALEURH  =lig_cpt.POT1_VALEURH,
 POT2_VALEURJ  =lig_cpt.POT2_VALEURJ,
 POT2_VALEURH  =lig_cpt.POT2_VALEURH,
 POT3_VALEURJ  =lig_cpt.POT3_VALEURJ,
 POT3_VALEURH  =lig_cpt.POT3_VALEURH,
 POT4_VALEURJ  =lig_cpt.POT4_VALEURJ,
 POT4_VALEURH  =lig_cpt.POT4_VALEURH,
 POT5_VALEURJ  =lig_cpt.POT5_VALEURJ,
 POT5_VALEURH  =lig_cpt.POT5_VALEURH,
 POT6_VALEURJ  =lig_cpt.POT6_VALEURJ,
 POT6_VALEURH  =lig_cpt.POT6_VALEURH,
 POT7_VALEURJ  =lig_cpt.POT7_VALEURJ,
 POT7_VALEURH  =lig_cpt.POT7_VALEURH,
 POT8_VALEURJ  =lig_cpt.POT8_VALEURJ,
 POT8_VALEURH  =lig_cpt.POT8_VALEURH,
 POT9_VALEURJ  =lig_cpt.POT9_VALEURJ,
 POT9_VALEURH  =lig_cpt.POT9_VALEURH,
 POT10_VALEURJ =lig_cpt.POT10_VALEURJ,
 POT10_VALEURH =lig_cpt.POT10_VALEURH,
 POT11_VALEURJ =lig_cpt.POT11_VALEURJ,
 POT11_VALEURH =lig_cpt.POT11_VALEURH,
 POT12_VALEURJ =lig_cpt.POT12_VALEURJ,
 POT12_VALEURH =lig_cpt.POT12_VALEURH
 WHERE CURRENT OF cur_cpt ;
 end if;
 dtprec      :=lig_cpt.DJour;
 typprec     :=lig_cpt.typemj;
 lig_cpt_prec:=lig_cpt;
 /*  IF Tab_ligcpt     IS NULL THEN
 Tab_ligcpt      :=Typ_Tab_ligcpt(lig_cpt);
 ELSE
 Tab_ligcpt.extend();
 Tab_ligcpt(Tab_ligcpt.last):=lig_cpt;
 END IF;*/
 END LOOP;
 CLOSE cur_cpt;
 
 /* forall i in Tab_ligcpt.first..Tab_ligcpt.last
 UPDATE cad_compteur
 SET DATE_MAJ=(
 CASE
 WHEN (POT1_VALEURJ<>lig_cpt.POT1_VALEURJ
 OR POT1_VALEURH   <>Tab_ligcpt(i).POT1_VALEURH
 OR POT2_VALEURJ   <>Tab_ligcpt(i).POT2_VALEURJ
 OR POT2_VALEURH   <>Tab_ligcpt(i).POT2_VALEURH
 OR POT3_VALEURJ   <>Tab_ligcpt(i).POT3_VALEURJ
 OR POT3_VALEURH   <>Tab_ligcpt(i).POT3_VALEURH
 OR POT4_VALEURJ   <>Tab_ligcpt(i).POT4_VALEURJ
 OR POT4_VALEURH   <>Tab_ligcpt(i).POT4_VALEURH
 OR POT5_VALEURJ   <>Tab_ligcpt(i).POT5_VALEURJ
 OR POT5_VALEURH   <>Tab_ligcpt(i).POT5_VALEURH
 OR POT6_VALEURJ   <>Tab_ligcpt(i).POT6_VALEURJ
 OR POT6_VALEURH   <>Tab_ligcpt(i).POT6_VALEURH
 OR POT7_VALEURJ   <>Tab_ligcpt(i).POT7_VALEURJ
 OR POT7_VALEURH   <>Tab_ligcpt(i).POT7_VALEURH
 OR POT8_VALEURJ   <>Tab_ligcpt(i).POT8_VALEURJ
 OR POT8_VALEURH   <>Tab_ligcpt(i).POT8_VALEURH
 OR POT9_VALEURJ   <>Tab_ligcpt(i).POT9_VALEURJ
 OR POT9_VALEURH   <>Tab_ligcpt(i).POT9_VALEURH
 OR POT10_VALEURJ  <>Tab_ligcpt(i).POT10_VALEURJ
 OR POT10_VALEURH  <>Tab_ligcpt(i).POT10_VALEURH
 OR POT11_VALEURJ  <>Tab_ligcpt(i).POT11_VALEURJ
 OR POT11_VALEURH  <>Tab_ligcpt(i).POT11_VALEURH
 OR POT12_VALEURJ  <>Tab_ligcpt(i).POT12_VALEURJ
 OR POT12_VALEURH  <>Tab_ligcpt(i).POT12_VALEURH)
 THEN sysdate
 ELSE DATE_MAJ
 END),
 POT1_VALEURJ  =Tab_ligcpt(i).POT1_VALEURJ,
 POT1_VALEURH  =Tab_ligcpt(i).POT1_VALEURH,
 POT2_VALEURJ  =Tab_ligcpt(i).POT2_VALEURJ,
 POT2_VALEURH  =Tab_ligcpt(i).POT2_VALEURH,
 POT3_VALEURJ  =Tab_ligcpt(i).POT3_VALEURJ,
 POT3_VALEURH  =Tab_ligcpt(i).POT3_VALEURH,
 POT4_VALEURJ  =Tab_ligcpt(i).POT4_VALEURJ,
 POT4_VALEURH  =Tab_ligcpt(i).POT4_VALEURH,
 POT5_VALEURJ  =Tab_ligcpt(i).POT5_VALEURJ,
 POT5_VALEURH  =Tab_ligcpt(i).POT5_VALEURH,
 POT6_VALEURJ  =Tab_ligcpt(i).POT6_VALEURJ,
 POT6_VALEURH  =Tab_ligcpt(i).POT6_VALEURH,
 POT7_VALEURJ  =Tab_ligcpt(i).POT7_VALEURJ,
 POT7_VALEURH  =Tab_ligcpt(i).POT7_VALEURH,
 POT8_VALEURJ  =Tab_ligcpt(i).POT8_VALEURJ,
 POT8_VALEURH  =Tab_ligcpt(i).POT8_VALEURH,
 POT9_VALEURJ  =Tab_ligcpt(i).POT9_VALEURJ,
 POT9_VALEURH  =Tab_ligcpt(i).POT9_VALEURH,
 POT10_VALEURJ =Tab_ligcpt(i).POT10_VALEURJ,
 POT10_VALEURH =Tab_ligcpt(i).POT10_VALEURH,
 POT11_VALEURJ =Tab_ligcpt(i).POT11_VALEURJ,
 POT11_VALEURH =Tab_ligcpt(i).POT11_VALEURH,
 POT12_VALEURJ =Tab_ligcpt(i).POT12_VALEURJ,
 POT12_VALEURH =Tab_ligcpt(i).POT12_VALEURH where rowid=Tab_ligcpt(i).rowid;*/
 
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_UNIT_PROPAGATION', IDMATRIC ||','|| p_matric ||','|| DATEDEB ||','||DATEFIN ||','|| CODECPT ||','|| AvecBascule ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_PROPAGATION;
 PROCEDURE CAD_UNIT_MAJ_VALEUR_RUBJOUR(
 idMat               IN NUMBER,
 matric              IN VARCHAR2 ,
 DATEJOUR            IN VARCHAR2 ,
 rub                 IN VARCHAR2,
 unite               IN VARCHAR2,
 nbh                 IN NUMBER,
 j_cal               IN NUMBER,
 j_ouvrable          IN NUMBER,
 j_oeuvr             IN NUMBER,
 j_ouvre             IN NUMBER,
 nbjour              IN OUT NUMBER,
 nbheures            IN OUT NUMBER,
 forcage             IN VARCHAR2,
 limitazero          IN BOOLEAN,
 forcageDuResteEnFin IN VARCHAR2)
 AS
 CURSOR cur_cpt
 IS
 SELECT *
 FROM
 (SELECT a.code_compteur,
 a.pot_solde,
 a.pot_variation,
 a.min_soldej,
 a.min_soldeh,
 a.ordre
 FROM CAD_PARAM_LIEN_RUB_CPT a,
 CAD_MATRIC_DATEVALID b
 WHERE a.RUB_VAL_JOUR =rub
 AND a.code_compteur  =b.code_compteur
 AND b.matricule      =matric
 AND b.date_deb_per  <=datejour
 AND b.date_fin_per  >=datejour
 AND b.DATE_EFFET     =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid c
 WHERE c.date_effet<=datejour
 AND c.code_compteur=b.code_compteur
 AND b.matricule    =c.matricule
 AND b.date_deb_per =c.date_deb_per
 AND b.date_fin_per =c.date_fin_per
 )
 )
 ORDER BY
 CASE
 WHEN forcageDuResteEnFin='true'
 THEN ordre
 END DESC,
 CASE
 WHEN forcageDuResteEnFin='false'
 THEN ordre
 END
 --  ordre
 ;
 ligne_cpt cur_cpt%ROWTYPE;
 numpotSolde    NUMBER;
 numpotPris     NUMBER;
 pot_Var        NUMBER;
 valSoldeJ      NUMBER:=0;
 valSoldeH      NUMBER:=0;
 valVarJ        NUMBER:=0;
 valVarH        NUMBER:=0;
 valPrisJ       NUMBER:=0;
 valPrisH       NUMBER:=0;
 req            VARCHAR(2000);
 djourcpt       VARCHAR(8);
 typemjcp       VARCHAR(1);
 gestionHJ      VARCHAR(1);
 soldeJ         NUMBER :=0;
 variationJ     NUMBER :=0;
 soldeH         NUMBER :=0;
 variationH     NUMBER :=0;
 reqpropagation VARCHAR(4000);
 reqinsert      VARCHAR(4000);
 pasdeCpt       BOOLEAN;
 cptValide      BOOLEAN:=false;
 l_rowid        VARCHAR2(100);
 BEGIN
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO ligne_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 cptValide    :=true;
 IF gestionHJ IS NULL THEN
 SELECT cpt.gestionHJ
 INTO gestionHJ
 FROM CAD_PARAM_STRUCT_CPT cpt
 WHERE cpt.CODE_COMPTEUR=ligne_cpt.code_compteur;
 IF nbjour              =0 AND nbheures=0 THEN
 IF gestionHJ         ='H' THEN
 nbjour            :=0;
 nbheures          :=nbh;
 ELSE
 IF gestionHJ='A' THEN
 nbheures :=nbh;
 ELSE
 nbheures:=0;
 END IF;
 IF unite   ='C' THEN
 nbjour  :=j_cal;
 elsif unite='U' THEN
 nbjour  :=j_ouvre;
 elsif unite='S' THEN
 nbjour  :=j_ouvrable;
 elsif unite='O' THEN
 nbjour  :=j_oeuvr;
 END IF;
 END IF;
 END IF;
 END IF;
 -- Récupération du pot de variation
 SELECT
 CASE
 WHEN POTV1=ligne_cpt.pot_variation
 THEN 1
 WHEN POTV2=ligne_cpt.pot_variation
 THEN 2
 WHEN POTV3=ligne_cpt.pot_variation
 THEN 3
 WHEN POTV4=ligne_cpt.pot_variation
 THEN 4
 WHEN POTV5=ligne_cpt.pot_variation
 THEN 5
 WHEN POTV6=ligne_cpt.pot_variation
 THEN 6
 END
 INTO pot_Var
 FROM CAD_PARAM_CALCUL
 WHERE code_compteur=ligne_cpt.code_compteur;
 IF pot_Var        IS NOT NULL THEN
 -- Récupération du solde, du pris et de la variation
 req:= 'select djour,typemj,nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0), nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0),nvl(POTV'||pot_Var||'_VALEURJ,0), nvl(POTV'||pot_Var||'_VALEURH,0),nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0), nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0),rowid from CAD_COMPTEUR c where c.matricule      = :matric
 and code_COMPTEUR= :codecpt
 AND djour||typemj          =
 (SELECT MAX(c2.djour||c2.typemj)
 FROM CAD_COMPTEUR c2
 WHERE c.code_compteur=c2.code_compteur
 AND c.matricule      =c2.matricule
 AND ( c2.djour        <:datejour
 or
 (
 c2.djour=:datejour and c2.typemj<''S''
 ))) ' ;
 BEGIN
 IF ligne_cpt.pot_solde<>0 THEN
 EXECUTE immediate req INTO djourcpt,
 typemjcp,
 valSoldeJ,
 valSoldeH,
 valVarJ,
 valVarH,
 valprisJ,
 valprisH,
 l_rowid USING matric,
 ligne_cpt.code_compteur,
 datejour,
 datejour;
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 pasdeCpt:=true;
 CONTINUE;
 END;
 pasdeCpt:=false;
 -- Solde suffisant
 IF djourcpt <>datejour THEN
 valVarJ   :=0;
 valVarH   :=0;
 END IF;
 -- Si le solde est est déjà au min  et pas de forçage on ne fait rien
 IF ligne_cpt.pot_solde<>0 AND (NOT (forcage='true' AND forcageduresteenfin='true' ) AND ((gestionHJ='A' AND ( (limitazero AND (valSoldeJ<=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND (valSoldeJ<=ligne_cpt.MIN_SOLDEJ) ))) AND ( (limitazero AND (valSoldeH<=greatest(ligne_cpt.MIN_SOLDEH,0)) OR (NOT limitazero AND (valSoldeH<=ligne_cpt.MIN_SOLDEH) )))) OR (gestionHJ='J' AND (limitazero AND (valSoldeJ<=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND (valSoldeJ<=ligne_cpt.MIN_SOLDEJ) ) )) OR (gestionHJ='H' AND (limitazero AND (valSoldeH<=greatest(ligne_cpt.MIN_SOLDEH,0)) OR (NOT limitazero AND (valSoldeH<=ligne_cpt.MIN_SOLDEH) ) )))) THEN
 CONTINUE;
 -- si solde suffisant
 elsIF ligne_cpt.pot_solde=0 OR ((forcage='true' AND forcageduresteenfin='true' ) OR (gestionHJ='A' AND ( (limitazero AND valSoldeJ-(nbjour+valVarJ)>=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND valSoldeJ-(nbjour+valVarJ)>=ligne_cpt.MIN_SOLDEJ)) AND ( (limitazero AND valSoldeH-(nbheures+valVarH)>=greatest(ligne_cpt.MIN_SOLDEH,0) ) OR (NOT limitazero AND valSoldeH-(nbheures+valVarH)>=ligne_cpt.MIN_SOLDEH) ) ) OR (gestionHJ='H' AND ( (limitazero AND valSoldeH-(nbheures+valVarH)>=greatest(ligne_cpt.MIN_SOLDEH,0) ) OR (NOT limitazero AND valSoldeH-(nbheures+valVarH)>=ligne_cpt.MIN_SOLDEH) )) OR (gestionHJ='J' AND ( (limitazero AND valSoldeJ-(nbjour+valVarJ)>=greatest(ligne_cpt.MIN_SOLDEJ,0)) OR (NOT limitazero AND valSoldeJ-(nbjour+valVarJ)>=ligne_cpt.MIN_SOLDEJ))) ) THEN
 -- mise à jour de la variation et sortie
 IF (djourcpt  =datejour AND (typemjcp='N' OR typemjcp='M' )) THEN
 variationJ := valVarJ+ nbjour;
 variationH := valVarH+ nbheures;
 req        :='UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=:1,POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+:2
 ,POTV'||pot_Var||'_VALEURh=:3,POT'||ligne_cpt.pot_variation||'_VALEURh=nvl(POT'||ligne_cpt.pot_variation||'_VALEURh,0)+:4
 where
 rowid=:5';
 EXECUTE immediate req USING variationJ,
 nbjour,
 variationH,
 nbheures,
 l_rowid;
 ELSE
 IF gestionHJ  ='A' OR gestionHJ='J' THEN
 variationJ := NVL(nbjour,0);
 END IF;
 IF gestionHJ  ='A' OR gestionHJ='H' THEN
 variationH := NVL(nbheures,0);
 END IF;
 IF variationJ>0 OR variationH>0 THEN
 reqinsert := 'INSERT into CAD_COMPTEUR (MATRICULE,CODE_COMPTEUR,DJOUR,TYPEMJ,date_maj,POT'||ligne_cpt.pot_variation||'_VALEURJ,POTV'||pot_Var||'_VALEURJ,POT'||ligne_cpt.pot_variation||'_VALEURH,POTV'||pot_Var||'_VALEURH)
 values ('''||matric||''','''||ligne_cpt.code_compteur||''','''||datejour||''',''N'',sysdate,:1,:2,:3,:4)';
 EXECUTE immediate reqinsert USING NVL(valPrisJ,0)+ NVL(nbjour,0),
 NVL(variationJ,0),
 NVL(valPrisH,0)+ NVL(nbheures,0),
 NVL(variationH,0) ;
 END IF;
 END IF;
 nbheures:=0;
 nbjour  :=0;
 EXIT;
 ELSE -- on n'a pas assez on prend la partie possible et on calcule le reste
 IF gestionHJ='A' OR gestionHJ='J' THEN
 IF limitazero THEN
 nbjour := nbjour - greatest(0,valSoldeJ);
 ELSE
 nbjour := nbjour - greatest(0,(valSoldeJ-ligne_cpt.MIN_SOLDEJ));
 END IF;
 END IF;
 IF limitazero THEN
 nbheures := nbheures - greatest(0,valSoldeH);
 ELSE
 nbheures := nbheures - greatest(0,(valSoldeH-ligne_cpt.MIN_SOLDEH));
 END IF;
 IF (djourcpt =datejour AND (typemjcp='N' OR typemjcp='M' )) THEN
 IF limitazero THEN
 req:= 'UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=POT'||ligne_cpt.pot_solde||'_VALEURJ-('||greatest(0,ligne_cpt.MIN_SOLDEJ)||'),POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0)-'||greatest(0,ligne_cpt.MIN_SOLDEJ)||'
 ,POTV'||pot_Var||'_VALEURH=POT'||ligne_cpt.pot_solde||'_VALEURH-('||greatest(0,ligne_cpt.MIN_SOLDEH)||'),POT'||ligne_cpt.pot_variation||'_VALEURH=nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0)-('||greatest(0,ligne_cpt.MIN_SOLDEH)||')
 where rowid=:1';
 ELSE
 req:='UPDATE CAD_COMPTEUR set date_maj=sysdate,POTV'||pot_Var||'_VALEURJ=POT'||ligne_cpt.pot_solde||'_VALEURJ-('||ligne_cpt.MIN_SOLDEJ||'),POT'||ligne_cpt.pot_variation||'_VALEURJ=nvl(POT'||ligne_cpt.pot_variation||'_VALEURJ,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0)-('||ligne_cpt.MIN_SOLDEJ||')
 ,POTV'||pot_Var||'_VALEURH=POT'||ligne_cpt.pot_solde||'_VALEURH-('||ligne_cpt.MIN_SOLDEH||'),POT'||ligne_cpt.pot_variation||'_VALEURH=nvl(POT'||ligne_cpt.pot_variation||'_VALEURH,0)+ nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0)-('||ligne_cpt.MIN_SOLDEH||')
 where rowid=:1';
 END IF;
 EXECUTE immediate req USING l_rowid;
 ELSE
 IF gestionHJ ='A' OR gestionHJ='J' THEN
 IF limitazero THEN
 soldeJ     := greatest(0,ligne_cpt.MIN_SOLDEJ);
 variationJ :=valSoldeJ-greatest(0,ligne_cpt.MIN_SOLDEJ) ;
 ELSE
 soldeJ     := ligne_cpt.MIN_SOLDEJ;
 variationJ :=valSoldeJ-ligne_cpt.MIN_SOLDEJ ;
 END IF;
 END IF;
 IF gestionHJ ='A' OR gestionHJ='H' THEN
 IF limitazero THEN
 soldeH     :=greatest(0,ligne_cpt.MIN_SOLDEH);
 variationH :=valSoldeH-greatest(0,ligne_cpt.MIN_SOLDEH) ;
 ELSE
 soldeH     := ligne_cpt.MIN_SOLDEH;
 variationH :=valSoldeH-ligne_cpt.MIN_SOLDEH ;
 END IF;
 END IF;
 IF variationJ>0 OR variationH>0 THEN
 req       := 'INSERT into CAD_COMPTEUR (MATRICULE,CODE_COMPTEUR,DJOUR,TYPEMJ,date_maj,POT'||ligne_cpt.pot_variation||'_VALEURJ,POTV'||pot_Var||'_VALEURJ,POT'||ligne_cpt.pot_variation||'_VALEURH,POTV'||pot_Var||'_VALEURH)
 values ('''||matric||''','''||ligne_cpt.code_compteur||''','''||datejour||''',''N'',sysdate,:1,:2,:3, :4)';
 EXECUTE immediate req USING valprisJ+soldeJ+variationJ,
 variationJ,
 valprish+soldeH+variationH,
 variationH;
 END IF;
 END IF;
 END IF;
 END IF;
 END LOOP;
 CLOSE cur_cpt;
 -- si mode interactif (pas recalcul) on renvoie une erreur si le solde est insuffisant
 --    - mode recalcul : on passe en solde négatif ( que faire d'autre :1)
 --    - mode interactif : on renvoie une erreur pas assez de solde : erreur de type CAD-00001
 IF NOT limitazero AND forcage<>'true' THEN
 IF pasdecpt THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00117#'||matric||'#'||datejour||'#'||rub);
 END IF;
 IF ( nbheures>0 OR nbjour>0) THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00055#'||datejour||'#'||rub);
 END IF;
 END IF;
 IF NOT cptValide AND forcage<>'true' THEN
 ROLLBACK;
 raise_application_error(-20000, 'CAD00117#'||matric||'#'||datejour||'#'||rub);
 END IF;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(idMat ,'CAD_UNIT_MAJ_VALEUR', idMat ||','|| matric ||','|| DATEJOUR ||','|| rub ||','|| unite ||','|| nbh ||','|| j_cal ||','|| j_ouvrable ||','|| j_oeuvr ||','|| j_ouvre ||','|| nbjour ||','|| nbheures ||','|| forcage ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_MAJ_VALEUR_RUBJOUR;
 PROCEDURE         CAD_MAJ_VALEUR_RUBJOUR(
 idmat           IN NUMBER,
 pmatric         IN VARCHAR2,
 dateprec        IN VARCHAR2,
 datejour        IN VARCHAR2,
 nbh             IN NUMBER,
 j_cal           IN NUMBER,
 j_ouvrable      IN NUMBER,
 j_oeuvr         IN NUMBER,
 j_ouvre         IN NUMBER,
 rub             IN VARCHAR2,
 forcage         IN VARCHAR2)
 AS
 nbjour          NUMBER:=0;
 nbheures        NUMBER:=0;
 unite           VARCHAR(1);
 dtrecalc        VARCHAR(8);
 dtdebrecalc     VARCHAR(8);
 CURSOR cur_cpt
 IS
 SELECT code_compteur, MAX(djour) AS djour
 FROM cad_compteur cpt
 WHERE djour < datejour
 AND  matricule = pmatric
 AND code_compteur IN (SELECT DISTINCT code_compteur FROM cad_param_lien_rub_cpt lien /*WHERE rub_val_jour = rub*/)
 GROUP BY code_compteur;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 nbjour := 0;
 nbheures := 0;
 unite := cad_unite(pmatric, datejour, rub);
 
 /*
 SELECT MAX(djour) INTO dtrecalc
 FROM (SELECT code_compteur, MIN(djour) AS djour
 FROM cad_compteur cpt
 WHERE djour > datejour
 AND matricule = matric
 AND code_compteur IN (SELECT code_compteur FROM cad_param_lien_rub_cpt WHERE rub_val_jour = rub)
 GROUP BY code_compteur
 );
 */
 
 BEGIN
 SELECT djour INTO dtrecalc
 FROM (SELECT TO_CHAR(ip.date_effet, 'yyyymmdd') AS djour
 FROM tge_incidents_paie     ip,
 dic_adm_contrat        dac,
 -- MONOP DIT 50818
 DIC_ADM_CONTRAT_SITU   s
 WHERE dac.matric = pmatric
 AND dac.NUMPAC=s.NUMPAC
 AND dac.PACMAT=s.PACMAT
 AND dac.NUMCNT=s.NUMCNT
 AND ip.date_effet > TO_DATE(datejour, 'yyyymmdd')
 AND ip.idpacmat = dac.idpacmat
 AND ip.paiezad = s.paiezad
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'))
 AND ip.code_ip IN (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt)
 ORDER BY ip.date_effet
 )
 WHERE ROWNUM = 1;
 EXCEPTION
 WHEN OTHERS THEN
 CAD_ERREUR(idmat ,'CAD_MAJ_VALEUR_RUBJOUR', idmat ||','|| pmatric || ',' || dateprec || ',' || datejour || ',' || nbh || ',' || j_cal || ',' || j_ouvrable || ',' || j_oeuvr || ',' || j_ouvre || ',' || rub || ',' || forcage, err_code || '-' || err_msg );
 dtrecalc := datejour;
 END;
 dtdebrecalc := datejour;
 
 /*
 IF dateprec IS NOT NULL THEN
 dtDebrecalc := DATEJOUR;
 ELSE
 SELECT MIN(djour) INTO dtDebrecalc
 FROM (SELECT code_compteur, max(DJOUR) as djour
 FROM cad_compteur cpt
 WHERE djour < datejour
 AND matricule = matric
 AND code_compteur IN (SELECT code_compteur FROM cad_param_lien_rub_cpt WHERE rub_val_jour = rub)
 GROUP BY CODE_COMPTEUR);
 END IF;
 */
 
 cad_avancement(idmat, '    Début rub : ' || datejour || ',' || rub);
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour, rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, TRUE, 'false');
 cad_avancement(idmat, '    Fin rub : ' || datejour);
 cad_avancement(idmat, '    Début calcul : ' || datejour);
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%notfound;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 --cad_avancement(idmat, '    Fin propag : ' || datejour);
 --cad_calcul(matric, idmat, dtDebrecalc, dtrecalc);
 --cad_avancement(idmat, '    Fin calcul : ' || datejour);
 IF nbjour > 0 OR nbheures > 0 THEN
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour,rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, FALSE,'false');
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%notfound;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 cad_avancement(idmat,'    Fin propag : '|| datejour);
 --cad_calcul(matric,idmat, dtDebrecalc, dtrecalc);
 END IF;
 IF (nbjour > 0 OR nbheures > 0) AND forcage = 'true' THEN
 cad_unit_maj_valeur_rubjour(idmat, pmatric , datejour,rub ,unite , nbh , j_cal , j_ouvrable , j_oeuvr , j_ouvre ,nbjour,nbheures , forcage, FALSE, 'true');
 cad_avancement(idmat, '    Début propag : ' || datejour);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%notfound ;
 cad_unit_propagation(idmat, pmatric, lig_cpt.djour, datejour, lig_cpt.code_compteur, 'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 --cad_unit_propagation(idmat, matric, null, DATEJOUR, null, 'BASCULE');
 cad_avancement(idmat, '    Fin propag : ' || datejour);
 --cad_calcul(matric, idmat, dtDebrecalc, dtrecalc);
 END IF;
 cad_calcul(pmatric, idmat, dtdebrecalc, dtrecalc);
 END CAD_MAJ_VALEUR_RUBJOUR;
 PROCEDURE CAD_MISE_A_0_VAR(
 idMat IN NUMBER,
 dtdeb IN VARCHAR2 )
 AS
 CURSOR cur_cpt
 IS
 SELECT cpt.code_compteur,
 MAX(DJOUR) AS djour,
 cpt.matricule
 FROM CAD_COMPTEUR cpt,cad_calcul_en_cours_matric d,(SELECT DISTINCT code_compteur FROM CAD_PARAM_LIEN_RUB_CPT
 ) lien
 WHERE DJOUr    <dtdeb
 and d.id=idMat
 AND cpt.MATRICULE =d.matricule
 AND cpt.CODE_COMPTEUR = lien.code_compteur
 GROUP BY cpt.CODE_COMPTEUR,
 cpt.matricule;
 lig_cpt cur_cpt%ROWTYPE;
 dtrecalc VARCHAR(8);
 BEGIN
 CAD_AVANCEMENT(idMat,'Début Mise à 0');
 -- remise à 0 des pots de variation
 CAD_AVANCEMENT(idMat,'  Début Mise à 0 des pots');
 UPDATE CAD_COMPTEUR a
 SET potv1_valeurJ=0 ,
 potv1_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv1
 );
 UPDATE CAD_COMPTEUR a
 SET potv2_valeurJ=0 ,
 potv2_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv2
 );
 UPDATE CAD_COMPTEUR a
 SET potv3_valeurJ=0 ,
 potv3_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv3
 );
 UPDATE CAD_COMPTEUR a
 SET potv4_valeurJ=0 ,
 potv4_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv4
 );
 UPDATE CAD_COMPTEUR a
 SET potv5_valeurJ=0 ,
 potv5_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv5
 );
 UPDATE CAD_COMPTEUR a
 SET potv6_valeurJ=0 ,
 potv6_valeurH  =0,
 date_maj       =sysdate
 WHERE typemj    <>'I'
 AND DJOUr       >=dtdeb
 AND MATRICULE   IN
 (SELECT d.matricule FROM cad_calcul_en_cours_matric d WHERE d.id=idMat
 )
 AND code_compteur IN
 (SELECT DISTINCT b.CODE_COMPTEUR
 FROM cad_param_lien_rub_cpt b,
 cad_PARAM_calcul c
 WHERE B.code_compteur =c.code_compteur
 AND a.code_compteur   =b.code_compteur
 AND b.pot_variation   =c.potv6
 );
 CAD_AVANCEMENT(idMat,'  Fin Mise à 0 des pots');
 /*for i in 1..6
 loop*/
 -- But : Mettre à 0 seulement les pots de variations utilisées par les rubriques
 /* execute immediate 'merge into ( select * from CAD_COMPTEUR cpt where typemj<>''I'' and DJOUr >='||dtdeb||' AND MATRICULE in (select matricule from cad_calcul_en_cours_matric d where d.id='||idMat||' )) a using (select b.CODE_COMPTEUR from cad_param_lien_rub_cpt b, cad_PARAM_calcul c where  B.code_compteur=c.code_compteur
 and b.pot_variation=c.potv'||i||'  group by  b.CODE_COMPTEUR ) e on ( a.code_COMPTeur=e.code_compteur  )
 when matched then
 update set a.potv'||i||'_valeurJ=0 , a.potv'||i||'_valeurH=0,date_maj=sysdate' ;
 end loop;*/
 CAD_AVANCEMENT(idMat,'  Début propag');
 -- reprise des valeurs précédentes puis calcul
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt ;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 cad_unit_propagation(idmat,lig_cpt.matricule,lig_cpt.djour,dtdeb,lig_cpt.code_compteur,'BASCULE');
 END LOOP;
 CLOSE cur_cpt;
 CAD_AVANCEMENT(idMat,'  Fin propag');
 -- calcul jusqu'à première rubrique sinon fin ??
 /*  BEGIN
 SELECT djour
 INTO dtrecalc
 FROM
 (SELECT TO_CHAR(je.jour,'yyyymmdd') AS djour
 FROM gta_jou_contrat cnt,
 gta_jou_jouremploi je,
 gta_jou_valjour val
 WHERE je.employe_id IN
 (SELECT matricule FROM cad_calcul_en_cours_matric WHERE id=idmat
 )
 AND je.jour        >to_date(dtdeb,'yyyymmdd')
 AND je.id          =val.jour_emploi_id
 AND cnt.employe_id =je.employe_id
 AND je.code_contrat=cnt.code_contrat
 AND je.jour BETWEEN cnt.date_deb_valid AND NVL(cnt.date_fin_valid,to_date('20991231','yyyymmdd') )
 AND val.rub_val_jour IN
 (SELECT DISTINCT (RUB_VAL_JOUR) FROM CAD_PARAM_LIEN_RUB_CPT
 )
 ORDER BY je.jour
 )
 WHERE rownum=1;
 EXCEPTION
 WHEN OTHERS THEN
 dtrecalc:=NULL;
 END;*/
 CAD_AVANCEMENT(idMat,'  Début calcul suite mise à 0 ');
 CAD_CALCUL(NULL,idMat,dtdeb,NULL);
 CAD_AVANCEMENT(idMat,'  Fin calcul suite mise à 0 ');
 CAD_AVANCEMENT(idMat,'Fin Mise à 0');
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(idMat ,'CAD_MISE_A_0_VAR', idMat ||','|| dtdeb ,err_code||'-'||err_msg );
 raise;
 END CAD_MISE_A_0_VAR;
 PROCEDURE CAD_UNIT_BASCULE(
 IDMATRIC   IN NUMBER ,
 p_matric   IN VARCHAR2,
 BASCULE    IN VARCHAR2 ,
 DATEBAS    IN VARCHAR2 ,
 p_ordre    IN NUMBER,
 p_typebasc IN VARCHAR2)
 AS
 CURSOR cur_Bascule
 IS
 SELECT a.*,
 b.compteur_dest,
 b.compteur_ori,
 requetes,
 a.rowid,
 (select max(d.djour||'#'||d.typemj)  from CAD_COMPTEUR d where d.MATRICULE=a.MATRICULE and d.CODE_COMPTEUR= b.compteur_ori AND d.DJOUR||d.typemj<DATE_THEO_BASCULE||p_typebasc ) as djourFirst,
 -- (select max(typemj) from CAD_COMPTEUR d where d.code_compteur = b.compteur_ori and d.djour <(select max(e.djour)  from CAD_COMPTEUR e where e.MATRICULE=d.MATRICULE and e.CODE_COMPTEUR= d.code_compteur AND e.DJOUR||e.typemj<=DATEBAS||p_typebasc ) and d.matricule = a.matricule) as typemjFirst,
 (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=a.MATRICULE and d.CODE_COMPTEUR= b.compteur_ori AND d.DJOUR||d.typemj<=DATE_THEO_BASCULE||p_typebasc ) as djourAutre,
 p_typebasc as typemjautre
 
 FROM CAD_REGLES_PREVUES_REALISEES a,
 cad_param_regles_maj b,CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE a.code_bascule =b.code_bascule
 AND a.code_bascule   =bascule
 AND DATE_THEO_BASCULE=DATEBAS
 AND a.type_bascule   =p_typebasc
 -- and requetes is not null
 AND (ordre           =p_ordre
 OR (ordre           IS NULL
 AND p_ordre         IS NULL))
 AND a.matricule= mat.matricule
 and mat.id     =idmatric
 AND mat.matricule=NVL(p_matric,mat.matricule);
 ligneBascule cur_Bascule%ROWTYPE;
 pos  NUMBER:=0;
 subs VARCHAR2(4000);
 req CLOB;
 requpdate clob;
 djourReq  VARCHAR2(1000);
 TYPE T_REC IS RECORD (
 idRow varchar2(100),
 dte  CAD_COMPTEUR.djour%TYPE,
 typemj  CAD_COMPTEUR.typemj%TYPE );
 
 TYPE Tab_Rowid
 IS
 TABLE OF T_REC index by pls_integer;
 T_Id Tab_Rowid;
 T_IdBasc Tab_Rowid;
 code_basc_prec VARCHAR(20);
 code_dest_prec VARCHAR(20);
 code_ori_prec  VARCHAR(20);
 mat_prec       VARCHAR(20);
 type_mj_req varchar(1);
 sizeTab number;
 withdjour boolean;
 reqwithoutDate clob;
 nbdjour number;
 TYPE TYP_compteur_dest is table of varchar2(1) index by varchar2(32) ;
 tab_compteur_dest TYP_compteur_dest;
 BEGIN
 OPEN cur_Bascule;
 LOOP
 FETCH cur_Bascule INTO ligneBascule;
 
 --req              :=ligneBascule.REQUETES;
 IF code_basc_prec                                                     IS NOT NULL AND (lignebascule.code_bascule <>code_basc_prec OR cur_Bascule%NOTFOUND) THEN
 reqwithoutDate:='';
 requpdate:='';
 nbdjour:=0;
 BEGIN
 WHILE LENGTH(req) >0
 LOOP
 IF instr(req,';')>0 THEN
 subs          :=SUBSTR(req,0,instr(req,';'));
 ELSE
 subs:=req;
 END IF;
 req      :=REPLACE(req,subs,'');
 req      :=REPLACE(req,subs,'');
 IF instr(subs,'_DJOUR_')>0 THEN
 nbdjour:=nbdjour+1;
 withdjour:=true;
 subs     :=REPLACE(subs,'_DJOUR_',':date'||trunc(dbms_random.value(1,100))||' and typemj=:type'||trunc(dbms_random.value(1,100)));
 subs     :=REPLACE(subs,';','');
 -- requpdate:='update CAD_COMPTEUR ca set '||subs||' where rowid=:1' ;
 if requpdate is not null then
 requpdate:=requpdate||',';
 end if;
 requpdate:=requpdate||subs;
 else
 withdjour:=false;
 subs     :=REPLACE(subs,';','');
 if reqwithoutDate is not null then
 reqwithoutDate:=reqwithoutDate||',';
 end if;
 reqwithoutDate:=reqwithoutDate||subs;
 end if;
 
 
 -- CAD_DEBUG(idmatric,requpdate);
 /* if withdjour then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 end if;*/
 END LOOP;
 if reqwithoutDate is not null then
 reqwithoutDate:='update CAD_COMPTEUR ca set '||reqwithoutDate||' where rowid=:1' ;
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate reqwithoutDate USING t_id(i).idrow;
 end if;
 
 if requpdate is not null then
 requpdate:='update CAD_COMPTEUR ca set '||requpdate||' where rowid=:1' ;
 if nbdjour=1 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=2 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=3 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=4 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=5 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=6 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=7 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=8 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=9 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=10 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=11 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 elsif nbdjour=12 then
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).dte,t_id(i).typemj,t_id(i).idrow;
 end if;
 end if;
 
 
 FORALL i IN T_IdBasc.first..T_IdBasc.last
 UPDATE CAD_REGLES_PREVUES_REALISEES a
 SET statut        ='OK',
 DERNIERE_BASCULE=SYSTIMESTAMP
 WHERE rowid       =T_IdBasc(i).idrow;
 EXCEPTION
 WHEN OTHERS THEN
 IF T_IdBasc IS NOT NULL THEN
 FORALL i IN T_IdBasc.first..T_IdBasc.last
 UPDATE CAD_REGLES_PREVUES_REALISEES a
 SET statut        ='KO',
 DERNIERE_BASCULE=SYSTIMESTAMP
 WHERE rowid       =T_IdBasc(i).idrow;
 END IF;
 raise;
 END;
 END IF;
 EXIT
 WHEN cur_Bascule%NOTFOUND ;
 code_dest_prec := lignebascule.compteur_dest;
 code_ori_prec  := lignebascule.compteur_ori;
 mat_prec       := lignebascule.matricule ;
 IF p_typebasc                                                        ='B' THEN
 IF not tab_compteur_dest.exists(mat_prec||'#'||code_ori_prec) THEN
 -- djourReq                                                        :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR<'''||datebas||'''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule) ';
 djourReq :=substr(lignebascule.djourFirst,1,8);
 type_mj_req:=substr(lignebascule.djourFirst,10,1);
 --listecompteur_dest                                              :=listecompteur_dest||';'||mat_prec||'#'||code_dest_prec||';';
 tab_compteur_dest(mat_prec||'#'||code_dest_prec):='Y';
 ELSE
 --DBMS_OUTPUT.PUT_LINE (listecompteur_dest);
 --FIXME utiliser la procédure trace_dbms_output()
 djourReq :=lignebascule.djourAUTRE;
 type_mj_req:=lignebascule.typemjAUTRE ;
 -- djourReq :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<='''||datebas||'B''  ) and typemj=''B'' ';
 END IF;
 ELSE
 IF not tab_compteur_dest.exists(mat_prec||'#'||code_ori_prec) THEN
 -- djourReq                                                        :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<'''||datebas||'S''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule and (d.DJOUR<'''||datebas||''' or ( d.DJOUR='''||datebas||''' and typemj<>''S''))) ';
 djourReq :=substr(lignebascule.djourFirst,1,8);
 type_mj_req:=substr(lignebascule.djourFirst,10,1);
 -- listecompteur_dest                                              :=listecompteur_dest||';'||mat_prec||'#'||code_dest_prec||';';
 tab_compteur_dest(mat_prec||'#'||code_dest_prec):='Y';
 ELSE
 --djourReq :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR||d.typemj<='''||datebas||'S''  )  and typemj=''S'' ';
 djourReq :=lignebascule.djourAUTRE;
 type_mj_req:=lignebascule.typemjAUTRE ;
 END IF;
 END IF;
 
 
 DECLARE
 CURSOR cur_cpt
 IS
 SELECT cad_compteur.*,
 rowid
 FROM cad_compteur
 WHERE TYPEMJ     =p_typebasc
 AND CODE_COMPTEUR=ligneBascule.compteur_dest
 AND DJOUR        =DATEBAS
 AND MATRICULE    =ligneBascule.matricule;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 IF code_basc_prec IS NULL OR lignebascule.code_bascule <>code_basc_prec THEN
 t_id.delete;
 T_IdBasc.delete;
 req             :=ligneBascule.REQUETES;
 if req is null then
 req:='POT1_VALEURJ=0,POT1_VALEURH=0 ;POT2_VALEURJ=0,POT2_VALEURH=0 ;POT3_VALEURJ=0,POT3_VALEURH=0 ;POT4_VALEURJ=0,POT4_VALEURH=0 ;POT5_VALEURJ=0,POT5_VALEURH=0 ;POT6_VALEURJ=0,POT6_VALEURH=0 ;POT7_VALEURJ=0,POT7_VALEURH=0 ;POT8_VALEURJ=0,POT8_VALEURH=0 ;POT9_VALEURJ=0,POT9_VALEURH=0 ;POT10_VALEURJ=0,POT10_VALEURH=0 ;POT11_VALEURJ=0,POT11_VALEURH=0 ;POT12_VALEURJ=0,POT12_VALEURH=0 ;';
 end if;
 END IF;
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 -- select max(d.djour)  into djourReq from CAD_COMPTEUR d where d.MATRICULE=lig_cpt.MATRICULE and d.CODE_COMPTEUR=lignebascule.COMPTEUR_ORI AND DJOUR<DATEBAS;
 sizeTab:=t_id.count+1;
 t_id(sizeTab).idrow:=lig_cpt.rowid;
 t_id(sizeTab).dte:=djourReq;
 t_id(sizeTab).typemj:=type_mj_req;
 sizeTab:=T_IdBasc.count+1;
 T_IdBasc(sizeTab).idrow:=lignebascule.rowid;
 
 END LOOP;
 CLOSE cur_cpt;
 code_basc_prec := lignebascule.code_bascule;
 
 END;
 END LOOP;
 CLOSE cur_Bascule;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  :=SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_UNIT_BASCULE', IDMATRIC||','|| p_matric||','|| BASCULE ||','|| DATEBAS ||','|| p_ordre ||','|| p_typebasc ,err_code||'-'||err_msg);
 raise;
 END CAD_UNIT_BASCULE;
 PROCEDURE CAD_UNIT_CALCUL(
 IDMATRIC   IN NUMBER ,
 p_MATRIC   IN VARCHAR2 ,
 DATEDEB    IN VARCHAR2 ,
 DATEFIN    IN VARCHAR2,
 AvecBacule IN VARCHAR2)
 AS
 CURSOR tabRequetes
 IS
 SELECT cptcal.CODE_COMPTEUR
 FROM CAD_CALCUL_EN_COURS_CPT cptcal
 WHERE cptcal.id =IDMATRIC
 /* AND cptcal.code_compteur IN
 (SELECT code_compteur
 FROM cad_compteur cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule=mat.matricule
 AND mat.id         =cptcal.id
 AND mat.matricule  =NVL(p_matric,mat.matricule)
 AND djour BETWEEN datedeb AND NVL(datefin,'20991231')
 ) */
 ;
 lignesRequetes tabRequetes%ROWTYPE;
 pos              NUMBER:=0;
 subs             VARCHAR2(1000);
 req              VARCHAR2(1000);
 requpdate        VARCHAR2(1000);
 cptPrec          VARCHAR2(20);
 reqpropagation   VARCHAR(4000);
 numpot           VARCHAR(2);
 listPotVariation VARCHAR(100):='';
 listPotAPropage  VARCHAR(100);
 un_index         INT;
 nbcounter        NUMBER;
 nbcounterFin     NUMBER;
 tdeb             TIMESTAMP;
 tfin             TIMESTAMP;
 debcalc          NUMBER;
 fincalc          NUMBER;
 totalcalc        NUMBER:=0;
 BEGIN
 OPEN tabRequetes;
 LOOP
 FETCH tabRequetes INTO lignesRequetes;
 EXIT
 WHEN tabRequetes%NOTFOUND ;
 --propagation
 IF cptprec IS NULL OR cptprec <>lignesRequetes.CODE_COMPTEUR THEN
 CAD_AVANCEMENT(idmatric,'Propag var du cpt '||lignesRequetes.CODE_COMPTEUR||' du '||datedeb||' au '|| datefin);
 CAD_UNIT_PROPAGATION(idmatric,p_matric,datedeb,datefin,lignesRequetes.CODE_COMPTEUR,AvecBacule);
 cptprec:=lignesRequetes.CODE_COMPTEUR;
 END IF;
 END LOOP;
 CLOSE tabRequetes;
 END CAD_UNIT_CALCUL;
 PROCEDURE CAD_CALCUL_MATRIC(
 numSeq  IN NUMBER ,
 matric  IN VARCHAR2,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 idCpt        NUMBER:=numSeq ;
 dateprec     VARCHAR2(8);
 typeBascPrec VARCHAR2(1);
 typeBasc     VARCHAR2(1);
 DATEBASC     VARCHAR2(8);
 CURSOR tabBasculesDeLaPop
 IS
 SELECT DISTINCT bpr.code_bascule,
 '' AS MATRICULE,
 bpr.DATE_THEO_BASCULE,
 ''   AS STATUT,
 NULL AS derniere_bascule,
 bpr.ordre,
 NULL AS MAJ_CONTRAT,
 bpr.type_bascule
 FROM CAD_REGLES_PREVUES_REALISEES bpr ,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE bpr.matricule=mat.matricule
 AND mat.id         =numseq
 AND bpr.date_theo_bascule BETWEEN DATEDEB AND NVL(datefin,'20991231')
 AND bpr.matricule=NVL(matric,bpr.matricule)
 ORDER BY bpr.DATE_THEO_BASCULE,
 bpr.type_bascule,
 bpr.ORDRE;
 ligneBasculesDeLaPop CAD_REGLES_PREVUES_REALISEES%ROWTYPE;
 listebascules CLOB:='';
 deb       NUMBER;
 fin       NUMBER;
 total     NUMBER:=0;
 debcalc   NUMBER;
 fincalc   NUMBER;
 totalcalc NUMBER:=0;
 listecompteur_dest CLOB:=';';
 TYPE TYP_compteur_dest is table of varchar2(1) index by varchar2(32) ;
 tab_compteur_dest TYP_compteur_dest;
 BEGIN
 CAD_AVANCEMENT(numseq,'Depart calcul');
 --CAD_DEBUG(numSeq,'');
 -- insert into CAD_CALCUL_EN_COURS_CPT (ID,CODE_COMPTEUR) select distinct idCpt as ID,COMPTEUR_DEST as CODE_COMPTEUR  from CAD_REGLES_PREVUES_REALISEES bpr , CAD_PARAM_REGLES_MAJ bdef , CAD_CALCUL_EN_COURS_MATRIC mat where bpr.matricule=mat.matricule and bpr.CODE_BASCULE=bdef.code_bascule;
 /*if numseq is null then
 DELETE
 FROM CAD_CALCUL_EN_COURS_CPT
 WHERE id=numseq;
 end if;*/
 OPEN tabBasculesDeLaPop;
 dateprec    :=datedeb;
 typebascprec:='B';
 LOOP
 FETCH tabBasculesDeLaPop INTO ligneBasculesDeLaPop;
 IF tabBasculesDeLaPop%NOTFOUND THEN
 DATEBASC:=NULL;
 typebasc:=NULL;
 ELSE
 DATEBASC:=ligneBasculesDeLaPop.DATE_THEO_BASCULE;
 typebasc:=ligneBasculesDeLaPop.type_bascule;
 END IF;
 --DBMS_OUTPUT.PUT_LINE('-BASCULE-'||' - '||NVL(DATEBASC,'*')||TO_CHAR(sysdate,'HH24:MI:SS'));
 --FIXME utiliser la procédure trace_dbms_output()
 -- si la date précédente est la même que la date de la bascule : pas de recalcul
 IF (dateprec        <>ligneBasculesDeLaPop.DATE_THEO_BASCULE OR DATEBASC IS NULL) OR (typebasc<> typebascprec OR typebasc IS NULL) THEN
 listecompteur_dest:=';';
 tab_compteur_dest.delete;
 IF listebascules  IS NOT NULL AND DATEBASC IS NOT NULL THEN
 --  CAD_UNIT_Faussebascule(idCpt,dateprec,listebascules);
 listebascules:='';
 -- On a au moins une bascule donc on calcule jusqu'au jour précédant la bascule
 -- et propagation jusqu'à la situation suivante après la bascule
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC, DATEBASC,'BASCULE');
 --  CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 
 ELSE
 IF DATEBASC IS NOT NULL THEN
 -- première bascule : calcul jusqu'au jour précédant la bascule
 -- et propagation jusqu'à la situation suivante après la bascule
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC,DATEBASC,'BASCULE');
 -- CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 ELSE
 -- pas de bascule, on calcule jusqu'à la fin
 CAD_UNIT_CALCUL(idCpt,matric,DATEPREC, datefin,'');
 --  CAD_UNIT_PROPAGATION (idCpt,matric,DATEPREC, DATEBASC,null,'BASCULE');
 END IF;
 END IF;
 END IF;
 EXIT
 WHEN tabBasculesDeLaPop%NOTFOUND ;
 --DBMS_OUTPUT.PUT_LINE('-CAD_CALCUL_MATRIC-CAD_UNIT_4-'||TO_CHAR(sysdate,'HH24:MI:SS'));
 --FIXME utiliser la procédure trace_dbms_output()
 CAD_AVANCEMENT(numseq,'Bascule '||ligneBasculesDeLaPop.CODE_BASCULE||' du '||DATEBASC);
 CAD_UNIT_BASCULE(numSeq,matric,ligneBasculesDeLaPop.CODE_BASCULE, DATEBASC,ligneBasculesDeLaPop.ordre,typebasc);
 IF dateprec         =DATEBASC THEN
 IF listebascules IS NULL OR listebascules='' THEN
 listebascules  :=''''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 ELSE
 IF (instr(listebascules,ligneBasculesDeLaPop.CODE_BASCULE)=0) THEN
 listebascules                                          := listebascules||','''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 END IF;
 END IF;
 ELSE
 IF listebascules IS NULL OR listebascules='' THEN
 listebascules  :=''''||ligneBasculesDeLaPop.CODE_BASCULE||'''';
 END IF;
 END IF;
 dateprec    := DATEBASC;
 typebascprec:=typebasc;
 END LOOP;
 CLOSE tabBasculesDeLaPop;
 END CAD_CALCUL_MATRIC;
 PROCEDURE CAD_CALCUL(
 matric  IN VARCHAR2 ,
 idrub   IN NUMBER ,
 DATEDEB IN VARCHAR2 ,
 DATEFIN IN VARCHAR2 )
 AS
 id_calc NUMBER;
 deb     NUMBER;
 fin     NUMBER;
 total   NUMBER:=0;
 BEGIN
 deb:= DBMS_UTILITY.get_time;
 BEGIN
 SELECT is_debug INTO valdebug FROM CAD_IS_DEBUG;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug:='N';
 END;
 -- TODO les delete sera fait plus tard par purge
 IF valdebug='O' THEN
 DELETE FROM CAD_TRACE_REQ WHERE id=idrub;
 END IF;
 --delete from CAD_CALCUL_EN_COURS_MATRIC  where id=idrub;
 IF matric IS NOT NULL AND idrub IS NULL THEN
 SELECT CAD_SEQ_CALCUL.nextVAL INTO id_calc FROM dual;
 --ne fonctionne qu'avec un matricule
 INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (
 id,
 matricule
 )
 VALUES
 (
 id_calc,
 matric
 );
 --CAD_DEBUG(id_calc,'');
 CAD_AVANCEMENT(id_calc,'Bascules '||datedeb);
 CAD_INIT_BASCULES( id_calc , matric , DATEDEB, DATEFIN) ;
 CAD_AVANCEMENT(id_calc,'Fin Bascules '||datedeb);
 CAD_AVANCEMENT(id_calc,'Début insert calcul cpt '||datedeb);
 INSERT
 INTO CAD_CALCUL_EN_COURS_CPT
 (
 ID,
 CODE_COMPTEUR
 )
 (SELECT DISTINCT id_calc AS ID,
 CODE_COMPTEUR        AS CODE_COMPTEUR
 FROM CAD_COMPTEUR cpt,
 CAD_CALCUL_EN_COURS_MATRIC mat
 WHERE cpt.matricule=mat.matricule
 AND mat.id         =id_calc
 ) ;
 CAD_AVANCEMENT(id_calc,'Fin insert calcul cpt '||datedeb);
 END IF;
 IF idrub IS NOT NULL THEN
 id_calc:=idrub;
 --     insert into CAD_CALCUL_EN_COURS_MATRIC(id,matricule) select distinct id,matricule from CAD_CALCUL_EN_COURS_RUB  where id=idrub and matricule not in (select distinct matricule from CAD_CALCUL_EN_COURS_MATRIC where id=idrub);
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Avant CAD_CALCUL_MATRIC : '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 CAD_CALCUL_MATRIC(id_calc,matric,DATEDEB,DATEFIN);
 EXCEPTION
 WHEN OTHERS THEN
 raise_application_error(-20000, 'Problème(s) durant le recalcul des compteurs');
 END CAD_CALCUL;
 PROCEDURE CAD_CONTROLE_SOLDE
 (
 idrub  IN VARCHAR2,
 matric IN VARCHAR2
 )
 AS
 dtdeb VARCHAR2
 (
 8
 )
 ;
 dtfin     VARCHAR2(8);
 solde     NUMBER;
 unite     NUMBER;
 nbBas     NUMBER;
 variation NUMBER;
 TYPE TYP_RUB
 IS
 TABLE OF cad_calcul_en_cours_rub.rub_val_jour%type ;
 Tabrub TYP_RUB;
 BEGIN
 -- cas sans bascule
 SELECT MIN(date_jour)
 INTO dtdeb
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     =idrub
 AND matricule=matric;
 SELECT MAX(date_jour)
 INTO dtfin
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     =idrub
 AND matricule=matric;
 SELECT COUNT(*)
 INTO nbBas
 FROM CAD_MATRIC_DATEVALID
 WHERE DATE_FIN_PER BETWEEN dtdeb AND dtfin
 AND matricule=matric;
 IF nbBas     =0 THEN
 SELECT rub_val_jour BULK COLLECT
 INTO Tabrub
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id     = idrub
 AND matricule=matric
 AND date_jour=dtdeb
 ORDER BY rub_val_jour;
 FOR i IN Tabrub.first..Tabrub.last
 LOOP
 solde   :=CAD_SOLDE(MATRIC,DTDEB,Tabrub(i));
 unite   := cad_unite(matric,DTDEB,Tabrub(i));
 IF unite = 'H' THEN
 SELECT SUM(heure)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'C' THEN
 SELECT SUM(calend)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'U' THEN
 SELECT SUM(ouvre)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'O' THEN
 SELECT SUM(oeuvre)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 elsif unite       = 'S' THEN
 SELECT SUM(ouvrable)
 INTO variation
 FROM CAD_CALCUL_EN_COURS_RUB
 WHERE id        =idrub
 AND matric      =matricule
 AND rub_val_jour=tabrub(i);
 END IF;
 solde  :=solde - variation;
 IF solde<0 THEN
 raise_application_error(-20000, 'CAD_0001');
 END IF ;
 END LOOP ;
 ELSE
 CAD_MAJ_VALEUR_LISTE_RUBJOUR(idrub,dtdeb,NULL,'false','true');
 ROLLBACK;
 END IF;
 END CAD_CONTROLE_SOLDE;
 PROCEDURE CAD_IMPORT(
 p_numseq      IN NUMBER,
 nom_Fichier   IN VARCHAR2,
 avec_Rollback IN VARCHAR2)
 AS
 CURSOR tab
 IS
 SELECT * FROM CAD_TABLE_IMPORT ORDER BY donnees;
 ligne CAD_TABLE_IMPORT%ROWTYPE;
 cpt CAD_COMPTEUR%ROWTYPE;
 TYPE tableau
 IS
 TABLE OF VARCHAR(50);
 tabDonnees tableau :=tableau();
 pos          NUMBER;
 indice       NUMBER;
 subs         VARCHAR(100);
 datemin      VARCHAR(10);
 requete      VARCHAR(4000);
 updatePots   VARCHAR(1000);
 insertCol    VARCHAR(1000);
 insertValue  VARCHAR(1000);
 ligneEnCours VARCHAR(1000);
 numligne     NUMBER;
 numseq       NUMBER;
 newnumseq    number;
 TYPE liste_pot_type
 IS
 TABLE OF NUMBER INDEX BY binary_integer ;
 TYPE strut_pot_type
 IS
 TABLE OF liste_pot_type INDEX BY VARCHAR2(5);
 map_strut_pot strut_pot_type;
 BEGIN
 IF p_numseq IS NULL THEN
 SELECT CAD_SEQ_CALCUL.nextval INTO numseq FROM dual;
 ELSE
 numseq:=p_numseq;
 END IF;
 numligne:=0;
 OPEN tab;
 LOOP
 FETCH tab
 INTO ligne;
 EXIT
 WHEN tab%NOTFOUND ;
 numligne    :=numligne+1;
 ligneEnCours:=ligne.donnees;
 -- Création du tableau de donnees
 indice :=0;
 -- Suppression des espaces
 ligne.donnees:=REPLACE(ligne.donnees,' ','');
 BEGIN
 WHILE LENGTH(ligne.donnees) >0
 LOOP
 indice               :=indice+1;
 pos                  :=instr(ligne.donnees,';');
 IF (pos               >0) THEN
 subs               :=SUBSTR(ligne.donnees,0,pos);
 ligne.donnees      :=SUBSTR(ligne.donnees,LENGTH(subs)+1);
 subs               :=REPLACE(subs,';','');
 IF tabDonnees.last IS NULL OR tabDonnees.last<=indice THEN
 tabDonnees.extend;
 END IF;
 tabDonnees(indice):=subs;
 ELSE
 IF tabDonnees.last IS NULL OR tabDonnees.last<=indice THEN
 tabDonnees.extend;
 END IF;
 tabDonnees(indice):=ligne.donnees;
 ligne.donnees     :='';
 END IF;
 END LOOP;
 IF tabdonnees(1)='1' THEN
 IF datemin   IS NULL OR datemin>tabDonnees(4) THEN
 datemin    :=tabDonnees(4);
 END IF;
 -- si rollback on copie les compteur dans la table temporaire
 IF avec_rollback='true' THEN
 merge INTO CAD_COMPTEUR_FOR_ROLL a USING
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE MATRICULE =tabDonnees(2)
 AND DJOUR      >=tabDonnees(4)
 ) b ON (a.id    =numseq AND a.matricule=b.matricule AND a.code_compteur=b.code_compteur AND a.djour=b.djour AND (a.typemj=b.typemj OR (a.typeMj='M' AND b.typeMj='N') OR (b.typeMj='M' AND a.typeMj='N') ))
 WHEN NOT matched THEN
 INSERT
 (
 a.ID,
 a.MATRICULE,
 a.CODE_COMPTEUR,
 a.DJOUR,
 a.TYPEMJ,
 a.DATE_MAJ,
 a.POT1_VALEURJ,
 a.POT1_VALEURH,
 a.POT1_FJ,
 a.POT1_FH,
 a.POT2_VALEURJ,
 a.POT2_VALEURH,
 a.POT2_FJ,
 a.POT2_FH,
 a.POT3_VALEURJ,
 a.POT3_VALEURH ,
 a.POT3_FJ,
 a.POT3_FH,
 a.POT4_VALEURJ,
 a.POT4_VALEURH,
 a.POT4_FJ,
 a.POT4_FH,
 a.POT5_VALEURJ,
 a.POT5_VALEURH,
 a.POT5_FJ,
 a.POT5_FH,
 a.POT6_VALEURJ,
 a.POT6_VALEURH,
 a.POT6_FJ,
 a.POT6_FH,
 a.POT7_VALEURJ,
 a.POT7_VALEURH,
 a.POT7_FJ ,
 a.POT7_FH,
 a.POT8_VALEURJ,
 a.POT8_VALEURH,
 a.POT8_FJ,
 a.POT8_FH,
 a.POT9_VALEURJ,
 a.POT9_VALEURH,
 a.POT9_FJ,
 a.POT9_FH,
 a.POT10_VALEURJ,
 a.POT10_VALEURH,
 a.POT10_FJ,
 a.POT10_FH,
 a.POT11_VALEURJ,
 a.POT11_VALEURH,
 a.POT11_FJ ,
 a.POT11_FH,
 a.POT12_VALEURJ,
 a.POT12_VALEURH,
 a.POT12_FJ,
 a.POT12_FH,
 a.POTV1_VALEURJ,
 a.POTV1_VALEURH,
 a.POTV2_VALEURJ,
 a.POTV2_VALEURH,
 a.POTV3_VALEURJ,
 a.POTV3_VALEURH,
 a.POTV4_VALEURJ,
 a.POTV4_VALEURH,
 a.POTV5_VALEURJ ,
 a.POTV5_VALEURH,
 a.POTV6_VALEURJ,
 a.POTV6_VALEURH
 )
 VALUES
 (
 numseq,
 b.MATRICULE,
 b.CODE_COMPTEUR,
 b.DJOUR,
 b.TYPEMJ,
 b.DATE_MAJ,
 b.POT1_VALEURJ,
 b.POT1_VALEURH,
 b.POT1_FJ,
 b.POT1_FH,
 b.POT2_VALEURJ,
 b.POT2_VALEURH,
 b.POT2_FJ,
 b.POT2_FH,
 b.POT3_VALEURJ,
 b.POT3_VALEURH ,
 b.POT3_FJ,
 b.POT3_FH,
 b.POT4_VALEURJ,
 b.POT4_VALEURH,
 b.POT4_FJ,
 b.POT4_FH,
 b.POT5_VALEURJ,
 b.POT5_VALEURH,
 b.POT5_FJ,
 b.POT5_FH,
 b.POT6_VALEURJ,
 b.POT6_VALEURH,
 b.POT6_FJ,
 b.POT6_FH,
 b.POT7_VALEURJ,
 b.POT7_VALEURH,
 b.POT7_FJ ,
 b.POT7_FH,
 b.POT8_VALEURJ,
 b.POT8_VALEURH,
 b.POT8_FJ,
 b.POT8_FH,
 b.POT9_VALEURJ,
 b.POT9_VALEURH,
 b.POT9_FJ,
 b.POT9_FH,
 b.POT10_VALEURJ,
 b.POT10_VALEURH,
 b.POT10_FJ,
 b.POT10_FH,
 b.POT11_VALEURJ,
 b.POT11_VALEURH,
 b.POT11_FJ ,
 b.POT11_FH,
 b.POT12_VALEURJ,
 b.POT12_VALEURH,
 b.POT12_FJ,
 b.POT12_FH,
 b.POTV1_VALEURJ,
 b.POTV1_VALEURH,
 b.POTV2_VALEURJ,
 b.POTV2_VALEURH,
 b.POTV3_VALEURJ,
 b.POTV3_VALEURH,
 b.POTV4_VALEURJ,
 b.POTV4_VALEURH,
 b.POTV5_VALEURJ ,
 b.POTV5_VALEURH,
 b.POTV6_VALEURJ,
 b.POTV6_VALEURH
 );
 END IF;
 merge INTO CAD_COMPTEUR_MIN_FOR_ROLL a USING
 (SELECT numseq    AS id,
 tabDonnees(2) AS matricule,
 tabDonnees(4) AS dte
 FROM dual
 )
 b ON (a.id=b.id AND a.matricule=b.matricule)
 WHEN matched THEN
 UPDATE SET a.date_min=b.dte WHERE b.dte<a.date_min WHEN NOT matched THEN
 INSERT
 (a.id,a.matricule,a.date_min
 ) VALUES
 (b.id,b.matricule,b.dte
 );
 
 -- passage de tous les M en N
 UPDATE CAD_COMPTEUR
 SET typemj       ='N'
 WHERE typemj     ='M'
 AND code_compteur=tabDonnees(3)
 AND MATRICULE    =tabDonnees(2)
 AND DJOUR       >=tabDonnees(4);
 -- mise du matricule dans les matricules à retraiter
 merge INTO CAD_CALCUL_EN_COURS_MATRIC a USING
 (SELECT tabDonnees(2) AS matricule, numseq AS id FROM dual
 ) b ON (a.id=b.id AND a.matricule=b.matricule )
 WHEN NOT MATCHED THEN
 INSERT
 ( a.ID, a.MATRICULE
 ) VALUES
 ( numseq, b.matricule
 );
 ELSIF tabdonnees(1)='2' THEN
 IF(NOT map_strut_pot.EXISTS(tabdonnees(3)) ) THEN
 DECLARE
 CURSOR tabpot
 IS
 SELECT *
 FROM CAD_PARAM_STRUCT_POT
 WHERE maj_batch  ='O'
 AND code_compteur=tabdonnees(3)
 ORDER BY num_pot;
 ligne_struct CAD_PARAM_STRUCT_POT%ROWTYPE;
 BEGIN
 OPEN tabpot;
 LOOP
 FETCH tabpot INTO ligne_struct;
 EXIT
 WHEN tabpot%NOTFOUND ;
 map_strut_pot(tabdonnees(3))(ligne_struct.num_pot):=ligne_struct.num_pot;
 END LOOP;
 CLOSE tabpot;
 END;
 END IF;
 updatePots :='';
 insertcol  :='';
 insertvalue:='';
 FOR i IN 1.. map_strut_pot(tabdonnees(3)).last
 LOOP
 updatePots :=updatePots|| ' , a.POT'||i||'_VALEURJ='|| tabdonnees(7+(i-1)*4) ||' , a.POT'||i||'_VALEURH='|| tabdonnees(9+(i-1)*4);
 insertcol  :=insertcol||' , a.POT'||i||'_VALEURJ,a.POT'||i||'_VALEURH';
 insertvalue:=insertvalue||' ,'||tabdonnees(7+(i-1)*4)||' , '||tabdonnees(9+(i-1)*4);
 END LOOP;
 requete:='merge into (select * from cad_compteur where typeMJ in (''M'',''N'') and matricule='''||tabdonnees(2)||''' and code_compteur='''||tabdonnees(3)||''' and djour= '''||tabdonnees(4)||''' ) a using (select '''||tabdonnees(2)||''' as matricule, '''||tabdonnees(3)||''' as code_compteur, '''||tabdonnees(4)||''' as DJOUR from dual ) b on ( a.code_compteur=b.code_compteur and a.matricule =b.matricule and a.djour=b.djour  )';
 requete:=requete||' when matched then update set a.typeMJ=''M'' , a.date_maj=sysdate ';
 requete:=requete||updatePots;
 requete:=requete||' when not matched then insert (a.matricule,a.code_compteur,a.djour,a.typemj,a.date_maj '||insertcol||') ' ;
 requete:=requete||' values (b.matricule,b.code_compteur,b.djour,''M'',sysdate '||insertvalue||')';
 EXECUTE_IMMEDIATE_STRING (requete,0);
 END IF;
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(numseq ,'IMP'||numligne,numseq||','|| nom_Fichier||','||avec_Rollback||','||tabdonnees(1)||','||tabdonnees(2)||','||tabdonnees(3)||','||tabdonnees(4) ,err_code||'-'||err_msg);
 INSERT
 INTO cad_table_import_err VALUES
 (
 nom_Fichier,
 'Erreur import de la ligne : '
 ||ligneEnCours
 );
 END;
 IF numligne mod 1000 =0 THEN
 COMMIT;
 END IF;
 END LOOP;
 CLOSE tab;
 -- lance calcul
 -- CAD_CALCUL(NULL,numseq, datemin,NULL);
 
 INSERT
 INTO CAD_CALCUL_EN_COURS_IMPORT
 (SELECT * FROM cad_calcul_en_cours_matric WHERE id=numseq
 );
 COMMIT;
 for dte in (select distinct substr(date_min,1,6) as mois from CAD_COMPTEUR_MIN_FOR_ROLL where id=numseq )
 loop
 
 select cad_seq_calcul.nextval into newnumseq from dual;
 INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (SELECT newnumseq,matricule FROM CAD_COMPTEUR_MIN_FOR_ROLL WHERE id=numseq and substr(date_min,1,6)=dte.mois
 );
 CAD_MAJ_VALEUR_LISTE_RUBJOUR (newnumseq, dte.mois||'01', NULL,'true', 'true');
 COMMIT;
 end loop;
 
 -- CAD_MAJ_VALEUR_LISTE_RUBJOUR (numseq, datemin, NULL,'true', 'true');
 
 /* INSERT
 INTO CAD_CALCUL_EN_COURS_MATRIC
 (SELECT * FROM cad_calcul_en_cours_IMPORT WHERE id=numseq
 );*/
 --  COMMIT;
 DELETE FROM CAD_TABLE_IMPORT;
 DELETE FROM cad_calcul_en_cours_IMPORT WHERE id=numseq;
 COMMIT;
 -- lance calcul
 --  raise_application_error(-20000, 'Problème(s) durant l''import');
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  := SQLERRM;
 CAD_ERREUR(numseq ,'CAD_IMPORT'||': FIN',numseq||','|| nom_Fichier||','||avec_Rollback ,err_code||'-'||err_msg);
 raise;
 END CAD_IMPORT;
 FUNCTION              CAD_MAJ_RUB(
 dtdeb               IN VARCHAR2,
 dtfin               IN VARCHAR2,
 ispreviouscad       IN VARCHAR2,
 forcage             IN VARCHAR2,
 id_tab_mat          IN NUMBER)
 RETURN NUMBER
 IS
 nbmat               NUMBER:=0;
 dfin                VARCHAR2(8);
 dateprec            VARCHAR2(8);
 divide              NUMBER:=300;
 nbrub               NUMBER:=0;
 rubrique            BOOLEAN;
 new_id              NUMBER;
 
 BEGIN
 cad_avancement_info(id_tab_mat, id_tab_mat || ' commencé');
 SELECT COUNT (*) INTO nbmat FROM cad_calcul_en_cours_matric WHERE id = id_tab_mat;
 INSERT INTO cad_calcul_en_cours_cpt(id, code_compteur)
 (SELECT DISTINCT id_tab_mat        AS id,
 code_compteur    AS code_compteur
 FROM cad_compteur                cpt,
 cad_calcul_en_cours_matric  cm
 WHERE cpt.matricule    = cm.matricule
 AND  cm.id            = id_tab_mat
 );
 --COMMIT;
 cad_avancement(id_tab_mat, 'Bascules ' || dtdeb);
 cad_init_bascules(id_tab_mat, NULL , dtdeb, dtfin);
 cad_avancement(id_tab_mat, 'Fin Bascules ' || dtdeb);
 
 IF (dtfin IS NOT NULL) THEN
 SELECT COUNT(*) INTO nbrub
 FROM tge_incidents_paie                                           ip,
 cad_calcul_en_cours_matric                                   cm,
 dic_adm_contrat                                              dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                         s ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt) lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND cm.matricule                           = dac.matric
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet                         <= TO_DATE(dtfin, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'));
 ELSE
 SELECT COUNT(*) INTO nbrub
 FROM tge_incidents_paie                                           ip,
 cad_calcul_en_cours_matric                                   cm,
 dic_adm_contrat                                              dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                         s ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt) lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND cm.matricule                           = dac.matric
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'));
 END IF;
 
 IF nbrub > 0 OR ispreviouscad = 'true' THEN
 DECLARE
 CURSOR cur_rub
 IS
 SELECT
 dac.matric          AS matricule,
 ip.code_ip          AS rub_val_jour,
 ip.jour_heures      AS valeur,
 TO_CHAR(ip.date_effet, 'yyyymmdd')       AS date_jour,
 ip.jour_calendaire  AS val_calendaire,
 ip.jour_ouvre       AS val_ouvre,
 ip.jour_ouvrable    AS val_ouvrable,
 ip.jour_oeuvre      AS val_oeuvre
 FROM tge_incidents_paie                                             ip,
 cad_calcul_en_cours_matric                                     cm,
 dic_adm_contrat                                                 dac,
 -- MONOP DIT 50818
 dic_adm_contrat_situ                                            s  ,
 (SELECT DISTINCT (rub_val_jour) FROM cad_param_lien_rub_cpt)    lien
 WHERE cm.id                                 = id_tab_mat
 AND dac.NUMPAC                             = s.NUMPAC
 AND dac.PACMAT                             = s.PACMAT
 AND dac.NUMCNT                             = s.NUMCNT
 AND cm.matricule                           = dac.matric
 AND ip.code_ip                             = lien.rub_val_jour
 AND ip.paiezad                             = s.paiezad
 AND ip.idpacmat                            = dac.idpacmat
 AND ip.date_effet                         >= TO_DATE(dtdeb, 'yyyymmdd')
 AND ip.date_effet BETWEEN dac.dsdcn AND NVL(dac.dsfcn, TO_DATE('20991231', 'yyyymmdd'))
 ORDER BY cm.matricule, ip.date_effet;
 ligne_rub cur_rub%rowtype;
 BEGIN
 cad_mise_a_0_var(id_tab_mat, dtdeb);
 SELECT cad_seq_calcul.nextval INTO new_id FROM dual;
 rubrique := FALSE;
 
 OPEN cur_rub;
 LOOP
 FETCH cur_rub INTO ligne_rub;
 EXIT WHEN cur_rub%notfound;
 IF dateprec IS NULL OR (ligne_rub.date_jour < dateprec) THEN
 dateprec := dtdeb;
 END IF;
 MERGE INTO cad_calcul_en_cours_matric A USING (SELECT new_id AS new_id,ligne_rub.matricule AS matric FROM dual) b ON (A.ID = b.new_id AND A.matricule = b.matric)
 WHEN NOT MATCHED THEN
 INSERT (A.ID, A.matricule) VALUES (b.new_id, b.matric);
 
 rubrique := TRUE;
 IF ligne_rub.rub_val_jour != '_VIDE_' THEN
 cad_avancement(id_tab_mat, 'Début Valorisation rubrique : ' || ligne_rub.rub_val_jour || ' ,matric :' || ligne_rub.matricule || ' ,date:' || ligne_rub.date_jour);
 IF nbmat = 1 THEN
 cad_maj_valeur_rubjour(id_tab_mat, ligne_rub.matricule, dateprec, ligne_rub.date_jour, NVL(ligne_rub.valeur, 0), NVL(ligne_rub.val_calendaire, 0), NVL(ligne_rub.val_ouvrable, 0), NVL(ligne_rub.val_oeuvre, 0), NVL(ligne_rub.val_ouvre, 0), NVL(ligne_rub.rub_val_jour, 0), forcage);
 ELSE
 BEGIN
 cad_maj_valeur_rubjour(id_tab_mat, ligne_rub.matricule, dateprec, ligne_rub.date_jour, NVL(ligne_rub.valeur, 0), NVL(ligne_rub.val_calendaire, 0), NVL(ligne_rub.val_ouvrable, 0), NVL(ligne_rub.val_oeuvre,0), NVL(ligne_rub.val_ouvre, 0), NVL(ligne_rub.rub_val_jour, 0), forcage);
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 cad_erreur(id_tab_mat, 'CAD_MAJ_VALEUR_LISTE', ligne_rub.matricule || ',' || ligne_rub.rub_val_jour || ',' || dateprec || ',' || ligne_rub.date_jour, err_code || '-' || err_msg);
 CONTINUE;
 END;
 END IF;
 cad_avancement(id_tab_mat, 'Fin Valorisation rubrique : ' || ligne_rub.rub_val_jour || ' ,matric :' || ligne_rub.matricule || ' ,date:' || ligne_rub.date_jour);
 END IF;
 dateprec := ligne_rub.date_jour;
 END LOOP;
 CLOSE cur_rub;
 
 IF rubrique THEN
 cad_avancement(new_id, 'Bascules ' || dtdeb);
 cad_init_bascules(new_id, NULL, dtdeb, NULL);
 cad_avancement(new_id, 'Fin Bascules ' || dtdeb);
 INSERT INTO cad_calcul_en_cours_cpt(id, code_compteur)
 (SELECT DISTINCT new_id AS id, code_compteur AS code_compteur
 FROM cad_compteur cpt, cad_calcul_en_cours_matric mat
 WHERE cpt.matricule = mat.matricule AND mat.id = new_id
 );
 cad_calcul(NULL, new_id, dtdeb, NULL);
 DELETE FROM cad_calcul_en_cours_rub WHERE id = new_id;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = new_id;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = new_id;
 END IF;
 
 DELETE FROM cad_calcul_en_cours_rub WHERE id = id_tab_mat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = id_tab_mat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = id_tab_mat;
 
 END;
 END IF;
 cad_avancement_info(id_tab_mat, id_tab_mat || ' terminé');
 IF nbmat > divide THEN
 COMMIT;
 END IF;
 RETURN 0; /* PAS D'ERREUR */
 
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 cad_erreur(id_tab_mat, 'CAD_MAJ_RUB', dtdeb || ',' || dtfin || ',' || ispreviouscad || ',' || forcage || ',' || id_tab_mat, err_code || '-' || err_msg);
 RAISE;
 
 END CAD_MAJ_RUB;
 PROCEDURE             CAD_MAJ_VALEUR_LISTE_RUBJOUR(
 idmat               IN NUMBER,
 dtdeb               IN VARCHAR2,
 dtfin               IN VARCHAR2,
 forcage             IN VARCHAR2,
 ispreviouscad       IN VARCHAR2)
 IS
 reqpropagation      VARCHAR2(4000);
 matricprec          VARCHAR2(32);
 nbmat               NUMBER:=0;
 TYPE  typ_tab_id    IS TABLE OF NUMBER;
 tab_id typ_tab_id   :=typ_tab_id();
 new_id              NUMBER;
 nb_newid            NUMBER;
 divide              NUMBER:=300;
 retour              NUMBER;
 cn                  NUMBER;
 BEGIN
 --dbms_profiler.start_profiler;
 BEGIN
 SELECT is_debug INTO valdebug FROM cad_is_debug;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug := 'N';
 END;
 
 -- TAILLE DU TAB_ID A 1/300 IEMES DE LA POPULATION
 SELECT COUNT (*) INTO nbmat FROM cad_calcul_en_cours_matric WHERE id = idmat;
 nb_newid := ROUND(nbmat / divide) + 1;
 tab_id.EXTEND(nb_newid);
 
 -- DECOUPE LA POPULATION PAR TRANCHE DE 1/300 IEMES
 cn := 1;
 WHILE (cn <= nb_newid) --FOR i IN 1..nb_newid
 LOOP
 SELECT cad_seq_calcul.nextval INTO new_id FROM dual;
 tab_id(cn) := new_id;
 INSERT INTO cad_calcul_en_cours_matric
 (SELECT new_id, matricule
 FROM (SELECT matricule, ROWNUM AS rown FROM cad_calcul_en_cours_matric WHERE id = idmat)
 WHERE rown BETWEEN ((cn - 1) * divide) AND cn * divide
 );
 --COMMIT
 cad_avancement_info(new_id, 'Création ID: ' || new_id);
 cn := cn + 1;
 END LOOP;
 
 -- TRAITEMENT POUR CHAQUE TRANCHE
 FOR i IN tab_id.FIRST..tab_id.LAST
 LOOP
 retour := cad_maj_rub(dtdeb, dtfin, ispreviouscad, forcage, tab_id(i));
 END LOOP;
 --dbms_profiler.flush_data;
 --dbms_profiler.stop_profiler;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 
 EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg := sqlerrm;
 IF SQLCODE != '-20000' THEN
 DELETE FROM cad_calcul_en_cours_rub WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 raise_application_error(-20000, 'Problème(s) durant le recalcul des compteurs');
 ELSE
 DELETE FROM cad_calcul_en_cours_rub WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_cpt WHERE id = idmat;
 DELETE FROM cad_calcul_en_cours_matric WHERE id = idmat;
 RAISE;
 END IF;
 END CAD_MAJ_VALEUR_LISTE_RUBJOUR;
 PROCEDURE CAD_ROLLBACK_IMPORT(
 numseq IN NUMBER)
 AS
 BEGIN
 DELETE
 FROM cad_compteur a
 WHERE matricule IN
 (SELECT CAD_COMPTEUR_MIN_FOR_ROLL.matricule
 FROM CAD_COMPTEUR_MIN_FOR_ROLL
 WHERE id=numseq
 )
 AND djour>=
 (SELECT date_min
 FROM CAD_COMPTEUR_MIN_FOR_ROLL b
 WHERE id       =numseq
 AND a.matricule=b.matricule
 );
 INSERT
 INTO CAD_COMPTEUR
 (SELECT a.MATRICULE,
 a.CODE_COMPTEUR,
 a.DJOUR,
 a.TYPEMJ,
 a.DATE_MAJ,
 a.POT1_VALEURJ,
 a.POT1_VALEURH,
 a.POT1_FJ,
 a.POT1_FH,
 a.POT2_VALEURJ,
 a.POT2_VALEURH,
 a.POT2_FJ,
 a.POT2_FH,
 a.POT3_VALEURJ,
 a.POT3_VALEURH ,
 a.POT3_FJ,
 a.POT3_FH,
 a.POT4_VALEURJ,
 a.POT4_VALEURH,
 a.POT4_FJ,
 a.POT4_FH,
 a.POT5_VALEURJ,
 a.POT5_VALEURH,
 a.POT5_FJ,
 a.POT5_FH,
 a.POT6_VALEURJ,
 a.POT6_VALEURH,
 a.POT6_FJ,
 a.POT6_FH,
 a.POT7_VALEURJ,
 a.POT7_VALEURH,
 a.POT7_FJ ,
 a.POT7_FH,
 a.POT8_VALEURJ,
 a.POT8_VALEURH,
 a.POT8_FJ,
 a.POT8_FH,
 a.POT9_VALEURJ,
 a.POT9_VALEURH,
 a.POT9_FJ,
 a.POT9_FH,
 a.POT10_VALEURJ,
 a.POT10_VALEURH,
 a.POT10_FJ,
 a.POT10_FH,
 a.POT11_VALEURJ,
 a.POT11_VALEURH,
 a.POT11_FJ ,
 a.POT11_FH,
 a.POT12_VALEURJ,
 a.POT12_VALEURH,
 a.POT12_FJ,
 a.POT12_FH,
 a.POTV1_VALEURJ,
 a.POTV1_VALEURH,
 a.POTV2_VALEURJ,
 a.POTV2_VALEURH,
 a.POTV3_VALEURJ,
 a.POTV3_VALEURH,
 a.POTV4_VALEURJ,
 a.POTV4_VALEURH,
 a.POTV5_VALEURJ ,
 a.POTV5_VALEURH,
 a.POTV6_VALEURJ,
 a.POTV6_VALEURH
 FROM cad_compteur_for_roll a
 WHERE id=numseq
 );
 DELETE FROM CAD_COMPTEUR_MIN_FOR_ROLL WHERE id =numseq;
 DELETE FROM cad_compteur_for_roll WHERE id=numseq;
 END CAD_ROLLBACK_IMPORT;
 FUNCTION cad_calcul_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 dte           VARCHAR2(12);
 TYPE tableau IS VARRAY(4) OF VARCHAR2(8);
 tab tableau :=tableau();
 pos        NUMBER;
 indice     NUMBER;
 subs       VARCHAR2(10);
 dteCalc    VARCHAR2(8);
 dtecompare DATE;
 unite      VARCHAR2(1);
 jour       VARCHAR2(2);
 mois       VARCHAR2(3);
 annee      VARCHAR2(4);
 BEGIN
 IF DATE_RELATIVE      IS NOT NULL THEN
 IF date_comparaison IS NULL THEN
 dtecompare        :=sysdate;
 ELSE
 dtecompare:=to_date(date_comparaison,'yyyymmdd');
 END IF;
 dte          :=DATE_RELATIVE;
 IF LENGTH(dte)<8 THEN
 tab.extend;
 tab(1):=dte;
 ELSE
 tab.extend;
 tab(1):=SUBSTR(dte,0,4);
 tab.extend;
 tab(2):=SUBSTR(dte,5);
 tab(2):=SUBSTR( tab(2),0,LENGTH( tab(2))-2);
 tab.extend;
 tab(3):=SUBSTR(dte,LENGTH(dte)-1);
 END IF;
 IF tab.last =3 THEN
 IF tab(3) ='00' THEN
 jour   :=TO_CHAR(dtecompare ,'dd');
 elsif SUBSTR( tab(3),1,1) IN ('L','M','W','J','V','S','D') THEN
 -- on prend le jour minimum possible pour la semaine puis on affinera
 IF SUBSTR( tab(3),2,1)   ='1' THEN
 jour                  :='08';
 elsif SUBSTR( tab(3),2,1)='2' THEN
 jour                  :='15';
 elsif SUBSTR( tab(3),2,1)='3' THEN
 jour                  :='22';
 elsif SUBSTR( tab(3),2,1)='4' THEN
 jour                  :='29';
 END IF;
 ELSE
 jour:=tab(3);
 END IF;
 IF tab(2)                     ='00' THEN
 mois                       :=TO_CHAR(dtecompare ,'mm');
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,-1) ,'mm');
 ELSE
 mois:=TO_CHAR(dtecompare,'mm');
 END IF;
 elsif tab(2) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))-1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 elsif tab(2) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'dd')>=jour THEN
 mois                      :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 ELSE
 mois:=tab(2);
 END IF;
 IF tab(1)                       ='0000' THEN
 annee                        := TO_CHAR(dtecompare ,'yyyy');
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,-12) ,'yyyy');
 ELSE
 annee:= TO_CHAR(dtecompare ,'yyyy');
 END IF;
 elsif tab(1) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 END IF;
 elsif tab(1) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')>=mois||jour THEN
 annee                       := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 END IF;
 ELSE
 annee:=tab(1);
 END IF;
 IF jour='32' THEN
 jour:=TO_CHAR(last_day(to_date(annee||mois||'01','yyyymmdd')) ,'dd');
 END IF;
 IF SUBSTR( tab(3),0,1) IN ('L','M','W','J','V','S','D') THEN
 jour                         :=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),1,1),SUBSTR(tab(3),2,1) ,annee,mois );
 IF tab(2)                     ='00' THEN
 mois                       :=TO_CHAR(dtecompare ,'mm');
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,-1) ,'mm');
 ELSE
 mois:=TO_CHAR(dtecompare,'mm');
 END IF;
 elsif tab(2) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'dd')<jour THEN
 mois                     :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))-1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 elsif tab(2) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'dd')>=jour THEN
 mois                      :=TO_CHAR(add_Months(dtecompare,to_number(tab(2))+1) ,'mm');
 ELSE
 mois:=TO_CHAR(add_Months(dtecompare,to_number(tab(2))) ,'mm');
 END IF;
 ELSE
 mois:=tab(2);
 END IF;
 jour                           :=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),0,1),SUBSTR(tab(3),2,1) ,annee,mois );
 IF tab(1)                       ='0000' THEN
 annee                        := TO_CHAR(dtecompare ,'yyyy');
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,-12) ,'yyyy');
 ELSE
 annee:= TO_CHAR(dtecompare ,'yyyy');
 END IF;
 elsif tab(1) LIKE '+%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')<mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 END IF;
 elsif tab(1) LIKE '-%' THEN
 IF TO_CHAR(dtecompare ,'mmdd')>mois||jour THEN
 annee                      := TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1)))) ,'yyyy');
 ELSE
 annee:= TO_CHAR(add_Months(dtecompare,12*(to_number(tab(1))-1)) ,'yyyy');
 END IF;
 ELSE
 annee:=tab(1);
 END IF;
 jour:=CAD_CALCUL_JOUR_SEMAINE(SUBSTR( tab(3),0,1),SUBSTR(tab(3),2,1) ,annee,mois );
 END IF;
 dteCalc:=annee||mois||jour;
 ELSE
 IF tab(1) LIKE '+%' OR tab(1) LIKE '-%' THEN
 unite     := SUBSTR(tab(1), LENGTH(tab(1)));
 tab(1)    :=REPLACE(tab(1),unite,'');
 IF unite   ='A' THEN
 dteCalc :=TO_CHAR(add_Months(dtecompare,12*to_number(tab(1))) -to_number(SUBSTR(tab(1),1,1)||'1'),'yyyymmdd');
 elsif unite='M' THEN
 dteCalc :=TO_CHAR(add_Months(dtecompare,to_number(tab(1))) -to_number(SUBSTR(tab(1),1,1)||'1'),'yyyymmdd');
 elsif unite='J' THEN
 dteCalc :=TO_CHAR(dtecompare+to_number(tab(1)) ,'yyyymmdd');
 END IF;
 END IF;
 END IF;
 END IF;
 RETURN dteCalc;
 END cad_calcul_date_relative;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_AV(
 DATE_RELATIVE     IN VARCHAR2,
 DATE_COMPARAISON  IN VARCHAR2,
 DATE_VALIDITE_REL IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 ANNEE_RESOLU  VARCHAR2(10);
 dtevalid      DATE;
 var_annee     VARCHAR2(10);
 reste         VARCHAR2(10);
 DATE_VALIDITE VARCHAR2(8);
 BEGIN
 DATE_VALIDITE                     :=CAD_CALCUL_DATE_RELATIVE(DATE_VALIDITE_REL,DATE_COMPARAISON );
 dtevalid                          :=to_date(DATE_VALIDITE,'yyyymmdd');
 IF instr(upper(DATE_RELATIVE),'AV')>0 THEN
 var_annee                       :=SUBSTR(DATE_RELATIVE,3,2);
 reste                           :=SUBSTR(DATE_RELATIVE,5);
 IF var_annee                     ='00' THEN
 ANNEE_RESOLU                  := TO_CHAR(dtevalid ,'yyyy');
 elsif var_annee LIKE '+%' THEN
 ANNEE_RESOLU:= TO_CHAR(add_Months(dtevalid,12*(to_number(var_annee))) ,'yyyy');
 elsif var_annee LIKE '-%' THEN
 ANNEE_RESOLU:= TO_CHAR(add_Months(dtevalid,12*(to_number(var_annee))) ,'yyyy');
 ELSE
 ANNEE_RESOLU:=TO_CHAR(dtevalid ,'yyyy');
 END IF;
 ANNEE_RESOLU:=ANNEE_RESOLU||reste;
 ELSE
 ANNEE_RESOLU:=DATE_RELATIVE;
 END IF;
 RETURN CAD_CALCUL_DATE_RELATIVE(ANNEE_RESOLU,DATE_COMPARAISON );
 END CAD_CALCUL_DATE_RELATIVE_AV;
 FUNCTION CAD_CALCUL_DATE_REL_AV_FIN(
 DATE_ACQ_FIN   IN VARCHAR2,
 DATE_ACQ_DEBUT IN VARCHAR2,
 DATE_COMPARE   IN VARCHAR2,
 DATE_VAL_DEBUT IN VARCHAR2)
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_ACQ_FIN,CAD_CALCUL_DATE_RELATIVE_AV(DATE_ACQ_DEBUT,DATE_COMPARE,DATE_VAL_DEBUT) );
 END CAD_CALCUL_DATE_REL_AV_FIN;
 FUNCTION CAD_CALCUL_DATE_RELATIVE_FIN(
 DATE_RELATIVE_FIN   IN VARCHAR2,
 DATE_RELATIVE_DEBUT IN VARCHAR2,
 DATE_COMPARE        IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE_FIN,CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE_DEBUT,DATE_COMPARE) );
 END CAD_CALCUL_DATE_RELATIVE_FIN;
 FUNCTION cad_formate_date_relative(
 DATE_RELATIVE    IN VARCHAR2,
 DATE_COMPARAISON IN VARCHAR2 )
 RETURN VARCHAR2
 AS
 BEGIN
 RETURN CAD_CALCUL_DATE_RELATIVE(DATE_RELATIVE,DATE_COMPARAISON);
 END cad_formate_date_relative;
 FUNCTION CAD_INTERRO_THEME(
 MATRIC       IN VARCHAR2 ,
 p_CODE_THEME IN VARCHAR2 ,
 p_DJOUR      IN VARCHAR2,
 collectif    IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME
 AS
 CURSOR cur_items
 IS
 SELECT *
 FROM CAD_THEMES_ITEMS
 WHERE (THEME_PERE =p_CODE_THEME
 OR p_CODE_THEME  IS NULL)
 AND ACTIF         ='O'
 ORDER BY THEME_PERE,
 ordre;
 ligne_items CAD_THEMES_ITEMS%ROWTYPE;
 ligne_lib CAD_THEMES_CPT%ROWTYPE;
 ligne_Date CAD_THEMES_CPT%ROWTYPE;
 ligne_calc CAD_THEMES_CPT%ROWTYPE;
 ligne_cpt CAD_COMPTEUR%ROWTYPE;
 liste_cpt VARCHAR(4000);
 requete CLOB;
 reqSelect CLOB;
 TYPE tableau IS VARRAY(50) OF VARCHAR(50);
 tabCpt tableau       :=tableau();
 col tableau          :=tableau();
 tabPotsParCpt tableau:=tableau();
 tabPots tableau      :=tableau();
 posVir   NUMBER;
 indice   NUMBER;
 indice2  NUMBER;
 subs     VARCHAR(50);
 tmp      NUMBER;
 tmpRes   NUMBER;
 elt      VARCHAR(50);
 numLigne NUMBER;
 retour CAD_RESULTAT_THEME:=CAD_RESULTAT_THEME();
 dateinterro     VARCHAR(8);
 unite           VARCHAR(1);
 numDonnee       NUMBER;
 theme_pere_prec VARCHAR(20);
 numpot          NUMBER;
 numpotV         NUMBER;
 dad             VARCHAR(10);
 daf             VARCHAR(10);
 dvd             VARCHAR(10);
 dvf             VARCHAR(10);
 dtcalc          VARCHAR(12);
 dteoucp         VARCHAR(12);
 typeEcran       VARCHAR(1);
 trouve          INT;
 nb_clauseselect INT;
 valdebug        VARCHAR2(1);
 format          VARCHAR(4);
 deb             NUMBER;
 fin             NUMBER;
 total           NUMBER:=0;
 BEGIN
 SELECT format_heure INTO format FROM CAD_THEMES WHERE code_theme=p_CODE_THEME;
 BEGIN
 SELECT is_debug INTO valdebug FROM CAD_IS_DEBUG;
 EXCEPTION
 WHEN OTHERS THEN
 valdebug:='N';
 END;
 IF collectif='O' THEN
 typeEcran:='C';
 ELSE
 typeEcran:='I';
 END IF;
 numDonnee:=0;
 OPEN cur_items;
 LOOP
 FETCH cur_items INTO ligne_items;
 EXIT
 WHEN cur_items%NOTFOUND ;
 -- si non actif on passe à la ligne suivante
 --  IF ligne_items.actif='N' THEN CONTINUE; END IF;
 IF theme_pere_prec IS NULL OR theme_pere_prec <>ligne_items.theme_pere THEN
 numDonnee        :=numDonnee+1;
 retour.extend;
 retour(numDonnee)           :=CAD_LIGNE_RESULTAT_THEME(NULL,NULL,NULL,NULL,NULL);
 retour(numDonnee).matricule :=matric;
 retour(numDonnee).CODE_THEME:= ligne_items.theme_pere;
 retour(numDonnee).code_item :=ligne_items.code_item;
 retour(numDonnee).lib_item  :=ligne_items.LIBELLE;
 END IF;
 -- Récupération des dates si il y en a
 DECLARE
 CURSOR cur_items_Date
 IS
 SELECT *
 FROM CAD_THEMES_CPT a
 WHERE code   = ligne_items.theme_pere
 AND ( (type  ='L'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='LC'
 OR ( type    ='L'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='LC'
 AND cpt.ordre =a.ordre
 ) )) ))
 AND calcul LIKE ('D%')
 ORDER BY ordre;
 BEGIN
 OPEN cur_items_date;
 LOOP
 FETCH cur_items_date INTO ligne_date;
 EXIT
 WHEN cur_items_date%NOTFOUND ;
 BEGIN
 -- calcul date
 SELECT LIB_CPT_POT
 INTO dteoucp
 FROM CAD_THEMES_CPT a
 WHERE code   = ligne_items.code_item
 AND ( (type  ='V'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='VC'
 OR ( type    ='V'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='VC'
 AND cpt.ordre =a.ordre
 ) )) ))
 AND ordre         =ligne_date.ordre;
 IF LENGTH(dteoucp)>5 THEN
 dtcalc         :=cad_calcul_date_relative(dteoucp,NULL);
 ELSE
 BEGIN
 IF ligne_date.calcul ='DAD' THEN
 SELECT DATE_DEB_ACQUIS
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DAF' THEN
 SELECT DATE_FIN_ACQUIS
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DVD' THEN
 SELECT DATE_DEB_PER
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 elsif ligne_date.calcul ='DVF' THEN
 SELECT DATE_FIN_PER
 INTO dtcalc
 FROM CAD_MATRIC_DATEVALID a
 WHERE matricule  =matric
 AND code_compteur=dteoucp
 AND a.DATE_EFFET =
 (SELECT MAX(date_effet)
 FROM cad_matric_datevalid b
 WHERE b.date_effet<= p_DJOUR
 AND a.code_compteur=b.code_compteur
 AND a.matricule    =b.matricule
 );
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF ligne_date.calcul ='DAD' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DATE_DEB_ACQUIS, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DAF' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DATE_FIN_ACQUIS, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DVD' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DTDEB_PERIODE, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur   =dteoucp;
 elsif ligne_date.calcul ='DVF' THEN
 SELECT CAD_CALCUL_DATE_RELATIVE(DTFIN_PERIODE, p_DJOUR)
 INTO dtcalc
 FROM CAD_PARAM_STRUCT_CPT a
 WHERE code_compteur=dteoucp;
 END IF;
 END;
 END IF;
 IF ligne_date.calcul    ='DAD' THEN
 dad                  :=dtcalc;
 elsif ligne_date.calcul ='DAF' THEN
 daf                  :=dtcalc;
 elsif ligne_date.calcul ='DVD' THEN
 dvd                  :=dtcalc;
 elsif ligne_date.calcul ='DVF' THEN
 dvf                  :=dtcalc;
 END IF;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 END LOOP;
 CLOSE cur_items_date;
 -- récupération des compteurs à utiliser pour l'item (ordre 0, type V)
 SELECT LIB_CPT_POT
 INTO liste_cpt
 FROM CAD_THEMES_CPT a
 WHERE code =ligne_items.code_item
 AND ordre  =0
 AND type   ='V';
 --  AND ( (type  ='V'
 --  AND typeecran='I')
 -- OR (typeecran='C'
 --  AND (type    ='VC'
 --  OR ( type    ='V'
 -- AND NOT EXISTS
 --   (SELECT NULL
 --   FROM CAD_THEMES_CPT cpt
 --   WHERE cpt.code=a.code
 --   AND cpt.type  ='VC'
 --   AND cpt.ordre =a.ordre
 --   ) )) ));
 indice                 :=0;
 tabcpt                 :=tableau();
 WHILE LENGTH(liste_cpt) >0
 LOOP
 indice      :=indice+1;
 posVir      :=instr(liste_cpt,',');
 IF (posVir   >0) THEN
 subs      :=SUBSTR(liste_cpt,0,posVir);
 liste_cpt :=SUBSTR(liste_cpt,posVir+1);
 subs      :=REPLACE(subs,',','');
 tabcpt.extend;
 tabcpt(indice):=subs;
 ELSE
 tabcpt.extend;
 tabcpt(indice):=liste_cpt;
 liste_cpt     :='';
 END IF;
 END LOOP;
 END;
 DECLARE
 CURSOR cur_lib
 IS
 SELECT *
 FROM CAD_THEMES_CPT a
 WHERE code   =ligne_items.theme_pere
 AND ( (type  ='L'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='LC'
 OR ( type    ='L'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='LC'
 AND cpt.ordre =a.ordre
 ) )) ))
 ORDER BY ordre;
 BEGIN
 col:=tableau();
 OPEN cur_lib;
 LOOP
 FETCH cur_lib INTO ligne_lib;
 EXIT
 WHEN cur_lib%NOTFOUND ;
 BEGIN
 -- récupération des pots à utiliser pour chaque compteur
 SELECT *
 INTO ligne_calc
 FROM CAD_THEMES_CPT a
 WHERE code   =ligne_items.code_item
 AND ordre    =ligne_lib.ordre
 AND ( (type  ='V'
 AND typeecran='I')
 OR (typeecran='C'
 AND (type    ='VC'
 OR ( type    ='V'
 AND NOT EXISTS
 (SELECT NULL
 FROM CAD_THEMES_CPT cpt
 WHERE cpt.code=a.code
 AND cpt.type  ='VC'
 AND cpt.ordre =a.ordre
 ) )) ));
 requete                               :='';
 reqselect                             :='';
 elt                                   :='';
 IF ligne_lib.CALCUL                    ='R' OR ligne_lib.CALCUL='P' OR ligne_lib.CALCUL='VP' THEN
 deb                                 := DBMS_UTILITY.get_time;
 indice                              :=0;
 tabPotsParCpt                       :=tableau();
 WHILE LENGTH(ligne_calc.LIB_CPT_POT) >0
 LOOP
 indice                   :=indice+1;
 posVir                   :=instr(ligne_calc.LIB_CPT_POT,',');
 IF (posVir                >0) THEN
 subs                   :=SUBSTR(ligne_calc.LIB_CPT_POT,0,posVir);
 ligne_calc.LIB_CPT_POT :=SUBSTR(ligne_calc.LIB_CPT_POT,posVir+1);
 subs                   :=REPLACE(subs,',','');
 tabPotsParCpt.extend;
 tabPotsParCpt(indice) :=subs;
 ELSE
 tabPotsParCpt.extend;
 tabPotsParCpt(indice)  :=ligne_calc.LIB_CPT_POT;
 ligne_calc.LIB_CPT_POT :='';
 END IF;
 END LOOP;
 -- Ecriture des requetes
 nb_clauseselect:=0;
 tmp            :=0;
 FOR i IN 1..indice
 LOOP
 tmpres                        :=0;
 indice2                       :=0;
 tabPots                       :=tableau();
 trouve                        :=0;
 WHILE LENGTH(tabPotsParCpt(i)) >0
 LOOP
 trouve             :=1;
 indice2            :=indice2+1;
 posVir             :=instr(tabPotsParCpt(i),'^');
 IF (posVir          >0) THEN
 subs             :=SUBSTR(tabPotsParCpt(i),0,posVir);
 tabPotsParCpt(i) :=SUBSTR(tabPotsParCpt(i),posVir+1);
 subs             :=REPLACE(subs,'^','');
 tabPots.extend;
 tabPots(indice2) :=subs;
 ELSE
 tabPots.extend;
 tabPots(indice2) :=tabPotsParCpt(i);
 tabPotsParCpt(i) :='';
 END IF;
 END LOOP;
 IF trouve =0 THEN
 CONTINUE;
 END IF;
 IF nb_clauseselect <=1 THEN
 unite            :=cad_unite_cpt(matric, p_DJOUR,tabcpt(i));
 END IF;
 IF ligne_lib.CALCUL   ='R' THEN
 dateinterro        := p_DJOUR;
 elsif ligne_lib.CALCUL='P' THEN
 -- récuperer date fin valid
 dateinterro        :=dvf;
 elsif ligne_lib.CALCUL='VP' THEN
 -- récuperer date fin valid
 dateinterro:=dvf;
 END IF;
 IF ligne_lib.CALCUL='R' OR ligne_lib.CALCUL='P' THEN
 BEGIN
 --select *  INTO ligne_cpt from (select * from CAD_COMPTEUR where code_compteur=tabcpt(i) and matricule =matric and djour <=dateinterro order by djour desc,typemj desc) where rownum=1;
 -- select *   INTO ligne_cpt from CAD_COMPTEUR a where code_compteur=tabcpt(i) and matricule =matric and djour||typemj=( select max(b.djour||b.typemj)   from CAD_COMPTEUR b where b.code_compteur=a.code_compteur and b.matricule =a.matricule and b.djour <=dateinterro );
 SELECT MATRICULE,
 CODE_COMPTEUR,
 DJOUR,
 TYPEMJ,
 DATE_MAJ,
 POT1_VALEURJ,
 POT1_VALEURH,
 POT1_FJ,
 POT1_FH,
 POT2_VALEURJ ,
 POT2_VALEURH ,
 POT2_FJ ,
 POT2_FH ,
 POT3_VALEURJ ,
 POT3_VALEURH ,
 POT3_FJ ,
 POT3_FH ,
 POT4_VALEURJ ,
 POT4_VALEURH ,
 POT4_FJ ,
 POT4_FH ,
 POT5_VALEURJ ,
 POT5_VALEURH ,
 POT5_FJ ,
 POT5_FH ,
 POT6_VALEURJ ,
 POT6_VALEURH ,
 POT6_FJ ,
 POT6_FH ,
 POT7_VALEURJ ,
 POT7_VALEURH ,
 POT7_FJ ,
 POT7_FH ,
 POT8_VALEURJ ,
 POT8_VALEURH ,
 POT8_FJ ,
 POT8_FH ,
 POT9_VALEURJ ,
 POT9_VALEURH ,
 POT9_FJ ,
 POT9_FH ,
 POT10_VALEURJ ,
 POT10_VALEURH ,
 POT10_FJ ,
 POT10_FH ,
 POT11_VALEURJ ,
 POT11_VALEURH ,
 POT11_FJ ,
 POT11_FH ,
 POT12_VALEURJ ,
 POT12_VALEURH ,
 POT12_FJ ,
 POT12_FH ,
 POTV1_VALEURJ ,
 POTV1_VALEURH ,
 POTV2_VALEURJ ,
 POTV2_VALEURH ,
 POTV3_VALEURJ ,
 POTV3_VALEURH ,
 POTV4_VALEURJ ,
 POTV4_VALEURH ,
 POTV5_VALEURJ ,
 POTV5_VALEURH ,
 POTV6_VALEURJ ,
 POTV6_VALEURH
 INTO ligne_cpt
 FROM
 (SELECT a.*,
 rank() over(order by djour DESC,typemj DESC) rn
 FROM CAD_COMPTEUR a
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 )
 WHERE rn=1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 CONTINUE;
 WHEN OTHERS THEN
 raise;
 END;
 elsif ligne_lib.CALCUL='VP' THEN
 BEGIN
 SELECT NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 NULL,
 SUM(NVL(POTV1_VALEURj,0)) AS POTV1_VALEURj,
 SUM(NVL(POTV1_VALEURh,0)) AS POTV1_VALEUh,
 SUM(NVL(POTV2_VALEURj,0)) AS POTV2_VALEURj,
 SUM(NVL(POTV2_VALEURh,0)) AS POTV2_VALEURh,
 SUM(NVL(POTV3_VALEURj,0)) AS POTV3_VALEURj,
 SUM(NVL(POTV3_VALEURh,0)) AS POTV3_VALEURh,
 SUM(NVL(POTV4_VALEURj,0)) AS POTV4_VALEURj,
 SUM(NVL(POTV4_VALEURh,0)) AS POTV4_VALEURh,
 SUM(NVL(POTV5_VALEURj,0)) AS POTV5_VALEURj,
 SUM(NVL(POTV5_VALEURh,0)) AS POTV5_VALEURh,
 SUM(NVL(POTV6_VALEURj,0)) AS POTV6_VALEURj,
 SUM(NVL(POTV6_VALEURh,0)) AS POTV6_VALEURh
 INTO ligne_cpt
 FROM
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 AND djour          > p_DJOUR
 );
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 CONTINUE;
 WHEN OTHERS THEN
 raise;
 END;
 END IF;
 FOR j IN 1..indice2
 LOOP
 tmpres            :=0;
 IF ligne_lib.CALCUL='R' OR ligne_lib.CALCUL='P' THEN
 IF tabpots(j)    ='POT1' THEN
 IF (unite      ='H') THEN
 tmpRes      :=NVL(ligne_cpt.POT1_Fh,NVL(ligne_cpt.POT1_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT1_Fj,NVL(ligne_cpt.POT1_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT2' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT2_Fh,NVL(ligne_cpt.POT2_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT2_Fj,NVL(ligne_cpt.POT2_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT3' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT3_Fh,NVL(ligne_cpt.POT3_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT3_Fj,NVL(ligne_cpt.POT3_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT4' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT4_Fh,NVL(ligne_cpt.POT4_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT4_Fj,NVL(ligne_cpt.POT4_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT5' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT5_Fh,NVL(ligne_cpt.POT5_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT5_Fj,NVL(ligne_cpt.POT5_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT6' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT6_Fh,NVL(ligne_cpt.POT6_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT6_Fj,NVL(ligne_cpt.POT6_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT7' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT7_Fh,NVL(ligne_cpt.POT7_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT7_Fj,NVL(ligne_cpt.POT7_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT8' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT8_Fh,NVL(ligne_cpt.POT8_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT8_Fj,NVL(ligne_cpt.POT8_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT9' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT9_Fh,NVL(ligne_cpt.POT9_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT9_Fj,NVL(ligne_cpt.POT9_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT10' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT10_Fh,NVL(ligne_cpt.POT10_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT10_Fj,NVL(ligne_cpt.POT10_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT11' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT11_Fh,NVL(ligne_cpt.POT11_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT11_Fj,NVL(ligne_cpt.POT11_VALEURj,0));
 END IF;
 elsif tabpots(j)='POT12' THEN
 IF (unite     ='H') THEN
 tmpRes     :=NVL(ligne_cpt.POT12_Fh,NVL(ligne_cpt.POT12_VALEURh,0));
 ELSE
 tmpRes:=NVL(ligne_cpt.POT12_Fj,NVL(ligne_cpt.POT12_VALEURj,0));
 END IF;
 END IF;
 elsif ligne_lib.CALCUL='VP' THEN
 numpot             :=REPLACE(tabpots(j),'POT','');
 SELECT numpot_var
 INTO numpotV
 FROM
 (SELECT
 CASE
 WHEN potv1=numpot
 THEN 1
 WHEN potv2=numpot
 THEN 2
 WHEN potv3=numpot
 THEN 3
 WHEN potv4=numpot
 THEN 4
 WHEN potv5=numpot
 THEN 5
 WHEN potv6=numpot
 THEN 6
 END AS numpot_var
 FROM cad_param_calcul
 WHERE code_compteur=tabcpt(i)
 );
 IF numpotV  =1 THEN
 IF (unite ='H') THEN
 tmpRes :=NVL(ligne_cpt.POTV1_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV1_VALEURj,0);
 END IF;
 elsif numpotV=2 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV2_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV2_VALEURj,0);
 END IF;
 elsif numpotV=3 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV3_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV3_VALEURj,0);
 END IF;
 elsif numpotV=4 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV4_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV4_VALEURj,0);
 END IF;
 elsif numpotV=5 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV5_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV5_VALEURj,0);
 END IF;
 elsif numpotV=6 THEN
 IF (unite  ='H') THEN
 tmpRes  :=NVL(ligne_cpt.POTV6_VALEURh,0);
 ELSE
 tmpRes:=NVL(ligne_cpt.POTV6_VALEURj,0);
 END IF;
 END IF;
 END IF;
 tmp:=tmp+tmpRes;
 END LOOP;
 END LOOP;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type R,P,VP '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 elsif ligne_lib.CALCUL='U' THEN
 elt                :=unite;
 elsif ligne_lib.CALCUL='DVD' THEN
 elt                :=dvd;
 elsif ligne_lib.CALCUL='DVF' THEN
 elt                :=dvf;
 elsif ligne_lib.CALCUL='DAD' THEN
 elt                :=dad;
 elsif ligne_lib.CALCUL='DAF' THEN
 elt                :=daf;
 elsif ligne_lib.CALCUL='COL' THEN
 deb                := DBMS_UTILITY.get_time;
 FOR l IN reverse 1..col.count
 LOOP
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT, 'C'||l,'to_number('''||NVL(col(l),0)||''')');
 END LOOP;
 EXECUTE immediate ( 'select '||ligne_calc.LIB_CPT_POT||' from dual') INTO tmp;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type COL '||total);
 --FIXME utiliser la procédure trace_dbms_output()
 elsif ligne_lib.CALCUL='C' THEN
 deb                := DBMS_UTILITY.get_time;
 FOR i IN 1..indice
 LOOP
 -- récuperer les valeurs des pots pour chaque compteur
 SELECT *
 INTO ligne_cpt
 FROM
 (SELECT *
 FROM CAD_COMPTEUR
 WHERE code_compteur=tabcpt(i)
 AND matricule      =matric
 AND djour         <=dateinterro
 ORDER BY djour DESC,
 typemj DESC
 )
 WHERE rownum=1;
 --EXECUTE immediate requete INTO ligne_cpt;
 -- remplacer les pots
 IF unite                  ='H' THEN
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT12',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT12_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT11',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT11_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT10',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT10_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT9',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT9_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT8',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT8_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT7',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT7_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT6',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT6_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT5',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT5_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT4',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT4_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT3',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT3_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT2',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT2_VALEURH,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT1',NVL(ligne_cpt.POT1_FH,NVL(ligne_cpt.POT1_VALEURH,0)));
 ELSE
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT12',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT12_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT11',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT11_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT10',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT10_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT9',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT9_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT8',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT8_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT7',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT7_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT6',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT6_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT5',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT5_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT4',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT4_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT3',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT3_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT2',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT2_VALEURJ,0)));
 ligne_calc.LIB_CPT_POT :=REPLACE( ligne_calc.LIB_CPT_POT,tabcpt(i)||'.POT1',NVL(ligne_cpt.POT1_FJ,NVL(ligne_cpt.POT1_VALEURJ,0)));
 END IF;
 END LOOP;
 EXECUTE immediate ( 'select '||ligne_calc.LIB_CPT_POT||' from dual') INTO tmp;
 IF tmp>0 AND tmp<1 THEN
 elt:='0'||tmp;
 elsif tmp>-1 AND tmp<0 THEN
 elt:=tmp;
 if INSTR(elt, '-,') = 1 then
 elt := '-0,' || SUBSTR( elt, 3 );
 end if;
 ELSE
 elt:=tmp;
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Type C'||total);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 deb                        := DBMS_UTILITY.get_time;
 IF ligne_lib.NON_AFFICHAGE IS NOT NULL AND cad_condition_non_aff( p_DJOUR,ligne_lib.CALCUL,ligne_lib.NON_AFFICHAGE,elt)=1 THEN
 retour.delete(numDonnee);
 EXIT;
 END IF;
 col.extend;
 col(ligne_lib.ordre) :=elt;
 IF (unite             ='H' AND ligne_lib.CALCUL IN ('C','COL','R','P','VP')) THEN
 IF format           ='HHMM' THEN
 -- en HHMM
 elt      :=conversionSecondesHHMM(elt);
 elsif format='HC' THEN
 -- en HHCC
 elt:=conversionSecondesHHCC(elt);
 END IF;
 elsif ligne_lib.CALCUL IN ('C','COL','R','P','VP') AND elt IS NULL THEN
 elt                                                      :='0';
 END IF;
 IF ligne_calc.ordre           =1 THEN
 retour(numDonnee).RESULTAT :=NVL(elt,'');
 ELSE
 retour(numDonnee).RESULTAT :=NVL(retour(numDonnee).RESULTAT,'')||'^'||NVL(elt,'');
 END IF;
 fin  := DBMS_UTILITY.get_time;
 total:=total+(fin-deb);
 --DBMS_OUTPUT.put_line('Ajout donnée'||total);
 --FIXME utiliser la procédure trace_dbms_output()
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF ligne_calc.ordre           =1 THEN
 retour(numDonnee).RESULTAT :='';
 ELSE
 retour(numDonnee).RESULTAT :=NVL(retour(numDonnee).RESULTAT,'')||'^'||'';
 END IF;
 col.extend;
 END;
 END LOOP;
 CLOSE cur_lib;
 END;
 END LOOP;
 CLOSE cur_items;
 FOR i in retour.first .. retour.last LOOP
   IF retour(i).RESULTAT LIKE '%^^%' OR retour(i).RESULTAT LIKE '^%' OR retour(i).RESULTAT LIKE '%^' THEN
     retour.delete(i);
   END IF;
 END LOOP;
 RETURN retour;
 END CAD_INTERRO_THEME;
 FUNCTION CAD_INTERRO_THEME_COLL(
 idPop      IN NUMBER ,
 CODE_THEME IN VARCHAR2 ,
 DJOUR      IN VARCHAR2,
 collectif  IN VARCHAR2)
 RETURN CAD_RESULTAT_THEME
 AS
 CURSOR cur_pop
 IS
 SELECT * FROM REQ_POPULATION WHERE num=idPop;
 ligne_pop REQ_POPULATION%ROWTYPE;
 retour CAD_RESULTAT_THEME:=CAD_RESULTAT_THEME();
 tmp CAD_RESULTAT_THEME   :=CAD_RESULTAT_THEME();
 i binary_integer ;
 dernier binary_integer ;
 BEGIN
 OPEN cur_pop;
 LOOP
 FETCH cur_pop INTO ligne_pop;
 EXIT
 WHEN cur_pop%NOTFOUND ;
 tmp     :=CAD_INTERRO_THEME(ligne_pop.matric,code_theme,djour,'O') ;
 i       := tmp.first ;
 WHILE i IS NOT NULL
 LOOP
 dernier:=NVL(retour.last,0);
 retour.extend;
 retour(dernier+1):=tmp(i);
 i                := tmp.next(i) ;
 END LOOP;
 END LOOP;
 CLOSE cur_pop;
 RETURN retour;
 END CAD_INTERRO_THEME_COLL;
 FUNCTION CAD_SOLDE(
 MATRIC   IN VARCHAR2 ,
 DATEJOUR IN VARCHAR2 ,
 RUB      IN VARCHAR2 )
 RETURN NUMBER
 AS
 CURSOR cur_cpt
 IS
 SELECT code_compteur,
 pot_solde,
 pot_variation,
 min_soldej,
 min_soldeh,
 ordre
 FROM CAD_PARAM_LIEN_RUB_CPT
 WHERE RUB_VAL_JOUR =rub
 ORDER BY ordre;
 ligne_cpt cur_cpt%ROWTYPE;
 retour NUMBER:=0;
 req    VARCHAR(1000);
 unite  VARCHAR(1);
 valcpt NUMBER;
 BEGIN
 unite:= cad_unite(matric,datejour,rub);
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO ligne_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 req    :='select * from (select ';
 IF unite='H' THEN
 req  :=req||'nvl(POT'||ligne_cpt.pot_solde||'_FH,nvl(POT'||ligne_cpt.pot_solde||'_VALEURH,0))';
 ELSE
 req:=req||'nvl(POT'||ligne_cpt.pot_solde||'_FJ,nvl(POT'||ligne_cpt.pot_solde||'_VALEURJ,0))';
 END IF;
 req:=req||' from CAD_COMPTEUR where code_compteur=:cpt and matricule =:matric and djour <=:datejour order by djour desc,typemj desc) where rownum=1';
 BEGIN
 EXECUTE IMMEDIATE req INTO valcpt USING ligne_cpt.code_compteur,
 matric,
 datejour ;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 valcpt:=0;
 END;
 retour:=retour+valcpt;
 END LOOP;
 CLOSE cur_cpt;
 RETURN retour;
 END CAD_SOLDE;
 PROCEDURE CAD_BASCULE_UNIQUE(
 IDMATRIC    IN NUMBER ,
 BASCULE     IN VARCHAR2 ,
 DATEBAS     IN VARCHAR2,
 SUPPRESSION IN VARCHAR2)
 AS
 pos  NUMBER:=0;
 subs VARCHAR2(4000);
 req CLOB;
 requpdate VARCHAR2(4000);
 djourReq  VARCHAR2(1000);
 dteRecalc VARCHAR2(8);
 TYPE Tab_Rowid
 IS
 TABLE OF VARCHAR(100);
 T_Id Tab_Rowid;
 T_IdBasc Tab_Rowid;
 code_basc_prec VARCHAR(20);
 TYPE T_param
 IS
 RECORD
 (
 cpt_dest VARCHAR(20),
 requete CLOB );
 param T_param;
 BEGIN
 SELECT compteur_dest,
 requetes
 INTO param
 FROM CAD_PARAM_REGLES_MAJ
 WHERE code_bascule=bascule;
 DELETE
 FROM CAD_COMPTEUR
 WHERE TYPEMJ     ='I'
 AND CODE_COMPTEUR=param.cpt_dest
 AND DJOUR        =DATEBAS
 AND MATRICULE   IN
 (SELECT matricule FROM CAD_CALCUL_EN_COURS_MATRIC WHERE id=idmatric
 );
 IF SUPPRESSION IS NULL THEN
 INSERT
 INTO CAD_COMPTEUR
 (
 matricule,
 code_compteur,
 djour,
 typemj,
 date_maj
 )
 (SELECT matricule,
 param.cpt_dest,
 datebas,
 'I',
 sysdate
 FROM CAD_CALCUL_EN_COURS_MATRIC
 WHERE id=idmatric
 );
 req :=REPLACE(param.requete,'VALEURJ=','FJ=');
 req :=REPLACE(req,'VALEURH=','FH=');
 DECLARE
 CURSOR cur_cpt
 IS
 SELECT cad_compteur.*,
 cad_compteur.rowid
 FROM cad_compteur, CAD_CALCUL_EN_COURS_MATRIC
 WHERE TYPEMJ     ='I'
 AND CODE_COMPTEUR=param.cpt_dest
 AND DJOUR        =DATEBAS
 AND cad_compteur.MATRICULE =CAD_CALCUL_EN_COURS_MATRIC.matricule
 and   CAD_CALCUL_EN_COURS_MATRIC.id=idmatric;
 lig_cpt cur_cpt%rowtype;
 BEGIN
 OPEN cur_cpt;
 LOOP
 FETCH cur_cpt INTO lig_cpt;
 EXIT
 WHEN cur_cpt%NOTFOUND ;
 -- select max(d.djour)  into djourReq from CAD_COMPTEUR d where d.MATRICULE=lig_cpt.MATRICULE and d.CODE_COMPTEUR=lignebascule.COMPTEUR_ORI AND DJOUR<DATEBAS;
 IF t_id IS NULL THEN
 t_id  :=Tab_Rowid(lig_cpt.rowid);
 ELSE
 t_id.extend();
 t_id(t_id.last):=lig_cpt.rowid;
 END IF;
 END LOOP;
 CLOSE cur_cpt;
 END;
 djourReq           :=' (select max(d.djour)  from CAD_COMPTEUR d where d.MATRICULE=ca.MATRICULE and d.CODE_COMPTEUR=ori.code_compteur AND d.DJOUR<'''||datebas||'''  )  and typemj=(select max(typemj) from CAD_COMPTEUR d where d.code_compteur = ori.code_compteur and d.djour = ori.djour and d.matricule = ori.matricule) ';
 IF t_id            IS NOT NULL THEN
 WHILE LENGTH(req) >0
 LOOP
 IF instr(req,';')>0 THEN
 subs          :=SUBSTR(req,0,instr(req,';'));
 ELSE
 subs:=req;
 END IF;
 req      :=REPLACE(req,subs,'');
 req      :=REPLACE(req,subs,'');
 subs     :=REPLACE(subs,'_DJOUR_',djourReq);
 subs     :=REPLACE(subs,';','');
 requpdate:='update CAD_COMPTEUR ca set '||subs||' where rowid=:1' ;
 FORALL i IN T_Id.first..T_Id.last
 EXECUTE immediate requpdate USING t_id(i);
 END LOOP;
 END IF;
 END IF;
 SELECT MIN(dte)
 INTO dteRecalc
 FROM
 (SELECT MAX(d.djour) AS dte,
 d.matricule
 FROM CAD_COMPTEUR d,cad_calcul_en_cours_matric
 WHERE d.MATRICULE = cad_calcul_en_cours_matric.matricule and cad_calcul_en_cours_matric.id=IDMATRIC
 AND d.CODE_COMPTEUR=param.cpt_dest
 AND d.DJOUR
 ||d.typemj<DATEBAS
 ||'I'
 GROUP BY d.matricule
 );
 CAD_MAJ_VALEUR_LISTE_RUBJOUR( IDMATRIC , dteRecalc , NULL , 'true' , 'true' );
 /*EXCEPTION
 WHEN OTHERS THEN
 err_code := SQLCODE;
 err_msg  :=SQLERRM;
 CAD_ERREUR(IDMATRIC ,'CAD_BASCULE_UNIQUE', IDMATRIC||','|| BASCULE ||','|| DATEBAS  ,err_code||'-'||err_msg);
 raise;*/
 END CAD_BASCULE_UNIQUE;
 END CAD;
##
CALC_HP
=SQL=
create or replace PACKAGE CALC_HP IS

p_date_deb DATE;
p_date_fin DATE;
horaireRemu VARCHAR(255);--horaire remu.	
horairePres VARCHAR(255); -- tmp horaire pres. 
dateDebTranchSitu DATE;   --tmp loop cycle dans situation
dateFinTranchSitu DATE;   --tmp loop cycle dans situation
dateEnCours DATE;         --date en cours pour calcul LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
numJourCanevas NUMBER(5,0);--tmp for LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
nbreHeures NUMBER(5,2);    --tmp for LOOP decomposerArrCycleDcySituationEnTrancheAndCreateHP
jourSemaine VARCHAR2(15);


TYPE map_horaire_par_jour IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
arrHoraireParJour map_horaire_par_jour;

/*****************/
TYPE TgeRefHprType IS RECORD (
    NUMPAC	VARCHAR2(6 BYTE),
    CODE_HOR_PRES	NUMBER(3,0),
    DATE_DEBUT	DATE,
    DATE_FIN	DATE,
    HRS_LUNDI	NUMBER(4,2),
    HRS_MARDI	NUMBER(4,2),
    HRS_MERCREDI	NUMBER(4,2),
    HRS_JEUDI	NUMBER(4,2),
    HRS_VENDREDI	NUMBER(4,2),
    HRS_SAMEDI	NUMBER(4,2),
    HRS_DIMANCHE	NUMBER(4,2)
);
--TYPE map_hpr IS TABLE OF TgeRefHprType INDEX BY VARCHAR2(30);
cur_TgeRefhpr TgeRefHprType;
--l_map_hpr map_hpr;
TYPE type_List_arr_2 IS VARRAY(99) OF TgeRefHprType;
lst_2 type_List_arr_2;
arrCycleHprSituation type_List_arr_2;


TYPE TgeRefDcyCy1Cy2Type IS RECORD (
	NUMPAC						VARCHAR2(6 BYTE),
	CODE_CLASSE_HORAIRE_OTT 	NUMBER(3,0),
	DATE_DEBUT 					DATE,
	DATE_FIN 					DATE,
	CODE_CYCLE_OTT 				NUMBER(3,0),
	CODE_CANEVAS_CYCLE_OTT 		NUMBER(3,0),
	NOMBRE_JOURS_CYCLE			NUMBER(3,0),
	NUM_JOUR_ENTREE_CANEVAS		NUMBER(3,0),
	NOMBRE_HEURE_1 				NUMBER(5,2),
	NOMBRE_HEURE_2				NUMBER(5,2),
	NOMBRE_HEURE_3				NUMBER(5,2),
	NOMBRE_HEURE_4				NUMBER(5,2),
	NOMBRE_HEURE_5				NUMBER(5,2),
	NOMBRE_HEURE_6				NUMBER(5,2),
	NOMBRE_HEURE_7				NUMBER(5,2),
	NOMBRE_HEURE_8				NUMBER(5,2),
	NOMBRE_HEURE_9				NUMBER(5,2),
	NOMBRE_HEURE_10				NUMBER(5,2),
	NOMBRE_HEURE_11				NUMBER(5,2),
	NOMBRE_HEURE_12				NUMBER(5,2),
	NOMBRE_HEURE_13				NUMBER(5,2),
	NOMBRE_HEURE_14				NUMBER(5,2),
	NOMBRE_HEURE_15				NUMBER(5,2),
	NOMBRE_HEURE_16				NUMBER(5,2), 
	NOMBRE_HEURE_17				NUMBER(5,2),
	NOMBRE_HEURE_18				NUMBER(5,2),
	NOMBRE_HEURE_19				NUMBER(5,2),
	NOMBRE_HEURE_20				NUMBER(5,2),
	NOMBRE_HEURE_21				NUMBER(5,2)
	) ;
  /* FOR HASHMAP AND RECORD */
--TYPE map_varchar IS TABLE OF TgeRefDcyCy1Cy2Type INDEX BY VARCHAR2(30);
cur_TgeRefDcy TgeRefDcyCy1Cy2Type;
--l_map map_varchar;
TYPE type_List_arr IS VARRAY(99) OF TgeRefDcyCy1Cy2Type;
lst_1 type_List_arr;
arrCycleSituation type_List_arr;
  /***************/
  
  TYPE TGE_REF_MAPDOType IS RECORD (
    NUMPAC	VARCHAR2(6),
    ELEMENT	VARCHAR2(4),
    OCCURENCE	VARCHAR2(2),
    DONNEEGXP	VARCHAR2(50),
    TABLEGXP	VARCHAR2(24),
    DONNFILTRE	VARCHAR2(50),
    OPERFILTRE	VARCHAR2(2),
    VALFILTRE	VARCHAR2(15),
    TRTPARTICULIER	VARCHAR2(4000),
    ENVOI_SYSTEMATIQUE	VARCHAR2(1),
    FORCABLE_ECRAN_GENERE	VARCHAR2(1)
	) ;
cur_TgeRefmapdo TGE_REF_MAPDOType;
TYPE type_List_arr_3 IS VARRAY(99) OF TGE_REF_MAPDOType;
lst_3 type_List_arr_3;


--TYPE dachtype IS RECORD();
TYPE DACH_Type IS RECORD (PAIEZAD	VARCHAR2(8 ),MATRIC	VARCHAR2(32 ),TYPE_WRITER	VARCHAR2(1 ),ZAA91	VARCHAR2(5 ),ZAA92	VARCHAR2(1 ),ZAA93	VARCHAR2(2 ),CODE_GTA	VARCHAR2(5 ),ZA914	VARCHAR2(5 ),CMPPCS	VARCHAR2(6 ),ZAB12	VARCHAR2(1 ),ZAB13	VARCHAR2(1 ),ZAB14	VARCHAR2(1 ),ZMODCNT	VARCHAR2(2 ),ZAB15	VARCHAR2(1 ),ZAB16	VARCHAR2(1 ),ZAB17	VARCHAR2(1 ),ZAB18	VARCHAR2(1 ),ZA719	DATE,ZAB05	VARCHAR2(2 ),ZAB06	DATE,ZAB07	VARCHAR2(2 ),ZAB08	VARCHAR2(1 ),ZAB09	VARCHAR2(1 ),ZAB10	VARCHAR2(1 ),ZAB11	VARCHAR2(1 ),DATE_SORTIE_SIT_BO	DATE,DATE_CREATION	DATE,DATE_DERNIERE_MODIF	DATE,DATE_FIN_BO	DATE,ZX528	VARCHAR2(1 ),ZX734	VARCHAR2(1 ),DSA302	DATE,DSCDDCDI	DATE,COLPRES	VARCHAR2(1 ),HHDCN	DATE,REPBNDF	VARCHAR2(1 ),DSRCDDCDI	DATE,TCDDCDI	VARCHAR2(1 ),ZA996	VARCHAR2(1 ),DSA751	DATE,DSAGM	DATE,DSAGP	DATE,DSANCR	DATE,DSATO	DATE,DSDAP	DATE,DSDCP	DATE,DSDECH	DATE,DSDJTP	DATE,DSDNP	DATE,DSDPE	DATE,DSDPEN	DATE,DSDPN	DATE,DSDPP	DATE,DSEPL	DATE,DSES1	DATE,DSES2	DATE,DSFCNI	DATE,DSFCNP	DATE,DSFCP	DATE,DSFICH	DATE,DSFNP	DATE,DSFPE	DATE,DSFPN	DATE,DSFPP	DATE,DSFSUS	DATE,DSNLI	DATE,DSRNVL	DATE,DSRPCH	DATE,DSSAD	DATE,DSSCG	DATE,DSSTC	DATE,EMPLOI	VARCHAR2(6 ),ESSAI	VARCHAR2(1 ),FILIR	VARCHAR2(2 ),IFCDD	VARCHAR2(1 ),JJCNT	NUMBER(2,0),JJESS1	NUMBER(2,0),JJESS2	NUMBER(2,0),JJESS4	NUMBER(2,0),MAJHA	VARCHAR2(1 ),METIER	VARCHAR2(4 ),MMCNT	NUMBER(2,0),MMESS1	NUMBER(2,0),MMESS2	NUMBER(2,0),MMESS4	NUMBER(2,0),MNTPEN	NUMBER(7,2),MOTAUG	VARCHAR2(2 ),MOTAUI	VARCHAR2(2 ),MTAUG	NUMBER(9,2),MTAUI	NUMBER(9,2),NBCSP	NUMBER(5,2),NICSP	VARCHAR2(1 ),NIVECH	VARCHAR2(4 ),NUMAPP	VARCHAR2(30 ),NUMDUE	VARCHAR2(10 ),NUMPCS	VARCHAR2(4 ),OTT	VARCHAR2(3 ),PEREMP	VARCHAR2(32 ),PPSAL	VARCHAR2(2 ),PRAUG	NUMBER(6,2),PRAUI	NUMBER(6,2),PREAVI	VARCHAR2(1 ),PREFF	VARCHAR2(1 ),PRPAY	VARCHAR2(1 ),PRVNP	VARCHAR2(1 ),QUALPE	VARCHAR2(50 ),RECAPE	VARCHAR2(1 ),REFCG	VARCHAR2(10 ),RETRAI	VARCHAR2(1 ),RNVESS	VARCHAR2(1 ),RVCNT	VARCHAR2(1 ),SAFBA	NUMBER(9,2),SENET	VARCHAR2(2 ),SITADM	VARCHAR2(2 ),SSFIL	VARCHAR2(2 ),TATR	VARCHAR2(1 ),TPNAB	VARCHAR2(1 ),TXACT	NUMBER(7,4),TXAID	NUMBER(7,4),TXEMP	NUMBER(7,4),TYPAGM	VARCHAR2(1 ),TYSUB	VARCHAR2(1 ),VALTF	VARCHAR2(1 ),VALTR	NUMBER(6,2),ZA364	VARCHAR2(5 ),ZA365	VARCHAR2(5 ),ZA368	VARCHAR2(1 ),ZA380	VARCHAR2(2 ),ZA406	VARCHAR2(2 ),ZA523	VARCHAR2(2 ),ZA554	VARCHAR2(3 ),ZA557	VARCHAR2(8 ),ZA626	VARCHAR2(1 ),ZA640	VARCHAR2(1 ),ZA650	VARCHAR2(2 ),ZA656	VARCHAR2(2 ),ZA700	VARCHAR2(2 ),ZA701	VARCHAR2(2 ),ZA750	VARCHAR2(1 ),ZA754	VARCHAR2(1 ),ZA755	VARCHAR2(1 ),ZA819	NUMBER(3,0),ZA820	NUMBER(3,0),ZA962	VARCHAR2(2 ),ZAA84	NUMBER(5,2),ZAA85	VARCHAR2(1 ),ZB071	VARCHAR2(3 ),ZB133	VARCHAR2(3 ),ZB193	VARCHAR2(3 ),ZB224	VARCHAR2(3 ),ZB330	VARCHAR2(2 ),ZB368	NUMBER(9,2),ZB369	NUMBER(9,2),ZB647	VARCHAR2(1 ),ZB648	VARCHAR2(1 ),ZB883	NUMBER(5,3),ZP895	NUMBER(9,2),ZQ183	VARCHAR2(1 ),ZQ188	VARCHAR2(1 ),ZQ272	VARCHAR2(32 ),ZQ764	VARCHAR2(1 ),ZREACT	DATE,ZT061	VARCHAR2(3 ),NUMPAC	VARCHAR2(6 ),PACMAT	VARCHAR2(8 ),NUMCNT	NUMBER(9,0),DATE_EFF	DATE,DATE_FIN	DATE,AACNT	NUMBER(2,0),AAESS4	NUMBER(2,0),ACDADM	VARCHAR2(1 ),ACDALC	VARCHAR2(1 ),ACDFNE	VARCHAR2(1 ),AFFS02	VARCHAR2(25 ),AIPAT	VARCHAR2(1 ),ALSMO	VARCHAR2(1 ),APARCE	VARCHAR2(2 ),AVNAA	NUMBER(7,2),AVNAL	NUMBER(7,2),AVNAN	NUMBER(7,2),AVNAV	NUMBER(7,2),AVNTIC	NUMBER(7,2),CADRE	VARCHAR2(1 ),CAMSA	VARCHAR2(2 ),CASAS	VARCHAR2(1 ),CATAFP	VARCHAR2(2 ),CBUD	VARCHAR2(10 ),CE	VARCHAR2(6 ),CFE	VARCHAR2(1 ),CFEAT	VARCHAR2(1 ),CFECV	VARCHAR2(1 ),CFEDC	VARCHAR2(1 ),CFEEM	VARCHAR2(1 ),CFEES	VARCHAR2(1 ),CFEMA	VARCHAR2(1 ),CFESF	VARCHAR2(1 ),CFEVE	VARCHAR2(1 ),CFEVI	VARCHAR2(1 ),CHTYPC	VARCHAR2(2 ),CLNC	VARCHAR2(2 ),CODCPN	VARCHAR2(3 ),CODETB	VARCHAR2(5 ),CODSTE	VARCHAR2(6 ),COEFF	NUMBER(5,0),COFRON	VARCHAR2(1 ),COMCNT	VARCHAR2(50 ),COMURB	VARCHAR2(4 ),CSCOMP	VARCHAR2(2 ),CSRTT	NUMBER(9,2),CSTAPA	VARCHAR2(2 ),CVCOLL	VARCHAR2(4 ),DICDD	NUMBER(9,2),DRPAI2	VARCHAR2(1 ),DSA277	DATE,DSA301	DATE,TUTEUR	VARCHAR2(50 ),NUMURS_PRT	VARCHAR2(18 ),SIREN_PRT	VARCHAR2(9 ),STATUT_PRT	VARCHAR2(3 ),CODAGE_INT	VARCHAR2(6 ),CODSOC_INT	VARCHAR2(6 ),IDPACMAT	VARCHAR2(14 ),ACT_ORG	VARCHAR2(6 ),BU_ORG	VARCHAR2(6 ),DSAUI	DATE,DERUSA	VARCHAR2(1 ),DSFINC	DATE,MAAFFP	VARCHAR2(2 ),
DEBUT_PER_GENERATION_HP DATE, FIN_PER_GENERATION_HP DATE);
cur_dachtype DACH_Type;
TYPE type_List_arr_4 IS VARRAY(200) OF DACH_Type;
lst_4 type_List_arr_4;
  
sql_1 CLOB;
sql_2 CLOB;
sql_3 CLOB;
sql_4 CLOB;

 
 
 
 cpt number:=1;
 
 TYPE SituationType IS RECORD (
    numpac	VARCHAR2(30),
    pacmat	VARCHAR2(30),
    paieZad	VARCHAR2(30),
    numcnt	NUMBER(13,0),
    code_classe_horaire_ott	NUMBER(13,0),
    code_cycle_ott	NUMBER(13,0),
    dateDeb	DATE,
    dateFin	DATE,
    isGtaT1	boolean,
    HRS_SAMEDI	NUMBER(4,2),
    HRS_DIMANCHE	NUMBER(4,2)
);
--l_map_hpr map_hpr;
TYPE SituationType_arr_2 IS VARRAY(99) OF SituationType;
lst_Situation SituationType_arr_2;
 
 /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION calculateNomJourCanevas( ligneTgeRefHprType IN TgeRefHprType, dateEnCour IN DATE  ) RETURN VARCHAR;
  
  /**
  * retourne le numero de jour canevas 
  */
 FUNCTION calculateNumJourCanevas( ligneDcyCy1Cy2 IN TgeRefDcyCy1Cy2Type, local_dateEnCours IN DATE  ) RETURN NUMBER;
    
  /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION getValOfCycle( val IN VARCHAR2, obj IN TgeRefDcyCy1Cy2Type) RETURN NUMBER;
  
   FUNCTION getHprHoursNbre( val IN NUMBER, obj IN TgeRefHprType  )  RETURN NUMBER;
  
  
  /*
  * get value from DACH object selon clé
  */
 FUNCTION getValOfDACH( val IN VARCHAR2, obj IN DACH_Type  )  RETURN VARCHAR2;
  
  /*
  *   insertion d'un incident paie hors absence (a la fin de du traitement)
  */
PROCEDURE insertIncidentPaieHorsAbs( nbrHeur IN NUMBER,dateActu IN DATE, p_unIncident IN SituationType,  p_login IN VARCHAR2);
  
PROCEDURE principal( p_numpac IN VARCHAR2 
, old_za819 IN VARCHAR2 
, new_za819 IN VARCHAR2 
, old_za820 IN VARCHAR2 
, new_za820 IN VARCHAR2 
, p_matric IN VARCHAR2
, p_PAIEZAD IN VARCHAR2
, p_numcnt IN NUMBER
,  p_date_deb_char IN VARCHAR2 -- date debut projection
--,  p_date_fin2 IN DATE  -- date fin projection => à eliminer
, p_date_fin_BO IN VARCHAR2
,  p_login IN VARCHAR2);
 
 
END CALC_HP;

##
CALC_HP
=SQL=
create or replace PACKAGE BODY CALC_HP AS

 /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION calculateNomJourCanevas( ligneTgeRefHprType IN TgeRefHprType, dateEnCour IN DATE  )
  RETURN VARCHAR
  IS
  numJr NUMBER := 0;
  BEGIN
  select to_char(dateEnCour,'D') INTO numJr from dual;
  CASE numJr
    WHEN 1 THEN  RETURN 'Lundi';
    WHEN 2 THEN  RETURN 'Mardi';
    WHEN 3 THEN  RETURN 'Mercredi';
    WHEN 4 THEN  RETURN 'Jeudi';
    WHEN 5 THEN  RETURN 'Vendredi';
    WHEN 6 THEN  RETURN 'Samedi';
    WHEN 7 THEN  RETURN 'Dimanche';
    ELSE RETURN 'Erreur numéro jour';
  END CASE;
  
  
  END calculateNomJourCanevas;
  
  /**
  * retourne le numero de jour canevas 
  */
 FUNCTION calculateNumJourCanevas( ligneDcyCy1Cy2 IN TgeRefDcyCy1Cy2Type, local_dateEnCours IN DATE  )
  RETURN NUMBER
  IS
  local_numJourCanevas NUMBER;
  res1 NUMBER;
  res2 NUMBER;
  
  tmp NUMBER;
  tmp2 NUMBER;
  BEGIN
    IF((ligneDcyCy1Cy2.Date_debut-local_dateEnCours+ligneDcyCy1Cy2.Num_jour_entree_canevas)< ligneDcyCy1Cy2.Nombre_jours_cycle) THEN
      res1:=(ligneDcyCy1Cy2.date_debut - local_dateEnCours) / ligneDcyCy1Cy2.Nombre_jours_cycle;
      res2:=ABS((ligneDcyCy1Cy2.date_debut - local_dateEnCours)) + 1 - (TRUNC(ABS(res1)) * ligneDcyCy1Cy2.Nombre_jours_cycle); 
      
      tmp2:=TRUNC(ABS(res1));
      
     tmp:= ABS((ligneDcyCy1Cy2.date_debut - local_dateEnCours));
      
      
      IF( (res2-1) > ligneDcyCy1Cy2.Nombre_jours_cycle - ligneDcyCy1Cy2.Num_jour_entree_canevas ) THEN
        local_numJourCanevas := res2- (ligneDcyCy1Cy2.Nombre_jours_cycle - ligneDcyCy1Cy2.Num_jour_entree_canevas);
       ELSE
        local_numJourCanevas := res2 + ligneDcyCy1Cy2.Num_jour_entree_canevas-1;
      END IF;
    ELSE
        local_numJourCanevas :=ligneDcyCy1Cy2.Num_jour_entree_canevas + ABS(ligneDcyCy1Cy2.date_debut - local_dateEnCours); --
    END IF;
    
    RETURN local_numJourCanevas;
  END calculateNumJourCanevas;
    
  /**
  * récupérer valeur de l'objet TgeRefDcyCy1Cy2 selon chaine de caractére (nom colonne)
  */
  FUNCTION getValOfCycle( val IN VARCHAR2, obj IN TgeRefDcyCy1Cy2Type  )
  RETURN NUMBER
  IS
  BEGIN
      IF val='NOMBRE_HEURE_1' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_1); END IF;
      IF val='NOMBRE_HEURE_2' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_2); END IF;
      IF val='NOMBRE_HEURE_3' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_3); END IF;
      IF val='NOMBRE_HEURE_4' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_4); END IF;
      IF val='NOMBRE_HEURE_5' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_5); END IF;
      IF val='NOMBRE_HEURE_6' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_6); END IF;
      IF val='NOMBRE_HEURE_7' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_7); END IF;
      IF val='NOMBRE_HEURE_8' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_8); END IF;
      IF val='NOMBRE_HEURE_9' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_9); END IF;
      IF val='NOMBRE_HEURE_10' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_10); END IF;
      IF val='NOMBRE_HEURE_11' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_11); END IF;
      IF val='NOMBRE_HEURE_12' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_12); END IF;
      IF val='NOMBRE_HEURE_13' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_13); END IF;
      IF val='NOMBRE_HEURE_14' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_14); END IF;
      IF val='NOMBRE_HEURE_15' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_15); END IF;
      IF val='NOMBRE_HEURE_16' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_16); END IF;
      IF val='NOMBRE_HEURE_17' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_17); END IF;
      IF val='NOMBRE_HEURE_18' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_18); END IF;
      IF val='NOMBRE_HEURE_19' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_19); END IF;
      IF val='NOMBRE_HEURE_20' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_20); END IF;
      IF val='NOMBRE_HEURE_21' THEN RETURN TO_NUMBER(obj.NOMBRE_HEURE_21); END IF;
      RETURN NULL;
  END getValOfCycle;
  
   FUNCTION getHprHoursNbre( val IN NUMBER, obj IN TgeRefHprType  )
  RETURN NUMBER
  IS
  BEGIN
      IF val='Lundi' THEN RETURN TO_NUMBER(obj.HRS_LUNDI); END IF;
      IF val='Mardi' THEN RETURN TO_NUMBER(obj.HRS_MARDI); END IF;
      IF val='Mercredi' THEN RETURN TO_NUMBER(obj.HRS_MERCREDI); END IF;
      IF val='Jeudi' THEN RETURN TO_NUMBER(obj.HRS_JEUDI); END IF;
      IF val='Vendredi' THEN RETURN TO_NUMBER(obj.HRS_VENDREDI); END IF;
      IF val='Samedi' THEN RETURN TO_NUMBER(obj.HRS_SAMEDI); END IF;
      IF val='Dimanche' THEN RETURN TO_NUMBER(obj.HRS_DIMANCHE); END IF;
      RETURN NULL;
  END getHprHoursNbre;
  
  
  /*
  * get value from DACH object selon clé
  */
 FUNCTION getValOfDACH( val IN VARCHAR2, obj IN DACH_Type  )
  RETURN VARCHAR2
  IS
  BEGIN
    IF val='ZA996' THEN RETURN TO_CHAR(obj.ZA996); END IF;
    IF val='ZA819' THEN RETURN TO_CHAR(obj.ZA819); END IF;
    IF val='ZA820' THEN RETURN TO_CHAR(obj.ZA820); END IF;
    return '';
  END getValOfDACH;
  
  /*
  *   insertion d'un incident paie hors absence (a la fin de du traitement)
  */
PROCEDURE insertIncidentPaieHorsAbs( nbrHeur IN NUMBER,dateActu IN DATE, p_unIncident IN SituationType, p_login IN VARCHAR2 )
  IS
  seq NUMBER:='';
  BEGIN
  
  select SEQ_TGE_INCIDENTS_PAIE.NEXTVAL into seq from dual;
  
  INSERT INTO TGE_INCIDENTS_PAIE
	 (ID, NUMPAC, PAIEZAD, PERIODE, TYPE_TRAITEMENT, DATE_EFFET, TYPE_IP, CODE_IP
			, CODE_IMPUTATION, HEURES, ORIGINE, LOGIN_CREATE, DATE_CREATE, ROLE_CREATE, ORIGINE_CREATE
			, LOGIN_MAJ, DATE_MAJ, ROLE_MAJ, ORIGINE_MAJ, CLE_IMPORT, CLE_ABSENCE, IDPACMAT, ENVOYE, JOUR_OUVRABLE
			,JOUR_OUVRE , JOUR_OEUVRE, JOUR_CALENDAIRE, JOUR_HEURES )
			 values (
			  seq --ID
			  , p_unIncident.numPac --NUMPAC
			  , p_unIncident.paieZad --PAIEZAD
			  , TO_DATE((select periodeEnCours from TGE_REF_PAC where numpac=p_unIncident.numPac) , 'YYYYMM') --PERIODE
			  , (select CODETYPTRT  from (select CODETYPTRT from TGE_REF_TYPETRT where (NUMPAC=p_unIncident.numPac OR NUMPAC='*') and CODETYPTRT='TT' order by NUMPAC desc) where rownum = 1 ) --TYPE_TRAITEMENT
			  ,  dateActu --DATE_EFFET
			  , 'T' --TYPE_IP
			  , 'HP' --CODE_IP
			  , '' -- p_unIncident.code_imputation;
			  , nbrHeur --HEURES

			  , 'T' --ORIGINE
			  , p_login --LOGIN_CREATE
			  , sysdate --DATE_CREATE
			  , 'ADM' -- info non trouver :'( !!ROLE_CREATE DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , 'TRG_DIC_ADM_CONTRAT_HISTO' --ORIGINE_CREATE DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , p_login --LOGIN_MAJ
			  , sysdate --Date MAJ
			  , 'ADM' -- ROLE_MAJ
			  , 'TRG_DIC_ADM_CONTRAT_HISTO' --ORIGINE_MAJ DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER DANGER -------
			  , null --CLE_IMPORT

				,  null --CLE_ABSENCE
			  ,  p_unIncident.numpac||p_unIncident.pacmat --IDPACMAT
			  ,  '' --ENVOYE
			
			  ,  null -- p_unIncident.jour_ouvrable
			  ,  null -- p_unIncident.jour_ouvre
			  ,  null --p_unIncident.jour_oeuvre
			  ,  null --p_unIncident.jour_calendaire
			  ,  null --p_unIncident.jour_heures
			  );
  END;
  
  
  
  PROCEDURE principal( p_numpac IN VARCHAR2 
, old_za819 IN VARCHAR2 
, new_za819 IN VARCHAR2 
, old_za820 IN VARCHAR2 
, new_za820 IN VARCHAR2 
, p_matric IN VARCHAR2
, p_PAIEZAD IN VARCHAR2
, p_numcnt IN NUMBER
,  p_date_deb_char IN VARCHAR2 -- date debut projection
--,  p_date_fin2 IN DATE  -- date fin projection => à eliminer
  , p_date_fin_BO IN VARCHAR2
,  p_login IN VARCHAR2)
  IS
    cur_1 SYS_REFCURSOR; 
    cur_2 SYS_REFCURSOR; 
    cur_3 SYS_REFCURSOR; 
    cur_4 SYS_REFCURSOR; 
    debut_calcul_hp_DB DATE;
    v_period_en_cour varchar2(10);
    v_deb_retro varchar2(10);
    v_fin_per_gen_hp varchar2(10);
    
    
    
  BEGIN
  
  FSED.FSED_AVANCEMENT_PLSQL(147,'DEBUT CALC HP via TRIGGER matric:'||p_matric,'');


   IF((NVL(new_za820,'****') != NVL(old_za820,'***')) OR (NVL(new_za819,'******') != NVL(old_za819,'****'))) THEN 
   
      p_date_deb := TO_DATE(p_date_deb_char,'DD/MM/YYYY');


    /**** IS RETRO ? IS FUTUR *****/

    select pac.PERIODEENCOURS,pac.DEB_RETRO,tprp.fin_per_generation_hp  INTO v_period_en_cour,v_deb_retro,v_fin_per_gen_hp
      from tge_ref_pac pac
      inner join tge_periode_recueil_paiezad tprp 
       ON pac.PERIODEENCOURS=tprp.MOIS_PAIE and tprp.NUMPAC=pac.NUMPAC
      where pac.NUMPAC=p_numpac and tprp.PAIEZAD=p_paiezad ;

--IF DACH FUTUR ALORS pas calcul HP
    IF p_date_deb>v_fin_per_gen_hp THEN 
     FSED.FSED_AVANCEMENT_PLSQL(p_matric,'FIN CALC HP via TRIGGER! Date deb future matric:'||p_matric,'');
      RETURN; 
    END IF;

/**** IS retro ***/
IF v_deb_retro IS NOT NULL AND v_period_en_cour > v_deb_retro THEN

BEGIN
        SELECT
            debut_per_generation_hp  INTO debut_calcul_hp_DB
        FROM
            tge_periode_recueil_paiezad tprp
        WHERE
            tprp.numpac = p_numpac
            AND tprp.paiezad = p_paiezad
            AND tprp.mois_paie = --mois_paie_hp
                    (SELECT
                        MIN(tprp.mois_paie) as mois_paie_hp
                      FROM
                          tge_periode_recueil_paiezad tprp
                      INNER JOIN TGE_REF_PAC pac ON pac.NUMPAC = tprp.NUMPAC
                      WHERE
                          tprp.numpac = p_numpac
                          AND tprp.paiezad = p_paiezad
                          AND tprp.fin_periode_paie >= TO_DATE(p_date_fin_BO,'DD/MM/YYYY') --date_fin_BO au lieu de DATE_EFF pour le mode rétro
                          AND tprp.mois_paie >= greatest(pac.deb_histo_retro,TO_CHAR(ADD_MONTHS(TO_DATE(pac.periodeencours,'YYYYMM'), - pac.nb_mois_retro),'YYYYMM')));
  EXCEPTION
 WHEN others THEN
 	debut_calcul_hp_DB:=null;
 END;

/**** fin retro ****/
ELSE
/*** NOT RETRO ***/
BEGIN
        select debut_per_generation_hp  INTO debut_calcul_hp_DB 
            from tge_periode_recueil_paiezad 
            where numpac=p_numpac
              and PAIEZAD=p_paiezad
              and MOIS_PAIE=(select PERIODEENCOURS from tge_ref_pac where NUMPAC=p_numpac );
EXCEPTION
 WHEN others THEN
 	debut_calcul_hp_DB:=null;
 END;
END IF; -- END test is RETRO    


p_date_deb:=GREATEST(p_date_deb,NVL(debut_calcul_hp_DB,p_date_deb));

p_date_fin:=v_fin_per_gen_hp;

    IF p_date_fin IS NULL THEN 
      FSED.FSED_AVANCEMENT_PLSQL(p_matric,'FIN CALC HP via TRIGGER! Date fin null matric:'||p_matric,'');
    RETURN; END IF;

   sql_1:='SELECT * 
            FROM
              ( SELECT dcy.numpac            AS numpac, dcy.code_classe_horaire_ott AS code_classe_horaire_ott, dcy.date_debut              AS date_debut,
                dcy.date_fin                AS date_fin, dcy.code_cycle_ott          AS code_cycle_ott,
                cy1.code_canevas_cycle_ott  AS code_canevas_cycle_ott, cy1.nombre_jours_cycle      AS nombre_jours_cycle,
                cy1.num_jour_entree_canevas AS num_jour_entree_canevas,    cy2.num_jour_dans_cycle     AS num_jour_dans_cycle, cy2.nombre_heure_1          AS nombre_heure
                
              FROM tge_ref_dcy dcy,  tge_ref_cy1 cy1,  tge_ref_cy2 cy2
              WHERE  dcy.numpac              IN ('''|| p_numpac /*SUBSTR(:NEW.IDPACMAT,0,6)*/ ||''')
              AND  cy1.numpac                 = dcy.numpac  AND cy2.numpac                 = cy1.numpac
              AND dcy.code_cycle_ott         = cy1.code_cycle_ott  AND cy1.code_canevas_cycle_ott = cy2.code_canevas_cycle_ott
              ORDER BY dcy.code_cycle_ott, dcy.code_classe_horaire_ott, cy1.code_canevas_cycle_ott, cy1.num_jour_entree_canevas
              ) pivot 	( MAX(nombre_heure) FOR num_jour_dans_cycle IN ( 	''1'' AS "NOMBRE_HEURE_1", ''2'' AS "NOMBRE_HEURE_2", ''3'' AS "NOMBRE_HEURE_3",
                                            ''4'' AS "NOMBRE_HEURE_4", ''5'' AS "NOMBRE_HEURE_5", ''6'' AS "NOMBRE_HEURE_6", ''7'' AS "NOMBRE_HEURE_7",
                                            ''8'' AS "NOMBRE_HEURE_8", ''9'' AS "NOMBRE_HEURE_9", ''10'' AS "NOMBRE_HEURE_10", ''11'' AS "NOMBRE_HEURE_11",
                                            ''12'' AS "NOMBRE_HEURE_12", ''13'' AS "NOMBRE_HEURE_13", ''14'' AS "NOMBRE_HEURE_14", ''15'' AS "NOMBRE_HEURE_15",
                                            ''16'' AS "NOMBRE_HEURE_16", ''17'' AS "NOMBRE_HEURE_17", ''18'' AS "NOMBRE_HEURE_18", ''19'' AS "NOMBRE_HEURE_19",
                                            ''20'' AS "NOMBRE_HEURE_20", ''21'' AS "NOMBRE_HEURE_21")
                    ) ORDER BY numpac, code_classe_horaire_ott, date_debut';
        
        
sql_2:='select numpac, code_hor_pres, date_debut, date_fin, hrs_lundi, hrs_mardi, hrs_mercredi, hrs_jeudi, hrs_vendredi, hrs_samedi, hrs_dimanche 
		  	 FROM   tge_ref_hpr 
		  	 WHERE  numpac               		IN ('''|| p_numpac ||''')
          ORDER BY numpac, code_hor_pres, date_debut';


/* A819,A820,A996 valeur alimenter manuellement dans Java*/
sql_3:='select M.NUMPAC,M.ELEMENT,M.OCCURENCE,M.DONNEEGXP,M.TABLEGXP,M.DONNFILTRE,M.OPERFILTRE,M.VALFILTRE,M.TRTPARTICULIER,M.ENVOI_SYSTEMATIQUE,M.FORCABLE_ECRAN_GENERE 
          from TGE_REF_MAPDO M  
          where ( ELEMENT IN (''A819'',''A820'',''A996'') ) 
          and  (((SELECT COUNT(1) FROM TGE_REF_MAPDO WHERE NUMPAC= '''||p_numpac||''' AND  ELEMENT = M.ELEMENT ) > 0 AND  M.NUMPAC='''||p_numpac||''')
              OR ((SELECT COUNT(1) FROM TGE_REF_MAPDO WHERE NUMPAC='''||p_numpac||''' AND ELEMENT = M.ELEMENT) = 0 AND M.NUMPAC=''*'' ))';

/* les colonne FIN_PER_GENERATION_HP et DEBUT_PER_GENERATION_HP sont null pour les alimenter manuellement lors d'itération*/
sql_4:='select PAIEZAD,MATRIC,TYPE_WRITER,ZAA91,ZAA92,ZAA93,CODE_GTA,ZA914,CMPPCS,ZAB12,ZAB13,ZAB14,ZMODCNT,ZAB15,ZAB16,ZAB17,ZAB18,ZA719,ZAB05,ZAB06,ZAB07,ZAB08,ZAB09,ZAB10,ZAB11,DATE_SORTIE_SIT_BO,DATE_CREATION,DATE_DERNIERE_MODIF,DATE_FIN_BO,ZX528,ZX734,DSA302,DSCDDCDI,COLPRES,HHDCN,REPBNDF,DSRCDDCDI,TCDDCDI,ZA996,DSA751,DSAGM,DSAGP,DSANCR,DSATO,DSDAP,DSDCP,DSDECH,DSDJTP,DSDNP,DSDPE,DSDPEN,DSDPN,DSDPP,DSEPL,DSES1,DSES2,DSFCNI,DSFCNP,DSFCP,DSFICH,DSFNP,DSFPE,DSFPN,DSFPP,DSFSUS,DSNLI,DSRNVL,DSRPCH,DSSAD,DSSCG,DSSTC,EMPLOI,ESSAI,FILIR,IFCDD,JJCNT,JJESS1,JJESS2,JJESS4,MAJHA,METIER,MMCNT,MMESS1,MMESS2,MMESS4,MNTPEN,MOTAUG,MOTAUI,MTAUG,MTAUI,NBCSP,NICSP,NIVECH,NUMAPP,NUMDUE,NUMPCS,OTT,PEREMP,PPSAL,PRAUG,PRAUI,PREAVI,PREFF,PRPAY,PRVNP,QUALPE,RECAPE,REFCG,RETRAI,RNVESS,RVCNT,SAFBA,SENET,SITADM,SSFIL,TATR,TPNAB,TXACT,TXAID,TXEMP,TYPAGM,TYSUB,VALTF,VALTR,ZA364,ZA365,ZA368,ZA380,ZA406,ZA523,ZA554,ZA557,ZA626,ZA640,ZA650,ZA656,ZA700,ZA701,ZA750,ZA754,ZA755,ZA819,ZA820,ZA962,ZAA84,ZAA85,ZB071,ZB133,ZB193,ZB224,ZB330,ZB368,ZB369,ZB647,ZB648,ZB883,ZP895,ZQ183,ZQ188,ZQ272,ZQ764,ZREACT,ZT061,NUMPAC,PACMAT,NUMCNT,DATE_EFF,DATE_FIN,AACNT,AAESS4,ACDADM,ACDALC,ACDFNE,AFFS02,AIPAT,ALSMO,APARCE,AVNAA,AVNAL,AVNAN,AVNAV,AVNTIC,CADRE,CAMSA,CASAS,CATAFP,CBUD,CE,CFE,CFEAT,CFECV,CFEDC,CFEEM,CFEES,CFEMA,CFESF,CFEVE,CFEVI,CHTYPC,CLNC,CODCPN,CODETB,CODSTE,COEFF,COFRON,COMCNT,COMURB,CSCOMP,CSRTT,CSTAPA,CVCOLL,DICDD,DRPAI2,DSA277,DSA301,TUTEUR,NUMURS_PRT,SIREN_PRT,STATUT_PRT,CODAGE_INT,CODSOC_INT,IDPACMAT,ACT_ORG,BU_ORG,DSAUI,DERUSA,DSFINC,MAAFFP,
              null as DEBUT_PER_GENERATION_HP, 
              null as FIN_PER_GENERATION_HP
            from DIC_ADM_CONTRAT_HISTO where 
                NUMPAC = '''|| p_numpac || ''''
             || ' AND PACMAT ='''|| p_matric || ''''
             || ' AND numcnt ='''|| p_numcnt||'''' 
                
             || ' AND TO_CHAR(date_eff,''YYYYMMDD'') <= ' ||  TO_CHAR(p_date_fin ,'YYYYMMDD') 
             || ' AND ( TO_CHAR(date_fin,''YYYYMMDD'')  >= '  ||  TO_CHAR(p_date_deb ,'YYYYMMDD') 
             || ' OR date_fin IS NULL) 
               
                ORDER BY matric asc, date_eff asc' ;


/*****************************************************************************/
/******************** loadCyclesGroupByPacAndClasseHorOtt ********************/
/*****************************************************************************/
cpt:=1; lst_1:=type_List_arr();
  OPEN cur_1 FOR sql_1;
  LOOP
     FETCH cur_1 INTO cur_TgeRefDcy; EXIT WHEN cur_1%NOTFOUND;
      lst_1.extend;
      lst_1(cpt) :=cur_TgeRefDcy;
      cpt:=cpt+1;
  END LOOP;


/*****************************************************************/
/******************** loadCyclesHprGroupByPac ********************/
/*****************************************************************/
cpt:=1; lst_2:=type_List_arr_2();
  OPEN cur_2 FOR sql_2;
  LOOP
     FETCH cur_2 INTO cur_TgeRefhpr; EXIT WHEN cur_2%NOTFOUND;
    lst_2.extend;
    lst_2(cpt) :=cur_TgeRefhpr;
    cpt:=cpt+1;
  END LOOP;


/*****************************************************************/
/******************** getPopulationHistoContrat ********************/
/******************** chargerInfoElementMapDo ********************/
/*****************************************************************/
cpt:=1; lst_3:=type_List_arr_3();
  OPEN cur_3 FOR sql_3;
  LOOP
     FETCH cur_3 INTO cur_TgeRefmapdo; EXIT WHEN cur_3%NOTFOUND;
    lst_3.extend;
    lst_3(cpt) :=cur_TgeRefmapdo;
    cpt:=cpt+1;
  END LOOP;

/******************** chargerHistoContrat ********************/

cpt:=1; lst_4:=type_List_arr_4();
  OPEN cur_4 FOR sql_4;
  LOOP
     FETCH cur_4 INTO cur_dachtype; 
     EXIT WHEN cur_4%NOTFOUND;
    lst_4.extend;
    lst_4(cpt) :=cur_dachtype;
    lst_4(cpt).FIN_PER_GENERATION_HP := p_date_fin; 
    lst_4(cpt).DEBUT_PER_GENERATION_HP := p_date_deb; 
    cpt:=cpt+1;
  END LOOP;
  


  IF lst_4.COUNT >0 THEN
    delete from TGE_INCIDENTS_PAIE 
                  WHERE 
                  NUMPAC = p_numpac
                  AND PAIEZAD = p_PAIEZAD
                  AND TYPE_IP = 'T'
                  AND CODE_IP = 'HP'
                  AND DATE_EFFET  between p_date_deb AND p_date_fin;  -- sortie du boucle pour executer une seul fois
  END IF;
  
  lst_Situation:=SituationType_arr_2();
  arrCycleSituation:=type_List_arr();
  arrCycleSituation.extend;
    
    
  FOR k IN 1..lst_4.COUNT LOOP --K LOOP DACH
          lst_Situation.extend;
          
          /****** ajusterPeriodeSituation ******/
          IF (k=1 AND lst_4(k).DATE_EFF IS NOT NULL AND lst_4(k).DATE_EFF <p_date_deb) THEN 
              lst_4(k).DATE_EFF:=p_date_deb; --lst_4(cpt).DEBUT_PER_GENERATION_HP;
          END IF;  
   
          /***** build Situation *****/
          lst_Situation(k).numpac:=lst_4(k).NUMPAC;
          lst_Situation(k).Pacmat:=lst_4(k).Pacmat;
          lst_Situation(k).PaieZad:=lst_4(k).PaieZad;
          lst_Situation(k).DateDeb:=lst_4(k).DATE_EFF;
          lst_Situation(k).DateFin:=lst_4(k).FIN_PER_GENERATION_HP;
          
          --GET Donner specifier selon parametrage MAPDO
          --LOOP MAPDO
          FOR J IN 1..lst_3.COUNT LOOP --J LOOP
          
            --A996 / TYPE_GTA
            IF(lst_3(J).ELEMENT='A996' AND lst_3(J).NUMPAC=lst_4(k).NUMPAC) THEN
              lst_Situation(k).isGtaT1:=CASE WHEN getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k))='Z' THEN TRUE ELSE FALSE END;
            END IF; 
        
            -- Horaire Remu Presence
            --ZA819 / HORAIRE_REMUNERATION
            IF(lst_3(J).ELEMENT='A819') THEN
                    HoraireRemu := getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k));
                    
                     IF(lst_4(k).date_fin_BO=p_date_fin_BO) THEN
					 	HoraireRemu:=new_za819;
					 END IF;
                    
            END IF;
            --ZA820 / HORAIRE_PRESENCE
            IF(lst_3(J).ELEMENT='A820') THEN
                    HorairePres := getValOfDACH(lst_3(J).DONNEEGXP,lst_4(k));
                    
		            IF(lst_4(k).date_fin_BO=p_date_fin_BO) THEN
						HorairePres:=new_za820;
					END IF;
            END IF;
             --horairePres/horaireRemu =>Code_classe_horaire_ott
            IF(lst_3.count=J) THEN 
              IF(horairePres IS NOT NULL) THEN
                lst_Situation(k).Code_classe_horaire_ott:=TO_NUMBER(horairePres);
              END IF;
              IF(horaireRemu IS NOT NULL) THEN
                lst_Situation(k).Code_classe_horaire_ott:=TO_NUMBER(horaireRemu);
              END IF;
            END IF;          
            
          END LOOP; --FIN J MAPDO LOOP 
          
    cpt:=1;     
    
     FOR M IN 1..lst_1.COUNT LOOP
       IF( lst_1(M).CODE_CLASSE_HORAIRE_OTT=lst_Situation(k).Code_classe_horaire_ott)THEN
          arrCycleSituation(cpt):=lst_1(M);
          cpt:=cpt+1;
       END IF;     
     END LOOP;
     
      cpt:=1; 
     arrCycleHprSituation:=type_List_arr_2();
     arrCycleHprSituation.extend;
     FOR M IN 1..lst_2.COUNT LOOP
       IF( lst_2(M).Code_hor_pres=lst_Situation(k).Code_classe_horaire_ott)THEN
          arrCycleHprSituation(cpt):=lst_2(M);
          cpt:=cpt+1;
       END IF;     
     END LOOP;



     END LOOP; --END K LOOP DACH
     
     
     
  --decomposerArrCycle_DCY_SituationEnTrancheAndCreateHP
  FOR k IN 1..lst_Situation.COUNT LOOP   
     
     IF(arrCycleSituation.COUNT>0) THEN
     FOR W IN 1..arrCycleSituation.COUNT LOOP
     /* La date de début du premier cycle d'une situation doit être égale à la date de début de la situation La date de
         fin du dernier cycle d'une situation doit être égale à la  date de fin de la situation*/
        IF(lst_Situation(k).datedeb <= arrCycleSituation(W).Date_fin AND lst_Situation(k).datefin >= arrCycleSituation(W).Date_debut) THEN
          dateDebTranchSitu:=null; dateFinTranchSitu:=null;
          
          --La date d'effet du cycle est antérieure à la date de début de la situation, On se met sur la date début de la situation
          IF(arrCycleSituation(W).Date_debut <= lst_Situation(k).datedeb) THEN
            dateDebTranchSitu:=lst_Situation(k).datedeb;
           ELSE
            dateDebTranchSitu:=arrCycleSituation(W).Date_debut;
          END IF;
          
          --La date de fin d'effet du cycle est postérieur à la date de fin de la situation, On se met sur la date de fin de la situation
          IF(arrCycleSituation(W).Date_fin >= lst_Situation(k).datefin) THEN
            dateFinTranchSitu:=lst_Situation(k).datefin;
           ELSE
            dateFinTranchSitu:=arrCycleSituation(W).Date_fin;
          END IF;
          
          dateEnCours:=dateDebTranchSitu;

          --LOOP INSERT TGE_INCIDENTS_PAIE
          WHILE (dateEnCours <= dateFinTranchSitu) LOOP
             numJourCanevas:=calculateNumJourCanevas( arrCycleSituation(W), dateEnCours );
             nbreHeures:=getValOfCycle('NOMBRE_HEURE_'||numJourCanevas,arrCycleSituation(W));
             arrHoraireParJour(TO_CHAR(dateEnCours,'dd/mm/yyyy')):=nbreHeures;
             -- Insertion des HP
             insertIncidentPaieHorsAbs( nbreHeures ,dateEnCours, lst_Situation(k),p_login );
             dateEnCours:=dateEnCours+1;
          END LOOP; --LOOP WHILE   
        END IF; --FIN decomposerArrCycleDcySituationEnTrancheAndCreateHP
         
  /*******************************************************/
  
    --decomposerArrCycle_Hpr_SituationEnTrancheAndCreateHP
 
   IF(arrCycleSituation.count=0) THEN
    FOR W IN 1..arrCycleHprSituation.COUNT LOOP  
      /* La date de début du premier cycle d'une situation doit être égale à la date de début de la situation La date de
         fin du dernier cycle d'une situation doit être égale à la  date de fin de la situation*/
        IF(lst_Situation(k).datedeb <= arrCycleHprSituation(W).Date_fin AND lst_Situation(k).datefin >= arrCycleHprSituation(W).Date_debut) THEN
          dateDebTranchSitu:=null; dateFinTranchSitu:=null;
          
          --La date d'effet du cycle est antérieure à la date de début de la situation, On se met sur la date début de la situation
          IF(arrCycleHprSituation(W).Date_debut <= lst_Situation(k).datedeb) THEN
            dateDebTranchSitu:=lst_Situation(k).datedeb;
           ELSE
            dateDebTranchSitu:=arrCycleHprSituation(W).Date_debut;
          END IF;
          
          --La date de fin d'effet du cycle est postérieur à la date de fin de la situation, On se met sur la date de fin de la situation
          IF(arrCycleHprSituation(W).Date_fin >= lst_Situation(k).datefin) THEN
            dateFinTranchSitu:=lst_Situation(k).datefin;
           ELSE
            dateFinTranchSitu:=arrCycleHprSituation(W).Date_fin;
          END IF;
          
          dateEnCours:=dateDebTranchSitu;
          
          --LOOP INSERT TGE_INCIDENTS_PAIE
          WHILE (dateEnCours <= dateFinTranchSitu) LOOP
             jourSemaine:=calculateNomJourCanevas( arrCycleHprSituation(W), dateEnCours );
             nbreHeures:=getHprHoursNbre(numJourCanevas,arrCycleHprSituation(W));
             arrHoraireParJour(TO_CHAR(dateEnCours,'dd/mm/yyyy')):=nbreHeures;
             -- Insertion des HP
             insertIncidentPaieHorsAbs( nbreHeures ,dateEnCours, lst_Situation(k), p_login );
             dateEnCours:=dateEnCours+1;
          END LOOP; --LOOP WHILE TGE_INCIDENTS_PAIE
 
        END IF; -- END IF INTO THE LOOP
    END LOOP; --FIN decomposerArrCycleHprSituationEnTrancheAndCreateHP
  END IF; --END IF arrCycleSituation vide
  END LOOP; --END LOOP parcour situation
  END IF;
  END LOOP;  --END LOOP Situation génerer
    

      
      
  END IF; -- END IF CHANGEMENT ZA
  

  FSED.FSED_AVANCEMENT_PLSQL(147,'FIN CALC HP via TRIGGER matric:'||p_matric,'');

  EXCEPTION
 WHEN others THEN
	 BEGIN 
	 FSED.FSED_AVANCEMENT_PLSQL(147,'CALCULE HP ERREUR CRITIQUE PAIEZAD: '||p_matric,'MAtric:'||p_matric || ' => ' || SQLCODE || ' - ' || SQLERRM);
	  EXCEPTION
	 WHEN others THEN
	  RETURN;
 END;

 END;

END CALC_HP;
##
TAG_CHARSET=@€éèç
##
FSED
=SQL=
CREATE OR REPLACE PACKAGE FSED 
AS
 FUNCTION getTypeTable(
 p_table IN VARCHAR2)
 RETURN VARCHAR2;
 FUNCTION getClauseSelect(
 p_numpac IN VARCHAR2,
 p_nom_table_ou_alias IN VARCHAR2,
 p_donneegxp IN VARCHAR2,
 p_donnfiltre IN VARCHAR2,
 p_operfiltre IN VARCHAR2,
 p_valfiltre IN VARCHAR2,
 p_trtparticulier IN VARCHAR2,
 p_envoi_systematique IN VARCHAR2,
 p_data_type IN VARCHAR2,
 p_type_zadig IN VARCHAR2,
 p_masque IN VARCHAR2,
 p_occ IN VARCHAR2,
 p_avec_balises_photo IN BOOLEAN)
 RETURN VARCHAR2;
 PROCEDURE FSED_ERREUR(
 p_id      IN NUMBER,
 p_nomproc IN VARCHAR2,
 p_idDate  IN VARCHAR2,
 p_erreur  IN CLOB );
 PROCEDURE preparation_FSED_unit(
 p_nomTable    IN VARCHAR2,
 p_alias       IN VARCHAR2,
 p_TABLETYPE   IN VARCHAR2,
 p_id_trt      IN NUMBER,
 p_numpac      IN VARCHAR2,
 p_periode     IN VARCHAR2,
 p_ALLERRETOUR IN VARCHAR2,
 p_nb_mois_paie_init IN NUMBER);
 PROCEDURE preparation_FSED(
 p_id_trt  IN NUMBER,
 p_numpac  IN VARCHAR2,
 p_periode IN VARCHAR2);
 PROCEDURE retour_Fsed(
 p_id IN NUMBER );
 PROCEDURE insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER);
 PROCEDURE insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2);
 PROCEDURE sous_insertCart80(
 p_id    IN NUMBER,
 p_newId IN NUMBER) ;
 PROCEDURE sous_insertCart30(
 p_id    IN NUMBER,
 p_newId IN NUMBER,
 p_table IN VARCHAR2) ;
 PROCEDURE maj_CAD30(
 p_id IN NUMBER) ;
 PROCEDURE getPeriodeRecueil(
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 PROCEDURE tmp_histo_fsed_30(
 p_id  IN NUMBER ,
 p_numpac  IN TGE_REF_MAPDO.NUMPAC%TYPE,
 p_moi IN VARCHAR2);
 procedure FSED_AVANCEMENT_PLSQL(
 p_id             IN NUMBER,
 p_typeAction     IN VARCHAR2,
 p_detailAction   IN CLOB );
 PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2);
 PROCEDURE insert_gap_trt(
 p_id          IN NUMBER ,
 p_numpac      IN TGE_REF_PAC.numpac%type,
 p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_type_retour IN VARCHAR2);
 PROCEDURE insert_gap_trt_suivi(
 p_id               IN NUMBER ,
 p_statut           IN TGE_REF_PAC.numpac%type,
 p_code_retour_zpp  IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
 p_login            IN VARCHAR2,
 p_type_retour     IN VARCHAR2);
 PROCEDURE getPeriodeRecueilEvol(
 p_id      IN NUMBER,
 p_numpac  IN TGE_REF_PAC.numpac%type,
 p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
 p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
 p_dateDeb IN OUT DATE,
 p_dateFin IN OUT DATE);
 END FSED;
##
FSED
=SQL=
create or replace PACKAGE body FSED AS
  /********************************************************************************
  Version     : V5.05.00
  *********************************************************************************/
  err_msg  VARCHAR(1000);
  err_code VARCHAR(200);
type pour_comp
IS
  record
  (
    CLE     VARCHAR2(1000),
    numpac  VARCHAR2(6),
    pacmat  VARCHAR2(8),
    paiezad VARCHAR2(8),
    dteffet DATE,
    dtfin   DATE,
    rank    NUMBER,
    C1      VARCHAR2(1000),
    C2      VARCHAR2(1000),
    C3      VARCHAR2(1000),
    C4      VARCHAR2(1000),
    C5      VARCHAR2(1000),
    C6      VARCHAR2(1000),
    C7      VARCHAR2(1000),
    C8      VARCHAR2(1000),
    C9      VARCHAR2(1000),
    C10     VARCHAR2(1000),
    C11     VARCHAR2(1000),
    C12     VARCHAR2(1000),
    C13     VARCHAR2(1000),
    C14     VARCHAR2(1000),
    C15     VARCHAR2(1000),
    C16     VARCHAR2(1000),
    C17     VARCHAR2(1000),
    C18     VARCHAR2(1000),
    C19     VARCHAR2(1000),
    C20     VARCHAR2(1000),
    C21     VARCHAR2(1000),
    C22     VARCHAR2(1000),
    C23     VARCHAR2(1000),
    C24     VARCHAR2(1000),
    C25     VARCHAR2(1000),
    C26     VARCHAR2(1000),
    C27     VARCHAR2(1000),
    C28     VARCHAR2(1000),
    C29     VARCHAR2(1000),
    C30     VARCHAR2(1000) );
TYPE DATE_A275_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_A275_h DATE );
TYPE TAB_DATE_A275_H
IS
  TABLE OF DATE_A275_h INDEX BY binary_integer ;
TYPE DATE_w580_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_W580_h VARCHAR2(8) );
TYPE TAB_DATE_w580_H
IS
  TABLE OF DATE_w580_h INDEX BY binary_integer ;
TYPE DATE_WL52_h
IS
  RECORD
  (
    numpac        VARCHAR2(6),
    IDPACMAT      VARCHAR2(14),
    donnee_WL52_h VARCHAR2(8) );
TYPE TAB_DATE_WL52_H
IS
  TABLE OF DATE_WL52_h INDEX BY binary_integer ;
TYPE TAB_pour_comp
IS
  TABLE OF pour_comp INDEX BY binary_integer ;
type pour_lib
IS
  record
  (
    LIB         VARCHAR2(1000),
    TYPE_DONNEE VARCHAR2(1),
    OCC         VARCHAR2(2) );
TYPE TAB_pour_lib
IS
  TABLE OF pour_lib INDEX BY binary_integer ;
type pour_retour
IS
  record
  (
    ID_TRT      NUMBER,
    NUMPAC      VARCHAR2(6),
    CLE         VARCHAR2(1000),
    pacmat      VARCHAR2(8),
    ELEM        VARCHAR2(1000),
    OCC         VARCHAR2(2),
    VALEUR      VARCHAR2(1000),
    CODEOP      VARCHAR2(1),
    TYPE_DONNEE VARCHAR2(1),
    DTEFFET     DATE,
    paiezad     VARCHAR2(8));
TYPE TAB_pour_retour
IS
  TABLE OF pour_retour INDEX BY binary_integer ;
type pour_cle
IS
  record
  (
    column_name VARCHAR2(255),
    data_type   VARCHAR2(255));
TYPE TAB_cle
IS
  TABLE OF pour_cle INDEX BY binary_integer ;
  CURSOR cur_lig (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT *
    FROM TGE_IMPORT_FSED
    WHERE id_trt             =p_id
    AND SUBSTR(donnees,7,2) IN ('00','11','15','17','99')
    ORDER BY num_lig;
TYPE t_TGE_REF_VRREP
IS
  TABLE OF TGE_REF_VRREP%rowtype;
TYPE t_TGE_REF_VRDES
IS
  TABLE OF TGE_REF_VRDES%rowtype;
TYPE t_TGE_REF_VRVAL
IS
  TABLE OF TGE_REF_VRVAL%rowtype;
TYPE t_TGE_REF_RUBRIQUE
IS
  TABLE OF TGE_REF_RUBRIQUE%rowtype;
TYPE t_TGE_REF_LIBRUB_COTIS
IS
  TABLE OF TGE_REF_LIBRUB_COTIS%rowtype;
TYPE t_TGE_REF_RUBRIQUE_CONTEXTE
IS
  TABLE OF TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
TYPE t_TGE_REF_DICOZ
IS
  TABLE OF TGE_REF_DICOZ%rowtype;
TYPE t_TGE_IMPORT_FSED
IS
  TABLE OF TGE_IMPORT_FSED%rowtype;
TYPE t_CODE_TABLE
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(15) ;
TYPE t_numLig_00
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
TYPE t_numLig_99
IS
  TABLE OF NUMBER INDEX BY binary_integer ;
  lig t_TGE_IMPORT_FSED;
  tab_11R t_TGE_REF_VRREP;
  elt_tab_11R TGE_REF_VRREP%rowtype;
  tab_11D t_TGE_REF_VRDES;
  elt_tab_11D TGE_REF_VRDES%rowtype;
  tab_11D1 t_TGE_REF_VRDES;
  elt_tab_11D1 TGE_REF_VRDES%rowtype;
  tab_11V t_TGE_REF_VRVAL;
  elt_tab_11V TGE_REF_VRVAL%rowtype;
  tab_15 t_TGE_REF_RUBRIQUE;
  tab_15_lib t_TGE_REF_LIBRUB_COTIS;
  elt_tab_15 TGE_REF_RUBRIQUE%rowtype;
  elt_tab_15_lib TGE_REF_LIBRUB_COTIS%rowtype;
  tab_17CR t_TGE_REF_RUBRIQUE_CONTEXTE;
  elt_tab_17CR TGE_REF_RUBRIQUE_CONTEXTE%rowtype;
  tab_17DMF t_TGE_REF_DICOZ;
  elt_tab_17DMF TGE_REF_DICOZ%rowtype;
  w_Error_code    NUMBER(2)    :=0 ;
  w_Error_msg     VARCHAR2(255):= '';
  v_cmpt_numLigne NUMBER       := 0;
  code_table_liste t_CODE_TABLE;
  valdebug VARCHAR2(1);
  tab_numLigne00 t_numLig_00;
  tab_numligne99 t_numLig_99;
  DicoPret          VARCHAR2(30);
  soldePret         VARCHAR2(30);
  MontantPret       VARCHAR2(30);
  DicoOpposition    VARCHAR2(30);
  soldeOpposition   VARCHAR2(30);
  MontantOpposition VARCHAR2(30);
  coldteffet        VARCHAR2(30);
  coldatecle        VARCHAR2(30);
  oldclemat         VARCHAR2(20);
  oldvaleur         VARCHAR2(1000);
  MatARenvoyer      VARCHAR2(20);
  DTEFFET_TO_SEND   DATE;
  mMoins1           DATE;
  CURSOR cur_numlig00 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='00'
    ORDER BY num_lig;
  CURSOR cur_numlig99 (p_id TGE_IMPORT_FSED.id_trt%TYPE)
  IS
    SELECT num_lig
    FROM TGE_IMPORT_FSED
    WHERE id_trt            =p_id
    AND SUBSTR(donnees,7,2) ='99'
    ORDER BY num_lig;
PROCEDURE FSED_AVANCEMENT(
    id  IN NUMBER,
    txt IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  IF valdebug IS NULL THEN
    SELECT is_debug INTO valdebug FROM TGE_FSED_IS_DEBUG;
  END IF;
  IF valdebug='O' THEN
    INSERT INTO TGE_FSED_AVANCEMENT_proc VALUES
      (id,systimestamp,txt
      );
    COMMIT;
  END IF;
END FSED_AVANCEMENT;
PROCEDURE FSED_ERREUR
  (
    p_id      IN NUMBER,
    p_nomproc IN VARCHAR2,
    p_idDate  IN VARCHAR2,
    p_erreur  IN CLOB
  )
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_FSED_ERREUR
    (
      ID,
      PROC,
      PARAM,
      MESSAGE,
      date_err
    )
    VALUES
    (
      p_id ,
      p_nomproc,
      p_idDate ,
      p_erreur,
      sysdate
    );
  COMMIT;
END FSED_ERREUR;
PROCEDURE FSED_AVANCEMENT_PLSQL(
    p_id           IN NUMBER,
    p_typeAction   IN VARCHAR2,
    p_detailAction IN CLOB)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  line   VARCHAR(32672);
  status INT;
BEGIN
  INSERT
  INTO TGE_AVANCEMENT_PLSQL
    (
      NUM,
      TYPE_ACTION,
      DATE_ACTION,
      DETAIL_ACTION
    )
    VALUES
    (
      p_id ,
      p_typeAction,
      SYSTIMESTAMP,
      p_detailAction
    );
  COMMIT;
END FSED_AVANCEMENT_PLSQL;
PROCEDURE remplissage_ligne
  (
    tabRetour   IN OUT nocopy TAB_pour_retour,
    tab         IN pour_comp,
    tablib      IN pour_lib,
    p_id_trt    IN NUMBER,
    p_numretour IN OUT NUMBER,
    p_numcol    IN NUMBER,
    p_code_op   IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2
  )
AS
  VALEUR_TO_SEND VARCHAR2
  (
    1000
  )
  ;
BEGIN
  IF p_numcol      =0 THEN
    VALEUR_TO_SEND:=tab.C1;
  elsif p_numcol   =1 THEN
    VALEUR_TO_SEND:=tab.C2;
  elsif p_numcol   =2 THEN
    VALEUR_TO_SEND:=tab.C3;
  elsif p_numcol   =3 THEN
    VALEUR_TO_SEND:=tab.C4;
  elsif p_numcol   =4 THEN
    VALEUR_TO_SEND:=tab.C5;
  elsif p_numcol   =5 THEN
    VALEUR_TO_SEND:=tab.C6;
  elsif p_numcol   =6 THEN
    VALEUR_TO_SEND:=tab.C7;
  elsif p_numcol   =7 THEN
    VALEUR_TO_SEND:=tab.C8;
  elsif p_numcol   =8 THEN
    VALEUR_TO_SEND:=tab.C9;
  elsif p_numcol   =9 THEN
    VALEUR_TO_SEND:=tab.C10;
  elsif p_numcol   =10 THEN
    VALEUR_TO_SEND:=tab.C11;
  elsif p_numcol   =11 THEN
    VALEUR_TO_SEND:=tab.C12;
  elsif p_numcol   =12 THEN
    VALEUR_TO_SEND:=tab.C13;
  elsif p_numcol   =13 THEN
    VALEUR_TO_SEND:=tab.C14;
  elsif p_numcol   =14 THEN
    VALEUR_TO_SEND:=tab.C15;
  elsif p_numcol   =15 THEN
    VALEUR_TO_SEND:=tab.C16;
  elsif p_numcol   =16 THEN
    VALEUR_TO_SEND:=tab.C17;
  elsif p_numcol   =17 THEN
    VALEUR_TO_SEND:=tab.C18;
  elsif p_numcol   =18 THEN
    VALEUR_TO_SEND:=tab.C19;
  elsif p_numcol   =19 THEN
    VALEUR_TO_SEND:=tab.C20;
  elsif p_numcol   =20 THEN
    VALEUR_TO_SEND:=tab.C21;
  elsif p_numcol   =21 THEN
    VALEUR_TO_SEND:=tab.C22;
  elsif p_numcol   =22 THEN
    VALEUR_TO_SEND:=tab.C23;
  elsif p_numcol   =23 THEN
    VALEUR_TO_SEND:=tab.C24;
  elsif p_numcol   =24 THEN
    VALEUR_TO_SEND:=tab.C25;
  elsif p_numcol   =25 THEN
    VALEUR_TO_SEND:=tab.C26;
  elsif p_numcol   =26 THEN
    VALEUR_TO_SEND:=tab.C27;
  elsif p_numcol   =27 THEN
    VALEUR_TO_SEND:=tab.C28;
  elsif p_numcol   =28 THEN
    VALEUR_TO_SEND:=tab.C29;
  elsif p_numcol   =29 THEN
    VALEUR_TO_SEND:=tab.C30;
  END IF;
  --préparer envoi si NULL ou autre que valeur "ne pas envoyer"
  IF VALEUR_TO_SEND IS NULL OR VALEUR_TO_SEND <>'_NOTSEND_' THEN
    IF p_code_op     ='S' THEN
      --les suppressions sont des envois à blanc
      VALEUR_TO_SEND:=NULL;
    END IF;
    --si historique, pour la colonne en cours, contrôle des doublons (même pacmat / paiezad / valeur).
    IF coldteffet = 'a.DATE_EFF' THEN
      --tester les doublons même matricule (déjà écrit) et même valeur
      IF MatARenvoyer=tab.pacmat||'#'||tab.paiezad AND oldvaleur=NVL(VALEUR_TO_SEND,'@NULL@') THEN
        RETURN;
      END IF;
      --tester la rupture matricule en cours (pas forcément écrit) et valeur
      IF oldclemat<>tab.pacmat||'#'||tab.paiezad OR oldvaleur<>NVL(VALEUR_TO_SEND,'@NULL@') THEN
        --mémoriser le matricule
        oldclemat:=tab.pacmat||'#'||tab.paiezad;
        --mémoriser la valeur de cette colonne historique
        oldvaleur:=NVL(VALEUR_TO_SEND,'@NULL@');
        --mémoriser la date d'effet pour transmettre aux lignes futures de même valeur
        DTEFFET_TO_SEND:=tab.DTEFFET;
      END IF;
      IF p_code_op ='D' THEN
        --préparation du prochain contrôle de doublon effectuée, sortir.
        RETURN;
      END IF;
    ELSE
      --quand c'est pas un historique on recopie la date d'effet du tableau
      DTEFFET_TO_SEND:=tab.DTEFFET;
    END IF;
    --éliminer le passé
    IF NVL(tab.DTFIN,to_date('31.12.2099','dd.mm.yyyy'))            >= mMoins1 THEN
      tabRetour(p_numretour).VALEUR                                 :=VALEUR_TO_SEND;
      tabRetour(p_numretour).DTEFFET                                :=DTEFFET_TO_SEND;
      tabRetour(p_numretour).CLE                                    :=tab.CLE;
      tabRetour(p_numretour).pacmat                                 :=tab.pacmat;
      tabRetour(p_numretour).paiezad                                :=tab.paiezad;
      tabRetour(p_numretour).ELEM                                   :=tablib.LIB;
      tabRetour(p_numretour).CODEOP                                 :=p_code_op;
      tabRetour(p_numretour).TYPE_DONNEE                            :=tablib.TYPE_DONNEE;
      IF LENGTH(TRIM(TRANSLATE(tablib.OCC, ' +-.0123456789', ' '))) IS NULL THEN
        --occurrence numérique indiquée dans MAPDO
        tabRetour(p_numretour).OCC :=tablib.OCC;
      ELSE
        IF tablib.OCC     ='**' OR tablib.OCC='*F' OR tablib.OCC='*I' THEN
          IF p_TABLETYPE <>'OCCURS' THEN
            --occurrences spéciales, ce ne sont pas des occurrences Zadig donc on vide
            tabRetour(p_numretour).OCC :=NULL;
          ELSE
            --pour le type OCCURS valoriser OCC avec le rang par exemple 3ème enfant OCC=3
            tabRetour(p_numretour).OCC:=tab.RANK;
          END IF;
        ELSE
          --occurrence bizarre dans MAPDO (ni numérique, ni ** ni *F ni *I)
          tabRetour(p_numretour).OCC :=tablib.OCC;
        END IF;
      END IF;
      --incrémenter le n° de ligne pour anticiper la ligne suivante
      p_numretour:=p_numretour+1;
      --au moins 1 histo écrit, forcer l'écriture des prochaines dates d'effet suivantes.
      MatARenvoyer:=tab.pacmat||'#'||tab.paiezad;
    END IF;
  END IF;
END remplissage_ligne;
------------------------------------
 FUNCTION GET_NB_MOIS_PAIE_INIT
 RETURN NUMBER
 IS
 p_nb_mois_paie_init SYS_VARSYS.VALVAR%type ;
 BEGIN
 BEGIN
 select TO_NUMBER(NVL(VALVAR,'0')) into p_nb_mois_paie_init from SYS_VARSYS where MODULE = 'GAP' and CODVAR = 'NB_MOIS_PAIE_INIT';
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 p_nb_mois_paie_init :=1;
 END ;
p_nb_mois_paie_init := p_nb_mois_paie_init-1;
RETURN p_nb_mois_paie_init;
 END GET_NB_MOIS_PAIE_INIT ;
------------------------------------
FUNCTION difference_col
  (
    tab1     IN pour_comp,
    tab2     IN pour_comp,
    p_numcol IN NUMBER
  )
  RETURN INTEGER
IS
BEGIN
  IF p_numcol=0 AND NVL(tab1.c1,'@NULL@') <>NVL(tab2.c1,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=1 AND NVL(tab1.c2,'@NULL@') <>NVL(tab2.c2,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=2 AND NVL(tab1.c3,'@NULL@') <>NVL(tab2.c3,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=3 AND NVL(tab1.c4,'@NULL@') <>NVL(tab2.c4,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=4 AND NVL(tab1.c5,'@NULL@') <>NVL(tab2.c5,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=5 AND NVL(tab1.c6,'@NULL@') <>NVL(tab2.c6,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=6 AND NVL(tab1.c7,'@NULL@') <>NVL(tab2.c7,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=7 AND NVL(tab1.c8,'@NULL@') <>NVL(tab2.c8,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=8 AND NVL(tab1.c9,'@NULL@') <>NVL(tab2.c9,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=9 AND NVL(tab1.c10,'@NULL@') <>NVL(tab2.c10,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=10 AND NVL(tab1.c11,'@NULL@') <>NVL(tab2.c11,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=11 AND NVL(tab1.c12,'@NULL@') <>NVL(tab2.c12,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=12 AND NVL(tab1.c13,'@NULL@') <>NVL(tab2.c13,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=13 AND NVL(tab1.c14,'@NULL@') <>NVL(tab2.c14,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=14 AND NVL(tab1.c15,'@NULL@') <>NVL(tab2.c15,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=15 AND NVL(tab1.c16,'@NULL@') <>NVL(tab2.c16,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=16 AND NVL(tab1.c17,'@NULL@') <>NVL(tab2.c17,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=17 AND NVL(tab1.c18,'@NULL@') <>NVL(tab2.c18,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=18 AND NVL(tab1.c19,'@NULL@') <>NVL(tab2.c19,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=19 AND NVL(tab1.c20,'@NULL@') <>NVL(tab2.c20,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=20 AND NVL(tab1.c21,'@NULL@') <>NVL(tab2.c21,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=21 AND NVL(tab1.c22,'@NULL@') <>NVL(tab2.c22,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=22 AND NVL(tab1.c23,'@NULL@') <>NVL(tab2.c23,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=23 AND NVL(tab1.c24,'@NULL@') <>NVL(tab2.c24,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=24 AND NVL(tab1.c25,'@NULL@') <>NVL(tab2.c25,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=25 AND NVL(tab1.c26,'@NULL@') <>NVL(tab2.c26,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=26 AND NVL(tab1.c27,'@NULL@') <>NVL(tab2.c27,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=27 AND NVL(tab1.c28,'@NULL@') <>NVL(tab2.c28,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=28 AND NVL(tab1.c29,'@NULL@') <>NVL(tab2.c29,'@NULL@') THEN
    RETURN 1;
  elsif p_numcol=29 AND NVL(tab1.c30,'@NULL@') <>NVL(tab2.c30,'@NULL@') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END difference_col;
FUNCTION getTypeTable
  (
    p_table IN VARCHAR2
  )
  RETURN VARCHAR2
IS
  v_typeTable VARCHAR2(1);
BEGIN
  BEGIN
    SELECT typetable
    INTO v_typeTable
    FROM
      (SELECT 'p' AS typetable
      FROM user_cons_columns
      WHERE table_name =p_table
        --faux PACMAT, c'est un PAIEZAD
      AND p_table         <> 'DIC_ADM_CONTRAT_HISTO'
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name='PACMAT'
      UNION
      SELECT 'z' AS typetable
      FROM user_cons_columns
      WHERE (table_name =p_table
        --PAIEZAD imposé
      OR p_table           = 'DIC_ADM_CONTRAT_HISTO')
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'PAIEZAD'
      UNION
      SELECT 'm' AS typetable
      FROM user_cons_columns
      WHERE table_name     =p_table
      AND constraint_name IN
        (SELECT user_constraints.constraint_name
        FROM user_constraints
        WHERE user_cons_columns.table_name =user_constraints.table_name
        AND CONSTRAINT_TYPE                ='P'
        )
      AND column_name= 'MATRIC'
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
  END;
  RETURN v_typeTable;
END getTypeTable;
PROCEDURE effaceMatricToutTable(
    p_numpac IN VARCHAR2,
    p_pacmat IN VARCHAR2 )
AS
  CURSOR cur_tables
  IS
    SELECT DISTINCT TABLEPHY
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
  UNION
  SELECT DISTINCT TABLEPHY
  FROM tge_ref_mapta
  WHERE numpac        = '*'
  AND ALLERRETOUR    IN ('A','2')
  AND TABLEPHY       <>'DIC_ADM_CONTRAT'
  AND TABLEPARAM NOT IN
    (SELECT TABLEPARAM
    FROM tge_ref_mapta
    WHERE numpac     = p_numpac
    AND ALLERRETOUR IN ('A','2')
    AND TABLEPHY    <>'DIC_ADM_CONTRAT'
    );
  lig_tables cur_tables%rowtype;
BEGIN
  OPEN cur_tables;
  LOOP
    FETCH cur_tables INTO lig_tables;
    EXIT
  WHEN cur_tables%NOTFOUND ;
    EXECUTE immediate 'DELETE FROM PHOTO_'||lig_tables.TABLEPHY||' where numpac=:2 and pacmat=:1' USING p_numpac,
    p_pacmat;
  END LOOP;
  CLOSE cur_tables;
END effaceMatricToutTable;
PROCEDURE getSoldMontant(
    p_numpac IN VARCHAR2 ,
    p_id_trt IN NUMBER,
    DicoPret OUT VARCHAR2 ,
    soldePret OUT VARCHAR2 ,
    MontantPret OUT VARCHAR2 ,
    DicoOpposition OUT VARCHAR2 ,
    soldeOpposition OUT VARCHAR2 ,
    MontantOpposition OUT VARCHAR2 )
AS
BEGIN
  SELECT MontantPret_DONNEE,
    SoldePret_DONNEE,
    DicoPret_DONNEE,
    MontantOpposition_DONNEE,
    SoldeOpposition_DONNEE,
    DicoOpposition_DONNEE
  INTO MontantPret,
    soldePret,
    DicoPret,
    MontantOpposition,
    soldeOpposition,
    DicoOpposition
  FROM
    (
    --ce SELECT fournit la liste element/donneegxp des éléments personnalisés
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste element/donneegxp des éléments Pac "*"
    SELECT DISTINCT a.element,
      a.DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments personnalisés
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac   =p_numpac
    AND t.tableparam =a.TABLEGXP
    AND b.table_name =a.TABLEGXP
    AND a.element   IN ('B712','B714','B832','B834')
    UNION ALL
    --ce SELECT fournit la liste 'DICO'||element/tableparam des dictionnaires des éléments Pac "*"
    SELECT DISTINCT 'DICO'
      ||a.element,
      a.TABLEGXP AS DONNEEGXP
    FROM tge_ref_mapdo a,
      (
      --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac     =p_numpac
      AND ALLERRETOUR IN ('A','2','I')
      UNION ALL
      SELECT *
      FROM tge_ref_mapta
      WHERE numpac        ='*'
      AND ALLERRETOUR    IN ('A','2','I')
      AND tableparam NOT IN
        (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
        )
      ) t ,
      user_tables b
    WHERE a.numpac     ='*'
    AND t.tableparam   =a.TABLEGXP
    AND b.table_name   =a.TABLEGXP
    AND a.element     IN ('B712','B714','B832','B834')
    AND a.element NOT IN
      (SELECT element
      FROM tge_ref_mapdo a,
        (
        --liste résolue "t" des tables MAPTA en Aller pour éviter les tables en Retour
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac     =p_numpac
        AND ALLERRETOUR IN ('A','2','I')
        UNION ALL
        SELECT *
        FROM tge_ref_mapta
        WHERE numpac        ='*'
        AND ALLERRETOUR    IN ('A','2','I')
        AND tableparam NOT IN
          (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
          )
        ) t ,
        user_tables b
      WHERE a.numpac   =p_numpac
      AND t.tableparam =a.TABLEGXP
      AND b.table_name =a.TABLEGXP
      )
    ) --fin de la liste des éléments et des dictionnaires empilés dans la même colonne
    --la fonction PIVOT transforme la liste element/donneegxp en distribution horizontale. Les lignes DICOB714 et DICOB834 sont abandonnées, on suppose que c'est le même dico.
    pivot (MAX(DONNEEGXP) AS DONNEE FOR element IN ('B712' AS MontantPret, 'B714' AS SoldePret, 'B832' AS MontantOpposition, 'B834' AS SoldeOpposition, 'DICOB712' AS DicoPret, 'DICOB832' AS DicoOpposition));
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id_trt , 'getSoldMontant ' ,p_id_trt||','||p_numpac , err_code||'-'||err_msg );
  raise;
END getSoldMontant;
PROCEDURE insert_gap_trt
(
    p_id          IN NUMBER ,
    p_numpac      IN TGE_REF_PAC.numpac%type,
    p_periode     IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_type_retour IN VARCHAR2 
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status      INT;
  v_dtdebMois VARCHAR2(8);
  v_finMois   VARCHAR2(8);
  v_periode TGE_REF_PAC.PERIODEENCOURS%TYPE;
  v_req CLOB;
BEGIN
  --get date debut et fin du mois
  FSED_AVANCEMENT(p_id,'insert_gap_trt Debut p_id='||p_id||';p_numpac='||p_numpac||';p_periode='||NVL(p_periode,v_periode)||';p_type_retour='||p_type_retour);
  SELECT periodeencours INTO v_periode FROM tge_ref_pac WHERE numpac =p_numpac;
  BEGIN
    SELECT DATE_DEBUT_MOIS,
      DATE_FIN_MOIS
    INTO v_dtdebMois,
      v_finMois
    FROM TGE_REF_PER
    WHERE numpac       = p_numpac
    AND periodeencours = NVL(p_periode,v_periode);
  EXCEPTION
  WHEN NO_data_Found THEN
    v_dtdebMois := v_periode ||'01';
    select to_char(last_day(to_date(to_char(v_periode),'yyyymm')),'YYYYMMDD') into v_finMois   from dual;
  WHEN OTHERS THEN
    v_dtdebMois :=null;
    v_finMois :=null;
  END;
  --La création dans GAP_TRT est donc conditionnée : on regarde s’il existe déjà dans GAP_TRT
  --une ligne pour N° d’échange, date de paie et Numpac (infos de la carte 00).
  v_req := 'MERGE into GAP_TRT USING (SELECT 1 FROM dual) ON ( ID_TRT= :p_id )';--AND NUMPAC = :p_numpac AND NUMERO_ECHANGE =''0000'' AND PERIODE_PAIE = :p_periode
  v_req := v_req ||' WHEN NOT MATCHED THEN INSERT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO) ';
  v_req := v_req ||' values (:p_id,:p_numpac,:p_periode,''0000'',''ALP'',:v_dtdebMois,:v_dtdebMois,:v_finMois,''TGEPAY'||p_numpac||'PACGXP'||NVL(p_periode,v_periode)||'0000'',sysdate,sysdate,sysdate,:p_type_retour)' ;
  EXECUTE IMMEDIATE v_req USING p_id,
  p_id,
  p_numpac,
  NVL(p_periode,v_periode),
  p_type_retour,
  v_dtdebMois,
  v_finMois,
  p_type_retour;
  COMMIT;
  FSED_AVANCEMENT(p_id,'insert_gap_trt Fin v_req='||v_req);
END insert_gap_trt;
PROCEDURE insert_gap_trt_suivi(
    p_id              IN NUMBER ,
    p_statut          IN TGE_REF_PAC.numpac%type,
    p_code_retour_zpp IN TGE_REF_PAC.PERIODEENCOURS%TYPE,
    p_login           IN VARCHAR2,
    p_type_retour     IN VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  status INT;
  v_req  VARCHAR2(3000);
BEGIN
  IF p_type_retour IN ('RR','RC','RN','CL') THEN
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Debut p_id='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login);
    v_req := 'INSERT INTO gap_trt_suivi(ID_TRT,DATE_EVT,STATUT,CODE_RETOUR_ZPP,LOGIN) VALUES (:p_id,SYSTIMESTAMP,:p_statut ,:p_code_retour_zpp,:p_login)';
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi ='||p_id||';p_statut='||p_statut||';p_code_retour_zpp='||p_code_retour_zpp||';p_login='||p_login||';v_req='||v_req);
    EXECUTE IMMEDIATE v_req USING p_id,
    p_statut,
    p_code_retour_zpp,
    p_login;
    COMMIT;
    FSED_AVANCEMENT(p_id,'insert_gap_trt_suivi Fin');
  END IF;
END insert_gap_trt_suivi;
/**********************************************************************
  Funct : preparation_FSED_unit 
  DESC  : 
***********************************************************************/
PROCEDURE preparation_FSED_unit(
    p_nomTable  IN VARCHAR2,
    p_alias     IN VARCHAR2,
    p_TABLETYPE IN VARCHAR2,
    p_id_trt    IN NUMBER,
    p_numpac    IN VARCHAR2,
    p_periode   IN VARCHAR2,
    p_ALLERRETOUR IN VARCHAR2,
     p_nb_mois_paie_init IN number)
AS
  --curseur sur MAPDO
  CURSOR cur_mapdo IS
    SELECT a.*,
      b.*,
      c.type AS typeZADIG,
      c.longueur,
      c.MASQUE
    FROM
      (SELECT *
      FROM tge_ref_mapdo
      WHERE numpac     =p_numpac
      AND (tablegxp    =p_alias
      AND element NOT IN ('A301','A302','A962')
        --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
      OR p_alias   ='VUE-A301-A302-A962'
      AND element IN ('A301','A302','A962'))
    UNION ALL
    SELECT *
    FROM tge_ref_mapdo
    WHERE numpac     ='*'
    AND (tablegxp    =p_alias
    AND element NOT IN ('A301','A302','A962')
      --Pour ces 3 éléments on impose un alias spécial, ils seront traités indépendamment.
    OR p_alias       ='VUE-A301-A302-A962'
    AND element     IN ('A301','A302','A962'))
    AND element NOT IN
      (SELECT element
      FROM tge_ref_mapdo
      WHERE numpac=p_numpac
      )
      ) a,
      (SELECT column_name,
        data_type
      FROM user_tab_columns
      WHERE table_name = p_nomTable
      ) b,
      (SELECT *
      FROM TGE_REF_DICOZ
      WHERE numpac=p_numpac
      ) C
    WHERE donneegxp  = column_name
    AND c.element    =a.element
    AND (donnfiltre IS NULL
    OR donnfiltre   IN
      (SELECT c.column_name
      FROM user_tab_columns c
      WHERE c.table_name = p_nomTable
      ))
    AND occurence NOT LIKE '%!%'
    ORDER BY a.element,a.occurence;

    lig_mapdo      cur_mapdo%rowtype;
    requete        CLOB;
    requetePhoto   CLOB;
    requeteTDIF    CLOB;
    clselect       CLOB;
    numcol         NUMBER:=0;
    i              NUMBER:=1;
    j              NUMBER:=1;
    numretour      NUMBER:=1;
    tab1           TAB_pour_comp;
    tab2           TAB_pour_comp;
    tabLib         TAB_pour_lib;
    tabRetour      TAB_pour_retour;
    tabNotRetour   TAB_pour_retour;
    donnee         VARCHAR(1000);
    tabCles        TAB_cle;
    cles           VARCHAR2(1000);
    v_typeTable    VARCHAR2(1);
    clwhere        VARCHAR(3000);
    clfrom         VARCHAR(3000);
    clwhereDate    VARCHAR(500);
    clwherePrOp    VARCHAR(500);
    coldtfin       VARCHAR(255);
    histoARenvoyer BOOLEAN:=false;
    hasDtfin       NUMBER;
    hasDtfinSit    NUMBER;
    reqLength      NUMBER;
    photoLength    NUMBER;
    curclemati     VARCHAR2(20);
    curclematj     VARCHAR2(20);
    tab1cle        VARCHAR2(1000);
    tab2cle        VARCHAR2(1000);
    w_where_dic    CLOB;
    w_where_dic1   CLOB;
    w_arg1         CLOB;
    w_arg2         CLOB;
    isDICOJointure Number;
  BEGIN
    --vérifier le type principal de la table m=MATRIC p=PACMAT z=PAIEZAD
    v_typeTable:=getTypeTable(p_nomTable);
    --préparation des champs relatifs à la clé et à la date d'effet
    SELECT a.column_name,
      b.data_type bulk collect
    INTO tabCles
    FROM user_cons_columns a,
      USER_TAB_COLUMNS b
    WHERE a.table_name   =p_nomTable
    AND a.table_name     =b.table_name
    AND a.column_name    =b.column_name
    AND constraint_name IN
      (SELECT c.constraint_name
      FROM user_constraints c
      WHERE c.table_name =a.table_name
      AND CONSTRAINT_TYPE='P'
      );
    --colonne dteffet du résultat qui se déverse dans DIF_FSED et participe aux jointures D_A_C et D_A_C_H
    coldteffet:='d.DSDCN';
    --coldatecle (colonne date dans la clé) sert à fabriquer le filtre qui élimine le futur
    coldatecle:='';
    --colonne dtfin du résultat qui participe aux jointures D_A_C et D_A_C_H
    coldtfin :='to_date(''20991231'',''yyyymmdd'') as dtfin ';
    --début du champ "cle" selon le type du dico
    IF v_typeTable   ='m' THEN
      cles          :='b.pacmat||''#''||d.paiezad';
    ELSIF v_typeTable='p' THEN
      cles          :='a.pacmat||''#''||d.paiezad';
    ELSE
      cles :='NVL(a.pacmat,a.paiezad)||''#''||a.paiezad';
    END IF;
    --reste du champ "cle"
    FOR i IN tabCles.first..tabCles.last
    LOOP
      IF tabCles(i).column_name NOT IN ('NUMPAC','MATRIC','PACMAT','PAIEZAD','NUMCNT') THEN
        cles                   :=cles||'||''#''||';
        IF tabCles(i).data_type ='DATE' THEN
          --une date dans la clé servira à filtrer le futur
          coldatecle               :=tabCles(i).column_name;
          cles                     :=cles||'to_char(a.'||coldatecle||',''yyyymmdd'')';
          IF tabCles(i).column_name = 'DATE_EFF' THEN
            coldteffet             :='a.DATE_EFF';
          END IF;
        ELSE
          cles :=cles||'a.'||tabCles(i).column_name;
        END IF;
      END IF;
    END LOOP;
    --champ "cle" cas particulier de D_A_C
    IF p_nomTable ='DIC_ADM_CONTRAT' THEN
      coldatecle :='DSDCN';
      coldteffet :='a.DSDCN';
      cles       :=cles||'||''#''||to_char(a.DSDCN,''yyyymmdd'')';
    END IF;
    --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfinSit
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND     column_name  ='DATE_SORTIE_SIT_BO';
     --préparation du filtre sur la date d'effet et la date de fin si elles existent
    SELECT COUNT(*)
    INTO   hasDtfin
    FROM   user_tab_columns
    WHERE  table_name =p_nomTable
    AND    column_name  ='DATE_FIN';
    clwhereDate     :='';
    --si on a une date dans la clé on élimine le futur avec (date de naissance d'enfant, d'adhésion mutuelle, d'effet HISTO...)
    IF coldatecle IS NOT NULL THEN
      clwhereDate :=' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=last_day(to_date('''||p_periode||''',''yyyymm''))';
      IF  p_TABLETYPE='DERNIERE' THEN
         clwhereDate :=clwhereDate||' and nvl(a.'||coldatecle||',to_date(''19000101'',''yyyymmdd''))<=d.date_sortie_sit_bo';
      END IF;      
      IF p_alias   ='VUE-A301-A302-A962' THEN
        --cas particulier pour lire D_A_C_H jusqu'au 1er jour de M+1 donc on ajoute 1 jour à la limite
        clwhereDate :=clwhereDate||'+1';
      END IF;
    END IF;
    --si on a une date de fin dans la table on elle alimente la colonne dtfin pour exclure les vieux historiques inutiles (finis avant 1er jour de M-1)
    IF hasDtfinSit >0 THEN
      --date fin spéciale calculée par la GAP une seule fois à 2099 par MATRIC
      coldtfin     :='a.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF p_nomtable='DIC_ADM_CONTRAT' THEN
      --pour D_A_C on va chercher DATE_SORTIE_SIT_BO sur D_A_C_H
      coldtfin    :='d.DATE_SORTIE_SIT_BO as dtfin';
    ELSIF hasDtfin >0 THEN
      --date fin d'HISTO classique
      coldtfin :='a.DATE_FIN as dtfin';
    END IF;
    --préparation du filtre sur prêt et opposition car solde=0 filtre, mais montant=0 force l'envoi.
    IF p_alias     =DicoPret THEN
      clwherePrOp := ' and (NVL(a.'||soldePret ||',0) !=0 or NVL(a.'||MontantPret ||',0) =0) ';
    ELSIF p_alias  =DicoOpposition THEN
      clwherePrOp := ' and (NVL(a.'||soldeOpposition||',0) !=0 or NVL(a.'||MontantOpposition||',0) =0) ';
    ELSE
      clwherePrOp:='';
    END IF;
    --création des requêtes sur DICO et table PHOTO
    OPEN cur_mapdo;
    LOOP
      FETCH cur_mapdo INTO lig_mapdo;
      IF (numcol =0 OR numcol >=30) THEN
        FSED_AVANCEMENT(p_id_trt,'Creation requetes '||p_nomTable);
        clselect :='select ';
        tablib.delete;
        IF v_typeTable    ='m' THEN
          clselect       :=clselect||cles||' as CLE,b.numpac,b.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSIF v_typeTable ='p' THEN
          clselect       :=clselect||cles||' as CLE,a.numpac,a.pacmat,d.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        ELSE
          --les dicos 'z' (PAIEZAD) peuvent avoir une colonne PACMAT mal remplie
          clselect :=clselect||cles||' as CLE,a.numpac,NVL(a.pacmat,a.paiezad) as pacmat,a.paiezad,'||coldteffet||' as dteffet,'||coldtfin;
        END IF;
        IF p_TABLETYPE     ='PREMIERE' OR p_TABLETYPE='DERNIERE' OR p_TABLETYPE='OCCURS' THEN
          IF v_typetable   ='m' THEN
            clselect      :=clselect||','||' row_number() over (partition by d.paiezad order by '||cles;
          ELSIF v_typetable='p' THEN
            clselect      :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          ELSE
            clselect :=clselect||','||' row_number() over (partition by a.paiezad order by '||cles;
          END IF;
          IF p_TABLETYPE='DERNIERE' THEN
            clselect   :=clselect||' desc';
          END IF;
          clselect :=clselect||') as rank ';
        ELSE
          clselect :=clselect||',null as rank ';
        END IF;
        numcol :=0;
      END IF;
      IF cur_mapdo%NOTFOUND THEN
        numcol:=numcol+1;
        FOR k        IN numcol..30
        LOOP
          clselect :=clselect||','''' as C'||k ;
        END LOOP;
      ELSE
        tablib(numcol).LIB                        :=lig_mapdo.ELEMENT;
        IF lig_mapdo.TRTPARTICULIER               IS NULL THEN
          IF lig_mapdo.data_type                   ='DATE' THEN
            tablib(numcol).TYPE_DONNEE            :='D';
          elsif instr(lig_mapdo.data_type,'NUMBER')>0 THEN
            tablib(numcol).TYPE_DONNEE            :='N';
          ELSE
            tablib(numcol).TYPE_DONNEE:='A';
          END IF;
        ELSE
          -- Transcription du format dans TGE_REF_DICOZ
          IF lig_mapdo.typeZADIG       ='P' THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='D';
          ELSIF lig_mapdo.typeZADIG    ='N' AND lig_mapdo.MASQUE NOT IN (1,2,3,4,5,6,7)THEN
            tablib(numcol).TYPE_DONNEE:='N';
          ELSIF lig_mapdo.typeZADIG    ='A' THEN
            tablib(numcol).TYPE_DONNEE:='A';
          ELSE
            tablib(numcol).TYPE_DONNEE:=lig_mapdo.typeZADIG;
          END IF;
        END IF;
        tablib(numcol).OCC                :=lig_mapdo.OCCURENCE;
        clselect                          :=clselect||',';
        donnee :=getClauseSelect(p_numpac,
                                 'a',
                                 lig_mapdo.DONNEEGXP,
                                 lig_mapdo.DONNFILTRE,
                                 lig_mapdo.OPERFILTRE,
                                 lig_mapdo.VALFILTRE,
                                 lig_mapdo.TRTPARTICULIER,
                                 lig_mapdo.ENVOI_SYSTEMATIQUE,
                                 lig_mapdo.data_type,
                                 lig_mapdo.typeZADIG,
                                 lig_mapdo.MASQUE,
                                 tablib(numcol).OCC,
                                 TRUE);
        numcol :=numcol+1;
        clselect :=clselect||donnee||' as C'||numcol;
        FSED_AVANCEMENT(p_id_trt,'numcol='||TO_CHAR(numcol)||' mapdo='||lig_mapdo.NUMPAC||'/'||lig_mapdo.ELEMENT||'/'||lig_mapdo.OCCURENCE||'/'||lig_mapdo.DONNEEGXP||'/'||lig_mapdo.TABLEGXP||'/'||lig_mapdo.DONNFILTRE||'/'||lig_mapdo.OPERFILTRE||'/'||lig_mapdo.VALFILTRE||'/'||lig_mapdo.TRTPARTICULIER||'/'||lig_mapdo.ENVOI_SYSTEMATIQUE||'/'||lig_mapdo.FORCABLE_ECRAN_GENERE||' data_type='||lig_mapdo.data_type||' zadig='||lig_mapdo.typeZadig||'/'||TO_CHAR(lig_mapdo.longueur)||'/'||lig_mapdo.masque);
      END IF;
      --toutes les 30 colonnes on lance les requêtes et on effectue les comparaisons
      IF (numcol =30 OR cur_mapdo%NOTFOUND) THEN
        --clause from commune avec ses jointures
        clfrom       :='(SELECT * FROM ( WITH TABLE_DATES_EFF (PACMAT, NUMCNT, DATE_EFF) AS ( SELECT DISTINCT DACH2.PACMAT, DACH2.NUMCNT , MAX(DATE_EFF) OVER (PARTITION BY L.NUMPAC, L.PACMAT, DACH2.NUMCNT) ';
        clfrom       :=clfrom||'FROM GAP_TRT_LISTE_MAT L, DIC_ADM_CONTRAT_HISTO DACH2 ';
        clfrom       :=clfrom||'WHERE L.ID_TRT = '||p_id_trt||' AND L.NUMPAC = '''||p_numpac||''' AND DACH2.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND DACH2.PACMAT = L.PACMAT AND DACH2.DATE_EFF <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND DACH2.DATE_SORTIE_SIT_BO >= ADD_MONTHS((TO_DATE('''||p_periode||''',''yyyymm'')),-'||p_nb_mois_paie_init||') ) ';
        clfrom       :=clfrom||'SELECT C.NUMPAC, C.MATRIC, C.PACMAT, MAX(DACS.CODE_CHRONO) CODE_CHRONO, DACH.PAIEZAD, MIN(C.DSDCN) DSDCN, MAX(DACH.DATE_SORTIE_SIT_BO) DATE_SORTIE_SIT_BO ';
        clfrom       :=clfrom||'FROM TABLE_DATES_EFF T, DIC_ADM_CONTRAT C, DIC_ADM_CONTRAT_SITU DACS, DIC_ADM_CONTRAT_HISTO DACH ';
        clfrom       :=clfrom||'WHERE C.NUMPAC = '''||p_numpac||''' AND DACS.NUMPAC = '''||p_numpac||''' AND DACH.NUMPAC = '''||p_numpac||''' ';
        clfrom       :=clfrom||'AND C.PACMAT = T.PACMAT AND C.NUMCNT = T.NUMCNT AND DACH.PACMAT = T.PACMAT AND DACH.NUMCNT = T.NUMCNT AND DACH.DATE_EFF = T.DATE_EFF AND DACS.PACMAT = T.PACMAT AND DACS.NUMCNT = T.NUMCNT AND DACS.PAIEZAD = DACH.PAIEZAD ';
        clfrom       :=clfrom||'AND C.DSDCN <=LAST_DAY(TO_DATE('''||p_periode||''',''yyyymm'')) AND NVL(dach.DRPAI2, ''B'') <> ''B'' AND C.NATCOL IN (''SAL'',''STA'') GROUP BY C.NUMPAC, C.MATRIC, C.PACMAT,DACH.PAIEZAD )) d WHERE '||coldteffet||' between d.dsdcn and d.date_sortie_sit_bo AND ';
        IF v_typeTable='m' THEN
          --dictionnaire à base de MATRIC (conjoint, enfants, perso...)
          clwhere       :='a.matric=d.matric '||clwhereDate;
          requete       :=REPLACE(REPLACE(REPLACE(clselect,'b.','d.'),'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto  :=REGEXP_REPLACE(REPLACE(clselect,'b.','a.'),'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and '||clwhere||' order by cle';
        ELSIF v_typeTable='p' THEN
          --dictionnaire à base de PACMAT (D_A_C, Oppositions à partir de la 5.03...)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        ELSE
          --dictionnaire à base de PAIEZAD (D_A_C_H, imputations permanentes par exemple)
          clwhere      :='a.numpac='''||p_numpac||''' and a.pacmat=d.pacmat and a.paiezad=d.paiezad '||clwhereDate||clwherePrOp;
          requete      :=REPLACE(REPLACE(clselect,'@###',''),'###@','')||' from '||p_nomTable||' a, '||clfrom||clwhere||' order by cle';
          requetePhoto :=REGEXP_REPLACE(clselect,'(@###)[^###@]+(###@)','''_TO_SEND_''')||' from PHOTO_'||p_nomTable||' a, '||REPLACE(clfrom,' DIC_ADM_CONTRAT C',' PHOTO_DIC_ADM_CONTRAT C')||'d.numpac='''||p_numpac||''' and '||clwhere||' order by cle';
        END IF;
        requetePhoto :=REPLACE (requetePhoto,'to_char(''_TO_SEND_'',''yyyymmddHH24MISS'')','to_char(''_TO_SEND_'')');
        --recup caluse where
        select instr(requete,'$DICOUPHOTO_JOINTURE') into isDICOJointure from dual;
        IF isDICOJointure != 0 THEN
        w_where_dic1 :=  REGEXP_SUBSTR(requete,'\(.*\)');
        w_where_dic:= REPLACE(REGEXP_SUBSTR(requete,'\$DICOUPHOTO_JOINTURE[^\)]*'),'$DICOUPHOTO_JOINTURE(','');
        --recup arg 1:
        w_arg1 := substr(w_where_dic,1,instr(w_where_dic,',',-1)-1);
        --recup arg 2 :
        w_arg2 := substr(w_where_dic,instr(w_where_dic,',',-1)+1,length(w_where_dic)-instr(w_where_dic,',',-1));
        requete :=REPLACE (REPLACE (requete,w_where_dic1,w_arg1),'$DICOUPHOTO_JOINTURE','');
        requetePhoto :=REPLACE (REPLACE (requetePhoto,w_where_dic1,w_arg2),'$DICOUPHOTO_JOINTURE','');
        requete :=REPLACE (requete,'$DICOUPHOTO',p_nomTable);
        requetePhoto :=REPLACE (requetePhoto, '$DICOUPHOTO','PHOTO_'||p_nomTable);
        END IF;
        IF tablib.exists(0) THEN
          IF p_TABLETYPE ='PREMIERE' OR p_TABLETYPE='DERNIERE' THEN
            requete     :='select * from ('||requete||') where rank=1';
            requetePhoto:='select * from ('||requetePhoto||') where rank=1';
          END IF;
          tab1.delete;
          tab2.delete;
          EXECUTE immediate 'select length(:req) from dual' INTO reqLength USING requete ;
          EXECUTE immediate 'select length(:req) from dual' INTO photoLength USING requetePhoto ;
          FSED_AVANCEMENT(p_id_trt,'Execution requete '||p_alias);
          FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,1,4000));
          IF reqLength IS NOT NULL AND reqLength>4000 THEN
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,4001,4000));
            IF reqLength IS NOT NULL AND reqLength>8000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requete,8001,4000));
            END IF;
          END IF;
          EXECUTE immediate requete bulk collect INTO tab1 ;
          FSED_AVANCEMENT(p_id_trt,'Fin execution requete DICO');

          IF p_ALLERRETOUR != 'I' THEN
            FSED_AVANCEMENT(p_id_trt,'Execution requetePhoto '||p_alias);
            FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,1,4000));
            IF photoLength IS NOT NULL AND photoLength>4000 THEN
              FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,4001,4000));
              IF photoLength IS NOT NULL AND photoLength>8000 THEN
                FSED_AVANCEMENT(p_id_trt,SUBSTR(requetePhoto,8001,4000));
              END IF;
            END IF;
            EXECUTE immediate requetePhoto bulk collect INTO tab2;
            FSED_AVANCEMENT(p_id_trt,'Fin execution requete PHOTO ');
          END IF;
          FSED_AVANCEMENT(p_id_trt,'Debut traitement des differences lignes DICO='||TO_CHAR(NVL(tab1.last,0))||' lignes PHOTO='||TO_CHAR(NVL(tab2.last,0)));
          numretour:=1;
          tabRetour.delete;
          --Boucle principale sur la colonne de 0 à 29 indicée par numcol
          FOR numcol IN tablib.first..tablib.last
          LOOP
            --Pour chaque nouvelle colonne on initialise le dernier matricule, les matricules en cours, et les indices.
            i            :=1;
            j            :=1;
            MatARenvoyer :=' ';
            oldclemat    :=' ';
            oldvaleur    :=' ';
            curclemati   :=' ';
            curclematj   :=' ';
            tab1cle      :=' ';
            tab2cle      :=' ';
            --Appareillage "tab1" (DIC_xxx) et "tab2" (PHOTO_DIC_xxx) triés selon leurs clés
            WHILE i <= tab1.last OR j <= tab2.last
            LOOP
              IF i        <= tab1.last THEN
                curclemati:=tab1(i).pacmat||'#'||tab1(i).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab1cle :=curclemati||TO_CHAR(NVL(tab1(i).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab1cle :=tab1(i).cle;
                END IF;
              ELSE
                curclemati :=' ';
              END IF;
              IF j        <= tab2.last THEN
                curclematj:=tab2(j).pacmat||'#'||tab2(j).paiezad;
                IF p_TABLETYPE IN ('OCCURS','PREMIERE','DERNIERE') THEN
                  --clé de comparaison = couple pacmat-paiezad + rang de l'OCCURS (vaut 1 sur PREMIERE et DERNIERE)
                  tab2cle :=curclematj||TO_CHAR(NVL(tab2(j).rank,0),'000');
                ELSE
                  --clé de comparaison = celle de DIF_FSED donc celle de la ligne Oracle
                  tab2cle :=tab2(j).cle;
                END IF;
              ELSE
                curclematj :=' ';
              END IF;
              IF coldteffet='a.DATE_EFF' AND i <= tab1.last AND curclemati=MatARenvoyer THEN
                --matricule déjà détecté en différence histo, on vide le nouvel historique.
                remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                --avancer dans tab1
                i            :=i                                                                                    +1;
              Elsif coldteffet='a.DATE_EFF' AND i <= tab1.last AND tab1cle > tab2cle AND i > 1 AND curclematj=tab1(i-1).pacmat||'#'||tab1(i-1).paiezad THEN
                --ligne supprimée photo histo et il existe un histo précédent sur le même matricule : on reconstitue l'historique à partir du précédent
                i :=i-1;
                remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                --avancer dans tab1 et tab2 car on a "comparé" ces 2 lignes
                i            :=i+1;
                j            :=j+1;
              Elsif coldteffet='a.DATE_EFF' AND j <= tab2.last AND curclematj=MatARenvoyer THEN
                --avancer dans tab2 pour épuiser les histos photo déjà détectés en différence
                j    :=j+1;
              Elsif j > tab2.last OR tab2.last IS NULL OR (i <= tab1.last AND tab1cle < tab2cle) THEN
                --ligne ajoutée car j épuisé ou clé i plus petite que clé j (ce qui marche aussi pour des historiques créés après photo)
                remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'C', p_TABLETYPE);
                --avancer dans tab1
                i    :=i+1;
              Elsif i > tab1.last OR tab1.last IS NULL OR (j <= tab2.last AND tab1cle > tab2cle) THEN
                --ligne supprimée car i épuisé ou clé i plus grande que clé j
                remplissage_ligne(tabRetour, tab2(j), tablib(numcol), p_id_trt, numretour, numcol, 'S', p_TABLETYPE);
                --avancer dans tab2
                j :=j+1;
              ELSE
                --comparaison car à ce stade il y a forcément égalité de clé tab1(i).cle=tab2(j).cle -ou- OCCURS du couple pacmat-paiezad
                IF difference_col( tab1(i) , tab2(j) , numcol )=1 THEN
                  --modification constatée
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'M', p_TABLETYPE);
                ELSIF coldteffet='a.DATE_EFF' THEN
                  --pas de différence mais pour les historiques mémoriser la valeur en cours pour éliminer les doublons
                  remplissage_ligne(tabRetour, tab1(i), tablib(numcol), p_id_trt, numretour, numcol, 'D', p_TABLETYPE);
                END IF;
                --avancer dans tab1 et tab2
                i :=i+1;
                j :=j+1;
              END IF;
            END LOOP;
          END LOOP;
          FSED_AVANCEMENT(p_id_trt,'Fin traitement des differences');
          IF NVL(tabRetour.first,0)=0 THEN
            FSED_AVANCEMENT(p_id_trt,'Pas de differences');
          ELSE
            FSED_AVANCEMENT(p_id_trt,'Insertion des differences numeros '||TO_CHAR(NVL(tabRetour.first,0))||' a '||TO_CHAR(NVL(tabRetour.last,0)));
            FORALL i IN tabRetour.first..tabRetour.last
            INSERT
            INTO DIF_FSED_TEMPORARY
              (
                id_trt,
                numpac,
                CLE,
                pacmat,
                ELEM,
                OCC,
                VALEUR,
                CODEOP,
                TYPE_DONNEE ,
                DTEFFET,
                paiezad
              )
              VALUES
              (
                p_id_trt,
                p_numpac,
                tabRetour(i).CLE,
                tabRetour(i).pacmat,
                tabRetour(i).ELEM,
                NVL(lpad(tabRetour(i).OCC,3,'0'),'  '),
                tabRetour(i).VALEUR,
                tabRetour(i).CODEOP,
                tabRetour(i).TYPE_DONNEE,
                tabRetour(i).DTEFFET,
                tabRetour(i).paiezad
              );
            requeteTDIF:='INSERT INTO DIF_FSED (ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET) (select ID_TRT,NUMPAC,CLE,PACMAT,PAIEZAD,ELEM,OCC,VALEUR,CODEOP,TYPE_DONNEE,DTEFFET from DIF_FSED_TEMPORARY)';
            FSED_AVANCEMENT(p_id_trt,'Injection des differences dans DIF_FSED : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
            requeteTDIF:='TRUNCATE TABLE DIF_FSED_TEMPORARY';
            FSED_AVANCEMENT(p_id_trt,'Vidage de DIF_FSED_TEMPORARY : '||requeteTDIF);
             EXECUTE_IMMEDIATE_STRING  (requeteTDIF,0);
          END IF;
        END IF;
      END IF;
      EXIT
    WHEN cur_mapdo%NOTFOUND ;
    END LOOP;
    CLOSE cur_mapdo;
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED_unit' , p_nomTable||','||p_alias||','||p_TABLETYPE||','||p_id_trt||','||p_numpac||','||p_nb_mois_paie_init , err_code||'-'||err_msg );
    raise;
  END preparation_FSED_unit;
/*********************************************************
Proc : preparation_FSED
Fctn :
**********************************************************/
PROCEDURE preparation_FSED
  (
    p_id_trt  IN NUMBER,
    p_numpac  IN VARCHAR2,
    p_periode IN VARCHAR2
  )
IS
  CURSOR cur_tables
  IS
    SELECT *
    FROM
      (SELECT *
      FROM tge_ref_mapta
      WHERE numpac =p_numpac
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND ALLERRETOUR IN ('A','2','I')
    UNION ALL
    SELECT p_numpac,
      '***',
      'VUE-A301-A302-A962',
      FICHIER,
      TABLEPHY,
      ALLERRETOUR,
      TABLETYPE,
      MOISZERO,
      NBMOISCONS,
      SENSIBLERHID,
      RESERVE
    FROM tge_ref_mapta
    WHERE numpac  ='*'
    AND tableparam='DIC_ADM_CONTRAT_HISTO'
    UNION ALL
    SELECT *
    FROM tge_ref_mapta
    WHERE numpac ='*'
      --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
      --Ajout du type 'I'
    AND ALLERRETOUR      IN ('A','2','I')
    AND (tableparam) NOT IN
      (SELECT tableparam FROM tge_ref_mapta WHERE numpac=p_numpac
      )
      )
    ORDER BY tableparam;
    lig cur_tables%rowtype;
    nbPurgePhoto NUMBER:=0;
    v_flag       NUMBER;
    p_nb_mois_paie_init number;
    pReq  VARCHAR2(500);
    w_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%TYPE;
    w_DEB_RETRO      TGE_REF_PAC.DEB_RETRO%TYPE;
    w_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%TYPE;
    w_MIN_RETRO       TGE_REF_PAC.DEB_RETRO%TYPE;
  BEGIN
    --Purge de la table des erreurs en cas de relance manuelle du "call"
   p_nb_mois_paie_init:= GET_NB_MOIS_PAIE_INIT();
   SELECT PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,
   greatest(DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS,'yyyymm'),-1*NB_MOIS_RETRO),'yyyymm'))
   INTO   w_PERIODEENCOURS ,w_DEB_RETRO,w_DEB_HISTO_RETRO,w_MIN_RETRO
   FROM TGE_REF_PAC 
   WHERE NUMPAC =p_numpac;
    DELETE
    FROM TGE_FSED_ERREUR
    WHERE id=p_id_trt;
    --Purge de la table d'avancement activée si TGE_FSED_IS_DEBUG.IS_DEBUG='O'
    DELETE
    FROM TGE_FSED_AVANCEMENT_PROC
    WHERE id=p_id_trt;
    COMMIT;
    pReq := 'select ADD_MONTHS(to_date('||p_periode||',''yyyymm''),-'||p_nb_mois_paie_init||') from dual';
    EXECUTE IMMEDIATE pReq INTO  mMoins1;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** START *** pac='||p_numpac||' periode='||p_periode||' intervalle de validite='||TO_CHAR(mMoins1,'yyyymmdd')||'-'||TO_CHAR(last_day(to_date(p_periode,'yyyymm')),'yyyymmdd'));
    --Purge des photos si photo absente de DIC_ADM_CONTRAT
    FOR tabPurgePhoto IN
    (SELECT DISTINCT pacmat
    FROM GAP_TRT_LISTE_MAT
    WHERE id_trt    =p_id_trt
    AND pacmat NOT IN
      (SELECT pacmat FROM PHOTO_DIC_ADM_CONTRAT WHERE numpac=p_numpac
      )
    ORDER BY pacmat
    )
    LOOP
      FSED_AVANCEMENT(p_id_trt,'Efface Photo toutes tables pacmat='||tabPurgePhoto.pacmat);
      effaceMatricToutTable(p_numpac,tabPurgePhoto.pacmat);
      nbPurgePhoto:=nbPurgePhoto+1;
    END LOOP;
    IF nbPurgePhoto=0 THEN
      FSED_AVANCEMENT(p_id_trt,'Tous les Pacmat du traitement sont presents dans PHOTO_DIC_ADM_CONTRAT');
    ELSE
      FSED_AVANCEMENT(p_id_trt,'Nb pacmat absents de PHOTO_DIC_ADM_CONTRAT (effaceMatricToutTable) ='||TO_CHAR(nbPurgePhoto));
    END IF;
    getSoldMontant(p_numpac,p_id_trt,DicoPret,soldePret,MontantPret,DicoOpposition,soldeOpposition,MontantOpposition);
    FSED_AVANCEMENT(p_id_trt,'Donnees filtres prets oppositions : soldePret='||DicoPret||'.'||soldePret||' MontantPret='||DicoPret||'.'||MontantPret|| ' soldeOpposition='||DicoOpposition||'.'||soldeOpposition||' MontantOpposition='||DicoOpposition||'.'||MontantOpposition);
    OPEN cur_tables;
    LOOP
      FETCH cur_tables INTO lig;
      EXIT
    WHEN cur_tables%NOTFOUND ;
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Debut Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
      preparation_FSED_unit(lig.tablephy,lig.tableparam,lig.TABLETYPE,p_id_trt,p_numpac,p_periode,lig.ALLERRETOUR ,p_nb_mois_paie_init);
      FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- Fin Traitement alias '||lig.tableparam||' (table '||lig.tablephy||')');
    END LOOP;
    CLOSE cur_tables;
    SELECT COUNT(*) INTO v_flag FROM GAP_TRT_LISTE_MAT where ID_TRT = p_id_trt;
    --Partie Rétro 
    IF w_DEB_RETRO is not null AND to_date(w_PERIODEENCOURS,'YYYYMM')>=to_date(w_DEB_RETRO,'YYYYMM') THEN
     BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_MODIF_RETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_MODIF_RETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_MODIF_RETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
     insert into  DIF_FSED_MODIF_RETRO 
     select * from dif_fsed f
     WHERE  numpac =p_numpac AND f.id_trt=p_id_trt
     AND DTEFFET <to_date(w_PERIODEENCOURS||'01','YYYYMMDD') 
     AND ((
          f.elem in (select ELEMENT from tge_ref_dicoz where  numpac=p_numpac AND nvl(CALCUL_RETRO,0)=1
                    union all
                    select ELEMENT from tge_ref_dicoz where  numpac='*'AND nvl(CALCUL_RETRO,0)=1 and 
                    ELEMENT not in (select ELEMENT from tge_ref_dicoz where  numpac=p_numpac AND nvl(CALCUL_RETRO,0)=1))
         AND NOT exists (select 1 from dif_fsed t where t.numpac =p_numpac and t.id_trt =p_id_trt AND codeop='C' and t.ELEM ='A001' and f.paiezad=t.paiezad and f.pacmat=t.pacmat )
         )
         OR exists (select 1 from dif_fsed t where t.numpac =p_numpac and t.id_trt =p_id_trt AND codeop='C' and t.ELEM ='A001' and f.paiezad=t.paiezad and f.pacmat=t.pacmat )
          )
     AND exists ((select 1 from gap_selection_retro s where s.numpac=f.numpac and s.pacmat =f.pacmat and s.periode_paie=w_PERIODEENCOURS and s.periode_retro=greatest(w_MIN_RETRO,to_char(f.dteffet,'yyyymm')))
     
                 union all 
                 (select 1 from gap_retro_matric m where m.numpac=f.numpac and m.pacmat =f.pacmat  and m.periode_retro=greatest(w_MIN_RETRO,to_char(f.dteffet,'yyyymm'))));
    END IF;    
    BEGIN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED --- remplissage DIF_FSED_PARTIERETRO id_trt= '||p_id_trt);
     pReq := 'Alter TABLE DIF_FSED_PARTIERETRO add partition ID_'||p_id_trt||' values ('||p_id_trt||')';
     EXECUTE_IMMEDIATE_STRING( pReq,0);
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition cree: ID_'||p_id_trt);
    EXCEPTION
    WHEN OTHERS THEN
     FSED_AVANCEMENT(p_id_trt,'preparation_FSED--remplissage DIF_FSED_PARTIERETRO--partition ID_'||p_id_trt||' existe déja');
    END ;
    insert into DIF_FSED_PARTIERETRO
    select id_trt,greatest(w_MIN_RETRO,to_char(m.DTEFFET,'yyyymm')),m.NUMPAC,m.CLE,m.PACMAT,m.PAIEZAD,m.ELEM,m.OCC,m.VALEUR,m.CODEOP,m.TYPE_DONNEE,m.DTEFFET
    from DIF_FSED_MODIF_RETRO m where m.id_trt=p_id_trt
    union all
    select p_id_trt,h.PERIODE,h.NUMPAC,h.CLE,h.PACMAT,h.PAIEZAD,h.ELEM,h.OCC,h.VALEUR,h.CODEOP,h.TYPE_DONNEE,h.DTEFFET
    from DIF_FSED_HISTO h
    where numpac =p_numpac 
    AND ((h.elem in (select ELEMENT from tge_ref_dicoz where  numpac=p_numpac AND nvl(CALCUL_RETRO,0)=1
                   union all
                   select ELEMENT from tge_ref_dicoz where  numpac='*'AND nvl(CALCUL_RETRO,0)=1 and
                   ELEMENT not in (select ELEMENT from tge_ref_dicoz where  numpac=p_numpac AND nvl(CALCUL_RETRO,0)=1))
        AND NOT exists (select 1 from DIF_FSED_HISTO t where t.numpac =p_numpac and t.periode =h.periode AND t.codeop='C' and t.ELEM ='A001' and h.paiezad=t.paiezad and h.pacmat=t.pacmat )
        )
        OR exists (select 1 from DIF_FSED_HISTO t where t.numpac =p_numpac and t.periode =h.periode AND t.codeop='C' and t.ELEM ='A001' and h.paiezad=t.paiezad and h.pacmat=t.pacmat )
        )
    AND exists( (select 1 from gap_trt_liste_mat e where e.id_trt =p_id_trt AND e.numpac =h.numpac AND e.pacmat =h.pacmat )
                 INTERSECT 
                 ((select 1 from gap_selection_retro s where s.numpac=h.numpac and s.pacmat =h.pacmat and s.periode_paie=w_PERIODEENCOURS and s.periode_retro=h.periode)
                 UNION ALL
                 (select 1 from gap_retro_matric m where m.numpac=h.numpac and m.pacmat =h.pacmat  and m.periode_retro=h.periode)))
    AND not exists (select 1 from DIF_FSED_MODIF_RETRO r where r.id_trt=p_id_trt and r.pacmat=h.pacmat and to_char(r.DTEFFET,'yyyymm')<=h.periode and r.paiezad=h.PAIEZAD 
    and r.elem=h.ELEM and r.occ=h.OCC );
    --todo 
    IF v_flag > 1000 THEN
        DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'DIF_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
    END IF;
    FSED_AVANCEMENT(p_id_trt,'preparation_FSED *** END *** pac='||p_numpac||' periode='||p_periode);
  EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_msg  := SQLERRM;
    FSED_ERREUR( p_id_trt , 'preparation_FSED' , p_id_trt||','||p_numpac , err_code||'-'||err_msg );
    raise;
  END preparation_FSED;
/***********************************************************************
  Funct : getTableCode
  DESC : recuperer le code table
*************************************************************************/
FUNCTION getTableCode(
    plig TGE_IMPORT_FSED%rowtype)
  RETURN VARCHAR
IS
  v_code_table VARCHAR2(5);
  CURSOR C_VRTA
  IS
    SELECT * FROM TGE_REF_VRTA;
  lig_vrta TGE_REF_VRTA%rowtype;
BEGIN
  IF code_table_liste.count=0 THEN
    OPEN C_VRTA ;
    LOOP
      FETCH C_VRTA INTO lig_vrta ;
      EXIT
    WHEN C_VRTA%NOTFOUND;
      IF lig_vrta.tablevr11                                       IS NOT NULL THEN
        code_table_liste(lig_vrta.numpac||'#'||lig_vrta.TABLEVR11):= lig_vrta.TABLEZADIG;
      END IF;
    END LOOP;
    CLOSE C_VRTA;
  END IF;
  IF code_table_liste.exists(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste(SUBSTR(plig.donnees,1,6)||'#'||trim(SUBSTR(plig.donnees,10,3)) );
  elsif code_table_liste.exists('*#'||trim(SUBSTR(plig.donnees,10,3)) ) THEN
    RETURN code_table_liste('*#'||trim(SUBSTR(plig.donnees,10,3)) );
  ELSE
    RETURN trim(SUBSTR(plig.donnees,10,3));
  END IF;
END getTableCode;
/********************************************************************
Funct : getTypeColonne
DESC  : recuperer le type de colonne
**********************************************************************/
FUNCTION getTypeColonne(
    p_table   IN VARCHAR2,
    p_colonne IN VARCHAR2)
  RETURN VARCHAR2
IS
  v_typecolonne user_tab_columns.data_type%type;
BEGIN
  BEGIN
    SELECT DISTINCT data_type
    INTO v_typecolonne
    FROM user_tab_columns cln
    WHERE cln.table_name = p_table
    AND cln.column_name  = p_colonne;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN (NULL);
  END ;
  IF v_typecolonne ='NUMBER' THEN
    RETURN('N');
  ELSIF v_typecolonne ='DATE' THEN
    RETURN('D');
  ELSIF v_typecolonne ='VARCHAR2' THEN
    RETURN('V');
  END IF;
END getTypeColonne;
/***********************************************************************
PROC : setCart11 
DESC : Cart 11
*************************************************************************/
PROCEDURE setCart11(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRTA.TABLEZADIG%TYPE,
    pCodeTableOld TGE_REF_VRTA.TABLEZADIG%TYPE)
IS
  type_carte   VARCHAR2(3) := '';
  v_code_table VARCHAR2(5);
  v_num_ligne  VARCHAR2(4);
  v_code_seq   VARCHAR2(1);
  v_nom_champ  VARCHAR2(4);
BEGIN
  type_carte                         := trim(SUBSTR(lig.donnees,18,2));
  IF type_carte                       ='R' THEN
    elt_tab_11R.NUMERO_DE_PAC        :=pNumPac;
    elt_tab_11R.CODE_TABLE           :=pCodeTable;
    elt_tab_11R.FONCTIONNALITE       :=trim(SUBSTR(lig.donnees,20,2));
    elt_tab_11R.NOM_DE_LA_TABLE      :=trim(SUBSTR(lig.donnees,22,35));
    elt_tab_11R.CLASSE_PROTECTION    :=trim(SUBSTR(lig.donnees,57,3));
    elt_tab_11R.CODE_MAJ_CAL         :=trim(SUBSTR(lig.donnees,60,1));
    elt_tab_11R.TABLE_USAGE_MULTIPLE :=trim(SUBSTR(lig.donnees,61,1));
    elt_tab_11R.NOM_TABLEASSOCIE     :=trim(SUBSTR(lig.donnees,62,3));
    elt_tab_11R.VALEURS_MENSUELLES   :=trim(SUBSTR(lig.donnees,66,1));
    elt_tab_11R.CODE_TOPAGE          :=trim(SUBSTR(lig.donnees,67,1));
    elt_tab_11R.REPERCUSSION_TVP     :=trim(SUBSTR(lig.donnees,68,1));
    elt_tab_11R.PGM_COHE_LIGNE       :=trim(SUBSTR(lig.donnees,69,8));
    elt_tab_11R.DATE_DERNIERE_MAJ    :=trim(SUBSTR(lig.donnees,77,8));
    elt_tab_11R.HEURE_DERNIERE_MAJ   :=trim(SUBSTR(lig.donnees,85,4));
    elt_tab_11R.TRAIT_PARTICULIER    :=trim(SUBSTR(lig.donnees,89,1));
    elt_tab_11R.CODE_DESTINATION_1   :=trim(SUBSTR(lig.donnees,90,1));
    elt_tab_11R.CODE_DESTINATION_2   :=trim(SUBSTR(lig.donnees,91,1));
    elt_tab_11R.CODE_DESTINATION_3   :=trim(SUBSTR(lig.donnees,92,1));
    elt_tab_11R.CODE_DESTINATION_4   :=trim(SUBSTR(lig.donnees,93,1));
    elt_tab_11R.CODE_DESTINATION_5   :=trim(SUBSTR(lig.donnees,94,1));
    elt_tab_11R.PGM_COHE_TABLE       :=trim(SUBSTR(lig.donnees,95,8));
    elt_tab_11R.TEMOIN_VR_BASE       :=trim(SUBSTR(lig.donnees,103,1));
    elt_tab_11R.TEMOIN_SITE_MULTIPLE :=trim(SUBSTR(lig.donnees,104,1));
    elt_tab_11R.CODE_GESTIONNAIRE    :=trim(SUBSTR(lig.donnees,105,1));
    elt_tab_11R.CODE_EDI             :=trim(SUBSTR(lig.donnees,106,1));
    elt_tab_11R.NB_LIG_MINI          :=trim(SUBSTR(lig.donnees,111,4));
    elt_tab_11R.NB_LIG_MAXI          :=trim(SUBSTR(lig.donnees,115,4));
    elt_tab_11R.NB_LIG_TOTALES       :=trim(SUBSTR(lig.donnees,119,4));
    elt_tab_11R.NB_LIG_ACTIVES       :=trim(SUBSTR(lig.donnees,123,4));
    IF tab_11R                       IS NULL THEN
      tab_11R                        := t_TGE_REF_VRREP();
    END IF;
    tab_11R.extend;
    tab_11R(tab_11R.last)            :=elt_tab_11R;
  elsif type_carte                    ='D' THEN
    v_nom_champ                      := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D.NUMERO_DE_PAC        := pNumPac;
    elt_tab_11D.CODE_TABLE           := pCodeTable;
    elt_tab_11D.NOM_DU_CHAMP         := v_nom_champ;
    elt_tab_11D.ELEMENT_DE_RECHERCHE := trim (SUBSTR(lig.donnees,24,4));
    elt_tab_11D.VALEUR_ASSOCIEE      := trim (SUBSTR(lig.donnees,28,3));
    elt_tab_11D.CODE_MAJ             := trim (SUBSTR(lig.donnees,31,1));
    elt_tab_11D.NB_OCCURRENCES       := trim (SUBSTR(lig.donnees,32,2));
    elt_tab_11D.NATURE               := trim (SUBSTR(lig.donnees,34,1));
    elt_tab_11D.NB_ENTIERS           := trim (SUBSTR(lig.donnees,35,2));
    elt_tab_11D.NB_DECIMALES         := trim (SUBSTR(lig.donnees,37,2));
    elt_tab_11D.LONGUEUR             := trim (SUBSTR(lig.donnees,39,2));
    elt_tab_11D.CODE_CONTROLE_FORMAT := trim (SUBSTR(lig.donnees,41,2));
    elt_tab_11D.CLASSE_PROTECTION    := trim (SUBSTR(lig.donnees,43,2));
    elt_tab_11D.TYPE_MANIPULATION    := trim (SUBSTR(lig.donnees,45,1));
    elt_tab_11D.CODE_DESCRIPTEUR     := trim (SUBSTR(lig.donnees,46,1));
    elt_tab_11D.CODE_OUVERTURE       := trim (SUBSTR(lig.donnees,47,1));
    elt_tab_11D.BL_ZERO_SIGNIFICATIF := trim (SUBSTR(lig.donnees,48,1));
    elt_tab_11D.CODE_OBLIGATION      := trim (SUBSTR(lig.donnees,49,1));
    elt_tab_11D.CODE_VALIDATION      := trim (SUBSTR(lig.donnees,50,1));
    elt_tab_11D.VAL_POS_COLON_DEBUT  := trim (SUBSTR(lig.donnees,51,2));
    elt_tab_11D.VAL_POS_COLON_FIN    := trim (SUBSTR(lig.donnees,53,2));
    elt_tab_11D.VAL_POS_VALEUR       := trim (SUBSTR(lig.donnees,55,35));
    elt_tab_11D.CNTL_TAB_REFER_TABLE := trim (SUBSTR(lig.donnees,90,5));
    elt_tab_11D.CNTL_TAB_COLON_DEBUT := trim (SUBSTR(lig.donnees,95,2));
    elt_tab_11D.CNTL_TAB_COLON_FIN   := trim (SUBSTR(lig.donnees,97,2));
    elt_tab_11D.CODE_GRAVITE         := trim (SUBSTR(lig.donnees,99,1));
    elt_tab_11D.LIBELLE              := trim (SUBSTR(lig.donnees,100,35));
    elt_tab_11D.MORCEAU_1_NOM_TABLE  := trim (SUBSTR(lig.donnees,135,3));
    elt_tab_11D.MORCEAU_1_COL_DEB    := trim (SUBSTR(lig.donnees,138,3));
    elt_tab_11D.MORCEAU_1_COL_FIN    := trim (SUBSTR(lig.donnees,141,3));
    elt_tab_11D.MORCEAU_2_NOM_TABLE  := trim (SUBSTR(lig.donnees,144,3));
    elt_tab_11D.MORCEAU_2_COL_DEB    := trim (SUBSTR(lig.donnees,147,3));
    elt_tab_11D.MORCEAU_2_COL_FIN    := trim (SUBSTR(lig.donnees,150,3));
    elt_tab_11D.MORCEAU_3_NOM_TABLE  := trim (SUBSTR(lig.donnees,153,3));
    elt_tab_11D.MORCEAU_3_COL_DEB    := trim (SUBSTR(lig.donnees,156,3));
    elt_tab_11D.MORCEAU_3_COL_FIN    := trim (SUBSTR(lig.donnees,159,3));
    elt_tab_11D.MORCEAU_4_NOM_TABLE  := trim (SUBSTR(lig.donnees,162,3));
    elt_tab_11D.MORCEAU_4_COL_DEB    := trim (SUBSTR(lig.donnees,165,3));
    elt_tab_11D.MORCEAU_4_COL_FIN    := trim (SUBSTR(lig.donnees,168,3));
    elt_tab_11D.S_P_CONTROLE         := trim (SUBSTR(lig.donnees,171,8));
    elt_tab_11D.INVISIBLE            := trim (SUBSTR(lig.donnees,179,1));
    IF tab_11D                       IS NULL THEN
      tab_11D                        := t_TGE_REF_VRDES();
    END IF;
    tab_11D.extend;
    tab_11D(tab_11D.last)            := elt_tab_11D;
  elsif type_carte                    ='D1' THEN
    elt_tab_11D1.NUMERO_DE_PAC       := pNumPac;
    elt_tab_11D1.CODE_TABLE          := pCodeTable;
    elt_tab_11D1.NOM_DU_CHAMP        := trim (SUBSTR(lig.donnees,20,4));
    elt_tab_11D1.MORCEAU_5_NOM_TABLE := trim (SUBSTR(lig.donnees,24,3));
    elt_tab_11D1.MORCEAU_5_COL_DEB   := trim (SUBSTR(lig.donnees,27,3));
    elt_tab_11D1.MORCEAU_5_COL_FIN   := trim (SUBSTR(lig.donnees,30,3));
    elt_tab_11D1.MORCEAU_6_NOM_TABLE := trim (SUBSTR(lig.donnees,33,3));
    elt_tab_11D1.MORCEAU_6_COL_DEB   := trim (SUBSTR(lig.donnees,36,3));
    elt_tab_11D1.MORCEAU_6_COL_FIN   := trim (SUBSTR(lig.donnees,39,3));
    elt_tab_11D1.MORCEAU_7_NOM_TABLE := trim (SUBSTR(lig.donnees,42,3));
    elt_tab_11D1.MORCEAU_7_COL_DEB   := trim (SUBSTR(lig.donnees,45,3));
    elt_tab_11D1.MORCEAU_7_COL_FIN   := trim (SUBSTR(lig.donnees,48,3));
    elt_tab_11D1.MORCEAU_8_NOM_TABLE := trim (SUBSTR(lig.donnees,51,3));
    elt_tab_11D1.MORCEAU_8_COL_DEB   := trim (SUBSTR(lig.donnees,54,3));
    elt_tab_11D1.MORCEAU_8_COL_FIN   := trim (SUBSTR(lig.donnees,57,3));
    elt_tab_11D1.MORCEAU_9_NOM_TABLE := trim (SUBSTR(lig.donnees,60,3));
    elt_tab_11D1.MORCEAU_9_COL_DEB   := trim (SUBSTR(lig.donnees,63,3));
    elt_tab_11D1.MORCEAU_9_COL_FIN   := trim (SUBSTR(lig.donnees,66,3));
    IF tab_11D1                      IS NULL THEN
      tab_11D1                       := t_TGE_REF_VRDES();
    END IF;
    tab_11D1.extend;
    tab_11D1(tab_11D1.last)   :=elt_tab_11D1;
  elsif type_carte             ='V' THEN
    elt_tab_11V.NUMERO_DE_PAC :=pNumPac;
    elt_tab_11V.CODE_TABLE    :=pCodeTable;
    v_num_ligne               := trim (SUBSTR(lig.donnees,19,4));
    v_code_seq                := trim (SUBSTR(lig.donnees,24,1));
    IF v_code_seq             IS NULL THEN
      v_code_seq              :='1';
    END IF;
    IF pCodeTableOld  != pCodeTable THEN
      v_cmpt_numLigne := 0;
    END IF;
    IF v_num_ligne      IS NULL THEN
      IF v_code_seq      ='1' THEN
        v_cmpt_numLigne := v_cmpt_numLigne+100;
      END IF;
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR(v_cmpt_numLigne,'FM09999999') ||v_code_seq;
    ELSE
      elt_tab_11V.NUMERO_DE_LIGNE:= TO_CHAR((to_number(v_num_ligne)*100),'FM09999999') ||v_code_seq;
    END IF;
    elt_tab_11V.ENREGISTREMENT := SUBSTR(lig.donnees,29,86);
    elt_tab_11V.LONGUEUR_INFO  := trim (SUBSTR(lig.donnees,26,3));
    IF tab_11V                 IS NULL THEN
      tab_11V                  := t_TGE_REF_VRVAL();
    END IF;
    tab_11V.extend;
    tab_11V(tab_11V.last):=elt_tab_11V;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart11' , lig.num_lig||','||pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise;
  raise_application_error(-20000, 'FSED cart 11  '|| sqlerrm);
END setCart11;
/**************************************************
Fonc : getLibResolu 
DESC : Calcul du libelle resolu
**************************************************/
FUNCTION getLibResolu(pNumPac       IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
                      pCodeCaisse   IN TGE_REF_CAISSE.CODECAISSE%TYPE,
                      pLibRUB       IN TGE_REF_RUBRIQUE.LIBRUB%TYPE) RETURN VARCHAR2 IS 
                      
w_libcaisse        TGE_REF_CAISSE.LIBCAISSE%TYPE;
w_nombre_occ       NUMBER;
w_libResolu        TGE_REF_LIBRUB_COTIS.LIB_RESOLU%TYPE;
w_first_pos        NUMBER;
w_length_seq       NUMBER :=1;
w_reste            TGE_REF_RUBRIQUE.LIBRUB%TYPE;
j                  NUMBER ; 
w_seq              TGE_REF_RUBRIQUE.LIBRUB%TYPE;

BEGIN
  BEGIN 
  SELECT LIBCAISSE
  INTO   w_libcaisse
  FROM   TGE_REF_CAISSE
  WHERE  numpac= pNumPac
  AND    codecaisse = pCodeCaisse;
  EXCEPTION 
    WHEN OTHERS THEN 
     w_libcaisse := null;
  END ;
  select ( (LENGTH(pLibRUB) - LENGTH(REPLACE(pLibRUB,'#',NULL)) ) / NVL(LENGTH('#'),1) ) INTO w_nombre_occ from dual;
  
  IF w_nombre_occ =1 THEN
    select substr(replace(pLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
  ELSE

    select instr (pLibRUB ,'#') into w_first_pos from dual;
    for i IN w_first_pos..length(pLibRUB) Loop 
      if substr(pLibRUB,i+1,1)='#' THEN 
        w_length_seq:= w_length_seq+1;
      else         
         exit;
      END IF;
    END LOOP;
    if w_length_seq =1 THEN 
     select substr(replace(pLibRUB,'#',w_libcaisse),0,40) INTO w_libResolu from dual;
    else
      for k in 0..w_length_seq-1 loop
        w_seq := w_seq ||'#';
      end loop;
      select replace(pLibRUB,w_seq,substr(w_libcaisse,0,w_length_seq)) INTO w_libResolu from dual;
      w_seq := null;
    end if;
  END IF;
  return w_libResolu;
END getLibResolu ;
      
/**************************************************************************
PROC : setCart15 
DESC : cart 15
***************************************************************************/
PROCEDURE setCart15(
    p_id    IN NUMBER,
    lig     IN TGE_IMPORT_FSED%rowtype,
    pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
w_codegroup tge_ref_caisse.codegroup%type;

CURSOR REF_CAISSE(p_caisseref IN TGE_REF_CAISSE.caisseref%type,pNumPac IN TGE_REF_VRREP.NUMERO_DE_PAC%TYPE) is 
  SELECT CODECAISSE
  FROM   TGE_REF_CAISSE
  WHERE  NUMPAC    = pNumPac
  AND    caisseref = p_caisseref ;

BEGIN
  elt_tab_15.NUMPAC              := pNumPac;
  elt_tab_15.CODERUB             := trim(SUBSTR(lig.donnees,10,4));
  elt_tab_15.NOSEQU              := trim(SUBSTR(lig.donnees,24,1));
  elt_tab_15.TYPERUB             := trim(SUBSTR(lig.donnees,29,1));
  elt_tab_15.SENSRUB             := trim(SUBSTR(lig.donnees,30,1));
  elt_tab_15.CODEUNITE           := trim(SUBSTR(lig.donnees,31,1));
  elt_tab_15.LIBRUB              := trim(SUBSTR(lig.donnees,32,40));
  elt_tab_15.CODEFICHE           := trim(SUBSTR(lig.donnees,72,1));
  elt_tab_15.FLAGDVDR            := trim(SUBSTR(lig.donnees,73,1));
  elt_tab_15.LIBLAN1             := trim(SUBSTR(lig.donnees,74,20));
  elt_tab_15.LIBLAN2             := trim(SUBSTR(lig.donnees,94,20));
  elt_tab_15.LIBLAN3             := trim(SUBSTR(lig.donnees,114,20));
  elt_tab_15.NATURERUB           := trim(SUBSTR(lig.donnees,134,1));
  elt_tab_15.ORDREXEC            := trim(SUBSTR(lig.donnees,135,4));
  elt_tab_15.CODETAUX            := trim(SUBSTR(lig.donnees,139,3));
  elt_tab_15.CODEACCDEREMISE     := trim(SUBSTR(lig.donnees,142,3));
  elt_tab_15.QUALIFNOMBRE        := trim(SUBSTR(lig.donnees,145,1));
  elt_tab_15.QUALIFTAUX          := trim(SUBSTR(lig.donnees,146,1));
  elt_tab_15.QUALIFMONTANT       := trim(SUBSTR(lig.donnees,147,1));
  elt_tab_15.FLAGMONTANT         := trim(SUBSTR(lig.donnees,148,1));
  elt_tab_15.FLAGNB              := trim(SUBSTR(lig.donnees,149,1));
  elt_tab_15.FLAGTAUX            := trim(SUBSTR(lig.donnees,150,1));
  elt_tab_15.FLAGPCTG            := trim(SUBSTR(lig.donnees,151,1));
  elt_tab_15.FLAGIMP             := trim(SUBSTR(lig.donnees,152,1));
  elt_tab_15.POSITIONCURSEUR     := trim(SUBSTR(lig.donnees,153,1));
  elt_tab_15.CODECAISSE          := trim(SUBSTR(lig.donnees,154,3));
  elt_tab_15.CODEVENTILCOMPTABLE := trim(SUBSTR(lig.donnees,157,4));
  elt_tab_15.TYPTRAIT            := trim(SUBSTR(lig.donnees,171,10));
  elt_tab_15.FLAGRATTACH         := trim(SUBSTR(lig.donnees,161,1));
  elt_tab_15.FLAGARRET           := trim(SUBSTR(lig.donnees,162,1));
  elt_tab_15.OPTION_RETRO        := trim(SUBSTR(lig.donnees,163,1));

  BEGIN
     SELECT CODEGROUP
     INTO   w_codegroup
     FROM   TGE_REF_CAISSE
     WHERE  NUMPAC     = pNumPac
     AND    CODECAISSE = elt_tab_15.CODECAISSE ;
  EXCEPTION
    WHEN OTHERS THEN
      w_codegroup :=NULL;
  END ;
  
  IF tab_15_lib  IS NULL THEN
     tab_15_lib := t_TGE_REF_LIBRUB_COTIS();
  END IF;
  
  IF elt_tab_15.CODECAISSE  is null THEN 
    elt_tab_15_lib.NUMPAC     := pNumPac;
    elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
    elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;
    elt_tab_15_lib.CODECAISSE := '*';
    elt_tab_15_lib.CAISSEREF  := '*';
    
    tab_15_lib.extend;
    tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
  ELSE
    IF elt_tab_15.LIBRUB not like '%#%' THEN  
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');
        elt_tab_15_lib.LIB_RESOLU := elt_tab_15.LIBRUB;      
        IF w_codegroup ='R' THEN 
          FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
          elt_tab_15_lib.CAISSEREF  :=elt_tab_15.CODECAISSE;
          elt_tab_15_lib.CODECAISSE :=nvl(i.CODECAISSE,'*');
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
          END LOOP;
        ELSE
          elt_tab_15_lib.CODECAISSE :=nvl(elt_tab_15.CODECAISSE,'*');
          elt_tab_15_lib.CAISSEREF  :='*';
          tab_15_lib.extend;
          tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
        END IF;
        
    ELSE
     FOR i IN REF_CAISSE (elt_tab_15.CODECAISSE,pNumPac) LOOP
        elt_tab_15_lib.NUMPAC     := pNumPac;
        elt_tab_15_lib.CODERUB    := nvl(elt_tab_15.CODERUB,'*');            
        elt_tab_15_lib.CODECAISSE := nvl(i.CODECAISSE,'*');
        elt_tab_15_lib.LIB_RESOLU := getLibResolu(pNumPac,elt_tab_15_lib.CODECAISSE,elt_tab_15.LIBRUB); 
        IF w_codegroup ='R' THEN 
          elt_tab_15_lib.CAISSEREF  := elt_tab_15.CODECAISSE;
         ELSE
           elt_tab_15_lib.CAISSEREF  := '*';
         END IF;        
         tab_15_lib.extend;
         tab_15_lib(tab_15_lib.last):=elt_tab_15_lib;
      END LOOP;
    
    END IF ;
  END IF;     
  
  IF tab_15                      IS NULL THEN
    tab_15                       := t_TGE_REF_RUBRIQUE();
  END IF;
  tab_15.extend;
  tab_15(tab_15.last):=elt_tab_15;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart15' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 15  '|| sqlerrm);
END setCart15;
/*******************************************************************
PROC : setCart17
DESC :  cart 17
*******************************************************************/
PROCEDURE setCart17(
    p_id IN NUMBER,
    lig TGE_IMPORT_FSED%rowtype,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE)
IS
  type_carte VARCHAR(3) := '';
BEGIN
  type_carte                   := trim(SUBSTR(lig.donnees,10,2));
  IF type_carte                 ='CR' THEN
    elt_tab_17CR.NUMPAC        := pNumPac;
    elt_tab_17CR.CODERUB       := trim(SUBSTR(lig.donnees,13,4));
    elt_tab_17CR.NOSEQU        := trim(SUBSTR(lig.donnees,18,3));
    elt_tab_17CR.CONTEXTE      := trim(SUBSTR(lig.donnees,22,50));
    elt_tab_17CR.CONTEXTESUITE := trim(SUBSTR(lig.donnees,72,30));
    IF tab_17CR                IS NULL THEN
      tab_17CR                 := t_TGE_REF_RUBRIQUE_CONTEXTE();
    END IF;
    tab_17CR.extend;
    tab_17CR(tab_17CR.last)         :=elt_tab_17CR;
  elsif type_carte                   ='DM' THEN
    IF trim(SUBSTR(lig.donnees,13,1))='F' THEN
      elt_tab_17DMF.NUMPAC          := pNumPac;
      elt_tab_17DMF.ELEMENT         := trim(SUBSTR(lig.donnees,15,4));
      elt_tab_17DMF.CODEMODIF       := trim(SUBSTR(lig.donnees,134,1));
      elt_tab_17DMF.LIBELLE         := trim(SUBSTR(lig.donnees,22,35));
      elt_tab_17DMF.TYPE            := trim(SUBSTR(lig.donnees,58,1));
      elt_tab_17DMF.LONGUEUR        := to_number(trim(SUBSTR(lig.donnees,60,2)));
      elt_tab_17DMF.NBDECI          := to_number(trim(SUBSTR(lig.donnees,62,1)));
      elt_tab_17DMF.MASQUE          := to_number(trim(SUBSTR(lig.donnees,64,2)));
      elt_tab_17DMF.STATUT          := trim(SUBSTR(lig.donnees,67,1));
      elt_tab_17DMF.GROUPE          := trim(SUBSTR(lig.donnees,69,3));
      elt_tab_17DMF.OCC1            := to_number(trim(SUBSTR(lig.donnees,73,3)));
      elt_tab_17DMF.OCC2            := to_number(trim(SUBSTR(lig.donnees,77,3)));
      elt_tab_17DMF.IND1            := trim(SUBSTR(lig.donnees,81,5));
      elt_tab_17DMF.IND2            := trim(SUBSTR(lig.donnees,86,4));
      elt_tab_17DMF.TEMOINS         := trim(SUBSTR(lig.donnees,91,42));
      elt_tab_17DMF.CALCUL_RETRO    := trim(SUBSTR(lig.donnees,136,1));
      IF tab_17DMF                  IS NULL THEN
        tab_17DMF                   := t_TGE_REF_DICOZ();
      END IF;
      tab_17DMF.extend;
      tab_17DMF(tab_17DMF.last) :=elt_tab_17DMF;
    END IF;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'setCart17' , lig.num_lig||','||pNumPac , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED cart 17  '|| sqlerrm);
END setCart17;
/***********************************************************************
PROC : getNumLigne
DESC : recuperer le code table
*************************************************************************/
PROCEDURE getNumLigne(
    p_id IN NUMBER)
IS
BEGIN
  OPEN cur_numlig00(p_id) ;
  LOOP
    FETCH cur_numlig00 BULK COLLECT INTO tab_numLigne00 ;
    EXIT
  WHEN cur_numlig00%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig00;
  OPEN cur_numlig99(p_id) ;
  LOOP
    FETCH cur_numlig99 BULK COLLECT INTO tab_numLigne99 ;
    EXIT
  WHEN cur_numlig99%NOTFOUND;
  END LOOP;
  CLOSE cur_numlig99;
END getNumLigne;
/***********************************************************************
FUNCT : GET_H2_COLONNE
DESC : recuperer la colonne clé de type DATE pour les tables de type H2
*************************************************************************/
FUNCTION GET_H2_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name =p_table_name
      AND tab.data_type    ='DATE'
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_H2_COLONNE;
/***********************************************************************
FUNCT : GET_M3_COLONNE
DESC : recuperer la colonne clé
*************************************************************************/
FUNCTION GET_M3_COLONNE(
    p_table_name IN VARCHAR2)
  RETURN VARCHAR2
IS
  w_column_name user_cons_columns.column_name%TYPE;
BEGIN
  BEGIN
    SELECT column_name
    INTO w_column_name
    FROM user_cons_columns
    WHERE table_name     =p_table_name
    AND constraint_name IN
      (SELECT user_constraints.constraint_name
      FROM user_constraints
      WHERE user_cons_columns.table_name =user_constraints.table_name
      AND CONSTRAINT_TYPE                ='P'
      )
    AND column_name IN
      (SELECT tab.column_name
      FROM user_tab_columns tab
      WHERE tab.table_name     =p_table_name
      AND tab.data_type!       ='DATE'
      AND tab.column_name NOT IN ('NUMPAC','PAIEZAD','PACMAT')
      );
    RETURN(w_column_name);
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN(NULL);
  END;
END GET_M3_COLONNE;
/***********************************************************************
FUNCT : GET_MONTH_00 
DESC : retourne le  mois de paie indiqué dans le FSED carte 00
*************************************************************************/
FUNCTION GET_PERIODE_00(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN NUMBER
IS
  w_moi_eff NUMBER ;
BEGIN
  SELECT SUBSTR(donnees,70,6)
  INTO w_moi_eff
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_moi_eff);
END GET_PERIODE_00 ;
/***********************************************************************
FUNCT : IS_VALID_COLUMN 
DESC : retourne 1 si c'est une colonne de la table
*************************************************************************/
FUNCTION IS_VALID_COLUMN(
    p_TABLE_NAME VARCHAR2 ,
    p_colonne IN VARCHAR2 )
  RETURN NUMBER
IS
  flag NUMBER ;
BEGIN
  SELECT COUNT(*)
  INTO flag
  FROM user_tab_columns
  WHERE table_name =p_TABLE_NAME
  AND column_name  =p_colonne;
  RETURN (flag);
END IS_VALID_COLUMN ;
/***********************************************************************
FUNCT : GET_NUMPAC 
DESC : retourne le  numpac carte 00
*************************************************************************/
FUNCTION GET_NUMPAC(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER )
  RETURN VARCHAR2
IS
  w_numpac VARCHAR2(7) ;
BEGIN
  SELECT SUBSTR(donnees,1,6)
  INTO w_numpac
  FROM TGE_IMPORT_FSED
  WHERE id_trt =p_id
  AND NUM_LIG  =p_numligne;
  RETURN (w_numpac);
END GET_NUMPAC ;
/****************************************************************
FUNCT : GET_Statement 
DESC : retourne sql statment avec le type de colonne
*****************************************************************/
    FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2 ,
    p_colonne      IN VARCHAR2 ,
    p_alias        IN VARCHAR2 )
  RETURN VARCHAR2
IS
  v_alias VARCHAR2(100):=' ';
BEGIN
  IF p_alias IS NOT NULL THEN
    v_alias  :=p_alias||'.';
  END IF;
  IF p_type_colonne ='N' AND p_type_DICOZ ='N' THEN
    RETURN('TO_NUMBER(replace('||v_alias||p_colonne||',''.'','',''))');
  ELSIF p_type_DICOZ ='D1' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyyMMdd
  ELSIF p_type_DICOZ ='D2' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MMYYYY''),1,TO_date('||v_alias||p_colonne||',''MMYYYY''),decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null))');--MMyyyy/YYYYMM
   ELSIF p_type_DICOZ ='D3' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMM''),1,TO_date('||v_alias||p_colonne||',''YYYYMM''),null)');--yyyyMM
   ELSIF p_type_DICOZ ='D4' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''DD''),1,TO_date('||v_alias||p_colonne||',''DD''),null)');--dd
   ELSIF p_type_DICOZ ='D5' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''MM''),1,TO_date('||v_alias||p_colonne||',''MM''),null)');--MM 
   ELSIF p_type_DICOZ ='D6' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');--yyyy
   ELSIF p_type_DICOZ ='D7' AND p_type_colonne='D' THEN
    RETURN('decode(is_date('||v_alias||p_colonne||',''YYYYMMDD''),1,TO_date('||v_alias||p_colonne||',''YYYYMMDD''),null)');
  ELSIF p_type_DICOZ ='V' THEN
    RETURN('TO_CHAR('||v_alias||p_colonne||')');
  ELSE
    RETURN(v_alias||p_colonne);
  END IF;
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_Statement 
DESC : 
*****************************************************************/
FUNCTION GET_Statement(
    p_type_colonne IN VARCHAR2 ,
    p_type_DICOZ   IN VARCHAR2,
    p_colonne      IN VARCHAR2 )
  RETURN VARCHAR2
IS
BEGIN
  RETURN GET_Statement (p_type_colonne,p_type_DICOZ , p_colonne , 'i');
END GET_STATEMENT ;
/****************************************************************
FUNCT : GET_TYPE_RETOUR 
DESC  : retourne type de retour
*****************************************************************/
FUNCTION GET_TYPE_RETOUR(
    p_id       IN NUMBER ,
    p_numligne IN NUMBER)
  RETURN VARCHAR2
IS
  w_type_retour VARCHAR2(2);
BEGIN
  SELECT SUBSTR(DONNEES,68,2)
  INTO w_type_retour
  FROM TGE_IMPORT_FSED
  WHERE id_trt      =p_id
  AND NUM_LIG       =p_numligne;
  IF w_type_retour IS NULL OR w_type_retour='  ' THEN
    w_type_retour  :='RN';
  END IF;
  RETURN (w_type_retour);
END GET_TYPE_RETOUR ;
/*****************************************************
PROC : purge_carte80
DESC :
*****************************************************/
PROCEDURE purge_carte80(
    p_id    IN NUMBER,
    p_mois  IN VARCHAR2,
    p_lig00 IN NUMBER ,
    p_lig99 IN NUMBER )
IS
BEGIN
  DELETE
  FROM DIC_TGE_RESPAIE_RUBRIQUE
  WHERE (numpac,paiezad,TO_CHAR(to_date(periodepaie),'YYYYMM')) IN
    (SELECT numpac ,
      paiezad ,
      PERIODEPAIE
    FROM TGE_IMPORT_FSED_80
    WHERE id_trt =p_id
    AND numligne BETWEEN p_lig00 AND p_lig99
    GROUP BY(numpac,paiezad,PERIODEPAIE)
    HAVING COUNT(*)>0
    ) ;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_carte80' , NULL, err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge_carte80  '|| sqlerrm);
END purge_carte80;
/******************************************************************
PROC : insertCart80 
********************************************************************/
PROCEDURE sous_insertCart80(
    p_id    IN NUMBER,
    p_newId IN NUMBER)
IS
  req          VARCHAR2(32767);
  v_start      NUMBER;
  v_stop       NUMBER;
  v_flag_cart  NUMBER;
  w_moi_retour NUMBER;
  w_numpac TGE_REF_MAPDO.NUMPAC%TYPE;
  jobno         NUMBER;
  w_type_retour VARCHAR2(2);
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  IF tab_numLigne00 IS NOT NULL AND tab_numLigne99 IS NOT NULL THEN
    FOR i IN tab_numLigne00.first..tab_numLigne00.last
    LOOP
      IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
        w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
        w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
        w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        insert_gap_trt_suivi(p_id,'DEBUT',NULL,'BATCH',w_type_retour);
        purge_carte80(p_id,w_moi_retour,tab_numLigne00(i),tab_numLigne99(i));
        -- la periodepaie est forcé au premier jour du moi
        req := 'INSERT INTO DIC_TGE_RESPAIE_RUBRIQUE (NUMPAC,PAIEZAD,PACMAT,CLASSE,CAISSE_RUB,CLEIMP,CODERES,CODERUB,IMPUTATION,MONTANT,NOMBRE,ORDRE,PERIODEPAIE,SENS,TAUX,TYPE,DATE_DEB_ARRET,PERIODE_RATTACH_DEB,PERIODE_RATTACH_FIN,PERIODE_AFFECTATION,MATRIC) ';
        req := req ||' SELECT DISTINCT i.numpac,i.paiezad,i.pacmat ,i.classe,i.attribut ,';--DIT  50818
        req := req ||' (dense_rank() over(partition by i.NUMPAC, i.PAIEZAD, i.CODERUB, i.CODERES order by i.NUMLIGNE)-1 )as CLEIMP';
        req := req ||' ,i.coderes,i.coderub,i.imputation, case when  i.sens =''-''  then ((i.montant)*(-1)) else i.montant end as montant ,';
        req         := req ||' i.nombre,to_number(r.ORDREXEC),TO_DATE('||w_moi_retour||'01,''YYYYMMDD''),';
        req         := req ||' i.sens,i.taux,';
        req         := req ||' i.type,to_date(i.DATE_DEB_ARRET,''yyyymmdd''),to_date(i.PERIODE_RATTACH_DEB,''yyyymmdd''),to_date(i.PERIODE_RATTACH_FIN,''yyyymmdd''),to_date(replace(i.PERIODE_AFFECTATION,''000000'',null),''yyyymm''),i.MATRICULE FROM TGE_IMPORT_FSED_80 i,TGE_REF_RUBRIQUE r  WHERE id_trt= :id_trt ';
        req         := req ||' AND r.coderub= i.coderub AND r.numpac = i.numpac ';
        req         := req ||' AND ( ';
        req         := req ||' (numligne >=' ||tab_numLigne00(i)||' AND numligne <= '||tab_numLigne99(i)||') ';
        req         := req ||' ) ';
        v_flag_cart := 1;
      ELSE
        v_flag_cart := 0;
      END IF;
      IF req IS NOT NULL THEN
        insert_gap_trt(p_id,w_numpac,w_moi_retour,w_type_retour);
        EXECUTE IMMEDIATE req USING p_id;
      ELSIF req IS NULL OR v_flag_cart = 0 THEN
        FSED_ERREUR( p_id , 'sous_insertCart80' , NULL, err_code||'-'||err_msg );
      END IF;
    END LOOP;
  ELSE
    req := NULL;
  END IF;
  merge INTO
  (SELECT * FROM GAP_TRT_LISTE_MAT WHERE id_trt=p_id
  ) a USING
  (SELECT DISTINCT numpac,
    NVL(pacmat,paiezad) AS pacmat
  FROM TGE_import_fsed_80
  WHERE id_trt     =p_id
  ) b ON (a.numpac =b.numpac AND a.pacmat=b.pacmat)
WHEN NOT matched THEN
  INSERT
    (a.id_trt,a.numpac,a.pacmat
    ) VALUES
    (p_id,b.numpac,b.pacmat
    );
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  v_stop := DBMS_UTILITY.GET_TIME;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  --DBMS_OUTPUT.PUT_LINE(req);
  --FIXME utiliser la procédure trace_dbms_output()
  FSED_ERREUR( p_id , 'insertCart80' , p_id || ',' || p_newId, err_code||'-'||err_msg||'- Requete : '||req);
  raise_application_error(-20000, 'FSED insertCart80  '|| sqlerrm);
END sous_insertCart80;
/******************************************************************
PROC : insertCart30 (p_id IN NUMBER)
DESC :
********************************************************************/
PROCEDURE insertCart80
  (
    p_id    IN NUMBER,
    p_newId IN NUMBER
  )
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  jobno    NUMBER;
  finished NUMBER;
BEGIN
  finished:=1;
  dbms_job.submit(jobno, 'sous_insertCart80('||p_id||','||p_newid||')',sysdate, NULL);
END insertCart80;
/*******************************************************************
PROC : tmp_histo_fsed_30
Fonc :
********************************************************************/
PROCEDURE tmp_histo_fsed_30(
    p_id     IN NUMBER ,
    p_numpac IN TGE_REF_MAPDO.NUMPAC%TYPE,
    p_moi    IN VARCHAR2
  )
IS
  CURSOR tmp_30
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = do.TABLEGXP
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
    dicoz.longueur
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO ,tge_import_fsed_30 imp,tge_ref_dicoz dicoz
  WHERE do.TABLEGXP    ='DIC_ADM_CONTRAT_HISTO'
  AND imp.code_element =do.element
  AND imp.tablegxp     =do.tablegxp
  AND imp.donneegxp    =do.donneegxp
  AND id_trt           =p_id
  AND imp.numpac       = p_numpac
  AND imp.TABLEGXP     =do.tablegxp
  AND imp.code_element =do.element
  AND dicoz.element    = do.element
  AND dicoz.numpac     = imp.numpac ;
  stmtClause CLOB ;
  cmp NUMBER :=0;
BEGIN
  stmtClause := 'insert into TGE_FSED_30_TEMPORARY (id_trt,numpac,pacmat,paiezad,TOUPDATE)  (SELECT '||p_id||','''||p_numpac||''',compteur.pacmat,compteur.paiezad,decode(nvl(cmp,-1),cmp1,''N'',''O'') as TOUPDATE FROM ';
  stmtClause :=stmtClause||' (SELECT t.pacmat,t.paiezad,count(*) as cmp  FROM tge_import_fsed_30 t , dic_adm_contrat_histo a  where t.numpac ='''||p_numpac||''' and t.id_trt='||p_id||' and t.tablegxp=''DIC_ADM_CONTRAT_HISTO''';
  stmtClause :=stmtClause||' and a.paiezad = t.paiezad and a.pacmat =t.pacmat ';
  stmtClause :=stmtClause||' and a.numpac='''||p_numpac||''' and a.date_eff= ';
  stmtClause :=stmtClause||'(select max(dach2.date_eff) from dic_adm_contrat_histo dach2 where dach2.date_eff<=TO_DATE('''||p_moi||'01'',''YYYYMMDD'') and dach2.paiezad = t.paiezad ';
  stmtClause :=stmtClause||' AND dach2.pacmat= t.pacmat and dach2.numpac='''||p_numpac||''')';
  stmtClause :=stmtClause|| ' AND (';
  FOR c IN tmp_30
  LOOP
    IF cmp!=0 THEN
      stmtClause :=stmtClause||' OR ';
    END IF;
    cmp                      := cmp+1;
    IF c.typeelt              ='DATE' THEN
      stmtClause             :=stmtClause||' ( NVL(to_char(a.'||c.donneegxp;
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''YYYYMM''';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''YYYYMMDD''';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''YYYY''';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''MM''';
      END IF;
      stmtClause   :=stmtClause||'),''NULL'')=NVL(to_char(replace(replace(t.valeur,'' '','''')';
      IF c.longueur   =6 THEN
        stmtClause           :=stmtClause||',''000000'',null';
      elsif c.longueur=8 THEN
        stmtClause           :=stmtClause||',''00000000'',null';
      elsif c.longueur=4 THEN
        stmtClause           :=stmtClause||',''0000'',null';
      elsif c.longueur=2 THEN
        stmtClause           :=stmtClause||',''00'',null';
      END IF;
      stmtClause   :=stmtClause||')),''NULL'') ';
      stmtClause   :=stmtClause||' AND t.donneegxp ='''||c.donneegxp||''')' ;
    elsif c.typeelt ='VARCHAR2' THEN
      stmtClause   :=stmtClause||'( NVL(a.'||c.donneegxp||',''NULL'')=NVL(to_char(t.valeur),''NULL'') AND t.donneegxp ='''||c.donneegxp||''')' ;
    ELSE
      stmtClause :=stmtClause||' ( NVL(a.'||c.donneegxp||',0)=nvl(is_number(t.valeur),0) AND t.donneegxp ='''||c.donneegxp||''')' ;
    END IF;
  END LOOP;
  stmtClause :=stmtClause|| ' )group by t.pacmat,t.paiezad)HISTO right join (select f.pacmat,f.paiezad,count(*)as cmp1 from tge_import_fsed_30 f WHERE f.numpac='''||p_numpac||''' AND f.id_trt  ='||p_id||' AND f.tablegxp=''DIC_ADM_CONTRAT_HISTO'' group by f.pacmat,f.paiezad) Compteur ';
  stmtClause :=stmtClause||' ON  histo.pacmat =compteur.pacmat and histo.paiezad =compteur.paiezad ) ';
  FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 stmtClause= '||substr(stmtClause,0,3800) );
  --dbms_output.put_line('test '||stmtClause);
  --FIXME utiliser la procédure trace_dbms_output()
   EXECUTE_IMMEDIATE_STRING  (stmtClause,0);
END tmp_histo_fsed_30;
/*******************************************************************
PROC : sous_insertCart30
Fonc : traitement des tables M1,M7,M3ANNEE,M3MOIS,MULTIPLE,OCCC
UNIQUE,H2 et AVPERS.
********************************************************************/
PROCEDURE sous_insertCart30(
    p_id    IN NUMBER,
    p_newId IN NUMBER,
    p_table IN VARCHAR2 )
IS
  req               CLOB;
  reqChrono         VARCHAR2(500);
  reqRc             CLOB;
  w_date_RC         DATE;
  w_date_indic      DATE;
  w_date_COMP       DATE;
  reqPropag         CLOB;
  reqTrace          CLOB;
  reqW580           CLOB;
  reqWL52           CLOB;
  reqUdpateDate     CLOB;
  ssreq             CLOB;
  v_start           NUMBER;
  v_stop            NUMBER;
  w_table           TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_table_param     TGE_REF_MAPDO.TABLEGXP%TYPE;
  w_type_colonne    VARCHAR2(1);
  w_cle             VARCHAR2(12);
  w_type            VARCHAR2(1);
  w_colonne_30      VARCHAR2(12);
  coldtfin          VARCHAR2(50);
  v_flag_cart       NUMBER;
  w_date_eff        user_cons_columns.column_name%TYPE;
  w_code_caisse     user_cons_columns.column_name%TYPE;
  w_ann_social      VARCHAR2(100);
  w_table_soc       VARCHAR2(100);
  w_type_retour     VARCHAR2(2);
  w_moi_retour      NUMBER;
  w_numpac          TGE_REF_MAPDO.NUMPAC%TYPE;
  w_trace           VARCHAR2(50);
  tabW580_h         TAB_DATE_w580_H;
  tabWL52_h         TAB_DATE_WL52_H;
  objTable          TGE_REF_MAPTA%rowtype;
  w_00              NUMBER;
  w_99              NUMBER;
  w_elem            VARCHAR2(4);
  w_occ             VARCHAR2(2);
  
  CURSOR cur_element ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      (SELECT DISTINCT data_type
       FROM   user_tab_columns cln
       WHERE  cln.table_name = do.TABLEGXP
       AND    cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
     ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
      
   FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
     UNION ALL
     SELECT *
     FROM TGE_REF_MAPDO
     WHERE numpac     ='*'
     AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO 
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
            tablegxp,
            donneegxp
    FROM  tge_import_fsed_30 imp
    WHERE id_trt       = p_id
    AND   imp.numpac   = p_numpac
    AND   imp.TABLEGXP = do.tablegxp
    AND   imp.code_element = do.element
    ) ;

  CURSOR cur_element_histo ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
        FROM user_tab_columns cln
        WHERE cln.table_name = do.TABLEGXP
        AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt
    FROM
     (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      UNION ALL
      SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac     ='*'
      AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac)
    ) DO
  WHERE do.TABLEGXP=p_table
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      = p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;

  CURSOR cur_SECUPACMAT ( p_numpac IN VARCHAR2)
  IS
    SELECT DISTINCT do.DONNEEGXP ,
      ( SELECT DISTINCT data_type
      FROM user_tab_columns cln
      WHERE cln.table_name = 'SECUPACMAT'
      AND cln.column_name  = do.DONNEEGXP
      ) AS typeelt,
      ( select case 
       when type='N' and masque=1 THEN 'D1'  
       when type='N' and masque=2 THEN 'D2' 
       when type='N' and masque=3 THEN 'D3' 
       when type='N' and masque=4 THEN 'D4' 
       when type='N' and masque=5 THEN 'D5' 
       when type='N' and masque=6 THEN 'D6' 
       when type='N' and masque=7 THEN 'D7' 
       when type='P'  OR (type ='N' AND MASQUE NOT IN (1,2,3,4,5,6,7))THEN 'N' 
       WHEN type ='A' THEN 'V'
       ELSE type 
       end as typeDICOZ
      from tge_ref_dicoz d where numpac=p_numpac and element=do.element )as typeDICOZ
  FROM
    (SELECT * FROM TGE_REF_MAPDO WHERE numpac=p_numpac
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=p_numpac
      )
    ) DO,
    user_tab_columns u
  WHERE do.TABLEGXP ='DIC_ADM_CONTRAT'
  AND u.column_name = do.DONNEEGXP
  AND u.table_name  = 'SECUPACMAT'
  AND EXISTS
    (SELECT code_element,
      tablegxp,
      donneegxp
    FROM tge_import_fsed_30 imp
    WHERE id_trt        =p_id
    AND imp.numpac      =p_numpac
    AND imp.TABLEGXP    =do.tablegxp
    AND imp.code_element=do.element
    ) ;
  clinsertcols       CLOB;
  clinsertsel        CLOB;
  clinsertvalues     CLOB;
  clmerge            CLOB;
  nbmapta            NUMBER;
  hasDtfin           NUMBER;
  clssreqPivotMerge  CLOB;
  clupdateMerge      CLOB;
  clinsertDonMerge   CLOB;
  clinsertValMerge   CLOB;
  clssreqPivotSec    CLOB;
  clupdSecu          CLOB;
  clinsertDonSecu    CLOB;
  clinsertValSecu    CLOB;
TYPE t_colonne IS  TABLE OF user_tab_columns.column_name%type;
  tab_colonne         t_colonne;
  donneesUpdatePropag CLOB;
  donneesSelectPropag CLOB;
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début p_id='||p_id||';p_newId='||p_newId||';p_table='||p_table);
  v_start := DBMS_UTILITY.GET_TIME;
  getNumLigne(p_id);
  --gestion du trigger des DACH : insertion dans la table temporaire BYPASS_TRG_DACH_ON_SESSION
  INSERT INTO BYPASS_TRG_DACH_ON_SESSION(date_event,MESSAGE)VALUES(sysdate,'Retour de paie Carte 30');
  COMMIT;
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i <=tab_numLigne99.count AND tab_numLigne99(i)IS NOT NULL THEN
      w_numpac := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_type_retour := GET_TYPE_RETOUR(p_id,tab_numLigne00(i));
      IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
        reqChrono := ' AND ( (pacmat,NVL(code_chrono,''0'') ) IN (select pacmat,nvl(max(imp.code_chrono),''0'')  from tge_import_FSED_30 imp WHERE  imp.id_trt='||p_id||' AND imp.numpac='''||w_numpac||''' AND imp.tablegxp = '''||p_table||''' and imp.CODE_ELEMENT=tge_import_FSED_30.CODE_ELEMENT AND NVL(imp.indicatif,''XyZ'')=NVL(tge_import_FSED_30.indicatif,''XyZ'') AND imp.pacmat =tge_import_FSED_30.pacmat   group by imp.pacmat))';
      ELSE
        reqChrono := '';
      END IF;
      IF w_type_retour IN ('RN','RC','RT') THEN
        w_moi_retour := GET_PERIODE_00(p_id,tab_numLigne00(i));
        IF p_table    ='DIC_ADM_CONTRAT_HISTO' THEN
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Début p_id='||p_id ||';w_numpac='||w_numpac||';w_moi_retour='||w_moi_retour );
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'GAP_TRT_LISTE_MAT',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
              DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_IMPORT_FSED_30',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          tmp_histo_fsed_30(p_id,w_numpac,w_moi_retour);
          COMMIT;
          DBMS_STATS.GATHER_TABLE_STATS( ownname => sys_context('USERENV','SESSION_SCHEMA') ,TABNAME=>'TGE_FSED_30_TEMPORARY',METHOD_OPT => 'FOR ALL COLUMNS SIZE 254',estimate_percent => 100, cascade => true , DEGREE=>4);
          FSED_AVANCEMENT(p_id,'tmp_histo_fsed_30 Fin ');
        END IF;
        SELECT COUNT(*)
        INTO nbmapta
        FROM
          (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
          UNION ALL
          SELECT *
          FROM TGE_REF_MAPTA
          WHERE numpac        ='*'
          AND TABLEPARAM NOT IN
            (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            )
          ) TA
        WHERE ta.tableparam=p_table
        AND ALLERRETOUR   IN ('2','R')
        AND TABLETYPE     IS NOT NULL
        AND TABLEPHY      IS NOT NULL ;
        IF (nbmapta        > 0) THEN
          SELECT DISTINCT numpac,
            NULL AS rownumber ,
            tableparam,
            NULL AS fichier,
            tablephy,
            allerretour,
            tabletype,
            moiszero,
            nbmoiscons,
            sensiblerhid,
            reserve
          INTO objtable
          FROM
            (SELECT * FROM TGE_REF_MAPTA WHERE numpac=w_numpac
            UNION ALL
            SELECT *
            FROM TGE_REF_MAPTA
            WHERE numpac        ='*'
            AND TABLEPARAM NOT IN
              (SELECT TABLEPARAM FROM TGE_REF_MAPTA WHERE numpac=w_numpac
              )
            ) TA
          WHERE ta.tableparam=p_table
          AND ALLERRETOUR   IN ('2','R')
          AND TABLETYPE     IS NOT NULL
          AND TABLEPHY      IS NOT NULL;
          IF objtable.TABLETYPE ='M3ANNEE' THEN
            reqW580 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''W580'' ';
            EXECUTE IMMEDIATE reqW580 bulk collect INTO tabW580_h USING p_id,
            w_numpac;
          END IF;
          IF objtable.TABLETYPE ='M1' THEN
            reqWL52 := 'SELECT numpac,paiezad, valeur FROM TGE_IMPORT_FSED_30 AN WHERE  ID_TRT = :1 and AN.numpac  = :2 AND code_element =''WL52'' ';
            EXECUTE IMMEDIATE reqWL52 bulk collect INTO tabWL52_h USING p_id,
            w_numpac;
          END IF;
          w_table       := objtable.TABLEPHY;
          w_table_param := objtable.TABLEPARAM;
          w_type        := getTypeTable(w_table);
          FOR trig IN
          (SELECT object_name
          FROM user_objects
          WHERE lower(object_type)='trigger'
          AND lower(object_name) LIKE '%'
            ||lower(w_table)
            ||'%'
          AND (lower(object_name) LIKE 'horo%' )
          )
          LOOP
             EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' disable ',0);
          END LOOP;
          w_date_eff := GET_H2_COLONNE(w_table);
          --RSI : En cas de RN, si 1 ligne existe dans la même année sociale, il faut la détruire. La date de paie AAAAMM01 sera insérée
          IF w_type_retour = 'RN' THEN
          --DEBUT M3ANNEE
            IF objtable.TABLETYPE ='M3ANNEE' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabW580_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''W580'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M3ANNEE 
          --DEBUT M1
          IF objtable.TABLETYPE ='M1' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN '||objtable.TABLETYPE );
              IF tabWL52_h.exists(1) THEN
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac  and TGE_IMPORT_FSED_30.paiezad=T.paiezad';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)>=TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' SUBSTR('''||w_moi_retour||''',1,4)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  ';
                req := req ||' EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and numpac  = :numpac and TGE_IMPORT_FSED_30.paiezad=T.paiezad  ';
                req := req ||' AND TGE_IMPORT_FSED_30.CODE_ELEMENT =''WL52'' AND SUBSTR('''||w_moi_retour||''',5,2)<TGE_IMPORT_FSED_30.valeur ';
                req := req ||' AND '||w_date_eff||' between TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
                req := req ||' AND TO_DATE(';
                req := req ||' (SUBSTR('''||w_moi_retour||''',1,4)-1)||';
                req := req ||' NVL(TGE_IMPORT_FSED_30.valeur,'''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364 )';
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id,
                w_numpac;
              ELSE
                IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                  req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req                      := req ||' AND TO_DATE(';
                  req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
                  req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
                ELSE
                  req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
                  req := req ||' AND '||w_date_eff||' between TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
                  req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
                  req := req ||' AND TO_DATE(';
                  req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
                  req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
                END IF ;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';w_numpac'||w_numpac||';req='||req );
                EXECUTE IMMEDIATE req USING p_id;
                req:='';
              END IF;
            END IF;
          --FIN M1
            --RSI : En cas de RN, si 1 ligne existe dans la même année statistique, il faut la détruire. La date de paie AAAAMM01 sera insérée.
            IF objtable.TABLETYPE ='M9' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RN TABLETYPE M9');
              IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
                req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              ELSE
                req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
              END IF;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete req p_id='||p_id||';req='||req);
              EXECUTE IMMEDIATE req USING p_id;
              req:='';
            END IF;
          END IF;
          IF objtable.TABLETYPE ='AVPERS' THEN
            w_code_caisse      :='';
          ELSE
            w_code_caisse := GET_M3_COLONNE(w_table);
          END IF;
          IF w_type    ='m' THEN
            w_cle     := 'MATRIC';
          ELSIF w_type ='p' THEN
            w_cle     := 'PACMAT';
          ELSIF w_type ='z' THEN
            w_cle     := 'PAIEZAD';
          END IF;
          IF w_cle        = 'MATRIC' THEN
            w_colonne_30 := 'MATRICULE';
          ELSE
            w_colonne_30 := w_cle;
          END IF;
          IF objtable.TABLETYPE <> 'AVPERS' OR w_table ='DIC_ADM_CONTRAT' THEN
            FOR C IN cur_element(w_numpac)
            LOOP
              req                  :='';
              reqUdpateDate        :='';
              reqPropag            :='';
              w_type_colonne       := SUBSTR(c.typeelt,0,1);
              w_trace              := C.DONNEEGXP;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  :=clssreqPivotMerge||',';
              END IF;
              clssreqPivotMerge:=clssreqPivotMerge||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
              IF clupdateMerge IS NOT NULL THEN
                clupdateMerge  :=clupdateMerge||',';
              END IF;
              clupdateMerge       :=clupdateMerge||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              IF clinsertDonMerge IS NOT NULL THEN
                clinsertDonMerge  :=clinsertDonMerge||',';
              END IF;
              clinsertDonMerge    :=clinsertDonMerge||C.DONNEEGXP ;
              IF clinsertValMerge IS NOT NULL THEN
                clinsertValMerge  :=clinsertValMerge||',';
              END IF;
              clinsertValMerge:=clinsertValMerge||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
            END LOOP;
          END IF;
          -- TABLE Unique
          IF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='UNIQUE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  UNIQUE ');
            req             := 'MERGE INTO '||w_table ||' T USING ';
            req             := req ||' (select tge.* from (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur  FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= ' ;
            req             := req ||':id AND tablegxp='''||w_table ||''' ';
            req             := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND  numpac='''||w_numpac||'''   ';
            IF w_type_retour ='RC' AND IS_VALID_COLUMN (w_table,'PACMAT') >0 THEN
              req           := req || ' AND PAIEZAD in (select PAIEZAD from dic_adm_contrat_situ a where numpac = tge.numpac and pacmat not in ';
              req           := req || ' (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=a.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND TO_CHAR(G.DATE_COMP,''YYYYMM'')<= '''||w_moi_retour||'''))';
            END IF ;
            req                      := req|| reqChrono;
            req                      := req ||') pivot ( max(valeur) for donneegxp in ( '||clssreqPivotMerge;
            req                      := req ||')) )tge)  i';
            req                      := req ||' on ( T.numpac=i.numpac and T.'||w_colonne_30||'=i.'||w_cle;
            req                      := req ||') ';
            IF w_type_retour          ='RN' THEN
              req                    := req ||' when MATCHED THEN ';
              req                    := req ||' UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N'' ';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
              --
            END IF;
            IF w_type_retour          ='RC' THEN
              req                    := req ||' when MATCHED THEN UPDATE  set '||clupdateMerge;
              req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer=''N''';
              END IF;
              req                      := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,'||w_cle||',';
              IF w_cle                  ='PAIEZAD' THEN
                req                    := req || clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD, ';
              ELSE
                req                    := req ||clinsertDonMerge;
                IF objtable.ALLERRETOUR ='2' THEN
                  req                  := req ||',type_writer';
                END IF;
                req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.'||w_colonne_30||',';
              END IF;
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            
            --TABLE H2
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE = 'H2' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  H2 ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||' (select  TGE.*,';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||' numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  WHERE  ID_TRT= ' ;
            req                    := req ||':id AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) and numpac='''||w_numpac||'''  ';
            req                    := req || reqChrono;
            req                    := req ||') pivot ( max(valeur) for donneegxp in (';
            req                    := req || clssreqPivotMerge;
            req                    := req ||')) )tge  ) i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req                    := req ||')';
            req                    := req ||' when MATCHED THEN ';
            req                    := req ||' UPDATE  set '||clupdateMerge;
            req                  := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer=''N''';
            END IF;
            -- Si il y a une colonne dtFin, on met à jour la date
            SELECT COUNT(*)
            INTO hasDtfin
            FROM user_tab_columns
            WHERE table_name =w_table
            AND column_name  ='DTFIN';
            IF hasDtfin      >0 THEN
              -- table H2  forcer le DTFIN au dernier jour du mois
              reqUdpateDate   :=' update  '||w_table || ' a  set DTFIN= last_day('||w_date_eff||') ' ;
              reqUdpateDate   :=reqUdpateDate|| ' where  exists(select * FROM TGE_IMPORT_FSED_30 TGE  WHERE  ID_TRT= ' ;
              reqUdpateDate   := reqUdpateDate ||':id  AND tablegxp='''||w_table ||''' ';
              reqUdpateDate   := reqUdpateDate ||' AND ( numligne >=:ligne0 AND numligne <= :ligne99) ';
              IF w_colonne_30  = 'PACMAT' THEN
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'   ';
              ELSE
                reqUdpateDate := reqUdpateDate ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'   ';
              END IF;
              reqUdpateDate := reqUdpateDate ||') ';
            END IF;
            --TABLE AVPERS
          ELSIF objtable.TABLETYPE = 'AVPERS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  AVPERS ');
            --calcul de la date fin
            IF w_table ='DIC_ADM_CONTRAT' THEN
              coldtfin:='DSFCN';
            ELSE
              coldtfin:='DATE_FIN';
            END IF;
            SELECT column_name BULK COLLECT
            INTO tab_colonne
            FROM user_tab_columns
            WHERE table_name = w_table
            AND column_name NOT LIKE '%IDPACMAT%'
            ORDER BY column_id;
            -- eliminer les doublons du merge des AVPERS
            IF w_table='DIC_ADM_CONTRAT_HISTO' THEN
              FOR K IN cur_element_histo(w_numpac)
              LOOP
                clinsertcols   :='';
                clinsertsel    :='';
                clinsertvalues :='';
                FOR indx IN tab_colonne.first .. tab_colonne.last
                LOOP
                  IF tab_colonne(indx) =w_date_eff THEN
                    IF clinsertsel    IS NULL THEN
                      clinsertsel     :='TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols    :=tab_colonne(indx);
                      clinsertvalues  :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') as '||w_date_eff;
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  elsif objtable.ALLERRETOUR ='2' AND tab_colonne(indx)='TYPE_WRITER' THEN
                    IF clinsertsel          IS NULL THEN
                      clinsertsel           :='''N'' as type_writer';
                      clinsertcols          :=tab_colonne(indx);
                      clinsertvalues        :='''N''';
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||',''N''';
                    END IF;
                  ELSE
                    IF clinsertsel   IS NULL THEN
                      clinsertsel    :='a.'||tab_colonne(indx);
                      clinsertcols   :=tab_colonne(indx);
                      clinsertvalues :='I.'||tab_colonne(indx);
                    ELSE
                      clinsertsel    :=clinsertsel||',a.'||tab_colonne(indx);
                      clinsertcols   :=clinsertcols||','||tab_colonne(indx);
                      clinsertvalues :=clinsertvalues||','||'I.'||tab_colonne(indx);
                    END IF;
                  END IF;
                END LOOP;
                -- construction de la requête de propagation
                --si la colonne des AVPERS est une date
                IF NVL(k.typeelt,'XyZ') ='DATE' THEN
                  donneesUpdatePropag  := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= decode (instr(tge.' || K.DONNEEGXP || ',''-''),0,TO_DATE(tge.' || K.DONNEEGXP || ',''YYYYMMDD''),TO_DATE(tge.' || K.DONNEEGXP || ',''yy-mm-dd'')) ,';
                ELSE
                  donneesUpdatePropag := donneesUpdatePropag || 'a.' || K.DONNEEGXP || '= tge.' || K.DONNEEGXP || ' ,';
                END IF;

                donneesSelectPropag := donneesSelectPropag || K.DONNEEGXP || ' ,';
                clssreqPivotMerge   := clssreqPivotMerge || '''' || K.DONNEEGXP || ''' AS '|| K.DONNEEGXP || ' ,';
              END LOOP;
            END IF ;
            IF w_table       ='DIC_ADM_CONTRAT_HISTO' THEN
              req           := 'INSERT INTO '||w_table ||'('||clinsertcols||') ';
              req           := req || ' WITH Cont AS(SELECT /*+ MATERIALIZE */ MAX(DATE_EFF) AS mydate,numpac as numpac ,pacmat as pacmat FROM    DIC_ADM_CONTRAT_HISTO WHERE '||w_date_eff||' <TO_DATE('||w_moi_retour||'01,''YYYYMMDD'')  GROUP BY numpac,pacmat)';
              req           := req || ' SELECT '||clinsertsel||' FROM '||w_table ||'  a , cont WHERE EXISTS(SELECT 1 FROM TGE_IMPORT_FSED_30 TGE WHERE ';
              req           := req || ' ID_TRT = ' ;
              req           := req ||':id AND ( numligne >=:ligne00 AND numligne <= :ligne99) ';
              IF w_colonne_30= 'PACMAT' THEN
                req         := req ||' and TGE.numpac=a.numpac and nvl(TGE.PACMAT,TGE.PAIEZAD) =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')      ';
              ELSE
                req := req ||' and TGE.numpac=a.numpac and TGE.PAIEZAD =a.'||w_colonne_30||'  AND TGE.tablegxp    = ''DIC_ADM_CONTRAT_HISTO'')       ';
              END IF;
              req := req ||' AND A.DATE_EFF =Cont.mydate AND A.NUMPAC =Cont.NUMPAC AND A.PACMAT =Cont.PACMAT';
              --Ajout du contrôle sur la date de fin de contrat pour ne pas générer de nouvelles dates d'effets si celle ci est supérieur à la date de fin .
              req := req ||' AND TO_DATE('''||w_moi_retour||'01'',''YYYYMMDD'') < ( select NVL(DSFCN,to_date(''20991231'',''YYYYMMDD'')) from DIC_ADM_CONTRAT where NUMPAC=a.numpac and  PACMAT=a.PACMAT and  NUMCNT=a.NUMCNT )';
              req := req ||' and not exists (select 1 from  '||w_table || ' d where d.numpac=a.numpac and d.'||w_colonne_30||' =a.'||w_colonne_30||' and d.'||w_date_eff||'=TO_DATE('||w_moi_retour||'01,''YYYYMMDD'') ) ';
              req := req ||' and exists (select 1 from  TGE_FSED_30_TEMPORARY where id_trt ='||p_id||' AND numpac = a.numpac and '||w_colonne_30||' =a.'||w_colonne_30||' and TOUPDATE=''O'' ) ';
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Insert DACH='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF donneesUpdatePropag IS NOT NULL THEN
                donneesUpdatePropag  := SUBSTR(donneesUpdatePropag, 0, LENGTH(donneesUpdatePropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF donneesSelectPropag IS NOT NULL THEN
                donneesSelectPropag  := SUBSTR(donneesSelectPropag, 0, LENGTH(donneesSelectPropag) - 1); -- enlever la virgule de trop à la fin
              END IF;
              IF clssreqPivotMerge IS NOT NULL THEN
                clssreqPivotMerge  := SUBSTR(clssreqPivotMerge, 0, LENGTH(clssreqPivotMerge) - 1); -- enlever la virgule de trop à la fin
              END IF;
            END IF;
            IF w_table        ='DIC_ADM_CONTRAT_HISTO' THEN
              reqPropag      := 'merge  into ' || w_table || ' a using (SELECT  * from (SELECT * FROM (SELECT id_trt, numpac, paiezad, pacmat, donneegxp, valeur';
              reqPropag      := reqPropag || ' FROM TGE_IMPORT_FSED_30 TGE WHERE ID_TRT =';
              reqPropag      := reqPropag || ' :id AND tablegxp = ''' || w_table ||'''';
              reqPropag      := reqPropag || ' AND (numligne >= :ligne0 AND numligne <= :ligne99)  AND (numpac,pacmat,paiezad) in (select numpac, pacmat, paiezad from TGE_FSED_30_TEMPORARY where id_trt='''||p_id||''' and toupdate=''O'')';
              reqPropag      := reqPropag || reqChrono;
              reqPropag      := reqPropag || ') PIVOT(MAX(valeur) FOR DONNEEGXP IN (' || clssreqPivotMerge || ')) ) ) tge  on (';
              reqPropag      := reqPropag || '  TGE.numpac = a.numpac';
              IF w_colonne_30 = 'PACMAT' THEN
                reqPropag    := reqPropag || ' AND NVL(TGE.PACMAT, TGE.PAIEZAD) = a.' || w_colonne_30;
              ELSE
                reqPropag := reqPropag || ' AND TGE.PAIEZAD = a.' || w_colonne_30 ;
              END IF;
              reqPropag              := reqPropag || ' and ' || w_date_eff || ' >= TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD'') and  ' || w_date_eff || '< ADD_MONTHS(TO_DATE(''' || w_moi_retour || '01'',''YYYYMMDD''), 1) ) when matched then update set ';
              IF objtable.ALLERRETOUR = '2' THEN
                reqPropag            := reqPropag || ' a.type_writer = ''N'', ';
              END IF;
              reqPropag := reqPropag ||''|| donneesUpdatePropag ;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Merge DACH='||substr(reqPropag,0,3800) );
              -- lancer la requete de propagation avec pivot
              EXECUTE IMMEDIATE reqPropag USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);

            END IF;
            IF w_table                ='DIC_ADM_CONTRAT' AND clssreqPivotMerge IS NOT NULL THEN
              req                    := 'MERGE INTO '||w_table ||' T USING ';
              req                    := req ||'(select TGE.*';
              req                    := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
              req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif,valeur from tge_import_FSED_30  where ID_TRT= ' ;
              req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
              req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
              req                    := req || reqChrono;
              req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
              req                    := req ||')) )tge)  i';
              req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad and (';
              req                    := req||'(T.DSDCN<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and T.DSFCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR(T.DSDCN between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(T.DSFCN,to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
              req                    := req||' OR (T.DSDCN <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
              req                    := req||') ';
              req                    := req ||') ';
              req                    := req ||' when MATCHED THEN UPDATE  set ' ;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||'type_writer=''N'', ';
              END IF;
              req := req ||clupdateMerge;
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 DAC='||substr(req,0,3800) );
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              --Mise à jour de la donnée dans secupacmat
              FOR C IN cur_secupacmat(w_numpac)
              LOOP
                req                :='';
                w_type_colonne     := SUBSTR(c.typeelt,0,1);
                IF clssreqPivotSec IS NOT NULL THEN
                  clssreqPivotSec  :=clssreqPivotSec||',';
                END IF;
                clssreqPivotSec:=clssreqPivotSec||' '''||C.DONNEEGXP||'''  as '||C.DONNEEGXP ;
                IF clupdSecu   IS NOT NULL THEN
                  clupdSecu    :=clupdSecu||',';
                END IF;
                clupdSecu          :=clupdSecu||'T.'||C.DONNEEGXP||'='||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
                IF clinsertDonSecu IS NOT NULL THEN
                  clinsertDonSecu  :=clinsertDonSecu||',';
                END IF;
                clinsertDonSecu    :=clinsertDonSecu||C.DONNEEGXP ;
                IF clinsertValSecu IS NOT NULL THEN
                  clinsertValSecu  :=clinsertValSecu||',';
                END IF;
                clinsertValSecu:=clinsertValSecu||GET_Statement (w_type_colonne,C.typeDICOZ ,C.DONNEEGXP) ;
              END LOOP;
              IF clssreqPivotSec IS NOT NULL THEN
                req              := 'MERGE INTO SECUPACMAT T USING ';
                req              := req ||'(select TGE.*';
                req              := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
                req              := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
                req              := req ||':id  AND tablegxp='''||w_table ||''' ';
                req              := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
                req              := req || reqChrono;
                req              := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotSec;
                req              := req ||')) )tge)  i';
                req              := req ||' on ( T.numpac=i.numpac and T.pacmat =i.pacmat and (';
                req              := req||'(to_date(T.DSDCN,''YYYYMMDD'')<= TO_DATE('''||w_moi_retour||''', ''YYYYMM'')  and T.DSFCN is not null and TO_DATE(T.DSFCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR(to_date(T.DSDCN,''YYYYMMDD'') between TO_DATE('''||w_moi_retour||''', ''YYYYMM'') and last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND NVL(TO_DATE(T.DSFCN,''YYYYMMDD''),to_date(''20991231'',''YYYYMMDD''))>= last_day(to_date('''||w_moi_retour||''',''YYYYMM'')))';
                req              := req||' OR (to_date(T.DSDCN,''YYYYMMDD'') <=last_day(to_date('''||w_moi_retour||''',''YYYYMM''))AND  T.DSFCN IS  NULL)';
                req              := req||') ';
                req              := req ||') ';
                req              := req ||' when MATCHED THEN UPDATE  set ' ;
                req              := req ||clupdSecu;
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 SECUPACMAT='|| substr(req,0,3600));
                EXECUTE IMMEDIATE req USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            END IF;
            -- lancer la requete trace
            reqTrace := REPLACE('INSERT INTO SYS_TRC_MODIF 
SELECT DISTINCT ''RETOUR_PAIE'', 
CURRENT_TIMESTAMP, 
3, 
''Retour de paie type AVPERS'', 
''numpac='' || tge.numpac || ''&' || w_colonne_30 || '='' || nvl(tge.' || w_colonne_30 || ',tge.paiezad) || ''&PERIODEPAIE='' || TO_DATE(''' || w_moi_retour || '01'', ''YYYYMMDD'') || ''&ELEMENT='' || tge.code_element || ''&VALEUR='' || tge.valeur, 
''Retour de paie'', 
''M'', 
null, 
null, 
null, 
null 
FROM TGE_IMPORT_FSED_30 TGE 
WHERE ID_TRT = :id AND tablegxp='''||w_table ||'''  AND ( numligne >=:ligne0 AND numligne <= :ligne99) and TGE.numpac=a.numpac', 'a.', 'TGE.' );
            FSED_AVANCEMENT(p_id,' SYS_TRC_MODIF= '|| substr(reqTrace,0,3600));
            EXECUTE IMMEDIATE reqTrace USING p_id,
            tab_numLigne00(i),
            tab_numLigne99(i);
            -- Table M7
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M7' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M7 ');
           req                    := 'MERGE INTO ' || w_table ||' t USING ' ||
              '(SELECT * FROM ' || 
              '(SELECT ID_TRT, ' || 
              'NUMPAC, ' || 
              'PAIEZAD, ' || 
              'PACMAT, ' || 
              'MATRICULE, ' || 
              'DONNEEGXP, ' || 
              'VALEUR, ' || 
              'TO_DATE(SUBSTR(INDICATIF, 1, 6) || ''01'', ''YYYYMMDD'') AS ' || w_date_eff || ', ' || 
              'NUMPAC || NVL(PACMAT, PAIEZAD) AS IDPACMAT ' || 
              'FROM TGE_IMPORT_FSED_30 ' || 
              'WHERE ID_TRT = :id  AND TABLEGXP = ''' || w_table ||''' AND (NUMLIGNE >= :ligne0 AND NUMLIGNE <= :ligne99) AND NUMPAC = ''' || w_numpac || '''' || 
              ') PIVOT(MAX(VALEUR) FOR DONNEEGXP IN (' || clssreqPivotMerge || '))' || 
              ') i ' || 
              'ON (t.NUMPAC = i.NUMPAC AND t.PAIEZAD = i.PAIEZAD AND t.' || w_date_eff || ' = i.' || w_date_eff || ') ' || 
              'WHEN MATCHED THEN ';
            req                    := req || 'UPDATE SET ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ';
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||' )';
            ---TABLE M1
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M1' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M1 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF ;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req ||clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF ;
            ---TABLE M9
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M9' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M9 ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*';
            req                    := req ||', TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||', numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp  ,valeur from tge_import_FSED_30 where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_date_eff||'=i.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND ( w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC IS NULL) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3ANNEE
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3ANNEE' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3ANNEE ');
            IF w_type_retour ='RC' THEN
              reqRc         := 'select min ('||w_date_eff||') from '||w_table ||' WHERE numpac =:numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :id )';
              EXECUTE immediate reqRC INTO w_date_RC USING w_numpac,
              p_id;
            END IF;
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*, ';
            req                    := req ||'TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff||', ';
            req                    := req ||'NVL(substr(indicatif,1,3),0) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||')as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp, indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||') pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge)  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req                      := req ||clupdateMerge;
            req                      := req ||',DATE_DERNIERE_MODIF=sysdate ';
            IF w_type_retour          ='RN' OR (w_type_retour ='RC' AND (w_date_RC < TO_DATE(w_moi_retour||'01','YYYYMMDD'))OR w_date_RC is null ) THEN
              req                    := req ||' when NOT MATCHED THEN ' ;
              req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',type_writer';
              END IF;
              req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
              req                    := req || clinsertValMerge;
              IF objtable.ALLERRETOUR ='2' THEN
                req                  := req ||',''N''';
              END IF;
              req := req ||')';
            END IF;
            ---Table M3MOIS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE ='M3MOIS' THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  M3MOIS ');
            req                    := 'MERGE INTO '||w_table ||' T USING ';
            req                    := req ||'(select tge.*,';
            req                    := req ||'TO_DATE(replace ('||w_moi_retour||',SUBSTR('||w_moi_retour||',5,2),substr(indicatif,1,2))'||'||''01'''||',''YYYYMMDD'')';
            req                    := req ||'as '||w_date_eff;
            req                    := req ||',substr(indicatif,4,3) as '||w_code_caisse||',';
            req                    := req ||'numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            req                    := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            req                    := req ||':id  AND tablegxp='''||w_table ||''' ';
            req                    := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||''' ';
            req                    := req || reqChrono;
            req                    := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req                    := req ||')) )tge )  i';
            req                    := req ||' on ( T.numpac=i.numpac and T.paiezad =i.paiezad AND T.'||w_code_caisse||'=i.'||w_code_caisse||' AND i.'||w_date_eff||'= T.'||w_date_eff||') ';
            req                    := req ||' when MATCHED THEN ' ;
            req                    := req ||' UPDATE  set ';
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'',';
            END IF;
            req                    := req ||clupdateMerge;
            req                    := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req                    := req ||' when NOT MATCHED THEN ' ;
            req                    := req ||' INSERT (numpac,pacmat,MATRIC,DATE_CREATION,paiezad,'||w_date_eff||','||w_code_caisse||','||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req                    := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,i.PAIEZAD,i.'||w_DATE_EFF||',i.'||w_code_caisse||', ';
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
            ---Tables MULTIPLE et OCCURS
          ELSIF clssreqPivotMerge IS NOT NULL AND objtable.TABLETYPE IN ('MULTIPLE','OCCURS') THEN
            FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Début  '||objtable.TABLETYPE);
            req              := 'MERGE INTO '||w_table ||' T USING ';
            req              := req ||'(select TGE.*';
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||',substr(indicatif,1,3) as '||w_code_caisse;
            END IF ;
            req := req ||',numpac||nvl(tge.pacmat,'||w_colonne_30||') as idPACMAT';
            IF p_table IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN 
            req := req ||' FROM (select * from (select id_trt,numpac,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            ELSE
            req := req ||' FROM (select * from (select id_trt,numpac, paiezad,pacmat,MATRICULE, donneegxp,indicatif  ,valeur from tge_import_FSED_30  where ID_TRT= ' ;
            END IF;
            req := req ||':id  AND tablegxp='''||w_table ||''' ';
            req := req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99) AND numpac='''||w_numpac||'''  ';
            req := req || reqChrono;
            req := req ||' ) pivot(max(valeur) for donneegxp in ('||clssreqPivotMerge;
            req := req ||')) )tge)  i';
            req := req ||' on ( T.numpac=i.numpac ';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' and T.paiezad =i.paiezad ';
            ELSE
              req := req ||' and T.pacmat =i.pacmat ';
            END IF;
            req             := req ||'  and i.'||w_code_caisse||'=t.'||w_code_caisse;
            IF w_type_retour ='RC' THEN
              req           := req ||' AND T.PACMAT NOT IN (SELECT PACMAT FROM GAP_TRT_LISTE_MAT_HISTO G WHERE G.NUMPAC=T.NUMPAC AND G.PERIODE_PAIE = '''||w_moi_retour||''' AND SUBSTR(TO_CHAR(G.DATE_RESP,''YYYYMMDD''),5,2)<= '||SUBSTR(w_moi_retour,5,2)||')';
            END IF;
            req                    := req ||') ';
            req                    := req ||' when MATCHED THEN UPDATE  set ' ;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||'type_writer=''N'', ';
            END IF;
            req := req ||clupdateMerge;
            req := req ||',DATE_DERNIERE_MODIF=sysdate ';
            req := req ||' when NOT MATCHED THEN INSERT (numpac,pacmat,MATRIC,DATE_CREATION,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||' PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||w_code_caisse||',';
            END IF ;
            req                    := req ||clinsertDonMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',type_writer';
            END IF;
            req := req ||') VALUES (i.numpac,i.pacmat,i.MATRICULE,sysdate,';
            IF w_table NOT IN ('DIC_TGE_PRETS','DIC_TGE_OPPOSITIONS') THEN
              req := req ||'  i.PAIEZAD,';
            END IF;
            IF w_code_caisse IS NOT NULL THEN
              req            := req ||'i.'||w_code_caisse||',';
            END IF ;
            req                    := req || clinsertValMerge;
            IF objtable.ALLERRETOUR ='2' THEN
              req                  := req ||',''N''';
            END IF;
            req := req ||')';
          END IF;
          IF req IS NOT NULL THEN
            w_00 :=tab_numLigne00(i);
            w_99 :=tab_numLigne99(i);
            IF objtable.TABLETYPE IN('H2','M7') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
              IF reqUdpateDate IS NOT NULL THEN
                FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(reqUdpateDate,0,3600));
                EXECUTE IMMEDIATE reqUdpateDate USING p_id,
                tab_numLigne00(i),
                tab_numLigne99(i);
              END IF;
            elsiF objtable.TABLETYPE IN('M1','M3ANNEE') THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i);
            ELSiF objtable.TABLETYPE <> 'AVPERS' THEN
              FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 p_id='||p_id||';Ligne00='||tab_numLigne00(i)||';Ligne99='||tab_numLigne99(i)||'='|| substr(req,0,3600));
              EXECUTE IMMEDIATE req USING p_id,
              tab_numLigne00(i),
              tab_numLigne99(i) ;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF objtable.TABLETYPE ='AVPERS' AND w_table ='DIC_ADM_CONTRAT_HISTO' THEN
      -- insertion dans SECUPACMAT_TMP_CONTRAT
      INSERT
      INTO SECUPACMAT_TMP_CONTRAT
        (
          numpac,
          pacmat
        )
      SELECT DISTINCT numpac,
        NVL(pacmat,paiezad)
      FROM TGE_IMPORT_FSED_30
      WHERE ID_TRT=p_id
      AND numligne BETWEEN tab_numLigne00(i) AND tab_numLigne99(i)
      AND tablegxp=w_table ;
      -- lancement de la procédure ALIM_IDX_CH_RETOUR_PAIE
      ALIM_IDX_CH_RETOUR_PAIE();
      --suppression des matricules de la table SECUPACMAT_TMP_CONTRAT
       EXECUTE_IMMEDIATE_STRING ( 'truncate table SECUPACMAT_TMP_CONTRAT',0);
    END IF;
  END LOOP;
  FOR trig IN
  (SELECT object_name
  FROM user_objects
  WHERE lower(object_type)='trigger'
  AND lower(object_name) LIKE '%'
    ||lower(w_table)
    ||'%'
  AND (lower(object_name) LIKE 'horo%' )
  )
  LOOP
     EXECUTE_IMMEDIATE_STRING  ('ALTER TRIGGER ' || trig.object_name ||' enable ',0);
  END LOOP;
  --Mise à jour des indicateurs de production pour la période traité dans le retour de paie te pour chaque salarié traité.
  req             := 'update GAP_TRT_LISTE_MAT_HISTO ';
  IF w_type_retour ='RN' THEN
    w_date_indic  := to_date(sysdate);
    req           := req ||'set DATE_RESP = :date_effet ';
  END IF;
  IF w_type_retour ='RC' THEN
    SELECT MAX(date_COMP)
    INTO w_date_comp
    FROM GAP_TRT_LISTE_MAT_HISTO
    WHERE numpac     = w_numpac
    AND periode_paie = w_moi_retour
    AND pacmat      IN
      (SELECT DISTINCT pacmat
      --DIT 50818 
      FROM DIC_ADM_CONTRAT_SITU
      WHERE numpac = w_numpac
      AND paiezad IN
        (SELECT DISTINCT paiezad FROM TGE_IMPORT_FSED_30 WHERE id_trt = p_id
        )
      );
    IF w_date_comp  <to_date(sysdate) THEN
      w_date_indic := w_date_comp;
    ELSE
      w_date_indic := to_date(sysdate);
    END IF;
    req:= req ||'set DATE_COMP = :date_effet ';
  END IF ;
  req:= req || ' where NUMPAC = :numpac  and   PERIODE_PAIE = :periode ';
  req:= req || ' and pacmat in (select distinct pacmat from DIC_ADM_CONTRAT_SITU where numpac = : numpac and paiezad in (select distinct paiezad from TGE_IMPORT_FSED_30 where id_trt = :trt) )';
  EXECUTE IMMEDIATE req USING w_date_indic,
  w_numpac,
  w_moi_retour,
  w_numpac,
  p_id;
  --RSI : En cas de RC, il faut regarder si elle est plus vieille que le mois du retour complémentaire.
  IF w_type_retour ='RC' THEN
  --DEBUT M3ANNEE
    IF objtable.TABLETYPE ='M3ANNEE' THEN
      IF tabW580_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabW580_h.first..tabW580_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabW580_h(i).donnee_W580_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabW580_h(i).donnee_W580_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  -- Fin M3ANNEE
  --DEBUT M1
  IF objtable.TABLETYPE = 'M1' THEN
      IF tabWL52_h.exists(1) THEN
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC '||objtable.TABLETYPE );
        FOR i IN tabWL52_h.first..tabWL52_h.last
        LOOP
          IF SUBSTR(w_moi_retour,5,2)>=tabWL52_h(i).donnee_WL52_h THEN
            req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
            req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req                      := req ||' AND TO_DATE(';
            req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||';
            req                      := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          ELSE
            req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad) ';
            req := req ||' AND '||w_date_eff||' between TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')';
            req := req ||' AND TO_DATE(';
            req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
            req := req ||' NVL('''||tabWL52_h(i).donnee_WL52_h||''','''||objtable.MOISZERO||''')'||'||''01'''||',''YYYYMMDD'')+364';
            req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
          END IF;
          FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
          EXECUTE IMMEDIATE req USING p_id;
        END LOOP;
      ELSE
        IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
          req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req                      := req ||' AND '||w_date_eff||' between TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req                      := req ||' AND TO_DATE(';
          req                      := req ||' SUBSTR('||w_moi_retour||',1,4)||''';
          req                      := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')+364';
          req                      := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        ELSE
          req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) ';
          req := req ||' AND '||w_date_eff||' between TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||''';
          req := req ||objtable.MOISZERO||'''||''01'''||',''YYYYMMDD'')';
          req := req ||' AND TO_DATE(';
          req := req ||' (SUBSTR('||w_moi_retour||',1,4)-1)||';
          req := req ||objtable.MOISZERO||'||''01'''||',''YYYYMMDD'')+364';
          req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
        END IF ;
        FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
        EXECUTE IMMEDIATE req USING p_id;
        req:='';
      END IF;
    END IF;
  --FIN M1
  
    IF objtable.TABLETYPE ='M9' THEN
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC M9');
      IF SUBSTR(w_moi_retour,5,2)>=objtable.MOISZERO THEN
        req                      := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE(SUBSTR('||w_moi_retour||',1,4)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364) ';
      ELSE
        req := ' delete from  '||w_table ||' T where numpac ='''||w_numpac||''' AND  EXISTS (select 1 from TGE_IMPORT_FSED_30 where id_trt = :id and TGE_IMPORT_FSED_30.paiezad=T.paiezad ) AND '||w_date_eff||' between TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'') and (TO_DATE((SUBSTR('||w_moi_retour||',1,4)-1)||'''||objtable.MOISZERO||'''||''01'',''YYYYMMDD'')+364)';
      END IF;
      req := req ||' AND '||w_date_eff||' < TO_DATE('||w_moi_retour||'||''01'''||',''YYYYMMDD'')';
      FSED_AVANCEMENT(p_id,'FSED.sous_insertCart30 Delete RC req='||substr(req,0,3700));
      EXECUTE IMMEDIATE req USING p_id;
      req:='';
    END IF;
  END IF;
  v_stop := DBMS_UTILITY.GET_TIME;
  tab_numLigne00.delete;
  tab_numLigne99.delete;
  IF p_table ='DIC_ADM_CONTRAT_HISTO' THEN
    COMMIT;
    FSED_AVANCEMENT(p_id,'MAJ_DATE_FIN_CONTRAT_HISTO ');
    MAJ_DATE_FIN_CONTRAT_HISTO();
    COMMIT;
    FSED_AVANCEMENT(p_id,'R_DATE_FIN_BO_CONTRAT_HISTO');
    R_DATE_FIN_BO_CONTRAT_HISTO();
    FSED_AVANCEMENT(p_id,'R_DATE_SORTIE_SIT_BO_CNT_HISTO');
    R_DATE_SORTIE_SIT_BO_CNT_HISTO();
    FSED_AVANCEMENT(p_id,'Fin R_DATE_SORTIE_SIT_BO_CNT_HISTO');
  END IF;
  COMMIT;
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
EXCEPTION
WHEN OTHERS THEN
  --gestion du trigger des DACH : suppression de la table temporaire BYPASS_TRG_DACH_ON_SESSION
  DELETE FROM BYPASS_TRG_DACH_ON_SESSION;
   EXECUTE_IMMEDIATE_STRING ('truncate table TGE_FSED_30_TEMPORARY',0);
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR(p_id , 'insertCart30 '||p_table||' ' || w_elem, p_id || ',' || p_newId || ',' || p_table, err_code || '-' || err_msg||' requete :'||req );
  raise_application_error(-20000, 'FSED insertCart30  '|| sqlerrm||' w_00 :'||w_00||'w_99 :'||w_99||'elem :'||w_elem||'occur'||w_occ);
END sous_insertCart30;
/********************************************************************
PROC : insertCart30(p_id    IN NUMBER,
p_newId IN NUMBER,
p_table IN VARCHAR2 )
DESC : Procedure de lancement de retour de paie pour les cartes 30
*********************************************************************/
PROCEDURE insertCart30(
    p_id    IN NUMBER ,
    p_newId IN NUMBER ,
    p_table IN VARCHAR2) parallel_enable
IS
  jobno NUMBER;
BEGIN
  dbms_job.submit(jobno, 'sous_insertCart30('||p_id||','||p_newid||','||p_table||');',sysdate, NULL);
END insertCart30;
/*****************************************************************************
PROC : getPeriodeReceuil(p_numpac  in     TGE_REF_PAC.numpac%type,
p_paiezad in     TGE_IMPORT_FSED_30.paiezad%type,
p_dateDeb in out DATE,
p_dateFin in out DATE)
DESC : retourne la date debut et fin de la periode de recueil
TEST : getPeriodeReceuil('TLSE01','0001492')-->(2010-01-01,2014-02-02)
*******************************************************************************/
PROCEDURE getPeriodeRecueil(
    p_numpac  IN TGE_REF_PAC.numpac%type,
    p_paiezad IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb IN OUT DATE,
    p_dateFin IN OUT DATE)
IS
  w_dsdcn DIC_ADM_CONTRAT.dsdcn%TYPE;
  w_dsfcn DIC_ADM_CONTRAT.dsfcn%TYPE;
  w_dr DATE;
  w_fr DATE;
  w_periodeEnCours tge_ref_pac.periodeencours%TYPE;
  w_doneegxpFin TGE_REF_MAPDO.donneegxp%type;
  w_doneegxpDeb TGE_REF_MAPDO.donneegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
BEGIN
  SELECT pacmat
  INTO w_pacmat
  FROM DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE numpac =p_numpac
  AND paiezad  = p_paiezad
  AND rownum   =1 ;
  BEGIN
    SELECT POP.DSDCN,
      POP.DSFCN,
      CASE
        WHEN R.DATE_DEBUT_1 IS NOT NULL
        THEN R.DATE_DEBUT_1
        ELSE L.DEBUT_PERIODE
      END AS DT_RECUEIL_DEB,
      CASE
        WHEN R.DATE_FIN_1 IS NOT NULL
        THEN R.DATE_FIN_1
        ELSE L.FIN_PERIODE
      END AS DT_RECUEIL_FIN,
      POP.PERIODEENCOURS
    INTO w_dsdcn,
      w_dsfcn,
      p_dateDeb,
      p_dateFin,
      w_periodeEnCours
    FROM
      (SELECT C.NUMPAC,
        S.paiezad,--DIT 50818 
        c.pacmat,
        P.PERIODEENCOURS,
        C.DSDCN AS DSDCN,
        C.DSFCN AS DSFCN
      FROM DIC_ADM_CONTRAT C,
        DIC_ADM_CONTRAT_SITU S,--DIT 50818 
        TGE_REF_PAC P
      WHERE C.NUMPAC = P.NUMPAC
      AND C.NUMPAC   = S.NUMPAC
      AND C.PACMAT   = S.PACMAT
      AND C.NUMCNT   = S.NUMCNT
      AND C.NUMPAC   = p_numpac
      AND S.PAIEZAD  = p_paiezad--DIT 50818 
      ) POP ,
      SECUPACMAT S ,
      DIC_TGE_PERIODES_RECUEIL R ,
      TGE_REF_LTP L
    WHERE POP.NUMPAC       = S.NUMPAC
    AND POP.PACMAT         = S.PACMAT
    AND POP.NUMPAC         = L.NUMPAC
    AND POP.PERIODEENCOURS = L.MOIS_PAIE
    AND POP.PAIEZAD        = R.PAIEZAD(+)
    AND POP.NUMPAC         = R.NUMPAC(+)
    AND rownum             = 1 ;
  EXCEPTION
  WHEN OTHERS THEN
    err_msg := SQLERRM;
  END;
  SELECT m.donneegxp
  INTO w_doneegxpDeb
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A275' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) = 0
  AND M.NUMPAC  ='*' ) );
  SELECT m.donneegxp
  INTO w_doneegxpFin
  FROM TGE_REF_MAPDO M
  WHERE ( ELEMENT = 'A309' )
  AND ( ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC=p_numpac
    AND ELEMENT = M.ELEMENT) > 0
  AND M.NUMPAC  = 'TLSE01' )
  OR ( (SELECT COUNT(*)
    FROM TGE_REF_MAPDO
    WHERE NUMPAC    =p_numpac
    AND ELEMENT     = M.ELEMENT) = 0
  AND M.NUMPAC      ='*' ) );
  IF w_doneegxpDeb IS NOT NULL AND w_doneegxpFin IS NOT NULL THEN
    w_req          := 'select distinct '||w_doneegxpDeb||','||w_doneegxpFin ||' from DIC_ADM_CONTRAT_HISTO where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff ';
    EXECUTE immediate w_req INTO w_dr,
    w_fr USING p_numpac,
    w_pacmat,
    last_day(to_date(w_periodeencours,'YYYYMM'));
  END IF;
  IF p_dateDeb >w_dr AND w_dr <p_dateFin THEN
    p_dateDeb := w_dr ;
  END IF ;
  IF w_fr      > to_date(w_periodeencours,'YYYYMM') AND w_fr < last_day(to_date(w_periodeencours,'YYYYMM')) THEN
    p_dateFin := w_fr;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
END getPeriodeRecueil;
/*************************************************************************************************************************************
PROC :  maj_CAD30   (p_id IN NUMBER)
DESC :  Procedure de mise à jour des compteurs aprés retour de paie
TEST :  cad_compteur          : code_compteur in ('CPO','CRTT') and matricule in ('0001494','0001492','0001498','0001576','0001510')
TGE_REF_MAPDO         : TRTPARTICULIER like 'CAD=%' and ELEMENT IN ('I001','I002','I005','J003','T301','T303')
DIC_ADM_CONTRAT       : matric in ('0001494','0001492','0001498','0001576','0001510') and NUMPAC ='TLSE01'
DIC_ADM_CONTRAT_HISTO : pacmat in ('00001492','00001494','00001498','00001510','00001576') and numpac ='TLSE01'
TGE_IMPORT_FSED_30    : code_element in ('I001','I002','I005','T301','T303','J003') and id_trt =2576
CAD.CAD_unite_cpt('0001510','20130101','CPO') -->'U'
CAD.CAD_unite_cpt('0001498','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001576','20130101','CPO') -->NULL
CAD.CAD_unite_cpt('0001498','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001492','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001494','20130101','CRTT')-->'U'
CAD.CAD_unite_cpt('0001510','20130101','CRTT')-->'U'
***************************************************************************************************************************************/
PROCEDURE maj_CAD30(
    p_id IN NUMBER)
IS
  CURSOR cur_element ( pnumpac IN VARCHAR2)
  IS
    SELECT DISTINCT DO.ELEMENT,
      do.TRTPARTICULIER ,
      imp.paiezad,
      imp.pacmat
    FROM
      (SELECT *
      FROM TGE_REF_MAPDO
      WHERE numpac= pnumpac
      AND TRTPARTICULIER LIKE 'CAD=%'
    UNION ALL
    SELECT *
    FROM TGE_REF_MAPDO
    WHERE numpac     ='*'
    AND ELEMENT NOT IN
      (SELECT ELEMENT FROM TGE_REF_MAPDO WHERE numpac=pnumpac
      )
    AND TRTPARTICULIER LIKE 'CAD=%'
      ) DO ,
      tge_import_fsed_30 imp
    WHERE id_trt        = p_id
    AND imp.code_element= do.element
    ORDER BY DO.ELEMENT;
    w_cad CAD_COMPTEUR.CODE_COMPTEUR%TYPE;
    w_pot CAD_COMPTEUR.POT1_FJ%TYPE;
    w_cad_temp  VARCHAR2(11);
    w_pot_temp  VARCHAR2(11);
    w_type_date VARCHAR2(11);
    w_req_maj CLOB;
    w_req CLOB;
    w_seq      NUMBER;
    w_unit     VARCHAR2(1);
    w_cadCount NUMBER := 1;
    w_numpac TGE_REF_PAC.NUMPAC%TYPE;
    w_periode    DATE;
    w_dateDed    DATE;
    w_dateFin    DATE;
    w_moi_retour NUMBER;
    w_matric     DIC_ADM_CONTRAT_SITU.matric%type;--DIT 50818 
    w_dateCalcul  DATE;
    w_matricCount NUMBER :=1;
    obj_cad CAD_DATEVALID;
    tab_DATEVALID TAB_CAD_DATEVALID;
    w_datevalidCount NUMBER :=1;
    w_num number;
    w_num2 number;
  TYPE t_cad
IS
  TABLE OF VARCHAR2(5) INDEX BY VARCHAR2(2) ;
TYPE t_matric
IS
  TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(2) ;
  tab_cad TAB_SMALLVARCHAR;
  tab_matric TAB_SMALLVARCHAR; 
BEGIN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 début');
  ---Sélection des éléments liés à des compteurs
  getNumLigne(p_id);
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF i            <=tab_numLigne99.count AND tab_numLigne99(i) IS NOT NULL THEN
      w_numpac      := GET_NUMPAC(p_id,tab_numLigne00(i));
      w_moi_retour  := GET_PERIODE_00(p_id,tab_numLigne00(i));
      tab_DATEVALID := TAB_CAD_DATEVALID();
      tab_cad       := TAB_SMALLVARCHAR();
      tab_matric    := TAB_SMALLVARCHAR();
      FOR C IN cur_element(w_numpac)
      LOOP
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 loop '||C.TRTPARTICULIER||'  '||'paiezad'||C.paiezad);
        w_cad_temp  := SUBSTR(C.TRTPARTICULIER,1,instr(C.TRTPARTICULIER,',')-1);
        w_cad       := SUBSTR(w_cad_temp,instr(w_cad_temp,'=')              +1,LENGTH(w_cad_temp));
        w_pot_temp  := SUBSTR(C.TRTPARTICULIER,instr(C.TRTPARTICULIER,',')  +1,LENGTH(C.TRTPARTICULIER));
        w_pot       := NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'F')        -2),NVL(SUBSTR(w_pot_temp,1,instr(w_pot_temp,'D')-2),w_pot_temp));
        w_type_date := NVL(SUBSTR(w_pot_temp,LENGTH(w_pot_temp)             -1,instr(w_pot_temp,'F')),SUBSTR(w_pot_temp,LENGTH(w_pot_temp)-1,instr(w_pot_temp,'D')));
        --getPeriodeRecueil(w_numpac,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Avant :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        getPeriodeRecueilEvol(p_id,w_numpac,w_moi_retour,C.paiezad,w_dateDed,w_dateFin);
        FSED_AVANCEMENT(p_id,'Apres :getPeriodeRecueil:paiezad '||C.paiezad||' '||'w_dateDed'||w_dateDed||' '||'w_dateFin'||w_dateFin);
        IF w_type_date   ='FP' THEN
          w_periode     := LAST_DAY(TO_DATE(w_moi_retour,'YYYYMM'));
        elsif w_type_date='DP' THEN
          w_periode     := TO_DATE(w_moi_retour,'YYYYMM');
        elsif w_type_date='DR' THEN
          w_periode     := w_dateDed;
        elsif w_type_date='FR' THEN
          w_periode     := w_dateFin ;
        END IF;
        ---Mise à zero des pots de forçage des compteurs ‘I’ :Suppression des forçages sur la période recueil de la paie avant de faire les insertions
        --w_req := 'UPDATE CAD_COMPTEUR SET pot1_FJ = NULL ,pot1_FH = NULL ,pot2_FJ = NULL ,pot2_FH = NULL ,pot3_FJ = NULL ,pot3_FH = NULL ,pot4_FJ = NULL ,';
        --w_req := w_req ||' pot4_FH = NULL,pot5_FJ = NULL ,pot5_FH = NULL ,pot6_FJ = NULL ,pot6_FH = NULL ,pot7_FJ = NULL ,pot7_FH = NULL ,pot8_FJ = NULL ,pot8_FH = NULL, ';
        --w_req := w_req ||' pot9_FJ = NULL ,pot9_FH = NULL ,pot10_FJ = NULL ,pot10_FH = NULL ,pot11_FJ = NULL ,';
        --w_req := w_req ||' pot11_FH = NULL ,pot12_FJ = NULL ,pot12_FH = NULL WHERE CODE_COMPTEUR = :w_cad AND TYPEMJ =''I'' AND to_date(DJOUR,''YYYYMMDD'') BETWEEN :w_dateDed AND :w_dateFin ';
        --w_req := w_req ||' AND (MATRICULE,CODE_COMPTEUR) NOT IN (SELECT MATRICULE,CODE_COMPTEUR FROM CAD_RETP_MATRIC_CPT_DELETED) ';
        --w_req := w_req ||' AND MATRICULE IN (SELECT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac) ';
        --FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 après RAZ '||w_cad||' '||w_dateDed||' '||w_dateFin||' '||C.paiezad||' '||w_req);
        --EXECUTE immediate w_req USING w_cad,
        --w_dateDed ,
        --w_dateFin,
        --C.paiezad,
        --w_numpac ;
        -- on mémorise que ce matricule/compteur a déjà été effacé, il ne faut pas le reeffacer sous peine de perre les compteurs déjà positionnés
        w_req := 'insert into CAD_RETP_MATRIC_CPT_DELETED values (nvl((SELECT DISTINCT MATRIC FROM DIC_ADM_CONTRAT WHERE PAIEZAD = :paiezad AND NUMPAC = :numpac),''INCONNU''),:w_cad)';
        EXECUTE immediate w_req USING C.paiezad,
        w_numpac,
        w_cad;
        commit;
        IF w_cad IS NOT NULL THEN
          tab_cad.extend;
          tab_cad(w_cadCount):= w_cad;
          w_cadCount         := w_cadCount + 1;
        END IF;
        BEGIN
          SELECT DISTINCT matric
          INTO w_matric
          FROM DIC_ADM_CONTRAT_SITU--DIT 50818 
          WHERE numpac =w_numpac
          AND paiezad  =C.paiezad ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          w_matric := NULL;
        WHEN OTHERS THEN
          err_msg := SQLERRM;
        END;
        IF w_matric IS NOT NULL THEN
          tab_matric.extend;
          tab_matric(w_matricCount) := w_matric;
          w_matricCount             := w_matricCount+1;
          FSED_AVANCEMENT(p_id,'FSED.maj_CAD30: CAD.CAD_UNITE_CPT');
          w_unit     := CAD.CAD_UNITE_CPT(w_matric,TO_CHAR(to_date(w_moi_retour,'YYYYMM'),'YYYYMMDD'),w_cad);
          IF w_unit  IS NOT NULL THEN
            w_req    := 'MERGE INTO CAD_COMPTEUR CA USING ';
            w_req    := w_req ||'(SELECT * from (select  (select distinct c.matric from dic_ADM_CONTRAt c,DIC_ADm_CONTRAT_HISTO h where c.numpac=h.numpac and  c.numpac =:numpac AND c.paiezad =TGE.paiezad and h.ZA996 =''Z'' and c.pacmat =h.pacmat   )';
            w_req    := w_req ||' as MATRICULE ,to_char(to_date('''||w_periode||'''),''YYYYMMDD'') as DJOUR ,';
            w_req    := w_req ||' is_number(TGE.VALEUR) AS ';
            IF w_unit = 'H' THEN
              w_req  := w_req ||' pot'||w_pot||'_FH';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ';
            END IF ;
            w_req   := w_req ||' FROM TGE_IMPORT_FSED_30 TGE  where ID_TRT= :id and code_element= :elt and numpac = :numpac and tge.paiezad = :paiezad';
            w_req   := w_req ||' AND (numligne >=:ligne0 AND numligne <= :ligne99)) where MATRICULE is not null)i ';
            w_req   := w_req ||' ON (CA.MATRICULE =i.MATRICULE AND CA.DJOUR =i.DJOUR AND CA.TYPEMJ =''I'' AND CA.CODE_COMPTEUR = :cad )';
            w_req   := w_req ||' when MATCHED THEN ' ;
            w_req   := w_req ||' UPDATE  set ';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH =(i.pot'||w_pot||'_FH)*3600 ';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ =(i.pot'||w_pot||'_FJ)';
            END IF ;
            w_req   := w_req ||' when NOT MATCHED THEN ' ;
            w_req   := w_req ||' INSERT (MATRICULE, CODE_COMPTEUR, DJOUR,DATE_MAJ, TYPEMJ,';
            IF w_unit= 'H' THEN
              w_req := w_req ||' pot'||w_pot||'_FH)';
            ELSE
              w_req := w_req ||' pot'||w_pot||'_FJ)';
            END IF;
            w_req   := w_req ||'VALUES (i.MATRICULE,'''||w_cad||''',i.DJOUR,sysdate,''I'', ';
            IF w_unit= 'H' THEN
              w_req := w_req ||'(i.pot'||w_pot||'_FH)*3600 )';
            ELSE
              w_req := w_req ||'i.pot'||w_pot||'_FJ)';
            END IF;
            FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Merge : w_cad='||w_cad||' c.paiezad='||c.paiezad ||' C.ELEMENT='||C.ELEMENT||'tab_numLigne00(i)='||tab_numLigne00(i)||'tab_numLigne99(i)='||tab_numLigne99(i)||'substr('||w_req||',0,3600)' );
            EXECUTE IMMEDIATE w_req USING w_numpac,
            p_id,
            C.ELEMENT,
            w_numpac,
            c.paiezad,
            tab_numLigne00(i),
            tab_numLigne99(i),
            w_cad;
          END IF;
        END IF;
        --  creation de l'objet + insertion dans le tableau TAB_CAD_DATEVALID
        FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion dans le tableau TAB_CAD_DATEVALID  paiezad '||c.paiezad||'  '||'dateDeb'||w_dateDed||' w_unit '||w_unit);
        IF w_matric IS NOT NULL AND w_dateDed IS NOT NULL AND w_unit IS NOT NULL AND w_cad IS NOT NULL THEN
          Obj_CAD   := NEW CAD_DATEVALID( w_cad, c.element, c.paiezad,w_matric,w_dateDed);
          tab_DATEVALID.extend;
          tab_DATEVALID(w_datevalidCount):= Obj_CAD ;
          w_datevalidCount               := w_datevalidCount +1;
        END IF;
      END LOOP;
    END IF;
  END LOOP;
  COMMIT;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC ');
  --- Insertion des matricules dans CAD_CALCUL_EN_COURS_MATRIC avec un nouvel ID :CAD_SEQ_CALCUL.NEXTVAL
  w_seq := CAD_SEQ_CALCUL.NEXTVAL;
  INSERT INTO CAD_CALCUL_EN_COURS_MATRIC
    (ID,MATRICULE
    )
  SELECT DISTINCT w_seq ,
    CAD.MATRIC
  FROM
    (SELECT DISTINCT ta.Matricule AS matric FROM TABLE (tab_DATEVALID) ta
    )CAD ;
  --- Lancement du calcul
  --- si au moin 1 cad par element
  IF w_cadCount >1 THEN
    SELECT MIN(i.Periode_Recueil) INTO w_dateCalcul FROM TABLE(tab_DATEVALID) i;
    IF w_dateCalcul >TO_DATE(w_moi_retour,'YYYYMM') THEN
      --w_dateCalcul := TO_DATE(w_moi_retour,'YYYYMM');
      w_dateCalcul := add_months(TO_DATE(w_moi_retour,'YYYYMM'),-1);
    END IF;
    BEGIN
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 avant CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR w_seq='||w_seq||' w_dateCalcul='||w_dateCalcul);
      CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR(w_seq,TO_CHAR(w_dateCalcul,'YYYYMMDD'),NULL,'true','true');
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  après  CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR');
    EXCEPTION
    WHEN OTHERS THEN
      err_code := SQLCODE;
      err_msg  := SQLERRM;
      FSED_AVANCEMENT(p_id,'FSED.maj_CAD30:ERR:CAD.CAD_MAJ_VALEUR_LISTE_RUBJOUR '||err_code||' '||err_msg);
    END;
  END IF;
  COMMIT;
  --la suppression du passé pour les matricules concernés par le retour
  IF tab_matric.count>=1 AND tab_cad.count>=1 THEN
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 1 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING ( w_req,0);
    -- insert into temporary table TGE_MAJ_30_MATRIC_TEMPORARY et TGE_MAJ_30_CPT_TEMPORARY 
    FORALL i IN tab_matric.first..tab_matric.last
    INSERT INTO TGE_MAJ_30_MATRIC_TEMPORARY (matricule) values(tab_matric(i));
    FORALL i IN tab_cad.first..tab_cad.last
    INSERT INTO TGE_MAJ_30_CPT_TEMPORARY (CODE_COMPTEUR) values(tab_cad(i));
    select count(*) into w_num from TGE_MAJ_30_MATRIC_TEMPORARY;
    select count(*) into w_num2 from TGE_MAJ_30_cpt_TEMPORARY;
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 insertion temporary nb_matric='||w_num||' nb_cpt= '||w_num2);
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 suppression du passé');
    w_req :=
    'UPDATE CAD_COMPTEUR set pot1_FJ = null , pot1_FH = null ,pot2_FJ = null , pot2_FH = null ,pot3_FJ = null , pot3_FH = null ,pot4_FJ = null , pot4_FH = null, 
pot5_FJ = null , pot5_FH = null ,pot6_FJ = null , pot6_FH = null ,pot7_FJ = null , pot7_FH = null ,pot8_FJ = null , pot8_FH = null, 
pot9_FJ = null , pot9_FH = null ,pot10_FJ = null , pot10_FH = null ,pot11_FJ = null , pot11_FH = null ,pot12_FJ = null , pot12_FH = null , 
POT1_VALEURJ  = null ,POT1_VALEURH  = null ,POT2_VALEURJ  = null ,POT2_VALEURH  = null ,POT3_VALEURJ  = null ,POT3_VALEURH  = null , 
POT4_VALEURJ  = null ,POT4_VALEURH  = null ,POT5_VALEURJ  = null ,POT5_VALEURH  = null ,POT6_VALEURJ  = null ,POT6_VALEURH  = null , 
POT7_VALEURJ  = null ,POT7_VALEURH  = null ,POT8_VALEURJ  = null ,POT8_VALEURH  = null ,POT9_VALEURJ  = null ,POT9_VALEURH  = null , 
POT10_VALEURJ = null ,POT10_VALEURH = null ,POT11_VALEURJ = null ,POT11_VALEURH = null ,POT12_VALEURJ = null ,POT12_VALEURH = null , 
POTV1_VALEURJ = null ,POTV1_VALEURH = null ,POTV2_VALEURJ = null ,POTV2_VALEURH = null ,POTV3_VALEURJ = null ,POTV3_VALEURH = null , 
POTV4_VALEURJ = null ,POTV4_VALEURH = null ,POTV5_VALEURJ = null ,POTV5_VALEURH = null ,POTV6_VALEURJ = null ,POTV6_VALEURH = null '
    ;
    w_req := w_req ||'  where MATRICULE in (select matricule from TGE_MAJ_30_MATRIC_TEMPORARY)';
    w_req := w_req ||' and CODE_COMPTEUR in (select CODE_COMPTEUR from TGE_MAJ_30_CPT_TEMPORARY)';
    w_req := w_req ||' and typeMJ =''I'' and to_date(DJOUR,''YYYYMMDD'') < :periode';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 req supression :periode='||w_dateCalcul||'w_req : '||w_req);
    EXECUTE immediate w_req USING to_date(w_dateCalcul);
    w_req:='truncate table TGE_MAJ_30_MATRIC_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_MATRIC_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
    w_req:='truncate table TGE_MAJ_30_CPT_TEMPORARY';
    FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 Vidage 2 de TGE_MAJ_30_CPT_TEMPORARY : '||w_req);
     EXECUTE_IMMEDIATE_STRING  (w_req,0);
  END IF;
  --Mettre à jour CAD_MATRIC_DATE_VALID :update la date de début de validité avec la date de début de recueil de la période suivante:
  IF tab_DATEVALID.count>=1 THEN
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30  loop tab_DATEVALID');
    FOR i IN tab_DATEVALID.first..tab_DATEVALID.last
    LOOP
      UPDATE CAD_MATRIC_DATEVALID a
      SET a.DATE_DEB_PER                   = TO_CHAR(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1),'YYYYMMDD')
      WHERE a.Matricule                    = tab_DATEVALID(i).Matricule
      AND a.code_compteur                  = tab_DATEVALID(i).Code_Compteur
      AND to_date(a.DATE_EFFET,'YYYYMMDD') =
        (SELECT MAX(to_date(b.date_effet,'YYYYMMDD'))
        FROM cad_matric_datevalid b
        WHERE to_date(b.date_effet,'YYYYMMDD')<= to_date(ADD_MONTHS( to_date(tab_DATEVALID(i).Periode_Recueil),1))
        AND a.code_compteur                    =b.code_compteur
        AND a.matricule                        =b.matricule
        );
    END LOOP;
  END IF;
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 premier truncate CAD_RETP_MATRIC_CPT_DELETED');
  w_req:='truncate table CAD_RETP_MATRIC_CPT_DELETED';
   EXECUTE_IMMEDIATE_STRING  (w_req,0);
  FSED_AVANCEMENT(p_id,'maj_CAD30 fin procédure');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERR FSED.maj_CAD30 w_cad='||w_cad||'w_req :'||w_req);
  w_req    :='truncate table CAD_RETP_MATRIC_CPT_DELETED';
  FSED_AVANCEMENT(p_id,'FSED.maj_CAD30 second truncate (exception)CAD_RETP_MATRIC_CPT_DELETED' );
   EXECUTE_IMMEDIATE_STRING ( w_req,0);
  FSED_ERREUR( p_id , 'maj_CAD30 ' , NULL, err_code||'-'||err_msg);
  raise_application_error(-20000, 'FSED maj_CAD30  '|| sqlerrm);
END maj_CAD30;
/******************************************************************
PROC : insertData (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.CODE_TABLE%TYPE )
DESC :  Insertion dans les tables: TGE_REF_VRREP,TGE_REF_VRDES,
TGE_REF_VRVAL,TGE_REF_RUBRIQUE,TGE_REF_RUBRIQUE_CONTEXTE
TGE_REF_DICOZ
********************************************************************/
PROCEDURE insertData(
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.CODE_TABLE%TYPE )
IS
  v_exist_vrrep NUMBER := 0;
  v_exist_vrdes NUMBER := 0;
BEGIN
 
  IF tab_11R IS NOT NULL THEN
    forall i IN tab_11R.first..tab_11R.last
    INSERT INTO TGE_REF_VRREP VALUES tab_11R
      (i
      );
  END IF;
  IF tab_11D IS NOT NULL THEN
    forall i IN tab_11D.first..tab_11D.last
    INSERT INTO TGE_REF_VRDES VALUES tab_11D
      (i
      );
  END IF;
  IF tab_11D1 IS NOT NULL AND tab_11D1.first > 0 THEN
      forall i IN tab_11D1.first..tab_11D1.last
    --UPDATE TGE_REF_VRDES SET row=tab_11D1(i) WHERE NUMERO_DE_PAC=tab_11D1(i).NUMERO_DE_PAC and CODE_TABLE=tab_11D1(i).CODE_TABLE and NOM_DU_CHAMP=tab_11D1(i).NOM_DU_CHAMP;
    --DIT 76475
    UPDATE TGE_REF_VRDES
    SET MORCEAU_5_NOM_TABLE = tab_11D1(i).MORCEAU_5_NOM_TABLE ,
      MORCEAU_5_COL_DEB     = tab_11D1(i).MORCEAU_5_COL_DEB ,
      MORCEAU_5_COL_FIN     = tab_11D1(i).MORCEAU_5_COL_FIN ,
      MORCEAU_6_NOM_TABLE   = tab_11D1(i).MORCEAU_6_NOM_TABLE ,
      MORCEAU_6_COL_DEB     = tab_11D1(i).MORCEAU_6_COL_DEB ,
      MORCEAU_6_COL_FIN     = tab_11D1(i).MORCEAU_6_COL_FIN ,
      MORCEAU_7_NOM_TABLE   = tab_11D1(i).MORCEAU_7_NOM_TABLE ,
      MORCEAU_7_COL_DEB     = tab_11D1(i).MORCEAU_7_COL_DEB ,
      MORCEAU_7_COL_FIN     = tab_11D1(i).MORCEAU_7_COL_FIN ,
      MORCEAU_8_NOM_TABLE   = tab_11D1(i).MORCEAU_8_NOM_TABLE ,
      MORCEAU_8_COL_DEB     = tab_11D1(i).MORCEAU_8_COL_DEB ,
      MORCEAU_8_COL_FIN     = tab_11D1(i).MORCEAU_8_COL_FIN ,
      MORCEAU_9_NOM_TABLE   = tab_11D1(i).MORCEAU_9_NOM_TABLE ,
      MORCEAU_9_COL_DEB     = tab_11D1(i).MORCEAU_9_COL_DEB ,
      MORCEAU_9_COL_FIN     = tab_11D1(i).MORCEAU_9_COL_FIN
    WHERE NUMERO_DE_PAC     =tab_11D1(i).NUMERO_DE_PAC
    AND CODE_TABLE          =tab_11D1(i).CODE_TABLE
    AND NOM_DU_CHAMP        =tab_11D1(i).NOM_DU_CHAMP;
  END IF;
  IF tab_11V IS NOT NULL THEN
    forall i IN tab_11V.first..tab_11V.last
    INSERT INTO TGE_REF_VRVAL VALUES tab_11V
      (i
      );
  END IF;
  IF tab_15 IS NOT NULL THEN
    forall i IN tab_15.first..tab_15.last
    INSERT INTO TGE_REF_RUBRIQUE VALUES tab_15
      (i
      );
  END IF;
  
  IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
   forall i IN tab_15_lib.first..tab_15_lib.last  
     MERGE INTO TGE_REF_LIBRUB_COTIS lib using 
      dual
     on (lib.NUMPAC = tab_15_lib(i).numpac and lib.CODERUB=tab_15_lib(i).coderub and lib.CODECAISSE=tab_15_lib(i).codecaisse)
     when MATCHED THEN 
     UPDATE  set lib.CAISSEREF=tab_15_lib(i).CAISSEREF,
                 lib.LIB_RESOLU=tab_15_lib(i).LIB_RESOLU
     when NOT MATCHED THEN 
     INSERT (NUMPAC,CODERUB,CODECAISSE,CAISSEREF,LIB_RESOLU)
     VALUES (tab_15_lib(i).numpac ,tab_15_lib(i).coderub ,tab_15_lib(i).codecaisse,tab_15_lib(i).CAISSEREF,tab_15_lib(i).LIB_RESOLU);
  END IF;
  IF tab_17CR IS NOT NULL THEN
    forall i IN tab_17CR.first..tab_17CR.last
    INSERT INTO TGE_REF_RUBRIQUE_CONTEXTE VALUES tab_17CR
      (i
      );
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    forall i IN tab_17DMF.first..tab_17DMF.last
    INSERT INTO TGE_REF_DICOZ VALUES tab_17DMF
      (i
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'insertData' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED insertion  '|| sqlerrm);
END insertData;
/*****************************************************
PROC : purge_array
DESC :
*****************************************************/
PROCEDURE purge_array
  (
    p_id IN NUMBER
  )
IS
BEGIN
  IF tab_11R IS NOT NULL THEN
    tab_11R.DELETE;
  END IF;
  IF tab_11D IS NOT NULL THEN
    tab_11D.DELETE;
  END IF;
  IF tab_11D1 IS NOT NULL THEN
    tab_11D1.DELETE;
  END IF;
  IF tab_11V IS NOT NULL THEN
    tab_11V.DELETE;
  END IF;
  IF tab_15 IS NOT NULL THEN
    tab_15.DELETE;
  END IF;
  IF tab_15_lib IS NOT NULL THEN
    tab_15_lib.DELETE;
  END IF;
  IF tab_17CR IS NOT NULL THEN
    tab_17CR.DELETE;
  END IF;
  IF tab_17DMF IS NOT NULL THEN
    tab_17DMF.DELETE;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_array' , NULL , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_array;
/*********************************************************************
PROC : purge_table (pNumPac       TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
pCodeTable    TGE_REF_VRREP.Code_TABLE%TYPE)
DESC : purge table
**********************************************************************/
PROCEDURE purge_table
  (
    p_id IN NUMBER,
    pNumPac TGE_REF_VRREP.NUMERO_DE_PAC%TYPE,
    pCodeTable TGE_REF_VRREP.Code_TABLE%TYPE,
    numcarte_00 IN NUMBER
  )
IS
  a_count     NUMBER:=0;
  numcarte_99 NUMBER;
BEGIN
  FOR i IN tab_numLigne00.first..tab_numLigne00.last
  LOOP
    IF tab_numLigne00
      (
        i
      )
                  =numcarte_00 THEN
      numcarte_99:=tab_numLigne99
      (
        i
      )
      ;
    END IF;
  END LOOP;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11R'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRREP Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRREP WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,18,1)='11D'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_VRDES Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_VRDES WHERE NUMERO_DE_PAC=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)  ='15'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE WHERE numpac=pNumPac;
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_LIBRUB_COTIS Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_LIBRUB_COTIS WHERE numpac = pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)='17CR'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_RUBRIQUE_CONTEXTE Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_RUBRIQUE_CONTEXTE WHERE numpac=pNumPac;
  END IF;
  SELECT COUNT(*)
  INTO a_count
  FROM TGE_IMPORT_FSED
  WHERE SUBSTR(donnees,1,6)=pNumpac
  AND id_trt               =p_id
  AND SUBSTR(donnees,7,2)
    || SUBSTR(donnees,10,2)
    || SUBSTR(donnees,13,1)='17DMF'
  AND num_lig BETWEEN numcarte_00 AND numcarte_99;
  IF a_count>0 THEN
    FSED_AVANCEMENT(p_id,'Vidage de TGE_REF_DICOZ Pac ('||pNumPac||')');
    DELETE FROM TGE_REF_DICOZ WHERE numpac=pNumPac;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := SQLERRM;
  FSED_ERREUR( p_id , 'purge_table' , pNumPac||','||pCodeTable , err_code||'-'||err_msg );
  raise_application_error(-20000, 'FSED purge array  '|| sqlerrm);
END purge_table;
/**********************************************************************
PROC : retour_Referentiel (p_id IN NUMBER )
DESC :
***********************************************************************/
PROCEDURE retour_Fsed(
    p_id IN NUMBER )
IS
  num_carte    VARCHAR(2) := '';
  carte_00     BOOLEAN    :=false;
  v_numpac     VARCHAR(6);
  exist_numpac NUMBER;
  v_code_table TGE_REF_VRVAL.CODE_TABLE%TYPE;
  v_code_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE := '$';
  v_table_Old TGE_REF_VRVAL.CODE_TABLE%TYPE      := '$';
  v_cmpt      NUMBER                                  := 0 ;
  v_cmpt_rest NUMBER ;
  v_cmpt1     NUMBER := 0 ;
  v_code TGE_REF_VRVAL.CODE_TABLE%TYPE ;
  v_start         NUMBER;
  v_stop          NUMBER;
  listeTablePurge VARCHAR2(32767):=',';
  v_type_retour   VARCHAR2(2);
  v_moi_retour    NUMBER;
  v_type          VARCHAR2(1);
  isVRVAL         BOOLEAN := false ;
  isVRDES         BOOLEAN := false ;
  isRUBRIQUE      BOOLEAN := false ;
  isDICOZ         BOOLEAN := false ;
  v_id            NUMBER ;
  w_exist         number := -1;
  w_code_gest    tge_ref_vrrep.code_gestionnaire%type;
  v_type_carte    varchar2(3) :=' ';
BEGIN
  v_start := DBMS_UTILITY.GET_TIME;
  v_id    :=p_id;
  getNumLigne(v_id);
  -- Lecture ligne à ligne de la table
   FSED_AVANCEMENT(v_id,'Début Traitement cartes référentiel paie');
  OPEN cur_lig(v_id);
  LOOP
    FETCH cur_lig BULK COLLECT INTO lig limit 10000;
    EXIT
  WHEN lig.count   =0;
    IF lig.first  IS NOT NULL THEN
      v_cmpt_rest := lig.COUNT;
      FOR i IN lig.FIRST..lig.LAST
      LOOP
        --Extraction du numéro de la carte
        num_carte  := SUBSTR(lig(i).donnees,7,2);
        IF num_carte='00' THEN
          v_numpac := SUBSTR(lig(i).donnees,1,6);
          -- test d'existence du pac
          SELECT COUNT(numpac)
          INTO exist_numpac
          FROM TGE_REF_PAC
          WHERE numpac     =v_numpac;
          IF exist_numpac  >0 THEN
            carte_00      :=true;
            v_type_retour := SUBSTR(lig(i).donnees,68,2);
            IF v_type_retour IN('RC','RN') THEN
              v_moi_retour :=SUBSTR(lig(i).donnees,70,6);
              insert_gap_trt(v_id,v_numpac,v_moi_retour,v_type_retour);
            ELSIF v_type_retour ='RR' THEN
              insert_gap_trt(v_id,v_numpac,NULL,v_type_retour);
            END IF;
            insert_gap_trt_suivi(v_id,'DEBUT',NULL,'BATCH',v_type_retour);
          END IF;
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 00 type : '||v_type_retour);
        elsif num_carte='99' THEN
          carte_00    :=false;  
          FSED_AVANCEMENT(v_id,'Traitement référentiel Carte 99 ');
          v_id := GAP_TRT_SEQ_ID.nextval;
        END IF;
        -- traitement de chaque type de carte
        IF num_carte='00' THEN
          FSED_AVANCEMENT(v_id,'Traitement référentiel purge tables (numpac='||v_numpac||'/code table ='||v_code_table||'/num ligne='||lig(i).num_lig);
          purge_table(v_id,v_numpac,v_code_table,lig(i).num_lig);
        END IF ;
        IF num_carte    ='11' THEN
          v_code_table := getTableCode (lig(i))||trim(SUBSTR(lig(i).donnees,14,2));
          v_type       :=SUBSTR(lig(i).donnees,18,1);
          v_type_carte := trim(SUBSTR(lig(i).donnees,18,2));
          w_exist:= -1;
          w_code_gest:='';
          if v_type_carte ='V' THEN
          begin
          select CODE_GESTIONNAIRE ,1
          into   w_code_gest,
                 w_exist
          from  tge_ref_vrrep 
          where numero_de_pac     = v_numpac
          and   code_table        = v_code_table;
          exception 
          when no_data_found then 
          w_exist := -1;
          end;
          end if;
        END IF;
        IF carte_00 AND v_code_table_Old        != v_code_table AND num_carte ='11' THEN
           IF (instr(listeTablePurge,v_code_table)=0 AND SUBSTR(lig(i).donnees,18,1)='V' and (w_exist = -1 OR (w_code_gest !='G' AND w_exist=1))) THEN
            DELETE
            FROM TGE_REF_VRVAL
            WHERE NUMERO_DE_PAC=v_numpac
            AND CODE_TABLE     =v_code_table;
            v_code_table_Old  := v_code_table;
            listeTablePurge   :=listeTablePurge||v_code_table||',';
          END IF;
        END IF ;
IF carte_00 THEN
  v_cmpt           :=v_cmpt              +1 ;
  IF v_type_retour  ='RR' AND num_carte IN ('11','15','17') THEN
    IF num_carte    ='11' AND v_type='V' THEN
      isVRVAL      := true ;
    ELSIF num_carte ='11' AND v_type='D' THEN
      isVRDES      := true ;
    ELSIF num_carte ='15' THEN
      isRUBRIQUE   := true ;
    ELSIF num_carte ='17' THEN
      isDICOZ      := true ;
    END IF;
  END IF;
  
  ---Insertion Intermediaire
  IF v_cmpt      = 10000 OR v_cmpt_rest <10000 THEN
    v_cmpt1     := v_cmpt1   +v_cmpt;
    v_cmpt_rest := lig.COUNT - v_cmpt1;
    
    insertData(v_id,v_numpac,v_code_table);
    --Vider les tableaux
    purge_array(v_id);
    v_cmpt := 0;
  END IF;
  IF num_carte ='11' THEN
    IF w_exist = -1 OR (w_code_gest !='G' AND w_exist=1) THEN
      setCart11(v_id,lig(i),v_numpac,v_code_Table,v_table_Old);
    END IF;
    v_table_Old := v_code_Table ;
  elsif num_carte='15' THEN
    setCart15(v_id,lig(i),v_numpac);
  elsif num_carte ='17' THEN
    setCart17(v_id,lig(i),v_numpac);
  END IF;
END IF;
END LOOP;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRVAL Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRVAL',NULL,'BATCH',v_type_retour);
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire VRDES Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'VRDES',NULL,'BATCH',v_type_retour);
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire RUBRIQUE Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'RUBRIQUE',NULL,'BATCH',v_type_retour);
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Détection de la présence du dictionnaire DICOZ Pac ('||v_numpac||')' );
    insert_gap_trt_suivi(v_id,'DICOZ',NULL,'BATCH',v_type_retour);
  END IF;
IF tab_11R IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRREP');
    END IF;
END IF;
IF tab_11D IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRDES');
    END IF;
END IF;
IF tab_11V IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_VRVAL');
    END IF;
END IF;
IF tab_15 IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE');
    END IF;
END IF;
IF tab_15_lib IS NOT NULL and tab_15_lib.exists(1) THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_LIBRUB_COTIS');
    END IF;
END IF;
 IF tab_17CR IS NOT NULL THEN
    IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_RUBRIQUE_CONTEXTE');
    END IF;
END IF;
IF tab_17DMF IS NOT NULL THEN
IF (v_cmpt_rest<10000) THEN 
     FSED_AVANCEMENT(p_id,'Chargement de TGE_REF_DICOZ');
    END IF;
END IF;
END IF;
IF isVRVAL THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRVAL' );
  END IF;
  IF isVRDES THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire VRDES' );
  END IF;
  IF isRUBRIQUE THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire RUBRIQUE' );
  END IF;
  IF isDICOZ THEN
    FSED_AVANCEMENT(v_id,'Fin du chargement du dictionnaire DICOZ' );
  END IF;    
    isVRVAL    :=false;
    isVRDES    :=false;
    isRUBRIQUE :=false;
    isDICOZ    :=false;
  END LOOP;
  CLOSE cur_lig;
  v_stop := DBMS_UTILITY.GET_TIME;
  FSED_AVANCEMENT(v_id,'Fin Traitement cartes référentiel paie');
EXCEPTION
WHEN OTHERS THEN
  err_code := SQLCODE;
  err_msg  := err_msg||' '||SQLERRM;
  FSED_ERREUR( v_id , 'retour_Fsed' , v_id , err_code||'-'||err_msg );
  raise_application_error(-20000, 'retour_Fsed  '|| sqlerrm );
END retour_Fsed;
  /*****************************************************************************
 PROC : getPeriodeRecueilEvol
 DESC : retourne la date debut et fin de la periode de recueil 
 *******************************************************************************/
 PROCEDURE getPeriodeRecueilEvol(
    p_id             IN NUMBER,
    p_numpac         IN TGE_REF_PAC.numpac%type,
    p_periodeEnCours IN TGE_REF_PAC.periodeencours%type,
    p_paiezad        IN TGE_IMPORT_FSED_30.paiezad%type,
    p_dateDeb        IN OUT DATE,
    p_dateFin        IN OUT DATE)
IS
  w_A01_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A02_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_A03_DONNEE TGE_REF_MAPDO.donneegxp%type;
  w_tablegxp    TGE_REF_MAPDO.tablegxp%type;
  w_req CLOB;
  w_pacmat DIC_ADM_CONTRAT_SITU.pacmat%type;--DIT 50818 
  w_activite     VARCHAR2(20);
  w_etablissment VARCHAR2(20);
  w_categorie    VARCHAR2(20);
  
  A01_NOM_ELT    VARCHAR2(20);
  A02_NOM_ELT    VARCHAR2(20);
  A03_NOM_ELT    VARCHAR2(20);
  
  requetePivot  VARCHAR2(3000);
BEGIN

  select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
  from (
   SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
  )
  pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));	
	
  SELECT pacmat
  INTO   w_pacmat
  FROM   DIC_ADM_CONTRAT_SITU --DIT 50818 
  WHERE  numpac =p_numpac
  AND    paiezad  = p_paiezad
  AND rownum   =1 ;

requetePivot :=    
'SELECT tablegxp ,
  A01_DONNEE ,
  A02_DONNEE,
  A03_DONNEE

FROM
  (SELECT *
  FROM
    ( SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac   ='''||p_numpac||'''
    AND b.table_name =c.TABLEGXP
    AND c.element   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    UNION ALL
    SELECT DISTINCT c.element,
      c.tablegxp,
      c.DONNEEGXP
    FROM
      (SELECT * FROM user_tables
      ) b,
      tge_ref_mapdo c
    WHERE C.numpac              =''*''
    AND b.table_name            =c.TABLEGXP
    AND c.element              IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
    AND (TABLEGXP,ELEMENT) NOT IN
      (SELECT a.TABLEGXP,
        a.element
      FROM tge_ref_mapdo a,
        (SELECT * FROM user_tables
        ) b
      WHERE a.numpac  ='''||p_numpac||'''
      AND b.table_name=a.TABLEGXP
      AND A.ELEMENT   IN ('''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
      )
    ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element) IN(
    '''||A01_NOM_ELT||''' AS A01 ,'''||A02_NOM_ELT||''' AS A02,'''||A03_NOM_ELT||''' AS A03
    ))
  )';
  EXECUTE IMMEDIATE
  requetePivot
  INTO 
  w_tablegxp,
  w_A01_DONNEE,
  w_A02_DONNEE,
  w_A03_DONNEE
  ;
  IF w_A01_DONNEE IS NOT NULL AND w_A02_DONNEE IS NOT NULL AND w_A03_DONNEE IS NOT NULL THEN
    w_req          := 'select distinct '||w_A01_DONNEE||','||w_A02_DONNEE ||','||w_A03_DONNEE ||' from '||w_tablegxp ||' where numpac = :numpac and pacmat= :pacmat and DATE_EFF <= :dateeff and DATE_SORTIE_SIT_BO >= :datesortie ';
    EXECUTE immediate w_req INTO w_activite,w_etablissment,w_categorie
    USING p_numpac,w_pacmat,last_day(to_date(p_periodeEnCours,'YYYYMM')),last_day(to_date(p_periodeEnCours,'YYYYMM'));
  END IF;
   FSED_AVANCEMENT(p_id,'getPeriodeRecueil:w_activite,w_etablissment,w_categorie '||w_activite||','||w_etablissment||','||w_categorie);
  
BEGIN
select a.DT_RECUEIL_DEB ,
       a.DT_RECUEIL_FIN
INTO   p_dateDeb ,
       p_dateFin 
FROM (
SELECT
  CASE
    WHEN TO_CHAR(REC.DATE_DEBUT_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_DEBUT_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT,29,8), 'DDMMYYYY')
  END AS DT_RECUEIL_DEB,
  CASE
    WHEN TO_CHAR(REC.DATE_FIN_1,'YYYYMMDD') IS NOT NULL
    THEN REC.DATE_FIN_1
    ELSE to_date(SUBSTR(LTP.ENREGISTREMENT, 37 ,8 ), 'DDMMYYYY')
  END AS DT_RECUEIL_FIN

FROM TGE_REF_VRVAL LTP
LEFT JOIN DIC_TGE_PERIODES_RECUEIL REC
ON ( REC.PAIEZAD                        = p_paiezad
AND REC.NUMPAC                          = p_numpac)
WHERE LTP.CODE_TABLE                    = 'LTP'
AND NUMERO_DE_PAC                       = p_numpac
AND SUBSTR(LTP.ENREGISTREMENT, 19 , 6 ) = SUBSTR(p_periodeEncours,5, 6)
  ||SUBSTR(p_periodeEncours,0, 4) --expl '012014'
AND w_activite     between SUBSTR(LTP.ENREGISTREMENT,1 ,2) AND  SUBSTR(LTP.ENREGISTREMENT,3,2)
AND w_etablissment between SUBSTR(LTP.ENREGISTREMENT,5 ,5) AND  SUBSTR(LTP.ENREGISTREMENT,10,5)
AND w_categorie    between SUBSTR(LTP.ENREGISTREMENT,15,2) AND  SUBSTR(LTP.ENREGISTREMENT,17,2)
ORDER BY NUMERO_DE_LIGNE ASC) a
where rownum =1;
EXCEPTION 
 WHEN NO_DATA_FOUND THEN 
    p_dateDeb := null;
    p_dateFin := null;
FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil: NO_DATA_FOUND for dateDeb et DateFin');
 WHEN OTHERS THEN
  err_msg := SQLERRM; 
 FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg );
END ;
EXCEPTION
WHEN OTHERS THEN
  err_msg := SQLERRM;
  FSED_AVANCEMENT(p_id,'ERREUR :getPeriodeRecueil:err_msg : '||err_msg||' req'||w_req||' '||'using '|| p_numpac||','||w_pacmat||','||last_day(to_date(p_periodeEnCours,'YYYYMM'))||','||last_day(to_date(p_periodeEnCours,'YYYYMM')));
END getPeriodeRecueilEvol;
  /*****************************************************************************
 PROC : getClauseSelect
 DESC : la clause SELECT correspondant à une donnée mappée
 *******************************************************************************/
 FUNCTION getClauseSelect(
    p_numpac             IN VARCHAR2,
    p_nom_table_ou_alias IN VARCHAR2,
    p_donneegxp          IN VARCHAR2,
    p_donnfiltre         IN VARCHAR2,
    p_operfiltre         IN VARCHAR2,
    p_valfiltre          IN VARCHAR2,
    p_trtparticulier     IN VARCHAR2,
    p_envoi_systematique IN VARCHAR2,
    p_data_type          IN VARCHAR2,
    p_type_zadig         IN VARCHAR2,
    p_masque             IN VARCHAR2,
    p_occ                IN VARCHAR2,
    p_avec_balises_photo IN BOOLEAN)
  RETURN VARCHAR2
IS
  donnee      VARCHAR(1000);
  donneeChar  VARCHAR(1000);
  donneeFilt  VARCHAR(1000);
BEGIN
  IF p_donneegxp            IS NOT NULL THEN
    donneeChar                      :=p_nom_table_ou_alias||'.'||p_donneegxp;
    IF p_trtparticulier     IS NOT NULL AND NOT (instr(p_trtparticulier,'SI_VIDE=',1)=1 OR instr(p_trtparticulier,'DIV=',1)=1 OR instr(p_trtparticulier,'TAB=',1)=1 OR instr(p_trtparticulier,'INI=',1)=1 OR instr(p_trtparticulier,'SUB=',1)=1 OR instr(p_trtparticulier,'PAYS',1)=1 ) THEN
      donneeChar                    :=REPLACE(p_trtparticulier,'$DONNEEGXP',donneeChar);
      donneeChar                    :=REPLACE(donneeChar,'$NUMPAC',''''||p_numpac||'''');
      donneeChar                    :=REPLACE(donneeChar,'$MATRIC',p_nom_table_ou_alias||'.'||'MATRIC');
      donneeChar                    :=REPLACE(donneeChar,'$TABLE',p_nom_table_ou_alias);
      IF p_avec_balises_photo AND p_envoi_systematique='O' THEN
        --les balises @### et ###@ permettront de remplacer la donnée par une valeur bidon dans la PHOTO et ainsi forcer l'envoi
        donneeChar :='@###'||donneeChar||'###@';
      END IF;
    END IF;
    IF p_data_type   ='DATE' AND p_trtparticulier IS NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) THEN
      donneeChar            :='to_char('||p_nom_table_ou_alias||'.'||p_donneegxp||',''yyyymmddHH24MISS'')';
    ELSIF p_data_type='DATE' AND p_trtparticulier IS NOT NULL AND p_type_zadig    ='N' AND p_masque IN (1,2,3,4,5,6,7) AND p_donneegxp IS NOT NULL THEN
      donneeChar            :='to_char('||donneechar||',''yyyymmddHH24MISS'')';
    ELSE
      donneeChar:='to_char('||donneeChar||')';
    END IF;
    IF p_donnfiltre    IS NOT NULL AND p_operfiltre IS NOT NULL THEN
      donneeFilt               :=' case when ('||p_nom_table_ou_alias||'.'||p_donnfiltre;
      IF p_valfiltre   IS NULL THEN
        IF p_operfiltre = '=' THEN
          donneeFilt           :=donneeFilt||' IS NULL';
        ELSE
          donneeFilt:=donneeFilt||' IS NOT NULL';
        END IF;
      ELSIF p_operfiltre                  ='IN' THEN
        donneeFilt                               :=donneeFilt||' IN ('||p_valfiltre||')';
      ELSIF p_operfiltre                  ='NI' THEN
        donneeFilt                               :=donneeFilt||' NOT IN ('||p_valfiltre||')';
      ELSIF SUBSTR(upper(p_valfiltre),1,3)='TO_' THEN
        donneeFilt                               :=donneeFilt||p_operfiltre||p_valfiltre;
      ELSE
        donneeFilt:=donneeFilt||p_operfiltre||''''||p_valfiltre||'''';
      END IF;
      donneeFilt:=donneeFilt||') then '||donneeChar||' else ''_NOTSEND_'' end ';
    ELSE
      donneeFilt:=donneeChar;
    END IF;
    IF p_occ   ='*F' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADR'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSIF p_occ='*I' THEN
      donnee               :='case when '||p_nom_table_ou_alias||'.'||'ECRADR=''ADI'' then '||donneeFilt||' else ''_NOTSEND_'' end';
    ELSE
      donnee:=donneeFilt;
    END IF;
  ELSE
    donnee :=''''||REPLACE(p_trtparticulier,'INI=','')||'''' ;
  END IF;
  IF instr(p_trtparticulier,'SI_VIDE=',1)>0 THEN
    donnee                                      :='nvl('||donnee||','''||REPLACE(p_trtparticulier,'SI_VIDE=','')||''')';
  END IF;
  IF instr(p_trtparticulier,'DIV=',1)>0 THEN
    donnee                                  :='to_char(to_number('||donnee||')/to_number('||REPLACE(p_trtparticulier,'DIV=','')||'))';
  END IF;
  IF instr(p_trtparticulier,'TAB=',1)>0 THEN
    donnee                                  :=donnee;
  END IF;
  IF instr(p_trtparticulier,'SUB=',1)>0 THEN
    donnee                                  :=REPLACE(p_trtparticulier,'SUBSTR=','SUBSTR('||donnee||',')||')';
  END IF;
  RETURN donnee;
END getClauseSelect ;        
END FSED;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV
=SQL=
CREATE OR REPLACE PROCEDURE TGE_ALIM_PERIODE_INDIV(
    p_id            IN NUMBER,
    p_numpac        IN VARCHAR2,
    p_periode_paie  IN VARCHAR2,
    p_paiezad       IN VARCHAR2,
    p_dosNumForSimu IN NUMBER DEFAULT NULL )
IS
  w_err                 VARCHAR2(2000);
  id_trt                NUMBER;
  periode_deb_retro     VARCHAR2(6);
  periode_deb_histo_retro     VARCHAR2(6);
  periode_recalcul      VARCHAR2(6);
  periode_paie_en_cours VARCHAR2(6);
  nb_mois_retro         NUMBER(2);
BEGIN
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ')');
  --Alimentation id procédure
  IF p_id   = 0 OR p_id IS NULL THEN
    id_trt := IMP_TRT_SEQ_ID.nextval;
  ELSE
    id_trt := p_id;
  END IF;
  --Alimentation des informations sur le pac
  SELECT DEB_RETRO,
  	DEB_HISTO_RETRO,
    NB_MOIS_RETRO,
    PERIODEENCOURS
  INTO periode_deb_retro,
    periode_deb_histo_retro,
    nb_mois_retro,
    periode_paie_en_cours
  FROM TGE_REF_PAC
  WHERE NUMPAC = p_numpac;
  --Alimentation de la période de début de calcul
  IF( p_periode_paie     <= periode_paie_en_cours) THEN
    IF periode_deb_retro IS NOT NULL AND periode_deb_retro <= periode_paie_en_cours THEN
      periode_recalcul   := GREATEST(p_periode_paie, TO_CHAR(ADD_MONTHS(TO_DATE(periode_paie_en_cours, 'YYYYMM'), -nb_mois_retro), 'YYYYMM'));
      IF periode_recalcul < periode_deb_histo_retro THEN
        periode_recalcul := periode_deb_histo_retro;
      END IF;
      TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV calcul des périodes de recueil du ' || periode_recalcul || ' au ' || periode_paie_en_cours);
    ELSE
      periode_recalcul   := periode_paie_en_cours;
    END IF;
    LOOP
      TGE_ALIM_PERIODE_INDIV_MAIN(id_trt, p_numpac, periode_recalcul, p_paiezad, p_dosNumForSimu);
      --On passe au mois suivant
      periode_recalcul := TO_CHAR(ADD_MONTHS(TO_DATE(periode_recalcul, 'YYYYMM'), 1), 'YYYYMM');
      EXIT
    WHEN periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours OR periode_recalcul > periode_paie_en_cours;
    END LOOP;
  ELSE
    TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV -> Date de periode_recalcul ('||p_periode_paie||') > à la période du pac en cours ('||periode_paie_en_cours||')');
  END IF;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV OK');
EXCEPTION
WHEN OTHERS THEN
  w_err := SQLCODE;
  w_err := 'TGE_ALIM_PERIODE_INDIV '||w_err|| sqlerrm;
  TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV KO : '||w_err);
END TGE_ALIM_PERIODE_INDIV;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_MAIN
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_MAIN( p_id            IN NUMBER, p_numpac        IN VARCHAR2, p_periode_paie  IN VARCHAR2,
 p_paiezad       IN VARCHAR2,
 p_dosNumForSimu IN NUMBER DEFAULT NULL )
 IS
 w_err    VARCHAR2(2000);
 w_pacmat VARCHAR2(20);
 w_audit_alim_periode_tab AUDIT_ALIM_PERIODE_TAB;
 w_debut_recueil_retro DATE;
 w_fin_recueil_retro   DATE;
 w_debut_paie          DATE;
 w_fin_paie            DATE;
 w_deb_paie_prec       DATE;
 w_fin_paie_prec       DATE;
 id_trt                NUMBER;
 id_CALCUL_TGE_PERIODE_RECUEIL    NUMBER;
 pacmat_found          BOOLEAN;
 req                   CLOB;
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN début (' || p_numpac || ',' || p_periode_paie || ',' || p_paiezad || ')');
 --Alimentation id procédure
 IF p_id   = 0 OR p_id IS NULL THEN
 id_trt := IMP_TRT_SEQ_ID.nextval;
 ELSE
 id_trt := p_id;
 END IF;
 id_CALCUL_TGE_PERIODE_RECUEIL:= IMP_TRT_SEQ_ID.nextval;
 --Récupération du pacmat
 pacmat_found := true;
 IF p_paiezad IS NOT NULL THEN
 BEGIN
 SELECT PACMAT
 INTO w_pacmat
 FROM DIC_ADM_CONTRAT_SITU
 WHERE NUMPAC = p_numpac
 AND PAIEZAD  = p_paiezad
 AND rownum   =1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 pacmat_found := false;
 req := 'DELETE FROM ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req := req||' AND MOIS_PAIE >= '''||p_periode_paie||'''';
 req := req||' AND PAIEZAD = '''||p_paiezad||'''';
 IF p_dosNumForSimu IS NOT NULL THEN
 req := req||' AND DOS_NUM = '||p_dosNumForSimu;
 END IF;
 EXECUTE_IMMEDIATE_STRING (req,0);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs dans DIC_ADM_CONTRAT_SITU AUCUN PACMAT trouvé pour le PAIEZAD = ''' || p_paiezad || '''');
 raise;
 END;
 END IF;
 IF pacmat_found THEN
 --Vérification des données à traiter
 w_audit_alim_periode_tab := AUDIT_ALIM_PERIODE_INDIV(id_trt, p_numpac, p_periode_paie, w_pacmat);
 IF w_audit_alim_periode_tab.exists(1) THEN
 FOR i IN w_audit_alim_periode_tab.first..w_audit_alim_periode_tab.last
 LOOP
 w_err := w_err || '(' || w_audit_alim_periode_tab(i).paiezad || ',' || w_audit_alim_periode_tab(i).debut_recueil_force || ',' || w_audit_alim_periode_tab(i).fin_recueil_force || ')';
 END LOOP;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil pour les paiezad suivant (paiezad,debut_recueil_force,fin_recueil_force) : ' || w_err);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO');
 RETURN;
 END IF;
 --Récupération de la période de recueil retro issu de la table LTP (TGE_REF_LTP)
 BEGIN
 SELECT DEBUT_PERIODE,
 FIN_PERIODE
 INTO w_debut_recueil_retro,
 w_fin_recueil_retro
 FROM TGE_REF_LTP
 WHERE NUMPAC  = p_numpac
 AND MOIS_PAIE = TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de recueil M-1 dans TGE_REF_LTP : NUMPAC = ''' || p_numpac || ''' AND MOIS_PAIE = ' || TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM'));
 raise;
 END;
 --Récupération de la période du mois de paie issu de la table CAL (TGE_REF_PER)
 BEGIN
 SELECT TO_DATE(DATE_DEBUT_MOIS,'yyyymmdd'),
 TO_DATE(DATE_FIN_MOIS,'yyyymmdd')
 INTO w_debut_paie,
 w_fin_paie
 FROM TGE_REF_PER
 WHERE numpac       = p_numpac
 AND PERIODEENCOURS = p_periode_paie;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de paie M dans TGE_REF_PER : NUMPAC = ''' || p_numpac || ''' AND PERIODEENCOURS = ''' || p_periode_paie || '''');
 raise;
 END;
 --Récupération de la période du mois de paie issu de la table CAL (TGE_REF_PER)
 BEGIN
 SELECT TO_DATE(DATE_DEBUT_MOIS,'yyyymmdd'),
 TO_DATE(DATE_FIN_MOIS,'yyyymmdd')
 INTO w_deb_paie_prec,
 w_fin_paie_prec
 FROM TGE_REF_PER
 WHERE numpac       = p_numpac
 AND PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_MAIN ERR : Erreurs de configuration des periodes de paie M-1 dans TGE_REF_PER : NUMPAC = ''' || p_numpac || ''' AND PERIODEENCOURS = ''' || p_periode_paie || '''');
 raise;
 END;
 --Alimentation de la table temporaire
 TGE_ALIM_PERIODE_INDIV_TEMP(id_trt, p_numpac, p_periode_paie, w_debut_paie, w_fin_paie, w_pacmat);
 --Nettoyage avant d'insérer dans TGE_PERIODE_RECUEIL_PAIEZAD_R
 IF p_dosNumForSimu IS NULL THEN
 DELETE  TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT= ''''||id_CALCUL_TGE_PERIODE_RECUEIL||'''';
 req         := 'INSERT  INTO TGE_PERIODE_RECUEIL_PAIEZAD_R ';
 req         := req||'SELECT '||''''||id_CALCUL_TGE_PERIODE_RECUEIL||'''' || ' ,TGE_PERIODE_RECUEIL_PAIEZAD.* FROM TGE_PERIODE_RECUEIL_PAIEZAD ';
 req         := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req         := req||' AND MOIS_PAIE = '''||p_periode_paie||'''';
 IF w_pacmat IS NOT NULL THEN
 req       := req||' AND PACMAT = '''||w_pacmat||'''';
 END IF;
 EXECUTE_IMMEDIATE_STRING ( req,0);
 END IF;
 --Nettoyage avant d'insérer dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'DELETE FROM ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' WHERE NUMPAC = '''||p_numpac||'''';
 req := req||' AND MOIS_PAIE >= '''||p_periode_paie||'''';
 IF w_pacmat IS NOT NULL THEN
 req := req||' AND PACMAT = '''||w_pacmat||'''';
 END IF;
 IF p_dosNumForSimu IS NOT NULL THEN
 req := req||' AND DOS_NUM = '||p_dosNumForSimu;
 END IF;
 EXECUTE_IMMEDIATE_STRING ( req,0);
 --Insertion des données dans TGE_PERIODE_RECUEIL_PAIEZAD
 req := 'INSERT INTO ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, on alimente la table SIMU
 req := req||'SIMU_TGE_PERIODE_RECUEIL_PZAD';
 ELSE
 req := req||'TGE_PERIODE_RECUEIL_PAIEZAD';
 END IF;
 req := req||' (';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||'    DOS_NUM,';
 END IF;
 req := req||'    NUMPAC,';
 req := req||'    MOIS_PAIE,';
 req := req||'    PAIEZAD,';
 req := req||'    PACMAT,';
 req := req||'    RETRO_GC,';
 req := req||'    DEBUT_PERIODE_PAIE,';
 req := req||'    FIN_PERIODE_PAIE,';
 req := req||'    DEBUT_PERIODE_RECUEIL,';
 req := req||'    FIN_PERIODE_RECUEIL,';
 req := req||'    ENTREE,';
 req := req||'    SORTIE,';
 req := req||'    DEBUT_PER_RECUEIL_RETRO,';
 req := req||'    FIN_PER_RECUEIL_RETRO,';
 req := req||'    DEPART_SUSPENSION,';
 req := req||'    RETOUR_SUSPENSION,';
 req := req||'    DEBUT_PER_GENERATION_HP,';
 req := req||'    FIN_PER_GENERATION_HP';
 req := req||'  )';
 req := req||'SELECT ';
 IF p_dosNumForSimu IS NOT NULL THEN
 -- Si un dos_num est passé en paramètre, il faut alimenter la colonne DOS_NUM
 req := req||p_dosNumForSimu||',';
 END IF;
 req := req||'  NUMPAC,';
 req := req||''''||p_periode_paie||''',';
 req := req||'  PAIEZAD,';
 req := req||'  PACMAT,';
 req := req||'  RETRO_GC,';
 req := req||'TO_DATE('||TO_CHAR(w_debut_paie,'yyyymmdd')||',''yyyymmdd''),';
 req := req||'TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd''),';
 req := req||'  debut_recueil,';
 req := req||'  fin_recueil,';
 req := req||'  debut_situ,';
 req := req||'  CASE';
 req := req||'    WHEN fin_situ > TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'      THEN TO_DATE(''31.12.2099'',''dd.mm.yyyy'')';
 req := req||'    ELSE fin_situ';
 req := req||'  END AS fin_situation,';
 req := req||'TO_DATE('||TO_CHAR(w_debut_recueil_retro,'yyyymmdd')||',''yyyymmdd''),';
 req := req||'TO_DATE('||TO_CHAR(w_fin_recueil_retro,'yyyymmdd')||',''yyyymmdd''),';
 req := req||'  DEPART_SUSP,';
 req := req||'  RETOUR_SUSP,';
 req := req||'  CASE';
 req := req||'    WHEN SORTIE_PRECEDENTE BETWEEN TO_DATE('||TO_CHAR(w_debut_paie,'yyyymmdd')||',''yyyymmdd'') AND TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'      THEN debut_situ';
 req := req||'    WHEN debut_recueil IS NOT NULL';
 req := req||'      THEN TRUNC(TRUNC(debut_recueil,''MONTH''),''DAY'')';
 req := req||'    WHEN debut_recueil IS NULL';
 req := req||'      AND entree       IS NOT NULL';
 req := req||'      AND entree         <= TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'      AND sortie        IS NOT NULL';
 req := req||'      AND sortie         >= dt_recueil_deb';
 req := req||'      THEN TO_DATE('||TO_CHAR(w_debut_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'    ELSE NULL';
 req := req||'  END AS debut_HP ,';
 req := req||'  CASE';
 req := req||'      WHEN fin_recueil IS NOT NULL';
 req := req||'        THEN LEAST(TRUNC(LAST_DAY(TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')),''DAY'')+6,NVL(ENTREE_SUIVANTE,TRUNC(LAST_DAY(TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')),''DAY'')+6))';
 req := req||'      WHEN fin_recueil IS NULL';
 req := req||'        AND entree     IS NOT NULL';
 req := req||'        AND entree       <= TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'        AND sortie      IS NOT NULL';
 req := req||'        AND sortie       >= dt_recueil_deb';
 req := req||'        THEN TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'      ELSE NULL';
 req := req||'    END AS fin_HP';
 req := req||'  FROM';
 req := req||'    (SELECT lead(ENTREE,1) over(partition BY NUMPAC,PACMAT order by ENTREE)-1 ENTREE_SUIVANTE,';
 req := req||'      lag(SORTIE,1) over(partition BY NUMPAC,PACMAT order by SORTIE) SORTIE_PRECEDENTE,';
 req := req||'      NUMPAC,';
 req := req||'      PACMAT,';
 req := req||'      PAIEZAD,';
 req := req||'      RETRO_GC,';
 req := req||'      IS_RETRO,';
 req := req||'      DEBUT_FORCEE,';
 req := req||'      FIN_FORCEE,';
 req := req||'      ENTREE,';
 req := req||'      SORTIE,';
 req := req||'      RETOUR_SUSP,';
 req := req||'      DEPART_SUSP,';
 req := req||'      DEBUT_SITU,';
 req := req||'      FIN_SITU,';
 req := req||'      debut_recueil,';
 req := req||'      DT_RECUEIL_DEB,';
 req := req||'      DT_RECUEIL_FIN,';
 req := req||'      CASE';
 req := req||'        WHEN fin_forcee IS NOT NULL';
 req := req||'          THEN fin_forcee';
 req := req||'        WHEN debut_recueil IS NULL';
 req := req||'          THEN NULL';
 req := req||'        WHEN sortie      IS NULL';
 req := req||'          OR sortie      > TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'')';
 req := req||'          THEN dt_recueil_fin';
 req := req||'        WHEN sortie      >= dt_recueil_deb';
 req := req||'          THEN sortie ';
 req := req||'        ELSE NULL';
 req := req||'      END AS fin_recueil';
 req := req||'    FROM';
 req := req||'      (SELECT NUMPAC,';
 req := req||'        PACMAT,';
 req := req||'        PAIEZAD,';
 req := req||'        RETRO_GC,';
 req := req||'        IS_RETRO,';
 req := req||'        DEBUT_FORCEE,';
 req := req||'        FIN_FORCEE,';
 req := req||'        ENTREE,';
 req := req||'        SORTIE,';
 req := req||'        RETOUR_SUSP,';
 req := req||'        DEPART_SUSP,';
 req := req||'        DEBUT_SITU,';
 req := req||'        FIN_SITU,';
 req := req||'        DT_RECUEIL_DEB,';
 req := req||'        DT_RECUEIL_FIN,';
 req := req||'        CASE';
 req := req||'          WHEN debut_forcee IS NOT NULL';
 req := req||'            THEN debut_forcee';
 req := req||'          WHEN entree IS NULL ';
 req := req||'            THEN null';
 req := req||'          WHEN entree        <= dt_recueil_fin';
 req := req||'            AND (sortie IS NULL';
 req := req||'            OR (sortie        >= dt_recueil_deb';
 req := req||'            AND (sortie > TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd'') ';
 req := req||'            	OR NOT EXISTS (SELECT 1 FROM TGE_PERIODE_RECUEIL_PAIEZAD rec_ind WHERE rec_ind.NUMPAC = rec_temp.numpac AND rec_ind.PAIEZAD = rec_temp.paiezad AND rec_ind.FIN_PERIODE_RECUEIL >= rec_temp.sortie) ) )) ';
 
 req := req||'            THEN GREATEST(entree, NVL(dt_recueil_deb, entree))';
 req := req||'          WHEN (sortie        IS NOT NULL';
 req := req||'            AND entree         > dt_recueil_fin';
 req := req||'            AND sortie        <= TO_DATE('||TO_CHAR(w_fin_paie,'yyyymmdd')||',''yyyymmdd''))';
 req := req||'            THEN GREATEST(entree, NVL(dt_recueil_deb, entree))';
 req := req||'          ELSE NULL';
 req := req||'        END AS debut_recueil';
 req := req||'      FROM TGE_PERIODE_INDIV_TEMP rec_temp';
 req := req||'      WHERE NUMPAC = '''||p_numpac||'''';
 req := req||'      )';
 req := req||'    )';
 EXECUTE_IMMEDIATE_STRING  (req,0);
 --Mise à jour des incidents qui on changé période de paie
 IF p_dosNumForSimu IS NULL THEN
 req              := 'UPDATE TGE_INCIDENTS_PAIE SET PERIODE = TO_DATE(''01.01.1900'', ''dd.MM.yyyy'') ';
 req              := req||' WHERE ID IN ( ';
 req              := req||' SELECT I.ID FROM TGE_INCIDENTS_PAIE I  ';
 req              := req||' INNER JOIN TGE_PERIODE_RECUEIL_PAIEZAD P  ';
 req              := req||' ON P.NUMPAC = I.NUMPAC ';
 req              := req||' AND P.PAIEZAD = I.PAIEZAD ';
 req              := req||' AND I.DATE_EFFET BETWEEN P.DEBUT_PERIODE_RECUEIL AND P.FIN_PERIODE_RECUEIL ';
 req              := req||' LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD_R R  ';
 req              := req||' ON P. NUMPAC = R.NUMPAC  ';
 req              := req||' AND P.MOIS_PAIE = R.MOIS_PAIE ';
 req              := req||' AND P.PAIEZAD = R.PAIEZAD ';
 req              := req||' AND P.PACMAT = R.PACMAT ';
 req              := req||' AND R.ID_TRT = '''||id_CALCUL_TGE_PERIODE_RECUEIL||'''';
 
 req              := req||' WHERE I.NUMPAC = '''||p_numpac||''' ';
 req              := req||' AND (P.MOIS_PAIE = '''||p_periode_paie||''' OR R.MOIS_PAIE = '''||p_periode_paie||''') ';
 IF w_pacmat      IS NOT NULL THEN
 req            := req||' AND (P.PACMAT = '''||w_pacmat||''' OR R.PACMAT = '''||w_pacmat||''') ';
 END IF;
 req := req||' AND (P.MOIS_PAIE IS NULL OR R.MOIS_PAIE IS NULL ';
 req := req||' OR P.DEBUT_PERIODE_RECUEIL != R.DEBUT_PERIODE_RECUEIL  ';
 req := req||' OR P.FIN_PERIODE_RECUEIL != R.FIN_PERIODE_RECUEIL)) ';
 EXECUTE_IMMEDIATE_STRING(req, 0);
 DELETE  TGE_PERIODE_RECUEIL_PAIEZAD_R WHERE ID_TRT= id_CALCUL_TGE_PERIODE_RECUEIL;
 END IF;
 END IF;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE_ALIM_PERIODE_INDIV_MAIN '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_MAIN KO : '||w_err);
 END TGE_ALIM_PERIODE_INDIV_MAIN;
##
TAG_CHARSET=@€éèç
##
TGE_ALIM_PERIODE_INDIV_TEMP
=SQL=
create or replace PROCEDURE TGE_ALIM_PERIODE_INDIV_TEMP( p_id           IN NUMBER, p_numpac       IN VARCHAR2,
 p_periode_paie IN VARCHAR2,
 p_debut_paie   IN DATE,
 p_fin_paie     IN DATE,
 p_pacmat       IN VARCHAR2 )
 AS
 w_err VARCHAR2(2000);
 req CLOB;
 w_Y326                 VARCHAR2(80 BYTE);
 w_Y327                 VARCHAR2(80 BYTE);
 w_A302                 VARCHAR2(80 BYTE);
 w_A301                 VARCHAR2(80 BYTE);
 w_A520                 VARCHAR2(80 BYTE);
 w_A521                 VARCHAR2(80 BYTE);
 w_A523                 VARCHAR2(80 BYTE);
 w_debut_paie_precedent DATE;
 periode_paie_en_cours  VARCHAR2(6);
 periode_deb_retro      VARCHAR2(6);
 optionEcp      VARCHAR2(1);
 
 A01_NOM_ELT    VARCHAR2(20);
 A02_NOM_ELT    VARCHAR2(20);
 A03_NOM_ELT    VARCHAR2(20);
 requeteMappingPivot  VARCHAR2(3000);
 
 BEGIN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP début (' || p_id || ',' || p_numpac || ',' || p_periode_paie || ',' || p_fin_paie || ',' || p_pacmat || ')');
 BEGIN
 --Alimentation des informations sur le pac
 SELECT PERIODEENCOURS, DEB_RETRO, OPTION_ECP
 INTO periode_paie_en_cours, periode_deb_retro, optionEcp
 FROM TGE_REF_PAC
 WHERE NUMPAC = p_numpac;
 --- Calcul des noms d'elements depuis tge_map_arg_elt
 select A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 into   A01_NOM_ELT, A02_NOM_ELT, A03_NOM_ELT
 from (
 SELECT NOM_ARG,NOM_ELT FROM TABLE(GET_TGE_MAP_ARG_ELT_BY_NUMPAC(p_numpac))
 )
 pivot (MAX(NOM_ELT) AS NOM_ELT FOR (NOM_ARG) in ('A01' AS A01,'A02' AS A02,'A03' AS A03));
 
 
 --Alimentation des informations sur le mapping des données
 requeteMappingPivot :='SELECT
 Y326_DONNEE ,
 Y327_DONNEE ,
 A302_DONNEE ,
 A301_DONNEE ,
 A520_DONNEE ,
 A521_DONNEE ,
 A523_DONNEE
 FROM (
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = '''|| p_numpac ||'''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 UNION ALL
 SELECT DISTINCT c.element,
 NVL(REPLACE(REPLACE(c.trtparticulier, ''$DONNEEGXP'', ''$TABLE.'' || c.donneegxp), ''$TABLE'', c.tablegxp), c.tablegxp || ''.'' || c.donneegxp) AS DONNEEGXP
 FROM tge_ref_mapdo c
 WHERE C.numpac = ''*''
 AND c.element IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 AND (c.ELEMENT) NOT IN
 (
 SELECT a.element
 FROM tge_ref_mapdo a
 WHERE a.numpac = '''|| p_numpac ||'''
 AND A.ELEMENT IN (''Y326'',''Y327'',''A302'',''A301'','''||A01_NOM_ELT||''','''||A02_NOM_ELT||''','''|| A03_NOM_ELT||''')
 )
 ) pivot ( MAX(DONNEEGXP) AS DONNEE FOR (element)
 IN(''Y326'' AS Y326 ,''Y327'' AS Y327 ,''A302'' AS A302 ,''A301'' AS A301 ,'''||A01_NOM_ELT||''' AS A520 ,'''||A02_NOM_ELT||''' AS A521,'''||A03_NOM_ELT||''' AS A523))
 ';
 EXECUTE IMMEDIATE
 requeteMappingPivot
 INTO w_Y326,
 w_Y327,
 w_A302,
 w_A301,
 w_A520,
 w_A521,
 w_A523;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP ERR : Erreurs de configuration de TGE_REF_MAPDO : NUMPAC = ''' || p_numpac || ''' AND ELEMENT in (''Y326'',''Y327'',''A302'',''A301'',''A520'',''A521'',''A523'')');
 raise;
 END;
 --Récupération de la période du mois de paie issu de la table CAL (TGE_REF_PER)
 BEGIN
 SELECT TO_DATE(DATE_DEBUT_MOIS,'yyyymmdd')
 INTO w_debut_paie_precedent
 FROM TGE_REF_PER
 WHERE numpac       = p_numpac
 AND PERIODEENCOURS = TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP ERR : Erreurs de configuration des periodes de paie M-1 dans TGE_REF_PER : NUMPAC = ''' || p_numpac || ''' AND PERIODEENCOURS = ' || TO_CHAR(ADD_MONTHS(TO_DATE(p_periode_paie,'yyyymm'),-1),'YYYYMM'));
 raise;
 END;
 DELETE FROM TGE_PERIODE_INDIV_TEMP WHERE NUMPAC = p_numpac;
 req := 'insert into TGE_PERIODE_INDIV_TEMP (numpac,pacmat,paiezad,is_retro,debut_forcee,fin_forcee,entree,sortie,RETOUR_SUSP,DEPART_SUSP,debut_situ,fin_situ,dt_recueil_deb,dt_recueil_fin,retro_gc)
 
 SELECT l.numpac, l.pacmat, l.PAIEZAD, l.is_retro, l.debut_forcee, l.fin_forcee, l.entree, l.sortie, l.retour_susp, l.depart_susp, l.debut_situ, l.fin_situ, l.DT_RECUEIL_DEB, l.DT_RECUEIL_FIN, l.retro_gc from (
 SELECT
 dach_tmp_sus.numpac,
 dach_tmp_sus.pacmat,
 dach_tmp_sus.PAIEZAD,
 dach_tmp_sus.is_retro,
 dach_tmp_sus.debut_forcee,
 dach_tmp_sus.fin_forcee,
 
 greatest (dach_tmp_sus.debut_situ,
 case when ' || w_A302 || ' is null
 then
 case when DIC_ADM_CONTRAT_HISTO.DSFSUS is not null and DIC_ADM_CONTRAT_HISTO.DSFSUS < to_date(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'') and DIC_ADM_CONTRAT_HISTO.DSFSUS < nvl(dach_tmp_sus.fin_situ,to_date(''20991231'',''yyyymmdd'') )
 then DIC_ADM_CONTRAT_HISTO.DSFSUS + 1
 else dach_tmp_sus.debut_situ
 end
 else case when ' || w_A302 || ' < nvl(dach_tmp_sus.fin_situ,to_date(''20991231'',''yyyymmdd'') ) AND ' || w_A302 || ' < to_date(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'') then ' || w_A302 || ' + 1  else dach_tmp_sus.debut_situ end
 end ) as entree,
 CASE WHEN ' || w_A302 || ' < to_date(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'') then dach_tmp_sus.fin_situ else LEAST(TO_DATE(NVL(TO_CHAR(dach_tmp_sus.fin_situ,''dd.mm.yyyy''),TO_CHAR(' || w_A301 || '-1,''dd.mm.yyyy'')),''dd.mm.yyyy''),TO_DATE(NVL(TO_CHAR(' || w_A301 || '-1,''dd.mm.yyyy''),TO_CHAR(dach_tmp_sus.fin_situ,''dd.mm.yyyy'')),''dd.mm.yyyy'')) END as sortie ,'
 || w_A302 || '+1 as retour_susp,  ' --pseudo date de retour de suspension / réembaucher
 || w_A301 || '-1 as depart_susp,  ' --pseudo date de départ en suspension
 || '
 dach_tmp_sus.debut_situ,
 dach_tmp_sus.fin_situ,
 dach_tmp_sus.DT_RECUEIL_DEB,
 dach_tmp_sus.DT_RECUEIL_FIN,
 dach_tmp_sus.retro_gc,
 dach_tmp_sus.NUMCNT,dach_tmp_sus.DATE_EFF,dach_tmp_sus.DSFCN,dach_tmp_sus.DSDCN,
 ' || w_A301 || ' AS sous_DSA301,
 ' || w_A302 || ' AS sous_DSA302
 FROM (
 select VR.numpac,VR.pacmat,VR.PAIEZAD,VR.NUMCNT,VR.DATE_EFF,VR.DSFCN,VR.DSDCN,VR.is_retro,VR.debut_forcee,VR.fin_forcee,VR.debut_situ,VR.fin_situ,
 CASE
 WHEN TO_CHAR(VR.debut_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.debut_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_DEB,
 CASE
 WHEN TO_CHAR(VR.fin_forcee,''YYYYMMDD'') IS NOT NULL
 THEN VR.fin_forcee
 ELSE to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 37, 8), ''DDMMYYYY'')
 END AS DT_RECUEIL_FIN,  ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 req := req || ' TGE_PERIODE_RECUEIL_PAIEZAD.retro_gc,  ';
 ELSE
 req := req || ' null as retro_gc, ';
 END IF;
 req := req || '(
 select max(dach_tmp.date_eff) from dic_adm_contrat_histo dach_tmp
 where dach_tmp.za962 is not null
 and dach_tmp.dsa301-1 <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD''))
 and nvl(dach_tmp.dsa302, dach_tmp.dsfsus)+1 >= to_date(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 29, 8), ''DDMMYYYY'')
 and dach_tmp.date_eff <= last_day(to_date(''' || p_periode_paie || '''||''01'',''YYYYMMDD'')) + 1
 and dach_tmp.numpac = VR.NUMPAC
 and dach_tmp.pacmat = VR.PACMAT
 and dach_tmp.paiezad = VR.PAIEZAD
 ) as date_eff_sus
 
 from (
 select numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE,MIN(NUMERO_DE_LIGNE) as min_NUMERO_DE_LIGNE from
 (SELECT CO.* FROM (select
 SITUATION_PAIE.numpac as numpac,
 SITUATION_PAIE.pacmat as pacmat,
 SITUATION_PAIE.PAIEZAD as paiezad,
 DIC_ADM_CONTRAT.DSDCN                 AS DSDCN,
 DIC_ADM_CONTRAT.DSFCN                 AS DSFCN,
 DIC_ADM_CONTRAT_HISTO.NUMCNT          AS NUMCNT,
 DIC_ADM_CONTRAT_HISTO.DATE_EFF        AS DATE_EFF, ';
 IF periode_deb_retro IS NULL OR periode_deb_retro > periode_paie_en_cours THEN
 req := req || ' CASE
 WHEN RETRO_ENTREE = ''O''
 AND RETRO_SORTIE   = ''O''
 THEN ''O''
 WHEN RETRO_ENTREE = ''O''
 THEN ''E''
 WHEN RETRO_SORTIE = ''O''
 THEN ''S''
 ELSE ''N''
 END AS is_retro, ';
 ELSE
 req := req || ' ''N'' as is_retro, ';
 END IF;
 req := req || w_Y326 || ' as debut_forcee,
 ' || w_Y327 || ' as fin_forcee,
 SITUATION_PAIE.DSDSC as debut_situ,
 SITUATION_PAIE.DSFSC as fin_situ,
 ' || w_A520 || ' as activite,
 ' || w_A521 || ' as etablissement,
 ' || w_A523 || ' as categorie
 FROM SITUATION_PAIE
 left join DIC_PERIODES_RECUEIL_HIS
 on DIC_PERIODES_RECUEIL_HIS.numpac = SITUATION_PAIE.numpac
 AND DIC_PERIODES_RECUEIL_HIS.paiezad = SITUATION_PAIE.paiezad
 AND DIC_PERIODES_RECUEIL_HIS.PRH_MOIS_PAIE = ''' || p_periode_paie || '''
 inner join DIC_ADM_CONTRAT
 on DIC_ADM_CONTRAT.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT.PACMAT=SITUATION_PAIE.PACMAT
 AND DIC_ADM_CONTRAT.NUMCNT=SITUATION_PAIE.NUMCNT
 left join ( SELECT  DIC_ADM_CONTRAT_HISTO.*
 FROM (
 SELECT NUMPAC, paiezad, PACMAT, MAX(DATE_EFF) as max_date_eff
 FROM DIC_ADM_CONTRAT_HISTO
 WHERE DATE_EFF <= TO_DATE(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'')
 AND NUMPAC = ''' || p_numpac || ''' ';
 IF p_pacmat IS NOT NULL THEN
 req := req || ' AND PACMAT = ''' || p_pacmat || ''' ';
 END IF;
 req := req || ' GROUP BY  NUMPAC, paiezad, PACMAT) C
 inner join DIC_ADM_CONTRAT_HISTO on
 DIC_ADM_CONTRAT_HISTO.NUMPAC = C.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = C.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT = C.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.DATE_EFF = C.max_date_eff
 ) DIC_ADM_CONTRAT_HISTO
 on DIC_ADM_CONTRAT_HISTO.NUMCNT=SITUATION_PAIE.NUMCNT
 AND DIC_ADM_CONTRAT_HISTO.NUMPAC=SITUATION_PAIE.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.paiezad = SITUATION_PAIE.paiezad
 AND DIC_ADM_CONTRAT_HISTO.PACMAT=SITUATION_PAIE.PACMAT
 WHERE (DIC_ADM_CONTRAT_HISTO.ZA750 IS NULL OR DIC_ADM_CONTRAT_HISTO.DRPAI2 != ''B'')
 AND (DIC_ADM_CONTRAT.NATCOL IS NULL OR DIC_ADM_CONTRAT.NATCOL in (''SAL'',''STA''))
 AND NVL(SITUATION_PAIE.DSFSC,TO_DATE(''20990101'',''YYYYMMDD'')) >= TO_DATE(''' || TO_CHAR(w_debut_paie_precedent,'yyyymmdd') || ''',''yyyymmdd'')
 AND SITUATION_PAIE.numpac = ''' || p_numpac || ''' ';
 IF p_pacmat IS NOT NULL THEN
 req := req || ' AND SITUATION_PAIE.PACMAT = ''' || p_pacmat || ''' ';
 END IF;
 req := req || '    AND NVL(DIC_ADM_CONTRAT_HISTO.DATE_EFF,SITUATION_PAIE.DSDSC) <= TO_DATE(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'')
 ) CO
 ) COM,TGE_REF_VRVAL
 WHERE TGE_REF_VRVAL.CODE_TABLE = ''LTP''
 AND TGE_REF_VRVAL.NUMERO_DE_PAC = ''' || p_numpac || '''
 AND SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT, 19 , 6 ) = SUBSTR(''' || p_periode_paie || ''',5, 2)||SUBSTR(''' || p_periode_paie || ''',1, 4) ';
 
 IF optionEcp IS NOT NULL AND optionEcp = 'P' THEN
 req := req || '
 AND LPAD(COM.activite,2) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2)
 AND LPAD(COM.etablissement,5) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5)
 AND LPAD(COM.categorie,2) BETWEEN LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2) AND LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2)
 ';
 ELSE
 req := req || '
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.activite,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,1 ,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,3,2),2) )  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.etablissement,5),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,5 ,5),5), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,10,5),5))  = ''TRUE''
 AND IS_BETWEEN_NLS_FRENCH(LPAD(COM.categorie,2),LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,15,2),2), LPAD(SUBSTR(TGE_REF_VRVAL.ENREGISTREMENT,17,2),2) )  = ''TRUE''
 ';
 END IF;
 
 req := req || '
 GROUP BY numpac,pacmat,PAIEZAD,NUMCNT,DATE_EFF,DSFCN,DSDCN,is_retro,debut_forcee,fin_forcee,debut_situ,fin_situ,NUMERO_DE_PAC,CODE_TABLE
 ) VR inner join TGE_REF_VRVAL on TGE_REF_VRVAL.NUMERO_DE_PAC = VR.NUMERO_DE_PAC AND TGE_REF_VRVAL.CODE_TABLE = VR.CODE_TABLE AND TGE_REF_VRVAL.NUMERO_DE_LIGNE = VR.min_NUMERO_DE_LIGNE
 LEFT JOIN TGE_PERIODE_RECUEIL_PAIEZAD
 ON TGE_PERIODE_RECUEIL_PAIEZAD.NUMPAC      = VR.NUMPAC
 AND TGE_PERIODE_RECUEIL_PAIEZAD.PACMAT     = VR.PACMAT
 AND TGE_PERIODE_RECUEIL_PAIEZAD.PAIEZAD    = VR.PAIEZAD
 AND TGE_PERIODE_RECUEIL_PAIEZAD.MOIS_PAIE  = '''|| p_periode_paie ||'''
 
 ) dach_tmp_sus
 LEFT JOIN DIC_ADM_CONTRAT_HISTO DIC_ADM_CONTRAT_HISTO ON
 DIC_ADM_CONTRAT_HISTO.numpac = dach_tmp_sus.NUMPAC
 AND DIC_ADM_CONTRAT_HISTO.pacmat = dach_tmp_sus.PACMAT
 AND DIC_ADM_CONTRAT_HISTO.paiezad = dach_tmp_sus.PAIEZAD
 AND DIC_ADM_CONTRAT_HISTO.date_eff = dach_tmp_sus.date_eff_sus
 ) l
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT P
 ON l.NUMPAC = P.NUMPAC
 AND l.PACMAT = P.PACMAT
 AND l.NUMCNT = P.NUMCNT
 LEFT JOIN PHOTO_DIC_ADM_CONTRAT_HISTO PH
 ON l.NUMPAC = PH.NUMPAC
 AND l.PACMAT = PH.PACMAT
 AND l.NUMCNT = PH.NUMCNT
 AND l.DATE_EFF = PH.DATE_EFF
 AND l.PAIEZAD = PH.PAIEZAD
 WHERE P.PACMAT IS NULL
 OR l.DSFCN IS NULL
 OR l.DSFCN > TO_DATE(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'')
 OR NVL(P.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSDCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(P.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.DSFCN, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR PH.PACMAT IS NULL
 OR l.sous_DSA301 IS NULL
 OR l.sous_DSA301 > TO_DATE(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'')
 OR NVL(PH.DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA302, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR NVL(PH.DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy'')) != NVL(l.sous_DSA301, TO_DATE(''01.01.1900'', ''dd.MM.yyyy''))
 OR TO_DATE(''' || TO_CHAR(p_debut_paie,'yyyymmdd') || ''',''yyyymmdd'') BETWEEN l.ENTREE AND l.SORTIE
 OR l.ENTREE BETWEEN TO_DATE(''' || TO_CHAR(p_debut_paie,'yyyymmdd') || ''',''yyyymmdd'') AND  TO_DATE(''' || TO_CHAR(p_fin_paie,'yyyymmdd') || ''',''yyyymmdd'') ';
 
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','TGE_ALIM_PERIODE_INDIV_TEMP EXECUTE ');
 EXECUTE_IMMEDIATE_STRING( req,0);
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP OK');
 EXCEPTION
 WHEN OTHERS THEN
 w_err := SQLCODE;
 w_err := 'TGE_ALIM_PERIODE_INDIV_TEMP '||w_err|| sqlerrm;
 TGE_IMPORT_AVANCEMENT_proc('TGE_ALIM_PER','fin TGE_ALIM_PERIODE_INDIV_TEMP KO ' || w_err);
 raise;
 END TGE_ALIM_PERIODE_INDIV_TEMP;
##
TGE_CLOTURE
=SQL=
create or replace PROCEDURE TGE_CLOTURE ( p_id in number, P_NUMPAC IN VARCHAR2 ) AS /********************************************************************************
 Version     : V5.05.000
 *********************************************************************************/
 P_PERIODEENCOURS TGE_REF_PAC.PERIODEENCOURS%type;
 p_dtdebMois varchar2(8);
 p_finMois varchar2(8);
 p_histoIP varchar2(1);
 
 P_DEB_RETRO TGE_REF_PAC.DEB_RETRO%type;
 P_DEB_HISTO_RETRO TGE_REF_PAC.DEB_HISTO_RETRO%type;
 P_NB_MOIS_RETRO TGE_REF_PAC.NB_MOIS_RETRO%type;
 P_PERIDOE_HISTO_LIMITE TGE_REF_PAC.PERIODEENCOURS%type;
 w_per   VARCHAR2(6);
 w_req   CLOB;
 isRetro number :=0;
 BEGIN
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin)','Début de la clôture du numpac  '||P_NUMPAC);
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Recup Periode + infos Rétro)','Récupération de la période en cours,date début Rétro, date début historisation Rétro et nombre de mois Rétro à partir de TGE_REF_PAC pour le numpac : '||P_NUMPAC);
 select PERIODEENCOURS ,DEB_RETRO,DEB_HISTO_RETRO,NB_MOIS_RETRO ,to_char( add_months(to_date(PERIODEENCOURS,'yyyymm'),(-1*nvl(NB_MOIS_RETRO,1))+1),'YYYYMM') PERIDOE_HISTO_LIMITE
 into P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO ,P_PERIDOE_HISTO_LIMITE
 from TGE_REF_PAC where numpac=p_numpac;
 
 IF P_DEB_RETRO is not null  AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_HISTO_RETRO,'YYYYMM') THEN
 w_per := P_PERIDOE_HISTO_LIMITE;
 isRetro :=1;
 ELSE
 w_per := P_PERIODEENCOURS;
 isRetro:=0;
 END IF;
 
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la date de début et de fin du mois pour le numpac '||P_NUMPAC || '  et la periode '|| p_PERIODEENCOURS );
 select DATE_DEBUT_MOIS,DATE_FIN_MOIS into p_dtdebMois,p_finMois from TGE_REF_PER where numpac=p_numpac and periodeencours=p_PERIODEENCOURS;
 --Purge et Historisation de dif_FSED
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Deb PURGE_HISTO_DIF_FSED)','Début PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 PURGE_HISTO_DIF_FSED ( p_id, P_NUMPAC,P_PERIODEENCOURS,P_DEB_RETRO,P_DEB_HISTO_RETRO,P_NB_MOIS_RETRO,P_PERIDOE_HISTO_LIMITE);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Fin PURGE_HISTO_DIF_FSED)','Fin PURGE_HISTO_DIF_FSED pour le numpac  '||P_NUMPAC );
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ',' début sauvegarde DIF_FSED'  );
 BEGIN
 w_req :='Create TABLE DIF_FSED_'||P_PERIODEENCOURS||' as select * from DIF_FSED '  ;
 execute_immediate_string (w_req,0);
 EXCEPTION 
   WHEN OTHERS THEN
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (SAV DIF_FSED) ','la table DIF_FSED_'||P_PERIODEENCOURS||' existe déja ' );
 END ;


 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (DEBUT Supp DIF_FSED)','DEBUT Purge de la table DIF_FSED ');
 FOR C IN
 (SELECT DISTINCT to_char(id_trt) as trt FROM DIF_FSED WHERE NUMPAC =p_numpac
 )
 LOOP
 w_req :='ALTER TABLE DIF_FSED DROP PARTITION ID_'||C.trt ;
 BEGIN
 execute_immediate_string (w_req,0);
 EXCEPTION 
 when others then 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','ERREUR lors de la suppresstion partition ID_'||C.trt||' de DIF_FSED '||SQLCODE||'-'||SQLERRM);
 end ;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE ( Supp partition DIF_FSED)','suppression partition ID_'||C.trt||' de DIF_FSED ');
 END LOOP;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (FIN Supp DIF_FSED)','FIN Purge de la table DIF_FSED');
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert GAP TRT)','Préparation du traitement GAP_TRT pour le  '||P_NUMPAC);
 --Ajout  dans GAP_TRT
 insert into GAP_TRT (ID_TRT,NUMPAC,PERIODE_PAIE,NUMERO_ECHANGE,MODELE,NATURE,DATE_DEBUT_PAIE,DATE_FIN_PAIE,WORKFLOW_ID,DATE_PREVUE_TRT,DATE_PLANIF_TRT,DATE_DEBUT_TRT,INFO)
 values
 (p_id,P_NUMPAC,p_PERIODEENCOURS,'0000','ALP','CLOTURE',p_dtdebMois,p_finMois,'TGEPAY'||P_NUMPAC||'PACGXP'||p_PERIODEENCOURS||'0000',sysdate,sysdate,sysdate,'CLOTURE');
 
 --GAP_TRT_SUIVI
 FSED.insert_gap_trt_suivi(p_id,'PREPA_CLOTURE',null,'BATCH','CL');
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Supp RELIQ)',' Début de la purge des tables  TGE_RELIQ_INCIDENTS_PAIE, TGE_RELIQ_DONNEES_PAIE, TGE_RELIQ_ELEMENTS_PAIE, TGE_RELIQ_IMPUTATIONS,TGE_RELIQ_PACMAT_TORESEND pour le numpac  '||P_NUMPAC);
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 DELETE FROM TGE_RELIQ_INCIDENTS_PAIE  WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_DONNEES_PAIE    WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_ELEMENTS_PAIE   WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_IMPUTATIONS     WHERE NUMPAC = P_NUMPAC;
 DELETE FROM TGE_RELIQ_PACMAT_TORESEND WHERE NUMPAC = P_NUMPAC;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Supp RELIQ)','Fin de de la purge des tables RELIQ pour le  numpac : '||P_NUMPAC);
 --FIN  DIT 37805
 
 -- Mise à jour secupacmat
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Update SECUPACMAT)','Deuxième période de recyclage : Mise à jour de la table SECUPACMAT pour le numpac : '||p_numpac);
 update SECUPACMAT set PERIODE_RECYCLAGE=2 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_2',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant insert LISTE MAT)','Préparation de la liste des matricules');
 -- RSI  Le 20/02/2015 DIT 41197:EVOL: Ajout du type de paie 'GAPSELMA'
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,null from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and not exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- Le 25/04/2015 ajout des mal recyclés (colonne "TRAITE"='R')
 insert into GAP_TRT_LISTE_MAT select distinct  p_id,b.numpac,b.pacmat,'R' from (
 select distinct c.id_trt
 from TGE_SCHEMA_PRODUCTION a,GAP_TRT b,GAP_TRT_SUIVI c  where a.numpac=p_numpac and a.TYPE_PAIE in ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 and a.numpac=b.numpac and a.modele=b.modele and a.nature=b.nature and b.id_trt=c.id_trt and c.statut in ('PA','EX','DEMSEA') AND NVL(c.code_retour_zpp,'00')='00' and b.PERIODE_PAIE = p_PERIODEENCOURS  and b.numero_echange<>'0000') a, GAP_TRT_LISTE_MAT b where a.id_trt=b.id_trt
 and exists (select c.numpac,c.pacmat from GAP_RECYCL_MATRIC c where c.numpac=b.numpac and c.pacmat=b.pacmat ) ;
 -- photos
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant génération photo)','Début de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 tge_generation_photo(p_id,p_numpac,p_dtdebMois);
 FSED.insert_gap_trt_suivi(p_id,'PHOTO',null,'BATCH','CL');
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après génération photo)','Fin de la génération de la photo pour le numpac '||P_NUMPAC||'  à la date '||p_dtdebMois);
 
 
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 -- lecture de la valeur de HISTO_IP dans TGE_REF_PAC
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant lecture REF PER)','Récupération de la valeur de HISTO_IP dans TGE_REF_PAC pour le numpac '||P_NUMPAC );
 select nvl(HISTO_IP,'N') into p_histoIP from TGE_REF_PAC where NUMPAC = p_numpac;
 
 -- purge saisies quai
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS where numpac=p_numpac and to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'YYYYMM') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null );
 
 IF p_histoIP = 'N' THEN
 
 w_req :='DELETE FROM TGE_INCIDENTS_PAIE z WHERE z.numpac='''||p_numpac||''' AND  ';
 if isRetro=1 then
 w_req := w_req || ' ( z.PERIODE <greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req || ' ( z.PERIODE           <=to_date('''||w_per||''',''yyyymm'')';
 end if;
 w_req := w_req||')'||' AND (z.numpac,z.paiezad) IN (SELECT DISTINCT b.numpac,
 d.paiezad FROM GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d,TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt ='||p_id||' AND d.numpac =b.numpac AND d.pacmat =b.pacmat AND d.numpac  =t.numpac AND d.pacmat  =t.pacmat
 AND d.paiezad   =t.paiezad AND ';
 if isRetro=1 then
 w_req := w_req || ' to_date(t.MOIS_PAIE,''YYYYMM'') <= greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
  w_req := w_req ||' to_date(t.MOIS_PAIE,''YYYYMM'') = to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||' AND (z.date_effet <= t.FIN_PERIODE_RECUEIL OR z.TYPE_IP       = ''T'')AND b.traite      IS NULL)';
  FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge incidents )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_INCIDENTS_PAIE z
 set    ACTION_RETRO='H',ACTION_RETRO_DATE=null
 WHERE  z.numpac           =p_numpac
 AND z.PERIODE >to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm')
 AND z.PERIODE<=to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT b.numpac,
 d.paiezad
 FROM GAP_TRT_LISTE_MAT b,
 DIC_ADM_CONTRAT_SITU d,
 TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE b.id_trt     =p_id
 AND d.numpac       =b.numpac
 AND d.pacmat       =b.pacmat
 AND d.numpac       =t.numpac
 AND d.pacmat       =t.pacmat
 AND d.paiezad      =t.paiezad
 AND to_date(t.MOIS_PAIE,'yyyymm') = to_date(p_PERIODEENCOURS,'yyyymm')
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 AND b.traite      IS NULL
 );
 end if;
 END IF;
 
 w_req :='delete from TGE_DONNEES_PAIE where numpac='''||p_numpac||''' and ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||') and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null)';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge donnes )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_DONNEES_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 end if;
 w_req :='delete from TGE_ELEMENTS_PAIE where numpac='''||p_numpac||''' and  ' ;
 if isRetro=1 then
 w_req := w_req || '( to_date(PERIODE,''YYYYMM'') < greatest(to_date('''||P_PERIDOE_HISTO_LIMITE||''',''YYYYMM''),to_date(nvl('''||P_DEB_HISTO_RETRO||''',''209912''),''YYYYMM''))'||' OR DERNIER_CODE_OPE=''S''';
 else
 w_req := w_req ||' (  to_date(PERIODE,''YYYYMM'') <= to_date('''||p_PERIODEENCOURS||''',''YYYYMM'')';
 end if;
 w_req := w_req ||')  and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt='||p_id||
 ' and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null )';
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge elements )',w_req);
 execute_immediate_string (w_req,0);
 if isRetro=1 then
 update TGE_ELEMENTS_PAIE
 set    ACTION_RETRO ='H',
 ACTION_RETRO_DATE =null
 where numpac=p_numpac 
 and to_date(PERIODE,'YYYYMM')>to_date(P_PERIDOE_HISTO_LIMITE,'yyyymm') 
 AND to_date(PERIODE,'YYYYMM')<=to_date(p_PERIODEENCOURS,'yyyymm')
 and (numpac,paiezad) in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 END IF;
 delete from DELETED_PAIEZAD where numpac=p_numpac and DATE_SUPPRESSION<=add_months(to_date(p_PERIODEENCOURS,'yyyymm'),-1)  and (numpac,paiezad) not in (select distinct b.numpac,d.paiezad from GAP_TRT_LISTE_MAT b,DIC_ADM_CONTRAT_SITU d where b.id_trt=p_id
 and d.numpac=b.numpac and d.pacmat=b.pacmat and b.traite is null);
 
 -- purge saisies quai des matricules mal recyclés
 FSED.insert_gap_trt_suivi(p_id,'PURGE_QUAIS_RECY',null,'BATCH','CL');
 delete from TGE_IMPUTATIONS z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT max (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 IF p_histoIP='N' THEN
 DELETE
 FROM TGE_INCIDENTS_PAIE z
 WHERE z.numpac            =p_numpac
 AND (z.numpac,z.paiezad) IN
 (SELECT DISTINCT t.numpac,
 t.paiezad
 FROM TGE_PERIODE_RECUEIL_PAIEZAD t
 WHERE z.numpac     =t.numpac
 AND z.paiezad      =t.paiezad
 AND t.MOIS_PAIE = p_PERIODEENCOURS
 AND (z.date_effet <= t.FIN_PERIODE_RECUEIL
 OR z.TYPE_IP       = 'T')
 )
 AND z.date_maj<
 (SELECT MAX (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c,
 GAP_TRT_LISTE_MAT e,
 DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac                 =p_numpac
 AND a.TYPE_PAIE               IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac                   =b.numpac
 AND a.modele                   =b.modele
 AND a.nature                   =b.nature
 AND b.id_trt                   =c.id_trt
 AND c.statut                  IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE             = p_PERIODEENCOURS
 AND b.numero_echange          <>'0000'
 AND e.id_trt                   =b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )
 AND d.numpac  =e.numpac
 AND d.pacmat  =e.pacmat
 AND z.numpac  =e.numpac
 AND z.PAIEZAD =d.paiezad
 )
 AND to_date(z.PERIODE)<=to_date(p_PERIODEENCOURS,'YYYYMM');
 END IF;
 
 delete from TGE_DONNEES_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT max (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 ) and PERIODE<=p_PERIODEENCOURS ;
 
 delete from TGE_ELEMENTS_PAIE z where numpac=p_numpac AND to_date(date_maj,'yyyymmddHH24MI')<
 
 ( SELECT max (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 )  and PERIODE<=p_PERIODEENCOURS ;
 
 delete from DELETED_PAIEZAD z where numpac=p_numpac AND DATE_SUPPRESSION<
 
 ( SELECT max (b.DATE_DEBUT_TRT)
 FROM TGE_SCHEMA_PRODUCTION a,
 GAP_TRT b,
 GAP_TRT_SUIVI c, GAP_TRT_LISTE_MAT e, DIC_ADM_CONTRAT_SITU d
 WHERE a.numpac       =p_numpac
 AND a.TYPE_PAIE     IN ('PRECONTR','CONTROLE','RECYCLAG','PARTICUL','REGLE','REGLEALL','GAPSELMA')
 AND a.numpac         =b.numpac
 AND a.modele         =b.modele
 AND a.nature         =b.nature
 AND b.id_trt         =c.id_trt
 AND c.statut        IN ('PA','EX','DEMSEA')
 AND NVL(c.code_retour_zpp,'00')='00'
 AND b.PERIODE_PAIE   = p_PERIODEENCOURS
 AND b.numero_echange<>'0000'
 and e.id_trt=b.id_trt
 AND EXISTS
 (SELECT f.numpac,
 f.pacmat
 FROM GAP_RECYCL_MATRIC f
 WHERE f.numpac=e.numpac
 AND f.pacmat  =e.pacmat
 )  AND d.numpac       =e.numpac
 AND d.pacmat       =e.pacmat
 AND z.pacmat       =d.pacmat
 AND z.numpac       =e.numpac
 AND z.PAIEZAD      =d.paiezad
 ) ;
 
 -- M+1 sur TGE_REF_PAC
 update TGE_REF_PAC set periodeencours=to_char(add_months(to_date(periodeencours,'yyyymm'), 1),'yyyymm') where numpac=p_numpac;
 
 merge into TGE_REF_PER a using (select p_numpac as numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') as periodeencours from dual) b on (a.numpac=b.numpac and a.periodeencours=b.periodeencours)
 when matched then
 update set a.DATE_DEBUT_MOIS=b.periodeencours||'01',a.DATE_FIN_MOIS= to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd'),a.DERNIER_NUM_ECHANGE=nvl(a.DERNIER_NUM_ECHANGE,'0000')
 when not matched then
 insert (a.numpac,a.periodeencours,a.DATE_DEBUT_MOIS,a.DATE_FIN_MOIS,a.DERNIER_NUM_ECHANGE) values (b.numpac,b.periodeencours,b.periodeencours||'01', to_char(last_day(to_date(b.periodeencours,'yyyymm')),'yyyymmdd') ,'0000'      )
 ;
 -- purge histo technique
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant purge histo)','Début de la purge pour le numpac : '||P_NUMPAC);
 tge_purge_histo(p_numpac,to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm'));
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après purge histo)','Fin de la purge pour le numpac : '||P_NUMPAC);
 
 --BEGIN DIT 37805
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Begin Insert RELIQ)','Début d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- les tables TGE_RELIQ_* sont vidées pour le pac en question
 tge_insert_reliq (p_id,p_numpac,p_PERIODEENCOURS);
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (End Insert RELIQ)','Fin d insertion dans les tables RELIQ_  pour le numpac : '||P_NUMPAC);
 
 -- Mise à jour secupacmat
 update SECUPACMAT set PERIODE_RECYCLAGE=0 where numpac=p_numpac;
 FSED.insert_gap_trt_suivi(p_id,'PERIODE_RECYCLAGE_0',null,'BATCH','CL');
 -- purger table matricules en recyclage
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RECYCL)','Purger table matricules en recyclage  pour le numpac : '||P_NUMPAC);
 DELETE from GAP_RECYCL_MATRIC where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_TORESEND where numpac=p_numpac ;
 DELETE from GAP_SELECTION_PACMAT where nomtraitement='RECYCLAG' and numpac=p_numpac;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (Purge RETRO)','Purger table matricules Rétro  pour le numpac : '||P_NUMPAC);
 -- purger table matricules  RETRO
 if P_DEB_RETRO is not null AND to_date(P_PERIODEENCOURS,'YYYYMM')>=to_date(P_DEB_RETRO,'YYYYMM') then
 DELETE from GAP_RETRO_MATRIC where numpac=p_numpac ;
 DELETE from GAP_RETRO_MATRIC_TRAITE where numpac=p_numpac ;
 DELETE from TGE_MODIF_PACMAT_RETRO where numpac=p_numpac ;
 DELETE from GAP_SELECTION_RETRO where  numpac=p_numpac;
 END IF;
 -- RSI Le 20/02/2015 DIT 41197 : Supprimer pour le pac en cours des matricules
 -- sélectionnés dans GAP_SELECTION_PACMAT pour les natures de traitements associés à GAPSELMA dans TGE_SCHEMA_PRODUCTION
 DELETE from GAP_SELECTION_PACMAT
 where numpac= p_numpac
 and nomtraitement in (select distinct NATURE from TGE_SCHEMA_PRODUCTION where type_paie =  'GAPSELMA' and date_fin is null and numpac=p_numpac);
  
 --On réactive les triggers pour que la colonne période de paie des incidents soit recalculée
 delete bypass_trg_recycl_on_session;
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (avant alimentation période recueil)','Début de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 IF to_char(add_months(to_date(p_PERIODEENCOURS,'yyyymm'), 1),'yyyymm') = P_DEB_RETRO THEN
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, greatest(P_PERIDOE_HISTO_LIMITE,P_DEB_HISTO_RETRO), NULL);
 ELSE
 	TGE_ALIM_PERIODE_INDIV(p_id, p_numpac, TO_CHAR(ADD_MONTHS(TO_DATE(p_periodeencours,'yyyymm'), 1),'YYYYMM'), NULL);
 END IF;
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (après alimentation période recueil)','Fin de la procédure d''alimentation des périodes de recueil pour le numpac '||P_NUMPAC);
 
 --On désactive à nouveau les triggers
 insert into bypass_trg_recycl_on_session(date_event, message) values (sysdate, 'Cloture en cours pour le NUMPAC : ' || p_numpac);
 
 FSED.FSED_AVANCEMENT_PLSQL(p_id,'TGE_CLOTURE (end)','Fin de la clôture pour le numpac '||P_NUMPAC);
 FSED.insert_gap_trt_suivi(p_id,'CLOTURE_OK',null,'BATCH','CL');
 
 exception
 when others then
 FSED.FSED_ERREUR(p_id,'TGE_CLOTURE (raise)',P_NUMPAC,SQLCODE||'-'||SQLERRM);
 update SECUPACMAT set PERIODE_RECYCLAGE=1 where numpac=p_numpac;
 raise;
 END TGE_CLOTURE;
##
TAG_CHARSET=@€éèç
##
TGE_CREATE_TRIGGER
=SQL=
create or replace PROCEDURE TGE_CREATE_TRIGGER(
    NOM_TABLE IN VARCHAR2)
AS
  PROC CLOB;
  PROC_DEX_UPDATING CLOB;
  condition CLOB;
  v_typeTable VARCHAR(1);
  CURSOR cur_mapdo
  IS
    SELECT numpac,
      donneegxp
    FROM tge_ref_mapdo
    WHERE TABLEGXP IN
      (SELECT tableparam
      FROM tge_ref_mapta
      WHERE tablephy = nom_table
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND allerretour IN ('A','2','I')
      )
  AND (donneegxp, tablegxp) IN
    (SELECT column_name, table_name FROM user_tab_cols
    )
  UNION
    (SELECT numpac,donneegxp FROM TABLE(GET_GXP_TRT_PARTICULIER_DATAS(nom_table))
    )
  ORDER BY donneegxp,
    numpac;
  lig_mapdo cur_mapdo%rowtype;
  is_aller_ou_allerretour_mapta NUMBER;
  table_exist                   NUMBER;
  type_writer_exists            NUMBER;
  date_eff_exists               NUMBER;
  nom_col_date_test_recycl      VARCHAR2(30);
  CURSOR cur_numpac
  IS
    SELECT DISTINCT numpac
    FROM tge_ref_mapdo
    WHERE TABLEGXP IN
      (SELECT tableparam
      FROM tge_ref_mapta
      WHERE tablephy = nom_table
        --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
        --Ajout du type 'I'
      AND allerretour IN ('A', '2','I')
      )
  AND (donneegxp, tablegxp) IN
    (SELECT column_name, table_name FROM user_tab_cols
    )
  ORDER BY numpac;
  lig_numpac cur_numpac%rowtype;
  sscondition CLOB;
  existeMappingEtoile NUMBER;
  donneeprec          VARCHAR(100);
  -- variables retro  ---
  -----------------------
  champDateEffetRetro VARCHAR2(50);
  conditionRetro CLOB;
  ssconditionRetro CLOB;
  procRetroPaiezadCodeChrono VARCHAR(4000);
  CURSOR cur_mapdoRetro
  IS
    SELECT DISTINCT dz.numpac,
      md.donneegxp, 
      mddr.clause_date_eff_retro
    FROM tge_ref_dicoz dz INNER JOIN tge_ref_mapdo md
    	ON md.element        = dz.element
    	AND (md.numpac        = dz.numpac
    	OR (md.numpac         = '*'
    	AND NOT EXISTS
	      (SELECT 1
	      FROM tge_ref_mapdo z
	      WHERE z.numpac= dz.numpac
	      AND z.element = dz.element
	      )) )
      	LEFT JOIN tge_ref_mapdo_dteff_retro mddr 
      	ON mddr.element        = dz.element
	    AND (mddr.numpac        = dz.numpac
	    OR (mddr.numpac         = '*'
	    AND NOT EXISTS
	      (SELECT 1
	      FROM tge_ref_mapdo_dteff_retro zdr
	      WHERE zdr.numpac= dz.numpac
	      AND zdr.element = dz.element
	      )) )
    WHERE dz.calcul_retro = '1'
    AND TABLEGXP IN
      (SELECT tableparam FROM tge_ref_mapta WHERE tablephy = NOM_TABLE
      )
    ORDER BY donneegxp,
      clause_date_eff_retro;
    lig_mapdoRetro cur_mapdoRetro%rowtype;
    ligPrec_mapdoRetro cur_mapdoRetro%rowtype;
    CURSOR cur_numpacRetro
    IS
      SELECT DISTINCT dz.numpac
      FROM tge_ref_dicoz dz,
        tge_ref_mapdo md
      WHERE dz.calcul_retro = '1'
      AND md.element        = dz.element
      AND (md.numpac        = dz.numpac
      OR (md.numpac         = '*'
      AND NOT EXISTS
        (SELECT 1
        FROM tge_ref_mapdo z
        WHERE z.numpac= dz.numpac
        AND z.element = dz.element
        )) )
      AND TABLEGXP IN
        (SELECT tableparam FROM tge_ref_mapta WHERE tablephy = NOM_TABLE
        )
      ORDER BY numpac;
      lig_numpacRetro cur_numpacRetro%rowtype;
  -- variables dex  ---
  -----------------------
      CURSOR cur_donneesDex
      IS
        SELECT DISTINCT DMED.EVENT,
          RDMU.NOM_DONNEE,
          RDMU.CONDITION,
          DMED.NOM_DONNEE_DEX_OU_EVENT 
        FROM DEX_MAPPING_EVENT_DATA DMED,
          REF_DONNEE_MAPPING_UX RDMU,
          REF_DONNEE_GEN_MODEL RDGM
        WHERE DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX
        AND RDMU.NOM_DONNEE               =RDGM.NOM_DONNEE
        AND DMED.UTILISE_TRIGGER          ='O'
        AND DMED.TYPE                     ='D'
        AND RDGM.NOM_DICTIONNAIRE         =NOM_TABLE
        ORDER BY DMED.EVENT,
          RDMU.NOM_DONNEE;
      lig_donneeDex cur_donneesDex%rowtype;
      v_existeDonneeDex BOOLEAN;
      v_eventDexPrec    VARCHAR(100);
      v_cleSecondaireDex VARCHAR(200);
      
      CURSOR cur_eventsDex
      IS
        SELECT DISTINCT DMED.EVENT,
          RDMU.CONDITION
        FROM DEX_MAPPING_EVENT_DATA DMED,
          REF_DONNEE_MAPPING_UX RDMU,
          REF_DONNEE_GEN_MODEL RDGM
        WHERE DMED.NOM_DONNEE_DEX_OU_EVENT=RDMU.NOM_DONNEE_UX
        AND RDMU.NOM_DONNEE               =RDGM.NOM_DONNEE
        AND DMED.UTILISE_TRIGGER          ='O'
        AND DMED.TYPE                     ='D'
        AND RDGM.NOM_DICTIONNAIRE         =NOM_TABLE;
      lig_eventDex cur_eventsDex%rowtype;
    BEGIN
      -- On teste si la table existe bien
      SELECT COUNT(*)
      INTO table_exist
      FROM user_tables
      WHERE table_name = nom_table;
      IF table_exist   > 0 THEN
        SELECT COUNT(*)
        INTO is_aller_ou_allerretour_mapta
        FROM tge_ref_mapta
        WHERE tablephy = nom_table
          --RSI DIT 39298 MPE : Fonction d'envoi inconditionnel pour la table TGE_OPTION_REPORT
          --Ajout du type 'I'
        AND allerretour                                   IN ('A', '2','I');
        IF is_aller_ou_allerretour_mapta > 0 OR nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
          -- Si la colonne TYPE_WRITER n'existe pas, on la crée
          SELECT COUNT(*)
          INTO type_writer_exists
          FROM user_tab_cols
          WHERE column_name     = 'TYPE_WRITER'
          AND table_name        = NOM_TABLE;
          IF type_writer_exists = 0 THEN
            EXECUTE_IMMEDIATE_STRING( 'ALTER TABLE ' || NOM_TABLE || ' ADD (TYPE_WRITER VARCHAR2(1 BYTE))',0);
          END IF;
          v_typeTable := fsed.getTypeTable(NOM_TABLE);
          PROC        := 'create or replace 
TRIGGER TRG_' || NOM_TABLE || ' FOR INSERT or UPDATE or delete  ON '||NOM_TABLE||
          ' COMPOUND TRIGGER 
type pacmats 
IS 
record 
( 
R_numpac VARCHAR2(6), 
R_pacmat VARCHAR2(8), 
R_periode_recycl VARCHAR2(1) 
); 
TYPE TAB_pacmats 
IS 
TABLE OF pacmats INDEX BY binary_integer; 
tab TAB_pacmats; 
v_recycl varchar2(1); 
v_periode_recycl varchar2(1); 
v_error_periode_recycl_3 number; 
v_numpac varchar2(6); 
v_pacmat varchar2(8); 
v_periode varchar2(6); 

existNumpacPaizad NUMBER; 
v_type_writer varchar2(1); 
v_bypass_trigger number; 
v_bypass_DACH number; 
v_date_debut_periode_paie DATE :=NULL;  

V_DE_SSAAMM               VARCHAR2(6); 
V_DE_SSAAMM_TMP           VARCHAR2(6); 
V_DE_SSAAMM_DEFAULT		  VARCHAR2(6); 
V_DATE_LIMITE_RETRO       VARCHAR2(6); 
V_DEB_RETRO               VARCHAR2(6); 
V_DEB_HISTO_RETRO         VARCHAR2(6); 
V_PERIODEENCOURS          VARCHAR2(6); 
V_CODE_CHRONO             VARCHAR2(6); 
V_PAIEZAD                 VARCHAR2(8); 
V_MATRIC                  VARCHAR2(32); 
v_nb_mois_retro           NUMBER; 
v_retro                   VARCHAR2(1); 
V_DATE_EFF                VARCHAR2(6); 
'
          ;
          -- On vérifie si la table va générer des évènements pour DEX (au moins une donnée mappée, ou dictionnaire DIC_ADM_CONTRAT qui gère l'embauche et le départ)
          v_existeDonneeDex := (nom_table='DIC_ADM_CONTRAT');
          IF NOT v_existeDonneeDex THEN
            OPEN cur_donneesDex;
            LOOP
              FETCH cur_donneesDex INTO lig_donneeDex ;
              EXIT
            WHEN cur_donneesDex%NOTFOUND OR v_existeDonneeDex;
              v_existeDonneeDex := true;
            END LOOP;
            CLOSE cur_donneesDex;
          END IF;
          OPEN cur_numpac;
          LOOP
            FETCH cur_numpac INTO lig_numpac ;
            EXIT
          WHEN cur_numpac%NOTFOUND ;
            IF lig_numpac.numpac<>'*' THEN
              PROC              :=PROC||' b'||lig_numpac.numpac||' boolean ;';
            END IF;
          END LOOP;
          CLOSE cur_numpac;
          OPEN cur_numpacRetro;
          LOOP
            FETCH cur_numpacRetro INTO lig_numpacRetro ;
            EXIT
          WHEN cur_numpacRetro%NOTFOUND ;
            IF lig_numpacRetro.numpac<>'*' THEN
              PROC                   :=PROC||' bRet'||lig_numpacRetro.numpac||' boolean ;';
            END IF;
          END LOOP;
          CLOSE cur_numpacRetro;
          IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
            PROC           :=PROC||' v_listMatricToUpdate CLOB := NULL; 
v_nbMatricToUpdate NUMBER := 0; 
v_countSecNav NUMBER := -1;';
            IF nom_table    ='DIC_ADM_PERSO' THEN
              PROC         :=PROC||'v_listMatricToDelete CLOB := NULL; 
v_nbMatricToDelete NUMBER := 0;';
            ELSIF nom_table ='DIC_ADM_CONTRAT' THEN
              PROC         :=PROC||'v_nbLig NUMBER; 
v_doMajPerso NUMBER := 0; 
TYPE NUMPAC_PACMAT_TO_DELETE IS RECORD (MATRIC DIC_ADM_CONTRAT.MATRIC%TYPE, NUMPAC DIC_ADM_CONTRAT.NUMPAC%TYPE, PACMAT DIC_ADM_CONTRAT.PACMAT%TYPE); 
TYPE TAB_NUMPAC_PACMAT_TO_DELETE IS TABLE OF NUMPAC_PACMAT_TO_DELETE; 
v_NUMPAC_PACMAT NUMPAC_PACMAT_TO_DELETE; 
v_TAB_NUMPAC_PACMAT TAB_NUMPAC_PACMAT_TO_DELETE; 
v_listNumpacPacmatToDelete CLOB := '','';
v_actionIdx VARCHAR2(1);
v_jobIdx NUMBER;

';
            ELSIF nom_table = 'DIC_ADM_CONTRAT_HISTO' THEN
              PROC         :=PROC||
              ' v_nbOccForCnt number; 
v_dsdcn DIC_ADM_CONTRAT.DSDCN%TYPE; 
v_natcol DIC_ADM_CONTRAT.NATCOL%TYPE;  

TYPE paiezadTabType is table of DIC_ADM_CONTRAT_HISTO.PAIEZAD%TYPE ; 
TYPE numpacTabType is  table of DIC_ADM_CONTRAT_HISTO.NUMPAC%TYPE ; 
TYPE periodeTabType is  table of TGE_REF_PAC.PERIODEENCOURS%TYPE ; 
paiezadTab paiezadTabType := paiezadTabType(); 
numpacTab numpacTabType := numpacTabType(); 
periodeTab periodeTabType := periodeTabType();    
idxPeriodesIndiv NUMBER;

TYPE T_TRAITEMENT_PERIODES_INDIV IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(100); 
-- Ce tableau indexé contient plusieurs chose : 
-- + Une entrée avec un code PAC + un PAIEZAD --> Un flag permettant de savoir si le couple NUMPAC/PAIEZAD a déjà été traité 
-- + Une entrée avec un code PAC --> La période en cours du PAC 
tabTrtPeriodesIndividuelles T_TRAITEMENT_PERIODES_INDIV;  
in_calc_hp T_TRAITEMENT_PERIODES_INDIV;

TYPE T_COMPARAISON_VAL_OLD_NEW IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(20); 
tabValToCompare T_COMPARAISON_VAL_OLD_NEW;  

alimPeriodesIndiv boolean;  
v_actionIdx VARCHAR2(1);
v_jobIdx NUMBER;

'
              ;
            END IF;
            IF nom_table='DIC_ADM_CONTRAT' OR nom_table='DIC_ADM_CONTRAT_HISTO' THEN
              PROC     :=PROC||' v_cle_idx_contrat T_CLE_IDX_CONTRAT_HISTO; 
v_cles_idx_contrat T_CLES_IDX_CONTRAT_HISTO := T_CLES_IDX_CONTRAT_HISTO();';
            END IF;
            IF nom_table='DIC_ADM_PERSO' OR nom_table='DIC_ADM_CONTRAT' THEN
              PROC     :=PROC||' 
v_matricForPacmat VARCHAR2(32); 
v_matricForLock VARCHAR2(32); 
TYPE T_LOCKED_MATRIC IS TABLE OF VARCHAR2(1) INDEX BY VARCHAR2(32); 
tabLockedMatric T_LOCKED_MATRIC; 
';
            END IF;
          END IF;
          date_eff_exists          := 0;
          nom_col_date_test_recycl := NULL;
          IF nom_table              ='DIC_ADM_CONTRAT' THEN
            -- Pour DIC_ADM_CONTRAT c'est DSDCN qui fera office de DATE_EFF pour tester s'il faut mettre en recyclage
            nom_col_date_test_recycl := 'DSDCN';
          ELSE
            SELECT COUNT(*)
            INTO date_eff_exists
            FROM user_tab_cols
            WHERE column_name           = 'DATE_EFF'
            AND table_name              = NOM_TABLE;
            IF date_eff_exists          >0 THEN
              nom_col_date_test_recycl := 'DATE_EFF';
            END IF;
          END IF;
          IF nom_col_date_test_recycl IS NOT NULL THEN
            PROC                      :=PROC||'TYPE T_PERIODE_BY_NUMPAC IS TABLE OF TGE_REF_PAC.PERIODEENCOURS%TYPE INDEX BY TGE_REF_PAC.NUMPAC%TYPE; 
tabPeriodeByNumpac T_PERIODE_BY_NUMPAC; 
date_test_recycl DATE;';
          END IF;
          IF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
		  
			PROC     :=PROC||'TYPE paiezadPacPeriodModifedType IS  TABLE OF TGE_PAC_PAIEZAD_PERIOD_RETRO  INDEX BY VARCHAR2(15);  ';
  
			PROC     :=PROC||'paiezadPacPeriodModifed paiezadPacPeriodModifedType ;';
           
            PROC     :=PROC||' idx  VARCHAR2(15);';
		ELSE 
			PROC     :=PROC||'idx NUMBER; ';
          END IF;
          IF v_existeDonneeDex THEN
            PROC := PROC||'v_dexaction varchar2(1); 
			v_dexCleSecondaire VARCHAR2(100);		
			TYPE eventsTabType is  table of DEX_MAPPING_EVENT_DATA.EVENT%TYPE ; 
			eventsTab eventsTabType := eventsTabType(); 
			v_processEventDex boolean; 
';
          END IF;
          IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
            PROC      :=PROC||' 
BEFORE STATEMENT IS BEGIN  ';
            PROC      := PROC || 'select count(*) into v_bypass_DACH from bypass_trg_DACH_on_session; 
END BEFORE STATEMENT; ';
          END IF;
          PROC        := PROC || '  

BEFORE EACH ROW IS BEGIN ' ;
          IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
            PROC      := PROC || ' IF (v_bypass_DACH > 0) THEN null; else ';
          END IF;
          PROC := PROC || ' 
if (v_bypass_trigger > 0)  then 
v_type_writer := ''N''; 
else 
IF DELETING THEN 
v_type_writer :=NVL(:old.type_writer,''O''); 
ELSE 
v_type_writer :=NVL(:NEW.type_writer,''O''); 
-- On remet TYPE_WRITER à NULL pour qu''il ne soit pas considéré comme ''N'' lors des futurs update n''incluant pas cette colonne 
:NEW.type_writer := NULL; 
END IF; 
end if; 
';
          IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO') THEN
            PROC := PROC || ' 
IF v_type_writer<>''N'' AND v_countSecNav=-1 THEN 
SELECT COUNT(*) INTO v_countSecNav FROM SECUPACMAT_TMP WHERE MATRIC=''SECNAV''; 
IF v_countSecNav>0 THEN 
RAISE_APPLICATION_ERROR(-20000,''CODERR=GENREC03''); 
END IF; 
END IF; 
';
          END IF;
          IF nom_table ='DIC_ADM_PERSO' OR nom_table ='DIC_ADM_CONTRAT' THEN
            -- On récupère le MATRIC et on teste si on l'a déjà traité
            PROC := PROC || ' 
v_matricForLock := NVL(:NEW.MATRIC,:OLD.MATRIC); 
IF v_type_writer<>''N'' AND NOT tabLockedMatric.exists(v_matricForLock) THEN';
            -- En cas de modification de DAP, on lock les tables qui la mette à jour par trigger (DAPH, DAC, DACS et DACH)
            -- En cas de modification de DAC, on lock les tables qui la mette à jour par trigger (DACS et DACH)
            IF nom_table ='DIC_ADM_PERSO' THEN
              -- DAPH et DAC uniquement pour DAP
              PROC := PROC || ' 
BEGIN 
UPDATE DIC_ADM_PERSO_HISTO SET MATRIC=MATRIC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matricForLock; 
EXCEPTION WHEN OTHERS THEN NULL; END; 
BEGIN 
UPDATE DIC_ADM_CONTRAT SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matricForLock; 
EXCEPTION WHEN OTHERS THEN NULL; END;';
            END IF;
            -- DACs et DACH uniquement pour les 2 (DAP et DAC)
            PROC := PROC || ' 
BEGIN 
UPDATE DIC_ADM_CONTRAT_SITU SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd'') WHERE MATRIC=v_matricForLock; 
EXCEPTION WHEN OTHERS THEN NULL; END; 
BEGIN 
UPDATE DIC_ADM_CONTRAT_HISTO SET NUMPAC=NUMPAC, DATE_DERNIERE_MODIF=TO_DATE(''19010101'',''yyyymmdd''), TYPE_WRITER=''N'' WHERE MATRIC=v_matricForLock; 
EXCEPTION WHEN OTHERS THEN NULL; END;';
            -- On stocke le MATRIC pour indiquer qu'on l'a déjà traité
            PROC := PROC || ' 
tabLockedMatric(v_matricForLock) := ''O''; 
END IF;';
          END IF;
          IF nom_table   ='DIC_ADM_PERSO' THEN
            PROC        :=PROC||TRG_PERSO_BEFORE_ROW();
          ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
            PROC        :=PROC||TRG_PERSO_HISTO_BEFORE_ROW();
          ELSIF nom_table='DIC_ADM_CONTRAT' THEN
            PROC        :=PROC||TRG_CONTRAT_BEFORE_ROW();
          ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
            PROC        :=PROC||TRG_CONTRAT_HISTO_BEFORE_ROW();
          END IF;
          IF is_aller_ou_allerretour_mapta > 0 THEN
              PROC                        :=PROC||' 
v_matric:=nvl(:NEW.matric,:OLD.matric); ';
            IF v_typeTable                 ='z' THEN
              PROC                        :=PROC||' 
v_numpac:=nvl(:NEW.numpac,:OLD.numpac); 
v_paiezad:=nvl(:NEW.paiezad,:OLD.paiezad); ';
            elsif v_typeTable              ='p' THEN
              PROC                        :=PROC||' 
v_numpac:=nvl(:NEW.numpac,:OLD.numpac); 
v_pacmat:=nvl(:NEW.pacmat,:OLD.pacmat); ';
            END IF;
            PROC :=PROC||'  if v_type_writer<>''N'' THEN ';
            -- Récupération du numpac si besoin
            IF v_typeTable   ='z' THEN
              PROC          :=PROC||' 
SELECT DISTINCT D.numpac as R_numpac, 
D.pacmat as R_pacmat, 
T.PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM DIC_ADM_CONTRAT_SITU D ,SECUPACMAT T 
WHERE D.NUMPAC=v_numpac AND D.PAIEZAD=v_paiezad AND D.NUMPAC=T.NUMPAC AND D.PACMAT=T.PACMAT;';
            elsif v_typeTable='m' THEN
              PROC          :=PROC||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE matric=v_matric;';
            elsif v_typeTable='p' THEN
              PROC          :=PROC||' 
SELECT numpac as R_numpac, 
pacmat as R_pacmat , 
PERIODE_RECYCLAGE as R_periode_recycl bulk collect 
INTO tab 
FROM SECUPACMAT 
WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat;';
            END IF;
            PROC            :=PROC||' v_retro := ''N'';';
            PROC            :=PROC||' if tab.exists(1) then';
            PROC            :=PROC||'  FOR i IN 1..tab.last  LOOP';
            PROC            :=PROC||'   v_numpac:=tab(i).r_numpac;';
            PROC            :=PROC||'   IF NOT v_numpac = ''TMPPAC'' THEN';
            PROC            :=PROC||'   v_pacmat:=tab(i).r_pacmat;';
            PROC            :=PROC||'   v_periode_recycl:=nvl(tab(i).R_periode_recycl,''1'');';
            IF NOT nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
              -- une valeur '3' dans PERIODE_RECYCLAGE retourne une erreur
              -- sauf en cas de réembauche (insertion dans DIC_ADM_CONTRAT et DIC_ADM_CONTRAT_HISTO)
              PROC        :=PROC||'    IF v_periode_recycl = ''3'' THEN';
              IF nom_table ='DIC_ADM_CONTRAT' THEN
                PROC      :=PROC||'     IF UPDATING OR DELETING THEN';
              END IF;
              PROC        :=PROC||'     RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');';
              IF nom_table ='DIC_ADM_CONTRAT' THEN
                PROC      :=PROC||'     END IF;';
              END IF;
              PROC:=PROC||'    END IF;';
            ELSE
              -- on positionne PERIODE_RECYCLAGE à '1' en cas de réembauche d'un salarié ayant une valeur '0' ou '3' dans PERIODE_RECYCLAGE et répondant aux critères suivants :
              -- - DRPAI2 est non-vide et différent de 'B'
              -- - NATCOL vaut 'SAL' ou 'STA'
              -- - DSDCN est antérieure ou égale à la période en cours
              PROC:=PROC||'    IF v_periode_recycl IN (''0'',''3'') THEN';
              PROC:=PROC||'     IF v_periode_recycl = ''3'' THEN';
              -- si PERIODE_RECYCLAGE vaut '3', on prévoit qu'il va falloir retourner une erreur (modification d'un contrat existant)
              PROC:=PROC||'      v_error_periode_recycl_3 := 1;';
              PROC:=PROC||'     ELSE';
              PROC:=PROC||'      v_error_periode_recycl_3 := 0;';
              PROC:=PROC||'     END IF;';
              PROC:=PROC||'     IF INSERTING THEN';
              -- insertion d'un historique de contrat : on vérifie s'il s'agit de la première occurrence du contrat (réembauche)
              PROC:=PROC||'      v_nbOccForCnt := GET_NB_LIGNES(''DIC_ADM_CONTRAT_HISTO'', ''NUMPAC=''''''||:NEW.NUMPAC||'''''' AND PACMAT=''''''||:NEW.PACMAT||'''''' AND NUMCNT=''||:NEW.NUMCNT);';
              PROC:=PROC||'      IF v_nbOccForCnt = 0 THEN';
              -- première occurrence du contrat (réembauche) : on ne retourne pas d'erreur, et, si PERIODE_RECYCLAGE = '3', on va réactiver le dossier
              PROC:=PROC||'       IF v_periode_recycl = ''3'' THEN';
              PROC:=PROC||'        v_error_periode_recycl_3 := 0;';
              PROC:=PROC||'        :NEW.ZREACT := TO_DATE(TO_CHAR(:NEW.DATE_EFF,''yyyy'')||''0101'',''yyyymmdd'');';
              PROC:=PROC||'       END IF;';
              -- vérification des critères pour positionner PERIODE_RECYCLAGE à '1'
              PROC:=PROC||'       IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, NULL) = 1 THEN';
              -- OK pour PERIODE_RECYCLAGE = '1'
              PROC:=PROC||'        v_periode_recycl := ''1'';';
              PROC:=PROC||'       END IF;';--fin CHECK_FORCAGE_RECYCLAGE
              PROC:=PROC||'      END IF;'; --fin v_nbOccForCnt = 0
              PROC:=PROC||'     ELSIF UPDATING THEN';
              -- un update : on va vérifier si on doit réactiver le dossier
              PROC:=PROC||'      IF UPDATING(''DRPAI2'') AND ((NVL(:OLD.DRPAI2, ''B'') = ''B'' AND NVL(:NEW.DRPAI2, ''B'') <> ''B'') OR(NVL(:OLD.DRPAI2, ''B'')<> ''B'' AND NVL(:NEW.DRPAI2, ''B'') = ''B'')) THEN';
              -- update de DRPAI2 pour déblocage paie : on ne retourne pas d'erreur, et on va réactiver le dossier
              PROC:=PROC||'       v_error_periode_recycl_3 := 0;';
              PROC:=PROC||'       IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, NULL) = 1 THEN';
              -- OK pour PERIODE_RECYCLAGE = '1'
              PROC:=PROC||'        v_periode_recycl := ''1'';';
              PROC:=PROC||'       END IF;';--fin CHECK_FORCAGE_RECYCLAGE
              PROC:=PROC||'      ELSIF UPDATING(''ZREACT'') AND :OLD.ZREACT IS NULL AND :NEW.ZREACT IS NOT NULL THEN';
              -- update de ZREACT pour réactivation : si l'année de ZREACT est inférieure ou égale à l'année de la période en cours, on ne retourne pas d'erreur
              PROC:=PROC||'       BEGIN';
              PROC:=PROC||'        IF NOT tabPeriodeByNumpac.exists(:NEW.NUMPAC) THEN';
              PROC:=PROC||'         select periodeencours into tabPeriodeByNumpac(:NEW.NUMPAC) from tge_ref_pac where numpac = :NEW.NUMPAC;';
              PROC:=PROC||'        END IF;';
              PROC:=PROC||'        IF TO_CHAR(:NEW.ZREACT,''yyyy'') <= SUBSTR(tabPeriodeByNumpac(:NEW.NUMPAC),1,4) THEN';
              PROC:=PROC||'         v_error_periode_recycl_3 := 0;';
              PROC:=PROC||'         IF CHECK_FORCAGE_RECYCLAGE(:NEW.NUMPAC, :NEW.PACMAT, :NEW.NUMCNT, :NEW.DRPAI2, tabPeriodeByNumpac(:NEW.NUMPAC)) = 1 THEN';
              -- OK pour PERIODE_RECYCLAGE = '1'
              PROC:=PROC||'          v_periode_recycl := ''1'';';
              PROC:=PROC||'         END IF;';--fin CHECK_FORCAGE_RECYCLAGE
              PROC:=PROC||'        END IF;'; --fin ZREACT <= PERIODEENCOURS
              PROC:=PROC||'       EXCEPTION WHEN OTHERS THEN NULL; END;';
              PROC:=PROC||'      END IF;';--fin UPDATING DRPAI2 ou ZREACT
              PROC:=PROC||'     END IF;'; --fin INSERTING/UPDATING
              PROC:=PROC||'     IF v_error_periode_recycl_3 = 1 THEN';
              PROC:=PROC||'      RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC02'');';
              PROC:=PROC||'     END IF;';
              PROC:=PROC||'    END IF;';--fin v_periode_recycl = 0 ou 3
            END IF;
            PROC:=PROC||'    IF v_periode_recycl = ''2'' THEN';
            PROC:=PROC||'     RAISE_APPLICATION_ERROR(-20001,''CODERR=GENREC01'');';
            PROC:=PROC||'    ELSIF v_periode_recycl = ''1'' THEN';
            OPEN cur_numpac;
            LOOP
              FETCH cur_numpac INTO lig_numpac ;
              EXIT
            WHEN cur_numpac%NOTFOUND ;
              IF lig_numpac.numpac<>'*' THEN
                PROC              :=PROC||' b'||lig_numpac.numpac||':=(v_numpac='''||lig_numpac.numpac||''') ;';
              END IF;
            END LOOP;
            CLOSE cur_numpac;
            -- on vérifie si des colonnes paies ont été modifié
            PROC                        :=PROC||'     v_recycl:=''N'';';
            IF nom_col_date_test_recycl IS NOT NULL THEN
              PROC                      :=PROC||'     IF NOT tabPeriodeByNumpac.exists(v_numpac) THEN';
              PROC                      :=PROC||'      select periodeencours into tabPeriodeByNumpac(v_numpac) from tge_ref_pac where numpac = v_numpac;';
              PROC                      :=PROC||'     END IF;';
              PROC                      :=PROC||'     IF DELETING THEN';
              PROC                      :=PROC||'      date_test_recycl := :old.'||nom_col_date_test_recycl||';';
              PROC                      :=PROC||'     ELSE';
              PROC                      :=PROC||'      date_test_recycl := :new.'||nom_col_date_test_recycl||';';
              PROC                      :=PROC||'     END IF;';
              PROC                      :=PROC||'     IF (NVL(TO_CHAR(date_test_recycl,''yyyymm''),''000000'') <= tabPeriodeByNumpac(v_numpac)) THEN';
            END IF;
            PROC     :=PROC||'     IF INSERTING OR DELETING THEN ';
            PROC     :=PROC||'      v_recycl:=''O''; ';
            PROC     :=PROC||'     ELSIF UPDATING THEN ';
            condition:=NULL;
            OPEN cur_mapdo;
            LOOP
              FETCH cur_mapdo INTO lig_mapdo ;
              IF donneeprec    IS NOT NULL AND (cur_mapdo%NOTFOUND OR lig_mapdo.donneegxp<>donneeprec ) THEN
                IF sscondition IS NOT NULL THEN
                  sscondition  :='('||sscondition||') and ';
                END IF;
                IF condition IS NULL AND NOM_TABLE ='DIC_ADM_CONTRAT_HISTO' THEN
                  condition  := ' IF NVL(:OLD.DRPAI2, ''B'') <> NVL(:NEW.DRPAI2, ''B'') AND (NVL(:OLD.DRPAI2, ''B'') =''B'' OR NVL(:NEW.DRPAI2, ''B'')=''B'') THEN v_recycl:=''O'';';
                END IF;
                IF condition IS NULL THEN
                  condition  :=' if ';
                ELSE
                  condition:=condition||' elsif ';
                END IF;
                condition:=condition||sscondition||' (:NEW.'||donneeprec||'<>:OLD.'||donneeprec||' OR  (:NEW.'||donneeprec||' IS NOT NULL AND :OLD.'||donneeprec||' IS NULL) OR  (:NEW.'||donneeprec||' IS NULL AND :OLD.'||donneeprec||' IS NOT NULL)) THEN ';
                condition:=condition||' v_recycl:=''O''; ';
              END IF;
              EXIT
            WHEN cur_mapdo%NOTFOUND;
              IF lig_mapdo.donneegxp IS NOT NULL THEN
                IF donneeprec        IS NULL OR lig_mapdo.donneegxp<>donneeprec THEN
                  sscondition        :='';
                  existeMappingEtoile:=0;
                END IF;
                IF lig_mapdo.numpac      ='*' THEN
                  sscondition           :='';
                  existeMappingEtoile   :=1;
                ELSIF existeMappingEtoile=0 THEN
                  IF sscondition        IS NOT NULL THEN
                    sscondition         :=sscondition||' or ';
                  END IF;
                  sscondition :=sscondition||' b'||lig_mapdo.numpac||'  ';
                END IF;
                donneeprec:=lig_mapdo.donneegxp;
              END IF;
            END LOOP;
            CLOSE cur_mapdo;
            IF condition IS NOT NULL THEN
              condition  :=condition||' end if;';
            END IF;
            IF condition IS NULL THEN
              PROC       :=PROC||' NULL; ';
            ELSE
              PROC:=PROC||condition;
            END IF;
            -- traitement du matricule pour recyclage
            PROC                        :=PROC||'    END IF; ';--fin updating
            PROC                        :=PROC||' 
IF v_recycl=''O'' THEN 
merge INTO GAP_RECYCL_MATRIC a USING 
(SELECT v_numpac AS numpac,v_pacmat AS pacmat FROM dual 
) b ON (a.pacmat=b.pacmat AND a.numpac=b.numpac) 
WHEN NOT MATCHED THEN 
INSERT 
(a.numpac,a.pacmat 
) VALUES 
(b.numpac,b.pacmat 
);  

merge INTO TGE_MODIF_PACMAT_TORESEND a USING 
(SELECT v_numpac AS numpac,v_pacmat AS pacmat, '''||NOM_TABLE||''' as TABLE_TO_SEND FROM dual 
) b ON (a.pacmat=b.pacmat AND a.numpac=b.numpac and a.TABLE_TO_SEND=b.TABLE_TO_SEND) 
WHEN MATCHED THEN 
update set a.DATE_MAJ=sysdate 
WHEN NOT MATCHED THEN 
INSERT 
(a.numpac,a.pacmat,a.TABLE_TO_SEND,a.DATE_MAJ 
) VALUES 
(b.numpac,b.pacmat,b.TABLE_TO_SEND, sysdate 
);   ';
            PROC                        :=PROC||' END IF; ';--fin v_recycl
            IF nom_col_date_test_recycl IS NOT NULL THEN
              PROC                      :=PROC||' END IF; ';--fin test date recycl
            END IF;
            PROC :=PROC||' END IF; ';--fin v_periode_recycl
            -- AJOUT CODE RETRO
            -- Recupération du champs DATE de la table
            IF NOM_TABLE           = 'DIC_ADM_CONTRAT' THEN
              champDateEffetRetro := 'DSDCN' ;
            ELSE
              BEGIN
                SELECT a.column_name
                INTO champDateEffetRetro
                FROM SYS.USER_CONS_COLUMNS a,
                  USER_TAB_COLUMNS b
                WHERE a.table_name   = NOM_TABLE
                AND a.table_name     =b.table_name
                AND a.column_name    =b.column_name
                AND b.data_type      = 'DATE'
                AND constraint_name IN
                  (SELECT c.constraint_name
                  FROM user_constraints c
                  WHERE c.table_name =a.table_name
                  AND CONSTRAINT_TYPE='P'
                  );
              EXCEPTION
              WHEN OTHERS THEN
                champDateEffetRetro := NULL;
              END;
            END IF;
            IF champDateEffetRetro IS NOT NULL THEN
              
                procRetroPaiezadCodeChrono := NULL;
                IF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
                  -- Traitement spécifique pour DIC_ADM_CONTRAT_HISTO : dans un trigger, il n'est pas possible de lire la table en cours de modification
                  -- De toute façon il n'y a pas besoin : on a le paiezad dans le :NEW/:OLD, il faut juste lire DIC_ADM_CONTRAT_SITU pour récupérer le CODE_CHRONO
                  procRetroPaiezadCodeChrono := ' 
BEGIN 
V_PAIEZAD := NVL(:NEW.PAIEZAD,:OLD.PAIEZAD); 
SELECT dacs.code_chrono 
INTO V_CODE_CHRONO 
FROM dic_adm_contrat_situ dacs 
WHERE dacs.numpac = V_NUMPAC AND dacs.pacmat = V_PACMAT AND dacs.numcnt = NVL(:NEW.NUMCNT,:OLD.NUMCNT) AND dacs.paiezad = V_PAIEZAD; 
EXCEPTION 
WHEN OTHERS THEN v_retro := ''N''; 
END; ';
                ELSE
                  procRetroPaiezadCodeChrono := ' 
BEGIN 
SELECT dacs.code_chrono, dach.paiezad, TO_CHAR(dach.DATE_EFF, ''YYYYMM'') 
INTO V_CODE_CHRONO, V_PAIEZAD, V_DATE_EFF 
FROM dic_adm_contrat_histo dach , dic_adm_contrat_situ dacs 
WHERE dach.numpac = V_NUMPAC AND dach.pacmat = V_PACMAT AND dach.matric = v_matric AND 
dacs.numpac = dach.numpac AND dacs.pacmat = dach.pacmat AND dacs.numcnt = dach.numcnt AND dacs.paiezad = dach.paiezad AND 
dach.date_eff = (select min(z.date_eff) 
from dic_adm_contrat_histo z 
where z.matric = dach.matric AND z.date_sortie_sit_bo >= NVL(:NEW.' || champDateEffetRetro ||',:OLD.' || champDateEffetRetro || ') );  

-- La période rétro doit être >= à la 1ère date d''effet du salarié
IF (V_DE_SSAAMM < V_DATE_EFF) THEN
V_DE_SSAAMM := V_DATE_EFF; 
END IF;
EXCEPTION 
WHEN OTHERS THEN v_retro := ''N''; 
END; ';
                END IF;

              conditionRetro  :=NULL;
              OPEN cur_mapdoRetro;
              LOOP
                FETCH cur_mapdoRetro INTO lig_mapdoRetro ;
                IF ligPrec_mapdoRetro.donneegxp    IS NOT NULL AND (cur_mapdoRetro%NOTFOUND OR lig_mapdoRetro.donneegxp<>ligPrec_mapdoRetro.donneegxp OR (lig_mapdoRetro.clause_date_eff_retro IS NULL and ligPrec_mapdoRetro.clause_date_eff_retro IS NOT NULL) OR (lig_mapdoRetro.clause_date_eff_retro IS NOT NULL and ligPrec_mapdoRetro.clause_date_eff_retro IS NULL) OR lig_mapdoRetro.clause_date_eff_retro<>ligPrec_mapdoRetro.clause_date_eff_retro) THEN
                  IF ssconditionRetro IS NOT NULL THEN
                    ssconditionRetro  :='('||ssconditionRetro||') and ';
                  END IF;
                  conditionRetro  :=conditionRetro||' IF '||ssconditionRetro||' (:NEW.'||ligPrec_mapdoRetro.donneegxp||'<>:OLD.'||ligPrec_mapdoRetro.donneegxp ||' OR  (:NEW.'||ligPrec_mapdoRetro.donneegxp||' IS NOT NULL AND :OLD.'||ligPrec_mapdoRetro.donneegxp||' IS NULL) OR  (:NEW.'||ligPrec_mapdoRetro.donneegxp||' IS NULL AND :OLD.'||ligPrec_mapdoRetro.donneegxp||' IS NOT NULL)) THEN ';
                  conditionRetro  :=conditionRetro||' 
                  	v_retro :=''O''; ';
                  IF ligPrec_mapdoRetro.clause_date_eff_retro IS NULL THEN
                  	conditionRetro :=conditionRetro||' 	
                  		V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_DEFAULT, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_DEFAULT)); ';
                  ELSE
                  	conditionRetro := conditionRetro || ' 
						' || ligPrec_mapdoRetro.clause_date_eff_retro || '; 
                  		V_DE_SSAAMM := LEAST(NVL(V_DE_SSAAMM_TMP, V_DE_SSAAMM), NVL(V_DE_SSAAMM, V_DE_SSAAMM_TMP));	';
                  END IF;
	              conditionRetro := conditionRetro || ' 
                  	END IF;
                  ';
                END IF;
                EXIT
              WHEN cur_mapdoRetro%NOTFOUND;
                IF lig_mapdoRetro.donneegxp IS NOT NULL THEN
                  IF ligPrec_mapdoRetro.donneegxp        IS NULL OR lig_mapdoRetro.donneegxp<>ligPrec_mapdoRetro.donneegxp OR (lig_mapdoRetro.clause_date_eff_retro IS NULL and ligPrec_mapdoRetro.clause_date_eff_retro IS NOT NULL) OR (lig_mapdoRetro.clause_date_eff_retro IS NOT NULL and ligPrec_mapdoRetro.clause_date_eff_retro IS NULL) OR lig_mapdoRetro.clause_date_eff_retro<>ligPrec_mapdoRetro.clause_date_eff_retro THEN
                    ssconditionRetro        :='';
                    existeMappingEtoile     :=0;
                  END IF;
                  IF lig_mapdoRetro.numpac ='*' THEN
                    ssconditionRetro      :='';
                    existeMappingEtoile   :=1;
                  ELSIF existeMappingEtoile=0 THEN
                    IF ssconditionRetro   IS NOT NULL THEN
                      ssconditionRetro    :=ssconditionRetro||' or ';
                    END IF;
                    ssconditionRetro :=ssconditionRetro||' bRet'||lig_mapdoRetro.numpac||'  ';
                  END IF;
                  ligPrec_mapdoRetro:=lig_mapdoRetro;
                END IF;
              END LOOP;
              CLOSE cur_mapdoRetro;

              IF conditionRetro IS NOT NULL THEN
                PROC            := PROC||' 
-- traitement de la retro 
IF NVL(v_retro,''N'') = ''Z'' THEN 
V_DEB_RETRO := NULL; 
ELSE 
SELECT PERIODEENCOURS, 
DEB_RETRO, 
DEB_HISTO_RETRO, 
NVL(NB_MOIS_RETRO, 0) 
INTO V_PERIODEENCOURS, 
V_DEB_RETRO, 
V_DEB_HISTO_RETRO, 
V_NB_MOIS_RETRO 
FROM TGE_REF_PAC 
WHERE NUMPAC = V_NUMPAC; 
END IF;  

IF(V_PERIODEENCOURS >= V_DEB_RETRO AND V_DEB_RETRO IS NOT NULL) THEN 
';
                OPEN cur_numpacRetro;
                LOOP
                  FETCH cur_numpacRetro INTO lig_numpacRetro ;
                  EXIT
                WHEN cur_numpacRetro%NOTFOUND ;
                  IF lig_numpacRetro.numpac<>'*' THEN
                    PROC              :=PROC||' bRet'||lig_numpacRetro.numpac||':=(v_numpac='''||lig_numpacRetro.numpac||''') ;';
                  END IF;
                END LOOP;
                CLOSE cur_numpacRetro;
              END IF;
              IF conditionRetro IS NOT NULL THEN
                PROC              := PROC || '
-- La période rétro doit être >= à : 
-- - La date de début des histos de rétro 
-- - La période en cours - le nombre de mois de rétro 
-- On prend donc la plus grande de ces 2 dates + la date d''effet
V_DE_SSAAMM_DEFAULT       := GREATEST(TO_CHAR(NVL(:NEW.'||champDateEffetRetro||',:OLD.'||champDateEffetRetro||') ,''YYYYMM''),V_DEB_HISTO_RETRO,TO_CHAR(ADD_MONTHS(to_date(V_PERIODEENCOURS,''YYYYMM''),-V_NB_MOIS_RETRO),''YYYYMM''));
V_DE_SSAAMM := NULL;
';

PROC            := PROC || ' 
IF(V_DE_SSAAMM_DEFAULT < V_PERIODEENCOURS) THEN 
v_retro :=''N''; 
IF INSERTING OR DELETING THEN 
v_retro:=''O''; 
V_DE_SSAAMM := V_DE_SSAAMM_DEFAULT;
ELSIF UPDATING THEN 
';
                PROC:=PROC||conditionRetro;
                -- traitement du matricule pour recyclage
                PROC       :=PROC||'    END IF; ';--fin updating
                PROC       :=PROC||' 
IF (v_retro = ''O'') THEN ';
                PROC :=PROC||procRetroPaiezadCodeChrono;
                PROC :=PROC||'  

IF(V_DE_SSAAMM < V_PERIODEENCOURS AND v_retro = ''O'') THEN 
-- On positionne une valeur reconnaissable pour savoir qu''on a déjà trouvé notre bonheur 
-- Pas la peine de refaire tous les select pour les autres couples NUMPAC/PACMAT 
v_retro := ''Z''; 
TGE_RETRO_INSCRIPTION(V_NUMPAC,
  V_PACMAT,
  V_DE_SSAAMM,
  V_CODE_CHRONO,
  V_PAIEZAD,
  ''' || NOM_TABLE ||'''); 
END IF; -- Fin V_DE_SSAAMM < V_PERIODEENCOURS AND v_retro = ''O'' 
END IF; -- Fin v_retro = ''O'' 
END IF; -- Fin V_DE_SSAAMM < V_PERIODEENCOURS 
';
              END IF;
              IF conditionRetro IS NOT NULL THEN
                PROC :=PROC||'
END IF; -- Fin V_PERIODEENCOURS >= V_DEB_RETRO 
';
              END IF;
            END IF;                  -- end if traitementRetro
            PROC :=PROC||' END IF; --fin v_numpac<>TMPPAC
            ';
            PROC :=PROC||' END LOOP;  ';
            PROC :=PROC||' END IF; ';--fin table exist
            PROC :=PROC||' END IF;'; --fin type_writer
          END IF;
          IF nom_table ='DIC_ADM_CONTRAT_HISTO' THEN
            PROC      := PROC || ' END IF ; ';
          END IF;
          -- DEBUT TRAITEMENT DEX
          IF v_existeDonneeDex THEN
          	PROC :=PROC||' 
			-- DEBUT DEX'; 
            -- Au moins une donnée DEX = on va vérifier si le traitement pour DEX doit être effectué
            IF date_eff_exists>0 THEN
              -- Date d'effet = traitement DEX seulement si modification à date du jour (à revoir pour DACH ?)
              PROC :=PROC||' 
			  IF SYSDATE BETWEEN nvl(:NEW.DATE_EFF,:OLD.DATE_EFF) AND nvl(:NEW.DATE_FIN,:OLD.DATE_FIN) THEN ';
            END IF;
            -- Si traitement DEX sur une table de type PAIEZAD ou PACMAT, on récupère le MATRIC
            IF v_typeTable    ='z' THEN
              PROC           :=PROC||' 
			  SELECT MAX(MATRIC) INTO v_matric FROM DIC_ADM_CONTRAT_SITU WHERE NUMPAC=v_numpac AND PAIEZAD=v_paiezad; 
			  IF v_matric IS NULL THEN v_matric:=NVL(:NEW.MATRIC,:OLD.MATRIC); END IF; ';
            ELSIF v_typeTable ='p' THEN
              PROC           :=PROC||' 
			  SELECT MATRIC INTO v_matric FROM SECUPACMAT WHERE NUMPAC=v_numpac AND PACMAT=v_pacmat; ';
            END IF;
            
            -- Le traitement en lui-même : certains évènements nécessitent d'avoir une clé secondaire spécifique, sinon on positionne '*'
	        v_cleSecondaireDex := '''*''';
	            
	        -- On boucle sur les données de l'évènement afin de calculer la CLE_SECONDAIRE si besoin 
	        -- On en profite pour construire une partir du code de la partie UPDATING
	        OPEN cur_donneesDex;
	   		LOOP FETCH cur_donneesDex INTO lig_donneeDex ;
				IF cur_donneesDex%NOTFOUND OR (v_eventDexPrec IS NOT NULL AND NOT v_eventDexPrec=lig_donneeDex.EVENT) THEN
	    	        -- Dernière donnée pour l'event
	            	PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
					END IF; -- FIN :NEW<>:OLD
					IF v_processEventDex THEN
					eventsTab.EXTEND ;
					eventsTab(eventsTab.LAST) :='''||v_eventDexPrec||''';
					END IF; -- FIN v_processEventDex
					';
	      		END IF;
	      		IF v_eventDexPrec IS NULL OR (NOT cur_donneesDex%NOTFOUND AND NOT v_eventDexPrec=lig_donneeDex.EVENT) THEN
	        		-- Première donnée pour l'event
	        		PROC_DEX_UPDATING := PROC_DEX_UPDATING||' 
					v_processEventDex := FALSE; 
					IF FALSE THEN NULL; ';
	      		END IF;
	      		
	      	EXIT WHEN cur_donneesDex%NOTFOUND;
	  			-- Traitement spécifique à certains évènements qui stocke une CLE_SECONDAIRE
	      		IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'precedenceOrdCompteBancaire' THEN
	  				-- BANQUE : On parcourt les données de l'event et trouver celle qui correspond à la cle dont on a besoin
	          		v_cleSecondaireDex := 'nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';
	          		
	          	ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentConjointBirthOrder' THEN
	          		-- CONJOINT : Dans le cas où une donnée 'dependentConjointBirthOrder' a été paramétrée, 
	          		-- c'est cette valeur qui va être prise
	          		v_cleSecondaireDex := '''C;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';
	          	
	          	ELSIF INSTR(lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT, 'dependentConjoint') = 1 AND INSTR(v_cleSecondaireDex, 'C;') = 0 THEN
	  				-- CONJOINT : La première fois que l'on trouve une donnée commençant par 'dependentConjoint', on positionne la clé secondaire
	  				-- avec comme valeur "01" pour le "BirthOrder"
	  				v_cleSecondaireDex := '''C;01''';
	  				
	  			ELSIF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' OR lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthDate' THEN
	  				-- ENFANT : La clé secondaire pour les enfants est composée de 2 éléments à mettre dans un certain ordre : E;BirthOrder;BirthDate
	  				IF v_cleSecondaireDex = '''*''' THEN
	  					IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
	  						v_cleSecondaireDex := '''E;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';
	  					ELSE
	  						v_cleSecondaireDex := '||TO_CHAR(nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
	  					END IF;
	  					--v_cleSecondaireDex := v_cleSecondaireDex || '||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')';
	  				ELSE
	  					IF lig_donneeDex.NOM_DONNEE_DEX_OU_EVENT = 'dependentEnfantBirthOrder' THEN
	  						v_cleSecondaireDex := '''E;''||nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||')||'';''' || v_cleSecondaireDex;
	  					ELSE
	  						v_cleSecondaireDex := v_cleSecondaireDex || '||'';''||TO_CHAR(nvl(:NEW.'||lig_donneeDex.NOM_DONNEE||', :OLD.'||lig_donneeDex.NOM_DONNEE||'), ''YYYY-MM-DD'')';
	  					END IF;
	  				END IF;
	  			END IF;
	  			
	      		PROC_DEX_UPDATING :=PROC_DEX_UPDATING||'
		  		ELSIF (:NEW.'||lig_donneeDex.NOM_DONNEE||'<>:OLD.'||lig_donneeDex.NOM_DONNEE||' OR (:NEW.'||lig_donneeDex.NOM_DONNEE||' IS NOT NULL AND :OLD.'||lig_donneeDex.NOM_DONNEE||' IS NULL) OR (:NEW.'||lig_donneeDex.NOM_DONNEE||' IS NULL AND :OLD.'||lig_donneeDex.NOM_DONNEE||' IS NOT NULL)) ';
	      
		  		IF lig_donneeDex.CONDITION IS NOT NULL THEN
	        		PROC_DEX_UPDATING := PROC_DEX_UPDATING||' AND '||regexp_replace(regexp_replace(lig_donneeDex.CONDITION, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(:new.\1,:old.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(:new.\2,:old.\2)=\1');
	      		END IF;
	      		PROC_DEX_UPDATING := PROC_DEX_UPDATING||'  
	 		  		THEN v_processEventDex := TRUE; ';
	      		v_eventDexPrec:=lig_donneeDex.EVENT;
	    	END LOOP;
	    	CLOSE cur_donneesDex;        
	        
	    	PROC          :=PROC||' 
			v_dexCleSecondaire := '||v_cleSecondaireDex||';';
    	
            IF nom_table ='DIC_ADM_PERSO' THEN
              -- Pour DIC_ADM_PERSO, on ne gère que la modification
              PROC         :=PROC||' 
			  IF UPDATING THEN ';
            ELSIF nom_table ='DIC_ADM_CONTRAT' THEN
              -- Pour DIC_ADM_CONTRAT, on gère en spécifique
              -- - La création --> Evènement worker.hire
              -- - La suppression --> Evènement worker.terminate ???
              -- - La mise à jour de DSFCN --> Evènement worker.terminate (ou autre pour la modification ou l'annulation de départ ???)
              PROC :=PROC||' 
				IF INSERTING THEN
				 MERGE INTO DEX_EVENTS DE USING (SELECT v_matric AS MATRIC,''worker.hire'' AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
				 WHEN MATCHED THEN UPDATE SET ACTION=''C'',DATE_MODIF=CURRENT_TIMESTAMP,DATE_ENVOI_MIN=:NEW.DSDCN
				 WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF,DATE_ENVOI_MIN) VALUES (v_matric,''worker.hire'',v_dexCleSecondaire,''Z'',CURRENT_TIMESTAMP,:NEW.DSDCN);
				ELSIF DELETING THEN
				 MERGE INTO DEX_EVENTS DE USING (SELECT v_matric AS MATRIC,''worker.terminate'' AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
				 WHEN MATCHED THEN UPDATE SET ACTION=''S'',DATE_MODIF=CURRENT_TIMESTAMP,DATE_ENVOI_MIN=:OLD.DSDCN
				 WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF,DATE_ENVOI_MIN) VALUES (v_matric,''worker.terminate'',v_dexCleSecondaire,''S'',CURRENT_TIMESTAMP,:OLD.DSDCN);
				ELSIF :NEW.DSFCN<>:OLD.DSFCN OR (:NEW.DSFCN IS NOT NULL AND :OLD.DSFCN IS NULL) OR (:NEW.DSFCN IS NULL AND :OLD.DSFCN IS NOT NULL) THEN
				 IF :NEW.DSFCN IS NOT NULL AND :OLD.DSFCN IS NULL THEN
				  MERGE INTO DEX_EVENTS DE USING (SELECT v_matric AS MATRIC,''worker.terminate'' AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
				  WHEN MATCHED THEN UPDATE SET ACTION=''S'',DATE_MODIF=CURRENT_TIMESTAMP,DATE_ENVOI_MIN=:NEW.DSFCN
				  WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF,DATE_ENVOI_MIN) VALUES (v_matric,''worker.terminate'',v_dexCleSecondaire,''M'',CURRENT_TIMESTAMP,:NEW.DSFCN);
				 ELSE
				  NULL; -- On fait quoi si on modifie une date de départ, ou qu''on annule un départ ???
				 END IF;
				ELSE ';
            ELSE
            	-- Partie insert pour les autres tables
            	-- Pour les autres tables, en création et suppression, on insère une ligne par évènement potentiellement généré par la table, avec le bon code action
              	PROC :=PROC||' 
				-- DEBUT INSERTING / DELETING
				IF INSERTING OR DELETING THEN 
				IF INSERTING THEN 
				v_dexaction := ''C''; 
				ELSE 
				v_dexaction := ''S''; 
				END IF;';
				
              OPEN cur_eventsDex;
              LOOP
                FETCH cur_eventsDex INTO lig_eventDex ;
                EXIT
              WHEN cur_eventsDex%NOTFOUND;
                IF lig_eventDex.CONDITION IS NOT NULL THEN
                  PROC                    :=PROC||' 
				  IF '||regexp_replace(regexp_replace(lig_eventDex.CONDITION, '([^ ]+)[ ]*=[ ]*(''[^ ]+'')', 'nvl(:new.\1,:old.\1)=\2'), '(''[^ ]+'')[ ]*=[ ]*([^ ]+)', 'nvl(:new.\2,:old.\2)=\1')||' THEN ';
                END IF;
                PROC                      :=PROC||' 
				MERGE INTO DEX_EVENTS DE USING (SELECT v_matric AS MATRIC,'''||lig_eventDex.EVENT||''' AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
				WHEN MATCHED THEN UPDATE SET ACTION=v_dexaction,DATE_MODIF=CURRENT_TIMESTAMP
				WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF) VALUES (v_matric,'''||lig_eventDex.EVENT||''',v_dexCleSecondaire, v_dexaction,CURRENT_TIMESTAMP); ';
                IF lig_eventDex.CONDITION IS NOT NULL THEN
                  PROC                    :=PROC||' 
				  	END IF; ';
                END IF;
              END LOOP;
              CLOSE cur_eventsDex;
              PROC          :=PROC||'-- FIN INSERTING / DELETING ';
              PROC :=PROC||' 
			  ELSE -- DEBUT UPDATING';
            END IF;
            -- Début de l'updating commun à toutes les tables
            PROC           :=PROC||' 
			eventsTab.delete; ';
			
            v_eventDexPrec := NULL;
            -- On rajoute ce qui a été calculé plus haut
        	PROC          :=PROC||PROC_DEX_UPDATING;
        	
            PROC             :=PROC||' 
			IF eventsTab.count>0 THEN
			for i in 1..eventsTab.count loop
			MERGE INTO DEX_EVENTS DE USING (SELECT v_matric AS MATRIC,eventsTab(i) AS EVENT, v_dexCleSecondaire AS CLE_SECONDAIRE FROM DUAL) Z ON (Z.MATRIC=DE.MATRIC AND Z.EVENT=DE.EVENT AND Z.CLE_SECONDAIRE=DE.CLE_SECONDAIRE)
			WHEN MATCHED THEN UPDATE SET ACTION=''M'',DATE_MODIF=CURRENT_TIMESTAMP
			WHEN NOT MATCHED THEN INSERT (MATRIC,EVENT,CLE_SECONDAIRE,ACTION,DATE_MODIF) VALUES (v_matric,eventsTab(i),v_dexCleSecondaire,''M'',CURRENT_TIMESTAMP);
			end loop;
			END IF; -- FIN eventsTab.count>0
			END IF; -- FIN UPDATING
			';
            IF date_eff_exists>0 THEN
              PROC           :=PROC||' 
			  END IF; -- FIN SYSDATE BETWEEN DATE_EFF AND DATE_FIN 
			  ';
            END IF;
            PROC :=PROC||' -- FIN TRAITEMENT DEX'; 
          END IF;
          -- FIN TRAITEMENT DEX
          
          PROC :=PROC||' 
		  END BEFORE EACH ROW;';
          IF nom_table IN ('DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
            PROC          :=PROC||' AFTER EACH ROW IS BEGIN ';
            IF nom_table   = 'DIC_ADM_CONTRAT_HISTO' THEN
              PROC        := PROC|| TRG_CONTRAT_HISTO_AFTER_ROW();
            ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
              PROC        := PROC|| DIC_PERIOD_REC_HISTO_AFTER_ROW();
            END IF;
            PROC :=PROC||' END AFTER EACH ROW;';
          END IF;
          IF nom_table IN ('DIC_ADM_PERSO','DIC_ADM_PERSO_HISTO','DIC_ADM_CONTRAT','DIC_ADM_CONTRAT_HISTO','DIC_PERIODES_RECUEIL_HIS') THEN
            PROC          :=PROC||' AFTER STATEMENT IS BEGIN';
            IF nom_table   ='DIC_ADM_PERSO' THEN
              PROC        :=PROC||TRG_PERSO_AFTER_STMNT();
            ELSIF nom_table='DIC_ADM_PERSO_HISTO' THEN
              PROC        :=PROC||TRG_PERSO_HISTO_AFTER_STMNT();
            ELSIF nom_table='DIC_ADM_CONTRAT' THEN
              PROC        :=PROC||TRG_CONTRAT_AFTER_STMNT();
            ELSIF nom_table='DIC_ADM_CONTRAT_HISTO' THEN
              PROC        :=PROC||TRG_CONTRAT_HISTO_AFTER_STMNT();
            ELSIF nom_table='DIC_PERIODES_RECUEIL_HIS' THEN
              PROC        :=PROC||DIC_PERIODES_REC_H_AFTER_STMNT();
            END IF;
            PROC:=PROC||'END AFTER STATEMENT;';
          END IF;
          PROC :=PROC||' END TRG_'||NOM_TABLE||';';
          EXECUTE_IMMEDIATE_STRING( PROC,0);
        END IF;
      END IF;
    END TGE_CREATE_TRIGGER;
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
DELETE FROM BATCH_DESCRIPTION WHERE FAMILLE = 'BATCH_PTG' AND CLASSE_NAME = 'fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Evt_Gestil'
##
BATCH_DESCRIPTION
=SQL IFEXIST=BATCH_DESCRIPTION=
INSERT INTO BATCH_DESCRIPTION (FAMILLE,CLASSE_NAME,LIBELLE,TYPE_UTILISATEUR,ARRET_TRT) VALUES ('BATCH_PTG','fr.adp.com.gxp.std.modules.lib.objects.gta.gestil.traitement.Traitement_Evt_Gestil','Evènement Gestil','CLIENT','OUI')
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'BDG00091' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'BDG00091', 'GTA', 'fr_fr', 0, 'Vous devez sélectionner un évènement Gestil', 1 )
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
DELETE FROM SYS_DEF_ERREURS WHERE CODERR = 'BDG00092' AND CODLANG = 'fr_fr' AND NIV_DEFINITION = 0
##
SYS_DEF_ERREURS
=SQL IFEXIST=SYS_DEF_ERREURS=
INSERT INTO SYS_DEF_ERREURS ( CODERR, CODMOD, CODLANG, NIV_DEFINITION, LIBERR, TYPERR ) VALUES ( 'BDG00092', 'GTA', 'fr_fr', 0, 'Vous devez sélectionner une donnée GXP', 1 )
##
SYS_DEF_ERREURS
==
DELETE FROM SYS_DEF_ERREURS WHERE CODERR IN ('GENWKF61','GENWKF62','GENWKF63','GENWKF64','GENWKF65','GENWKF66','GENWKF67','GENWKF68','GENWKF69','GENWKF70') AND CODLANG = 'fr_fr' AND CODMOD ='GEN'
'GENWKF61','GEN','fr_fr','0','La date du départ annulée ne peut pas être antérieure à la date limite de la rétroactivité. Vous ne pouvez pas poursuivre le workflow.','1'
'GENWKF62','GEN','fr_fr','0','Ce contrat contient plusieurs historiques. Ils seront tous supprimés à la validation du workflow.','2'
'GENWKF63','GEN','fr_fr','0','La date de début de contrat doit être inférieure au "#1" (Date de début du contrat suivant)','1'
'GENWKF64','GEN','fr_fr','0','La date de début de contrat doit être supérieure au "#1" (Date limite rétro)','1'
'GENWKF65','GEN','fr_fr','0','La date de départ ne doit pas être inférieure au ‘#1'' (Date limite rétro)','1'
'GENWKF66','GEN','fr_fr','0','La date de départ n''est pas modifiée.','1'
'GENWKF67','GEN','fr_fr','0','La date de départ ne peut pas être inférieure ou égale à ‘#1'' (date de début de contrat)','1'
'GENWKF68','GEN','fr_fr','0','La date de départ ne peut pas être supérieure à ‘#1'' (date de début du contrat suivant)','1'
'GENWKF69','GEN','fr_fr','0','La date de début de contrat doit être inférieure à "#1" (date de fin du contrat)','1'
'GENWKF70','GEN','fr_fr','0','Le salarié est toujours présent. Vous ne pouvez pas poursuivre ce workflow.','1'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_FORM_AMENAG_TT' and IDREQUETE = '1'
'TAB_RD_FORM_AMENAG_TT','1','Utilisateur','TGE_REF_FAT','CODE_FORME_TP,LIBELLE_FORME_TP','CODE_FORME_TP,LIBELLE_FORME_TP',null,'0','false','CODE_FORME_TP',null,'Code forme aménagement Tps travail activité partielle',null
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO' and IDREQUETE = '1'
'TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C left join PHOTO_DIC_ADM_CONTRAT PH ON C.NUMPAC  = PH.NUMPAC AND C.PACMAT = PH.PACMAT AND C.NUMCNT = PH.NUMCNT','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy''))  AND PH.NUMPAC IS NULL AND H.MATRIC=''@GEN_MATRIC@''','0','false','C.DSDCN ASC',null,'Périodes d''emploi non présentes dans la photo','numéro de contrat, date début de période, date fin de période, nature de contrat, type de réembauche prévisionnel'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_WKF_PERIODE_EMPLOI_RETRO' and IDREQUETE = '1'
'TAB_RD_WKF_PERIODE_EMPLOI_RETRO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C, TGE_REF_PAC P','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) AND P.NUMPAC = C.NUMPAC AND  P.DEB_HISTO_RETRO IS NOT NULL AND P.NB_MOIS_RETRO IS NOT NULL AND C.DSDCN &gt;= TO_DATE(GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM'')) || ''01'', ''YYYYMMDD'') AND H.MATRIC =  ''@GEN_MATRIC@''','0','false','C.DSDCN ASC',null,'Périodes d''emploi dont la date d''embauche est incluse dans la profondeur de rétro','numéro de contrat, date début contrat, date fin contrat, nature de contrat, type de réembauche prévisionnel'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='REG_RD_WKF_DTFIN_CONTRAT_NULL' and IDREQUETE = '2'
'REG_RD_WKF_DTFIN_CONTRAT_NULL','2','Utilisateur','DIC_ADM_CONTRAT A , TGE_REF_PAC B','COUNT(*)','COUNT(*)','A.NUMPAC=B.NUMPAC and A.NUMPAC =''%1'' AND A.PACMAT=''%2'' AND A.NUMCNT=''%3''  AND A.DSFCN IS NOT NULL AND A.DSFCN<>TO_DATE(''20991231'',''yyyymmdd'') AND ( B.DEB_RETRO IS NULL OR B.PERIODEENCOURS < B.DEB_RETRO ) AND  (B.MPE IS NULL OR B.MPE = ''N'' )','0',null,null,null,'Contrat en cours avec date de sortie valorisee',null
##
SYS_REQUETES_JSP
==
DELETE SYS_REQUETES_JSP WHERE  IDREQUETE='1' AND NOMPAGE = 'TAB_RD_WKF_PERIODE_EMPLOI_RETRO_FIN'
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_WKF_PERIODE_EMPLOI_RETRO_FIN','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C, TGE_REF_PAC P, TGE_REF_TDR T','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.DSFCN IS NOT NULL AND C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND ¿NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) AND P.NUMPAC = C.NUMPAC AND  P.DEB_HISTO_RETRO IS NOT NULL AND P.NB_MOIS_RETRO IS NOT NULL AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) >= TO_DATE(GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM'')) || ''01'', ''YYYYMMDD'') AND C.TYPE_REEMBAUCHE_PREV = T.TYPE_REEMBAUCHE AND C.NUMPAC = T.NUMPAC AND (P.MPE != ''O'' OR T.CONSECUTIVE = ''N'') AND H.MATRIC =  ''@GEN_MATRIC@''','0','false','C.DSDCN ASC',NULL,'Périodes d''emploi dont la date de départ est incluse dans la profondeur de rétro ','numéro de contrat, date début contrat, date fin contrat, nature de contrat, type de réembauche prévisionnel'
##
SYS_REQUETES_JSP
==
DELETE SYS_REQUETES_JSP WHERE  IDREQUETE='1' AND NOMPAGE in ('TAB_RD_WKF_PERIODE_EMPLOI_RETRO', 'TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO')
##
SYS_REQUETES_JSP (NOMPAGE,IDREQUETE,NOMBASE,NOMTABLE,LISTCOLAFF,LISTCOLSET,CLAUSEWHERE,CLAUSEMAX,CLAUSEDISTINCT,CLAUSEORDRE,DESCREQ,LIBREQ,LISTLIBCOLAFF)
'TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C left join PHOTO_DIC_ADM_CONTRAT PH ON C.NUMPAC  = PH.NUMPAC AND C.PACMAT = PH.PACMAT AND C.NUMCNT = PH.NUMCNT','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy''))  AND PH.NUMPAC IS NULL AND H.MATRIC=''@GEN_MATRIC@''','0','false','C.DSDCN ASC',null,'Périodes d''emploi non présentes dans la photo','numéro de contrat, date début de période, date fin de période, nature de contrat, type de réembauche'
'TAB_RD_WKF_PERIODE_EMPLOI_RETRO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C, TGE_REF_PAC P','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) AND P.NUMPAC = C.NUMPAC AND  P.DEB_HISTO_RETRO IS NOT NULL AND P.NB_MOIS_RETRO IS NOT NULL AND C.DSDCN &gt;= TO_DATE(GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM'')) || ''01'', ''YYYYMMDD'') AND H.MATRIC =  ''@GEN_MATRIC@''','0','false','C.DSDCN ASC',null,'Périodes d''emploi dont la date d''embauche est incluse dans la profondeur de rétro','numéro de contrat, date début contrat, date fin contrat, nature de contrat, type de réembauche'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_WKF_PERIODE_EMPLOI_RETRO' and IDREQUETE = '1'
'TAB_RD_WKF_PERIODE_EMPLOI_RETRO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C, TGE_REF_PAC P','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE,TO_CHAR(H.DATE_EFF^''dd.MM.yyyy'')','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) AND P.NUMPAC = C.NUMPAC AND  P.DEB_HISTO_RETRO IS NOT NULL AND P.NB_MOIS_RETRO IS NOT NULL AND C.DSDCN &gt;= TO_DATE(GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM'')) || ''01'', ''YYYYMMDD'') AND H.MATRIC =  ''@GEN_MATRIC@''','0',null,'C.DSDCN ASC',null,'Périodes d''emploi dont la date d''embauche est incluse dans la profondeur de rétro','numéro de contrat, date début contrat, date fin contrat, nature de contrat, type de réembauche'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO' and IDREQUETE = '1'
'TAB_RD_WKF_PERIODE_EMPLOI_NON_PHOTO','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C left join PHOTO_DIC_ADM_CONTRAT PH ON C.NUMPAC  = PH.NUMPAC AND C.PACMAT = PH.PACMAT AND C.NUMCNT = PH.NUMCNT','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE,TO_CHAR(H.DATE_EFF^''dd.MM.yyyy'')','C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy''))  AND PH.NUMPAC IS NULL AND H.MATRIC=''@GEN_MATRIC@''','0',null,'C.DSDCN ASC',null,'Périodes d''emploi non présentes dans la photo','numéro de contrat, date début de période, date fin de période, nature de contrat, type de réembauche'
##
SYS_REQUETES_JSP
==
delete from SYS_REQUETES_JSP where NOMPAGE='TAB_RD_WKF_PERIODE_EMPLOI_RETRO_FIN' and IDREQUETE = '1'
'TAB_RD_WKF_PERIODE_EMPLOI_RETRO_FIN','1','Administrateur','DIC_ADM_CONTRAT_HISTO H,DIC_ADM_CONTRAT C, TGE_REF_PAC P, TGE_REF_TDR T','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV','C.NUMCNT, TO_CHAR(C.DSDCN^''dd.MM.yyyy''), TO_CHAR(C.DSFCN^''dd.MM.yyyy''), H.ZT061, C.TYPE_REEMBAUCHE_PREV,TO_CHAR(H.DATE_EFF^''dd.MM.yyyy'')','C.DSFCN IS NOT NULL AND C.NUMPAC=H.NUMPAC AND H.PACMAT=C.PACMAT AND C.NUMCNT = H.NUMCNT AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) = NVL(H.DATE_FIN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) AND P.NUMPAC = C.NUMPAC AND  P.DEB_HISTO_RETRO IS NOT NULL AND P.NB_MOIS_RETRO IS NOT NULL AND NVL(C.DSFCN,TO_DATE(''31.12.2099'',''dd.MM.yyyy'')) &gt;= TO_DATE(GREATEST(DEB_HISTO_RETRO, TO_CHAR(ADD_MONTHS(TO_DATE(PERIODEENCOURS, ''YYYYMM''), -NB_MOIS_RETRO), ''YYYYMM'')) || ''01'', ''YYYYMMDD'') AND C.TYPE_REEMBAUCHE_PREV = T.TYPE_REEMBAUCHE AND C.NUMPAC = T.NUMPAC AND (P.MPE != ''O'' OR T.CONSECUTIVE = ''N'') AND H.MATRIC =  ''@GEN_MATRIC@''','0',null,'C.DSDCN ASC',null,'Périodes d''emploi dont la date de départ est incluse dans la profondeur de rétro','numéro de contrat, date début contrat, date fin contrat, nature de contrat, type de réembauche prévisionnel'
##
SYS_SCH_JSON
==
delete from SYS_SCH_JSON where NOM_PAGE = 'Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntitesDecentralise' and NOM_JSON in ('ArbreEntiteCMJsonServlet', 'ArbreEntiteSuppJsonServlet')
'Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntitesDecentralise', 'ArbreEntiteCMJsonServlet'
'Ext.adp.Modules.Structures.Parametrage.GestionArbreEntites.ArbreEntitesDecentralise', 'ArbreEntiteSuppJsonServlet'
##
TAG_CHARSET=@€éèç
##
SYS_USR_PREFERENCES_MAP
=SQL IFEXIST=SYS_USR_PREFERENCES_MAP=
DROP TABLE SYS_USR_PREFERENCES_MAP
##
SYS_USR_PREFERENCES_MAP
=SQL IFNOTEXIST=SYS_USR_PREFERENCES_MAP=
CREATE TABLE SYS_USR_PREFERENCES_MAP (LOGIN VARCHAR2(32) PRIMARY KEY, DATA CLOB)
##
SYS_VARSYS
==
DELETE FROM SYS_VARSYS WHERE MODULE = 'UX' AND CODVAR = 'LIMIT_RECURSIVITE_SUBALTERNE'
'UX','LIMIT_RECURSIVITE_SUBALTERNE','1','Entier','Ce nombre fixe la profondeur de la récursivité pour récuperer la liste des subalternes indirects afin de prévenir d'une récursivité sans fin'
##
SYS_VARSYS
==
DELETE FROM SYS_VARSYS WHERE MODULE = 'UX' AND CODVAR = 'NB_COLLAB_MAX'
'UX','NB_COLLAB_MAX','500','Entier','Ce nombre fixe le nombre maximum des subalternes directe et  indirects '
##
TAG_CHARSET=@€éèç
##
TGE_GESTIL_DATAVAL_DOUBLON
=SQL IFNOTEXIST=TGE_GESTIL_DATAVAL_DOUBLON=
CREATE TABLE TGE_GESTIL_DATAVAL_DOUBLON ( DONNEE_GESTIL VARCHAR2(50 BYTE), DESCRIPTIONS VARCHAR2(50 BYTE), FAMILLE VARCHAR2(50 BYTE),  DONNEE_GXP VARCHAR2(50 BYTE), EVT VARCHAR2(3 BYTE) DEFAULT '*' ,  TRTPARTICULIER VARCHAR2(4000 BYTE),   CONSTRAINT PK_TGEGESTILDATAVALDOUBLON PRIMARY KEY (DONNEE_GESTIL, DONNEE_GXP,EVT))
##
TGE_GESTIL_DATAVAL_DOUBLON
=SQL IFNOTEXIST=TGE_GESTIL_DATAVAL_DOUBLON=EVT=
ALTER TABLE TGE_GESTIL_DATAVAL_DOUBLON ADD EVT VARCHAR2(3 BYTE) default '*' not null
##
TGE_GESTIL_DATAVAL_DOUBLON
=SQL IFNOTEXIST=TGE_GESTIL_DATAVAL_DOUBLON=TRTPARTICULIER=
ALTER TABLE TGE_GESTIL_DATAVAL_DOUBLON ADD TRTPARTICULIER VARCHAR2(4000 BYTE)
##
TAG_CHARSET=@€éèç
##
TGE_GESTIL_TRT_PARTICULIER
=SQL IFNOTEXIST=TGE_GESTIL_TRT_PARTICULIER=
CREATE TABLE TGE_GESTIL_TRT_PARTICULIER (DONNEE_GXP VARCHAR2(50 BYTE),TRTPARTICULIER VARCHAR2(4000 BYTE),ORDRE NUMBER,PRIMARY KEY (DONNEE_GXP))
##
TGE_REF_BOE
=SQL=
DECLARE
  allready_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(allready_null, -1451);
BEGIN
  execute immediate 'ALTER TABLE TGE_REF_BOE MODIFY LIBELLE_STATUT_BOETH_1 NULL' ;
  execute immediate 'ALTER TABLE TGE_REF_BOE MODIFY LIBELLE_STATUT_BOETH_2 NULL' ;
EXCEPTION
  WHEN allready_null THEN
    NULL;
END;
##
TGE_REF_CCN
=SQL=
DECLARE
  allready_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(allready_null, -1451);
BEGIN
  execute immediate 'ALTER TABLE TGE_REF_CCN MODIFY LIBELLE_COLLEGE_CNIEG NULL' ;
EXCEPTION
  WHEN allready_null THEN
    NULL;
END;
##
TGE_REF_DIS
=SQL=
DECLARE
  allready_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(allready_null, -1451);
BEGIN
  execute immediate 'ALTER TABLE TGE_REF_DIS MODIFY LIBELLE_CPLT_DISPOSITIF NULL' ;
EXCEPTION
  WHEN allready_null THEN
    NULL;
END;
##
TAG_CHARSET=@€éèç
##
TGE_REF_FAT
=SQL IFNOTEXIST=TGE_REF_FAT=
CREATE TABLE TGE_REF_FAT (CODE_FORME_TP VARCHAR2(2) NOT NULL ENABLE, LIBELLE_FORME_TP VARCHAR2(32) , PRIMARY KEY ( CODE_FORME_TP ) )
##
TGE_REF_FOR
=SQL=
DECLARE
  allready_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(allready_null, -1451);
BEGIN
  execute immediate 'ALTER TABLE TGE_REF_FOR MODIFY LIBELLE_NIV_FORM NULL' ;
EXCEPTION
  WHEN allready_null THEN
    NULL;
END;
##
TGE_REF_MAPDO
==
DELETE FROM TGE_REF_MAPDO WHERE NUMPAC='*' AND TABLEGXP='DIC_ADM_CONTRAT_HISTO' AND ELEMENT = 'AB70'
'*','AB70','**','ZAB70','DIC_ADM_CONTRAT_HISTO',null,null,null,null,null,'N'
##
TGE_REF_MAPVR
==
DELETE FROM TGE_REF_MAPVR WHERE NUMPAC = '*' AND TABLEZADIG = 'FAT99' AND CHAMPZADIG='A02'
##
TGE_REF_MAPVR
==
INSERT INTO TGE_REF_MAPVR(NUMPAC, TABLEZADIG, CHAMPZADIG, TABLEGXP, FICHIER, DONNEEGXP ,TYPEGXP ,LONGUEURGXP ,NBDECIMALESGXP, FORMATDATEGXP, TABLETRANS, APPELEXIT,DONNEEGXP_FIN ) VALUES ('*', 'FAT99', 'A02', 'TGE_REF_FAT',null, 'CODE_FORME_TP','A','2' ,null,null,null,null,null )
##
TGE_REF_MAPVR
==
DELETE FROM TGE_REF_MAPVR WHERE NUMPAC = '*' AND TABLEZADIG = 'FAT99' AND CHAMPZADIG='V01'
##
TGE_REF_MAPVR
==
INSERT INTO TGE_REF_MAPVR(NUMPAC, TABLEZADIG, CHAMPZADIG, TABLEGXP, FICHIER, DONNEEGXP ,TYPEGXP ,LONGUEURGXP ,NBDECIMALESGXP, FORMATDATEGXP, TABLETRANS, APPELEXIT,DONNEEGXP_FIN ) VALUES ('*', 'FAT99', 'V01', 'TGE_REF_FAT',null, 'LIBELLE_FORME_TP','A','32' ,null,null,null,null,null )
##
TGE_REF_SER
=SQL=
DECLARE
  allready_null EXCEPTION;
  PRAGMA EXCEPTION_INIT(allready_null, -1451);
BEGIN
  execute immediate 'ALTER TABLE TGE_REF_SER MODIFY LIBELLE_CATEG_SERVICE NULL' ;
EXCEPTION
  WHEN allready_null THEN
    NULL;
END;
