##
TAG_CHARSET=@€éèç
##
ADM_ADD_SCH_APPLICATION
=SQL=
create or replace FUNCTION ADM_ADD_SCH_APPLICATION ( p_code_schema            IN NUMBER, p_lib_1                  IN VARCHAR2,
 p_description            IN VARCHAR2,
 code_langue              IN VARCHAR2)
 RETURN SCH_ELEMENT
 
 IS
 cnt number;
 p_obj_application        SCH_ELEMENT;
 
 BEGIN
 p_obj_application := sch_element (p_code_schema, 0, p_lib_1, NULL, 0, 0, 1);
 
 BEGIN
 /* VERIFICATION DANS SYS_SCH_ELEMENT */
 SELECT NVL (code_element, 0) INTO p_obj_application.code_element FROM sys_sch_element
 WHERE (libelle = p_lib_1 AND niveau = 1) AND ROWNUM = 1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_application.code_element = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCH_ELEMENT */
 SELECT MAX (code_element) + 1 INTO p_obj_application.code_element FROM (select code_element from sys_sch_element UNION all select 0 from dual);
 
 INSERT INTO sys_sch_element (niveau, code_element, libelle, nom_page, code_role, description, tags, TYPE)
 VALUES (p_obj_application.niveau, p_obj_application.code_element, p_obj_application.libelle, NULL, NULL, p_description, NULL, NULL);
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (C) [code_element] ' || p_obj_application.code_element || ' [libelle] ' || p_obj_application.libelle || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (E) [code_element] ' || p_obj_application.code_element || ' [libelle] ' || p_obj_application.libelle || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 BEGIN
 SELECT count(*) INTO cnt FROM sys_sch_element_ml a
 WHERE a.code_element = p_obj_application.code_element AND a.CODLANG = code_langue AND a.niveau = p_obj_application.niveau;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (cnt = 0) THEN
 INSERT INTO sys_sch_element_ml (CODLANG, NIVEAU, CODE_ELEMENT, LIBELLE)
 VALUES (code_langue, p_obj_application.niveau, p_obj_application.code_element, p_obj_application.libelle);
 END IF;
 
 
 /* VERIFICATION DANS SYS_SCHEMAS */
 BEGIN
 SELECT s1.code_asso INTO p_obj_application.code_asso
 FROM sys_sch_element e1, sys_schemas s1
 WHERE s1.code_schema = p_code_schema
 AND s1.code_elt = e1.code_element
 AND s1.niveau = e1.niveau
 AND s1.niveau = '1'
 AND e1.libelle = p_lib_1;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 NULL;
 END;
 
 IF (p_obj_application.code_asso = 0) THEN
 /* CREATION ELEMENT DANS SYS_SCHEMAS */
 SELECT MAX (code_asso) + 1 INTO p_obj_application.code_asso FROM (select code_asso from sys_schemas UNION all select 0 from dual);
 p_obj_application.code_asso_pere := 0;
 
 INSERT INTO sys_schemas (code_schema, code_asso, code_asso_pere, code_elt, niveau, ordre)
 VALUES (p_obj_application.code_schema, p_obj_application.code_asso, p_obj_application.code_asso_pere, p_obj_application.code_element, p_obj_application.niveau, 0);
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (C) [code_schema] ' || p_obj_application.code_schema || ' [code_asso] ' || p_obj_application.code_asso || ' [code_asso_pere) ' || p_obj_application.code_asso_pere || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 --ELSE
 --dbms_output.put_line('ADM_ADD_SCH_APPLICATION: (E) [code_schema] ' || p_obj_application.code_schema || ' [code_asso] ' || p_obj_application.code_asso || ' [code_asso_pere] ' || p_obj_application.code_asso_pere || ' [niveau] ' || p_obj_application.niveau);
 --FIXME utiliser la procédure trace_dbms_output()
 END IF;
 
 RETURN p_obj_application;
 END ADM_ADD_SCH_APPLICATION; 
