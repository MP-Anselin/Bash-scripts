#!/bin/bash

GIT_DIR=$(git rev-parse --show-toplevel)
GIT_CURRENT_BRANCH=$(git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3)

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
regexWithoutLastFolder="s,/*[^/]\+/*$,,"
SCRIPT_PREV_DIR=$(echo "$SCRIPT_DIR" | sed "$regexWithoutLastFolder")

## Static global with the path of each folder
CURRENT_FOLDER="$SCRIPT_PREV_DIR"
RESULT_FOLDER="$CURRENT_FOLDER/results"
LOG_PATH="$RESULT_FOLDER/log"
SCRIPT_NAME="gitdiff-branches-data"
SCRIPT_PATH="$CURRENT_FOLDER/bash/$SCRIPT_NAME"
GIT_DIFF_BRANCHES='git-diff-branches.log'
GIT_DIFF_BRANCH_PATH="$LOG_PATH/$GIT_DIFF_BRANCHES"
DIFFERENCE='differences.log'
DIFFERENCE_PATH="$LOG_PATH/$DIFFERENCE"
MERGE_FILE='git-diff-merge-file-mod.txt'
MERGE_PATH="$RESULT_FOLDER/$MERGE_FILE"
PATH_FIRST_SCRIPT="$CURRENT_FOLDER/bash/gitdiff-with-line"

## Special cases
TABLES_FOLDER="Tables"
STRUCTURES_FOLDER="Structures"
AUTRES_FOLDER="Autres"
FOLDER_FILES_PARSED="$RESULT_FOLDER/files-parsed"
TABLES_FILES_PARSED="tables-files-parsed.txt"
FOLDER_TABLES_FILES_PARSED="$FOLDER_FILES_PARSED/$TABLES_FILES_PARSED"
STRUCTURES_FILES_PARSED="structures-files-parsed.txt"
FOLDER_STRUCTURES_FILES_PARSED="$FOLDER_FILES_PARSED/$STRUCTURES_FILES_PARSED"
AUTRES_FILES_PARSED="autres-files-parsed.txt"
FOLDER_AUTRES_FILES_PARSED="$FOLDER_FILES_PARSED/$AUTRES_FILES_PARSED"

INSTALL_FOLDER="Install"
REPORTS_FOLDER="Reports"

##Function create array of special folder, if there is special folder to extract the data on special order
## attention to the order inside of the array the script will merge the data related to the order of the array
function arrayOfSpecialFolder() {
  local -n SpecialFolder=$1
  SpecialFolder[0]="$folderFilesPath/$STRUCTURES_FOLDER $FOLDER_STRUCTURES_FILES_PARSED $STRUCTURES_FILES_PARSED"
  SpecialFolder[1]="$folderFilesPath/$TABLES_FOLDER $FOLDER_TABLES_FILES_PARSED $TABLES_FILES_PARSED "
  SpecialFolder[2]="$folderFilesPath/$AUTRES_FOLDER $FOLDER_AUTRES_FILES_PARSED $AUTRES_FILES_PARSED"

  ## null represent the folder to dont parse
  SpecialFolder[3]="$folderFilesPath/$INSTALL_FOLDER null null"
  SpecialFolder[4]="$folderFilesPath/$REPORTS_FOLDER null null"
}

#Function to check if the line receive as param content the git annotation of differences:
#@@ -
lineContentGitAnnotation() {
  local line=$1

  local SUB='@@ -'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line start by + so with replace it plus by space :
changePlusBySpace() {
  local line=$1
  local lineBackUP=$1
  local numberList='s/[0-9]//g'

  line=$(echo "$line" | sed "$numberList")
  local SUB=':+##'

  if [[ "$line" == "$SUB"* ]]; then
    tr -s + ' '  <<< "$lineBackUP"
    return 0
  fi
  echo "$lineBackUP"
  return 1
}
#Function to check if the line receive as param content the annotation:
# : ##
lineTeamAnnotationHash() {
  local line=$1
  local numberList='s/[0-9]//g'

  line=$(echo "$line" | sed "$numberList")
  local SUB=': ##'

  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
#+++ b/
lineContentFileNameB() {
  local line=$1
  local SUB='+++ b/'

  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
#--- a/
lineContentFileNameA() {
  local line=$1
  local SUB='--- a/'

  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if content special folder name:
lineContentSpecialFolderName() {
  local line=$1
  local specFolderFound=""

  local listOfSpecialFolder
  arrayOfSpecialFolder listOfSpecialFolder

  for spcElement in "${listOfSpecialFolder[@]}"; do
    IFS=' ' read -r -a folderInfoArray <<<"$spcElement"
    if [[ "$line" == *"${folderInfoArray[0]}"* ]]; then
      specFolderFound="${folderInfoArray[1]}"
      break
    else
      specFolderFound=""
    fi
  done
  echo "$specFolderFound"
}

##Function to check breaking line.
lineEndByHeaderNewLineHash() {
  local line=$1
  local length=${#line}
  local SUB=$'\n'"##"
  local SUB2=$'\r'"##"

  if [[ "$line" == *"$SUB" || "$line" == *"$SUB2" ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# ##
lineStartByHeaderHash() {
  local line=$1
  local length=${#line}
  local SUB='##'

  if [ "$length" == 2 ] && [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

##Function to check if the file is a new file on git.
lineContentGitAnnotationAdd() {
  local line=$1
  local prvLine=$2
  local nextLine=$3
  local isPrv=1
  local SUB='--- /dev/null'
  local SUB2='+++ /dev/null'

  if [ ${#line} == 13 ] && [[ "$line" == "$SUB"* ]]; then
    lineContentFileNameB "$nextLine"
    isPrv=$?
    if [ $isPrv == 0 ]; then
      return 0
    fi
  elif [ ${#line} == 13 ] && [[ "$line" == "$SUB2"* ]]; then
    lineContentFileNameA "$prvLine"
    isPrv=$?
    if [ $isPrv == 0 ]; then
      return 2
    fi
  else
    return 1
  fi
}

mergeFileOfSpecialFolder() {
  local specialFolderList
  arrayOfSpecialFolder specialFolderList

  echo -e "\n" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
  for spcElement in "${specialFolderList[@]}"; do
    IFS=' ' read -r -a folderInfoArray <<<"$spcElement"
    if [ "${folderInfoArray[1]}" != "null" ]; then
      cat "${folderInfoArray[1]}" >>"$MERGE_PATH"
      echo "SCRIPT MERGE FILE: ${folderInfoArray[2]} into $MERGE_FILE" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
      #rm -rf "${folderInfoArray[1]}"
      echo "SCRIPT DELETE FILE: ${folderInfoArray[1]}" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    fi
  done

  #rmdir "$FOLDER_FILES_PARSED"
  echo "SCRIPT DELETE FOLDER: $FOLDER_FILES_PARSED" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
  echo -e "" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
}

printEnd() {
  {
    echo -e "\tEND OF THE SPRINT please check:"
    echo -e "\tthe file: $MERGE_FILE"
    echo -e "\tpath: $MERGE_PATH"
  } 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
}

#Function get the line has changed and add into .diff file.
transferAllFileContent() {
  local -n _fileContent=$1
  local fileRedirect=$2

  local countOfLine=0
  local length=${#_fileContent[@]}

  for ((l = 0; l < "$length"; l++)); do
    local lineChangedData=${_fileContent[l]}
    {
      echo "$lineChangedData" >>"$fileRedirect"
    } || {
      {
        echo "SCRIPT ERROR: the script cannot insert:"
        echo "line: $lineChangedData"
        echo "to file: $fileRedirect"
      } 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
      exit 1
    }
    countOfLine=$((countOfLine + 1))
  done

  echo -e "ADD new file content \t=> length: $length end L: $l" >>"$GIT_DIFF_BRANCH_PATH"
}

#Function get the line has changed and add into .diff file.
getModifFromFile() {
  local -n _fileContent=$1
  local line=$2
  local fileRedirect=$3
  local specialCharGetNum='s@^[^0-9]*\([0-9]\+\).*@\1@'
  local specialCharBeforeDoteDote='s/:.*//'
  local specialCharNotPrint='[[:print:]]'
  local linePosition=1

  #echo "getModifFromFile LINE => $line"
  if [ "$line" != "" ]; then
    line=$(tr -dc "$specialCharNotPrint" <<<"$line")
    line=$(echo "$line" | sed "$specialCharBeforeDoteDote")
    linePosition=$(echo "$line" | sed "$specialCharGetNum")
  fi

  local countOfLine=0
  local length=${#_fileContent[@]}
  local firstHash=0

  for ((l = $((linePosition - 1)); l < "$length" && l >= 0; )); do
    local lineChangedData=${_fileContent[l]}
    ## check if we fund '##' 2 to stop the loop 0 to check on the lines above 1 to go to look for a second line with '##'
    lineStartByHeaderHash "$lineChangedData"
    local isHash=$?
    if [ $firstHash == 0 ] || [ $firstHash == 1 ] && [ $isHash == 0 ]; then
      firstHash=$((firstHash + 1))
    fi

    if [ $firstHash == 0 ]; then
      l=$((l - 1))
    elif [ $firstHash == 2 ]; then
      break
    else
      ## If firstHash == 1 mean we have found one line with '##' and we add the content between the line of '##'
      echo "$lineChangedData" >>"$fileRedirect"
      l=$((l + 1))
    fi
    countOfLine=$((countOfLine + 1))
  done

  echo -e "ADD new file block \t=> linePosition: $((linePosition - 1)) length: $length end L: $l" >>"$GIT_DIFF_BRANCH_PATH"
  ## if the l is equal to the number of line of the file we inform we have finished to read the file.
  if [ $l == "$length" ]; then
    return 0
  fi
  return 1
}

##Function to store on log the information what the scripts is doing.
printLineInfo() {
  local args=("$@")

  local linePosition=${args[0]}
  local line=${args[1]}
  local previousLine=${args[2]}
  local nextLine=${args[3]}
  local endOfFile=false
  local nextLineIsDiff=${args[5]}
  local fileExtractDataPath=${args[6]}

  if [ "${args[4]}" == 0 ]; then
    endOfFile=true
  fi
  {
    echo -e "\n\n---------------\tPOS [>$linePosition<]"
    echo -e "---------------\tMAIN LINE [[>$line<]]"
    echo -e "---------------\tMAIN LINE LENGTH [[>${#line}<]]"
    echo -e "---------------\tPREVIOUS LINE [[>$previousLine<]]"
    echo -e "---------------\NEXT LINE [[>$nextLine<]]"
    echo -e "---------------\tIS_END_OF_FILE [>$endOfFile<]"
    echo -e "---------------\tNEST_LINE_IS_DIFF [>$nextLineIsDiff<]"
    echo -e "---------------\tFILE_TO_EXTRACT_DATA [>$fileExtractDataPath<]"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

mainLoop() {
  local -n _differencesFileData=$1
  local folderFilesPath=$2

  local countOfLine=0
  local nextLineIsDiff=false
  local fileNameParse=''
  local length=${#_differencesFileData[@]}
  local passOnce=1
  local endOfFile=1
  local fileExtractDataPath=''
  local isNewFile=1
  declare -a fileContent
  local previousLine=""
  local nextLine=""
  local fileRedirectExtractData="$MERGE_PATH"

  ## Read the file differences.log line.
  for ((dl = 0; dl < "$length"; dl++)); do
    line=${_differencesFileData[dl]}
    #Replace the + by space next to ##
    line=$(changePlusBySpace "$line")

    if (($((dl - 1)) > 0)); then
      previousLine=${_differencesFileData[$((dl - 1))]}
    fi
    if (($((dl + 1)) < "$length")); then
      nextLine=${_differencesFileData[$((dl + 1))]}
    fi
    printLineInfo $((dl + 1)) "$line" "$previousLine" "$nextLine" "$endOfFile" "$nextLineIsDiff" "$fileExtractDataPath"

    #____________________________________________________________________________________________________________________#
    ## Analyze the line to see what is content
    lineContentGitAnnotationAdd "$line" "$previousLine"
    local isGitAnnotationAdd=$?
    local isGitAnnotation=1
    if [ $isGitAnnotationAdd == 1 ]; then
      lineContentGitAnnotation "$line"
      local isGitAnnotation=$?
    fi

    local isTeamAnnotation=1
    lineContentGitAnnotation "$previousLine"
    local isPrvGitAnnotation=$?
    local isPrvTeamAnnotation=1
    local isContentFileName=1

    if [ $endOfFile == 1 ] && [ $isGitAnnotation == 1 ]; then
      lineTeamAnnotationHash "$line"
      isTeamAnnotation=$?
    fi
    if [ $endOfFile == 1 ] && [ $isPrvGitAnnotation == 1 ]; then
      lineTeamAnnotationHash "$previousLine"
      isPrvTeamAnnotation=$?
    fi
    if [ $passOnce == 1 ] || [ $endOfFile == 0 ]; then
      lineContentFileNameB "$line"
      isContentFileName=$?
    fi
    echo -en "--------------\tisGitAnnotation: $isGitAnnotation \tisTeamAnnotation: $isTeamAnnotation \tisPrvGitAnnotation: $isPrvGitAnnotation \tisPrvTeamAnnotation: $isPrvTeamAnnotation \tisContentFileName: $isContentFileName \tisGitAnnotationAdd: $isGitAnnotationAdd isNewFile $isNewFile" >>"$GIT_DIFF_BRANCH_PATH"
    #____________________________________________________________________________________________________________________#

    if (("$isContentFileName" == 0 && "$isGitAnnotationAdd" == 1)) || (("$isGitAnnotationAdd" != 1 && "$isNewFile" == 1)); then

      local isSpcFolderName=""
      isSpcFolderName=$(lineContentSpecialFolderName "$line")
      echo -e "isSpcFolderName: $isSpcFolderName " >>"$GIT_DIFF_BRANCH_PATH"
      if [ -n "$isSpcFolderName" ] && [ "$isSpcFolderName" != "null" ]; then
        fileRedirectExtractData="$isSpcFolderName"
      elif [ -n "$isSpcFolderName" ] && [ "$isSpcFolderName" == "null" ]; then
        fileRedirectExtractData=""
      else
        fileRedirectExtractData="$MERGE_PATH"
      fi

      if [ -n "$fileRedirectExtractData" ]; then
        ## If to get the path of the file to extract
        local fileNameParse
        if [ $isGitAnnotationAdd == 2 ]; then
          fileNameParse=$previousLine
        elif [ $isGitAnnotationAdd == 0 ]; then
          fileNameParse=$nextLine
        else
          fileNameParse=$line
        fi

        filePath="${fileNameParse:6}"
        local folderName=${filePath%/*}
        fileExtractDataPath="$filePath"

        ## Check if the parsed folder is inside of the given path param
        if [[ "$folderName" =~ .*"$folderFilesPath".* ]]; then
          local branchToExtractFileData=$branchB
          if [ $isGitAnnotationAdd == 2 ]; then
            branchToExtractFileData=$branchA
          fi

          ## Get The content of the file we want to parse
          fileContent=()
          while read -r line || [ -n "$line" ]; do
            fileContent+=("$line")
          done < <(git show "$branchToExtractFileData:$filePath")
          echo "SCRIPT RUN: git show $branchToExtractFileData:$filePath" >> "$GIT_DIFF_BRANCH_PATH"
          endOfFile=1
          passOnce=0
          if [ $isGitAnnotationAdd != 1 ]; then
            isNewFile=0
          fi
          echo "SCRIPT PARSED FILE: $fileExtractDataPath" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
        fi
      fi
    elif $nextLineIsDiff && [ "$endOfFile" == 1 ]; then
      ## File to extract the information from the file changed
      if [ $isNewFile == 0 ]; then
        transferAllFileContent fileContent "$fileRedirectExtractData"
        isNewFile=1
        endOfFile=0
      else
        getModifFromFile fileContent "$line" "$fileRedirectExtractData"
        endOfFile=$?
      fi
      nextLineIsDiff=false
    elif (("$isGitAnnotation" == 0 || "$isNewFile" == 0)) ||
      (("$dl" >= 0 && "$isPrvGitAnnotation" == 1 && "$isTeamAnnotation" == 0)); then
      nextLineIsDiff=true
    else
      nextLineIsDiff=false
    fi
    countOfLine=$((countOfLine + 1))
  done

  mergeFileOfSpecialFolder
  printEnd
}

##Function to get the last version of branch A
pullBranch() {
  {
    ## Git config set credentials
    git config --local credential.helper '!f() { sleep 1; echo "username=$userGit"; echo "password=$passwordGit"; }; f' >/dev/null 2>&1
    echo "SCRIPT RUN: git config --local credential.helper for $userGit@$passwordGit" 2>&1
    ## Well get all the new branches
    git fetch --all >/dev/null 2>&1
    echo "SCRIPT RUN: git fetch" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"

    ## Git checkout the branchA
    git checkout "$branchA" >/dev/null 2>&1
    echo "SCRIPT RUN: git checkout $branchA" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    ## Git pull the branchA to get the last version
    git pull origin "$branchA" >/dev/null 2>&1

    ## Git checkout the branchB
    git checkout "$branchB" >/dev/null 2>&1
    echo "SCRIPT RUN: git checkout $branchB" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    ## Git pull the branchB to get the last version
    git pull origin "$branchB" >/dev/null 2>&1

    git checkout "$GIT_CURRENT_BRANCH" >/dev/null 2>&1
    echo "SCRIPT RUN: git checkout $GIT_CURRENT_BRANCH" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"

    ## Git config reset credentials
    git config --local --unset credential.helper
    echo "SCRIPT RUN: config --local --unset credential.helper" 2>&1
  } || {
    echo "SCRIPT ERROR: git pull $branchA or git checkout $branchA having a issue, please confirm that the branches are correct" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    exit 1
  }
}

setFilesDifference() {
  pullBranch "$branchA" "$branchB" "$folderFilesPath"

  {
    echo "SCRIPT RUN: git diff $branchA $branchB -- $folderFilesPath/*.txt | $PATH_FIRST_SCRIPT &> $DIFFERENCE_PATH" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    echo "SCRIPT RUN: cd $GIT_DIR" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    echo "SCRIPT RUN: cd -" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"

    cd "$GIT_DIR" || {
      echo "SCRIPT ERROR: the script has to be in git repository"
      exit 1
    }
    git diff "$branchA" "$branchB" -- "$folderFilesPath"/*.txt | $PATH_FIRST_SCRIPT &>"$DIFFERENCE_PATH"
    cd - || {
      echo "SCRIPT ERROR: the script has to be in git repository"
      exit 1
    }

    if [ -s "$DIFFERENCE_PATH" ]; then
      :
    else
      {
        echo -e "\n\tTHERE IS NOTHING HAS CHANGED !!"
        echo -e "\tThe script will stop."
      } 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
      exit 0
    fi
  } || {
    echo "SCRIPT ERROR: git diff $branchA $branchB having a issue, please confirm that the branches are correct" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
  }
}

#Function read the file from differences.log
executeAlgorithm() {
  setFilesDifference "$branchA" "$branchB" "$folderFilesPath"

  declare -a differencesFileData
  IFS=''
  while read -r line; do
    differencesFileData+=("$line")
  done <"$DIFFERENCE_PATH"

  mainLoop differencesFileData "$folderFilesPath"
}

createSpecialFile() {
  local specialFolderList
  arrayOfSpecialFolder specialFolderList

  mkdir -p "$FOLDER_FILES_PARSED"

  touch "$GIT_DIFF_BRANCH_PATH"
  for spcElement in "${specialFolderList[@]}"; do
    IFS=' ' read -r -a folderInfoArray <<<"$spcElement"
    if [ "${folderInfoArray[1]}" != "null" ]; then
      echo "SCRIPT CREATE FILE: ${folderInfoArray[1]}" 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
      touch "${folderInfoArray[1]}"
    fi
  done
}

#Function to create the different main folders
createDiffFolder() {
  local deleteDir
  local createDirFile
  local createLogPath
  if [ -d "$LOG_PATH" ]; then
    rm -rf "$RESULT_FOLDER"
    deleteDir="The folder $RESULT_FOLDER has been deleted"
  fi

  mkdir -p "$LOG_PATH"
  createLogPath="The folder $LOG_PATH has been created"
  touch "$MERGE_PATH"

  createSpecialFile

  {
    echo "$deleteDir"
    echo "$createDirFile"
    echo "$createLogPath"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

checkIfFolderExist() {
  {
    echo "SCRIPT RUN: git ls-tree -d $branchA:$folderFilesPath >/dev/null 2>&1 " 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    git ls-tree -d "$branchA:$folderFilesPath" >/dev/null 2>&1
  } || {
    echo "SCRIPT ERROR: the folder path $folderFilesPath not found inside of branch $branchA, please confirm the path folder." 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    help
    return 1
  }
  {
    echo "SCRIPT RUN: git ls-tree -d $branchB:$folderFilesPath >/dev/null 2>&1 " 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    git ls-tree -d "$branchB:$folderFilesPath" >/dev/null 2>&1
  } || {
    echo "SCRIPT ERROR: the folder path $folderFilesPath not found inside of branch $branchB, please confirm the path folder." 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"
    help
    return 1
  }
  return 0
}

help() {
  echo ".$SCRIPT_PATH param1 param2 param3"
  echo "param1: { branch to be compare B the most recently version }"
  echo "param2: {branch to compare A the older version }"
  echo "param3: { folder where are the files }"
  echo "param4: { username git }"
  echo "param5: { password git }"
  exit 0
}

welcome() {
  echo -e "Welcome to Git Diff Branches this script will take two branches collect the differences between the to branches."
  echo -e "The script will create 'diff-project' folder and add the information of each modified file into a file extension '.diff.txt'."
  echo -e "run the script with --help to have more information.\n"
}

main() {
  welcome
  if [ "$1" == "--help" ]; then
    help
  fi

  local branchA=$2
  local branchB=$1
  local folderFilesPath=$3
  local userGit=$4
  local passwordGit=$5

  # asking for the name of the branches to be compared
  if [ -z "$branchA" ]; then
    read -rp 'What is the name of the branch A ?: ' branchA
  elif [ -z "$branchB" ]; then
    read -rp 'What is the name of the branch B ?: ' branchB
  elif [ -z "$folderFilesPath" ]; then
    read -rp 'What is the name of the folder where there is the files ?: ' folderFilesPath
  elif [ -z "$userGit" ]; then
    read -rp 'What is the git user ?: ' userGit
  elif [ -z "$passwordGit" ]; then
    read -rp 'What is the git password ?: ' passwordGit
  fi

  {
    echo -e "\tParameter #1 branch A is: $branchA"
    echo -e "\tParameter #2 branch B is: $branchB"
    echo -e "\tParameter #3 folder is: $folderFilesPath\n"
    echo -e "\tParameter #4 userGit is: $userGit\n"
    echo -e "\tParameter #5 passwordGit is: $passwordGit\n"
  } 2>&1 | tee -a "$GIT_DIFF_BRANCH_PATH"

  sleep 1
  if [[ -z "$branchA" || -z "$branchB" ]]; then
    help
  fi

  createDiffFolder
  executeAlgorithm "$branchA" "$branchB" "$folderFilesPath" "$userGit" "$passwordGit"
}

main "$1" "$2" "$3" "$4" "$5"
