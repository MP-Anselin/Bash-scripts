#!/bin/bash

## Static global with the path ot the subfolder diff-project
LOG_PATH='diff-project/log'
DIR='diff-project'
DIR_FILES='diff-project/files'
DIF_FILE=$LOG_PATH/"different-files.log"

DIFFERENCE='differences.log'
DIFFERENCE_PATH="$LOG_PATH"/"$DIFFERENCE"

DIFFERENCE_FILES='different-files.log'
DIFFERENCE_FILES_PATH="$LOG_PATH"/"$DIFFERENCE_FILES"

lineContentGitAnnotation() {
  local line=$1
  SUB='@@ -'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineTeamAnnotationHash() {
  local line=$1
  line=$(echo "$1" | sed 's/[0-9]//g')
  SUB=': ##'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineContentFileName() {
  local line=$1
  SUB='+++ b/'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineStartByHeaderHash() {
  local line=$1
  SUB='##'
  if [[ ${#line} == 2 ]] && [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

getArrayFileInfo() {
  local num=$4
  local fileName=$3
  local response=''
  local COUNT=${#filesList[@]}
  for ((i = 0; i < "$COUNT"; i++)); do
    IFS="|" read -r -a arr <<<"${filesList[i]}"
    if [[ ${arr[0]} = "$fileName" ]]; then
      response="${arr[num]}"
      break
    fi
  done
  echo "$response"
}

getModifFromFile() {
  echo -e "\nFUNCTION getModifFromFile !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "line = > [ $line ]"

  local linePosition=$(echo "$line" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@')

  local index=0
  declare -a fileChangedData
  IFS=''
  while read lineChangeData; do
    fileChangedData[$index]="$lineChangeData"
    index=$(("$index" + 1))
  done <"$fileExtractDataPath"

  echo "linePosition = " "$linePosition"
  local countOfLine=0
  local length=${#fileChangedData[@]}
  local firstHash=0
  local endPosition=0

  for ((l = "$linePosition" - 1; l < "$length"; )); do
    local lineChangedData=${fileChangedData[l]}

    if (("$firstHash" < 2)) && lineStartByHeaderHash "$lineChangedData"; then
      firstHash=$((firstHash + 1))
    fi

    if (("$firstHash" == 0)); then
      l=$((l - 1))
    elif (("$firstHash" == 2)); then
      echo "BREAK !!!!!!!!!!!!!!!!!!!"
      endPosition=$((l))
      break
    else
      #      echo -e "\t\t\tADD [ '$lineChangedData' ] INTO ==>  $diffFilePath"
      echo "$lineChangedData" >>"$diffFilePath"
      l=$((l + 1))
      #      echo "FORWARD firstHash ==========> $l"
    fi
    countOfLine=$((countOfLine + 1))
    endPosition=$((l))
  done
  echo -ne "END POSITION [$endPosition] ?==? LENGTH $length\n\n"
  echo -ne "END FUNCTION getModifFromFile !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n\n"
  if (("$endPosition" == "$length")); then
    return 0
  else
    return 1
  fi
}

executeAlgorithm() {

  local index=0
  declare -a differencesFileData
  IFS=''
  while read line; do
    differencesFileData[$index]="$line"
    index=$(("$index" + 1))
  done <$DIFFERENCE_PATH

  local countOfLine=0
  local nextLineIsDiff=false
  local fileNameParse=''
  local length=${#differencesFileData[@]}
  local diffFilePosName=3
  local FileExtractDatPos=1
  local passOnce=1
  local endOfFile=1

  fileExtractDataPath=''
  for ((dl = 0; dl < "$length"; dl++)); do
    line=${differencesFileData[dl]}
    local previousLine=${differencesFileData[$((dl - 1))]}
    echo -e "\n\n---------------\tPOS [ $((dl + 1)) ]"
    echo -e "---------------\tMAIN LINE [[ $line ]]"
    echo -e "---------------\tPREVIOUS LINE [[ $previousLine ]]"
    echo -e "---------------\tIS_END_OF_FILE [ $endOfFile ]"
    echo -e "---------------\tNEST_LINE_IS_DIFF [ $nextLineIsDiff ]"
    echo -e "---------------\tFILE_TO_EXTRACT_DATA [ $fileExtractDataPath ]"

    local gitAnnotation=0
    local isTeamAnnotation=0
    local isPrvGitAnnotation=0
    local isPrvTeamAnnotation=0
    local isContentFileName=0

    lineContentGitAnnotation "$line"
    gitAnnotation=$?
    if (("$gitAnnotation" == 1)); then
      lineTeamAnnotationHash "$line"
      isTeamAnnotation=$?
    fi

    lineContentGitAnnotation "$previousLine"
    isPrvGitAnnotation=$?
    if (("$isPrvGitAnnotation" == 1)); then
      lineTeamAnnotationHash "$previousLine"
      isPrvTeamAnnotation=$?
    fi

    if ( (("$passOnce" == 1)) || (("$endOfFile" == 0))); then
      lineContentFileName "$line"
      isContentFileName=$?
    fi

    echo "gitAnnotation: $gitAnnotation isTeamAnnotation: $isTeamAnnotation"
    echo "isPrvGitAnnotation: $isPrvGitAnnotation isPrvTeamAnnotation: $isPrvTeamAnnotation isContentFileName: $isContentFileName"
    if (("$isContentFileName" == 0)); then
      local fileNameParse=$previousLine
      fileName="$(basename -- "$fileNameParse")"
      diffFilePath=$(getArrayFileInfo "${filesList[@]}" "$fileName" "$diffFilePosName")
      fileExtractDataPath=$(getArrayFileInfo "${filesList[@]}" "$fileName" "$FileExtractDatPos")
      echo "diffFilePath => " "$diffFilePath"
      echo "fileExtractDataPath => " "$fileExtractDataPath"
      endOfFile=1
      passOnce=0
    elif $nextLineIsDiff && (("$endOfFile" == 1)); then
      getModifFromFile
      endOfFile=$?
      echo "endOfFile => $endOfFile"
      nextLineIsDiff=false
      #      read -p 'goOn ?: ' goOn
      echo -ne "______________________________________________________________________________________________________\n\n\n"
    elif (("$gitAnnotation" == 0)) ||
      ( (("$dl" > 0)) && (("$isPrvGitAnnotation" == 1)) && (("$isTeamAnnotation" == 0))); then
      nextLineIsDiff=true
    else
      nextLineIsDiff=false
    fi
    countOfLine=$((countOfLine + 1))
  done
}

printArrayOfFileInfo() {
  printf "\n"
  local COUNT=${#filesList[@]}
  #   Loop and print it.  Using offset and length to extract values
  for ((i = 0; i < "$COUNT"; i++)); do
    echo -ne "filesList:  \t${filesList[i]}\n"
    IFS="|" read -r -a arr <<<"${filesList[i]}"
    echo -ne "fileName: \t${arr[0]}\n"
    echo -ne "fileFromBPath: \t${arr[1]}\n"
    echo -ne "diffFileName \t${arr[2]}\n"
    echo -ne "diffFilePath \t${arr[3]}\n"
    printf "\n"
  done
}

setDifferenceBteenFiles() {
  #execute the command git diff between the two branches and store inside a log file
  git diff --name-only "$branchA" "$branchB" >"$DIFFERENCE_FILES_PATH"

  # array will content all the files and their information
  declare -a filesList
  local counter=0
  while IFS= read -r line; do
    fileName="$(basename -- "$line")"
    fileNameWithoutExt="${fileName%.*}"

    # Create folder for each file changed
    mkdir -p "$DIR_FILES"/"${line%.*}"

    #Upload file changed from branch A and create diff file with extension .diff with the same name file
    diffFileName="$fileNameWithoutExt".diff.txt
    fileFromBPath="$DIR_FILES"/"${line%.*}"/"$fileName"
    diffFilePath="$DIR_FILES"/"${line%.*}"/"$diffFileName"
    touch "$diffFilePath"
    git show "$2":"$line" >"$fileFromBPath"

    echo -e "UPLOAD FILE: \t\t" "$fileFromBPath"
    echo -e "CREATE DIFF FILE: \t" "$diffFilePath"

    # Concatenate all information on one string with separator '|'
    fileInfo="$fileName|$fileFromBPath|$diffFileName|$diffFilePath"
    # Store the information above into string
    filesList[${counter}]=$fileInfo
    echo -e "\n"
    counter=$((counter + 1))
  done <"$DIF_FILE"
  printArrayOfFileInfo "${filesList[@]}"
  executeAlgorithm "${filesList[@]}"
}

setFilesDifference() {
  git diff "$branchA" "$branchB" | ./scripts/gitdiff-with-line >"$DIFFERENCE_PATH"
}

createDiffFolder() {
  if [ -d "$LOG_PATH" ]; then
    rm -rf "$DIR"
  fi

  mkdir -p "$DIR_FILES"
  mkdir -p "$LOG_PATH"
}

help() {
  echo ./gitdiff-branch-data '{ branch to compare A }' '{branch to compareB}'
  exit 0
}

main() {
  createDiffFolder
  local branchA=$1
  local branchB=$2

  echo "Parameter #1 is $branchA"
  echo "Parameter #2 is $branchB"

  if [[ -z "$branchA" || -z "$branchB" ]]; then
    help
  fi

  setFilesDifference "$branchA" "$branchB"
  setDifferenceBteenFiles "$branchA" "$branchB"
}

main "$1" "$2"
