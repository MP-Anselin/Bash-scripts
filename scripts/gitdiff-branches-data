#!/bin/bash

## Static global with the path ot the subfolder diff-project
LOG_PATH='diff-project/log'
DIR='diff-project'
DIR_FILES='diff-project/files'
DIF_FILE=$LOG_PATH/"different-files.log"

GIT_DIFF_BRANCHES='git-diff-branches.log'
GIT_DIFF_BRANCH_PATH="$LOG_PATH"/"$GIT_DIFF_BRANCHES"

DIFFERENCE='differences.log'
DIFFERENCE_PATH="$LOG_PATH"/"$DIFFERENCE"

DIFFERENCE_FILES='different-files.log'
DIFFERENCE_FILES_PATH="$LOG_PATH"/"$DIFFERENCE_FILES"

#Function to check if the line receive as param content the git annotation of differences:
#@@ -
lineContentGitAnnotation() {
  local line=$1

  SUB='@@ -'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# : ##
lineTeamAnnotationHash() {
  local line=$1
  local numberList='s/[0-9]//g'

  line=$(echo "$line" | sed "$numberList")
  SUB=': ##'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
#+++ b/
lineContentFileName() {
  local line=$1

  SUB='+++ b/'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# ##
lineStartByHeaderHash() {
  local line=$1
  SUB='##'
  if [[ ${#line} == 2 ]] && [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function browser a map which content all the information of the file to be compare
getArrayFileInfo() {
  local num=$4
  local fileName=$3
  local response=''
  local COUNT=${#filesList[@]}

  for ((i = 0; i < "$COUNT"; i++)); do
    IFS="|" read -r -a arr <<<"${filesList[i]}"
    if [[ ${arr[0]} = "$fileName" ]]; then
      response="${arr[num]}"
      break
    fi
  done
  echo "$response"
}

#Function get the line has changed and add into .diff file
getModifFromFile() {
  local linePosition=$(echo "$line" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@')
  local index=0
  declare -a fileChangedData

  IFS=''
  while read lineChangeData; do
    fileChangedData[$index]="$lineChangeData"
    index=$(("$index" + 1))
  done <"$fileExtractDataPath"

  local countOfLine=0
  local length=${#fileChangedData[@]}
  local firstHash=0
  local endPosition=0

  for ((l = "$linePosition" - 1; l < "$length"; )); do
    local lineChangedData=${fileChangedData[l]}

    if (("$firstHash" < 2)) && lineStartByHeaderHash "$lineChangedData"; then
      firstHash=$((firstHash + 1))
    fi

    if (("$firstHash" == 0)); then
      l=$((l - 1))
    elif (("$firstHash" == 2)); then
      endPosition=$((l))
      break
    else
      echo "$lineChangedData" >>"$diffFilePath"
      l=$((l + 1))
    fi
    countOfLine=$((countOfLine + 1))
    endPosition=$((l))
  done
  if (("$endPosition" == "$length")); then
    return 0
  else
    return 1
  fi
}

#Function which will browse /log/differences.log and extract the  information
executeAlgorithm() {
  local index=0
  declare -a differencesFileData

  IFS=''
  while read line; do
    differencesFileData[$index]="$line"
    index=$(("$index" + 1))
  done <$DIFFERENCE_PATH

  local countOfLine=0
  local nextLineIsDiff=false
  local fileNameParse=''
  local length=${#differencesFileData[@]}
  local diffFilePosName=3
  local FileExtractDatPos=1
  local passOnce=1
  local endOfFile=1

  fileExtractDataPath=''
  for ((dl = 0; dl < "$length"; dl++)); do
    line=${differencesFileData[dl]}
    local previousLine=${differencesFileData[$((dl - 1))]}
    {
      echo -e "\n\n---------------\tPOS [ $((dl + 1)) ]"
      echo -e "---------------\tMAIN LINE [[ $line ]]"
      echo -e "---------------\tPREVIOUS LINE [[ $previousLine ]]"
      echo -e "---------------\tIS_END_OF_FILE [ $endOfFile ]"
      echo -e "---------------\tNEST_LINE_IS_DIFF [ $nextLineIsDiff ]"
      echo -e "---------------\tFILE_TO_EXTRACT_DATA [ $fileExtractDataPath ]"
    } >>$GIT_DIFF_BRANCH_PATH

    local isGitAnnotation=1
    local isTeamAnnotation=1
    local isPrvGitAnnotation=1
    local isPrvTeamAnnotation=1
    local isContentFileName=1

    lineContentGitAnnotation "$line"
    isGitAnnotation=$?
    if (("$isGitAnnotation" == 1)); then
      lineTeamAnnotationHash "$line"
      isTeamAnnotation=$?
    fi

    lineContentGitAnnotation "$previousLine"
    isPrvGitAnnotation=$?
    if (("$isPrvGitAnnotation" == 1)); then
      lineTeamAnnotationHash "$previousLine"
      isPrvTeamAnnotation=$?
    fi

    if ( (("$passOnce" == 1)) || (("$endOfFile" == 0))); then
      lineContentFileName "$line"
      isContentFileName=$?
    fi

    echo -e "--------------\tisGitAnnotation: $isGitAnnotation \tisTeamAnnotation: $isTeamAnnotation \tisPrvGitAnnotation: $isPrvGitAnnotation \tisPrvTeamAnnotation: $isPrvTeamAnnotation \tisContentFileName: $isContentFileName" >>$GIT_DIFF_BRANCH_PATH
    if (("$isContentFileName" == 0)); then
      local fileNameParse=$previousLine
      fileName="$(basename -- "$fileNameParse")"
      diffFilePath=$(getArrayFileInfo "${filesList[@]}" "$fileName" "$diffFilePosName")
      fileExtractDataPath=$(getArrayFileInfo "${filesList[@]}" "$fileName" "$FileExtractDatPos")
      {
        echo -e "--------------\tdiffFilePath: " "$diffFilePath"
        echo -e "--------------\tfileExtractDataPath: " "$fileExtractDataPath"
      } >>$GIT_DIFF_BRANCH_PATH
      endOfFile=1
      passOnce=0
    elif $nextLineIsDiff && (("$endOfFile" == 1)); then
      getModifFromFile
      endOfFile=$?
      nextLineIsDiff=false
    elif (("$isGitAnnotation" == 0)) ||
      ( (("$dl" > 0)) && (("$isPrvGitAnnotation" == 1)) && (("$isTeamAnnotation" == 0))); then
      nextLineIsDiff=true
    else
      nextLineIsDiff=false
    fi

    #    read -p 'goOn ?: ' goOn
    countOfLine=$((countOfLine + 1))
  done
  echo -e "END OF EXTRACTOR\n" >>$GIT_DIFF_BRANCH_PATH
}

printArrayOfFileInfo() {
  echo -e "\n" >>$GIT_DIFF_BRANCH_PATH
  local COUNT=${#filesList[@]}
  #   Loop and print it.  Using offset and length to extract values
  for ((i = 0; i < "$COUNT"; i++)); do
    echo -ne ">>>>>>>>>>>>>>\tfilesList:  \t${filesList[i]}\n" >>$GIT_DIFF_BRANCH_PATH
    IFS="|" read -r -a arr <<<"${filesList[i]}"
    {
      echo -ne ">>>>>>>>>>>>>>\tfileName: \t${arr[0]}\n"
      echo -ne ">>>>>>>>>>>>>>\tfileFromBPath: \t${arr[1]}\n"
      echo -ne ">>>>>>>>>>>>>>\tdiffFileName \t${arr[2]}\n"
      echo -ne ">>>>>>>>>>>>>>\tdiffFilePath \t${arr[3]}\n\n"
    } >>$GIT_DIFF_BRANCH_PATH
  done
}

#Function will get the files changed name and create folder with their name and .diff.txt file
setDifferenceBetweenFiles() {
  #execute the command git diff between the two branches and store inside a log file
  git diff --name-only "$branchA" "$branchB" >"$DIFFERENCE_FILES_PATH"

  # array will content all the files and their information
  declare -a filesList
  local counter=0
  while IFS= read -r line; do
    fileName="$(basename -- "$line")"
    fileNameWithoutExt="${fileName%.*}"

    # Create folder for each file changed
    mkdir -p "$DIR_FILES"/"${line%.*}"

    #Upload file changed from branch A and create diff file with extension .diff with the same name file
    diffFileName="$fileNameWithoutExt".diff.txt
    fileFromBPath="$DIR_FILES"/"${line%.*}"/"$fileName"
    diffFilePath="$DIR_FILES"/"${line%.*}"/"$diffFileName"
    touch "$diffFilePath"
    git show "$2":"$line" >"$fileFromBPath"

    {
      echo -e ">>>>>>>>>>>>>>\tUPLOAD FILE: \t\t" "$fileFromBPath"
      echo -e ">>>>>>>>>>>>>>\tCREATE DIFF FILE: \t" "$diffFilePath"
    } >>$GIT_DIFF_BRANCH_PATH

    # Concatenate all information on one string with separator '|'
    fileInfo="$fileName|$fileFromBPath|$diffFileName|$diffFilePath"
    # Store the information above into string
    filesList[${counter}]=$fileInfo
    echo -e "\n" >>$GIT_DIFF_BRANCH_PATH
    counter=$((counter + 1))
  done <"$DIF_FILE"
  printArrayOfFileInfo "${filesList[@]}"
  executeAlgorithm "${filesList[@]}"
}

setFilesDifference() {
  {
    git diff "$branchA" "$branchB" | ./scripts/gitdiff-with-line >"$DIFFERENCE_PATH"
  } || {
    echo "Error: git diff $branchA $branchB having a issue, please confirm that the branches are correct"
  }
}

#Function to create the different main folders
createDiffFolder() {
  local deleteDir
  local createDirFile
  local createLogPath
  if [ -d "$LOG_PATH" ]; then
    rm -rf "$DIR"
    deleteDir="The folder $DIR has been deleted"
  fi

  mkdir -p "$DIR_FILES"
  createDirFile="The folder $DIR_FILES has been created"
  mkdir -p "$LOG_PATH"
  createLogPath="The folder $LOG_PATH has been created"

  touch $GIT_DIFF_BRANCH_PATH
  {
    echo "$deleteDir"
    echo "$createDirFile"
    echo "$createLogPath"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

help() {
  echo ./gitdiff-branch-data '{ branch to be compare A }' '{branch to compareB}'
  exit 0
}

welcome() {
  echo -e "Welcome to Git Diff Branches this script will take two branches collect the differences between the to branches."
  echo -e "The script will create 'diff-project' folder and add the information of each modified file into a file extension '.diff.txt'.\n"
}

main() {
  welcome
  createDiffFolder
  local branchA=$1
  local branchB=$2

  if [[ $1 == "--help" ]]; then
      help
    fi

  # asking for the name of the branches to be compared
  if [[ -z "$branchA" ]]; then
    read -rp 'What is the name of the branch A ?: ' branchA
  elif [[ -z "$branchB" ]]; then
    read -rp 'What is the name of the branch B ?: ' branchB
  fi

  echo "Parameter #1 is $branchA"
  echo "Parameter #2 is $branchB"

  {
    echo "Parameter #1 is $branchA"
    echo "Parameter #2 is $branchB"
  } >>$GIT_DIFF_BRANCH_PATH

  sleep 1

  if [[ -z "$branchA" || -z "$branchB" ]]; then
    help
  fi

  setFilesDifference "$branchA" "$branchB"
  setDifferenceBetweenFiles "$branchA" "$branchB"
}

main "$1" "$2"
