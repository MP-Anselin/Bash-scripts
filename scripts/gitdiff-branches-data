#!/bin/bash

## Static global with the path ot the subfolder diff-project
LOG_PATH='diff-project/log'
DIR='diff-project'
DIR_FILES='diff-project/files'
#DIF_FILE=$LOG_PATH/"different-files.log"

GIT_DIFF_BRANCHES='git-diff-branches.log'
GIT_DIFF_BRANCH_PATH="$LOG_PATH"/"$GIT_DIFF_BRANCHES"

DIFFERENCE='differences.log'
DIFFERENCE_PATH="$LOG_PATH"/"$DIFFERENCE"

DIFFERENCE_FILES='different-files.log'
DIFFERENCE_FILES_PATH="$LOG_PATH"/"$DIFFERENCE_FILES"

NEW_DELETE_FILES='addDelete-files.log'
NEW_DELETE_FILES_PATH="$LOG_PATH"/"$NEW_DELETE_FILES"

MERGE_FILE='git-diff-merge-file-mod.txt'
MERGE_PATH="$LOG_PATH"/"$MERGE_FILE"

displayArray() {
  local arrayInfo=("$@")

  for index in "${!arrayInfo[@]}"; do
    echo -e "ARRAY[$index] ${arrayInfo[$index]}\n'"
  done
  echo -e "LENGTH OF THE ARRAY ${#arrayInfo[@]}\n"
}

#Function to check if the line receive as param content the git annotation of differences:
#@@ -
lineContentGitAnnotation() {
  local line=$1

  SUB='@@ -'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# : ##
lineTeamAnnotationHash() {
  local line=$1
  local numberList='s/[0-9]//g'

  line=$(echo "$line" | sed "$numberList")
  SUB=': ##'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
#+++ b/
lineContentFileName() {
  local line=$1

  SUB='+++ b/'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# ##
lineStartByHeaderHash() {
  local line=$1
  SUB='##'
  if [[ ${#line} -eq 2 ]] && [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineContentGitAnnotationAdd() {
  local line=$1
  local prvLine=$2
  SUB='--- /dev/null'
  SUB2='+++ /dev/null'
  if [[ ${#line} -eq 13 ]] && [[ "$line" == "$SUB"* || "$line" == "$SUB2"* ]]; then
    return 0
  elif [[ ${#prvLine} -eq 13 ]] && [[ "$prvLine" == "$SUB"* || "$prvLine" == "$SUB2"* ]]; then
    return 2
  else
    return 1
  fi
}

lineFileIsBranchAOrB() {
  local fileNameParse=$1
  SUB='--- a'
  SUB2='+++ b'
  if [[ ${#fileNameParse} -eq 5 ]] && [[ "$fileNameParse" == "$SUB"* ]]; then
    return 0
  elif [[ ${#fileNameParse} -eq 5 ]] && [[ "$fileNameParse" == "$SUB2"* ]]; then
    return 2
  else
    return 1
  fi
}

#Function browser a map which content all the information of the file to be compare
getArrayFileInfo() {
  local num=$4
  local fileName=$3
  local response=''
  local COUNT=${#filesList[@]}

  for ((i = 0; i < "$COUNT"; i++)); do
    IFS="|" read -r -a arr <<<"${filesList[i]}"
    if [[ ${arr[0]} = "$fileName" ]]; then
      response="${arr[num]}"
      break
    fi
  done
  echo "$response"
}

#Function get the line has changed and add into .diff file
getModifFromFile() {
  local -n _fileContent=$1
  local line=$2
  local specialChar='s@^[^0-9]*\([0-9]\+\).*@\1@'
  if [[ $line == "" ]]; then
    local linePosition=1
  else
    local linePosition=$(echo "$line" | sed "$specialChar")
  fi

  local countOfLine=0
  local length=${#_fileContent[@]}
  local firstHash=0

  echo "LINE POSITION +> $linePosition"
  for ((l = "$linePosition" - 1; l < "$length"; )); do
    local lineChangedData=${_fileContent[l]}

    if [[ $firstHash -lt 2 ]] && lineStartByHeaderHash "$lineChangedData"; then
      firstHash=$((firstHash + 1))
    fi

    if [[ $firstHash -eq 0 ]]; then
      l=$((l - 1))
    elif [[ $firstHash -eq 2 ]]; then
      break
    else
      echo "$lineChangedData" >>"$MERGE_PATH"
      l=$((l + 1))
    fi
    countOfLine=$((countOfLine + 1))
  done

  echo "linePosition: $((linePosition - 1)) length: $length end L: $l"
  if [[ $l -eq $length ]]; then
    read -p 'isEnd ?: ' isEnd
    return 0
  fi
  return 1
}

printLineInfo() {
  local args=("$@")

  local linePosition=${args[0]}
  local line=${args[1]}
  local previousLine=${args[2]}
  local endOfFile=false
  local nextLineIsDiff=${args[4]}
  local fileExtractDataPath=${args[5]}

  if [[ ${args[3]} == 0 ]]; then
    endOfFile=true
  fi
  {
    echo -e "\n\n---------------\tPOS [>$linePosition<]"
    echo -e "---------------\tMAIN LINE [[>$line<]]"
    echo -e "---------------\tMAIN LINE LENGTH [[>${#line}<]]"
    echo -e "---------------\tPREVIOUS LINE [[>$previousLine<]]"
    echo -e "---------------\tIS_END_OF_FILE [>$endOfFile<]"
    echo -e "---------------\tNEST_LINE_IS_DIFF [>$nextLineIsDiff<]"
    echo -e "---------------\tFILE_TO_EXTRACT_DATA [>$fileExtractDataPath<]"
  }
  #    } >>"$GIT_DIFF_BRANCH_PATH"
}

getFileContentFromBBranch() {
  local bBranch=$1
  local filePath=$2
  local fileContentFromBBranch=$(git show "$bBranch:$filePath")
  echo "$fileContentFromBBranch"
}

mainLoop() {
  local -n _addFilesArray=$1
  local -n _modFilesArray=$2
  local -n _differencesFileData=$3

  #  echo "--------------------------"
  #  displayArray "${_addFilesArray[@]}"
  #  displayArray "${_modFilesArray[@]}"
  #  echo "--------------------------"

  local countOfLine=0
  local nextLineIsDiff=false
  local fileNameParse=''
  local length=${#_differencesFileData[@]}
  local diffFilePosName=3
  local FileExtractDatPos=1
  local passOnce=1
  local endOfFile=1
  local fileExtractDataPath=''
  local isNewFile=1
  declare -a fileContent

  for ((dl = 0; dl < "$length"; dl++)); do
    line=${_differencesFileData[dl]}
    local previousLine=${_differencesFileData[$((dl - 1))]}
    printLineInfo $((dl + 1)) "$line" "$previousLine" "$endOfFile" "$nextLineIsDiff" "$fileExtractDataPath"

    #____________________________________________________________________________________________________________________#

    lineContentGitAnnotationAdd "$line" "$previousLine"
    local isGitAnnotationAdd=$?
    local isGitAnnotation=1
    if [[ $isGitAnnotationAdd -eq 1 ]]; then
      lineContentGitAnnotation "$line"
      local isGitAnnotation=$?
    fi

    local isTeamAnnotation=1
    lineContentGitAnnotation "$previousLine"
    local isPrvGitAnnotation=$?
    local isPrvTeamAnnotation=1
    local isContentFileName=1

    if [[ endOfFile -eq 1 ]] && [[ "$isGitAnnotation" == 1 ]]; then
      lineTeamAnnotationHash "$line"
      isTeamAnnotation=$?
    fi
    if [[ endOfFile -eq 1 ]] && [[ "$isPrvGitAnnotation" == 1 ]]; then
      lineTeamAnnotationHash "$previousLine"
      isPrvTeamAnnotation=$?
    fi
    if [[ $passOnce -eq 1 ]] || [[ "$endOfFile" == 0 ]]; then
      lineContentFileName "$line"
      isContentFileName=$?
    fi
    echo -e "--------------\tisGitAnnotation: $isGitAnnotation \tisTeamAnnotation: $isTeamAnnotation \tisPrvGitAnnotation: $isPrvGitAnnotation \tisPrvTeamAnnotation: $isPrvTeamAnnotation \tisContentFileName: $isContentFileName \tisGitAnnotationAdd: $isGitAnnotationAdd"
    #____________________________________________________________________________________________________________________#

    if [[ $isContentFileName -eq 0 && $isGitAnnotationAdd -eq 1 ]] || [[ $isGitAnnotationAdd -ne 1 && $isNewFile -eq 1 ]]; then
      echo "I PASS HERE"
      local fileNameParse

      if (("$isGitAnnotationAdd" == 0)); then
        fileNameParse=$previousLine
      elif (("$isGitAnnotationAdd" == 2)); then
        fileNameParse=$line
      else
        fileNameParse=$line
      fi

      fileName="$(basename -- "$fileNameParse")"
      filePath="${fileNameParse:6}"
      fileExtractDataPath="$filePath"
      echo "fileNameParse => '$fileNameParse'"
      echo "fileName => $fileName"
      echo "filePath => $filePath"

      lineFileIsBranchAOrB fileNameParse
      local branchNum=$?
      local branchToExtractFileData=$branchA
      if [[ "$branchNum" == 2 ]]; then
        branchToExtractFileData=$branchB
      fi
      echo "branchToExtractFileData => $branchToExtractFileData"

      index=0
      fileContent=()
      while read line; do
        fileContent[$index]="$line"
        index=$(("$index" + 1))
      done < <(git show "$branchToExtractFileData:$filePath")

      endOfFile=1
      passOnce=0
      isNewFile=0
      read -p 'goOn ?: ' goOn
    elif $nextLineIsDiff && [[ $endOfFile -eq 1 ]]; then
      local lineParam="$line"
      if [[ $isNewFile -eq 0 ]]; then
        lineParam=""
      fi

      getModifFromFile fileContent "$lineParam"
      endOfFile=$?
      if [[ $isNewFile -eq 0 ]]; then
        isNewFile="$endOfFile"
      fi
      nextLineIsDiff=false
    elif [[ $isGitAnnotation -eq 0 || $isNewFile -eq 0 ]] ||
      [[ $dl -ge 0 && $isPrvGitAnnotation -eq 1 && $isTeamAnnotation -eq 0 ]]; then
      nextLineIsDiff=true
    else
      nextLineIsDiff=false
    fi

    countOfLine=$((countOfLine + 1))
  done

}

getAddFilesArray() {
  addFilesString=$(git diff --name-only --diff-filter=AD "$branchA" "$branchB" -- "$folderFilesPath" | tr "\n" " ")
  echo "$addFilesString"
}

getModifFilesArray() {
  modFilesString=$(git diff --name-only "$branchA" "$branchB" -- "$folderFilesPath" | tr "\n" " ")
  echo "$modFilesString"
}

executeAlgorithm() {
  setFilesDifference "$branchA" "$branchB" "$folderFilesPath"

  declare -a addFilesArray=($(getAddFilesArray))
  declare -a modFilesArray=($(getModifFilesArray))

  local index=0
  declare -a differencesFileData
  IFS=''
  while read line; do
    differencesFileData[$index]="$line"
    index=$(("$index" + 1))
  done <$DIFFERENCE_PATH

  mainLoop addFilesArray modFilesArray differencesFileData
}

setFilesDifference() {
  {
    git diff "$branchA" "$branchB" -- "$folderFilesPath" | ./scripts/gitdiff-with-line >"$DIFFERENCE_PATH"
  } || {
    echo "Error: git diff $branchA $branchB having a issue, please confirm that the branches are correct"
  }
}

#Function to create the different main folders
createDiffFolder() {
  local deleteDir
  local createDirFile
  local createLogPath
  if [ -d "$LOG_PATH" ]; then
    rm -rf "$DIR"
    deleteDir="The folder $DIR has been deleted"
  fi

  mkdir -p "$DIR_FILES"
  createDirFile="The folder $DIR_FILES has been created"
  mkdir -p "$LOG_PATH"
  createLogPath="The folder $LOG_PATH has been created"
  touch "$MERGE_PATH"

  touch $GIT_DIFF_BRANCH_PATH
  {
    echo "$deleteDir"
    echo "$createDirFile"
    echo "$createLogPath"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

help() {
  echo ./gitdiff-branch-data '{ branch to be compare A }' '{branch to compareB}'
  exit 0
}

welcome() {
  echo -e "Welcome to Git Diff Branches this script will take two branches collect the differences between the to branches."
  echo -e "The script will create 'diff-project' folder and add the information of each modified file into a file extension '.diff.txt'.\n"
}

main() {
  welcome
  createDiffFolder
  local branchA=$1
  local branchB=$2
  local folderFilesPath=$3

  if [[ $1 == "--help" ]]; then
    help
  fi

  # asking for the name of the branches to be compared
  if [[ -z "$branchA" ]]; then
    read -rp 'What is the name of the branch A ?: ' branchA
  elif [[ -z "$branchB" ]]; then
    read -rp 'What is the name of the branch B ?: ' branchB
  elif [[ -z "$folderFilesPath" ]]; then
    read -rp 'What is the name of the folder where there is the files ?: ' folderFilesPath
  fi

  echo "Parameter #1 is $branchA"
  echo "Parameter #2 is $branchB"
  echo "Parameter #3 is $folderFilesPath"

  {
    echo "Parameter #1 is $branchA"
    echo "Parameter #2 is $branchB"
    echo "Parameter #3 is $folderFilesPath"
  } >>$GIT_DIFF_BRANCH_PATH

  sleep 1

  if [[ -z "$branchA" || -z "$branchB" || -z "$folderFilesPath" ]]; then
    help
  fi

  executeAlgorithm "$branchA" "$branchB" "$folderFilesPath"
}

main "$1" "$2" "$3"
