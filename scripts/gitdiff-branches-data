#!/bin/bash

## Static global with the path ot the subfolder diff-project
LOG_PATH='diff-project/log'
DIR='diff-project'
DIR_FILES='diff-project/files'

GIT_DIFF_BRANCHES='git-diff-branches.log'
GIT_DIFF_BRANCH_PATH="$LOG_PATH"/"$GIT_DIFF_BRANCHES"

DIFFERENCE='differences.log'
DIFFERENCE_PATH="$LOG_PATH"/"$DIFFERENCE"

MERGE_FILE='git-diff-merge-file-mod.txt'
MERGE_PATH="$LOG_PATH"/"$MERGE_FILE"

#Function to check if the line receive as param content the git annotation of differences:
#@@ -
lineContentGitAnnotation() {
  local line=$1

  SUB='@@ -'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# : ##
lineTeamAnnotationHash() {
  local line=$1
  local numberList='s/[0-9]//g'

  line=$(echo "$line" | sed "$numberList")
  SUB=': ##'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
#+++ b/
lineContentFileName() {
  local line=$1

  SUB='+++ b/'
  if [[ "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineEndByHeaderNewLineHash() {
  local line=$1
  local length=${#line}
  SUB=$'\n'"##"
  SUB2=$'\r'"##"

  if [[ "$line" == *"$SUB" || "$line" == *"$SUB2" ]]; then
    return 0
  fi
  return 1
}

#Function to check if the line receive as param content the annotation:
# ##
lineStartByHeaderHash() {
  local line=$1
  local length=${#line}
  SUB='##'

  if [[ $length -eq 2 && "$line" == "$SUB"* ]]; then
    return 0
  fi
  return 1
}

lineContentGitAnnotationAdd() {
  local line=$1
  SUB='--- /dev/null'
  SUB2='+++ /dev/null'

  if [[ ${#line} -eq 13 ]] && [[ "$line" == "$SUB"* ]]; then
    return 0
  elif [[ ${#line} -eq 13 ]] && [[ "$line" == "$SUB2"* ]]; then
    return 2
  else
    return 1
  fi
}

#Function get the line has changed and add into .diff file
transferAllFileContent() {
  local -n _fileContent=$1

  local countOfLine=0
  local length=${#_fileContent[@]}

  for ((l = 0; l < "$length"; l++)); do
    local lineChangedData=${_fileContent[l]}
    echo "$lineChangedData" >>"$MERGE_PATH"
    countOfLine=$((countOfLine + 1))
  done

  echo "length: $length end L: $l" >>"$GIT_DIFF_BRANCH_PATH"
}

#Function get the line has changed and add into .diff file
getModifFromFile() {
  local -n _fileContent=$1
  local line=$2
  local specialChar='s@^[^0-9]*\([0-9]\+\).*@\1@'
  if [[ "$line" == "" ]]; then
    local linePosition=1
  else
    local linePosition=$(echo "$line" | sed "$specialChar")
  fi

  local countOfLine=0
  local length=${#_fileContent[@]}
  local firstHash=0

  for ((l = "$linePosition" - 1; l < "$length"; )); do
    local lineChangedData=${_fileContent[l]}

    if [[ $firstHash -lt 2 ]] && lineStartByHeaderHash "$lineChangedData"; then
      firstHash=$((firstHash + 1))
    fi

    if [[ $firstHash -eq 0 ]]; then
      l=$((l - 1))
    elif [[ $firstHash -eq 2 ]]; then
      break
    else
      echo "$lineChangedData" >>"$MERGE_PATH"
      l=$((l + 1))
    fi
    countOfLine=$((countOfLine + 1))
  done

  echo "linePosition: $((linePosition - 1)) length: $length end L: $l" >>"$GIT_DIFF_BRANCH_PATH"
  if [[ $l -eq $length ]]; then
    return 0
  fi
  return 1
}

printLineInfo() {
  local args=("$@")

  local linePosition=${args[0]}
  local line=${args[1]}
  local previousLine=${args[2]}
  local endOfFile=false
  local nextLineIsDiff=${args[4]}
  local fileExtractDataPath=${args[5]}

  if [[ ${args[3]} == 0 ]]; then
    endOfFile=true
  fi
  {
    echo -e "\n\n---------------\tPOS [>$linePosition<]"
    echo -e "---------------\tMAIN LINE [[>$line<]]"
    echo -e "---------------\tMAIN LINE LENGTH [[>${#line}<]]"
    echo -e "---------------\tPREVIOUS LINE [[>$previousLine<]]"
    echo -e "---------------\tIS_END_OF_FILE [>$endOfFile<]"
    echo -e "---------------\tNEST_LINE_IS_DIFF [>$nextLineIsDiff<]"
    echo -e "---------------\tFILE_TO_EXTRACT_DATA [>$fileExtractDataPath<]"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

mainLoop() {
  local -n _differencesFileData=$1

  local countOfLine=0
  local nextLineIsDiff=false
  local fileNameParse=''
  local length=${#_differencesFileData[@]}
  local passOnce=1
  local endOfFile=1
  local fileExtractDataPath=''
  local isNewFile=1
  declare -a fileContent

  for ((dl = 0; dl < "$length"; dl++)); do
    line=${_differencesFileData[dl]}
    local previousLine=${_differencesFileData[$((dl - 1))]}
    printLineInfo $((dl + 1)) "$line" "$previousLine" "$endOfFile" "$nextLineIsDiff" "$fileExtractDataPath"

    #____________________________________________________________________________________________________________________#

    lineContentGitAnnotationAdd "$line" "$previousLine"
    local isGitAnnotationAdd=$?
    local isGitAnnotation=1
    if [[ $isGitAnnotationAdd -eq 1 ]]; then
      lineContentGitAnnotation "$line"
      local isGitAnnotation=$?
    fi

    local isTeamAnnotation=1
    lineContentGitAnnotation "$previousLine"
    local isPrvGitAnnotation=$?
    local isPrvTeamAnnotation=1
    local isContentFileName=1

    if [[ endOfFile -eq 1 ]] && [[ "$isGitAnnotation" == 1 ]]; then
      lineTeamAnnotationHash "$line"
      isTeamAnnotation=$?
    fi
    if [[ endOfFile -eq 1 ]] && [[ "$isPrvGitAnnotation" == 1 ]]; then
      lineTeamAnnotationHash "$previousLine"
      isPrvTeamAnnotation=$?
    fi
    if [[ $passOnce -eq 1 ]] || [[ "$endOfFile" == 0 ]]; then
      lineContentFileName "$line"
      isContentFileName=$?
    fi
    echo -e "--------------\tisGitAnnotation: $isGitAnnotation \tisTeamAnnotation: $isTeamAnnotation \tisPrvGitAnnotation: $isPrvGitAnnotation \tisPrvTeamAnnotation: $isPrvTeamAnnotation \tisContentFileName: $isContentFileName \tisGitAnnotationAdd: $isGitAnnotationAdd isNewFile $isNewFile" >>"$GIT_DIFF_BRANCH_PATH"
    #____________________________________________________________________________________________________________________#

    if [[ $isContentFileName -eq 0 && $isGitAnnotationAdd -eq 1 ]] || [[ $isGitAnnotationAdd -ne 1 && $isNewFile -eq 1 ]]; then
      local fileNameParse
      if [[ $isGitAnnotationAdd -eq 2 ]]; then
        fileNameParse=$previousLine
      else
        fileNameParse=$line
      fi

      fileName="$(basename -- "$fileNameParse")"
      filePath="${fileNameParse:6}"
      fileExtractDataPath="$filePath"


      local branchToExtractFileData=$branchB
      if [[ $isGitAnnotationAdd -eq 2 ]]; then
        branchToExtractFileData=$branchA
      fi

      git show "$branchToExtractFileData:$filePath" >"$fileName"
      index=0
      fileContent=()
      while read line || [ -n "$line" ]; do
        if lineEndByHeaderNewLineHash "$line"; then
          IFS=$'\n'$'\r' read -a cutLine <<<"$line"
          fileContent[$index]=${cutLine[0]}
          index=$(("$index" + 1))
          fileContent[$index]=${cutLine[1]}
        else
          fileContent[$index]="$line"
        fi
        index=$(("$index" + 1))
      done < <(git show "$branchToExtractFileData:$filePath")

      endOfFile=1
      passOnce=0
      if [[ $isGitAnnotationAdd -ne 1 ]]; then
        isNewFile=0
      fi
      read -p "$fileExtractDataPath  ": testInfo
    elif $nextLineIsDiff && [[ $endOfFile -eq 1 ]]; then
      if [[ $isNewFile -eq 0 ]]; then
        transferAllFileContent fileContent
        isNewFile=1
        endOfFile=0
      else
        getModifFromFile fileContent "$line"
        endOfFile=$?
      fi
      nextLineIsDiff=false
    elif [[ $isGitAnnotation -eq 0 || $isNewFile -eq 0 ]] ||
      [[ $dl -ge 0 && $isPrvGitAnnotation -eq 1 && $isTeamAnnotation -eq 0 ]]; then
      nextLineIsDiff=true
    else
      nextLineIsDiff=false
    fi

    countOfLine=$((countOfLine + 1))
  done

}

#getAddFilesArray() {
#  addFilesString=$(git diff --name-only --diff-filter=AD "$branchA" "$branchB" -- "$folderFilesPath" | tr "\n" " ")
#  echo "$addFilesString"
#}
#
#getModifFilesArray() {
#  modFilesString=$(git diff --name-only "$branchA" "$branchB" -- "$folderFilesPath" | tr "\n" " ")
#  echo "$modFilesString"
#}

setFilesDifference() {
  {
    git diff "$branchA" "$branchB"  -- "$folderFilesPath" -- '*.txt' | ./scripts/gitdiff-with-line >"$DIFFERENCE_PATH"
  } || {
    echo "Error: git diff $branchA $branchB having a issue, please confirm that the branches are correct"
  }
}

executeAlgorithm() {
  setFilesDifference "$branchA" "$branchB" "$folderFilesPath"

  local index=0
  declare -a differencesFileData
  IFS=''
  while read line; do
    differencesFileData[$index]="$line"
    index=$(("$index" + 1))
  done <$DIFFERENCE_PATH

  mainLoop differencesFileData
}

#Function to create the different main folders
createDiffFolder() {
  local deleteDir
  local createDirFile
  local createLogPath
  if [ -d "$LOG_PATH" ]; then
    rm -rf "$DIR"
    deleteDir="The folder $DIR has been deleted"
  fi

  mkdir -p "$DIR_FILES"
  createDirFile="The folder $DIR_FILES has been created"
  mkdir -p "$LOG_PATH"
  createLogPath="The folder $LOG_PATH has been created"
  touch "$MERGE_PATH"

  touch $GIT_DIFF_BRANCH_PATH
  {
    echo "$deleteDir"
    echo "$createDirFile"
    echo "$createLogPath"
  } >>"$GIT_DIFF_BRANCH_PATH"
}

help() {
  echo ./gitdiff-branch-data '{ branch to be compare A }' '{branch to compareB}  {folder where are the file}'
  exit 0
}

welcome() {
  echo -e "Welcome to Git Diff Branches this script will take two branches collect the differences between the to branches."
  echo -e "The script will create 'diff-project' folder and add the information of each modified file into a file extension '.diff.txt'.\n"
}

main() {
  welcome
  createDiffFolder
  local branchA=$1
  local branchB=$2
  local folderFilesPath=$3

  if [[ $1 == "--help" ]]; then
    help
  fi

  # asking for the name of the branches to be compared
  if [[ -z "$branchA" ]]; then
    read -rp 'What is the name of the branch A ?: ' branchA
  elif [[ -z "$branchB" ]]; then
    read -rp 'What is the name of the branch B ?: ' branchB
  elif [[ -z "$folderFilesPath" ]]; then
    read -rp 'What is the name of the folder where there is the files ?: ' folderFilesPath
  fi

  echo "Parameter #1 is $branchA"
  echo "Parameter #2 is $branchB"
  echo "Parameter #3 is $folderFilesPath"

  {
    echo "Parameter #1 is $branchA"
    echo "Parameter #2 is $branchB"
    echo "Parameter #3 is $folderFilesPath"
  } >>$GIT_DIFF_BRANCH_PATH

  sleep 1

  if [[ -z "$branchA" || -z "$branchB" || -z "$folderFilesPath" ]]; then
    help
  fi

  executeAlgorithm "$branchA" "$branchB" "$folderFilesPath"
}

main "$1" "$2" "$3"
